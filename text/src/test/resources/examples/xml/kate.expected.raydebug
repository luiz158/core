preprocessor(<?xml version="1.0" encoding="UTF-8"?>)
doctype(<!DOCTYPE language SYSTEM "language.dtd">)
tag(<language) attribute_name(name)operator(=)string<delimiter(")content(Eiffel)delimiter(")> attribute_name(version)operator(=)string<delimiter(")content(1.02)delimiter(")> attribute_name(kateversion)operator(=)string<delimiter(")content(2.1)delimiter(")> attribute_name(section)operator(=)string<delimiter(")content(Sources)delimiter(")> attribute_name(extensions)operator(=)string<delimiter(")content(*.e)delimiter(")> attribute_name(mimetype)operator(=)string<delimiter(")content(text/x-eiffel-src)delimiter(")>tag(>)
        tag(<highlighting>)
                tag(<list) attribute_name(name)operator(=)string<delimiter(")content(keywords)delimiter(")>tag(>)
                        tag(<item>) plain(indexing )tag(</item>)
                        tag(<item>) plain(class )tag(</item>)
                        tag(<item>) plain(inherit )tag(</item>)
                        tag(<item>) plain(creation )tag(</item>)
                        tag(<item>) plain(feature )tag(</item>)
                        tag(<item>) plain(rename )tag(</item>)
                        tag(<item>) plain(redefine )tag(</item>)
                        tag(<item>) plain(undefine )tag(</item>)
                        tag(<item>) plain(select )tag(</item>)
                        tag(<item>) plain(export )tag(</item>)
                        tag(<item>) plain(local )tag(</item>)
                        tag(<item>) plain(deferred )tag(</item>)
                        tag(<item>) plain(do )tag(</item>)
                        tag(<item>) plain(is )tag(</item>)
                        tag(<item>) plain(once )tag(</item>)
                        tag(<item>) plain(alias )tag(</item>)
                        tag(<item>) plain(external )tag(</item>)
                        tag(<item>) plain(rescue )tag(</item>)
                        tag(<item>) plain(debug )tag(</item>)
                        tag(<item>) plain(if )tag(</item>)
                        tag(<item>) plain(inspect )tag(</item>)
                        tag(<item>) plain(from )tag(</item>)
                        tag(<item>) plain(else )tag(</item>)
                        tag(<item>) plain(elseif )tag(</item>)
                        tag(<item>) plain(when )tag(</item>)
                        tag(<item>) plain(until )tag(</item>)
                        tag(<item>) plain(loop )tag(</item>)
                        tag(<item>) plain(then )tag(</item>)
                        tag(<item>) plain(obsolete )tag(</item>)
                        tag(<item>) plain(end )tag(</item>)
                tag(</list>)
                tag(<list) attribute_name(name)operator(=)string<delimiter(")content(assertions)delimiter(")>tag(>)
                        tag(<item>) plain(check )tag(</item>)
                        tag(<item>) plain(ensure )tag(</item>)
                        tag(<item>) plain(require )tag(</item>)
                        tag(<item>) plain(variant )tag(</item>)
                        tag(<item>) plain(invariant )tag(</item>)
                tag(</list>)
                tag(<contexts>)
                        tag(<context) attribute_name(attribute)operator(=)string<delimiter(")content(Normal Text)delimiter(")> attribute_name(lineEndContext)operator(=)string<delimiter(")content(#stay)delimiter(")> attribute_name(name)operator(=)string<delimiter(")content(Normal)delimiter(")>tag(>)
                                tag(<keyword) attribute_name(attribute)operator(=)string<delimiter(")content(Keyword)delimiter(")> attribute_name(context)operator(=)string<delimiter(")content(#stay)delimiter(")> attribute_name(String)operator(=)string<delimiter(")content(keywords)delimiter(")>tag(/>)
                                tag(<Float) attribute_name(attribute)operator(=)string<delimiter(")content(Float)delimiter(")> attribute_name(context)operator(=)string<delimiter(")content(#stay)delimiter(")>tag(/>)
                                tag(<Int) attribute_name(attribute)operator(=)string<delimiter(")content(Decimal)delimiter(")> attribute_name(context)operator(=)string<delimiter(")content(#stay)delimiter(")>tag(/>)
                                tag(<RegExpr) attribute_name(attribute)operator(=)string<delimiter(")content(Char)delimiter(")> attribute_name(context)operator(=)string<delimiter(")content(#stay)delimiter(")> attribute_name(String)operator(=)string<delimiter(")content('.')delimiter(")>tag(/>)
                                tag(<DetectChar) attribute_name(attribute)operator(=)string<delimiter(")content(String)delimiter(")> attribute_name(context)operator(=)string<delimiter(")content(String)delimiter(")> attribute_name(char)operator(=)string<delimiter(")entity(&quot;)delimiter(")>tag(/>)
                                tag(<Detect2Chars) attribute_name(attribute)operator(=)string<delimiter(")content(Comment)delimiter(")> attribute_name(context)operator(=)string<delimiter(")content(Comment)delimiter(")> attribute_name(char)operator(=)string<delimiter(")content(-)delimiter(")> attribute_name(char1)operator(=)string<delimiter(")content(-)delimiter(")>tag(/>)
                                tag(<keyword) attribute_name(attribute)operator(=)string<delimiter(")content(Assertions)delimiter(")> attribute_name(context)operator(=)string<delimiter(")content(#stay)delimiter(")> attribute_name(String)operator(=)string<delimiter(")content(assertions)delimiter(")>tag(/>)
                        tag(</context>)
                        tag(<context) attribute_name(attribute)operator(=)string<delimiter(")content(String)delimiter(")> attribute_name(lineEndContext)operator(=)string<delimiter(")content(#pop)delimiter(")> attribute_name(name)operator(=)string<delimiter(")content(String)delimiter(")>tag(>)
                                tag(<DetectChar) attribute_name(attribute)operator(=)string<delimiter(")content(String)delimiter(")> attribute_name(context)operator(=)string<delimiter(")content(#pop)delimiter(")> attribute_name(char)operator(=)string<delimiter(")entity(&quot;)delimiter(")>tag(/>)
                        tag(</context>)
                        tag(<context) attribute_name(attribute)operator(=)string<delimiter(")content(Comment)delimiter(")> attribute_name(name)operator(=)string<delimiter(")content(Comment)delimiter(")> attribute_name(lineEndContext)operator(=)string<delimiter(")content(#pop)delimiter(")>tag(/>)
                tag(</contexts>)
                tag(<itemDatas>)
                        tag(<itemData) attribute_name(name)operator(=)string<delimiter(")content(Normal Text)delimiter(")> attribute_name(defStyleNum)operator(=)string<delimiter(")content(dsNormal)delimiter(")> tag(/>)
                        tag(<itemData) attribute_name(name)operator(=)string<delimiter(")content(Keyword)delimiter(")>     attribute_name(defStyleNum)operator(=)string<delimiter(")content(dsKeyword)delimiter(")> tag(/>)
                        tag(<itemData) attribute_name(name)operator(=)string<delimiter(")content(Decimal)delimiter(")>     attribute_name(defStyleNum)operator(=)string<delimiter(")content(dsDecVal)delimiter(")> tag(/>)
                        tag(<itemData) attribute_name(name)operator(=)string<delimiter(")content(Float)delimiter(")>       attribute_name(defStyleNum)operator(=)string<delimiter(")content(dsFloat)delimiter(")> tag(/>)
                        tag(<itemData) attribute_name(name)operator(=)string<delimiter(")content(Char)delimiter(")>        attribute_name(defStyleNum)operator(=)string<delimiter(")content(dsChar)delimiter(")> tag(/>)
                        tag(<itemData) attribute_name(name)operator(=)string<delimiter(")content(String)delimiter(")>      attribute_name(defStyleNum)operator(=)string<delimiter(")content(dsString)delimiter(")> tag(/>)
                        tag(<itemData) attribute_name(name)operator(=)string<delimiter(")content(Comment)delimiter(")>     attribute_name(defStyleNum)operator(=)string<delimiter(")content(dsComment)delimiter(")> tag(/>)
                        tag(<itemData) attribute_name(name)operator(=)string<delimiter(")content(Assertions)delimiter(")>  attribute_name(defStyleNum)operator(=)string<delimiter(")content(dsOthers)delimiter(")> tag(/>)
                tag(</itemDatas>)
  tag(</highlighting>)
  tag(<general>)
    tag(<comments>)
      tag(<comment) attribute_name(name)operator(=)string<delimiter(")content(singleLine)delimiter(")> attribute_name(start)operator(=)string<delimiter(")content(--)delimiter(")> tag(/>)
    tag(</comments>)
    tag(<keywords) attribute_name(casesensitive)operator(=)string<delimiter(")content(1)delimiter(")> tag(/>)
  tag(</general>)
tag(</language>)
