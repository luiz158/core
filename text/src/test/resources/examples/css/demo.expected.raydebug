comment(/* See http://reference.sitepoint.com/css/content. */)
directive(@media) type(print) operator({)
  tag(a)operator([)attribute_name(href)operator(])pseudo_class(:after) operator({)
    key(content)operator(:) string<delimiter(")content(<)delimiter(")> function<delimiter(attr()content(href)delimiter(\))> string<delimiter(")content(>)delimiter(")>operator(;)
  operator(})
operator(})

tag(a)pseudo_class(:link)pseudo_class(:after)operator(,) tag(a)pseudo_class(:visited)pseudo_class(:after) operator({)key(content)operator(:)string<delimiter(")content( ()delimiter(")> function<delimiter(attr()content(href)delimiter(\))> string<delimiter(")content(\))delimiter(")>operator(;)key(font-size)operator(:)float(90%)operator(;)operator(})
tag(ol) operator({)
  key(counter-reset)operator(:) value(item)operator(;)
  key(margin)operator(:) float(0)operator(;)
  key(padding)operator(:) float(0)operator(;)
operator(})
tag(ol)operator(>)tag(li) operator({)
  key(counter-increment)operator(:) value(item)operator(;)
  key(list-style)operator(:) value(none) value(inside)operator(;)
operator(})
tag(ol)operator(>)tag(li)pseudo_class(:before) operator({)
  key(content)operator(:) function<delimiter(counters()content(item, ".")delimiter(\))> string<delimiter(")content( - )delimiter(")>operator(;)
operator(})

tag(body) operator({)
  key(counter-reset)operator(:) value(chapter)operator(;)
operator(})
tag(h1) operator({)
  key(counter-increment)operator(:) value(chapter)operator(;)
  key(counter-reset)operator(:) value(section)operator(;)
operator(})
tag(h2) operator({)
  key(counter-increment)operator(:) value(section)operator(;)
operator(})
tag(h1)pseudo_class(:before) operator({)
  key(content)operator(:) string<delimiter(")content(Chapter )delimiter(")> function<delimiter(counter()content(chapter)delimiter(\))> string<delimiter(")content(: )delimiter(")>operator(;)
operator(})
tag(h2)pseudo_class(:before) operator({)
  key(content)operator(:) function<delimiter(counter()content(chapter)delimiter(\))> string<delimiter(")content(.)delimiter(")> function<delimiter(counter()content(section)delimiter(\))> string<delimiter(")content( )delimiter(")>operator(;)
operator(})

tag(blockquote) tag(p) operator({)
  key(margin)operator(:) float(0)operator(;)
  key(text-indent)operator(:) float(1em)operator(;)
  key(quotes)operator(:) string<delimiter(")content(\\201c)delimiter(")> string<delimiter(")content(\\201d)delimiter(")>operator(;)
operator(})
tag(blockquote) tag(p)pseudo_class(:first-of-type) operator({)
  key(text-indent)operator(:) float(0)operator(;)
operator(})
tag(blockquote) tag(p)pseudo_class(::before) operator({)
  key(content)operator(:) value(open-quote)operator(;)
operator(})
tag(blockquote) tag(p)pseudo_class(::after) operator({)
  key(content)operator(:) value(no-close-quote)operator(;)
operator(})
tag(blockquote) tag(p)pseudo_class(:last-of-type)pseudo_class(::after) operator({)
  key(content)operator(:) value(close-quote)operator(;)
operator(})