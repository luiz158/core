head<head(---)> comment(# From http://thresholdstate.com/articles/4312/the-textile-reference-manual)
key(name)operator(:) string<content(paragraph)>
key(desc)operator(:) string<content(Paragraphs are separated by blank lines. Each paragraph of text is transformed into a XHTML <p> paragraph block.)>
key(in)operator(:) string<delimiter(|-)content(
  A paragraph.
  
  Another paragraph.)>
key(html)operator(:) string<delimiter(|-)content(
  <p>A paragraph.</p>
  <p>Another paragraph.</p>)>
head<head(---)>
key(name)operator(:) string<content(line breaks)>
key(desc)operator(:) string<content(Line breaks within paragraphs are transformed into XHTML line breaks.)>
key(in)operator(:) string<delimiter(|-)content(
  A paragraph with
  a line break.)>
key(html)operator(:) string<delimiter(|-)content(
  <p>A paragraph with<br />
  a line break.</p>)>
head<head(---)>
key(name)operator(:) string<content(xhtml tags)>
key(desc)operator(:) string<content(Simple XHTML tags may be included in a paragraph.)>
key(in)operator(:) string<content(Here's some <b>bold</b> text.)>
key(html)operator(:) string<content(<p>Here&#8217;s some <b>bold</b> text.</p>)>
head<head(---)>
key(name)operator(:) string<content(no paragraph tags)>
key(desc)operator(:) string<content(A line beginning with a space will be left untouched, and not wrapped in <p> tags.)>
key(in)operator(:) string<delimiter(")content( No paragraph tags here.)delimiter(")>
key(html)operator(:) string<delimiter(")content(No paragraph tags here.)delimiter(")>
key(valid_html)operator(:) string<content(false)>
head<head(---)>
key(name)operator(:) string<content(smart quotes)>
key(desc)operator(:) string<content(Single and double typewriter quotation marks ' and " are transformed into typographically correct “curly” quote marks.)>
key(in)operator(:) string<content('"Proceed!" said he to the host.')>
key(html)operator(:) string<content('<p>&#8220;Proceed!&#8221; said he to the host.</p>')>
head<head(---)>
key(name)operator(:) string<content(smart quotes 2)>
key(in)operator(:) string<delimiter(")content('Proceed!' said he to the host.)delimiter(")>
key(html)operator(:) string<delimiter(")content(<p>&#8216;Proceed!&#8217; said he to the host.</p>)delimiter(")>
head<head(---)>
key(name)operator(:) string<content(nested quotation marks)>
key(desc)operator(:) string<content(Single and double quotation marks may be nested one inside the other.)>
key(in)operator(:) string<delimiter(|-)content(
  "'I swear, captain,' replied I.")>
key(html)operator(:) string<delimiter(|-)content(
  <p>&#8220;&#8216;I swear, captain,&#8217; replied I.&#8221;</p>)>
head<head(---)>
key(name)operator(:) string<content(nested quotation marks 2)>
key(in)operator(:) string<delimiter(|-)content(
  '"I swear, captain," replied I.')>
key(html)operator(:) string<delimiter(|-)content(
  <p>&#8216;&#8220;I swear, captain,&#8221; replied I.&#8217;</p>)>
head<head(---)>
key(name)operator(:) string<content(apostrophe glyphs)>
key(desc)operator(:) string<content(Single quotation marks ' will be turned into apostrophe glyphs when used as such.)>
key(in)operator(:) string<content(Greengrocers' apostrophe's.)>
key(html)operator(:) string<content(<p>Greengrocers&#8217; apostrophe&#8217;s.</p>)>
head<head(---)>
key(name)operator(:) string<content(em-dash glyphs)>
key(desc)operator(:) string<content(Double -- dashes become an em-dash glyph.)>
key(in)operator(:) string<content(You know the Italian proverb -- Chi ha compagno ha padrone.)>
key(html)operator(:) string<content(<p>You know the Italian proverb &#8212; Chi ha compagno ha padrone.</p>)>
head<head(---)>
key(name)operator(:) string<content(em-dash glyphs 2)>
key(in)operator(:) string<content(You know the Italian proverb--Chi ha compagno ha padrone.)>
key(html)operator(:) string<content(<p>You know the Italian proverb&#8212;Chi ha compagno ha padrone.</p>)>
head<head(---)>
key(name)operator(:) string<content(en-dash glyphs)>
key(desc)operator(:) string<content(Single - dashes are replaced with en-dashes.)>
key(in)operator(:) string<content(You know the Italian proverb - Chi ha compagno ha padrone.)>
key(html)operator(:) string<content(<p>You know the Italian proverb &#8211; Chi ha compagno ha padrone.</p>)>
head<head(---)>
key(name)operator(:) string<content(ellipsis character)>
key(desc)operator(:) string<content(Three period marks become an ellipsis character.)>
key(in)operator(:) string<content(Meanwhile...)>
key(html)operator(:) string<content(<p>Meanwhile&#8230;</p>)>
head<head(---)>
key(name)operator(:) string<content(dimension character)>
key(desc)operator(:) string<content(An “x” is replaced with the dimension character when used between numbers.)>
key(in)operator(:) string<content(1 x 2 x 3 = 6)>
key(html)operator(:) string<content(<p>1 &#215; 2 &#215; 3 = 6</p>)>
head<head(---)>
key(name)operator(:) string<content(dimension character 2)>
key(in)operator(:) string<content(1x2x3 = 6)>
key(html)operator(:) string<content(<p>1&#215;2&#215;3 = 6</p>)>
head<head(---)>
key(name)operator(:) string<content(trademark register copyright)>
key(desc)operator(:) string<content(Trademark, Registered and Copyright symbols are represented by their common plain text equivalents.)>
key(in)operator(:) string<content(Registered(r\) Trademark(tm\) Copyright (c\).)>
key(html)operator(:) string<content(<p>Registered&#174; Trademark&#8482; Copyright &#169;.</p>)>
head<head(---)>
key(name)operator(:) string<content(acronyms)>
key(desc)operator(:) string<content(Acronyms consist of three or more uppercase characters, followed immediately by words in parentheses.)>
key(in)operator(:) string<content(ABC(Always Be Closing\))>
key(html)operator(:) string<content(<p><acronym title="Always Be Closing"><span class="caps">ABC</span></acronym></p>)>
key(no_span_caps_html)operator(:) string<content(<p><acronym title="Always Be Closing">ABC</acronym></p>)>
head<head(---)>
key(name)operator(:) string<content(uppercase)>
key(desc)operator(:) string<content(Uppercase words of three or more characters are enclosed with a special span element.)>
key(in)operator(:) string<content(IBM or HAL)>
key(html)operator(:) string<content(<p><span class="caps">IBM</span> or <span class="caps">HAL</span></p>)>
key(no_span_caps_html)operator(:) string<content(<p>IBM or HAL</p>)>
head<head(---)>
key(name)operator(:) string<content(emphasis)>
key(desc)operator(:) string<content(Emphasis is added with _ underscores.)>
key(in)operator(:) string<content(The _underlying_ cause.)>
key(html)operator(:) string<content(<p>The <em>underlying</em> cause.</p>)>
head<head(---)>
key(name)operator(:) string<content(strong text)>
key(desc)operator(:) string<content(Strong text is indicated by * asterisks.)>
key(in)operator(:) string<content(The *underlying* cause.)>
key(html)operator(:) string<content(<p>The <strong>underlying</strong> cause.</p>)>
head<head(---)>
key(name)operator(:) string<content(italic text)>
key(desc)operator(:) string<content(em is a semantic tag, usually represented by browsers as italic text. To produce italic tags instead, use double underscores.)>
key(in)operator(:) string<content(The __underlying__ cause.)>
key(html)operator(:) string<content(<p>The <i>underlying</i> cause.</p>)>
head<head(---)>
key(name)operator(:) string<content(bold text)>
key(desc)operator(:) string<content(strong is a semantic tag, usually represented by browsers as bold text. To produce bold tags instead, use double asterisks.)>
key(in)operator(:) string<content(The **underlying** cause.)>
key(html)operator(:) string<content(<p>The <b>underlying</b> cause.</p>)>
head<head(---)>
key(name)operator(:) string<content(citation)>
key(desc)operator(:) string<content(Double question marks represent a citation, like the title of a book.)>
key(in)operator(:) string<content(??The Count of Monte Cristo??, by Dumas.)>
key(html)operator(:) string<content(<p><cite>The Count of Monte Cristo</cite>, by Dumas.</p>)>
head<head(---)>
key(name)operator(:) string<content(inserted and deleted text)>
key(desc)operator(:) string<content(Inserted and deleted text is represented by + plus and - minus symbols.)>
key(in)operator(:) string<content(Scratch -that-, replace with +this+.)>
key(html)operator(:) string<content(<p>Scratch <del>that</del>, replace with <ins>this</ins>.</p>)>
head<head(---)>
key(name)operator(:) string<content(subscript)>
key(desc)operator(:) string<content(Subscript text is indicated by ~ tilde characters.)>
key(in)operator(:) string<content(log ~2~ n)>
key(html)operator(:) string<content(<p>log <sub>2</sub> n</p>)>
head<head(---)>
key(name)operator(:) string<content(superscript)>
key(desc)operator(:) string<content(Superscript text is indicated by ^ caret characters.)>
key(in)operator(:) string<content(2 ^x^)>
key(html)operator(:) string<content(<p>2 <sup>x</sup></p>)>
head<head(---)>
key(name)operator(:) string<content(span tag)>
key(desc)operator(:) string<content(Percentage marks will enclose text with a XHTML span tag.)>
key(in)operator(:) string<content(The %underlying% cause.)>
key(html)operator(:) string<content(<p>The <span>underlying</span> cause.</p>)>
head<head(---)>
key(name)operator(:) string<content(code)>
key(desc)operator(:) string<content(To include a short snippet of code such as XHTML or Javascript, surround it with @ “at” symbols. XHTML significant characters within a code phrase will be escaped for display to the reader.)>
key(in)operator(:) string<content(About the @<hr />@ tag.)>
key(html)operator(:) string<content(<p>About the <code>&lt;hr /&gt;</code> tag.</p>)>
head<head(---)>
key(name)operator(:) string<content(links)>
key(desc)operator(:) string<content(Links are represented by double quotes and a colon.)>
key(in)operator(:) string<content('"link text":http://example.com/')>
key(html)operator(:) string<content(<p><a href="http://example.com/">link text</a></p>)>
head<head(---)>
key(name)operator(:) string<content(local links)>
key(desc)operator(:) string<content(The host name may be ommitted for local links.)>
key(in)operator(:) string<content('"link text":/example')>
key(html)operator(:) string<content(<p><a href="/example">link text</a></p>)>
head<head(---)>
key(name)operator(:) string<content(link title)>
key(desc)operator(:) string<content(A title may be placed in (\) parentheses.)>
key(in)operator(:) string<content('"link text(with title\)":http://example.com/')>
key(html)operator(:) string<content(<p><a href="http://example.com/" title="with title">link text</a></p>)>
head<head(---)>
key(name)operator(:) string<content(link alias)>
key(desc)operator(:) string<content(For frequent linking to a single URL, you can specify a link alias with [] square brackets.)>
key(in)operator(:) string<delimiter(|-)content(
  Here's "a link":tstate, and
  "another link":tstate to the same site.
  
  [tstate]http://thresholdstate.com/)>
key(html)operator(:) string<delimiter(|-)content(
  <p>Here&#8217;s <a href="http://thresholdstate.com/">a link</a>, and<br />
  <a href="http://thresholdstate.com/">another link</a> to the same site.</p>)>
head<head(---)>
key(name)operator(:) string<content(image)>
key(desc)operator(:) string<content(Use ! exclamation marks to insert an image tag.)>
key(in)operator(:) string<delimiter(")content(!/img.gif!)delimiter(")>
key(html)operator(:) string<content(<p><img src="/img.gif" alt="" /></p>)>
head<head(---)>
key(name)operator(:) string<content(image 2)>
key(in)operator(:) string<delimiter(")content(!http://thresholdstate.com/img.gif!)delimiter(")>
key(html)operator(:) string<content(<p><img src="http://thresholdstate.com/img.gif" alt="" /></p>)>
head<head(---)>
key(name)operator(:) string<content(image alt)>
key(desc)operator(:) string<content(Use (\) parentheses to include “alt” text.)>
key(in)operator(:) string<delimiter(")content(!/img.gif(alt text\)!)delimiter(")>
key(html)operator(:) string<content(<p><img src="/img.gif" title="alt text" alt="alt text" /></p>)>
head<head(---)>
key(name)operator(:) string<content(image links)>
key(desc)operator(:) string<content(Images may be combined with links by using an !image! in place of the link text.)>
key(in)operator(:) string<delimiter(")content(!/img.gif!:http://textpattern.com/)delimiter(")>
key(html)operator(:) string<content(<p><a href="http://textpattern.com/"><img src="/img.gif" alt="" /></a></p>)>
head<head(---)>
key(name)operator(:) string<content(headers)>
key(desc)operator(:) string<content(Headers are represented by h1., h2., … h6..)>
key(in)operator(:) string<content(h1. Heading 1)>
key(html)operator(:) string<content(<h1>Heading 1</h1>)>
head<head(---)>
key(name)operator(:) string<content(headers 2)>
key(in)operator(:) string<content(h2. Heading 2)>
key(html)operator(:) string<content(<h2>Heading 2</h2>)>
head<head(---)>
key(name)operator(:) string<content(headers 3)>
key(in)operator(:) string<content(h6. Heading 6)>
key(html)operator(:) string<content(<h6>Heading 6</h6>)>
head<head(---)>
key(name)operator(:) string<content(paragraph text)>
key(desc)operator(:) string<delimiter(")content(Paragraph p text is represented by p.. This is the default block type: any paragraph without a block modifier will automatically be enclosed with p tags.)delimiter(")>
key(in)operator(:) string<delimiter(|-)content(
  p. A paragraph.
  Continued.
  
  Also a paragraph.)>
key(html)operator(:) string<delimiter(|-)content(
  <p>A paragraph.<br />
  Continued.</p>
  <p>Also a paragraph.</p>)>
head<head(---)>
key(name)operator(:) string<content(block quote)>
key(desc)operator(:) string<content(bq. indicates a quoted block of text.)>
key(in)operator(:) string<delimiter(|-)content(
  bq. A quotation.
  Continued.
  
  Regular paragraph.)>
key(html)operator(:) string<delimiter(|-)content(
  <blockquote>
  <p>A quotation.<br />
  Continued.</p>
  </blockquote>
  <p>Regular paragraph.</p>)>
head<head(---)>
key(name)operator(:) string<content(block quote citation)>
key(desc)operator(:) string<content(Block quotes may include a citation URL immediately following the period.)>
key(in)operator(:) string<content(bq.:http://thresholdstate.com/ A cited quotation.)>
key(html)operator(:) string<delimiter(|-)content(
  <blockquote cite="http://thresholdstate.com/">
  <p>A cited quotation.</p>
  </blockquote>)>
head<head(---)>
key(name)operator(:) string<content(footnotes)>
key(desc)operator(:) string<content(Footnotes are represented by the fn1., fn2., … block modifiers.)>
key(in)operator(:) string<delimiter(|-)content(
  A footnote reference[1].
  
  fn1. The footnote.)>
key(html)operator(:) string<delimiter(|-)content(
  <p>A footnote reference<sup class="footnote"><a href="#fn1">1</a></sup>.</p>
  <p class="footnote" id="fn1"><sup>1</sup> The footnote.</p>)>
comment(# html: |-)
comment(#   <p>A footnote reference<sup class="footnote"><a href="#fn1216642796463b1223ae29d">1</a></sup>.</p>)
comment(#   <p class="footnote" id="fn1216642796463b1223ae29d"><sup>1</sup> The footnote.</p>)
head<head(---)>
key(name)operator(:) string<content(block code)>
key(desc)operator(:) string<content(Code such as XHTML, Javascript or PHP may be displayed using the bc. “block code” modifier. XHTML significant characters such as < and > will be escaped within code blocks – bc is used for displaying code to the reader, not for executing it.)>
key(note)operator(:) string<content(Note that Textile will interpret any blank lines within the code as indicating the end of the code block. See Extended Blocks below for an explanation of how to display longer blocks of code.)>
key(in)operator(:) string<delimiter(|-)content(
  bc. <script>
  // a Javascript example
  alert("Hello World"\);
  </script>)>
key(html)operator(:) string<delimiter(|-)content(
  <pre><code>&lt;script&gt;
  // a Javascript example
  alert("Hello World"\);
  &lt;/script&gt;</code></pre>)>
head<head(---)>
key(name)operator(:) string<content(preformatted text)>
key(desc)operator(:) string<content(Use the pre. block modifier for pre-formatted text. XHTML significant characters within the block will be escaped.)>
key(note)operator(:) string<content(pre. is almost identical to bc., with the exception that <code>...</code> tags are not used within the <pre> block.)>
key(in)operator(:) string<delimiter(|-)content(
  pre. Pre-formatted
  text)>
key(html)operator(:) string<delimiter(|-)content(
  <pre>Pre-formatted
  text</pre>)>
head<head(---)>
key(name)operator(:) string<content(notextile)>
key(desc)operator(:) string<content(The notextile. block modifier applies no Textile processing at all to a block. Raw XHTML characters are passed through untouched, so this may be used to insert explicit XHTML markup, or execute Javascript or PHP code.)>
key(in)operator(:) string<delimiter(|-)content(
  notextile. <script type="text/javascript">
  document.write("Hello World!"\);
  </script>
  <noscript>Your browser doesn't support Javascript</noscript>)>
key(html)operator(:) string<delimiter(|-)content(
  <script type="text/javascript">
  document.write("Hello World!"\);
  </script>
  <noscript>Your browser doesn't support Javascript</noscript>)>
key(valid_html)operator(:) string<content(false)>
head<head(---)>
key(name)operator(:) string<content(class attribute)>
key(desc)operator(:) string<content(CSS classes are specified with (\) parentheses.)>
key(in)operator(:) string<content(p(myclass\). My classy paragraph.)>
key(html)operator(:) string<content(<p class="myclass">My classy paragraph.</p>)>
head<head(---)>
key(name)operator(:) string<content(id attribute)>
key(desc)operator(:) string<content(CSS IDs are specified with (\) parentheses.)>
key(in)operator(:) string<content(p(#myid\). My ID paragraph.)>
key(html)operator(:) string<content(<p id="myid">My ID paragraph.</p>)>
head<head(---)>
key(name)operator(:) string<content(style attribute)>
key(desc)operator(:) string<content(CSS styles are specified with {} braces.)>
key(in)operator(:) string<content(p{color:red}. Red rum.)>
key(html)operator(:) string<content(<p style="color:red;">Red rum.</p>)>
head<head(---)>
key(name)operator(:) string<content(lang attribute)>
key(desc)operator(:) string<content(Languages are specified with [] brackets.)>
key(in)operator(:) string<content(p[fr-fr]. En français.)>
key(html)operator(:) string<content(<p lang="fr-fr">En français.</p>)>
head<head(---)>
key(name)operator(:) string<content(phrase modifiers)>
key(desc)operator(:) string<content(The same syntax may be applied to phrase modifiers.)>
key(in)operator(:) string<content(A *(myclass\)classy* phrase.)>
key(html)operator(:) string<content(<p>A <strong class="myclass">classy</strong> phrase.</p>)>
head<head(---)>
key(name)operator(:) string<content(phrase modifiers 2)>
key(in)operator(:) string<content(An _(#myid2\)ID_ phrase.)>
key(html)operator(:) string<content(<p>An <em id="myid2">ID</em> phrase.</p>)>
head<head(---)>
key(name)operator(:) string<content(phrase modifiers 3)>
key(in)operator(:) string<content(The %{color:blue}blue% room.)>
key(html)operator(:) string<content(<p>The <span style="color:blue;">blue</span> room.</p>)>
head<head(---)>
key(name)operator(:) string<content(block and phrase attributes combined)>
key(desc)operator(:) string<content(Block and phrase attributes may be combined.)>
key(in)operator(:) string<content(p(myclass#myid3\){color:green}[de-de]. A complex paragraph.)>
key(html)operator(:) string<content(<p style="color:green;" class="myclass" lang="de-de" id="myid3">A complex paragraph.</p>)>
head<head(---)>
key(name)operator(:) string<content(block and phrase attributes combined 2)>
key(in)operator(:) string<content(A ??(myclass#myid4\){color:green}[de-de]complex?? phrase.)>
key(html)operator(:) string<content(<p>A <cite style="color:green;" class="myclass" lang="de-de" id="myid4">complex</cite> phrase.</p>)>
head<head(---)>
key(name)operator(:) string<content(extended blocks)>
key(desc)operator(:) string<content(Normally a block modifier covers a single block of text, and ends at the first blank line. To extend a block over multiple paragraphs that include blank lines, use a block modifier with two period marks instead of one. To close the extended block, use a different block modifier on the next paragraph.)>
key(in)operator(:) string<delimiter(|-)content(
  bq.. A quote.
  
  The quote continued.
  
  p. Back to paragraph text.)>
key(html)operator(:) string<delimiter(|-)content(
  <blockquote>
  <p>A quote.</p>
  <p>The quote continued.</p>
  </blockquote>
  <p>Back to paragraph text.</p>)>
head<head(---)>
key(name)operator(:) string<content(extended block code)>
key(desc)operator(:) string<content(Extended blocks are useful for displaying longer examples of code that contain blank lines.)>
key(in)operator(:) string<delimiter(|-)content(
  A PHP code example.
  
  bc.. <?php
  function hello(\) {
  // display a hello message
  
  print "Hello, World";
  }
  ?>
  
  p. Following paragraph.)>
key(html)operator(:) string<delimiter(|-)content(
  <p>A <span class="caps">PHP</span> code example.</p>
  <pre><code>&lt;?php
  function hello(\) {
  // display a hello message</code>

  <code>print "Hello, World";
  }
  ?&gt;</code>

  </pre>
  <p>Following paragraph.</p>)>
head<head(---)>
key(name)operator(:) string<content(extended block attributes)>
key(desc)operator(:) string<content(Any block attributes on an extended block will be included on each following block.)>
key(in)operator(:) string<delimiter(|-)content(
  p(myclass\).. A classy paragraph.
  
  Another classy paragraph.
  
  p. Not so classy.)>
key(html)operator(:) string<delimiter(|-)content(
  <p class="myclass">A classy paragraph.</p>
  <p class="myclass">Another classy paragraph.</p>
  <p>Not so classy.</p>)>
head<head(---)>
key(name)operator(:) string<content(extended block quote attributes)>
key(desc)operator(:) string<content(Attributes on bq.. extended blocks will be included on both the inner and outer blocks.)>
key(in)operator(:) string<delimiter(|-)content(
  bq(myclass\).. Quote paragraph 1.

  Paragraph 2.)>
key(html)operator(:) string<delimiter(|-)content(
  <blockquote class="myclass">
  <p class="myclass">Quote paragraph 1.</p>
  <p class="myclass">Paragraph 2.</p>
  </blockquote>)>
head<head(---)>
key(name)operator(:) string<content(extended block code attributes)>
key(desc)operator(:) string<content(Attributes on bc.. extended blocks will be included on both the inner and outer blocks.)>
key(in)operator(:) string<delimiter(|-)content(
  bc(myclass\).. Code block 1.
  
  Code block 2.)>
key(html)operator(:) string<delimiter(|-)content(
  <pre class="myclass"><code class="myclass">Code block 1.</code>

  <code class="myclass">Code block 2.</code></pre>)>
head<head(---)>
key(name)operator(:) string<content(raw xhtml left in tact)>
key(desc)operator(:) string<content(Raw XHTML tags are generally left untouched by Textile. Span tags that enclose only part of a block of text will be left intact, while the block itself is treated normally.)>
key(in)operator(:) string<content(<b>bold</b> and <i>italic</i>, the hard way.)>
key(html)operator(:) string<content(<p><b>bold</b> and <i>italic</i>, the hard way.</p>)>
head<head(---)>
key(name)operator(:) string<content(paragraphs entirely raw xhtml)>
key(desc)operator(:) string<content(Paragraphs that consist entirely of raw XHTML block tags will not be enclosed in <p>...</p> tags.)>
key(in)operator(:) string<content(<div class="mydiv">My div</div>)>
key(html)operator(:) string<content(<div class="mydiv">My div</div>)>
head<head(---)>
key(name)operator(:) string<content(paragraphs with inline xhtml)>
key(desc)operator(:) string<content(Paragraphs that consist only of inline XHTML tags, will be enclosed in <p>...</p> tags.)>
key(in)operator(:) string<content(<img src="/img.gif" alt="image" />)>
key(html)operator(:) string<content(<p><img src="/img.gif" alt="image" /></p>)>
head<head(---)>
key(name)operator(:) string<content(paragraphs with inline xhtml 2)>
key(in)operator(:) string<content(<span class="myspan">I'll make my own way.</span>)>
key(html)operator(:) string<content('<p><span class="myspan">I&#8217;ll make my own way.</span></p>')>
head<head(---)>
key(name)operator(:) string<content(paragraphs partly enclosed in xhtml block tags)>
key(desc)operator(:) string<content(Paragraphs that are only partly enclosed in block tags will be enclosed in <p>...</p> tags.)>
key(in)operator(:) string<content(<div>inside</div> and outside.)>
key(html)operator(:) string<content(<div>inside</div> <p>and outside.</p>)>
comment(# html: <p><div>inside</div> and outside.</p>)
head<head(---)>
key(name)operator(:) string<content(complex xhtml blocks)>
key(desc)operator(:) string<content(Textile can’t always identify the beginning and end of long or complex blocks of XHTML. To prevent Textile from enclosing complex XHTML blocks in paragraph tags, either use a space at the beginning of each line...)>
key(in)operator(:) string<delimiter(")content( <div>\\n <span>My div</span>\\n </div>)delimiter(")>
key(html)operator(:) string<delimiter(")content(<div>\\n<span>My div</span>\\n</div>)delimiter(")>
head<head(---)>
key(name)operator(:) string<content(complex xhtml blocks 2)>
key(desc)operator(:) string<content(...or a notexile.. extended block.)>
key(in)operator(:) string<delimiter(|-)content(
  notextile.. <div>
  
  <span>My div</span>
  
  </div>)>
key(html)operator(:) string<delimiter(|-)content(
  <div>

  <span>My div</span>

  </div>)>
head<head(---)>
key(name)operator(:) string<content(complex xhtml blocks with inline formatting)>
key(desc)operator(:) string<content(Textile will not wrap lines that start with a space in paragraph tags, but it should parse inline signatures)>
key(in)operator(:) string<delimiter(")content( <div>\\n <span>My *div*</span>\\n </div>)delimiter(")>
key(html)operator(:) string<delimiter(")content(<div>\\n<span>My <strong>div</strong></span>\\n</div>)delimiter(")>
head<head(---)>
key(name)operator(:) string<content(explicit pre escapement)>
key(desc)operator(:) string<content(The contents of explicit <pre>...</pre> tags are escaped for display. )>
key(in)operator(:) string<delimiter(|-)content(
  <pre>
  A HTML <b>example</b>
  </pre>)>
key(html)operator(:) string<delimiter(|-)content(
  <pre>
  A HTML &lt;b&gt;example&lt;/b&gt;
  </pre>)>
key(note)operator(:) string<content(This syntax is supported for backwards compatibility only, and doesn’t always work as expected. The block modifier pre. should be used instead.)>
head<head(---)>
key(name)operator(:) string<content(explicit code escapement)>
key(desc)operator(:) string<content(The contents of explicit <code>...</code> tags are escaped for display.)>
key(in)operator(:) string<delimiter(|-)content(
  <code>
  Another HTML <b>example</b>
  </code>)>
key(html)operator(:) string<delimiter(|-)content(
  <p><code>
  Another HTML &lt;b&gt;example&lt;/b&gt;
  </code></p>)>
key(note)operator(:) string<content(This syntax is supported for backwards compatibility only, and doesn’t always work as expected. The block modifier bc. should be used instead.)>
head<head(---)>
key(name)operator(:) string<content(notextile tags)>
key(desc)operator(:) string<content(Blocks enclosed by the pseudo tag <notextile>...</notextile> will be left untouched.)>
key(in)operator(:) string<delimiter(|-)content(
  <notextile>
  p. Leave me alone
  </notextile>)>
key(html)operator(:) string<delimiter(|-)content(
  p. Leave me alone)>
comment(# html: |-)
comment(#   <p>)
comment(#   p. Leave me alone)
comment(#   </p>)
key(note)operator(:) string<content(This syntax is supported for backwards compatibility only, and doesn’t always work as expected. The block modifier notextile. should be used instead.)>
key(valid_html)operator(:) string<content(false)>
head<head(---)>
key(name)operator(:) string<content(left aligned text)>
key(desc)operator(:) string<content(Left alignment is specified with a < less than symbol.)>
key(in)operator(:) string<content(p<. Left-aligned paragraph.)>
key(html)operator(:) string<content(<p style="text-align:left;">Left-aligned paragraph.</p>)>
head<head(---)>
key(name)operator(:) string<content(right aligned text)>
key(desc)operator(:) string<content(Right alignment is specified with a > greater than symbol.)>
key(in)operator(:) string<content(h3>. Right-aligned heading.)>
key(html)operator(:) string<content(<h3 style="text-align:right;">Right-aligned heading.</h3>)>
head<head(---)>
key(name)operator(:) string<content(justified text)>
key(desc)operator(:) string<content(Use both <> symbols for justified text.)>
key(in)operator(:) string<content(p<>. Justified paragraph.)>
key(html)operator(:) string<content(<p style="text-align:justify;">Justified paragraph.</p>)>
head<head(---)>
key(name)operator(:) string<content(centered text)>
key(desc)operator(:) string<content(An = equals symbol represents centered text.)>
key(in)operator(:) string<content(h3=. Centered heading.)>
key(html)operator(:) string<content(<h3 style="text-align:center;">Centered heading.</h3>)>
head<head(---)>
key(name)operator(:) string<content(padding)>
key(desc)operator(:) string<content(Use empty ( and \) parentheses to add padding to blocks, in multiples of 1 em.)>
key(in)operator(:) string<content(p(. Left pad 1em.)>
key(html)operator(:) string<content(<p style="padding-left:1em;">Left pad 1em.</p>)>
head<head(---)>
key(name)operator(:) string<content(padding 2)>
key(in)operator(:) string<content(p\)\). Right pad 2em.)>
key(html)operator(:) string<content(<p style="padding-right:2em;">Right pad 2em.</p>)>
head<head(---)>
key(name)operator(:) string<content(padding 3)>
key(in)operator(:) string<content(p(\). Left and right pad 1em.)>
key(html)operator(:) string<content(<p style="padding-left:1em;padding-right:1em;">Left and right pad 1em.</p>)>
head<head(---)>
key(name)operator(:) string<content(numeric lists)>
key(desc)operator(:) string<content(Numeric lists are represented by lines beginning with)> comment(#.)
key(in)operator(:) string<delimiter(|-)content(
  # Item one
  # Item two
  # Item three)>
key(html)operator(:) string<delimiter(|-)content(
  <ol>
  	<li>Item one</li>
  	<li>Item two</li>
  	<li>Item three</li>
  </ol>)>
head<head(---)>
key(name)operator(:) string<content(bulleted lists)>
key(desc)operator(:) string<content(Bulleted lists are represented by lines beginning with *.)>
key(in)operator(:) string<delimiter(|-)content(
  * Item A
  * Item B
  * Item C)>
key(html)operator(:) string<delimiter(|-)content(
  <ul>
  	<li>Item A</li>
  	<li>Item B</li>
  	<li>Item C</li>
  </ul>)>
head<head(---)>
key(name)operator(:) string<content(list attributes)>
key(desc)operator(:) string<content(Attributes applied to the first list item will apply to the list itself.)>
key(in)operator(:) string<delimiter(|-)content(
  *{color:red} Item one
  * Item two
  * Item three)>
key(html)operator(:) string<delimiter(|-)content(
  <ul style="color:red;">
  	<li>Item one</li>
  	<li>Item two</li>
  	<li>Item three</li>
  </ul>)>
head<head(---)>
key(name)operator(:) string<content(nested lists)>
key(desc)operator(:) string<content(Use multiple)> comment(# or * symbols to create nested lists.)
key(in)operator(:) string<delimiter(|-)content(
  # Item one
  ## Item one-A
  ## Item one-B
  ### Item one-B-a
  # Item two)>
key(html)operator(:) string<delimiter(|-)content(
  <ol>
  	<li>Item one
  	<ol>
  		<li>Item one-A</li>
  		<li>Item one-B
  		<ol>
  			<li>Item one-B-a</li>
  		</ol></li>
  	</ol></li>
  	<li>Item two</li>
  </ol>)>
head<head(---)>
key(name)operator(:) string<content(tables)>
key(desc)operator(:) string<content(Tables can be constructed using | “pipe” symbols to separate cells.)>
key(in)operator(:) string<delimiter(|)>string<content(a|simple|table|)>
key(html)operator(:) string<delimiter(|-)content(
  <table>
  	<tr>
  		<td>a</td>
  		<td>simple</td>
  		<td>table</td>
  	</tr>
  </table>)>
head<head(---)>
key(name)operator(:) string<content(table heading cells)>
key(desc)operator(:) string<content(Use _. to indicate table heading cells.)>
key(in)operator(:) string<delimiter(|-)content(
  |_. a|_. table|_. heading|
  |a|table|row|)>
key(html)operator(:) string<delimiter(|-)content(
  <table>
  	<tr>
  		<th>a</th>
  		<th>table</th>
  		<th>heading</th>
  	</tr>
  	<tr>
  		<td>a</td>
  		<td>table</td>
  		<td>row</td>
  	</tr>
  </table>)>
head<head(---)>
key(name)operator(:) string<content(cell attributes)>
key(desc)operator(:) string<content(Attributes may be applied separately to individual cells, rows, and entire tables. Cell attributes are placed within each cell.)>
key(in)operator(:) string<delimiter(|)>string<content(a|{color:red}. styled|cell|)>
key(html)operator(:) string<delimiter(|-)content(
  <table>
  	<tr>
  		<td>a</td>
  		<td style="color:red;">styled</td>
  		<td>cell</td>
  	</tr>
  </table>)>
head<head(---)>
key(name)operator(:) string<content(row attributes)>
key(desc)operator(:) string<content(Row attributes are placed at the beginning of a row, followed by a dot and a space.)>
key(in)operator(:) string<content((rowclass\). |a|classy|row|)>
key(html)operator(:) string<delimiter(|-)content(
  <table>
  	<tr class="rowclass">
  		<td>a</td>
  		<td>classy</td>
  		<td>row</td>
  	</tr>
  </table>)>
head<head(---)>
key(name)operator(:) string<content(table attributes)>
key(desc)operator(:) string<content(Table attributes are specified by placing the special table. block modifier immediately before the table.)>
key(in)operator(:) string<delimiter(|-)content(
  table(tableclass\).
  |a|classy|table|
  |a|classy|table|)>
key(html)operator(:) string<delimiter(|-)content(
  <table class="tableclass">
  	<tr>
  		<td>a</td>
  		<td>classy</td>
  		<td>table</td>
  	</tr>
  	<tr>
  		<td>a</td>
  		<td>classy</td>
  		<td>table</td>
  	</tr>
  </table>)>
head<head(---)>
key(name)operator(:) string<content(vertical alignment)>
key(desc)operator(:) string<content(Special alignment symbols are available for vertical alignment within table cells.)>
key(in)operator(:) string<delimiter(|)>string<content(^. top alignment|)>
key(html)operator(:) string<delimiter(|-)content(
  <table>
  	<tr>
  		<td style="vertical-align:top;">top alignment</td>
  	</tr>
  </table>)>
head<head(---)>
key(name)operator(:) string<content(vertical alignment 2)>
key(in)operator(:) string<delimiter(|-)content(
  |-. middle alignment|)>
key(html)operator(:) string<delimiter(|-)content(
  <table>
  	<tr>
  		<td style="vertical-align:middle;">middle alignment</td>
  	</tr>
  </table>)>
head<head(---)>
key(name)operator(:) string<content(vertical alignment 3)>
key(in)operator(:) string<delimiter(|-)content(
  |~. bottom alignment|)>
key(html)operator(:) string<delimiter(|-)content(
  <table>
  	<tr>
  		<td style="vertical-align:bottom;">bottom alignment</td>
  	</tr>
  </table>)>
head<head(---)>
key(name)operator(:) string<content(column span)>
key(desc)operator(:) string<content(Use a \\ backslash to indicate a column span.)>
key(in)operator(:) string<delimiter(|-)content(
  |\\2. spans two cols |
  | col 1 | col 2 |)>
key(html)operator(:) string<delimiter(|-)content(
  <table>
  	<tr>
  		<td colspan="2">spans two cols </td>
  	</tr>
  	<tr>
  		<td> col 1 </td>
  		<td> col 2 </td>
  	</tr>
  </table>)>
head<head(---)>
key(name)operator(:) string<content(row span)>
key(desc)operator(:) string<content(Use a / forward slash to indicate a row span.)>
key(in)operator(:) string<delimiter(|-)content(
  |/3. spans 3 rows | row a |
  | row b |
  | row c |)>
key(html)operator(:) string<delimiter(|-)content(
  <table>
  	<tr>
  		<td rowspan="3">spans 3 rows </td>
  		<td> row a </td>
  	</tr>
  	<tr>
  		<td> row b </td>
  	</tr>
  	<tr>
  		<td> row c </td>
  	</tr>
  </table>)>
head<head(---)>
key(name)operator(:) string<content(whitespace required)>
key(desc)operator(:) string<content(Links, images and phrase modifiers normally require surrounding whitespace.)>
key(in)operator(:) string<content(this*won't*work)>
key(html)operator(:) string<content(<p>this*won&#8217;t*work</p>)>
head<head(---)>
key(name)operator(:) string<content(modifier without whitespace)>
key(desc)operator(:) string<content(To use these without whitespace, surround the modifier with [] square brackets.)>
key(in)operator(:) string<content(this[*will*]work)>
key(html)operator(:) string<content(<p>this<strong>will</strong>work</p>)>
head<head(---)>
key(name)operator(:) string<content(modifier without whitespace 2)>
key(desc)operator(:) string<content(This is particularly useful in conjunction with superscript and subscript.)>
key(in)operator(:) string<content(1[^st^], 2[^nd^], 3[^rd^].)>
key(html)operator(:) string<content(<p>1<sup>st</sup>, 2<sup>nd</sup>, 3<sup>rd</sup>.</p>)>
head<head(---)>
key(name)operator(:) string<content(modifier without whitespace 3)>
key(in)operator(:) string<content(2 log[~n~])>
key(html)operator(:) string<content(<p>2 log<sub>n</sub></p>)>
head<head(---)>
key(name)operator(:) string<content(modifier without whitespace 4)>
key(desc)operator(:) string<content(It can also be used to include links and images without surrounding whitespace.)>
key(in)operator(:) string<delimiter(|-)content(
  A close[!/img.gif!]image.
  A tight["text":http://thresholdstate.com/]link.
  A ["footnoted link":http://thresholdstate.com/][1].)>
key(html)operator(:) string<delimiter(|-)content(
  <p>A close<img src="/img.gif" alt="" />image.<br />
  A tight<a href="http://thresholdstate.com/">text</a>link.<br />
  A <a href="http://thresholdstate.com/">footnoted link</a><sup class="footnote"><a href="#fn1">1</a></sup>.</p>)>
comment(# html: |-)
comment(#   <p>A close<img src="/img.gif" alt="" />image.<br />)
comment(#   A tight<a href="http://thresholdstate.com/">text</a>link.<br />)
comment(#   A <a href="http://thresholdstate.com/">footnoted link</a><sup class="footnote"><a href="#fn1216642796463b1223ae29d">1</a></sup>.</p>)