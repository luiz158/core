head<head(---)> 
key(name)operator(:) string<content(paragraphs)>
key(desc)operator(:) string<content(Textile looks for paragraphs in your text.  Paragraphs are separated by one blank line. Every paragraph is translated as an HTML paragraph.)>
key(in)operator(:) string<delimiter(|-)content(
  A single paragraph.
  
  Followed by another.)>
key(html)operator(:) string<delimiter(|-)content(
  <p>A single paragraph.</p>
  <p>Followed by another.</p>)>
head<head(---)>
key(name)operator(:) string<content(block containing block start)>
key(in)operator(:) string<delimiter(|-)content(
  I saw a ship. It ate my elephant.)>
key(html)operator(:) string<delimiter(|-)content(
  <p>I saw a ship. It ate my elephant.</p>)>
head<head(---)>
key(name)operator(:) string<content(extended block containing block start)>
key(in)operator(:) string<delimiter(|-)content(
  p.. I saw a ship. It ate my elephant.
  
  When the elephant comes to take a p. you...)>
key(html)operator(:) string<delimiter(|-)content(
  <p>I saw a ship. It ate my elephant.</p>
  <p>When the elephant comes to take a p. you&#8230;</p>)>
head<head(---)>
key(name)operator(:) string<content(blockquote containing block start)>
key(in)operator(:) string<delimiter(|-)content(
  bq. I saw a ship. It ate my elephant.)>
key(html)operator(:) string<delimiter(|-)content(
  <blockquote>
  <p>I saw a ship. It ate my elephant.</p>
  </blockquote>)>
head<head(---)>
key(name)operator(:) string<content(extended blockquote containing block start)>
key(in)operator(:) string<delimiter(|-)content(
  bq.. I saw a ship. It ate my elephant.

  When the elephant comes to take a p. you...)>
key(html)operator(:) string<delimiter(|-)content(
  <blockquote>
  <p>I saw a ship. It ate my elephant.</p>
  <p>When the elephant comes to take a p. you&#8230;</p>
  </blockquote>)>
head<head(---)> 
key(name)operator(:) string<content(notextile block containing block start)>
key(in)operator(:) string<delimiter(|-)content(
  notextile. I saw a ship. It ate my elephant.)>
key(html)operator(:) string<delimiter(|-)content(
  I saw a ship. It ate my elephant.)>
key(valid_html)operator(:) string<content(false)>
head<head(---)>
key(name)operator(:) string<content(extended notextile block containing block start)>
key(in)operator(:) string<delimiter(|-)content(
  notextile.. I saw a ship. It ate my elephant.

  When the elephant comes to take a p. you...)>
key(html)operator(:) string<delimiter(|-)content(
  I saw a ship. It ate my elephant.
  
  When the elephant comes to take a p. you...)>
key(valid_html)operator(:) string<content(false)>
head<head(---)> 
key(name)operator(:) string<content(pre block containing block start)>
key(in)operator(:) string<delimiter(|-)content(
  pre. I saw a ship. It ate my elephant.)>
key(html)operator(:) string<delimiter(|-)content(
  <pre>I saw a ship. It ate my elephant.</pre>)>
head<head(---)>
key(name)operator(:) string<content(extended pre block containing block start)>
key(in)operator(:) string<delimiter(|-)content(
  pre.. I saw a ship. It ate my elephant.

  When the elephant comes to take a p. you...)>
key(html)operator(:) string<delimiter(|-)content(
  <pre>I saw a ship. It ate my elephant.</pre>

  <pre>When the elephant comes to take a p. you&#8230;</pre>
  --- )>
key(name)operator(:) string<content(html tags)>
key(desc)operator(:) string<content(You can certainly use HTML tags inside your Textile documents.  HTML will only be escaped if it&#8217;s found in a <code>pre</code> or <code>code</code> block.)>
key(in)operator(:) string<delimiter(|-)content(
  I am <b>very</b> serious.
  
  <pre>
    I am <b>very</b> serious.
  </pre>)>
key(html)operator(:) string<delimiter(|-)content(
  <p>I am <b>very</b> serious.</p>
  <pre>
    I am &lt;b&gt;very&lt;/b&gt; serious.
  </pre>)>
head<head(---)> 
key(name)operator(:) string<content(line breaks)>
key(desc)operator(:) string<content(Line breaks are converted to HTML breaks.)>
key(in)operator(:) string<delimiter(|-)content(
  I spoke.
  And none replied.)>
key(html)operator(:) string<delimiter(|-)content(
  <p>I spoke.<br />
  And none replied.</p>)>
key(html_no_breaks)operator(:) string<delimiter(|-)content(
  <p>I spoke.
  And none replied.</p>)>
key(lite_mode_html)operator(:) string<delimiter(|-)content(
  I spoke.<br />
  And none replied.)>
head<head(---)> 
key(name)operator(:) string<content(curly quotes)>
key(desc)operator(:) string<content(Single- and double-quotes around words or phrases are converted to curly quotations, much easier on the eye.)>
key(in)operator(:) string<delimiter(")content(\\"Observe!\\")delimiter(")>
key(html)operator(:) string<content(<p>&#8220;Observe!&#8221;</p>)>
head<head(---)>
key(name)operator(:) string<content(quotes contained in multi-paragraph quotes)>
key(in)operator(:) string<delimiter(|-)content(
  "I first learned about this thing called "Redcloth" several years ago.

  "It's wonderful.")>
key(html)operator(:) string<delimiter(|-)content(
  <p>&#8220;I first learned about this thing called &#8220;Redcloth&#8221; several years ago.</p>
  <p>&#8220;It&#8217;s wonderful.&#8221;</p>)>
head<head(---)> 
key(name)operator(:) string<content(double hyphens)>
key(desc)operator(:) string<content(Double hyphens are replaced with an em-dash.)>
key(in)operator(:) string<content(Observe--very nice!)>
key(html)operator(:) string<content(<p>Observe&#8212;very nice!</p>)>
key(latex)operator(:) string<delimiter(")content(Observe---very nice!\\n\\n)delimiter(")>
head<head(---)> 
key(name)operator(:) string<content(double hyphens with spaces)>
key(desc)operator(:) string<content(Double hyphens are replaced with an em-dash and surrounding spaces are preserved.)>
key(in)operator(:) string<content(Observe -- very nice!)>
key(html)operator(:) string<content(<p>Observe &#8212; very nice!</p>)>
key(latex)operator(:) string<delimiter(")content(Observe --- very nice!\\n\\n)delimiter(")>
head<head(---)> 
key(name)operator(:) string<content(parenthetical phrase set off with em dashes)>
key(desc)operator(:) string<content(Sentences with two em dashes should not turn them into strikethroughs)>
key(in)operator(:) string<content(An emdash indicates a parenthetical thought--like this one--which is set apart from the rest of a sentence.)>
key(html)operator(:) string<delimiter(")content(<p>An emdash indicates a parenthetical thought&#8212;like this one&#8212;which is set apart from the rest of a sentence.</p>)delimiter(")>
key(latex)operator(:) string<delimiter(")content(An emdash indicates a parenthetical thought---like this one---which is set apart from the rest of a sentence.\\n\\n)delimiter(")>
head<head(---)>
key(name)operator(:) string<content(parenthetical phrase set off with em dashes surrounded by spaces)>
key(desc)operator(:) string<content(Sentences with two em dashes should not turn them into strikethroughs)>
key(in)operator(:) string<content(An emdash indicates a parenthetical thought -- like this one -- which is set apart from the rest of a sentence.)>
key(html)operator(:) string<delimiter(")content(<p>An emdash indicates a parenthetical thought &#8212; like this one &#8212; which is set apart from the rest of a sentence.</p>)delimiter(")>
key(latex)operator(:) string<delimiter(")content(An emdash indicates a parenthetical thought --- like this one --- which is set apart from the rest of a sentence.\\n\\n)delimiter(")>
head<head(---)>
key(name)operator(:) string<content(single hyphens with spaces)>
key(desc)operator(:) string<content(Single hyphens are replaced with en-dashes if they are surrounded by spaces.)>
key(in)operator(:) string<content(Observe - tiny and brief.)>
key(html)operator(:) string<content(<p>Observe &#8211; tiny and brief.</p>)>
key(latex)operator(:) string<delimiter(")content(Observe--tiny and brief.\\n\\n)delimiter(")>
head<head(---)> 
key(name)operator(:) string<content(midword hyphens )>
key(desc)operator(:) string<content(Single hyphens are left alone if not surrounded by spaces.)>
key(in)operator(:) string<content(Observe the nicely-done hyphen.)>
key(html)operator(:) string<content(<p>Observe the nicely-done hyphen.</p>)>
head<head(---)> 
key(name)operator(:) string<content(ellipses)>
key(desc)operator(:) string<content(Triplets of periods become an ellipsis.)>
key(in)operator(:) string<content(Observe...)>
key(html)operator(:) string<content(<p>Observe&#8230;</p>)>
key(lite_mode_html)operator(:) string<content(Observe&#8230;)>
head<head(---)> 
key(name)operator(:) string<content(dimension sign)>
key(desc)operator(:) string<content(The letter 'x' becomes a dimension sign when used between digits.)>
key(in)operator(:) string<delimiter(")content(Observe: 2x3.)delimiter(")>
key(html)operator(:) string<delimiter(")content(<p>Observe: 2&#215;3.</p>)delimiter(")>
head<head(---)> 
key(name)operator(:) string<content(dimension sign with space after)>
key(in)operator(:) string<delimiter(")content(The room is 2x3 inches big.)delimiter(")>
key(html)operator(:) string<delimiter(")content(<p>The room is 2&#215;3 inches big.</p>)delimiter(")>
head<head(---)> 
key(name)operator(:) string<content(dimension sign with spaces)>
key(in)operator(:) string<delimiter(")content(Observe: 2 x 4.)delimiter(")>
key(html)operator(:) string<delimiter(")content(<p>Observe: 2 &#215; 4.</p>)delimiter(")>
head<head(---)> 
key(name)operator(:) string<content(dimension signs chained)>
key(in)operator(:) string<delimiter(")content(Observe: 2x3x4.)delimiter(")>
key(html)operator(:) string<delimiter(")content(<p>Observe: 2&#215;3&#215;4.</p>)delimiter(")>
key(lite_mode_html)operator(:) string<delimiter(")content(Observe: 2&#215;3&#215;4.)delimiter(")>
head<head(---)> 
key(name)operator(:) string<content(dimension signs with double primes)>
key(in)operator(:) string<content('My mouse: 2.5" x 4".')>
key(html)operator(:) string<content('<p>My mouse: 2.5&#8243; &#215; 4&#8243;.</p>')>
head<head(---)> 
key(name)operator(:) string<content(dimension signs with single primes)>
key(in)operator(:) string<delimiter(")content(My office: 5' x 4.5'.)delimiter(")>
key(html)operator(:) string<delimiter(")content(<p>My office: 5&#8242; &#215; 4.5&#8242;.</p>)delimiter(")>
head<head(---)> 
key(name)operator(:) string<content(trademark and copyright)>
key(desc)operator(:) string<content(Conversion of trademark and copyright symbols.)>
key(in)operator(:) string<content(one(TM\), two(R\), three(C\).)>
key(html)operator(:) string<content(<p>one&#8482;, two&#174;, three&#169;.</p>)>
key(lite_mode_html)operator(:) string<content(one&#8482;, two&#174;, three&#169;.)>
head<head(---)> 
key(name)operator(:) string<content(headers)>
key(desc)operator(:) string<content(To make an entire paragraph into a Header, place “h<em>n</em>.” at its beginning, where <em>n</em> is a number from 1-6.)>
key(in)operator(:) string<content(h3. Header 3)>
key(html)operator(:) string<content(<h3>Header 3</h3>)>
head<head(---)> 
key(name)operator(:) string<content(blockquote)>
key(desc)operator(:) string<content(To make an entire paragraph into a block quotation, place “bq.” before it.)>
key(in)operator(:) string<delimiter(|-)content(
  Any old text
  
  bq. A block quotation.
  
  Any old text)>
key(html)operator(:) string<delimiter(|-)content(
  <p>Any old text</p>
  <blockquote>
  <p>A block quotation.</p>
  </blockquote>
  <p>Any old text</p>)>
head<head(---)> 
key(name)operator(:) string<content(footnote reference)>
key(desc)operator(:) string<content(Numeric references within text to footnotes appear between square brackets.)>
key(in)operator(:) string<content(This is covered elsewhere[1].)>
key(html)operator(:) string<content(<p>This is covered elsewhere<sup class="footnote"><a href="#fn1">1</a></sup>.</p>)>
head<head(---)> 
key(name)operator(:) string<content(footnote)>
key(desc)operator(:) string<content(To create the footnote that corresponds to its reference within the text, begin a new paragraph with fn and the footnote&#8217;s number, followed by a dot and a space.)>
key(in)operator(:) string<content(fn1. Down here, in fact.)>
key(html)operator(:) string<content(<p class="footnote" id="fn1"><sup>1</sup> Down here, in fact.</p>)>
head<head(---)> 
key(name)operator(:) string<content(em)>
key(desc)operator(:) string<content(Emphasis to text is added by surrounding a phrase with underscores.  In HTML, this often appears as <em>italics</em>.)>
key(in)operator(:) string<content(I _believe_ every word.)>
key(html)operator(:) string<content(<p>I <em>believe</em> every word.</p>)>
key(lite_mode_html)operator(:) string<delimiter(")content(I <em>believe</em> every word.)delimiter(")>
head<head(---)> 
key(name)operator(:) string<content(strong)>
key(desc)operator(:) string<content(Strength can be give to text by surrounding with asterisks.  In HTML, this strength appears as <strong>bold</strong>.)>
key(in)operator(:) string<content(And then? She *fell*!)>
key(html)operator(:) string<content(<p>And then? She <strong>fell</strong>!</p>)>
key(lite_mode_html)operator(:) string<delimiter(")content(And then? She <strong>fell</strong>!)delimiter(")>
head<head(---)>
key(name)operator(:) string<content(strong phrase beginning with a number)>
key(desc)operator(:) string<content(A strong phrase at the beginning of a line that begins with a number should not be recognized as a ul with a start value (no such thing\))>
key(in)operator(:) string<delimiter(")content(*10 times as many*)delimiter(")>
key(html)operator(:) string<delimiter(")content(<p><strong>10 times as many</strong></p>)delimiter(")>
head<head(---)> 
key(name)operator(:) string<content(force bold italics)>
key(desc)operator(:) string<content(Both italics and bold can be forced by doubling the underscores or asterisks.)>
key(in)operator(:) string<delimiter(|-)content(
  I __know__.
  I **really** __know__.)>
key(html)operator(:) string<delimiter(|-)content(
  <p>I <i>know</i>.<br />
  I <b>really</b> <i>know</i>.</p>)>
head<head(---)> 
key(name)operator(:) string<content(citation)>
key(desc)operator(:) string<content(Use double question marks to indicate <em>citation</em>.  The title of a book, for instance.)>
key(in)operator(:) string<content(??Cat's Cradle?? by Vonnegut)>
key(html)operator(:) string<content(<p><cite>Cat&#8217;s Cradle</cite> by Vonnegut</p>)>
head<head(---)> 
key(name)operator(:) string<content(code phrases)>
key(desc)operator(:) string<content(Code phrases can be surrounded by at-symbols.)>
key(in)operator(:) string<content(Convert with @r.to_html@)>
key(html)operator(:) string<content(<p>Convert with <code>r.to_html</code></p>)>
key(lite_mode_html)operator(:) string<content(Convert with <code>r.to_html</code>)>
head<head(---)>
key(name)operator(:) string<content(code phrases not created with multiple email addresses)>
key(in)operator(:) string<content(Please email why@domain.com or jason@domain.com.)>
key(html)operator(:) string<content(<p>Please email why@domain.com or jason@domain.com.</p>)>
head<head(---)> 
key(name)operator(:) string<content(del)>
key(desc)operator(:) string<content(To indicate a passage which has been deleted, surround the passage with hypens.)>
key(in)operator(:) string<content(I'm -sure- not sure.)>
key(html)operator(:) string<content(<p>I&#8217;m <del>sure</del> not sure.</p>)>
head<head(---)> 
key(name)operator(:) string<content(ins)>
key(desc)operator(:) string<content(Pluses around a passage indicate its insertion.)>
key(in)operator(:) string<content(You are a +pleasant+ child.)>
key(html)operator(:) string<content(<p>You are a <ins>pleasant</ins> child.</p>)>
head<head(---)> 
key(name)operator(:) string<content(superscript)>
key(desc)operator(:) string<content(To superscript a phrase, surround with carets.)>
key(in)operator(:) string<content(a ^2^ + b ^2^ = c ^2^)>
key(html)operator(:) string<content(<p>a <sup>2</sup> + b <sup>2</sup> = c <sup>2</sup></p>)>
head<head(---)>
key(name)operator(:) string<content(parenthetical superscript phrase)>
key(in)operator(:) string<content('^(image courtesy NASA\)^')>
key(html)operator(:) string<content('<p><sup>(image courtesy <span class="caps">NASA</span>\)</sup></p>')>
head<head(---)> 
key(name)operator(:) string<content(subscript)>
key(desc)operator(:) string<content(To subscript, surround with tildes.)>
key(in)operator(:) string<content(log ~2~ x)>
key(html)operator(:) string<content(<p>log <sub>2</sub> x</p>)>
head<head(---)>
key(name)operator(:) string<content(parenthetical subscript phrase)>
key(in)operator(:) string<content('~(image courtesy NASA\)~')>
key(html)operator(:) string<content('<p><sub>(image courtesy <span class="caps">NASA</span>\)</sub></p>')>
head<head(---)>
key(name)operator(:) string<content(tight superscript and subscript)>
key(desc)operator(:) string<content(if you want your superscript or subscript to not be surrounded by spaces, you must use square brackets)>
key(in)operator(:) string<content(f(x, n\) = log[~4~]x[^n^])>
key(html)operator(:) string<content('<p>f(x, n\) = log<sub>4</sub>x<sup>n</sup></p>')>
head<head(---)> 
key(name)operator(:) string<content(span)>
key(desc)operator(:) string<content(Lastly, if you find yourself needing to customize the style of a passage, use percent symbols to translate the passage as an HTML span.)>
key(in)operator(:) string<content(I'm %unaware% of most soft drinks.)>
key(html)operator(:) string<content(<p>I&#8217;m <span>unaware</span> of most soft drinks.</p>)>
head<head(---)> 
key(name)operator(:) string<content(style span)>
key(desc)operator(:) string<content(This way, you can apply style settings, as described in the next section to arbitrary phrases.)>
key(in)operator(:) string<delimiter(|-)content(
  I'm %{color:red}unaware%
  of most soft drinks.)>
key(html)operator(:) string<delimiter(|-)content(
  <p>I&#8217;m <span style="color:red;">unaware</span><br />
  of most soft drinks.</p>)>
key(lite_mode_html)operator(:) string<delimiter(|-)content(
  I&#8217;m <span style="color:red;">unaware</span><br />
  of most soft drinks.)>
head<head(---)>
key(name)operator(:) string<content(percent sign)>
key(desc)operator(:) string<content(though percent signs indicate a span, they shouldn't be overly greedy.)>
key(in)operator(:) string<delimiter(|-)content(
  http://blah.com/one%20two%20three
  (min\)5%-95%(max\))>
key(html)operator(:) string<delimiter(|-)content(
  <p>http://blah.com/one%20two%20three<br />
  (min\)5%-95%(max\)</p>)>
head<head(---)> 
key(name)operator(:) string<content(css class)>
key(desc)operator(:) string<content(A block can be tagged with a CSS class by circling the class in parentheses and placing it just before the period which marks the block.)>
key(in)operator(:) string<content(p(example1\). An example)>
key(html)operator(:) string<content(<p class="example1">An example</p>)>
head<head(---)> 
key(name)operator(:) string<content(css id)>
key(desc)operator(:) string<content(An element ID can be given by prefixing the ID with a pound symbol and using it in place of the class.)>
key(in)operator(:) string<content(p(#big-red\). Red here)>
key(html)operator(:) string<content(<p id="big-red">Red here</p>)>
head<head(---)> 
key(name)operator(:) string<content(class and id combined)>
key(desc)operator(:) string<content(Class and ID can be combined by placing the class first.)>
key(in)operator(:) string<content(p(example1#big-red2\). Red here)>
key(html)operator(:) string<content(<p class="example1" id="big-red2">Red here</p>)>
head<head(---)> 
key(name)operator(:) string<content(css style)>
key(desc)operator(:) string<content(Style settings can be provided directly by surrounding them in curly braces.)>
key(in)operator(:) string<content(p{color:blue;margin:30px}. Spacey blue)>
key(html)operator(:) string<content(<p style="color:blue;margin:30px;">Spacey blue</p>)>
head<head(---)> 
key(name)operator(:) string<content(language designations)>
key(desc)operator(:) string<content(Language designations can be given between angel brackets.)>
key(in)operator(:) string<content(p[fr]. rouge)>
key(html)operator(:) string<content(<p lang="fr">rouge</p>)>
head<head(---)> 
key(name)operator(:) string<content(block attributes on phrase modifiers)>
key(desc)operator(:) string<content(All block attributes can be applied to phrases as well by placing them just inside the opening modifier.)>
key(in)operator(:) string<delimiter(|-)content(
  I seriously *{color:red}blushed*
  when I _(big\)sprouted_ that
  corn stalk from my
  %[es]cabeza%.)>
key(html)operator(:) string<delimiter(|-)content(
  <p>I seriously <strong style="color:red;">blushed</strong><br />
  when I <em class="big">sprouted</em> that<br />
  corn stalk from my<br />
  <span lang="es">cabeza</span>.</p>)>
head<head(---)> 
key(name)operator(:) string<content(inline attributes preceded by text are treated as literal)>
key(desc)operator(:) string<content(modifiers must come first, without anything before them)>
key(in)operator(:) string<delimiter(|-)content(
  I *seriously {color:red}blushed*
  when I _first (big\)sprouted_ that
  corn stalk from my
  %grande [es]cabeza%.)>
key(html)operator(:) string<delimiter(|-)content(
  <p>I <strong>seriously {color:red}blushed</strong><br />
  when I <em>first (big\)sprouted</em> that<br />
  corn stalk from my<br />
  <span>grande [es]cabeza</span>.</p>)>
head<head(---)> 
key(name)operator(:) string<content(align justified)>
key(desc)operator(:) string<content(Text inside blocks can be aligned in four basic ways.)>
key(in)operator(:) string<content(p<>. justified)>
key(html)operator(:) string<content(<p style="text-align:justify;">justified</p>)>
head<head(---)> 
key(name)operator(:) string<content(indentation)>
key(desc)operator(:) string<content(Indentation can also be specified by provide a single left paren for every 1em to the left.  A single right paren for every 1em to the right.)>
key(in)operator(:) string<content(p\)\)\). right ident 3em)>
key(html)operator(:) string<content(<p style="padding-right:3em;">right ident 3em</p>)>
head<head(---)> 
key(name)operator(:) string<content(indentation and alignment)>
key(desc)operator(:) string<content(Identation may be coupled with alignment.)>
key(in)operator(:) string<content(h2(\)>. Bingo.)>
key(html)operator(:) string<content(<h2 style="padding-left:1em;padding-right:1em;text-align:right;">Bingo.</h2>)>
head<head(---)> 
key(name)operator(:) string<content(many modifiers combined)>
key(desc)operator(:) string<content(And, furthermore, coupled with language settings and CSS styles.)>
key(in)operator(:) string<content(h3(\)>[no]{color:red}. Bingo)>
key(html)operator(:) string<content(<h3 style="padding-left:1em;padding-right:1em;text-align:right;color:red;" lang="no">Bingo</h3>)>
head<head(---)> 
key(name)operator(:) string<content(code blocks)>
key(desc)operator(:) string<content(For example, long code blocks belong between <code>pre</code> and <code>code</code> tags.  Please also indent your code inside the tags to be sure that all Textile processors out there will ignore the contents.)>
key(in)operator(:) string<delimiter(|)content(
  <pre>
  <code>
    a.gsub!( /</, '' \)
  </code>
  </pre>)>
key(html)operator(:) string<delimiter(|-)content(
  <pre>
  <code>
    a.gsub!( /&lt;/, '' \)
  </code>
  </pre>)>
head<head(---)> 
key(name)operator(:) string<content(div tags)>
key(desc)operator(:) string<content(You may also choose to surround sections with <code>div</code> tags to separate your document into sections. <a href="http://www.instiki.org/">Instiki</a> uses this technique to float a sidebar to the right.)>
key(in)operator(:) string<delimiter(|)content(
  <div style="float:right;">
  
  h3. Sidebar
  
  "Hobix":http://hobix.com/
  "Ruby":http://ruby-lang.org/
  
  </div>
  
  The main text of the page goes here and will stay to the left of the sidebar.)>
key(html)operator(:) string<delimiter(|-)content(
  <div style="float:right;">
  <h3>Sidebar</h3>
  <p><a href="http://hobix.com/">Hobix</a><br />
  <a href="http://ruby-lang.org/">Ruby</a></p>
  </div>
  <p>The main text of the page goes here and will stay to the left of the sidebar.</p>)>
head<head(---)> 
key(name)operator(:) string<content(numbered list)>
key(desc)operator(:) string<content(To make a numbered list, place each item in its own paragraph, preceded by &#8221;#&#8221;.)>
key(in)operator(:) string<delimiter(|-)content(
  # A first item
  # A second item
  # A third)>
key(html)operator(:) string<delimiter(|-)content(
  <ol>
  	<li>A first item</li>
  	<li>A second item</li>
  	<li>A third</li>
  </ol>)>
head<head(---)> 
key(name)operator(:) string<content(nested numbered lists)>
key(desc)operator(:) string<content(These lists may be nested by increasing the number of pound symbols preceding child entries.)>
key(in)operator(:) string<delimiter(|-)content(
  # Fuel could be:
  ## Coal
  ## Gasoline
  ## Electricity
  # Humans need only:
  ## Water
  ## Protein)>
key(html)operator(:) string<delimiter(|-)content(
  <ol>
  	<li>Fuel could be:
  	<ol>
  		<li>Coal</li>
  		<li>Gasoline</li>
  		<li>Electricity</li>
  	</ol></li>
  	<li>Humans need only:
  	<ol>
  		<li>Water</li>
  		<li>Protein</li>
  	</ol></li>
  </ol>)>
head<head(---)> 
key(name)operator(:) string<content(bulleted list)>
key(desc)operator(:) string<content(Bulleted lists use an asterisk in place of the pound.)>
key(in)operator(:) string<delimiter(|-)content(
  * A first item
  * A second item
  * A third)>
key(html)operator(:) string<delimiter(|-)content(
  <ul>
  	<li>A first item</li>
  	<li>A second item</li>
  	<li>A third</li>
  </ul>)>
head<head(---)> 
key(name)operator(:) string<content(nested bulleted lists)>
key(desc)operator(:) string<content(These lists may be nested in like manner.)>
key(in)operator(:) string<delimiter(|-)content(
  * Fuel could be:
  ** Coal
  ** Gasoline
  ** Electricity
  * Humans need only:
  ** Water
  ** Protein)>
key(html)operator(:) string<delimiter(|-)content(
  <ul>
  	<li>Fuel could be:
  	<ul>
  		<li>Coal</li>
  		<li>Gasoline</li>
  		<li>Electricity</li>
  	</ul></li>
  	<li>Humans need only:
  	<ul>
  		<li>Water</li>
  		<li>Protein</li>
  	</ul></li>
  </ul>)>
head<head(---)> 
key(name)operator(:) string<content(links)>
key(desc)operator(:) string<content(Basic links are comprised of a phrase which is linked to a <acronym title="Universal Resource Locator">URL</acronym>.  Place the descriptive phrase in quotation marks.  Follow it immediately by a colon and the URL.)>
key(in)operator(:) string<content(I searched "Google":http://google.com.)>
key(html)operator(:) string<content(<p>I searched <a href="http://google.com">Google</a>.</p>)>
key(lite_mode_html)operator(:) string<content(I searched <a href="http://google.com">Google</a>.)>
head<head(---)> 
key(name)operator(:) string<content(link aliases)>
key(desc)operator(:) string<content(If you are using the same link several times in your document, or you’d just like to be a tad more organized, you can use a link alias.  Place the URL anywhere in your document, beginning with its alias in square brackets.  Then, use the alias in place of the URL, using the link format above.)>
key(in)operator(:) string<delimiter(|-)content(
  I am crazy about "Hobix":hobix
  and "it's":hobix "all":hobix I ever
  "link to":hobix!
  
  [hobix]http://hobix.com)>
key(html)operator(:) string<delimiter(|-)content(
  <p>I am crazy about <a href="http://hobix.com">Hobix</a><br />
  and <a href="http://hobix.com">it&#8217;s</a> <a href="http://hobix.com">all</a> I ever<br />
  <a href="http://hobix.com">link to</a>!</p>)>
head<head(---)> 
key(name)operator(:) string<content(image)>
key(desc)operator(:) string<content(You can embed an image in your Textile document by surrounding its URL with exclamation marks.)>
key(in)operator(:) string<delimiter(")content(!http://hobix.com/sample.jpg!)delimiter(")>
key(html)operator(:) string<content(<p><img src="http://hobix.com/sample.jpg" alt="" /></p>)>
key(lite_mode_html)operator(:) string<content(<img src="http://hobix.com/sample.jpg" alt="" />)>
head<head(---)> 
key(name)operator(:) string<content(image title)>
key(desc)operator(:) string<content(A title for the image can also be provided in parens, just before the closing exclamation.)>
key(in)operator(:) string<delimiter(")content(!openwindow1.gif(Bunny.\)!)delimiter(")>
key(html)operator(:) string<content(<p><img src="openwindow1.gif" title="Bunny." alt="Bunny." /></p>)>
head<head(---)> 
key(name)operator(:) string<content(image links)>
key(desc)operator(:) string<content(Links can be attached to images with a colon.)>
key(in)operator(:) string<delimiter(")content(!openwindow1.gif!:http://hobix.com/)delimiter(")>
key(html)operator(:) string<content(<p><a href="http://hobix.com/"><img src="openwindow1.gif" alt="" /></a></p>)>
head<head(---)> 
key(name)operator(:) string<content(image alignments)>
key(desc)operator(:) string<content(Alignments can be applied as well to images.)>
key(in)operator(:) string<delimiter(|-)content(
  !>obake.gif!
  
  And others sat all round the small
  machine and paid it to sing to them.)>
key(html)operator(:) string<delimiter(|-)content(
  <p style="float:right;"><img src="obake.gif" alt="" /></p>
  <p>And others sat all round the small<br />
  machine and paid it to sing to them.</p>)>
head<head(---)> 
key(name)operator(:) string<content(acronym definitions)>
key(desc)operator(:) string<content(Definitions for acronyms can be provided by following an acronym with its definition in parens.)>
key(in)operator(:) string<content(We use CSS(Cascading Style Sheets\).)>
key(html)operator(:) string<content(<p>We use <acronym title="Cascading Style Sheets"><span class="caps">CSS</span></acronym>.</p>)>
key(lite_mode_html)operator(:) string<content(We use <acronym title="Cascading Style Sheets"><span class="caps">CSS</span></acronym>.)>
key(no_span_caps_html)operator(:) string<content(<p>We use <acronym title="Cascading Style Sheets">CSS</acronym>.</p>)>
head<head(---)> 
key(name)operator(:) string<content(tables)>
key(desc)operator(:) string<content(Simple tables can be built by separating fields with pipe characters)>
key(in)operator(:) string<delimiter(|-)content(
  | name | age | sex |
  | joan | 24 | f |
  | archie | 29 | m |
  | bella | 45 | f |)>
key(html)operator(:) string<delimiter(|-)content(
  <table>
  	<tr>
  		<td> name </td>
  		<td> age </td>
  		<td> sex </td>
  	</tr>
  	<tr>
  		<td> joan </td>
  		<td> 24 </td>
  		<td> f </td>
  	</tr>
  	<tr>
  		<td> archie </td>
  		<td> 29 </td>
  		<td> m </td>
  	</tr>
  	<tr>
  		<td> bella </td>
  		<td> 45 </td>
  		<td> f </td>
  	</tr>
  </table>)>
head<head(---)> 
key(name)operator(:) string<content(table headers)>
key(desc)operator(:) string<content(Specify header cells by marking them with an underscore and period.)>
key(in)operator(:) string<delimiter(|-)content(
  |_. name |_. age |_. sex |
  | joan | 24 | f |
  | archie | 29 | m |
  | bella | 45 | f |)>
key(html)operator(:) string<delimiter(|-)content(
  <table>
  	<tr>
  		<th>name </th>
  		<th>age </th>
  		<th>sex </th>
  	</tr>
  	<tr>
  		<td> joan </td>
  		<td> 24 </td>
  		<td> f </td>
  	</tr>
  	<tr>
  		<td> archie </td>
  		<td> 29 </td>
  		<td> m </td>
  	</tr>
  	<tr>
  		<td> bella </td>
  		<td> 45 </td>
  		<td> f </td>
  	</tr>
  </table>)>
head<head(---)> 
key(name)operator(:) string<content(table cell attributes)>
key(desc)operator(:) string<content(The period used above marks the end of a cell’s attributes.  Other attributes can be applied as well.)>
key(in)operator(:) string<delimiter(|-)content(
  |_. attribute list |
  |<. align left |
  |>. align right|
  |=. center |
  |<>. justify |
  |^. valign top |
  |~. bottom |)>
key(html)operator(:) string<delimiter(|-)content(
  <table>
  	<tr>
  		<th>attribute list </th>
  	</tr>
  	<tr>
  		<td style="text-align:left;">align left </td>
  	</tr>
  	<tr>
  		<td style="text-align:right;">align right</td>
  	</tr>
  	<tr>
  		<td style="text-align:center;">center </td>
  	</tr>
  	<tr>
  		<td style="text-align:justify;">justify </td>
  	</tr>
  	<tr>
  		<td style="vertical-align:top;">valign top </td>
  	</tr>
  	<tr>
  		<td style="vertical-align:bottom;">bottom </td>
  	</tr>
  </table>)>
head<head(---)> 
key(name)operator(:) string<content(table colspan)>
key(desc)operator(:) string<content(You can also specify colspans with a backslash, followed by the cell width.)>
key(in)operator(:) string<delimiter(|-)content(
  |\\2. spans two cols |
  | col 1 | col 2 |)>
key(html)operator(:) string<delimiter(|-)content(
  <table>
  	<tr>
  		<td colspan="2">spans two cols </td>
  	</tr>
  	<tr>
  		<td> col 1 </td>
  		<td> col 2 </td>
  	</tr>
  </table>)>
head<head(---)> 
key(name)operator(:) string<content(table rowspan)>
key(desc)operator(:) string<content(Rowspan is specified by a forward slash, followed by the row height.)>
key(in)operator(:) string<delimiter(|-)content(
  |/3. spans 3 rows | a |
  | b |
  | c |)>
key(html)operator(:) string<delimiter(|-)content(
  <table>
  	<tr>
  		<td rowspan="3">spans 3 rows </td>
  		<td> a </td>
  	</tr>
  	<tr>
  		<td> b </td>
  	</tr>
  	<tr>
  		<td> c </td>
  	</tr>
  </table>)>
head<head(---)> 
key(name)operator(:) string<content(block attributes applied to table cells)>
key(desc)operator(:) string<content(All block attributes can be applied to table cells as well.)>
key(in)operator(:) string<delimiter(")content(|{background:#ddd}. Grey cell|)delimiter(")>
key(html)operator(:) string<delimiter(|-)content(
  <table>
  	<tr>
  		<td style="background:#ddd;">Grey cell</td>
  	</tr>
  </table>)>
head<head(---)> 
key(name)operator(:) string<content(black attributes applied to a table)>
key(desc)operator(:) string<content(Table-wide attributes can be applied before the first row of the table.  On its own line, followed by a period.)>
key(in)operator(:) string<delimiter(|-)content(
  table{border:1px solid black}.
  |This|is|a|row|
  |This|is|a|row|)>
key(html)operator(:) string<delimiter(|-)content(
  <table style="border:1px solid black;">
  	<tr>
  		<td>This</td>
  		<td>is</td>
  		<td>a</td>
  		<td>row</td>
  	</tr>
  	<tr>
  		<td>This</td>
  		<td>is</td>
  		<td>a</td>
  		<td>row</td>
  	</tr>
  </table>)>
head<head(---)> 
key(name)operator(:) string<content(black attributes applied to a table row)>
key(desc)operator(:) string<content(Attributes can be applied to a single row by supplying the attribute before the row starts, using a <code>table</code> modifier and following it by a period.)>
key(in)operator(:) string<delimiter(|-)content(
  |This|is|a|row|
  {background:#ddd}. |This|is|grey|row|)>
key(html)operator(:) string<delimiter(|-)content(
  <table>
  	<tr>
  		<td>This</td>
  		<td>is</td>
  		<td>a</td>
  		<td>row</td>
  	</tr>
  	<tr style="background:#ddd;">
  		<td>This</td>
  		<td>is</td>
  		<td>grey</td>
  		<td>row</td>
  	</tr>
  </table>)>
head<head(---)>
key(name)operator(:) string<content(extended block followed by pre block)>
key(in)operator(:) string<delimiter(|-)content(
  div.. Just a test.
  
  Second div.
  
  pre. A pre block ends it.)>
key(html)operator(:) string<delimiter(|-)content(
  <div>Just a test.</div>
  <div>Second div.</div>
  <pre>A pre block ends it.</pre>)>
head<head(---)>
key(name)operator(:) string<content(extended block followed by blockquote)>
key(in)operator(:) string<delimiter(|-)content(
  div.. Just a test.

  Second div.

  bq. A blockquote ends it.)>
key(html)operator(:) string<delimiter(|-)content(
  <div>Just a test.</div>
  <div>Second div.</div>
  <blockquote>
  <p>A blockquote ends it.</p>
  </blockquote>)>
head<head(---)>
key(name)operator(:) string<content(extended block followed by block code)>
key(in)operator(:) string<delimiter(|-)content(
  div.. Just a test.

  Second div.

  bc. A blockcode ends it.)>
key(html)operator(:) string<delimiter(|-)content(
  <div>Just a test.</div>
  <div>Second div.</div>
  <pre><code>A blockcode ends it.</code></pre>)>
head<head(---)>
key(name)operator(:) string<content(extended block followed by notextile block)>
key(in)operator(:) string<delimiter(|-)content(
  div.. Just a test.

  Second div.

  notextile. A notextile block ends it.)>
key(html)operator(:) string<delimiter(|-)content(
  <div>Just a test.</div>
  <div>Second div.</div>
  A notextile block ends it.)>
key(valid_html)operator(:) string<content(false)>
head<head(---)>
key(name)operator(:) string<content(simple parentheses)>
key(in)operator(:) string<delimiter(|-)content(
  before (in parens\) after)>
key(html)operator(:) string<delimiter(|-)content(
  <p>before (in parens\) after</p>)>
head<head(---)>
key(name)operator(:) string<content(parentheses in underscores)>
key(in)operator(:) string<delimiter(|-)content(
  before _(in parens\)_ after)>
key(html)operator(:) string<delimiter(|-)content(
  <p>before <em>(in parens\)</em> after</p>)>
head<head(---)>
key(name)operator(:) string<content(parentheses in asterisks)>
key(in)operator(:) string<delimiter(|-)content(
  before *(in parens\)* after)>
key(html)operator(:) string<delimiter(|-)content(
  <p>before <strong>(in parens\)</strong> after</p>)>
head<head(---)>
key(name)operator(:) string<content(parentheses in underscores in quotes)>
key(in)operator(:) string<delimiter(|-)content(
  "before _(in parens\)_ after")>
key(html)operator(:) string<delimiter(|-)content(
  <p>&#8220;before <em>(in parens\)</em> after&#8221;</p>)>
head<head(---)>
key(name)operator(:) string<content(underscores in parentheses)>
key(in)operator(:) string<delimiter(|-)content(
   one _two three_ (four _five six_\) seven)>
key(html)operator(:) string<delimiter(|-)content(
  <p>one <em>two three</em> (four <em>five six</em>\) seven</p>)>
head<head(---)>
key(name)operator(:) string<content(underscores in parentheses in quotes)>
key(in)operator(:) string<delimiter(|-)content(
   "one _two three_ (four _five six_\) seven")>
key(html)operator(:) string<delimiter(|-)content(
  <p>&#8220;one <em>two three</em> (four <em>five six</em>\) seven&#8221;</p>)>
head<head(---)>
key(name)operator(:) string<content(underscores in parentheses 2)>
key(in)operator(:) string<delimiter(|-)content(
   one (two _three four_\) five)>
key(html)operator(:) string<delimiter(|-)content(
  <p>one (two <em>three four</em>\) five</p>)>
head<head(---)>
key(name)operator(:) string<content(underscores in parentheses in quotes 2)>
key(in)operator(:) string<delimiter(|-)content(
   "one (two _three four_\) five")>
key(html)operator(:) string<delimiter(|-)content(
  <p>&#8220;one (two <em>three four</em>\) five&#8221;</p>)>
head<head(---)>
key(name)operator(:) string<content(caps in parentheses)>
key(desc)operator(:) string<content(Uppercase words of three or more characters that are in parentheses should be recognized as well as those not in parentheses.)>
key(in)operator(:) string<content(IBM or (HAL\))>
key(html)operator(:) string<content(<p><span class="caps">IBM</span> or (<span class="caps">HAL</span>\)</p>)>
key(no_span_caps_html)operator(:) string<content(<p>IBM or (HAL\)</p>)>
head<head(---)>
key(name)operator(:) string<content(phrase modifiers in parentheses)>
key(desc)operator(:) string<content(Inline modifiers are expected to work in parentheses as well.)>
key(in)operator(:) string<delimiter(|-)content(
  __Amanita__s are mushrooms.
  Lungworts (__Lobaria__\) are lichens.
  Blah blah (normal text **bold**\) blah.)>
key(html)operator(:) string<delimiter(|-)content(
  <p>__Amanita__s are mushrooms.<br />
  Lungworts (<i>Lobaria</i>\) are lichens.<br />
  Blah blah (normal text <b>bold</b>\) blah.</p>)>
head<head(---)>
key(name)operator(:) string<content(square brackets are preserved)>
key(in)operator(:) string<delimiter(|-)content(
  citation ["(Berk.\) Hilton"], see
  [Papers "blah blah."])>
key(html)operator(:) string<delimiter(|-)content(
  <p>citation [&#8220;(Berk.\) Hilton&#8221;], see<br />
  [Papers &#8220;blah blah.&#8221;]</p>)>