comment(#!/usr/bin/env python)
comment(# -*- coding: utf-8 -*-)
docstring<delimiter(""")content(
)content(    Generate Pygments Documentation)content(
)content(    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~)content(
)content(
)content(    Generates a bunch of html files containing the documentation.)content(
)content(
)content(    :copyright: Copyright 2006-2009 by the Pygments team, see AUTHORS.)content(
)content(    :license: BSD, see LICENSE for details.)content(
)delimiter(""")>

keyword(import) include(os)
keyword(import) include(sys)
keyword(from) include(datetime) keyword(import) include(datetime)
keyword(from) include(cgi) keyword(import) include(escape)

keyword(from) include(docutils) keyword(import) include(nodes)
keyword(from) include(docutils.parsers.rst) keyword(import) include(directives)
keyword(from) include(docutils.core) keyword(import) include(publish_parts)
keyword(from) include(docutils.writers) keyword(import) include(html4css1)

keyword(from) include(jinja) keyword(import) include(from_string)

keyword(from) include(pygments) keyword(import) include(highlight)
keyword(from) include(pygments.lexers) keyword(import) include(get_lexer_by_name)
keyword(from) include(pygments.formatters) keyword(import) include(HtmlFormatter)


ident(LEXERDOC) operator(=) string<delimiter(''')content(
)content(`%s`)content(
)content(%s)content(
)content(    :Short names: %s)content(
)content(    :Filename patterns: %s)content(
)content(    :Mimetypes: %s)content(
)content(
)delimiter(''')>

keyword(def) method(generate_lexer_docs)operator(()operator(\))operator(:)
    keyword(from) include(pygments.lexers) keyword(import) include(LEXERS)

    ident(out) operator(=) operator([)operator(])

    ident(modules) operator(=) operator({)operator(})
    ident(moduledocstrings) operator(=) operator({)operator(})
    keyword(for) ident(classname)operator(,) ident(data) keyword(in) predefined(sorted)operator(()ident(LEXERS)operator(.)ident(iteritems)operator(()operator(\))operator(,) ident(key)operator(=)keyword(lambda) ident(x)operator(:) ident(x)operator([)integer(0)operator(])operator(\))operator(:)
        ident(module) operator(=) ident(data)operator([)integer(0)operator(])
        ident(mod) operator(=) predefined(__import__)operator(()ident(module)operator(,) predefined_constant(None)operator(,) predefined_constant(None)operator(,) operator([)ident(classname)operator(])operator(\))
        ident(cls) operator(=) predefined(getattr)operator(()ident(mod)operator(,) ident(classname)operator(\))
        keyword(if) keyword(not) ident(cls)operator(.)ident(__doc__)operator(:)
            keyword(print) string<delimiter(")content(Warning: %s does not have a docstring.)delimiter(")> operator(%) ident(classname)
        ident(modules)operator(.)ident(setdefault)operator(()ident(module)operator(,) operator([)operator(])operator(\))operator(.)ident(append)operator(()operator(()
            ident(classname)operator(,)
            ident(cls)operator(.)ident(__doc__)operator(,)
            string<delimiter(')content(, )delimiter(')>operator(.)ident(join)operator(()ident(data)operator([)integer(2)operator(])operator(\)) keyword(or) string<delimiter(')content(None)delimiter(')>operator(,)
            string<delimiter(')content(, )delimiter(')>operator(.)ident(join)operator(()ident(data)operator([)integer(3)operator(])operator(\))operator(.)ident(replace)operator(()string<delimiter(')content(*)delimiter(')>operator(,) string<delimiter(')char(\\\\)content(*)delimiter(')>operator(\)) keyword(or) string<delimiter(')content(None)delimiter(')>operator(,)
            string<delimiter(')content(, )delimiter(')>operator(.)ident(join)operator(()ident(data)operator([)integer(4)operator(])operator(\)) keyword(or) string<delimiter(')content(None)delimiter(')>operator(\))operator(\))
        keyword(if) ident(module) keyword(not) keyword(in) ident(moduledocstrings)operator(:)
            ident(moduledocstrings)operator([)ident(module)operator(]) operator(=) ident(mod)operator(.)ident(__doc__)

    keyword(for) ident(module)operator(,) ident(lexers) keyword(in) predefined(sorted)operator(()ident(modules)operator(.)ident(iteritems)operator(()operator(\))operator(,) ident(key)operator(=)keyword(lambda) ident(x)operator(:) ident(x)operator([)integer(0)operator(])operator(\))operator(:)
        ident(heading) operator(=) ident(moduledocstrings)operator([)ident(module)operator(])operator(.)ident(splitlines)operator(()operator(\))operator([)integer(4)operator(])operator(.)ident(strip)operator(()operator(\))operator(.)ident(rstrip)operator(()string<delimiter(')content(.)delimiter(')>operator(\))
        ident(out)operator(.)ident(append)operator(()string<delimiter(')char(\\n)delimiter(')> operator(+) ident(heading) operator(+) string<delimiter(')char(\\n)delimiter(')> operator(+) string<delimiter(')content(-)delimiter(')>operator(*)predefined(len)operator(()ident(heading)operator(\)) operator(+) string<delimiter(')char(\\n)delimiter(')>operator(\))
        keyword(for) ident(data) keyword(in) ident(lexers)operator(:)
            ident(out)operator(.)ident(append)operator(()ident(LEXERDOC) operator(%) ident(data)operator(\))
    keyword(return) string<delimiter(')delimiter(')>operator(.)ident(join)operator(()ident(out)operator(\))

keyword(def) method(generate_formatter_docs)operator(()operator(\))operator(:)
    keyword(from) include(pygments.formatters) keyword(import) include(FORMATTERS)

    ident(out) operator(=) operator([)operator(])
    keyword(for) ident(cls)operator(,) ident(data) keyword(in) predefined(sorted)operator(()ident(FORMATTERS)operator(.)ident(iteritems)operator(()operator(\))operator(,)
                            ident(key)operator(=)keyword(lambda) ident(x)operator(:) ident(x)operator([)integer(0)operator(])operator(.)ident(__name__)operator(\))operator(:)
        ident(heading) operator(=) ident(cls)operator(.)ident(__name__)
        ident(out)operator(.)ident(append)operator(()string<delimiter(')content(`)delimiter(')> operator(+) ident(heading) operator(+) string<delimiter(')content(`)char(\\n)delimiter(')> operator(+) string<delimiter(')content(-)delimiter(')>operator(*)operator(()integer(2)operator(+)predefined(len)operator(()ident(heading)operator(\))operator(\)) operator(+) string<delimiter(')char(\\n)delimiter(')>operator(\))
        ident(out)operator(.)ident(append)operator(()ident(cls)operator(.)ident(__doc__)operator(\))
        ident(out)operator(.)ident(append)operator(()string<delimiter(''')content(
)content(    :Short names: %s)content(
)content(    :Filename patterns: %s)content(
)content(
)content(
)delimiter(''')> operator(%) operator(()string<delimiter(')content(, )delimiter(')>operator(.)ident(join)operator(()ident(data)operator([)integer(1)operator(])operator(\)) keyword(or) string<delimiter(')content(None)delimiter(')>operator(,) string<delimiter(')content(, )delimiter(')>operator(.)ident(join)operator(()ident(data)operator([)integer(2)operator(])operator(\))operator(.)ident(replace)operator(()string<delimiter(')content(*)delimiter(')>operator(,) string<delimiter(')char(\\\\)content(*)delimiter(')>operator(\)) keyword(or) string<delimiter(')content(None)delimiter(')>operator(\))operator(\))
    keyword(return) string<delimiter(')delimiter(')>operator(.)ident(join)operator(()ident(out)operator(\))

keyword(def) method(generate_filter_docs)operator(()operator(\))operator(:)
    keyword(from) include(pygments.filters) keyword(import) include(FILTERS)

    ident(out) operator(=) operator([)operator(])
    keyword(for) ident(name)operator(,) ident(cls) keyword(in) ident(FILTERS)operator(.)ident(iteritems)operator(()operator(\))operator(:)
        ident(out)operator(.)ident(append)operator(()string<delimiter(''')content(
)content(`%s`)content(
)content(%s)content(
)content(    :Name: %s)content(
)delimiter(''')> operator(%) operator(()ident(cls)operator(.)ident(__name__)operator(,) ident(cls)operator(.)ident(__doc__)operator(,) ident(name)operator(\))operator(\))
    keyword(return) string<delimiter(')delimiter(')>operator(.)ident(join)operator(()ident(out)operator(\))

keyword(def) method(generate_changelog)operator(()operator(\))operator(:)
    ident(fn) operator(=) ident(os)operator(.)ident(path)operator(.)ident(abspath)operator(()ident(os)operator(.)ident(path)operator(.)ident(join)operator(()ident(os)operator(.)ident(path)operator(.)ident(dirname)operator(()ident(__file__)operator(\))operator(,) string<delimiter(')content(..)delimiter(')>operator(,)
                         string<delimiter(')content(CHANGES)delimiter(')>operator(\))operator(\))
    ident(f) operator(=) predefined(file)operator(()ident(fn)operator(\))
    ident(result) operator(=) operator([)operator(])
    ident(in_header) operator(=) predefined_constant(False)
    ident(header) operator(=) predefined_constant(True)
    keyword(for) ident(line) keyword(in) ident(f)operator(:)
        keyword(if) ident(header)operator(:)
            keyword(if) keyword(not) ident(in_header) keyword(and) ident(line)operator(.)ident(strip)operator(()operator(\))operator(:)
                ident(in_header) operator(=) predefined_constant(True)
            keyword(elif) ident(in_header) keyword(and) keyword(not) ident(line)operator(.)ident(strip)operator(()operator(\))operator(:)
                ident(header) operator(=) predefined_constant(False)
        keyword(else)operator(:)
            ident(result)operator(.)ident(append)operator(()ident(line)operator(.)ident(rstrip)operator(()operator(\))operator(\))
    ident(f)operator(.)ident(close)operator(()operator(\))
    keyword(return) string<delimiter(')char(\\n)delimiter(')>operator(.)ident(join)operator(()ident(result)operator(\))

keyword(def) method(generate_authors)operator(()operator(\))operator(:)
    ident(fn) operator(=) ident(os)operator(.)ident(path)operator(.)ident(abspath)operator(()ident(os)operator(.)ident(path)operator(.)ident(join)operator(()ident(os)operator(.)ident(path)operator(.)ident(dirname)operator(()ident(__file__)operator(\))operator(,) string<delimiter(')content(..)delimiter(')>operator(,)
                         string<delimiter(')content(AUTHORS)delimiter(')>operator(\))operator(\))
    ident(f) operator(=) predefined(file)operator(()ident(fn)operator(\))
    ident(r) operator(=) ident(f)operator(.)ident(read)operator(()operator(\))operator(.)ident(rstrip)operator(()operator(\))
    ident(f)operator(.)ident(close)operator(()operator(\))
    keyword(return) ident(r)

ident(LEXERDOCS) operator(=) ident(generate_lexer_docs)operator(()operator(\))
ident(FORMATTERDOCS) operator(=) ident(generate_formatter_docs)operator(()operator(\))
ident(FILTERDOCS) operator(=) ident(generate_filter_docs)operator(()operator(\))
ident(CHANGELOG) operator(=) ident(generate_changelog)operator(()operator(\))
ident(AUTHORS) operator(=) ident(generate_authors)operator(()operator(\))


ident(PYGMENTS_FORMATTER) operator(=) ident(HtmlFormatter)operator(()ident(style)operator(=)string<delimiter(')content(pastie)delimiter(')>operator(,) ident(cssclass)operator(=)string<delimiter(')content(syntax)delimiter(')>operator(\))

ident(USAGE) operator(=) string<delimiter(''')char(\\
)content(Usage: %s <mode> <destination> [<source.txt> ...])content(
)content(
)content(Generate either python or html files out of the documentation.)content(
)content(
)content(Mode can either be python or html.)char(\\
)delimiter(''')> operator(%) ident(sys)operator(.)ident(argv)operator([)integer(0)operator(])

ident(TEMPLATE) operator(=) string<delimiter(''')char(\\
)content(<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN")content(
)content(   "http://www.w3.org/TR/html4/strict.dtd">)content(
)content(<html>)content(
)content(<head>)content(
)content(  <title>{{ title }} &mdash; Pygments</title>)content(
)content(  <meta http-equiv="content-type" content="text/html; charset=utf-8">)content(
)content(  <style type="text/css">)content(
)content(    {{ style }})content(
)content(  </style>)content(
)content(</head>)content(
)content(<body>)content(
)content(  <div id="content">)content(
)content(    <h1 class="heading">Pygments</h1>)content(
)content(    <h2 class="subheading">{{ title }}</h2>)content(
)content(    {% if file_id != "index" %})content(
)content(      <a id="backlink" href="index.html">&laquo; Back To Index</a>)content(
)content(    {% endif %})content(
)content(    {% if toc %})content(
)content(      <div class="toc">)content(
)content(        <h2>Contents</h2>)content(
)content(        <ul class="contents">)content(
)content(        {% for key, value in toc %})content(
)content(          <li><a href="{{ key }}">{{ value }}</a></li>)content(
)content(        {% endfor %})content(
)content(        </ul>)content(
)content(      </div>)content(
)content(    {% endif %})content(
)content(    {{ body }})content(
)content(  </div>)content(
)content(</body>)content(
)content(<!-- generated on: {{ generation_date }})content(
)content(     file id: {{ file_id }} -->)content(
)content(</html>)char(\\
)delimiter(''')>

ident(STYLESHEET) operator(=) string<delimiter(''')char(\\
)content(body {)content(
)content(    background-color: #f2f2f2;)content(
)content(    margin: 0;)content(
)content(    padding: 0;)content(
)content(    font-family: 'Georgia', serif;)content(
)content(    color: #111;)content(
)content(})content(
)content(
)content(#content {)content(
)content(    background-color: white;)content(
)content(    padding: 20px;)content(
)content(    margin: 20px auto 20px auto;)content(
)content(    max-width: 800px;)content(
)content(    border: 4px solid #ddd;)content(
)content(})content(
)content(
)content(h1 {)content(
)content(    font-weight: normal;)content(
)content(    font-size: 40px;)content(
)content(    color: #09839A;)content(
)content(})content(
)content(
)content(h2 {)content(
)content(    font-weight: normal;)content(
)content(    font-size: 30px;)content(
)content(    color: #C73F00;)content(
)content(})content(
)content(
)content(h1.heading {)content(
)content(    margin: 0 0 30px 0;)content(
)content(})content(
)content(
)content(h2.subheading {)content(
)content(    margin: -30px 0 0 45px;)content(
)content(})content(
)content(
)content(h3 {)content(
)content(    margin-top: 30px;)content(
)content(})content(
)content(
)content(table.docutils {)content(
)content(    border-collapse: collapse;)content(
)content(    border: 2px solid #aaa;)content(
)content(    margin: 0.5em 1.5em 0.5em 1.5em;)content(
)content(})content(
)content(
)content(table.docutils td {)content(
)content(    padding: 2px;)content(
)content(    border: 1px solid #ddd;)content(
)content(})content(
)content(
)content(p, li, dd, dt, blockquote {)content(
)content(    font-size: 15px;)content(
)content(    color: #333;)content(
)content(})content(
)content(
)content(p {)content(
)content(    line-height: 150%;)content(
)content(    margin-bottom: 0;)content(
)content(    margin-top: 10px;)content(
)content(})content(
)content(
)content(hr {)content(
)content(    border-top: 1px solid #ccc;)content(
)content(    border-bottom: 0;)content(
)content(    border-right: 0;)content(
)content(    border-left: 0;)content(
)content(    margin-bottom: 10px;)content(
)content(    margin-top: 20px;)content(
)content(})content(
)content(
)content(dl {)content(
)content(    margin-left: 10px;)content(
)content(})content(
)content(
)content(li, dt {)content(
)content(    margin-top: 5px;)content(
)content(})content(
)content(
)content(dt {)content(
)content(    font-weight: bold;)content(
)content(})content(
)content(
)content(th {)content(
)content(    text-align: left;)content(
)content(})content(
)content(
)content(a {)content(
)content(    color: #990000;)content(
)content(})content(
)content(
)content(a:hover {)content(
)content(    color: #c73f00;)content(
)content(})content(
)content(
)content(pre {)content(
)content(    background-color: #f9f9f9;)content(
)content(    border-top: 1px solid #ccc;)content(
)content(    border-bottom: 1px solid #ccc;)content(
)content(    padding: 5px;)content(
)content(    font-size: 13px;)content(
)content(    font-family: Bitstream Vera Sans Mono,monospace;)content(
)content(})content(
)content(
)content(tt {)content(
)content(    font-size: 13px;)content(
)content(    font-family: Bitstream Vera Sans Mono,monospace;)content(
)content(    color: black;)content(
)content(    padding: 1px 2px 1px 2px;)content(
)content(    background-color: #f0f0f0;)content(
)content(})content(
)content(
)content(cite {)content(
)content(    /* abusing <cite>, it's generated by ReST for `x` */)content(
)content(    font-size: 13px;)content(
)content(    font-family: Bitstream Vera Sans Mono,monospace;)content(
)content(    font-weight: bold;)content(
)content(    font-style: normal;)content(
)content(})content(
)content(
)content(#backlink {)content(
)content(    float: right;)content(
)content(    font-size: 11px;)content(
)content(    color: #888;)content(
)content(})content(
)content(
)content(div.toc {)content(
)content(    margin: 0 0 10px 0;)content(
)content(})content(
)content(
)content(div.toc h2 {)content(
)content(    font-size: 20px;)content(
)content(})content(
)delimiter(''')> comment(#')


keyword(def) method(pygments_directive)operator(()ident(name)operator(,) ident(arguments)operator(,) ident(options)operator(,) ident(content)operator(,) ident(lineno)operator(,)
                      ident(content_offset)operator(,) ident(block_text)operator(,) ident(state)operator(,) ident(state_machine)operator(\))operator(:)
    keyword(try)operator(:)
        ident(lexer) operator(=) ident(get_lexer_by_name)operator(()ident(arguments)operator([)integer(0)operator(])operator(\))
    keyword(except) exception(ValueError)operator(:)
        comment(# no lexer found)
        ident(lexer) operator(=) ident(get_lexer_by_name)operator(()string<delimiter(')content(text)delimiter(')>operator(\))
    ident(parsed) operator(=) ident(highlight)operator(()string<modifier(u)delimiter(')char(\\n)delimiter(')>operator(.)ident(join)operator(()ident(content)operator(\))operator(,) ident(lexer)operator(,) ident(PYGMENTS_FORMATTER)operator(\))
    keyword(return) operator([)ident(nodes)operator(.)ident(raw)operator(()string<delimiter(')delimiter(')>operator(,) ident(parsed)operator(,) ident(format)operator(=)string<delimiter(")content(html)delimiter(")>operator(\))operator(])
ident(pygments_directive)operator(.)ident(arguments) operator(=) operator(()integer(1)operator(,) integer(0)operator(,) integer(1)operator(\))
ident(pygments_directive)operator(.)ident(content) operator(=) integer(1)
ident(directives)operator(.)ident(register_directive)operator(()string<delimiter(')content(sourcecode)delimiter(')>operator(,) ident(pygments_directive)operator(\))


keyword(def) method(create_translator)operator(()ident(link_style)operator(\))operator(:)
    keyword(class) class(Translator)operator(()ident(html4css1)operator(.)ident(HTMLTranslator)operator(\))operator(:)
        keyword(def) method(visit_reference)operator(()predefined_constant(self)operator(,) ident(node)operator(\))operator(:)
            ident(refuri) operator(=) ident(node)operator(.)ident(get)operator(()string<delimiter(')content(refuri)delimiter(')>operator(\))
            keyword(if) ident(refuri) keyword(is) keyword(not) predefined_constant(None) keyword(and) string<delimiter(')content(/)delimiter(')> keyword(not) keyword(in) ident(refuri) keyword(and) ident(refuri)operator(.)ident(endswith)operator(()string<delimiter(')content(.txt)delimiter(')>operator(\))operator(:)
                ident(node)operator([)string<delimiter(')content(refuri)delimiter(')>operator(]) operator(=) ident(link_style)operator(()ident(refuri)operator([)operator(:)operator(-)integer(4)operator(])operator(\))
            ident(html4css1)operator(.)ident(HTMLTranslator)operator(.)ident(visit_reference)operator(()predefined_constant(self)operator(,) ident(node)operator(\))
    keyword(return) ident(Translator)


keyword(class) class(DocumentationWriter)operator(()ident(html4css1)operator(.)ident(Writer)operator(\))operator(:)

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) ident(link_style)operator(\))operator(:)
        ident(html4css1)operator(.)ident(Writer)operator(.)ident(__init__)operator(()predefined_constant(self)operator(\))
        predefined_constant(self)operator(.)ident(translator_class) operator(=) ident(create_translator)operator(()ident(link_style)operator(\))

    keyword(def) method(translate)operator(()predefined_constant(self)operator(\))operator(:)
        ident(html4css1)operator(.)ident(Writer)operator(.)ident(translate)operator(()predefined_constant(self)operator(\))
        comment(# generate table of contents)
        ident(contents) operator(=) predefined_constant(self)operator(.)ident(build_contents)operator(()predefined_constant(self)operator(.)ident(document)operator(\))
        ident(contents_doc) operator(=) predefined_constant(self)operator(.)ident(document)operator(.)ident(copy)operator(()operator(\))
        ident(contents_doc)operator(.)ident(children) operator(=) ident(contents)
        ident(contents_visitor) operator(=) predefined_constant(self)operator(.)ident(translator_class)operator(()ident(contents_doc)operator(\))
        ident(contents_doc)operator(.)ident(walkabout)operator(()ident(contents_visitor)operator(\))
        predefined_constant(self)operator(.)ident(parts)operator([)string<delimiter(')content(toc)delimiter(')>operator(]) operator(=) predefined_constant(self)operator(.)ident(_generated_toc)

    keyword(def) method(build_contents)operator(()predefined_constant(self)operator(,) ident(node)operator(,) ident(level)operator(=)integer(0)operator(\))operator(:)
        ident(sections) operator(=) operator([)operator(])
        ident(i) operator(=) predefined(len)operator(()ident(node)operator(\)) operator(-) integer(1)
        keyword(while) ident(i) operator(>=) integer(0) keyword(and) predefined(isinstance)operator(()ident(node)operator([)ident(i)operator(])operator(,) ident(nodes)operator(.)ident(section)operator(\))operator(:)
            ident(sections)operator(.)ident(append)operator(()ident(node)operator([)ident(i)operator(])operator(\))
            ident(i) operator(-=) integer(1)
        ident(sections)operator(.)ident(reverse)operator(()operator(\))
        ident(toc) operator(=) operator([)operator(])
        keyword(for) ident(section) keyword(in) ident(sections)operator(:)
            keyword(try)operator(:)
                ident(reference) operator(=) ident(nodes)operator(.)ident(reference)operator(()string<delimiter(')delimiter(')>operator(,) string<delimiter(')delimiter(')>operator(,) ident(refid)operator(=)ident(section)operator([)string<delimiter(')content(ids)delimiter(')>operator(])operator([)integer(0)operator(])operator(,) operator(*)ident(section)operator([)integer(0)operator(])operator(\))
            keyword(except) exception(IndexError)operator(:)
                keyword(continue)
            ident(ref_id) operator(=) ident(reference)operator([)string<delimiter(')content(refid)delimiter(')>operator(])
            ident(text) operator(=) ident(escape)operator(()ident(reference)operator(.)ident(astext)operator(()operator(\))operator(.)ident(encode)operator(()string<delimiter(')content(utf-8)delimiter(')>operator(\))operator(\))
            ident(toc)operator(.)ident(append)operator(()operator(()ident(ref_id)operator(,) ident(text)operator(\))operator(\))

        predefined_constant(self)operator(.)ident(_generated_toc) operator(=) operator([)operator(()string<delimiter(')content(#%s)delimiter(')> operator(%) ident(href)operator(,) ident(caption)operator(\)) keyword(for) ident(href)operator(,) ident(caption) keyword(in) ident(toc)operator(])
        comment(# no further processing)
        keyword(return) operator([)operator(])


keyword(def) method(generate_documentation)operator(()ident(data)operator(,) ident(link_style)operator(\))operator(:)
    ident(writer) operator(=) ident(DocumentationWriter)operator(()ident(link_style)operator(\))
    ident(data) operator(=) ident(data)operator(.)ident(replace)operator(()string<delimiter(')content([builtin_lexer_docs])delimiter(')>operator(,) ident(LEXERDOCS)operator(\))operator(.)\
                ident(replace)operator(()string<delimiter(')content([builtin_formatter_docs])delimiter(')>operator(,) ident(FORMATTERDOCS)operator(\))operator(.)\
                ident(replace)operator(()string<delimiter(')content([builtin_filter_docs])delimiter(')>operator(,) ident(FILTERDOCS)operator(\))operator(.)\
                ident(replace)operator(()string<delimiter(')content([changelog])delimiter(')>operator(,) ident(CHANGELOG)operator(\))operator(.)\
                ident(replace)operator(()string<delimiter(')content([authors])delimiter(')>operator(,) ident(AUTHORS)operator(\))
    ident(parts) operator(=) ident(publish_parts)operator(()
        ident(data)operator(,)
        ident(writer)operator(=)ident(writer)operator(,)
        ident(settings_overrides)operator(=)operator({)
            string<delimiter(')content(initial_header_level)delimiter(')>operator(:) integer(3)operator(,)
            string<delimiter(')content(field_name_limit)delimiter(')>operator(:) integer(50)operator(,)
        operator(})
    operator(\))
    keyword(return) operator({)
        string<delimiter(')content(title)delimiter(')>operator(:)        ident(parts)operator([)string<delimiter(')content(title)delimiter(')>operator(])operator(.)ident(encode)operator(()string<delimiter(')content(utf-8)delimiter(')>operator(\))operator(,)
        string<delimiter(')content(body)delimiter(')>operator(:)         ident(parts)operator([)string<delimiter(')content(body)delimiter(')>operator(])operator(.)ident(encode)operator(()string<delimiter(')content(utf-8)delimiter(')>operator(\))operator(,)
        string<delimiter(')content(toc)delimiter(')>operator(:)          ident(parts)operator([)string<delimiter(')content(toc)delimiter(')>operator(])
    operator(})


keyword(def) method(handle_python)operator(()ident(filename)operator(,) ident(fp)operator(,) ident(dst)operator(\))operator(:)
    ident(now) operator(=) ident(datetime)operator(.)ident(now)operator(()operator(\))
    ident(title) operator(=) ident(os)operator(.)ident(path)operator(.)ident(basename)operator(()ident(filename)operator(\))operator([)operator(:)operator(-)integer(4)operator(])
    ident(content) operator(=) ident(fp)operator(.)ident(read)operator(()operator(\))
    keyword(def) method(urlize)operator(()ident(href)operator(\))operator(:)
        comment(# create links for the pygments webpage)
        keyword(if) ident(href) operator(==) string<delimiter(')content(index.txt)delimiter(')>operator(:)
            keyword(return) string<delimiter(')content(/docs/)delimiter(')>
        keyword(else)operator(:)
            keyword(return) string<delimiter(')content(/docs/%s/)delimiter(')> operator(%) ident(href)
    ident(parts) operator(=) ident(generate_documentation)operator(()ident(content)operator(,) ident(urlize)operator(\))
    ident(result) operator(=) predefined(file)operator(()ident(os)operator(.)ident(path)operator(.)ident(join)operator(()ident(dst)operator(,) ident(title) operator(+) string<delimiter(')content(.py)delimiter(')>operator(\))operator(,) string<delimiter(')content(w)delimiter(')>operator(\))
    ident(result)operator(.)ident(write)operator(()string<delimiter(')content(# -*- coding: utf-8 -*-)char(\\n)delimiter(')>operator(\))
    ident(result)operator(.)ident(write)operator(()string<delimiter(')content(""")char(\\n)content(    Pygments Documentation - %s)char(\\n)delimiter(')> operator(%) ident(title)operator(\))
    ident(result)operator(.)ident(write)operator(()string<delimiter(')content(    %s)char(\\n)char(\\n)delimiter(')> operator(%) operator(()string<delimiter(')content(~)delimiter(')> operator(*) operator(()integer(24) operator(+) predefined(len)operator(()ident(title)operator(\))operator(\))operator(\))operator(\))
    ident(result)operator(.)ident(write)operator(()string<delimiter(')content(    Generated on: %s)char(\\n)content(""")char(\\n)char(\\n)delimiter(')> operator(%) ident(now)operator(\))
    ident(result)operator(.)ident(write)operator(()string<delimiter(')content(import datetime)char(\\n)delimiter(')>operator(\))
    ident(result)operator(.)ident(write)operator(()string<delimiter(')content(DATE = %r)char(\\n)delimiter(')> operator(%) ident(now)operator(\))
    ident(result)operator(.)ident(write)operator(()string<delimiter(')content(TITLE = %r)char(\\n)delimiter(')> operator(%) ident(parts)operator([)string<delimiter(')content(title)delimiter(')>operator(])operator(\))
    ident(result)operator(.)ident(write)operator(()string<delimiter(')content(TOC = %r)char(\\n)delimiter(')> operator(%) ident(parts)operator([)string<delimiter(')content(toc)delimiter(')>operator(])operator(\))
    ident(result)operator(.)ident(write)operator(()string<delimiter(')content(BODY = %r)char(\\n)delimiter(')> operator(%) ident(parts)operator([)string<delimiter(')content(body)delimiter(')>operator(])operator(\))
    ident(result)operator(.)ident(close)operator(()operator(\))


keyword(def) method(handle_html)operator(()ident(filename)operator(,) ident(fp)operator(,) ident(dst)operator(\))operator(:)
    ident(now) operator(=) ident(datetime)operator(.)ident(now)operator(()operator(\))
    ident(title) operator(=) ident(os)operator(.)ident(path)operator(.)ident(basename)operator(()ident(filename)operator(\))operator([)operator(:)operator(-)integer(4)operator(])
    ident(content) operator(=) ident(fp)operator(.)ident(read)operator(()operator(\))
    ident(c) operator(=) ident(generate_documentation)operator(()ident(content)operator(,) operator(()keyword(lambda) ident(x)operator(:) string<delimiter(')content(./%s.html)delimiter(')> operator(%) ident(x)operator(\))operator(\))
    ident(result) operator(=) predefined(file)operator(()ident(os)operator(.)ident(path)operator(.)ident(join)operator(()ident(dst)operator(,) ident(title) operator(+) string<delimiter(')content(.html)delimiter(')>operator(\))operator(,) string<delimiter(')content(w)delimiter(')>operator(\))
    ident(c)operator([)string<delimiter(')content(style)delimiter(')>operator(]) operator(=) ident(STYLESHEET) operator(+) ident(PYGMENTS_FORMATTER)operator(.)ident(get_style_defs)operator(()string<delimiter(')content(.syntax)delimiter(')>operator(\))
    ident(c)operator([)string<delimiter(')content(generation_date)delimiter(')>operator(]) operator(=) ident(now)
    ident(c)operator([)string<delimiter(')content(file_id)delimiter(')>operator(]) operator(=) ident(title)
    ident(t) operator(=) ident(from_string)operator(()ident(TEMPLATE)operator(\))
    ident(result)operator(.)ident(write)operator(()ident(t)operator(.)ident(render)operator(()ident(c)operator(\))operator(.)ident(encode)operator(()string<delimiter(')content(utf-8)delimiter(')>operator(\))operator(\))
    ident(result)operator(.)ident(close)operator(()operator(\))


keyword(def) method(run)operator(()ident(handle_file)operator(,) ident(dst)operator(,) ident(sources)operator(=)operator(()operator(\))operator(\))operator(:)
    ident(path) operator(=) ident(os)operator(.)ident(path)operator(.)ident(abspath)operator(()ident(os)operator(.)ident(path)operator(.)ident(join)operator(()ident(os)operator(.)ident(path)operator(.)ident(dirname)operator(()ident(__file__)operator(\))operator(,) string<delimiter(')content(src)delimiter(')>operator(\))operator(\))
    keyword(if) keyword(not) ident(sources)operator(:)
        ident(sources) operator(=) operator([)ident(os)operator(.)ident(path)operator(.)ident(join)operator(()ident(path)operator(,) ident(fn)operator(\)) keyword(for) ident(fn) keyword(in) ident(os)operator(.)ident(listdir)operator(()ident(path)operator(\))operator(])
    keyword(for) ident(fn) keyword(in) ident(sources)operator(:)
        keyword(if) keyword(not) ident(os)operator(.)ident(path)operator(.)ident(isfile)operator(()ident(fn)operator(\))operator(:)
            keyword(continue)
        keyword(print) string<delimiter(')content(Processing %s)delimiter(')> operator(%) ident(fn)
        ident(f) operator(=) predefined(open)operator(()ident(fn)operator(\))
        keyword(try)operator(:)
            ident(handle_file)operator(()ident(fn)operator(,) ident(f)operator(,) ident(dst)operator(\))
        keyword(finally)operator(:)
            ident(f)operator(.)ident(close)operator(()operator(\))


keyword(def) method(main)operator(()ident(mode)operator(,) ident(dst)operator(=)string<delimiter(')content(build/)delimiter(')>operator(,) operator(*)ident(sources)operator(\))operator(:)
    keyword(try)operator(:)
        ident(handler) operator(=) operator({)
            string<delimiter(')content(html)delimiter(')>operator(:)         ident(handle_html)operator(,)
            string<delimiter(')content(python)delimiter(')>operator(:)       ident(handle_python)
        operator(})operator([)ident(mode)operator(])
    keyword(except) exception(KeyError)operator(:)
        keyword(print) string<delimiter(')content(Error: unknown mode "%s")delimiter(')> operator(%) ident(mode)
        ident(sys)operator(.)ident(exit)operator(()integer(1)operator(\))
    ident(run)operator(()ident(handler)operator(,) ident(os)operator(.)ident(path)operator(.)ident(realpath)operator(()ident(dst)operator(\))operator(,) ident(sources)operator(\))


keyword(if) ident(__name__) operator(==) string<delimiter(')content(__main__)delimiter(')>operator(:)
    keyword(if) predefined(len)operator(()ident(sys)operator(.)ident(argv)operator(\)) operator(==) integer(1)operator(:)
        keyword(print) ident(USAGE)
    keyword(else)operator(:)
        ident(main)operator(()operator(*)ident(sys)operator(.)ident(argv)operator([)integer(1)operator(:)operator(])operator(\))
comment(# -*- coding: utf-8 -*-)
docstring<delimiter(""")content(
)content(    The Pygments Markdown Preprocessor)content(
)content(    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~)content(
)content(
)content(    This fragment is a Markdown_ preprocessor that renders source code)content(
)content(    to HTML via Pygments.  To use it, invoke Markdown like so::)content(
)content(
)content(        from markdown import Markdown)content(
)content(
)content(        md = Markdown(\))content(
)content(        md.textPreprocessors.insert(0, CodeBlockPreprocessor(\)\))content(
)content(        html = md.convert(someText\))content(
)content(
)content(    markdown is then a callable that can be passed to the context of)content(
)content(    a template and used in that template, for example.)content(
)content(
)content(    This uses CSS classes by default, so use)content(
)content(    ``pygmentize -S <some style> -f html > pygments.css``)content(
)content(    to create a stylesheet to be added to the website.)content(
)content(
)content(    You can then highlight source code in your markdown markup::)content(
)content(
)content(        [sourcecode:lexer])content(
)content(        some code)content(
)content(        [/sourcecode])content(
)content(
)content(    .. _Markdown: http://www.freewisdom.org/projects/python-markdown/)content(
)content(
)content(    :copyright: Copyright 2006-2009 by the Pygments team, see AUTHORS.)content(
)content(    :license: BSD, see LICENSE for details.)content(
)delimiter(""")>

comment(# Options)
comment(# ~~~~~~~)

comment(# Set to True if you want inline CSS styles instead of classes)
ident(INLINESTYLES) operator(=) predefined_constant(False)


keyword(import) include(re)

keyword(from) include(markdown) keyword(import) include(TextPreprocessor)

keyword(from) include(pygments) keyword(import) include(highlight)
keyword(from) include(pygments.formatters) keyword(import) include(HtmlFormatter)
keyword(from) include(pygments.lexers) keyword(import) include(get_lexer_by_name)operator(,) include(TextLexer)


keyword(class) class(CodeBlockPreprocessor)operator(()ident(TextPreprocessor)operator(\))operator(:)

    ident(pattern) operator(=) ident(re)operator(.)ident(compile)operator(()
        string<modifier(r)delimiter(')content(\\[)content(sourcecode:(.+?\))content(\\])content((.+?\))content(\\[)content(/sourcecode)content(\\])delimiter(')>operator(,) ident(re)operator(.)ident(S)operator(\))

    ident(formatter) operator(=) ident(HtmlFormatter)operator(()ident(noclasses)operator(=)ident(INLINESTYLES)operator(\))

    keyword(def) method(run)operator(()predefined_constant(self)operator(,) ident(lines)operator(\))operator(:)
        keyword(def) method(repl)operator(()ident(m)operator(\))operator(:)
            keyword(try)operator(:)
                ident(lexer) operator(=) ident(get_lexer_by_name)operator(()ident(m)operator(.)ident(group)operator(()integer(1)operator(\))operator(\))
            keyword(except) exception(ValueError)operator(:)
                ident(lexer) operator(=) ident(TextLexer)operator(()operator(\))
            ident(code) operator(=) ident(highlight)operator(()ident(m)operator(.)ident(group)operator(()integer(2)operator(\))operator(,) ident(lexer)operator(,) predefined_constant(self)operator(.)ident(formatter)operator(\))
            ident(code) operator(=) ident(code)operator(.)ident(replace)operator(()string<delimiter(')char(\\n)char(\\n)delimiter(')>operator(,) string<delimiter(')char(\\n)content(&nbsp;)char(\\n)delimiter(')>operator(\))operator(.)ident(replace)operator(()string<delimiter(')char(\\n)delimiter(')>operator(,) string<delimiter(')content(<br />)delimiter(')>operator(\))
            keyword(return) string<delimiter(')char(\\n)char(\\n)content(<div class="code">%s</div>)char(\\n)char(\\n)delimiter(')> operator(%) ident(code)
        keyword(return) predefined_constant(self)operator(.)ident(pattern)operator(.)ident(sub)operator(()
            ident(repl)operator(,) ident(lines)operator(\))comment(# -*- coding: utf-8 -*-)
docstring<delimiter(""")content(
)content(    The Pygments MoinMoin Parser)content(
)content(    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~)content(
)content(
)content(    This is a MoinMoin parser plugin that renders source code to HTML via)content(
)content(    Pygments; you need Pygments 0.7 or newer for this parser to work.)content(
)content(
)content(    To use it, set the options below to match your setup and put this file in)content(
)content(    the data/plugin/parser subdirectory of your Moin instance, and give it the)content(
)content(    name that the parser directive should have. For example, if you name the)content(
)content(    file ``code.py``, you can get a highlighted Python code sample with this)content(
)content(    Wiki markup::)content(
)content(
)content(        {{{)content(
)content(        #!code python)content(
)content(        [...])content(
)content(        }}})content(
)content(
)content(    Additionally, if you set ATTACHMENTS below to True, Pygments will also be)content(
)content(    called for all attachments for whose filenames there is no other parser)content(
)content(    registered.)content(
)content(
)content(    You are responsible for including CSS rules that will map the Pygments CSS)content(
)content(    classes to colors. You can output a stylesheet file with `pygmentize`, put)content(
)content(    it into the `htdocs` directory of your Moin instance and then include it in)content(
)content(    the `stylesheets` configuration option in the Moin config, e.g.::)content(
)content(
)content(        stylesheets = [('screen', '/htdocs/pygments.css'\)])content(
)content(
)content(    If you do not want to do that and are willing to accept larger HTML)content(
)content(    output, you can set the INLINESTYLES option below to True.)content(
)content(
)content(    :copyright: Copyright 2006-2009 by the Pygments team, see AUTHORS.)content(
)content(    :license: BSD, see LICENSE for details.)content(
)delimiter(""")>

comment(# Options)
comment(# ~~~~~~~)

comment(# Set to True if you want to highlight attachments, in addition to)
comment(# {{{ }}} blocks.)
ident(ATTACHMENTS) operator(=) predefined_constant(True)

comment(# Set to True if you want inline CSS styles instead of classes)
ident(INLINESTYLES) operator(=) predefined_constant(False)


keyword(import) include(sys)

keyword(from) include(pygments) keyword(import) include(highlight)
keyword(from) include(pygments.lexers) keyword(import) include(get_lexer_by_name)operator(,) include(get_lexer_for_filename)operator(,) include(TextLexer)
keyword(from) include(pygments.formatters) keyword(import) include(HtmlFormatter)
keyword(from) include(pygments.util) keyword(import) include(ClassNotFound)


comment(# wrap lines in <span>s so that the Moin-generated line numbers work)
keyword(class) class(MoinHtmlFormatter)operator(()ident(HtmlFormatter)operator(\))operator(:)
    keyword(def) method(wrap)operator(()predefined_constant(self)operator(,) ident(source)operator(,) ident(outfile)operator(\))operator(:)
        keyword(for) ident(line) keyword(in) ident(source)operator(:)
            keyword(yield) integer(1)operator(,) string<delimiter(')content(<span class="line">)delimiter(')> operator(+) ident(line)operator([)integer(1)operator(]) operator(+) string<delimiter(')content(</span>)delimiter(')>

ident(htmlformatter) operator(=) ident(MoinHtmlFormatter)operator(()ident(noclasses)operator(=)ident(INLINESTYLES)operator(\))
ident(textlexer) operator(=) ident(TextLexer)operator(()operator(\))
ident(codeid) operator(=) operator([)integer(0)operator(])


keyword(class) class(Parser)operator(:)
    docstring<delimiter(""")content(
)content(    MoinMoin Pygments parser.)content(
)content(    )delimiter(""")>
    keyword(if) ident(ATTACHMENTS)operator(:)
        ident(extensions) operator(=) string<delimiter(')content(*)delimiter(')>
    keyword(else)operator(:)
        ident(extensions) operator(=) operator([)operator(])

    ident(Dependencies) operator(=) operator([)operator(])

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) ident(raw)operator(,) ident(request)operator(,) operator(**)ident(kw)operator(\))operator(:)
        predefined_constant(self)operator(.)ident(raw) operator(=) ident(raw)
        predefined_constant(self)operator(.)ident(req) operator(=) ident(request)
        keyword(if) string<delimiter(")content(format_args)delimiter(")> keyword(in) ident(kw)operator(:)
            comment(# called from a {{{ }}} block)
            keyword(try)operator(:)
                predefined_constant(self)operator(.)ident(lexer) operator(=) ident(get_lexer_by_name)operator(()ident(kw)operator([)string<delimiter(')content(format_args)delimiter(')>operator(])operator(.)ident(strip)operator(()operator(\))operator(\))
            keyword(except) ident(ClassNotFound)operator(:)
                predefined_constant(self)operator(.)ident(lexer) operator(=) ident(textlexer)
            keyword(return)
        keyword(if) string<delimiter(")content(filename)delimiter(")> keyword(in) ident(kw)operator(:)
            comment(# called for an attachment)
            ident(filename) operator(=) ident(kw)operator([)string<delimiter(')content(filename)delimiter(')>operator(])
        keyword(else)operator(:)
            comment(# called for an attachment by an older moin)
            comment(# HACK: find out the filename by peeking into the execution)
            comment(#       frame which might not always work)
            keyword(try)operator(:)
                ident(frame) operator(=) ident(sys)operator(.)ident(_getframe)operator(()integer(1)operator(\))
                ident(filename) operator(=) ident(frame)operator(.)ident(f_locals)operator([)string<delimiter(')content(filename)delimiter(')>operator(])
            keyword(except)operator(:)
                ident(filename) operator(=) string<delimiter(')content(x.txt)delimiter(')>
        keyword(try)operator(:)
            predefined_constant(self)operator(.)ident(lexer) operator(=) ident(get_lexer_for_filename)operator(()ident(filename)operator(\))
        keyword(except) ident(ClassNotFound)operator(:)
            predefined_constant(self)operator(.)ident(lexer) operator(=) ident(textlexer)

    keyword(def) method(format)operator(()predefined_constant(self)operator(,) ident(formatter)operator(\))operator(:)
        ident(codeid)operator([)integer(0)operator(]) operator(+=) integer(1)
        ident(id) operator(=) string<delimiter(")content(pygments_%s)delimiter(")> operator(%) ident(codeid)operator([)integer(0)operator(])
        ident(w) operator(=) predefined_constant(self)operator(.)ident(req)operator(.)ident(write)
        ident(w)operator(()ident(formatter)operator(.)ident(code_area)operator(()integer(1)operator(,) predefined(id)operator(,) ident(start)operator(=)integer(1)operator(,) ident(step)operator(=)integer(1)operator(\))operator(\))
        ident(w)operator(()ident(formatter)operator(.)ident(rawHTML)operator(()ident(highlight)operator(()predefined_constant(self)operator(.)ident(raw)operator(,) predefined_constant(self)operator(.)ident(lexer)operator(,) ident(htmlformatter)operator(\))operator(\))operator(\))
        ident(w)operator(()ident(formatter)operator(.)ident(code_area)operator(()integer(0)operator(,) predefined(id)operator(\))operator(\))
comment(# -*- coding: utf-8 -*-)
docstring<delimiter(""")content(
)content(    The Pygments reStructuredText directive)content(
)content(    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~)content(
)content(
)content(    This fragment is a Docutils_ 0.4 directive that renders source code)content(
)content(    (to HTML only, currently\) via Pygments.)content(
)content(
)content(    To use it, adjust the options below and copy the code into a module)content(
)content(    that you import on initialization.  The code then automatically)content(
)content(    registers a ``sourcecode`` directive that you can use instead of)content(
)content(    normal code blocks like this::)content(
)content(
)content(        .. sourcecode:: python)content(
)content(
)content(            My code goes here.)content(
)content(
)content(    If you want to have different code styles, e.g. one with line numbers)content(
)content(    and one without, add formatters with their names in the VARIANTS dict)content(
)content(    below.  You can invoke them instead of the DEFAULT one by using a)content(
)content(    directive option::)content(
)content(
)content(        .. sourcecode:: python)content(
)content(            :linenos:)content(
)content(
)content(            My code goes here.)content(
)content(
)content(    Look at the `directive documentation`_ to get all the gory details.)content(
)content(
)content(    .. _Docutils: http://docutils.sf.net/)content(
)content(    .. _directive documentation:)content(
)content(       http://docutils.sourceforge.net/docs/howto/rst-directives.html)content(
)content(
)content(    :copyright: Copyright 2006-2009 by the Pygments team, see AUTHORS.)content(
)content(    :license: BSD, see LICENSE for details.)content(
)delimiter(""")>

comment(# Options)
comment(# ~~~~~~~)

comment(# Set to True if you want inline CSS styles instead of classes)
ident(INLINESTYLES) operator(=) predefined_constant(False)

keyword(from) include(pygments.formatters) keyword(import) include(HtmlFormatter)

comment(# The default formatter)
ident(DEFAULT) operator(=) ident(HtmlFormatter)operator(()ident(noclasses)operator(=)ident(INLINESTYLES)operator(\))

comment(# Add name -> formatter pairs for every variant you want to use)
ident(VARIANTS) operator(=) operator({)
    comment(# 'linenos': HtmlFormatter(noclasses=INLINESTYLES, linenos=True\),)
operator(})


keyword(from) include(docutils) keyword(import) include(nodes)
keyword(from) include(docutils.parsers.rst) keyword(import) include(directives)

keyword(from) include(pygments) keyword(import) include(highlight)
keyword(from) include(pygments.lexers) keyword(import) include(get_lexer_by_name)operator(,) include(TextLexer)

keyword(def) method(pygments_directive)operator(()ident(name)operator(,) ident(arguments)operator(,) ident(options)operator(,) ident(content)operator(,) ident(lineno)operator(,)
                       ident(content_offset)operator(,) ident(block_text)operator(,) ident(state)operator(,) ident(state_machine)operator(\))operator(:)
    keyword(try)operator(:)
        ident(lexer) operator(=) ident(get_lexer_by_name)operator(()ident(arguments)operator([)integer(0)operator(])operator(\))
    keyword(except) exception(ValueError)operator(:)
        comment(# no lexer found - use the text one instead of an exception)
        ident(lexer) operator(=) ident(TextLexer)operator(()operator(\))
    comment(# take an arbitrary option if more than one is given)
    ident(formatter) operator(=) ident(options) keyword(and) ident(VARIANTS)operator([)ident(options)operator(.)ident(keys)operator(()operator(\))operator([)integer(0)operator(])operator(]) keyword(or) ident(DEFAULT)
    ident(parsed) operator(=) ident(highlight)operator(()string<modifier(u)delimiter(')char(\\n)delimiter(')>operator(.)ident(join)operator(()ident(content)operator(\))operator(,) ident(lexer)operator(,) ident(formatter)operator(\))
    keyword(return) operator([)ident(nodes)operator(.)ident(raw)operator(()string<delimiter(')delimiter(')>operator(,) ident(parsed)operator(,) ident(format)operator(=)string<delimiter(')content(html)delimiter(')>operator(\))operator(])

ident(pygments_directive)operator(.)ident(arguments) operator(=) operator(()integer(1)operator(,) integer(0)operator(,) integer(1)operator(\))
ident(pygments_directive)operator(.)ident(content) operator(=) integer(1)
ident(pygments_directive)operator(.)ident(options) operator(=) predefined(dict)operator(()operator([)operator(()ident(key)operator(,) ident(directives)operator(.)ident(flag)operator(\)) keyword(for) ident(key) keyword(in) ident(VARIANTS)operator(])operator(\))

ident(directives)operator(.)ident(register_directive)operator(()string<delimiter(')content(sourcecode)delimiter(')>operator(,) ident(pygments_directive)operator(\))
comment(#!python)
docstring<delimiter(""")content(Bootstrap setuptools installation)content(
)content(
)content(If you want to use setuptools in your package's setup.py, just include this)content(
)content(file in the same directory with it, and add this to the top of your setup.py::)content(
)content(
)content(    from ez_setup import use_setuptools)content(
)content(    use_setuptools(\))content(
)content(
)content(If you want to require a specific version of setuptools, set a download)content(
)content(mirror, or use an alternate download directory, you can do so by supplying)content(
)content(the appropriate options to ``use_setuptools(\)``.)content(
)content(
)content(This file can also be run as a script to install or upgrade setuptools.)content(
)delimiter(""")>
keyword(import) include(sys)
ident(DEFAULT_VERSION) operator(=) string<delimiter(")content(0.6c9)delimiter(")>
ident(DEFAULT_URL)     operator(=) string<delimiter(")content(http://pypi.python.org/packages/%s/s/setuptools/)delimiter(")> operator(%) ident(sys)operator(.)ident(version)operator([)operator(:)integer(3)operator(])

ident(md5_data) operator(=) operator({)
    string<delimiter(')content(setuptools-0.6b1-py2.3.egg)delimiter(')>operator(:) string<delimiter(')content(8822caf901250d848b996b7f25c6e6ca)delimiter(')>operator(,)
    string<delimiter(')content(setuptools-0.6b1-py2.4.egg)delimiter(')>operator(:) string<delimiter(')content(b79a8a403e4502fbb85ee3f1941735cb)delimiter(')>operator(,)
    string<delimiter(')content(setuptools-0.6b2-py2.3.egg)delimiter(')>operator(:) string<delimiter(')content(5657759d8a6d8fc44070a9d07272d99b)delimiter(')>operator(,)
    string<delimiter(')content(setuptools-0.6b2-py2.4.egg)delimiter(')>operator(:) string<delimiter(')content(4996a8d169d2be661fa32a6e52e4f82a)delimiter(')>operator(,)
    string<delimiter(')content(setuptools-0.6b3-py2.3.egg)delimiter(')>operator(:) string<delimiter(')content(bb31c0fc7399a63579975cad9f5a0618)delimiter(')>operator(,)
    string<delimiter(')content(setuptools-0.6b3-py2.4.egg)delimiter(')>operator(:) string<delimiter(')content(38a8c6b3d6ecd22247f179f7da669fac)delimiter(')>operator(,)
    string<delimiter(')content(setuptools-0.6b4-py2.3.egg)delimiter(')>operator(:) string<delimiter(')content(62045a24ed4e1ebc77fe039aa4e6f7e5)delimiter(')>operator(,)
    string<delimiter(')content(setuptools-0.6b4-py2.4.egg)delimiter(')>operator(:) string<delimiter(')content(4cb2a185d228dacffb2d17f103b3b1c4)delimiter(')>operator(,)
    string<delimiter(')content(setuptools-0.6c1-py2.3.egg)delimiter(')>operator(:) string<delimiter(')content(b3f2b5539d65cb7f74ad79127f1a908c)delimiter(')>operator(,)
    string<delimiter(')content(setuptools-0.6c1-py2.4.egg)delimiter(')>operator(:) string<delimiter(')content(b45adeda0667d2d2ffe14009364f2a4b)delimiter(')>operator(,)
    string<delimiter(')content(setuptools-0.6c2-py2.3.egg)delimiter(')>operator(:) string<delimiter(')content(f0064bf6aa2b7d0f3ba0b43f20817c27)delimiter(')>operator(,)
    string<delimiter(')content(setuptools-0.6c2-py2.4.egg)delimiter(')>operator(:) string<delimiter(')content(616192eec35f47e8ea16cd6a122b7277)delimiter(')>operator(,)
    string<delimiter(')content(setuptools-0.6c3-py2.3.egg)delimiter(')>operator(:) string<delimiter(')content(f181fa125dfe85a259c9cd6f1d7b78fa)delimiter(')>operator(,)
    string<delimiter(')content(setuptools-0.6c3-py2.4.egg)delimiter(')>operator(:) string<delimiter(')content(e0ed74682c998bfb73bf803a50e7b71e)delimiter(')>operator(,)
    string<delimiter(')content(setuptools-0.6c3-py2.5.egg)delimiter(')>operator(:) string<delimiter(')content(abef16fdd61955514841c7c6bd98965e)delimiter(')>operator(,)
    string<delimiter(')content(setuptools-0.6c4-py2.3.egg)delimiter(')>operator(:) string<delimiter(')content(b0b9131acab32022bfac7f44c5d7971f)delimiter(')>operator(,)
    string<delimiter(')content(setuptools-0.6c4-py2.4.egg)delimiter(')>operator(:) string<delimiter(')content(2a1f9656d4fbf3c97bf946c0a124e6e2)delimiter(')>operator(,)
    string<delimiter(')content(setuptools-0.6c4-py2.5.egg)delimiter(')>operator(:) string<delimiter(')content(8f5a052e32cdb9c72bcf4b5526f28afc)delimiter(')>operator(,)
    string<delimiter(')content(setuptools-0.6c5-py2.3.egg)delimiter(')>operator(:) string<delimiter(')content(ee9fd80965da04f2f3e6b3576e9d8167)delimiter(')>operator(,)
    string<delimiter(')content(setuptools-0.6c5-py2.4.egg)delimiter(')>operator(:) string<delimiter(')content(afe2adf1c01701ee841761f5bcd8aa64)delimiter(')>operator(,)
    string<delimiter(')content(setuptools-0.6c5-py2.5.egg)delimiter(')>operator(:) string<delimiter(')content(a8d3f61494ccaa8714dfed37bccd3d5d)delimiter(')>operator(,)
    string<delimiter(')content(setuptools-0.6c6-py2.3.egg)delimiter(')>operator(:) string<delimiter(')content(35686b78116a668847237b69d549ec20)delimiter(')>operator(,)
    string<delimiter(')content(setuptools-0.6c6-py2.4.egg)delimiter(')>operator(:) string<delimiter(')content(3c56af57be3225019260a644430065ab)delimiter(')>operator(,)
    string<delimiter(')content(setuptools-0.6c6-py2.5.egg)delimiter(')>operator(:) string<delimiter(')content(b2f8a7520709a5b34f80946de5f02f53)delimiter(')>operator(,)
    string<delimiter(')content(setuptools-0.6c7-py2.3.egg)delimiter(')>operator(:) string<delimiter(')content(209fdf9adc3a615e5115b725658e13e2)delimiter(')>operator(,)
    string<delimiter(')content(setuptools-0.6c7-py2.4.egg)delimiter(')>operator(:) string<delimiter(')content(5a8f954807d46a0fb67cf1f26c55a82e)delimiter(')>operator(,)
    string<delimiter(')content(setuptools-0.6c7-py2.5.egg)delimiter(')>operator(:) string<delimiter(')content(45d2ad28f9750e7434111fde831e8372)delimiter(')>operator(,)
    string<delimiter(')content(setuptools-0.6c8-py2.3.egg)delimiter(')>operator(:) string<delimiter(')content(50759d29b349db8cfd807ba8303f1902)delimiter(')>operator(,)
    string<delimiter(')content(setuptools-0.6c8-py2.4.egg)delimiter(')>operator(:) string<delimiter(')content(cba38d74f7d483c06e9daa6070cce6de)delimiter(')>operator(,)
    string<delimiter(')content(setuptools-0.6c8-py2.5.egg)delimiter(')>operator(:) string<delimiter(')content(1721747ee329dc150590a58b3e1ac95b)delimiter(')>operator(,)
    string<delimiter(')content(setuptools-0.6c9-py2.3.egg)delimiter(')>operator(:) string<delimiter(')content(a83c4020414807b496e4cfbe08507c03)delimiter(')>operator(,)
    string<delimiter(')content(setuptools-0.6c9-py2.4.egg)delimiter(')>operator(:) string<delimiter(')content(260a2be2e5388d66bdaee06abec6342a)delimiter(')>operator(,)
    string<delimiter(')content(setuptools-0.6c9-py2.5.egg)delimiter(')>operator(:) string<delimiter(')content(fe67c3e5a17b12c0e7c541b7ea43a8e6)delimiter(')>operator(,)
    string<delimiter(')content(setuptools-0.6c9-py2.6.egg)delimiter(')>operator(:) string<delimiter(')content(ca37b1ff16fa2ede6e19383e7b59245a)delimiter(')>operator(,)
operator(})

keyword(import) include(sys)operator(,) include(os)
keyword(try)operator(:) keyword(from) include(hashlib) keyword(import) include(md5)
keyword(except) exception(ImportError)operator(:) keyword(from) include(md5) keyword(import) include(md5)

keyword(def) method(_validate_md5)operator(()ident(egg_name)operator(,) ident(data)operator(\))operator(:)
    keyword(if) ident(egg_name) keyword(in) ident(md5_data)operator(:)
        ident(digest) operator(=) ident(md5)operator(()ident(data)operator(\))operator(.)ident(hexdigest)operator(()operator(\))
        keyword(if) ident(digest) operator(!=) ident(md5_data)operator([)ident(egg_name)operator(])operator(:)
            keyword(print) operator(>>)ident(sys)operator(.)ident(stderr)operator(,) operator(()
                string<delimiter(")content(md5 validation of %s failed!  (Possible download problem?\))delimiter(")>
                operator(%) ident(egg_name)
            operator(\))
            ident(sys)operator(.)ident(exit)operator(()integer(2)operator(\))
    keyword(return) ident(data)

keyword(def) method(use_setuptools)operator(()
    ident(version)operator(=)ident(DEFAULT_VERSION)operator(,) ident(download_base)operator(=)ident(DEFAULT_URL)operator(,) ident(to_dir)operator(=)ident(os)operator(.)ident(curdir)operator(,)
    ident(download_delay)operator(=)integer(15)
operator(\))operator(:)
    docstring<delimiter(""")content(Automatically find/download setuptools and make it available on sys.path)content(
)content(
)content(    `version` should be a valid setuptools version number that is available)content(
)content(    as an egg for download under the `download_base` URL (which should end with)content(
)content(    a '/'\).  `to_dir` is the directory where setuptools will be downloaded, if)content(
)content(    it is not already available.  If `download_delay` is specified, it should)content(
)content(    be the number of seconds that will be paused before initiating a download,)content(
)content(    should one be required.  If an older version of setuptools is installed,)content(
)content(    this routine will print a message to ``sys.stderr`` and raise SystemExit in)content(
)content(    an attempt to abort the calling script.)content(
)content(    )delimiter(""")>
    ident(was_imported) operator(=) string<delimiter(')content(pkg_resources)delimiter(')> keyword(in) ident(sys)operator(.)ident(modules) keyword(or) string<delimiter(')content(setuptools)delimiter(')> keyword(in) ident(sys)operator(.)ident(modules)
    keyword(def) method(do_download)operator(()operator(\))operator(:)
        ident(egg) operator(=) ident(download_setuptools)operator(()ident(version)operator(,) ident(download_base)operator(,) ident(to_dir)operator(,) ident(download_delay)operator(\))
        ident(sys)operator(.)ident(path)operator(.)ident(insert)operator(()integer(0)operator(,) ident(egg)operator(\))
        keyword(import) include(setuptools)operator(;) ident(setuptools)operator(.)ident(bootstrap_install_from) operator(=) ident(egg)
    keyword(try)operator(:)
        keyword(import) include(pkg_resources)
    keyword(except) exception(ImportError)operator(:)
        keyword(return) ident(do_download)operator(()operator(\))       
    keyword(try)operator(:)
        ident(pkg_resources)operator(.)ident(require)operator(()string<delimiter(")content(setuptools>=)delimiter(")>operator(+)ident(version)operator(\))operator(;) keyword(return)
    keyword(except) ident(pkg_resources)operator(.)ident(VersionConflict)operator(,) ident(e)operator(:)
        keyword(if) ident(was_imported)operator(:)
            keyword(print) operator(>>)ident(sys)operator(.)ident(stderr)operator(,) operator(()
            string<delimiter(")content(The required version of setuptools (>=%s\) is not available, and)char(\\n)delimiter(")>
            string<delimiter(")content(can't be installed while this script is running. Please install)char(\\n)delimiter(")>
            string<delimiter(")content( a more recent version first, using 'easy_install -U setuptools'.)delimiter(")>
            string<delimiter(")char(\\n)char(\\n)content((Currently using %r\))delimiter(")>
            operator(\)) operator(%) operator(()ident(version)operator(,) ident(e)operator(.)ident(args)operator([)integer(0)operator(])operator(\))
            ident(sys)operator(.)ident(exit)operator(()integer(2)operator(\))
        keyword(else)operator(:)
            keyword(del) ident(pkg_resources)operator(,) ident(sys)operator(.)ident(modules)operator([)string<delimiter(')content(pkg_resources)delimiter(')>operator(])    comment(# reload ok)
            keyword(return) ident(do_download)operator(()operator(\))
    keyword(except) ident(pkg_resources)operator(.)ident(DistributionNotFound)operator(:)
        keyword(return) ident(do_download)operator(()operator(\))

keyword(def) method(download_setuptools)operator(()
    ident(version)operator(=)ident(DEFAULT_VERSION)operator(,) ident(download_base)operator(=)ident(DEFAULT_URL)operator(,) ident(to_dir)operator(=)ident(os)operator(.)ident(curdir)operator(,)
    ident(delay) operator(=) integer(15)
operator(\))operator(:)
    docstring<delimiter(""")content(Download setuptools from a specified location and return its filename)content(
)content(
)content(    `version` should be a valid setuptools version number that is available)content(
)content(    as an egg for download under the `download_base` URL (which should end)content(
)content(    with a '/'\). `to_dir` is the directory where the egg will be downloaded.)content(
)content(    `delay` is the number of seconds to pause before an actual download attempt.)content(
)content(    )delimiter(""")>
    keyword(import) include(urllib2)operator(,) include(shutil)
    ident(egg_name) operator(=) string<delimiter(")content(setuptools-%s-py%s.egg)delimiter(")> operator(%) operator(()ident(version)operator(,)ident(sys)operator(.)ident(version)operator([)operator(:)integer(3)operator(])operator(\))
    ident(url) operator(=) ident(download_base) operator(+) ident(egg_name)
    ident(saveto) operator(=) ident(os)operator(.)ident(path)operator(.)ident(join)operator(()ident(to_dir)operator(,) ident(egg_name)operator(\))
    ident(src) operator(=) ident(dst) operator(=) predefined_constant(None)
    keyword(if) keyword(not) ident(os)operator(.)ident(path)operator(.)ident(exists)operator(()ident(saveto)operator(\))operator(:)  comment(# Avoid repeated downloads)
        keyword(try)operator(:)
            keyword(from) include(distutils) keyword(import) include(log)
            keyword(if) ident(delay)operator(:)
                ident(log)operator(.)ident(warn)operator(()string<delimiter(""")content(
)content(---------------------------------------------------------------------------)content(
)content(This script requires setuptools version %s to run (even to display)content(
)content(help\).  I will attempt to download it for you (from)content(
)content(%s\), but)content(
)content(you may need to enable firewall access for this script first.)content(
)content(I will start the download in %d seconds.)content(
)content(
)content((Note: if this machine does not have network access, please obtain the file)content(
)content(
)content(   %s)content(
)content(
)content(and place it in this directory before rerunning this script.\))content(
)content(---------------------------------------------------------------------------)delimiter(""")>operator(,)
                    ident(version)operator(,) ident(download_base)operator(,) ident(delay)operator(,) ident(url)
                operator(\))operator(;) keyword(from) include(time) keyword(import) include(sleep)operator(;) ident(sleep)operator(()ident(delay)operator(\))
            ident(log)operator(.)ident(warn)operator(()string<delimiter(")content(Downloading %s)delimiter(")>operator(,) ident(url)operator(\))
            ident(src) operator(=) ident(urllib2)operator(.)ident(urlopen)operator(()ident(url)operator(\))
            comment(# Read/write all in one block, so we don't create a corrupt file)
            comment(# if the download is interrupted.)
            ident(data) operator(=) ident(_validate_md5)operator(()ident(egg_name)operator(,) ident(src)operator(.)ident(read)operator(()operator(\))operator(\))
            ident(dst) operator(=) predefined(open)operator(()ident(saveto)operator(,)string<delimiter(")content(wb)delimiter(")>operator(\))operator(;) ident(dst)operator(.)ident(write)operator(()ident(data)operator(\))
        keyword(finally)operator(:)
            keyword(if) ident(src)operator(:) ident(src)operator(.)ident(close)operator(()operator(\))
            keyword(if) ident(dst)operator(:) ident(dst)operator(.)ident(close)operator(()operator(\))
    keyword(return) ident(os)operator(.)ident(path)operator(.)ident(realpath)operator(()ident(saveto)operator(\))




































keyword(def) method(main)operator(()ident(argv)operator(,) ident(version)operator(=)ident(DEFAULT_VERSION)operator(\))operator(:)
    docstring<delimiter(""")content(Install or upgrade setuptools and EasyInstall)delimiter(""")>
    keyword(try)operator(:)
        keyword(import) include(setuptools)
    keyword(except) exception(ImportError)operator(:)
        ident(egg) operator(=) predefined_constant(None)
        keyword(try)operator(:)
            ident(egg) operator(=) ident(download_setuptools)operator(()ident(version)operator(,) ident(delay)operator(=)integer(0)operator(\))
            ident(sys)operator(.)ident(path)operator(.)ident(insert)operator(()integer(0)operator(,)ident(egg)operator(\))
            keyword(from) include(setuptools.command.easy_install) keyword(import) include(main)
            keyword(return) ident(main)operator(()predefined(list)operator(()ident(argv)operator(\))operator(+)operator([)ident(egg)operator(])operator(\))   comment(# we're done here)
        keyword(finally)operator(:)
            keyword(if) ident(egg) keyword(and) ident(os)operator(.)ident(path)operator(.)ident(exists)operator(()ident(egg)operator(\))operator(:)
                ident(os)operator(.)ident(unlink)operator(()ident(egg)operator(\))
    keyword(else)operator(:)
        keyword(if) ident(setuptools)operator(.)ident(__version__) operator(==) string<delimiter(')content(0.0.1)delimiter(')>operator(:)
            keyword(print) operator(>>)ident(sys)operator(.)ident(stderr)operator(,) operator(()
            string<delimiter(")content(You have an obsolete version of setuptools installed.  Please)char(\\n)delimiter(")>
            string<delimiter(")content(remove it from your system entirely before rerunning this script.)delimiter(")>
            operator(\))
            ident(sys)operator(.)ident(exit)operator(()integer(2)operator(\))

    ident(req) operator(=) string<delimiter(")content(setuptools>=)delimiter(")>operator(+)ident(version)
    keyword(import) include(pkg_resources)
    keyword(try)operator(:)
        ident(pkg_resources)operator(.)ident(require)operator(()ident(req)operator(\))
    keyword(except) ident(pkg_resources)operator(.)ident(VersionConflict)operator(:)
        keyword(try)operator(:)
            keyword(from) include(setuptools.command.easy_install) keyword(import) include(main)
        keyword(except) exception(ImportError)operator(:)
            keyword(from) include(easy_install) keyword(import) include(main)
        ident(main)operator(()predefined(list)operator(()ident(argv)operator(\))operator(+)operator([)ident(download_setuptools)operator(()ident(delay)operator(=)integer(0)operator(\))operator(])operator(\))
        ident(sys)operator(.)ident(exit)operator(()integer(0)operator(\)) comment(# try to force an exit)
    keyword(else)operator(:)
        keyword(if) ident(argv)operator(:)
            keyword(from) include(setuptools.command.easy_install) keyword(import) include(main)
            ident(main)operator(()ident(argv)operator(\))
        keyword(else)operator(:)
            keyword(print) string<delimiter(")content(Setuptools version)delimiter(")>operator(,)ident(version)operator(,)string<delimiter(")content(or greater has been installed.)delimiter(")>
            keyword(print) string<delimiter(')content((Run "ez_setup.py -U setuptools" to reinstall or upgrade.\))delimiter(')>

keyword(def) method(update_md5)operator(()ident(filenames)operator(\))operator(:)
    docstring<delimiter(""")content(Update our built-in md5 registry)delimiter(""")>

    keyword(import) include(re)

    keyword(for) ident(name) keyword(in) ident(filenames)operator(:)
        ident(base) operator(=) ident(os)operator(.)ident(path)operator(.)ident(basename)operator(()ident(name)operator(\))
        ident(f) operator(=) predefined(open)operator(()ident(name)operator(,)string<delimiter(')content(rb)delimiter(')>operator(\))
        ident(md5_data)operator([)ident(base)operator(]) operator(=) ident(md5)operator(()ident(f)operator(.)ident(read)operator(()operator(\))operator(\))operator(.)ident(hexdigest)operator(()operator(\))
        ident(f)operator(.)ident(close)operator(()operator(\))

    ident(data) operator(=) operator([)string<delimiter(")content(    %r: %r,)char(\\n)delimiter(")> operator(%) ident(it) keyword(for) ident(it) keyword(in) ident(md5_data)operator(.)ident(items)operator(()operator(\))operator(])
    ident(data)operator(.)ident(sort)operator(()operator(\))
    ident(repl) operator(=) string<delimiter(")delimiter(")>operator(.)ident(join)operator(()ident(data)operator(\))

    keyword(import) include(inspect)
    ident(srcfile) operator(=) ident(inspect)operator(.)ident(getsourcefile)operator(()ident(sys)operator(.)ident(modules)operator([)ident(__name__)operator(])operator(\))
    ident(f) operator(=) predefined(open)operator(()ident(srcfile)operator(,) string<delimiter(')content(rb)delimiter(')>operator(\))operator(;) ident(src) operator(=) ident(f)operator(.)ident(read)operator(()operator(\))operator(;) ident(f)operator(.)ident(close)operator(()operator(\))

    ident(match) operator(=) ident(re)operator(.)ident(search)operator(()string<delimiter(")char(\\n)content(md5_data = {)char(\\n)content(([^}]+\)})delimiter(")>operator(,) ident(src)operator(\))
    keyword(if) keyword(not) ident(match)operator(:)
        keyword(print) operator(>>)ident(sys)operator(.)ident(stderr)operator(,) string<delimiter(")content(Internal error!)delimiter(")>
        ident(sys)operator(.)ident(exit)operator(()integer(2)operator(\))

    ident(src) operator(=) ident(src)operator([)operator(:)ident(match)operator(.)ident(start)operator(()integer(1)operator(\))operator(]) operator(+) ident(repl) operator(+) ident(src)operator([)ident(match)operator(.)ident(end)operator(()integer(1)operator(\))operator(:)operator(])
    ident(f) operator(=) predefined(open)operator(()ident(srcfile)operator(,)string<delimiter(')content(w)delimiter(')>operator(\))
    ident(f)operator(.)ident(write)operator(()ident(src)operator(\))
    ident(f)operator(.)ident(close)operator(()operator(\))


keyword(if) ident(__name__)operator(==)string<delimiter(')content(__main__)delimiter(')>operator(:)
    keyword(if) predefined(len)operator(()ident(sys)operator(.)ident(argv)operator(\))operator(>)integer(2) keyword(and) ident(sys)operator(.)ident(argv)operator([)integer(1)operator(])operator(==)string<delimiter(')content(--md5update)delimiter(')>operator(:)
        ident(update_md5)operator(()ident(sys)operator(.)ident(argv)operator([)integer(2)operator(:)operator(])operator(\))
    keyword(else)operator(:)
        ident(main)operator(()ident(sys)operator(.)ident(argv)operator([)integer(1)operator(:)operator(])operator(\))






comment(# -*- coding: utf-8 -*-)
docstring<delimiter(""")content(
)content(    Pygments)content(
)content(    ~~~~~~~~)content(
)content(
)content(    Pygments is a syntax highlighting package written in Python.)content(
)content(
)content(    It is a generic syntax highlighter for general use in all kinds of software)content(
)content(    such as forum systems, wikis or other applications that need to prettify)content(
)content(    source code. Highlights are:)content(
)content(
)content(    * a wide range of common languages and markup formats is supported)content(
)content(    * special attention is paid to details, increasing quality by a fair amount)content(
)content(    * support for new languages and formats are added easily)content(
)content(    * a number of output formats, presently HTML, LaTeX, RTF, SVG and ANSI sequences)content(
)content(    * it is usable as a command-line tool and as a library)content(
)content(    * ... and it highlights even Brainfuck!)content(
)content(
)content(    The `Pygments tip`_ is installable with ``easy_install Pygments==dev``.)content(
)content(
)content(    .. _Pygments tip: http://dev.pocoo.org/hg/pygments-main/archive/tip.tar.gz#egg=Pygments-dev)content(
)content(
)content(    :copyright: Copyright 2006-2009 by the Pygments team, see AUTHORS.)content(
)content(    :license: BSD, see LICENSE for details.)content(
)delimiter(""")>

ident(__version__) operator(=) string<delimiter(')content(1.1)delimiter(')>
ident(__docformat__) operator(=) string<delimiter(')content(restructuredtext)delimiter(')>

ident(__all__) operator(=) operator([)string<delimiter(')content(lex)delimiter(')>operator(,) string<delimiter(')content(format)delimiter(')>operator(,) string<delimiter(')content(highlight)delimiter(')>operator(])


keyword(import) include(sys)operator(,) include(os)

keyword(from) include(pygments.util) keyword(import) include(StringIO)operator(,) include(BytesIO)


keyword(def) method(lex)operator(()ident(code)operator(,) ident(lexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Lex ``code`` with ``lexer`` and return an iterable of tokens.)content(
)content(    )delimiter(""")>
    keyword(try)operator(:)
        keyword(return) ident(lexer)operator(.)ident(get_tokens)operator(()ident(code)operator(\))
    keyword(except) exception(TypeError)operator(,) ident(err)operator(:)
        keyword(if) predefined(isinstance)operator(()ident(err)operator(.)ident(args)operator([)integer(0)operator(])operator(,) predefined(str)operator(\)) keyword(and) \
           string<delimiter(')content(unbound method get_tokens)delimiter(')> keyword(in) ident(err)operator(.)ident(args)operator([)integer(0)operator(])operator(:)
            keyword(raise) exception(TypeError)operator(()string<delimiter(')content(lex(\) argument must be a lexer instance, )delimiter(')>
                            string<delimiter(')content(not a class)delimiter(')>operator(\))
        keyword(raise)


keyword(def) method(format)operator(()ident(tokens)operator(,) ident(formatter)operator(,) ident(outfile)operator(=)predefined_constant(None)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Format a tokenlist ``tokens`` with the formatter ``formatter``.)content(
)content(
)content(    If ``outfile`` is given and a valid file object (an object)content(
)content(    with a ``write`` method\), the result will be written to it, otherwise)content(
)content(    it is returned as a string.)content(
)content(    )delimiter(""")>
    keyword(try)operator(:)
        keyword(if) keyword(not) ident(outfile)operator(:)
            comment(#print formatter, 'using', formatter.encoding)
            ident(realoutfile) operator(=) ident(formatter)operator(.)ident(encoding) keyword(and) ident(BytesIO)operator(()operator(\)) keyword(or) ident(StringIO)operator(()operator(\))
            ident(formatter)operator(.)ident(format)operator(()ident(tokens)operator(,) ident(realoutfile)operator(\))
            keyword(return) ident(realoutfile)operator(.)ident(getvalue)operator(()operator(\))
        keyword(else)operator(:)
            ident(formatter)operator(.)ident(format)operator(()ident(tokens)operator(,) ident(outfile)operator(\))
    keyword(except) exception(TypeError)operator(,) ident(err)operator(:)
        keyword(if) predefined(isinstance)operator(()ident(err)operator(.)ident(args)operator([)integer(0)operator(])operator(,) predefined(str)operator(\)) keyword(and) \
           string<delimiter(')content(unbound method format)delimiter(')> keyword(in) ident(err)operator(.)ident(args)operator([)integer(0)operator(])operator(:)
            keyword(raise) exception(TypeError)operator(()string<delimiter(')content(format(\) argument must be a formatter instance, )delimiter(')>
                            string<delimiter(')content(not a class)delimiter(')>operator(\))
        keyword(raise)


keyword(def) method(highlight)operator(()ident(code)operator(,) ident(lexer)operator(,) ident(formatter)operator(,) ident(outfile)operator(=)predefined_constant(None)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Lex ``code`` with ``lexer`` and format it with the formatter ``formatter``.)content(
)content(
)content(    If ``outfile`` is given and a valid file object (an object)content(
)content(    with a ``write`` method\), the result will be written to it, otherwise)content(
)content(    it is returned as a string.)content(
)content(    )delimiter(""")>
    keyword(return) ident(format)operator(()ident(lex)operator(()ident(code)operator(,) ident(lexer)operator(\))operator(,) ident(formatter)operator(,) ident(outfile)operator(\))


keyword(if) ident(__name__) operator(==) string<delimiter(')content(__main__)delimiter(')>operator(:)
    keyword(from) include(pygments.cmdline) keyword(import) include(main)
    ident(sys)operator(.)ident(exit)operator(()ident(main)operator(()ident(sys)operator(.)ident(argv)operator(\))operator(\))
comment(# -*- coding: utf-8 -*-)
docstring<delimiter(""")content(
)content(    pygments.cmdline)content(
)content(    ~~~~~~~~~~~~~~~~)content(
)content(
)content(    Command line interface.)content(
)content(
)content(    :copyright: Copyright 2006-2009 by the Pygments team, see AUTHORS.)content(
)content(    :license: BSD, see LICENSE for details.)content(
)delimiter(""")>
keyword(import) include(sys)
keyword(import) include(getopt)
keyword(from) include(textwrap) keyword(import) include(dedent)

keyword(from) include(pygments) keyword(import) include(__version__)operator(,) include(highlight)
keyword(from) include(pygments.util) keyword(import) include(ClassNotFound)operator(,) include(OptionError)operator(,) include(docstring_headline)
keyword(from) include(pygments.lexers) keyword(import) include(get_all_lexers)operator(,) include(get_lexer_by_name)operator(,) include(get_lexer_for_filename)operator(,) \
     include(find_lexer_class)operator(,) include(guess_lexer)operator(,) include(TextLexer)
keyword(from) include(pygments.formatters) keyword(import) include(get_all_formatters)operator(,) include(get_formatter_by_name)operator(,) \
     include(get_formatter_for_filename)operator(,) include(find_formatter_class)operator(,) \
     include(TerminalFormatter)  comment(# pylint:disable-msg=E0611)
keyword(from) include(pygments.filters) keyword(import) include(get_all_filters)operator(,) include(find_filter_class)
keyword(from) include(pygments.styles) keyword(import) include(get_all_styles)operator(,) include(get_style_by_name)


ident(USAGE) operator(=) string<delimiter(""")char(\\
)content(Usage: %s [-l <lexer> | -g] [-F <filter>[:<options>]] [-f <formatter>])content(
)content(          [-O <options>] [-P <option=value>] [-o <outfile>] [<infile>])content(
)content(
)content(       %s -S <style> -f <formatter> [-a <arg>] [-O <options>] [-P <option=value>])content(
)content(       %s -L [<which> ...])content(
)content(       %s -N <filename>)content(
)content(       %s -H <type> <name>)content(
)content(       %s -h | -V)content(
)content(
)content(Highlight the input file and write the result to <outfile>.)content(
)content(
)content(If no input file is given, use stdin, if -o is not given, use stdout.)content(
)content(
)content(<lexer> is a lexer name (query all lexer names with -L\). If -l is not)content(
)content(given, the lexer is guessed from the extension of the input file name)content(
)content((this obviously doesn't work if the input is stdin\).  If -g is passed,)content(
)content(attempt to guess the lexer from the file contents, or pass through as)content(
)content(plain text if this fails (this can work for stdin\).)content(
)content(
)content(Likewise, <formatter> is a formatter name, and will be guessed from)content(
)content(the extension of the output file name. If no output file is given,)content(
)content(the terminal formatter will be used by default.)content(
)content(
)content(With the -O option, you can give the lexer and formatter a comma-)content(
)content(separated list of options, e.g. ``-O bg=light,python=cool``.)content(
)content(
)content(The -P option adds lexer and formatter options like the -O option, but)content(
)content(you can only give one option per -P. That way, the option value may)content(
)content(contain commas and equals signs, which it can't with -O, e.g.)content(
)content(``-P "heading=Pygments, the Python highlighter".)content(
)content(
)content(With the -F option, you can add filters to the token stream, you can)content(
)content(give options in the same way as for -O after a colon (note: there must)content(
)content(not be spaces around the colon\).)content(
)content(
)content(The -O, -P and -F options can be given multiple times.)content(
)content(
)content(With the -S option, print out style definitions for style <style>)content(
)content(for formatter <formatter>. The argument given by -a is formatter)content(
)content(dependent.)content(
)content(
)content(The -L option lists lexers, formatters, styles or filters -- set)content(
)content(`which` to the thing you want to list (e.g. "styles"\), or omit it to)content(
)content(list everything.)content(
)content(
)content(The -N option guesses and prints out a lexer name based solely on)content(
)content(the given filename. It does not take input or highlight anything.)content(
)content(If no specific lexer can be determined "text" is returned.)content(
)content(
)content(The -H option prints detailed help for the object <name> of type <type>,)content(
)content(where <type> is one of "lexer", "formatter" or "filter".)content(
)content(
)content(The -h option prints this help.)content(
)content(The -V option prints the package version.)content(
)delimiter(""")>


keyword(def) method(_parse_options)operator(()ident(o_strs)operator(\))operator(:)
    ident(opts) operator(=) operator({)operator(})
    keyword(if) keyword(not) ident(o_strs)operator(:)
        keyword(return) ident(opts)
    keyword(for) ident(o_str) keyword(in) ident(o_strs)operator(:)
        keyword(if) keyword(not) ident(o_str)operator(:)
            keyword(continue)
        ident(o_args) operator(=) ident(o_str)operator(.)ident(split)operator(()string<delimiter(')content(,)delimiter(')>operator(\))
        keyword(for) ident(o_arg) keyword(in) ident(o_args)operator(:)
            ident(o_arg) operator(=) ident(o_arg)operator(.)ident(strip)operator(()operator(\))
            keyword(try)operator(:)
                ident(o_key)operator(,) ident(o_val) operator(=) ident(o_arg)operator(.)ident(split)operator(()string<delimiter(')content(=)delimiter(')>operator(\))
                ident(o_key) operator(=) ident(o_key)operator(.)ident(strip)operator(()operator(\))
                ident(o_val) operator(=) ident(o_val)operator(.)ident(strip)operator(()operator(\))
            keyword(except) exception(ValueError)operator(:)
                ident(opts)operator([)ident(o_arg)operator(]) operator(=) predefined_constant(True)
            keyword(else)operator(:)
                ident(opts)operator([)ident(o_key)operator(]) operator(=) ident(o_val)
    keyword(return) ident(opts)


keyword(def) method(_parse_filters)operator(()ident(f_strs)operator(\))operator(:)
    ident(filters) operator(=) operator([)operator(])
    keyword(if) keyword(not) ident(f_strs)operator(:)
        keyword(return) ident(filters)
    keyword(for) ident(f_str) keyword(in) ident(f_strs)operator(:)
        keyword(if) string<delimiter(')content(:)delimiter(')> keyword(in) ident(f_str)operator(:)
            ident(fname)operator(,) ident(fopts) operator(=) ident(f_str)operator(.)ident(split)operator(()string<delimiter(')content(:)delimiter(')>operator(,) integer(1)operator(\))
            ident(filters)operator(.)ident(append)operator(()operator(()ident(fname)operator(,) ident(_parse_options)operator(()operator([)ident(fopts)operator(])operator(\))operator(\))operator(\))
        keyword(else)operator(:)
            ident(filters)operator(.)ident(append)operator(()operator(()ident(f_str)operator(,) operator({)operator(})operator(\))operator(\))
    keyword(return) ident(filters)


keyword(def) method(_print_help)operator(()ident(what)operator(,) ident(name)operator(\))operator(:)
    keyword(try)operator(:)
        keyword(if) ident(what) operator(==) string<delimiter(')content(lexer)delimiter(')>operator(:)
            ident(cls) operator(=) ident(find_lexer_class)operator(()ident(name)operator(\))
            keyword(print) string<delimiter(")content(Help on the %s lexer:)delimiter(")> operator(%) ident(cls)operator(.)ident(name)
            keyword(print) ident(dedent)operator(()ident(cls)operator(.)ident(__doc__)operator(\))
        keyword(elif) ident(what) operator(==) string<delimiter(')content(formatter)delimiter(')>operator(:)
            ident(cls) operator(=) ident(find_formatter_class)operator(()ident(name)operator(\))
            keyword(print) string<delimiter(")content(Help on the %s formatter:)delimiter(")> operator(%) ident(cls)operator(.)ident(name)
            keyword(print) ident(dedent)operator(()ident(cls)operator(.)ident(__doc__)operator(\))
        keyword(elif) ident(what) operator(==) string<delimiter(')content(filter)delimiter(')>operator(:)
            ident(cls) operator(=) ident(find_filter_class)operator(()ident(name)operator(\))
            keyword(print) string<delimiter(")content(Help on the %s filter:)delimiter(")> operator(%) ident(name)
            keyword(print) ident(dedent)operator(()ident(cls)operator(.)ident(__doc__)operator(\))
    keyword(except) exception(AttributeError)operator(:)
        keyword(print) operator(>>)ident(sys)operator(.)ident(stderr)operator(,) string<delimiter(")content(%s not found!)delimiter(")> operator(%) ident(what)


keyword(def) method(_print_list)operator(()ident(what)operator(\))operator(:)
    keyword(if) ident(what) operator(==) string<delimiter(')content(lexer)delimiter(')>operator(:)
        keyword(print)
        keyword(print) string<delimiter(")content(Lexers:)delimiter(")>
        keyword(print) string<delimiter(")content(~~~~~~~)delimiter(")>

        ident(info) operator(=) operator([)operator(])
        keyword(for) ident(fullname)operator(,) ident(names)operator(,) ident(exts)operator(,) ident(_) keyword(in) ident(get_all_lexers)operator(()operator(\))operator(:)
            ident(tup) operator(=) operator(()string<delimiter(')content(, )delimiter(')>operator(.)ident(join)operator(()ident(names)operator(\))operator(+)string<delimiter(')content(:)delimiter(')>operator(,) ident(fullname)operator(,)
                   ident(exts) keyword(and) string<delimiter(')content((filenames )delimiter(')> operator(+) string<delimiter(')content(, )delimiter(')>operator(.)ident(join)operator(()ident(exts)operator(\)) operator(+) string<delimiter(')content(\))delimiter(')> keyword(or) string<delimiter(')delimiter(')>operator(\))
            ident(info)operator(.)ident(append)operator(()ident(tup)operator(\))
        ident(info)operator(.)ident(sort)operator(()operator(\))
        keyword(for) ident(i) keyword(in) ident(info)operator(:)
            keyword(print) operator(()string<delimiter(')content(* %s)char(\\n)content(    %s %s)delimiter(')>operator(\)) operator(%) ident(i)

    keyword(elif) ident(what) operator(==) string<delimiter(')content(formatter)delimiter(')>operator(:)
        keyword(print)
        keyword(print) string<delimiter(")content(Formatters:)delimiter(")>
        keyword(print) string<delimiter(")content(~~~~~~~~~~~)delimiter(")>

        ident(info) operator(=) operator([)operator(])
        keyword(for) ident(cls) keyword(in) ident(get_all_formatters)operator(()operator(\))operator(:)
            ident(doc) operator(=) ident(docstring_headline)operator(()ident(cls)operator(\))
            ident(tup) operator(=) operator(()string<delimiter(')content(, )delimiter(')>operator(.)ident(join)operator(()ident(cls)operator(.)ident(aliases)operator(\)) operator(+) string<delimiter(')content(:)delimiter(')>operator(,) ident(doc)operator(,) ident(cls)operator(.)ident(filenames) keyword(and)
                   string<delimiter(')content((filenames )delimiter(')> operator(+) string<delimiter(')content(, )delimiter(')>operator(.)ident(join)operator(()ident(cls)operator(.)ident(filenames)operator(\)) operator(+) string<delimiter(')content(\))delimiter(')> keyword(or) string<delimiter(')delimiter(')>operator(\))
            ident(info)operator(.)ident(append)operator(()ident(tup)operator(\))
        ident(info)operator(.)ident(sort)operator(()operator(\))
        keyword(for) ident(i) keyword(in) ident(info)operator(:)
            keyword(print) operator(()string<delimiter(')content(* %s)char(\\n)content(    %s %s)delimiter(')>operator(\)) operator(%) ident(i)

    keyword(elif) ident(what) operator(==) string<delimiter(')content(filter)delimiter(')>operator(:)
        keyword(print)
        keyword(print) string<delimiter(")content(Filters:)delimiter(")>
        keyword(print) string<delimiter(")content(~~~~~~~~)delimiter(")>

        keyword(for) ident(name) keyword(in) ident(get_all_filters)operator(()operator(\))operator(:)
            ident(cls) operator(=) ident(find_filter_class)operator(()ident(name)operator(\))
            keyword(print) string<delimiter(")content(* )delimiter(")> operator(+) ident(name) operator(+) string<delimiter(')content(:)delimiter(')>
            keyword(print) string<delimiter(")content(    %s)delimiter(")> operator(%) ident(docstring_headline)operator(()ident(cls)operator(\))

    keyword(elif) ident(what) operator(==) string<delimiter(')content(style)delimiter(')>operator(:)
        keyword(print)
        keyword(print) string<delimiter(")content(Styles:)delimiter(")>
        keyword(print) string<delimiter(")content(~~~~~~~)delimiter(")>

        keyword(for) ident(name) keyword(in) ident(get_all_styles)operator(()operator(\))operator(:)
            ident(cls) operator(=) ident(get_style_by_name)operator(()ident(name)operator(\))
            keyword(print) string<delimiter(")content(* )delimiter(")> operator(+) ident(name) operator(+) string<delimiter(')content(:)delimiter(')>
            keyword(print) string<delimiter(")content(    %s)delimiter(")> operator(%) ident(docstring_headline)operator(()ident(cls)operator(\))


keyword(def) method(main)operator(()ident(args)operator(=)ident(sys)operator(.)ident(argv)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Main command line entry point.)content(
)content(    )delimiter(""")>
    comment(# pylint: disable-msg=R0911,R0912,R0915)

    ident(usage) operator(=) ident(USAGE) operator(%) operator(()operator(()ident(args)operator([)integer(0)operator(])operator(,)operator(\)) operator(*) integer(6)operator(\))

    keyword(try)operator(:)
        ident(popts)operator(,) ident(args) operator(=) ident(getopt)operator(.)ident(getopt)operator(()ident(args)operator([)integer(1)operator(:)operator(])operator(,) string<delimiter(")content(l:f:F:o:O:P:LS:a:N:hVHg)delimiter(")>operator(\))
    keyword(except) ident(getopt)operator(.)ident(GetoptError)operator(,) ident(err)operator(:)
        keyword(print) operator(>>)ident(sys)operator(.)ident(stderr)operator(,) ident(usage)
        keyword(return) integer(2)
    ident(opts) operator(=) operator({)operator(})
    ident(O_opts) operator(=) operator([)operator(])
    ident(P_opts) operator(=) operator([)operator(])
    ident(F_opts) operator(=) operator([)operator(])
    keyword(for) ident(opt)operator(,) ident(arg) keyword(in) ident(popts)operator(:)
        keyword(if) ident(opt) operator(==) string<delimiter(')content(-O)delimiter(')>operator(:)
            ident(O_opts)operator(.)ident(append)operator(()ident(arg)operator(\))
        keyword(elif) ident(opt) operator(==) string<delimiter(')content(-P)delimiter(')>operator(:)
            ident(P_opts)operator(.)ident(append)operator(()ident(arg)operator(\))
        keyword(elif) ident(opt) operator(==) string<delimiter(')content(-F)delimiter(')>operator(:)
            ident(F_opts)operator(.)ident(append)operator(()ident(arg)operator(\))
        ident(opts)operator([)ident(opt)operator(]) operator(=) ident(arg)

    keyword(if) keyword(not) ident(opts) keyword(and) keyword(not) ident(args)operator(:)
        keyword(print) ident(usage)
        keyword(return) integer(0)

    keyword(if) ident(opts)operator(.)ident(pop)operator(()string<delimiter(')content(-h)delimiter(')>operator(,) predefined_constant(None)operator(\)) keyword(is) keyword(not) predefined_constant(None)operator(:)
        keyword(print) ident(usage)
        keyword(return) integer(0)

    keyword(if) ident(opts)operator(.)ident(pop)operator(()string<delimiter(')content(-V)delimiter(')>operator(,) predefined_constant(None)operator(\)) keyword(is) keyword(not) predefined_constant(None)operator(:)
        keyword(print) string<delimiter(')content(Pygments version %s, (c\) 2006-2008 by Georg Brandl.)delimiter(')> operator(%) ident(__version__)
        keyword(return) integer(0)

    comment(# handle ``pygmentize -L``)
    ident(L_opt) operator(=) ident(opts)operator(.)ident(pop)operator(()string<delimiter(')content(-L)delimiter(')>operator(,) predefined_constant(None)operator(\))
    keyword(if) ident(L_opt) keyword(is) keyword(not) predefined_constant(None)operator(:)
        keyword(if) ident(opts)operator(:)
            keyword(print) operator(>>)ident(sys)operator(.)ident(stderr)operator(,) ident(usage)
            keyword(return) integer(2)

        comment(# print version)
        ident(main)operator(()operator([)string<delimiter(')delimiter(')>operator(,) string<delimiter(')content(-V)delimiter(')>operator(])operator(\))
        keyword(if) keyword(not) ident(args)operator(:)
            ident(args) operator(=) operator([)string<delimiter(')content(lexer)delimiter(')>operator(,) string<delimiter(')content(formatter)delimiter(')>operator(,) string<delimiter(')content(filter)delimiter(')>operator(,) string<delimiter(')content(style)delimiter(')>operator(])
        keyword(for) ident(arg) keyword(in) ident(args)operator(:)
            ident(_print_list)operator(()ident(arg)operator(.)ident(rstrip)operator(()string<delimiter(')content(s)delimiter(')>operator(\))operator(\))
        keyword(return) integer(0)

    comment(# handle ``pygmentize -H``)
    ident(H_opt) operator(=) ident(opts)operator(.)ident(pop)operator(()string<delimiter(')content(-H)delimiter(')>operator(,) predefined_constant(None)operator(\))
    keyword(if) ident(H_opt) keyword(is) keyword(not) predefined_constant(None)operator(:)
        keyword(if) ident(opts) keyword(or) predefined(len)operator(()ident(args)operator(\)) operator(!=) integer(2)operator(:)
            keyword(print) operator(>>)ident(sys)operator(.)ident(stderr)operator(,) ident(usage)
            keyword(return) integer(2)

        ident(what)operator(,) ident(name) operator(=) ident(args)
        keyword(if) ident(what) keyword(not) keyword(in) operator(()string<delimiter(')content(lexer)delimiter(')>operator(,) string<delimiter(')content(formatter)delimiter(')>operator(,) string<delimiter(')content(filter)delimiter(')>operator(\))operator(:)
            keyword(print) operator(>>)ident(sys)operator(.)ident(stderr)operator(,) ident(usage)
            keyword(return) integer(2)

        ident(_print_help)operator(()ident(what)operator(,) ident(name)operator(\))
        keyword(return) integer(0)

    comment(# parse -O options)
    ident(parsed_opts) operator(=) ident(_parse_options)operator(()ident(O_opts)operator(\))
    ident(opts)operator(.)ident(pop)operator(()string<delimiter(')content(-O)delimiter(')>operator(,) predefined_constant(None)operator(\))

    comment(# parse -P options)
    keyword(for) ident(p_opt) keyword(in) ident(P_opts)operator(:)
        keyword(try)operator(:)
            ident(name)operator(,) ident(value) operator(=) ident(p_opt)operator(.)ident(split)operator(()string<delimiter(')content(=)delimiter(')>operator(,) integer(1)operator(\))
        keyword(except) exception(ValueError)operator(:)
            ident(parsed_opts)operator([)ident(p_opt)operator(]) operator(=) predefined_constant(True)
        keyword(else)operator(:)
            ident(parsed_opts)operator([)ident(name)operator(]) operator(=) ident(value)
    ident(opts)operator(.)ident(pop)operator(()string<delimiter(')content(-P)delimiter(')>operator(,) predefined_constant(None)operator(\))

    comment(# handle ``pygmentize -N``)
    ident(infn) operator(=) ident(opts)operator(.)ident(pop)operator(()string<delimiter(')content(-N)delimiter(')>operator(,) predefined_constant(None)operator(\))
    keyword(if) ident(infn) keyword(is) keyword(not) predefined_constant(None)operator(:)
        keyword(try)operator(:)
            ident(lexer) operator(=) ident(get_lexer_for_filename)operator(()ident(infn)operator(,) operator(**)ident(parsed_opts)operator(\))
        keyword(except) ident(ClassNotFound)operator(,) ident(err)operator(:)
            ident(lexer) operator(=) ident(TextLexer)operator(()operator(\))
        keyword(except) ident(OptionError)operator(,) ident(err)operator(:)
            keyword(print) operator(>>)ident(sys)operator(.)ident(stderr)operator(,) string<delimiter(')content(Error:)delimiter(')>operator(,) ident(err)
            keyword(return) integer(1)

        keyword(print) ident(lexer)operator(.)ident(aliases)operator([)integer(0)operator(])
        keyword(return) integer(0)

    comment(# handle ``pygmentize -S``)
    ident(S_opt) operator(=) ident(opts)operator(.)ident(pop)operator(()string<delimiter(')content(-S)delimiter(')>operator(,) predefined_constant(None)operator(\))
    ident(a_opt) operator(=) ident(opts)operator(.)ident(pop)operator(()string<delimiter(')content(-a)delimiter(')>operator(,) predefined_constant(None)operator(\))
    keyword(if) ident(S_opt) keyword(is) keyword(not) predefined_constant(None)operator(:)
        ident(f_opt) operator(=) ident(opts)operator(.)ident(pop)operator(()string<delimiter(')content(-f)delimiter(')>operator(,) predefined_constant(None)operator(\))
        keyword(if) keyword(not) ident(f_opt)operator(:)
            keyword(print) operator(>>)ident(sys)operator(.)ident(stderr)operator(,) ident(usage)
            keyword(return) integer(2)
        keyword(if) ident(opts) keyword(or) ident(args)operator(:)
            keyword(print) operator(>>)ident(sys)operator(.)ident(stderr)operator(,) ident(usage)
            keyword(return) integer(2)

        keyword(try)operator(:)
            ident(parsed_opts)operator([)string<delimiter(')content(style)delimiter(')>operator(]) operator(=) ident(S_opt)
            ident(fmter) operator(=) ident(get_formatter_by_name)operator(()ident(f_opt)operator(,) operator(**)ident(parsed_opts)operator(\))
        keyword(except) ident(ClassNotFound)operator(,) ident(err)operator(:)
            keyword(print) operator(>>)ident(sys)operator(.)ident(stderr)operator(,) ident(err)
            keyword(return) integer(1)

        ident(arg) operator(=) ident(a_opt) keyword(or) string<delimiter(')delimiter(')>
        keyword(try)operator(:)
            keyword(print) ident(fmter)operator(.)ident(get_style_defs)operator(()ident(arg)operator(\))
        keyword(except) exception(Exception)operator(,) ident(err)operator(:)
            keyword(print) operator(>>)ident(sys)operator(.)ident(stderr)operator(,) string<delimiter(')content(Error:)delimiter(')>operator(,) ident(err)
            keyword(return) integer(1)
        keyword(return) integer(0)

    comment(# if no -S is given, -a is not allowed)
    keyword(if) ident(a_opt) keyword(is) keyword(not) predefined_constant(None)operator(:)
        keyword(print) operator(>>)ident(sys)operator(.)ident(stderr)operator(,) ident(usage)
        keyword(return) integer(2)

    comment(# parse -F options)
    ident(F_opts) operator(=) ident(_parse_filters)operator(()ident(F_opts)operator(\))
    ident(opts)operator(.)ident(pop)operator(()string<delimiter(')content(-F)delimiter(')>operator(,) predefined_constant(None)operator(\))

    comment(# select formatter)
    ident(outfn) operator(=) ident(opts)operator(.)ident(pop)operator(()string<delimiter(')content(-o)delimiter(')>operator(,) predefined_constant(None)operator(\))
    ident(fmter) operator(=) ident(opts)operator(.)ident(pop)operator(()string<delimiter(')content(-f)delimiter(')>operator(,) predefined_constant(None)operator(\))
    keyword(if) ident(fmter)operator(:)
        keyword(try)operator(:)
            ident(fmter) operator(=) ident(get_formatter_by_name)operator(()ident(fmter)operator(,) operator(**)ident(parsed_opts)operator(\))
        keyword(except) operator(()ident(OptionError)operator(,) ident(ClassNotFound)operator(\))operator(,) ident(err)operator(:)
            keyword(print) operator(>>)ident(sys)operator(.)ident(stderr)operator(,) string<delimiter(')content(Error:)delimiter(')>operator(,) ident(err)
            keyword(return) integer(1)

    keyword(if) ident(outfn)operator(:)
        keyword(if) keyword(not) ident(fmter)operator(:)
            keyword(try)operator(:)
                ident(fmter) operator(=) ident(get_formatter_for_filename)operator(()ident(outfn)operator(,) operator(**)ident(parsed_opts)operator(\))
            keyword(except) operator(()ident(OptionError)operator(,) ident(ClassNotFound)operator(\))operator(,) ident(err)operator(:)
                keyword(print) operator(>>)ident(sys)operator(.)ident(stderr)operator(,) string<delimiter(')content(Error:)delimiter(')>operator(,) ident(err)
                keyword(return) integer(1)
        keyword(try)operator(:)
            ident(outfile) operator(=) predefined(open)operator(()ident(outfn)operator(,) string<delimiter(')content(wb)delimiter(')>operator(\))
        keyword(except) exception(Exception)operator(,) ident(err)operator(:)
            keyword(print) operator(>>)ident(sys)operator(.)ident(stderr)operator(,) string<delimiter(')content(Error: cannot open outfile:)delimiter(')>operator(,) ident(err)
            keyword(return) integer(1)
    keyword(else)operator(:)
        keyword(if) keyword(not) ident(fmter)operator(:)
            ident(fmter) operator(=) ident(TerminalFormatter)operator(()operator(**)ident(parsed_opts)operator(\))
        ident(outfile) operator(=) ident(sys)operator(.)ident(stdout)

    comment(# select lexer)
    ident(lexer) operator(=) ident(opts)operator(.)ident(pop)operator(()string<delimiter(')content(-l)delimiter(')>operator(,) predefined_constant(None)operator(\))
    keyword(if) ident(lexer)operator(:)
        keyword(try)operator(:)
            ident(lexer) operator(=) ident(get_lexer_by_name)operator(()ident(lexer)operator(,) operator(**)ident(parsed_opts)operator(\))
        keyword(except) operator(()ident(OptionError)operator(,) ident(ClassNotFound)operator(\))operator(,) ident(err)operator(:)
            keyword(print) operator(>>)ident(sys)operator(.)ident(stderr)operator(,) string<delimiter(')content(Error:)delimiter(')>operator(,) ident(err)
            keyword(return) integer(1)

    keyword(if) ident(args)operator(:)
        keyword(if) predefined(len)operator(()ident(args)operator(\)) operator(>) integer(1)operator(:)
            keyword(print) operator(>>)ident(sys)operator(.)ident(stderr)operator(,) ident(usage)
            keyword(return) integer(2)

        ident(infn) operator(=) ident(args)operator([)integer(0)operator(])
        keyword(try)operator(:)
            ident(code) operator(=) predefined(open)operator(()ident(infn)operator(,) string<delimiter(')content(rb)delimiter(')>operator(\))operator(.)ident(read)operator(()operator(\))
        keyword(except) exception(Exception)operator(,) ident(err)operator(:)
            keyword(print) operator(>>)ident(sys)operator(.)ident(stderr)operator(,) string<delimiter(')content(Error: cannot read infile:)delimiter(')>operator(,) ident(err)
            keyword(return) integer(1)

        keyword(if) keyword(not) ident(lexer)operator(:)
            keyword(try)operator(:)
                ident(lexer) operator(=) ident(get_lexer_for_filename)operator(()ident(infn)operator(,) ident(code)operator(,) operator(**)ident(parsed_opts)operator(\))
            keyword(except) ident(ClassNotFound)operator(,) ident(err)operator(:)
                keyword(if) string<delimiter(')content(-g)delimiter(')> keyword(in) ident(opts)operator(:)
                    keyword(try)operator(:)
                        ident(lexer) operator(=) ident(guess_lexer)operator(()ident(code)operator(\))
                    keyword(except) ident(ClassNotFound)operator(:)
                        ident(lexer) operator(=) ident(TextLexer)operator(()operator(\))
                keyword(else)operator(:)
                    keyword(print) operator(>>)ident(sys)operator(.)ident(stderr)operator(,) string<delimiter(')content(Error:)delimiter(')>operator(,) ident(err)
                    keyword(return) integer(1)
            keyword(except) ident(OptionError)operator(,) ident(err)operator(:)
                keyword(print) operator(>>)ident(sys)operator(.)ident(stderr)operator(,) string<delimiter(')content(Error:)delimiter(')>operator(,) ident(err)
                keyword(return) integer(1)

    keyword(else)operator(:)
        keyword(if) string<delimiter(')content(-g)delimiter(')> keyword(in) ident(opts)operator(:)
            ident(code) operator(=) ident(sys)operator(.)ident(stdin)operator(.)ident(read)operator(()operator(\))
            keyword(try)operator(:)
                ident(lexer) operator(=) ident(guess_lexer)operator(()ident(code)operator(\))
            keyword(except) ident(ClassNotFound)operator(:)
                ident(lexer) operator(=) ident(TextLexer)operator(()operator(\))
        keyword(elif) keyword(not) ident(lexer)operator(:)
            keyword(print) operator(>>)ident(sys)operator(.)ident(stderr)operator(,) string<delimiter(')content(Error: no lexer name given and reading )delimiter(')> operator(+) \
                                string<delimiter(')content(from stdin (try using -g or -l <lexer>\))delimiter(')>
            keyword(return) integer(2)
        keyword(else)operator(:)
            ident(code) operator(=) ident(sys)operator(.)ident(stdin)operator(.)ident(read)operator(()operator(\))

    comment(# No encoding given? Use latin1 if output file given,)
    comment(# stdin/stdout encoding otherwise.)
    comment(# (This is a compromise, I'm not too happy with it...\))
    keyword(if) string<delimiter(')content(encoding)delimiter(')> keyword(not) keyword(in) ident(parsed_opts) keyword(and) string<delimiter(')content(outencoding)delimiter(')> keyword(not) keyword(in) ident(parsed_opts)operator(:)
        keyword(if) ident(outfn)operator(:)
            comment(# encoding pass-through)
            ident(fmter)operator(.)ident(encoding) operator(=) string<delimiter(')content(latin1)delimiter(')>
        keyword(else)operator(:)
            keyword(if) ident(sys)operator(.)ident(version_info) operator(<) operator(()integer(3)operator(,)operator(\))operator(:)
                comment(# use terminal encoding; Python 3's terminals already do that)
                ident(lexer)operator(.)ident(encoding) operator(=) predefined(getattr)operator(()ident(sys)operator(.)ident(stdin)operator(,) string<delimiter(')content(encoding)delimiter(')>operator(,)
                                         predefined_constant(None)operator(\)) keyword(or) string<delimiter(')content(ascii)delimiter(')>
                ident(fmter)operator(.)ident(encoding) operator(=) predefined(getattr)operator(()ident(sys)operator(.)ident(stdout)operator(,) string<delimiter(')content(encoding)delimiter(')>operator(,)
                                         predefined_constant(None)operator(\)) keyword(or) string<delimiter(')content(ascii)delimiter(')>

    comment(# ... and do it!)
    keyword(try)operator(:)
        comment(# process filters)
        keyword(for) ident(fname)operator(,) ident(fopts) keyword(in) ident(F_opts)operator(:)
            ident(lexer)operator(.)ident(add_filter)operator(()ident(fname)operator(,) operator(**)ident(fopts)operator(\))
        ident(highlight)operator(()ident(code)operator(,) ident(lexer)operator(,) ident(fmter)operator(,) ident(outfile)operator(\))
    keyword(except) exception(Exception)operator(,) ident(err)operator(:)
        keyword(import) include(traceback)
        ident(info) operator(=) ident(traceback)operator(.)ident(format_exception)operator(()operator(*)ident(sys)operator(.)ident(exc_info)operator(()operator(\))operator(\))
        ident(msg) operator(=) ident(info)operator([)operator(-)integer(1)operator(])operator(.)ident(strip)operator(()operator(\))
        keyword(if) predefined(len)operator(()ident(info)operator(\)) operator(>=) integer(3)operator(:)
            comment(# extract relevant file and position info)
            ident(msg) operator(+=) string<delimiter(')char(\\n)content(   (f%s\))delimiter(')> operator(%) ident(info)operator([)operator(-)integer(2)operator(])operator(.)ident(split)operator(()string<delimiter(')char(\\n)delimiter(')>operator(\))operator([)integer(0)operator(])operator(.)ident(strip)operator(()operator(\))operator([)integer(1)operator(:)operator(])
        keyword(print) operator(>>)ident(sys)operator(.)ident(stderr)
        keyword(print) operator(>>)ident(sys)operator(.)ident(stderr)operator(,) string<delimiter(')content(*** Error while highlighting:)delimiter(')>
        keyword(print) operator(>>)ident(sys)operator(.)ident(stderr)operator(,) ident(msg)
        keyword(return) integer(1)

    keyword(return) integer(0)
comment(# -*- coding: utf-8 -*-)
docstring<delimiter(""")content(
)content(    pygments.console)content(
)content(    ~~~~~~~~~~~~~~~~)content(
)content(
)content(    Format colored console output.)content(
)content(
)content(    :copyright: Copyright 2006-2009 by the Pygments team, see AUTHORS.)content(
)content(    :license: BSD, see LICENSE for details.)content(
)delimiter(""")>

ident(esc) operator(=) string<delimiter(")char(\\x1b)content([)delimiter(")>

ident(codes) operator(=) operator({)operator(})
ident(codes)operator([)string<delimiter(")delimiter(")>operator(])          operator(=) string<delimiter(")delimiter(")>
ident(codes)operator([)string<delimiter(")content(reset)delimiter(")>operator(])     operator(=) ident(esc) operator(+) string<delimiter(")content(39;49;00m)delimiter(")>

ident(codes)operator([)string<delimiter(")content(bold)delimiter(")>operator(])      operator(=) ident(esc) operator(+) string<delimiter(")content(01m)delimiter(")>
ident(codes)operator([)string<delimiter(")content(faint)delimiter(")>operator(])     operator(=) ident(esc) operator(+) string<delimiter(")content(02m)delimiter(")>
ident(codes)operator([)string<delimiter(")content(standout)delimiter(")>operator(])  operator(=) ident(esc) operator(+) string<delimiter(")content(03m)delimiter(")>
ident(codes)operator([)string<delimiter(")content(underline)delimiter(")>operator(]) operator(=) ident(esc) operator(+) string<delimiter(")content(04m)delimiter(")>
ident(codes)operator([)string<delimiter(")content(blink)delimiter(")>operator(])     operator(=) ident(esc) operator(+) string<delimiter(")content(05m)delimiter(")>
ident(codes)operator([)string<delimiter(")content(overline)delimiter(")>operator(])  operator(=) ident(esc) operator(+) string<delimiter(")content(06m)delimiter(")>

ident(dark_colors)  operator(=) operator([)string<delimiter(")content(black)delimiter(")>operator(,) string<delimiter(")content(darkred)delimiter(")>operator(,) string<delimiter(")content(darkgreen)delimiter(")>operator(,) string<delimiter(")content(brown)delimiter(")>operator(,) string<delimiter(")content(darkblue)delimiter(")>operator(,)
                string<delimiter(")content(purple)delimiter(")>operator(,) string<delimiter(")content(teal)delimiter(")>operator(,) string<delimiter(")content(lightgray)delimiter(")>operator(])
ident(light_colors) operator(=) operator([)string<delimiter(")content(darkgray)delimiter(")>operator(,) string<delimiter(")content(red)delimiter(")>operator(,) string<delimiter(")content(green)delimiter(")>operator(,) string<delimiter(")content(yellow)delimiter(")>operator(,) string<delimiter(")content(blue)delimiter(")>operator(,)
                string<delimiter(")content(fuchsia)delimiter(")>operator(,) string<delimiter(")content(turquoise)delimiter(")>operator(,) string<delimiter(")content(white)delimiter(")>operator(])

ident(x) operator(=) integer(30)
keyword(for) ident(d)operator(,) ident(l) keyword(in) predefined(zip)operator(()ident(dark_colors)operator(,) ident(light_colors)operator(\))operator(:)
    ident(codes)operator([)ident(d)operator(]) operator(=) ident(esc) operator(+) string<delimiter(")content(%im)delimiter(")> operator(%) ident(x)
    ident(codes)operator([)ident(l)operator(]) operator(=) ident(esc) operator(+) string<delimiter(")content(%i;01m)delimiter(")> operator(%) ident(x)
    ident(x) operator(+=) integer(1)

keyword(del) ident(d)operator(,) ident(l)operator(,) ident(x)

ident(codes)operator([)string<delimiter(")content(darkteal)delimiter(")>operator(])   operator(=) ident(codes)operator([)string<delimiter(")content(turquoise)delimiter(")>operator(])
ident(codes)operator([)string<delimiter(")content(darkyellow)delimiter(")>operator(]) operator(=) ident(codes)operator([)string<delimiter(")content(brown)delimiter(")>operator(])
ident(codes)operator([)string<delimiter(")content(fuscia)delimiter(")>operator(])     operator(=) ident(codes)operator([)string<delimiter(")content(fuchsia)delimiter(")>operator(])
ident(codes)operator([)string<delimiter(")content(white)delimiter(")>operator(])      operator(=) ident(codes)operator([)string<delimiter(")content(bold)delimiter(")>operator(])


keyword(def) method(reset_color)operator(()operator(\))operator(:)
    keyword(return) ident(codes)operator([)string<delimiter(")content(reset)delimiter(")>operator(])


keyword(def) method(colorize)operator(()ident(color_key)operator(,) ident(text)operator(\))operator(:)
    keyword(return) ident(codes)operator([)ident(color_key)operator(]) operator(+) ident(text) operator(+) ident(codes)operator([)string<delimiter(")content(reset)delimiter(")>operator(])


keyword(def) method(ansiformat)operator(()ident(attr)operator(,) ident(text)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Format ``text`` with a color and/or some attributes::)content(
)content(
)content(        color       normal color)content(
)content(        *color*     bold color)content(
)content(        _color_     underlined color)content(
)content(        +color+     blinking color)content(
)content(    )delimiter(""")>
    ident(result) operator(=) operator([)operator(])
    keyword(if) ident(attr)operator([)operator(:)integer(1)operator(]) operator(==) ident(attr)operator([)operator(-)integer(1)operator(:)operator(]) operator(==) string<delimiter(')content(+)delimiter(')>operator(:)
        ident(result)operator(.)ident(append)operator(()ident(codes)operator([)string<delimiter(')content(blink)delimiter(')>operator(])operator(\))
        ident(attr) operator(=) ident(attr)operator([)integer(1)operator(:)operator(-)integer(1)operator(])
    keyword(if) ident(attr)operator([)operator(:)integer(1)operator(]) operator(==) ident(attr)operator([)operator(-)integer(1)operator(:)operator(]) operator(==) string<delimiter(')content(*)delimiter(')>operator(:)
        ident(result)operator(.)ident(append)operator(()ident(codes)operator([)string<delimiter(')content(bold)delimiter(')>operator(])operator(\))
        ident(attr) operator(=) ident(attr)operator([)integer(1)operator(:)operator(-)integer(1)operator(])
    keyword(if) ident(attr)operator([)operator(:)integer(1)operator(]) operator(==) ident(attr)operator([)operator(-)integer(1)operator(:)operator(]) operator(==) string<delimiter(')content(_)delimiter(')>operator(:)
        ident(result)operator(.)ident(append)operator(()ident(codes)operator([)string<delimiter(')content(underline)delimiter(')>operator(])operator(\))
        ident(attr) operator(=) ident(attr)operator([)integer(1)operator(:)operator(-)integer(1)operator(])
    ident(result)operator(.)ident(append)operator(()ident(codes)operator([)ident(attr)operator(])operator(\))
    ident(result)operator(.)ident(append)operator(()ident(text)operator(\))
    ident(result)operator(.)ident(append)operator(()ident(codes)operator([)string<delimiter(')content(reset)delimiter(')>operator(])operator(\))
    keyword(return) string<delimiter(')delimiter(')>operator(.)ident(join)operator(()ident(result)operator(\))
comment(# -*- coding: utf-8 -*-)
docstring<delimiter(""")content(
)content(    pygments.filter)content(
)content(    ~~~~~~~~~~~~~~~)content(
)content(
)content(    Module that implements the default filter.)content(
)content(
)content(    :copyright: Copyright 2006-2009 by the Pygments team, see AUTHORS.)content(
)content(    :license: BSD, see LICENSE for details.)content(
)delimiter(""")>


keyword(def) method(apply_filters)operator(()ident(stream)operator(,) ident(filters)operator(,) ident(lexer)operator(=)predefined_constant(None)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Use this method to apply an iterable of filters to)content(
)content(    a stream. If lexer is given it's forwarded to the)content(
)content(    filter, otherwise the filter receives `None`.)content(
)content(    )delimiter(""")>
    keyword(def) method(_apply)operator(()ident(filter_)operator(,) ident(stream)operator(\))operator(:)
        keyword(for) ident(token) keyword(in) ident(filter_)operator(.)ident(filter)operator(()ident(lexer)operator(,) ident(stream)operator(\))operator(:)
            keyword(yield) ident(token)
    keyword(for) ident(filter_) keyword(in) ident(filters)operator(:)
        ident(stream) operator(=) ident(_apply)operator(()ident(filter_)operator(,) ident(stream)operator(\))
    keyword(return) ident(stream)


keyword(def) method(simplefilter)operator(()ident(f)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Decorator that converts a function into a filter::)content(
)content(
)content(        @simplefilter)content(
)content(        def lowercase(lexer, stream, options\):)content(
)content(            for ttype, value in stream:)content(
)content(                yield ttype, value.lower(\))content(
)content(    )delimiter(""")>
    keyword(return) predefined(type)operator(()ident(f)operator(.)ident(__name__)operator(,) operator(()ident(FunctionFilter)operator(,)operator(\))operator(,) operator({)
                string<delimiter(')content(function)delimiter(')>operator(:)     ident(f)operator(,)
                string<delimiter(')content(__module__)delimiter(')>operator(:)   predefined(getattr)operator(()ident(f)operator(,) string<delimiter(')content(__module__)delimiter(')>operator(\))operator(,)
                string<delimiter(')content(__doc__)delimiter(')>operator(:)      ident(f)operator(.)ident(__doc__)
            operator(})operator(\))


keyword(class) class(Filter)operator(()predefined(object)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Default filter. Subclass this class or use the `simplefilter`)content(
)content(    decorator to create own filters.)content(
)content(    )delimiter(""")>

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))operator(:)
        predefined_constant(self)operator(.)ident(options) operator(=) ident(options)

    keyword(def) method(filter)operator(()predefined_constant(self)operator(,) ident(lexer)operator(,) ident(stream)operator(\))operator(:)
        keyword(raise) exception(NotImplementedError)operator(()operator(\))


keyword(class) class(FunctionFilter)operator(()ident(Filter)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Abstract class used by `simplefilter` to create simple)content(
)content(    function filters on the fly. The `simplefilter` decorator)content(
)content(    automatically creates subclasses of this class for)content(
)content(    functions passed to it.)content(
)content(    )delimiter(""")>
    ident(function) operator(=) predefined_constant(None)

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))operator(:)
        keyword(if) keyword(not) predefined(hasattr)operator(()predefined_constant(self)operator(,) string<delimiter(')content(function)delimiter(')>operator(\))operator(:)
            keyword(raise) exception(TypeError)operator(()string<delimiter(')content(%r used without bound function)delimiter(')> operator(%)
                            predefined_constant(self)operator(.)ident(__class__)operator(.)ident(__name__)operator(\))
        ident(Filter)operator(.)ident(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))

    keyword(def) method(filter)operator(()predefined_constant(self)operator(,) ident(lexer)operator(,) ident(stream)operator(\))operator(:)
        comment(# pylint: disable-msg=E1102)
        keyword(for) ident(ttype)operator(,) ident(value) keyword(in) predefined_constant(self)operator(.)ident(function)operator(()ident(lexer)operator(,) ident(stream)operator(,) predefined_constant(self)operator(.)ident(options)operator(\))operator(:)
            keyword(yield) ident(ttype)operator(,) ident(value)
comment(# -*- coding: utf-8 -*-)
docstring<delimiter(""")content(
)content(    pygments.filters)content(
)content(    ~~~~~~~~~~~~~~~~)content(
)content(
)content(    Module containing filter lookup functions and default)content(
)content(    filters.)content(
)content(
)content(    :copyright: Copyright 2006-2009 by the Pygments team, see AUTHORS.)content(
)content(    :license: BSD, see LICENSE for details.)content(
)delimiter(""")>
keyword(try)operator(:)
    predefined(set)
keyword(except) exception(NameError)operator(:)
    keyword(from) include(sets) keyword(import) include(Set) keyword(as) ident(set)

keyword(import) include(re)
keyword(from) include(pygments.token) keyword(import) include(String)operator(,) include(Comment)operator(,) include(Keyword)operator(,) include(Name)operator(,) include(Error)operator(,) include(Whitespace)operator(,) \
    include(string_to_tokentype)
keyword(from) include(pygments.filter) keyword(import) include(Filter)
keyword(from) include(pygments.util) keyword(import) include(get_list_opt)operator(,) include(get_int_opt)operator(,) include(get_bool_opt)operator(,) include(get_choice_opt)operator(,) \
     include(ClassNotFound)operator(,) include(OptionError)
keyword(from) include(pygments.plugin) keyword(import) include(find_plugin_filters)


keyword(def) method(find_filter_class)operator(()ident(filtername)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Lookup a filter by name. Return None if not found.)content(
)content(    )delimiter(""")>
    keyword(if) ident(filtername) keyword(in) ident(FILTERS)operator(:)
        keyword(return) ident(FILTERS)operator([)ident(filtername)operator(])
    keyword(for) ident(name)operator(,) ident(cls) keyword(in) ident(find_plugin_filters)operator(()operator(\))operator(:)
        keyword(if) ident(name) operator(==) ident(filtername)operator(:)
            keyword(return) ident(cls)
    keyword(return) predefined_constant(None)


keyword(def) method(get_filter_by_name)operator(()ident(filtername)operator(,) operator(**)ident(options)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Return an instantiated filter. Options are passed to the filter)content(
)content(    initializer if wanted. Raise a ClassNotFound if not found.)content(
)content(    )delimiter(""")>
    ident(cls) operator(=) ident(find_filter_class)operator(()ident(filtername)operator(\))
    keyword(if) ident(cls)operator(:)
        keyword(return) ident(cls)operator(()operator(**)ident(options)operator(\))
    keyword(else)operator(:)
        keyword(raise) ident(ClassNotFound)operator(()string<delimiter(')content(filter %r not found)delimiter(')> operator(%) ident(filtername)operator(\))


keyword(def) method(get_all_filters)operator(()operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Return a generator of all filter names.)content(
)content(    )delimiter(""")>
    keyword(for) ident(name) keyword(in) ident(FILTERS)operator(:)
        keyword(yield) ident(name)
    keyword(for) ident(name)operator(,) ident(_) keyword(in) ident(find_plugin_filters)operator(()operator(\))operator(:)
        keyword(yield) ident(name)


keyword(def) method(_replace_special)operator(()ident(ttype)operator(,) ident(value)operator(,) ident(regex)operator(,) ident(specialttype)operator(,)
                     ident(replacefunc)operator(=)keyword(lambda) ident(x)operator(:) ident(x)operator(\))operator(:)
    ident(last) operator(=) integer(0)
    keyword(for) ident(match) keyword(in) ident(regex)operator(.)ident(finditer)operator(()ident(value)operator(\))operator(:)
        ident(start)operator(,) ident(end) operator(=) ident(match)operator(.)ident(start)operator(()operator(\))operator(,) ident(match)operator(.)ident(end)operator(()operator(\))
        keyword(if) ident(start) operator(!=) ident(last)operator(:)
            keyword(yield) ident(ttype)operator(,) ident(value)operator([)ident(last)operator(:)ident(start)operator(])
        keyword(yield) ident(specialttype)operator(,) ident(replacefunc)operator(()ident(value)operator([)ident(start)operator(:)ident(end)operator(])operator(\))
        ident(last) operator(=) ident(end)
    keyword(if) ident(last) operator(!=) predefined(len)operator(()ident(value)operator(\))operator(:)
        keyword(yield) ident(ttype)operator(,) ident(value)operator([)ident(last)operator(:)operator(])


keyword(class) class(CodeTagFilter)operator(()ident(Filter)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Highlight special code tags in comments and docstrings.)content(
)content(
)content(    Options accepted:)content(
)content(
)content(    `codetags` : list of strings)content(
)content(       A list of strings that are flagged as code tags.  The default is to)content(
)content(       highlight ``XXX``, ``TODO``, ``BUG`` and ``NOTE``.)content(
)content(    )delimiter(""")>

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))operator(:)
        ident(Filter)operator(.)ident(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))
        ident(tags) operator(=) ident(get_list_opt)operator(()ident(options)operator(,) string<delimiter(')content(codetags)delimiter(')>operator(,)
                            operator([)string<delimiter(')content(XXX)delimiter(')>operator(,) string<delimiter(')content(TODO)delimiter(')>operator(,) string<delimiter(')content(BUG)delimiter(')>operator(,) string<delimiter(')content(NOTE)delimiter(')>operator(])operator(\))
        predefined_constant(self)operator(.)ident(tag_re) operator(=) ident(re)operator(.)ident(compile)operator(()string<modifier(r)delimiter(')content(\\b)content((%s\))content(\\b)delimiter(')> operator(%) string<delimiter(')content(|)delimiter(')>operator(.)ident(join)operator(()operator([)
            ident(re)operator(.)ident(escape)operator(()ident(tag)operator(\)) keyword(for) ident(tag) keyword(in) ident(tags) keyword(if) ident(tag)
        operator(])operator(\))operator(\))

    keyword(def) method(filter)operator(()predefined_constant(self)operator(,) ident(lexer)operator(,) ident(stream)operator(\))operator(:)
        ident(regex) operator(=) predefined_constant(self)operator(.)ident(tag_re)
        keyword(for) ident(ttype)operator(,) ident(value) keyword(in) ident(stream)operator(:)
            keyword(if) ident(ttype) keyword(in) ident(String)operator(.)ident(Doc) keyword(or) \
               ident(ttype) keyword(in) ident(Comment) keyword(and) \
               ident(ttype) keyword(not) keyword(in) ident(Comment)operator(.)ident(Preproc)operator(:)
                keyword(for) ident(sttype)operator(,) ident(svalue) keyword(in) ident(_replace_special)operator(()ident(ttype)operator(,) ident(value)operator(,) ident(regex)operator(,)
                                                       ident(Comment)operator(.)ident(Special)operator(\))operator(:)
                    keyword(yield) ident(sttype)operator(,) ident(svalue)
            keyword(else)operator(:)
                keyword(yield) ident(ttype)operator(,) ident(value)


keyword(class) class(KeywordCaseFilter)operator(()ident(Filter)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Convert keywords to lowercase or uppercase or capitalize them, which)content(
)content(    means first letter uppercase, rest lowercase.)content(
)content(
)content(    This can be useful e.g. if you highlight Pascal code and want to adapt the)content(
)content(    code to your styleguide.)content(
)content(
)content(    Options accepted:)content(
)content(
)content(    `case` : string)content(
)content(       The casing to convert keywords to. Must be one of ``'lower'``,)content(
)content(       ``'upper'`` or ``'capitalize'``.  The default is ``'lower'``.)content(
)content(    )delimiter(""")>

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))operator(:)
        ident(Filter)operator(.)ident(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))
        ident(case) operator(=) ident(get_choice_opt)operator(()ident(options)operator(,) string<delimiter(')content(case)delimiter(')>operator(,) operator([)string<delimiter(')content(lower)delimiter(')>operator(,) string<delimiter(')content(upper)delimiter(')>operator(,) string<delimiter(')content(capitalize)delimiter(')>operator(])operator(,) string<delimiter(')content(lower)delimiter(')>operator(\))
        predefined_constant(self)operator(.)ident(convert) operator(=) predefined(getattr)operator(()predefined(unicode)operator(,) ident(case)operator(\))

    keyword(def) method(filter)operator(()predefined_constant(self)operator(,) ident(lexer)operator(,) ident(stream)operator(\))operator(:)
        keyword(for) ident(ttype)operator(,) ident(value) keyword(in) ident(stream)operator(:)
            keyword(if) ident(ttype) keyword(in) ident(Keyword)operator(:)
                keyword(yield) ident(ttype)operator(,) predefined_constant(self)operator(.)ident(convert)operator(()ident(value)operator(\))
            keyword(else)operator(:)
                keyword(yield) ident(ttype)operator(,) ident(value)


keyword(class) class(NameHighlightFilter)operator(()ident(Filter)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Highlight a normal Name token with a different token type.)content(
)content(
)content(    Example::)content(
)content(
)content(        filter = NameHighlightFilter()content(
)content(            names=['foo', 'bar', 'baz'],)content(
)content(            tokentype=Name.Function,)content(
)content(        \))content(
)content(
)content(    This would highlight the names "foo", "bar" and "baz")content(
)content(    as functions. `Name.Function` is the default token type.)content(
)content(
)content(    Options accepted:)content(
)content(
)content(    `names` : list of strings)content(
)content(      A list of names that should be given the different token type.)content(
)content(      There is no default.)content(
)content(    `tokentype` : TokenType or string)content(
)content(      A token type or a string containing a token type name that is)content(
)content(      used for highlighting the strings in `names`.  The default is)content(
)content(      `Name.Function`.)content(
)content(    )delimiter(""")>

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))operator(:)
        ident(Filter)operator(.)ident(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))
        predefined_constant(self)operator(.)ident(names) operator(=) predefined(set)operator(()ident(get_list_opt)operator(()ident(options)operator(,) string<delimiter(')content(names)delimiter(')>operator(,) operator([)operator(])operator(\))operator(\))
        ident(tokentype) operator(=) ident(options)operator(.)ident(get)operator(()string<delimiter(')content(tokentype)delimiter(')>operator(\))
        keyword(if) ident(tokentype)operator(:)
            predefined_constant(self)operator(.)ident(tokentype) operator(=) ident(string_to_tokentype)operator(()ident(tokentype)operator(\))
        keyword(else)operator(:)
            predefined_constant(self)operator(.)ident(tokentype) operator(=) ident(Name)operator(.)ident(Function)

    keyword(def) method(filter)operator(()predefined_constant(self)operator(,) ident(lexer)operator(,) ident(stream)operator(\))operator(:)
        keyword(for) ident(ttype)operator(,) ident(value) keyword(in) ident(stream)operator(:)
            keyword(if) ident(ttype) keyword(is) ident(Name) keyword(and) ident(value) keyword(in) predefined_constant(self)operator(.)ident(names)operator(:)
                keyword(yield) predefined_constant(self)operator(.)ident(tokentype)operator(,) ident(value)
            keyword(else)operator(:)
                keyword(yield) ident(ttype)operator(,) ident(value)


keyword(class) class(ErrorToken)operator(()exception(Exception)operator(\))operator(:)
    keyword(pass)

keyword(class) class(RaiseOnErrorTokenFilter)operator(()ident(Filter)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Raise an exception when the lexer generates an error token.)content(
)content(
)content(    Options accepted:)content(
)content(
)content(    `excclass` : Exception class)content(
)content(      The exception class to raise.)content(
)content(      The default is `pygments.filters.ErrorToken`.)content(
)content(
)content(    *New in Pygments 0.8.*)content(
)content(    )delimiter(""")>

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))operator(:)
        ident(Filter)operator(.)ident(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))
        predefined_constant(self)operator(.)ident(exception) operator(=) ident(options)operator(.)ident(get)operator(()string<delimiter(')content(excclass)delimiter(')>operator(,) ident(ErrorToken)operator(\))
        keyword(try)operator(:)
            comment(# issubclass(\) will raise TypeError if first argument is not a class)
            keyword(if) keyword(not) predefined(issubclass)operator(()predefined_constant(self)operator(.)ident(exception)operator(,) exception(Exception)operator(\))operator(:)
                keyword(raise) exception(TypeError)
        keyword(except) exception(TypeError)operator(:)
            keyword(raise) ident(OptionError)operator(()string<delimiter(')content(excclass option is not an exception class)delimiter(')>operator(\))

    keyword(def) method(filter)operator(()predefined_constant(self)operator(,) ident(lexer)operator(,) ident(stream)operator(\))operator(:)
        keyword(for) ident(ttype)operator(,) ident(value) keyword(in) ident(stream)operator(:)
            keyword(if) ident(ttype) keyword(is) ident(Error)operator(:)
                keyword(raise) predefined_constant(self)operator(.)ident(exception)operator(()ident(value)operator(\))
            keyword(yield) ident(ttype)operator(,) ident(value)


keyword(class) class(VisibleWhitespaceFilter)operator(()ident(Filter)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Convert tabs, newlines and/or spaces to visible characters.)content(
)content(
)content(    Options accepted:)content(
)content(
)content(    `spaces` : string or bool)content(
)content(      If this is a one-character string, spaces will be replaces by this string.)content(
)content(      If it is another true value, spaces will be replaced by ``·`` (unicode)content(
)content(      MIDDLE DOT\).  If it is a false value, spaces will not be replaced.  The)content(
)content(      default is ``False``.)content(
)content(    `tabs` : string or bool)content(
)content(      The same as for `spaces`, but the default replacement character is ``»``)content(
)content(      (unicode RIGHT-POINTING DOUBLE ANGLE QUOTATION MARK\).  The default value)content(
)content(      is ``False``.  Note: this will not work if the `tabsize` option for the)content(
)content(      lexer is nonzero, as tabs will already have been expanded then.)content(
)content(    `tabsize` : int)content(
)content(      If tabs are to be replaced by this filter (see the `tabs` option\), this)content(
)content(      is the total number of characters that a tab should be expanded to.)content(
)content(      The default is ``8``.)content(
)content(    `newlines` : string or bool)content(
)content(      The same as for `spaces`, but the default replacement character is ``¶``)content(
)content(      (unicode PILCROW SIGN\).  The default value is ``False``.)content(
)content(    `wstokentype` : bool)content(
)content(      If true, give whitespace the special `Whitespace` token type.  This allows)content(
)content(      styling the visible whitespace differently (e.g. greyed out\), but it can)content(
)content(      disrupt background colors.  The default is ``True``.)content(
)content(
)content(    *New in Pygments 0.8.*)content(
)content(    )delimiter(""")>

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))operator(:)
        ident(Filter)operator(.)ident(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))
        keyword(for) ident(name)operator(,) ident(default) keyword(in) operator({)string<delimiter(')content(spaces)delimiter(')>operator(:) string<modifier(u)delimiter(')content(·)delimiter(')>operator(,) string<delimiter(')content(tabs)delimiter(')>operator(:) string<modifier(u)delimiter(')content(»)delimiter(')>operator(,) string<delimiter(')content(newlines)delimiter(')>operator(:) string<modifier(u)delimiter(')content(¶)delimiter(')>operator(})operator(.)ident(items)operator(()operator(\))operator(:)
            ident(opt) operator(=) ident(options)operator(.)ident(get)operator(()ident(name)operator(,) predefined_constant(False)operator(\))
            keyword(if) predefined(isinstance)operator(()ident(opt)operator(,) predefined(basestring)operator(\)) keyword(and) predefined(len)operator(()ident(opt)operator(\)) operator(==) integer(1)operator(:)
                predefined(setattr)operator(()predefined_constant(self)operator(,) ident(name)operator(,) ident(opt)operator(\))
            keyword(else)operator(:)
                predefined(setattr)operator(()predefined_constant(self)operator(,) ident(name)operator(,) operator(()ident(opt) keyword(and) ident(default) keyword(or) string<delimiter(')delimiter(')>operator(\))operator(\))
        ident(tabsize) operator(=) ident(get_int_opt)operator(()ident(options)operator(,) string<delimiter(')content(tabsize)delimiter(')>operator(,) integer(8)operator(\))
        keyword(if) predefined_constant(self)operator(.)ident(tabs)operator(:)
            predefined_constant(self)operator(.)ident(tabs) operator(+=) string<delimiter(')content( )delimiter(')>operator(*)operator(()ident(tabsize)operator(-)integer(1)operator(\))
        keyword(if) predefined_constant(self)operator(.)ident(newlines)operator(:)
            predefined_constant(self)operator(.)ident(newlines) operator(+=) string<delimiter(')char(\\n)delimiter(')>
        predefined_constant(self)operator(.)ident(wstt) operator(=) ident(get_bool_opt)operator(()ident(options)operator(,) string<delimiter(')content(wstokentype)delimiter(')>operator(,) predefined_constant(True)operator(\))

    keyword(def) method(filter)operator(()predefined_constant(self)operator(,) ident(lexer)operator(,) ident(stream)operator(\))operator(:)
        keyword(if) predefined_constant(self)operator(.)ident(wstt)operator(:)
            ident(spaces) operator(=) predefined_constant(self)operator(.)ident(spaces) keyword(or) string<delimiter(')content( )delimiter(')>
            ident(tabs) operator(=) predefined_constant(self)operator(.)ident(tabs) keyword(or) string<delimiter(')char(\\t)delimiter(')>
            ident(newlines) operator(=) predefined_constant(self)operator(.)ident(newlines) keyword(or) string<delimiter(')char(\\n)delimiter(')>
            ident(regex) operator(=) ident(re)operator(.)ident(compile)operator(()string<modifier(r)delimiter(')content(\\s)delimiter(')>operator(\))
            keyword(def) method(replacefunc)operator(()ident(wschar)operator(\))operator(:)
                keyword(if) ident(wschar) operator(==) string<delimiter(')content( )delimiter(')>operator(:)
                    keyword(return) ident(spaces)
                keyword(elif) ident(wschar) operator(==) string<delimiter(')char(\\t)delimiter(')>operator(:)
                    keyword(return) ident(tabs)
                keyword(elif) ident(wschar) operator(==) string<delimiter(')char(\\n)delimiter(')>operator(:)
                    keyword(return) ident(newlines)
                keyword(return) ident(wschar)

            keyword(for) ident(ttype)operator(,) ident(value) keyword(in) ident(stream)operator(:)
                keyword(for) ident(sttype)operator(,) ident(svalue) keyword(in) ident(_replace_special)operator(()ident(ttype)operator(,) ident(value)operator(,) ident(regex)operator(,)
                                                       ident(Whitespace)operator(,) ident(replacefunc)operator(\))operator(:)
                    keyword(yield) ident(sttype)operator(,) ident(svalue)
        keyword(else)operator(:)
            ident(spaces)operator(,) ident(tabs)operator(,) ident(newlines) operator(=) predefined_constant(self)operator(.)ident(spaces)operator(,) predefined_constant(self)operator(.)ident(tabs)operator(,) predefined_constant(self)operator(.)ident(newlines)
            comment(# simpler processing)
            keyword(for) ident(ttype)operator(,) ident(value) keyword(in) ident(stream)operator(:)
                keyword(if) ident(spaces)operator(:)
                    ident(value) operator(=) ident(value)operator(.)ident(replace)operator(()string<delimiter(')content( )delimiter(')>operator(,) ident(spaces)operator(\))
                keyword(if) ident(tabs)operator(:)
                    ident(value) operator(=) ident(value)operator(.)ident(replace)operator(()string<delimiter(')char(\\t)delimiter(')>operator(,) ident(tabs)operator(\))
                keyword(if) ident(newlines)operator(:)
                    ident(value) operator(=) ident(value)operator(.)ident(replace)operator(()string<delimiter(')char(\\n)delimiter(')>operator(,) ident(newlines)operator(\))
                keyword(yield) ident(ttype)operator(,) ident(value)


ident(FILTERS) operator(=) operator({)
    string<delimiter(')content(codetagify)delimiter(')>operator(:)     ident(CodeTagFilter)operator(,)
    string<delimiter(')content(keywordcase)delimiter(')>operator(:)    ident(KeywordCaseFilter)operator(,)
    string<delimiter(')content(highlight)delimiter(')>operator(:)      ident(NameHighlightFilter)operator(,)
    string<delimiter(')content(raiseonerror)delimiter(')>operator(:)   ident(RaiseOnErrorTokenFilter)operator(,)
    string<delimiter(')content(whitespace)delimiter(')>operator(:)     ident(VisibleWhitespaceFilter)operator(,)
operator(})
comment(# -*- coding: utf-8 -*-)
docstring<delimiter(""")content(
)content(    pygments.formatter)content(
)content(    ~~~~~~~~~~~~~~~~~~)content(
)content(
)content(    Base formatter class.)content(
)content(
)content(    :copyright: Copyright 2006-2009 by the Pygments team, see AUTHORS.)content(
)content(    :license: BSD, see LICENSE for details.)content(
)delimiter(""")>

keyword(import) include(codecs)

keyword(from) include(pygments.util) keyword(import) include(get_bool_opt)
keyword(from) include(pygments.styles) keyword(import) include(get_style_by_name)

ident(__all__) operator(=) operator([)string<delimiter(')content(Formatter)delimiter(')>operator(])


keyword(def) method(_lookup_style)operator(()ident(style)operator(\))operator(:)
    keyword(if) predefined(isinstance)operator(()ident(style)operator(,) predefined(basestring)operator(\))operator(:)
        keyword(return) ident(get_style_by_name)operator(()ident(style)operator(\))
    keyword(return) ident(style)


keyword(class) class(Formatter)operator(()predefined(object)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Converts a token stream to text.)content(
)content(
)content(    Options accepted:)content(
)content(
)content(    ``style``)content(
)content(        The style to use, can be a string or a Style subclass)content(
)content(        (default: "default"\). Not used by e.g. the)content(
)content(        TerminalFormatter.)content(
)content(    ``full``)content(
)content(        Tells the formatter to output a "full" document, i.e.)content(
)content(        a complete self-contained document. This doesn't have)content(
)content(        any effect for some formatters (default: false\).)content(
)content(    ``title``)content(
)content(        If ``full`` is true, the title that should be used to)content(
)content(        caption the document (default: ''\).)content(
)content(    ``encoding``)content(
)content(        If given, must be an encoding name. This will be used to)content(
)content(        convert the Unicode token strings to byte strings in the)content(
)content(        output. If it is "" or None, Unicode strings will be written)content(
)content(        to the output file, which most file-like objects do not)content(
)content(        support (default: None\).)content(
)content(    ``outencoding``)content(
)content(        Overrides ``encoding`` if given.)content(
)content(    )delimiter(""")>

    comment(#: Name of the formatter)
    ident(name) operator(=) predefined_constant(None)

    comment(#: Shortcuts for the formatter)
    ident(aliases) operator(=) operator([)operator(])

    comment(#: fn match rules)
    ident(filenames) operator(=) operator([)operator(])

    comment(#: If True, this formatter outputs Unicode strings when no encoding)
    comment(#: option is given.)
    ident(unicodeoutput) operator(=) predefined_constant(True)

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))operator(:)
        predefined_constant(self)operator(.)ident(style) operator(=) ident(_lookup_style)operator(()ident(options)operator(.)ident(get)operator(()string<delimiter(')content(style)delimiter(')>operator(,) string<delimiter(')content(default)delimiter(')>operator(\))operator(\))
        predefined_constant(self)operator(.)ident(full)  operator(=) ident(get_bool_opt)operator(()ident(options)operator(,) string<delimiter(')content(full)delimiter(')>operator(,) predefined_constant(False)operator(\))
        predefined_constant(self)operator(.)ident(title) operator(=) ident(options)operator(.)ident(get)operator(()string<delimiter(')content(title)delimiter(')>operator(,) string<delimiter(')delimiter(')>operator(\))
        predefined_constant(self)operator(.)ident(encoding) operator(=) ident(options)operator(.)ident(get)operator(()string<delimiter(')content(encoding)delimiter(')>operator(,) predefined_constant(None)operator(\)) keyword(or) predefined_constant(None)
        predefined_constant(self)operator(.)ident(encoding) operator(=) ident(options)operator(.)ident(get)operator(()string<delimiter(')content(outencoding)delimiter(')>operator(,) predefined_constant(None)operator(\)) keyword(or) predefined_constant(self)operator(.)ident(encoding)
        predefined_constant(self)operator(.)ident(options) operator(=) ident(options)

    keyword(def) method(get_style_defs)operator(()predefined_constant(self)operator(,) ident(arg)operator(=)string<delimiter(')delimiter(')>operator(\))operator(:)
        docstring<delimiter(""")content(
)content(        Return the style definitions for the current style as a string.)content(
)content(
)content(        ``arg`` is an additional argument whose meaning depends on the)content(
)content(        formatter used. Note that ``arg`` can also be a list or tuple)content(
)content(        for some formatters like the html formatter.)content(
)content(        )delimiter(""")>
        keyword(return) string<delimiter(')delimiter(')>

    keyword(def) method(format)operator(()predefined_constant(self)operator(,) ident(tokensource)operator(,) ident(outfile)operator(\))operator(:)
        docstring<delimiter(""")content(
)content(        Format ``tokensource``, an iterable of ``(tokentype, tokenstring\)``)content(
)content(        tuples and write it into ``outfile``.)content(
)content(        )delimiter(""")>
        keyword(if) predefined_constant(self)operator(.)ident(encoding)operator(:)
            comment(# wrap the outfile in a StreamWriter)
            ident(outfile) operator(=) ident(codecs)operator(.)ident(lookup)operator(()predefined_constant(self)operator(.)ident(encoding)operator(\))operator([)integer(3)operator(])operator(()ident(outfile)operator(\))
        keyword(return) predefined_constant(self)operator(.)ident(format_unencoded)operator(()ident(tokensource)operator(,) ident(outfile)operator(\))
comment(# -*- coding: utf-8 -*-)
docstring<delimiter(""")content(
)content(    pygments.formatters)content(
)content(    ~~~~~~~~~~~~~~~~~~~)content(
)content(
)content(    Pygments formatters.)content(
)content(
)content(    :copyright: Copyright 2006-2009 by the Pygments team, see AUTHORS.)content(
)content(    :license: BSD, see LICENSE for details.)content(
)delimiter(""")>
keyword(import) include(os.path)
keyword(import) include(fnmatch)

keyword(from) include(pygments.formatters._mapping) keyword(import) include(FORMATTERS)
keyword(from) include(pygments.plugin) keyword(import) include(find_plugin_formatters)
keyword(from) include(pygments.util) keyword(import) include(docstring_headline)operator(,) include(ClassNotFound)

ident(ns) operator(=) predefined(globals)operator(()operator(\))
keyword(for) ident(fcls) keyword(in) ident(FORMATTERS)operator(:)
    ident(ns)operator([)ident(fcls)operator(.)ident(__name__)operator(]) operator(=) ident(fcls)
keyword(del) ident(fcls)

ident(__all__) operator(=) operator([)string<delimiter(')content(get_formatter_by_name)delimiter(')>operator(,) string<delimiter(')content(get_formatter_for_filename)delimiter(')>operator(,)
           string<delimiter(')content(get_all_formatters)delimiter(')>operator(]) operator(+) operator([)ident(cls)operator(.)ident(__name__) keyword(for) ident(cls) keyword(in) ident(FORMATTERS)operator(])


ident(_formatter_alias_cache) operator(=) operator({)operator(})
ident(_formatter_filename_cache) operator(=) operator([)operator(])

keyword(def) method(_init_formatter_cache)operator(()operator(\))operator(:)
    keyword(if) ident(_formatter_alias_cache)operator(:)
        keyword(return)
    keyword(for) ident(cls) keyword(in) ident(get_all_formatters)operator(()operator(\))operator(:)
        keyword(for) ident(alias) keyword(in) ident(cls)operator(.)ident(aliases)operator(:)
            ident(_formatter_alias_cache)operator([)ident(alias)operator(]) operator(=) ident(cls)
        keyword(for) ident(fn) keyword(in) ident(cls)operator(.)ident(filenames)operator(:)
            ident(_formatter_filename_cache)operator(.)ident(append)operator(()operator(()ident(fn)operator(,) ident(cls)operator(\))operator(\))


keyword(def) method(find_formatter_class)operator(()ident(name)operator(\))operator(:)
    ident(_init_formatter_cache)operator(()operator(\))
    ident(cls) operator(=) ident(_formatter_alias_cache)operator(.)ident(get)operator(()ident(name)operator(,) predefined_constant(None)operator(\))
    keyword(return) ident(cls)


keyword(def) method(get_formatter_by_name)operator(()ident(name)operator(,) operator(**)ident(options)operator(\))operator(:)
    ident(_init_formatter_cache)operator(()operator(\))
    ident(cls) operator(=) ident(_formatter_alias_cache)operator(.)ident(get)operator(()ident(name)operator(,) predefined_constant(None)operator(\))
    keyword(if) keyword(not) ident(cls)operator(:)
        keyword(raise) ident(ClassNotFound)operator(()string<delimiter(")content(No formatter found for name %r)delimiter(")> operator(%) ident(name)operator(\))
    keyword(return) ident(cls)operator(()operator(**)ident(options)operator(\))


keyword(def) method(get_formatter_for_filename)operator(()ident(fn)operator(,) operator(**)ident(options)operator(\))operator(:)
    ident(_init_formatter_cache)operator(()operator(\))
    ident(fn) operator(=) ident(os)operator(.)ident(path)operator(.)ident(basename)operator(()ident(fn)operator(\))
    keyword(for) ident(pattern)operator(,) ident(cls) keyword(in) ident(_formatter_filename_cache)operator(:)
        keyword(if) ident(fnmatch)operator(.)ident(fnmatch)operator(()ident(fn)operator(,) ident(pattern)operator(\))operator(:)
            keyword(return) ident(cls)operator(()operator(**)ident(options)operator(\))
    keyword(raise) ident(ClassNotFound)operator(()string<delimiter(")content(No formatter found for file name %r)delimiter(")> operator(%) ident(fn)operator(\))


keyword(def) method(get_all_formatters)operator(()operator(\))operator(:)
    docstring<delimiter(""")content(Return a generator for all formatters.)delimiter(""")>
    keyword(for) ident(formatter) keyword(in) ident(FORMATTERS)operator(:)
        keyword(yield) ident(formatter)
    keyword(for) ident(_)operator(,) ident(formatter) keyword(in) ident(find_plugin_formatters)operator(()operator(\))operator(:)
        keyword(yield) ident(formatter)
comment(# -*- coding: utf-8 -*-)
docstring<delimiter(""")content(
)content(    pygments.formatters._mapping)content(
)content(    ~~~~~~~~~~~~~~~~~~~~~~~~~~~)content(
)content(
)content(    Formatter mapping defintions. This file is generated by itself. Everytime)content(
)content(    you change something on a builtin formatter defintion, run this script from)content(
)content(    the formatters folder to update it.)content(
)content(
)content(    Do not alter the FORMATTERS dictionary by hand.)content(
)content(
)content(    :copyright: Copyright 2006-2009 by the Pygments team, see AUTHORS.)content(
)content(    :license: BSD, see LICENSE for details.)content(
)delimiter(""")>

keyword(from) include(pygments.util) keyword(import) include(docstring_headline)

comment(# start)
keyword(from) include(pygments.formatters.bbcode) keyword(import) include(BBCodeFormatter)
keyword(from) include(pygments.formatters.html) keyword(import) include(HtmlFormatter)
keyword(from) include(pygments.formatters.img) keyword(import) include(BmpImageFormatter)
keyword(from) include(pygments.formatters.img) keyword(import) include(GifImageFormatter)
keyword(from) include(pygments.formatters.img) keyword(import) include(ImageFormatter)
keyword(from) include(pygments.formatters.img) keyword(import) include(JpgImageFormatter)
keyword(from) include(pygments.formatters.latex) keyword(import) include(LatexFormatter)
keyword(from) include(pygments.formatters.other) keyword(import) include(NullFormatter)
keyword(from) include(pygments.formatters.other) keyword(import) include(RawTokenFormatter)
keyword(from) include(pygments.formatters.rtf) keyword(import) include(RtfFormatter)
keyword(from) include(pygments.formatters.svg) keyword(import) include(SvgFormatter)
keyword(from) include(pygments.formatters.terminal) keyword(import) include(TerminalFormatter)
keyword(from) include(pygments.formatters.terminal256) keyword(import) include(Terminal256Formatter)

ident(FORMATTERS) operator(=) operator({)
    ident(BBCodeFormatter)operator(:) operator(()string<delimiter(')content(BBCode)delimiter(')>operator(,) operator(()string<delimiter(')content(bbcode)delimiter(')>operator(,) string<delimiter(')content(bb)delimiter(')>operator(\))operator(,) operator(()operator(\))operator(,) string<delimiter(')content(Format tokens with BBcodes. These formatting codes are used by many bulletin boards, so you can highlight your sourcecode with pygments before posting it there.)delimiter(')>operator(\))operator(,)
    ident(BmpImageFormatter)operator(:) operator(()string<delimiter(')content(img_bmp)delimiter(')>operator(,) operator(()string<delimiter(')content(bmp)delimiter(')>operator(,) string<delimiter(')content(bitmap)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(*.bmp)delimiter(')>operator(,)operator(\))operator(,) string<delimiter(')content(Create a bitmap image from source code. This uses the Python Imaging Library to generate a pixmap from the source code.)delimiter(')>operator(\))operator(,)
    ident(GifImageFormatter)operator(:) operator(()string<delimiter(')content(img_gif)delimiter(')>operator(,) operator(()string<delimiter(')content(gif)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(*.gif)delimiter(')>operator(,)operator(\))operator(,) string<delimiter(')content(Create a GIF image from source code. This uses the Python Imaging Library to generate a pixmap from the source code.)delimiter(')>operator(\))operator(,)
    ident(HtmlFormatter)operator(:) operator(()string<delimiter(')content(HTML)delimiter(')>operator(,) operator(()string<delimiter(')content(html)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(*.html)delimiter(')>operator(,) string<delimiter(')content(*.htm)delimiter(')>operator(\))operator(,) string<delimiter(")content(Format tokens as HTML 4 ``<span>`` tags within a ``<pre>`` tag, wrapped in a ``<div>`` tag. The ``<div>``'s CSS class can be set by the `cssclass` option.)delimiter(")>operator(\))operator(,)
    ident(ImageFormatter)operator(:) operator(()string<delimiter(')content(img)delimiter(')>operator(,) operator(()string<delimiter(')content(img)delimiter(')>operator(,) string<delimiter(')content(IMG)delimiter(')>operator(,) string<delimiter(')content(png)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(*.png)delimiter(')>operator(,)operator(\))operator(,) string<delimiter(')content(Create a PNG image from source code. This uses the Python Imaging Library to generate a pixmap from the source code.)delimiter(')>operator(\))operator(,)
    ident(JpgImageFormatter)operator(:) operator(()string<delimiter(')content(img_jpg)delimiter(')>operator(,) operator(()string<delimiter(')content(jpg)delimiter(')>operator(,) string<delimiter(')content(jpeg)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(*.jpg)delimiter(')>operator(,)operator(\))operator(,) string<delimiter(')content(Create a JPEG image from source code. This uses the Python Imaging Library to generate a pixmap from the source code.)delimiter(')>operator(\))operator(,)
    ident(LatexFormatter)operator(:) operator(()string<delimiter(')content(LaTeX)delimiter(')>operator(,) operator(()string<delimiter(')content(latex)delimiter(')>operator(,) string<delimiter(')content(tex)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(*.tex)delimiter(')>operator(,)operator(\))operator(,) string<delimiter(')content(Format tokens as LaTeX code. This needs the `fancyvrb` and `color` standard packages.)delimiter(')>operator(\))operator(,)
    ident(NullFormatter)operator(:) operator(()string<delimiter(')content(Text only)delimiter(')>operator(,) operator(()string<delimiter(')content(text)delimiter(')>operator(,) string<delimiter(')content(null)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(*.txt)delimiter(')>operator(,)operator(\))operator(,) string<delimiter(')content(Output the text unchanged without any formatting.)delimiter(')>operator(\))operator(,)
    ident(RawTokenFormatter)operator(:) operator(()string<delimiter(')content(Raw tokens)delimiter(')>operator(,) operator(()string<delimiter(')content(raw)delimiter(')>operator(,) string<delimiter(')content(tokens)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(*.raw)delimiter(')>operator(,)operator(\))operator(,) string<delimiter(')content(Format tokens as a raw representation for storing token streams.)delimiter(')>operator(\))operator(,)
    ident(RtfFormatter)operator(:) operator(()string<delimiter(')content(RTF)delimiter(')>operator(,) operator(()string<delimiter(')content(rtf)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(*.rtf)delimiter(')>operator(,)operator(\))operator(,) string<delimiter(')content(Format tokens as RTF markup. This formatter automatically outputs full RTF documents with color information and other useful stuff. Perfect for Copy and Paste into Microsoft)char(\\xc2)char(\\xae)content( Word)char(\\xc2)char(\\xae)content( documents.)delimiter(')>operator(\))operator(,)
    ident(SvgFormatter)operator(:) operator(()string<delimiter(')content(SVG)delimiter(')>operator(,) operator(()string<delimiter(')content(svg)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(*.svg)delimiter(')>operator(,)operator(\))operator(,) string<delimiter(')content(Format tokens as an SVG graphics file.  This formatter is still experimental. Each line of code is a ``<text>`` element with explicit ``x`` and ``y`` coordinates containing ``<tspan>`` elements with the individual token styles.)delimiter(')>operator(\))operator(,)
    ident(Terminal256Formatter)operator(:) operator(()string<delimiter(')content(Terminal256)delimiter(')>operator(,) operator(()string<delimiter(')content(terminal256)delimiter(')>operator(,) string<delimiter(')content(console256)delimiter(')>operator(,) string<delimiter(')content(256)delimiter(')>operator(\))operator(,) operator(()operator(\))operator(,) string<delimiter(')content(Format tokens with ANSI color sequences, for output in a 256-color terminal or console. Like in `TerminalFormatter` color sequences are terminated at newlines, so that paging the output works correctly.)delimiter(')>operator(\))operator(,)
    ident(TerminalFormatter)operator(:) operator(()string<delimiter(')content(Terminal)delimiter(')>operator(,) operator(()string<delimiter(')content(terminal)delimiter(')>operator(,) string<delimiter(')content(console)delimiter(')>operator(\))operator(,) operator(()operator(\))operator(,) string<delimiter(')content(Format tokens with ANSI color sequences, for output in a text console. Color sequences are terminated at newlines, so that paging the output works correctly.)delimiter(')>operator(\))
operator(})

keyword(if) ident(__name__) operator(==) string<delimiter(')content(__main__)delimiter(')>operator(:)
    keyword(import) include(sys)
    keyword(import) include(os)

    comment(# lookup formatters)
    ident(found_formatters) operator(=) operator([)operator(])
    ident(imports) operator(=) operator([)operator(])
    ident(sys)operator(.)ident(path)operator(.)ident(insert)operator(()integer(0)operator(,) ident(os)operator(.)ident(path)operator(.)ident(join)operator(()ident(os)operator(.)ident(path)operator(.)ident(dirname)operator(()ident(__file__)operator(\))operator(,) string<delimiter(')content(..)delimiter(')>operator(,) string<delimiter(')content(..)delimiter(')>operator(\))operator(\))
    keyword(for) ident(filename) keyword(in) ident(os)operator(.)ident(listdir)operator(()string<delimiter(')content(.)delimiter(')>operator(\))operator(:)
        keyword(if) ident(filename)operator(.)ident(endswith)operator(()string<delimiter(')content(.py)delimiter(')>operator(\)) keyword(and) keyword(not) ident(filename)operator(.)ident(startswith)operator(()string<delimiter(')content(_)delimiter(')>operator(\))operator(:)
            ident(module_name) operator(=) string<delimiter(')content(pygments.formatters.%s)delimiter(')> operator(%) ident(filename)operator([)operator(:)operator(-)integer(3)operator(])
            keyword(print) ident(module_name)
            ident(module) operator(=) predefined(__import__)operator(()ident(module_name)operator(,) predefined_constant(None)operator(,) predefined_constant(None)operator(,) operator([)string<delimiter(')delimiter(')>operator(])operator(\))
            keyword(for) ident(formatter_name) keyword(in) ident(module)operator(.)ident(__all__)operator(:)
                ident(imports)operator(.)ident(append)operator(()operator(()ident(module_name)operator(,) ident(formatter_name)operator(\))operator(\))
                ident(formatter) operator(=) predefined(getattr)operator(()ident(module)operator(,) ident(formatter_name)operator(\))
                ident(found_formatters)operator(.)ident(append)operator(()
                    string<delimiter(')content(%s: %r)delimiter(')> operator(%) operator(()ident(formatter_name)operator(,)
                                operator(()ident(formatter)operator(.)ident(name)operator(,)
                                 predefined(tuple)operator(()ident(formatter)operator(.)ident(aliases)operator(\))operator(,)
                                 predefined(tuple)operator(()ident(formatter)operator(.)ident(filenames)operator(\))operator(,)
                                 ident(docstring_headline)operator(()ident(formatter)operator(\))operator(\))operator(\))operator(\))
    comment(# sort them, that should make the diff files for svn smaller)
    ident(found_formatters)operator(.)ident(sort)operator(()operator(\))
    ident(imports)operator(.)ident(sort)operator(()operator(\))

    comment(# extract useful sourcecode from this file)
    ident(f) operator(=) predefined(open)operator(()ident(__file__)operator(\))
    keyword(try)operator(:)
        ident(content) operator(=) ident(f)operator(.)ident(read)operator(()operator(\))
    keyword(finally)operator(:)
        ident(f)operator(.)ident(close)operator(()operator(\))
    ident(header) operator(=) ident(content)operator([)operator(:)ident(content)operator(.)ident(find)operator(()string<delimiter(')content(# start)delimiter(')>operator(\))operator(])
    ident(footer) operator(=) ident(content)operator([)ident(content)operator(.)ident(find)operator(()string<delimiter(")content(if __name__ == '__main__':)delimiter(")>operator(\))operator(:)operator(])

    comment(# write new file)
    ident(f) operator(=) predefined(open)operator(()ident(__file__)operator(,) string<delimiter(')content(w)delimiter(')>operator(\))
    ident(f)operator(.)ident(write)operator(()ident(header)operator(\))
    ident(f)operator(.)ident(write)operator(()string<delimiter(')content(# start)char(\\n)delimiter(')>operator(\))
    ident(f)operator(.)ident(write)operator(()string<delimiter(')char(\\n)delimiter(')>operator(.)ident(join)operator(()operator([)string<delimiter(')content(from %s import %s)delimiter(')> operator(%) ident(imp) keyword(for) ident(imp) keyword(in) ident(imports)operator(])operator(\))operator(\))
    ident(f)operator(.)ident(write)operator(()string<delimiter(')char(\\n)char(\\n)delimiter(')>operator(\))
    ident(f)operator(.)ident(write)operator(()string<delimiter(')content(FORMATTERS = {)char(\\n)content(    %s)char(\\n)content(})char(\\n)char(\\n)delimiter(')> operator(%) string<delimiter(')content(,)char(\\n)content(    )delimiter(')>operator(.)ident(join)operator(()ident(found_formatters)operator(\))operator(\))
    ident(f)operator(.)ident(write)operator(()ident(footer)operator(\))
    ident(f)operator(.)ident(close)operator(()operator(\))
comment(# -*- coding: utf-8 -*-)
docstring<delimiter(""")content(
)content(    pygments.formatters.bbcode)content(
)content(    ~~~~~~~~~~~~~~~~~~~~~~~~~~)content(
)content(
)content(    BBcode formatter.)content(
)content(
)content(    :copyright: Copyright 2006-2009 by the Pygments team, see AUTHORS.)content(
)content(    :license: BSD, see LICENSE for details.)content(
)delimiter(""")>


keyword(from) include(pygments.formatter) keyword(import) include(Formatter)
keyword(from) include(pygments.util) keyword(import) include(get_bool_opt)

ident(__all__) operator(=) operator([)string<delimiter(')content(BBCodeFormatter)delimiter(')>operator(])


keyword(class) class(BBCodeFormatter)operator(()ident(Formatter)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Format tokens with BBcodes. These formatting codes are used by many)content(
)content(    bulletin boards, so you can highlight your sourcecode with pygments before)content(
)content(    posting it there.)content(
)content(
)content(    This formatter has no support for background colors and borders, as there)content(
)content(    are no common BBcode tags for that.)content(
)content(
)content(    Some board systems (e.g. phpBB\) don't support colors in their [code] tag,)content(
)content(    so you can't use the highlighting together with that tag.)content(
)content(    Text in a [code] tag usually is shown with a monospace font (which this)content(
)content(    formatter can do with the ``monofont`` option\) and no spaces (which you)content(
)content(    need for indentation\) are removed.)content(
)content(
)content(    Additional options accepted:)content(
)content(
)content(    `style`)content(
)content(        The style to use, can be a string or a Style subclass (default:)content(
)content(        ``'default'``\).)content(
)content(
)content(    `codetag`)content(
)content(        If set to true, put the output into ``[code]`` tags (default:)content(
)content(        ``false``\))content(
)content(
)content(    `monofont`)content(
)content(        If set to true, add a tag to show the code with a monospace font)content(
)content(        (default: ``false``\).)content(
)content(    )delimiter(""")>
    ident(name) operator(=) string<delimiter(')content(BBCode)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(bbcode)delimiter(')>operator(,) string<delimiter(')content(bb)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)operator(])

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))operator(:)
        ident(Formatter)operator(.)ident(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))
        predefined_constant(self)operator(.)ident(_code) operator(=) ident(get_bool_opt)operator(()ident(options)operator(,) string<delimiter(')content(codetag)delimiter(')>operator(,) predefined_constant(False)operator(\))
        predefined_constant(self)operator(.)ident(_mono) operator(=) ident(get_bool_opt)operator(()ident(options)operator(,) string<delimiter(')content(monofont)delimiter(')>operator(,) predefined_constant(False)operator(\))

        predefined_constant(self)operator(.)ident(styles) operator(=) operator({)operator(})
        predefined_constant(self)operator(.)ident(_make_styles)operator(()operator(\))

    keyword(def) method(_make_styles)operator(()predefined_constant(self)operator(\))operator(:)
        keyword(for) ident(ttype)operator(,) ident(ndef) keyword(in) predefined_constant(self)operator(.)ident(style)operator(:)
            ident(start) operator(=) ident(end) operator(=) string<delimiter(')delimiter(')>
            keyword(if) ident(ndef)operator([)string<delimiter(')content(color)delimiter(')>operator(])operator(:)
                ident(start) operator(+=) string<delimiter(')content([color=#%s])delimiter(')> operator(%) ident(ndef)operator([)string<delimiter(')content(color)delimiter(')>operator(])
                ident(end) operator(=) string<delimiter(')content([/color])delimiter(')> operator(+) ident(end)
            keyword(if) ident(ndef)operator([)string<delimiter(')content(bold)delimiter(')>operator(])operator(:)
                ident(start) operator(+=) string<delimiter(')content([b])delimiter(')>
                ident(end) operator(=) string<delimiter(')content([/b])delimiter(')> operator(+) ident(end)
            keyword(if) ident(ndef)operator([)string<delimiter(')content(italic)delimiter(')>operator(])operator(:)
                ident(start) operator(+=) string<delimiter(')content([i])delimiter(')>
                ident(end) operator(=) string<delimiter(')content([/i])delimiter(')> operator(+) ident(end)
            keyword(if) ident(ndef)operator([)string<delimiter(')content(underline)delimiter(')>operator(])operator(:)
                ident(start) operator(+=) string<delimiter(')content([u])delimiter(')>
                ident(end) operator(=) string<delimiter(')content([/u])delimiter(')> operator(+) ident(end)
            comment(# there are no common BBcodes for background-color and border)

            predefined_constant(self)operator(.)ident(styles)operator([)ident(ttype)operator(]) operator(=) ident(start)operator(,) ident(end)

    keyword(def) method(format_unencoded)operator(()predefined_constant(self)operator(,) ident(tokensource)operator(,) ident(outfile)operator(\))operator(:)
        keyword(if) predefined_constant(self)operator(.)ident(_code)operator(:)
            ident(outfile)operator(.)ident(write)operator(()string<delimiter(')content([code])delimiter(')>operator(\))
        keyword(if) predefined_constant(self)operator(.)ident(_mono)operator(:)
            ident(outfile)operator(.)ident(write)operator(()string<delimiter(')content([font=monospace])delimiter(')>operator(\))

        ident(lastval) operator(=) string<delimiter(')delimiter(')>
        ident(lasttype) operator(=) predefined_constant(None)

        keyword(for) ident(ttype)operator(,) ident(value) keyword(in) ident(tokensource)operator(:)
            keyword(while) ident(ttype) keyword(not) keyword(in) predefined_constant(self)operator(.)ident(styles)operator(:)
                ident(ttype) operator(=) ident(ttype)operator(.)ident(parent)
            keyword(if) ident(ttype) operator(==) ident(lasttype)operator(:)
                ident(lastval) operator(+=) ident(value)
            keyword(else)operator(:)
                keyword(if) ident(lastval)operator(:)
                    ident(start)operator(,) ident(end) operator(=) predefined_constant(self)operator(.)ident(styles)operator([)ident(lasttype)operator(])
                    ident(outfile)operator(.)ident(write)operator(()string<delimiter(')delimiter(')>operator(.)ident(join)operator(()operator(()ident(start)operator(,) ident(lastval)operator(,) ident(end)operator(\))operator(\))operator(\))
                ident(lastval) operator(=) ident(value)
                ident(lasttype) operator(=) ident(ttype)

        keyword(if) ident(lastval)operator(:)
            ident(start)operator(,) ident(end) operator(=) predefined_constant(self)operator(.)ident(styles)operator([)ident(lasttype)operator(])
            ident(outfile)operator(.)ident(write)operator(()string<delimiter(')delimiter(')>operator(.)ident(join)operator(()operator(()ident(start)operator(,) ident(lastval)operator(,) ident(end)operator(\))operator(\))operator(\))

        keyword(if) predefined_constant(self)operator(.)ident(_mono)operator(:)
            ident(outfile)operator(.)ident(write)operator(()string<delimiter(')content([/font])delimiter(')>operator(\))
        keyword(if) predefined_constant(self)operator(.)ident(_code)operator(:)
            ident(outfile)operator(.)ident(write)operator(()string<delimiter(')content([/code])delimiter(')>operator(\))
        keyword(if) predefined_constant(self)operator(.)ident(_code) keyword(or) predefined_constant(self)operator(.)ident(_mono)operator(:)
            ident(outfile)operator(.)ident(write)operator(()string<delimiter(')char(\\n)delimiter(')>operator(\))
comment(# -*- coding: utf-8 -*-)
docstring<delimiter(""")content(
)content(    pygments.formatters.html)content(
)content(    ~~~~~~~~~~~~~~~~~~~~~~~~)content(
)content(
)content(    Formatter for HTML output.)content(
)content(
)content(    :copyright: Copyright 2006-2009 by the Pygments team, see AUTHORS.)content(
)content(    :license: BSD, see LICENSE for details.)content(
)delimiter(""")>
keyword(import) include(sys)operator(,) include(os)
keyword(import) include(StringIO)

keyword(try)operator(:)
    predefined(set)
keyword(except) exception(NameError)operator(:)
    keyword(from) include(sets) keyword(import) include(Set) keyword(as) ident(set)

keyword(from) include(pygments.formatter) keyword(import) include(Formatter)
keyword(from) include(pygments.token) keyword(import) include(Token)operator(,) include(Text)operator(,) include(STANDARD_TYPES)
keyword(from) include(pygments.util) keyword(import) include(get_bool_opt)operator(,) include(get_int_opt)operator(,) include(get_list_opt)operator(,) include(bytes)


ident(__all__) operator(=) operator([)string<delimiter(')content(HtmlFormatter)delimiter(')>operator(])


keyword(def) method(escape_html)operator(()ident(text)operator(\))operator(:)
    docstring<delimiter(""")content(Escape &, <, > as well as single and double quotes for HTML.)delimiter(""")>
    keyword(return) ident(text)operator(.)ident(replace)operator(()string<delimiter(')content(&)delimiter(')>operator(,) string<delimiter(')content(&amp;)delimiter(')>operator(\))operator(.)  \
                ident(replace)operator(()string<delimiter(')content(<)delimiter(')>operator(,) string<delimiter(')content(&lt;)delimiter(')>operator(\))operator(.)   \
                ident(replace)operator(()string<delimiter(')content(>)delimiter(')>operator(,) string<delimiter(')content(&gt;)delimiter(')>operator(\))operator(.)   \
                ident(replace)operator(()string<delimiter(')content(")delimiter(')>operator(,) string<delimiter(')content(&quot;)delimiter(')>operator(\))operator(.) \
                ident(replace)operator(()string<delimiter(")content(')delimiter(")>operator(,) string<delimiter(')content(&#39;)delimiter(')>operator(\))


keyword(def) method(get_random_id)operator(()operator(\))operator(:)
    docstring<delimiter(""")content(Return a random id for javascript fields.)delimiter(""")>
    keyword(from) include(random) keyword(import) include(random)
    keyword(from) include(time) keyword(import) include(time)
    keyword(try)operator(:)
        keyword(from) include(hashlib) keyword(import) include(sha1) keyword(as) ident(sha)
    keyword(except) exception(ImportError)operator(:)
        keyword(import) include(sha)
        ident(sha) operator(=) ident(sha)operator(.)ident(new)
    keyword(return) ident(sha)operator(()string<delimiter(')content(%s|%s)delimiter(')> operator(%) operator(()ident(random)operator(()operator(\))operator(,) ident(time)operator(()operator(\))operator(\))operator(\))operator(.)ident(hexdigest)operator(()operator(\))


keyword(def) method(_get_ttype_class)operator(()ident(ttype)operator(\))operator(:)
    ident(fname) operator(=) ident(STANDARD_TYPES)operator(.)ident(get)operator(()ident(ttype)operator(\))
    keyword(if) ident(fname)operator(:)
        keyword(return) ident(fname)
    ident(aname) operator(=) string<delimiter(')delimiter(')>
    keyword(while) ident(fname) keyword(is) predefined_constant(None)operator(:)
        ident(aname) operator(=) string<delimiter(')content(-)delimiter(')> operator(+) ident(ttype)operator([)operator(-)integer(1)operator(]) operator(+) ident(aname)
        ident(ttype) operator(=) ident(ttype)operator(.)ident(parent)
        ident(fname) operator(=) ident(STANDARD_TYPES)operator(.)ident(get)operator(()ident(ttype)operator(\))
    keyword(return) ident(fname) operator(+) ident(aname)


ident(CSSFILE_TEMPLATE) operator(=) string<delimiter(''')char(\\
)content(td.linenos { background-color: #f0f0f0; padding-right: 10px; })content(
)content(span.lineno { background-color: #f0f0f0; padding: 0 5px 0 5px; })content(
)content(pre { line-height: 125%%; })content(
)content(%(styledefs\)s)content(
)delimiter(''')>

ident(DOC_HEADER) operator(=) string<delimiter(''')char(\\
)content(<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN")content(
)content(   "http://www.w3.org/TR/html4/strict.dtd">)content(
)content(
)content(<html>)content(
)content(<head>)content(
)content(  <title>%(title\)s</title>)content(
)content(  <meta http-equiv="content-type" content="text/html; charset=%(encoding\)s">)content(
)content(  <style type="text/css">)content(
)delimiter(''')> operator(+) ident(CSSFILE_TEMPLATE) operator(+) string<delimiter(''')content(
)content(  </style>)content(
)content(</head>)content(
)content(<body>)content(
)content(<h2>%(title\)s</h2>)content(
)content(
)delimiter(''')>

ident(DOC_HEADER_EXTERNALCSS) operator(=) string<delimiter(''')char(\\
)content(<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN")content(
)content(   "http://www.w3.org/TR/html4/strict.dtd">)content(
)content(
)content(<html>)content(
)content(<head>)content(
)content(  <title>%(title\)s</title>)content(
)content(  <meta http-equiv="content-type" content="text/html; charset=%(encoding\)s">)content(
)content(  <link rel="stylesheet" href="%(cssfile\)s" type="text/css">)content(
)content(</head>)content(
)content(<body>)content(
)content(<h2>%(title\)s</h2>)content(
)content(
)delimiter(''')>

ident(DOC_FOOTER) operator(=) string<delimiter(''')char(\\
)content(</body>)content(
)content(</html>)content(
)delimiter(''')>


keyword(class) class(HtmlFormatter)operator(()ident(Formatter)operator(\))operator(:)
    docstring<modifier(r)delimiter(""")content(
)content(    Format tokens as HTML 4 ``<span>`` tags within a ``<pre>`` tag, wrapped)content(
)content(    in a ``<div>`` tag. The ``<div>``'s CSS class can be set by the `cssclass`)content(
)content(    option.)content(
)content(
)content(    If the `linenos` option is set to ``"table"``, the ``<pre>`` is)content(
)content(    additionally wrapped inside a ``<table>`` which has one row and two)content(
)content(    cells: one containing the line numbers and one containing the code.)content(
)content(    Example:)content(
)content(
)content(    .. sourcecode:: html)content(
)content(
)content(        <div class="highlight" >)content(
)content(        <table><tr>)content(
)content(          <td class="linenos" title="click to toggle")content(
)content(            onclick="with (this.firstChild.style\))content(
)content(                     { display = (display == ''\) ? 'none' : '' }">)content(
)content(            <pre>1)content(
)content(            2</pre>)content(
)content(          </td>)content(
)content(          <td class="code">)content(
)content(            <pre><span class="Ke">def </span><span class="NaFu">foo</span>(bar\):)content(
)content(              <span class="Ke">pass</span>)content(
)content(            </pre>)content(
)content(          </td>)content(
)content(        </tr></table></div>)content(
)content(
)content(    (whitespace added to improve clarity\).)content(
)content(
)content(    Wrapping can be disabled using the `nowrap` option.)content(
)content(
)content(    A list of lines can be specified using the `hl_lines` option to make these)content(
)content(    lines highlighted (as of Pygments 0.11\).)content(
)content(
)content(    With the `full` option, a complete HTML 4 document is output, including)content(
)content(    the style definitions inside a ``<style>`` tag, or in a separate file if)content(
)content(    the `cssfile` option is given.)content(
)content(
)content(    The `get_style_defs(arg=''\)` method of a `HtmlFormatter` returns a string)content(
)content(    containing CSS rules for the CSS classes used by the formatter. The)content(
)content(    argument `arg` can be used to specify additional CSS selectors that)content(
)content(    are prepended to the classes. A call `fmter.get_style_defs('td .code'\)`)content(
)content(    would result in the following CSS classes:)content(
)content(
)content(    .. sourcecode:: css)content(
)content(
)content(        td .code .kw { font-weight: bold; color: #00FF00 })content(
)content(        td .code .cm { color: #999999 })content(
)content(        ...)content(
)content(
)content(    If you have Pygments 0.6 or higher, you can also pass a list or tuple to the)content(
)content(    `get_style_defs(\)` method to request multiple prefixes for the tokens:)content(
)content(
)content(    .. sourcecode:: python)content(
)content(
)content(        formatter.get_style_defs(['div.syntax pre', 'pre.syntax']\))content(
)content(
)content(    The output would then look like this:)content(
)content(
)content(    .. sourcecode:: css)content(
)content(
)content(        div.syntax pre .kw,)content(
)content(        pre.syntax .kw { font-weight: bold; color: #00FF00 })content(
)content(        div.syntax pre .cm,)content(
)content(        pre.syntax .cm { color: #999999 })content(
)content(        ...)content(
)content(
)content(    Additional options accepted:)content(
)content(
)content(    `nowrap`)content(
)content(        If set to ``True``, don't wrap the tokens at all, not even inside a ``<pre>``)content(
)content(        tag. This disables most other options (default: ``False``\).)content(
)content(
)content(    `full`)content(
)content(        Tells the formatter to output a "full" document, i.e. a complete)content(
)content(        self-contained document (default: ``False``\).)content(
)content(
)content(    `title`)content(
)content(        If `full` is true, the title that should be used to caption the)content(
)content(        document (default: ``''``\).)content(
)content(
)content(    `style`)content(
)content(        The style to use, can be a string or a Style subclass (default:)content(
)content(        ``'default'``\). This option has no effect if the `cssfile`)content(
)content(        and `noclobber_cssfile` option are given and the file specified in)content(
)content(        `cssfile` exists.)content(
)content(
)content(    `noclasses`)content(
)content(        If set to true, token ``<span>`` tags will not use CSS classes, but)content(
)content(        inline styles. This is not recommended for larger pieces of code since)content(
)content(        it increases output size by quite a bit (default: ``False``\).)content(
)content(
)content(    `classprefix`)content(
)content(        Since the token types use relatively short class names, they may clash)content(
)content(        with some of your own class names. In this case you can use the)content(
)content(        `classprefix` option to give a string to prepend to all Pygments-generated)content(
)content(        CSS class names for token types.)content(
)content(        Note that this option also affects the output of `get_style_defs(\)`.)content(
)content(
)content(    `cssclass`)content(
)content(        CSS class for the wrapping ``<div>`` tag (default: ``'highlight'``\).)content(
)content(        If you set this option, the default selector for `get_style_defs(\)`)content(
)content(        will be this class.)content(
)content(
)content(        *New in Pygments 0.9:* If you select the ``'table'`` line numbers, the)content(
)content(        wrapping table will have a CSS class of this string plus ``'table'``,)content(
)content(        the default is accordingly ``'highlighttable'``.)content(
)content(
)content(    `cssstyles`)content(
)content(        Inline CSS styles for the wrapping ``<div>`` tag (default: ``''``\).)content(
)content(
)content(    `prestyles`)content(
)content(        Inline CSS styles for the ``<pre>`` tag (default: ``''``\).  *New in)content(
)content(        Pygments 0.11.*)content(
)content(
)content(    `cssfile`)content(
)content(        If the `full` option is true and this option is given, it must be the)content(
)content(        name of an external file. If the filename does not include an absolute)content(
)content(        path, the file's path will be assumed to be relative to the main output)content(
)content(        file's path, if the latter can be found. The stylesheet is then written)content(
)content(        to this file instead of the HTML file. *New in Pygments 0.6.*)content(
)content(
)content(    `noclobber_cssfile')content(
)content(        If `cssfile` is given and the specified file exists, the css file will)content(
)content(        not be overwritten. This allows the use of the `full` option in)content(
)content(        combination with a user specified css file. Default is ``False``.)content(
)content(        *New in Pygments 1.1.*)content(
)content(
)content(    `linenos`)content(
)content(        If set to ``'table'``, output line numbers as a table with two cells,)content(
)content(        one containing the line numbers, the other the whole code.  This is)content(
)content(        copy-and-paste-friendly, but may cause alignment problems with some)content(
)content(        browsers or fonts.  If set to ``'inline'``, the line numbers will be)content(
)content(        integrated in the ``<pre>`` tag that contains the code (that setting)content(
)content(        is *new in Pygments 0.8*\).)content(
)content(
)content(        For compatibility with Pygments 0.7 and earlier, every true value)content(
)content(        except ``'inline'`` means the same as ``'table'`` (in particular, that)content(
)content(        means also ``True``\).)content(
)content(
)content(        The default value is ``False``, which means no line numbers at all.)content(
)content(
)content(        **Note:** with the default ("table"\) line number mechanism, the line)content(
)content(        numbers and code can have different line heights in Internet Explorer)content(
)content(        unless you give the enclosing ``<pre>`` tags an explicit ``line-height``)content(
)content(        CSS property (you get the default line spacing with ``line-height:)content(
)content(        125%``\).)content(
)content(
)content(    `hl_lines`)content(
)content(        Specify a list of lines to be highlighted.  *New in Pygments 0.11.*)content(
)content(
)content(    `linenostart`)content(
)content(        The line number for the first line (default: ``1``\).)content(
)content(
)content(    `linenostep`)content(
)content(        If set to a number n > 1, only every nth line number is printed.)content(
)content(
)content(    `linenospecial`)content(
)content(        If set to a number n > 0, every nth line number is given the CSS)content(
)content(        class ``"special"`` (default: ``0``\).)content(
)content(
)content(    `nobackground`)content(
)content(        If set to ``True``, the formatter won't output the background color)content(
)content(        for the wrapping element (this automatically defaults to ``False``)content(
)content(        when there is no wrapping element [eg: no argument for the)content(
)content(        `get_syntax_defs` method given]\) (default: ``False``\). *New in)content(
)content(        Pygments 0.6.*)content(
)content(
)content(    `lineseparator`)content(
)content(        This string is output between lines of code. It defaults to ``")content(\\n)content("``,)content(
)content(        which is enough to break a line inside ``<pre>`` tags, but you can)content(
)content(        e.g. set it to ``"<br>"`` to get HTML line breaks. *New in Pygments)content(
)content(        0.7.*)content(
)content(
)content(    `lineanchors`)content(
)content(        If set to a nonempty string, e.g. ``foo``, the formatter will wrap each)content(
)content(        output line in an anchor tag with a ``name`` of ``foo-linenumber``.)content(
)content(        This allows easy linking to certain lines. *New in Pygments 0.9.*)content(
)content(
)content(    `anchorlinenos`)content(
)content(        If set to `True`, will wrap line numbers in <a> tags. Used in)content(
)content(        combination with `linenos` and `lineanchors`.)content(
)content(
)content(
)content(    **Subclassing the HTML formatter**)content(
)content(
)content(    *New in Pygments 0.7.*)content(
)content(
)content(    The HTML formatter is now built in a way that allows easy subclassing, thus)content(
)content(    customizing the output HTML code. The `format(\)` method calls)content(
)content(    `self._format_lines(\)` which returns a generator that yields tuples of ``(1,)content(
)content(    line\)``, where the ``1`` indicates that the ``line`` is a line of the)content(
)content(    formatted source code.)content(
)content(
)content(    If the `nowrap` option is set, the generator is the iterated over and the)content(
)content(    resulting HTML is output.)content(
)content(
)content(    Otherwise, `format(\)` calls `self.wrap(\)`, which wraps the generator with)content(
)content(    other generators. These may add some HTML code to the one generated by)content(
)content(    `_format_lines(\)`, either by modifying the lines generated by the latter,)content(
)content(    then yielding them again with ``(1, line\)``, and/or by yielding other HTML)content(
)content(    code before or after the lines, with ``(0, html\)``. The distinction between)content(
)content(    source lines and other code makes it possible to wrap the generator multiple)content(
)content(    times.)content(
)content(
)content(    The default `wrap(\)` implementation adds a ``<div>`` and a ``<pre>`` tag.)content(
)content(
)content(    A custom `HtmlFormatter` subclass could look like this:)content(
)content(
)content(    .. sourcecode:: python)content(
)content(
)content(        class CodeHtmlFormatter(HtmlFormatter\):)content(
)content(
)content(            def wrap(self, source, outfile\):)content(
)content(                return self._wrap_code(source\))content(
)content(
)content(            def _wrap_code(self, source\):)content(
)content(                yield 0, '<code>')content(
)content(                for i, t in source:)content(
)content(                    if i == 1:)content(
)content(                        # it's a line of formatted code)content(
)content(                        t += '<br>')content(
)content(                    yield i, t)content(
)content(                yield 0, '</code>')content(
)content(
)content(    This results in wrapping the formatted lines with a ``<code>`` tag, where the)content(
)content(    source lines are broken using ``<br>`` tags.)content(
)content(
)content(    After calling `wrap(\)`, the `format(\)` method also adds the "line numbers")content(
)content(    and/or "full document" wrappers if the respective options are set. Then, all)content(
)content(    HTML yielded by the wrapped generator is output.)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(HTML)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(html)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.html)delimiter(')>operator(,) string<delimiter(')content(*.htm)delimiter(')>operator(])

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))operator(:)
        ident(Formatter)operator(.)ident(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))
        predefined_constant(self)operator(.)ident(title) operator(=) predefined_constant(self)operator(.)ident(_decodeifneeded)operator(()predefined_constant(self)operator(.)ident(title)operator(\))
        predefined_constant(self)operator(.)ident(nowrap) operator(=) ident(get_bool_opt)operator(()ident(options)operator(,) string<delimiter(')content(nowrap)delimiter(')>operator(,) predefined_constant(False)operator(\))
        predefined_constant(self)operator(.)ident(noclasses) operator(=) ident(get_bool_opt)operator(()ident(options)operator(,) string<delimiter(')content(noclasses)delimiter(')>operator(,) predefined_constant(False)operator(\))
        predefined_constant(self)operator(.)ident(classprefix) operator(=) ident(options)operator(.)ident(get)operator(()string<delimiter(')content(classprefix)delimiter(')>operator(,) string<delimiter(')delimiter(')>operator(\))
        predefined_constant(self)operator(.)ident(cssclass) operator(=) predefined_constant(self)operator(.)ident(_decodeifneeded)operator(()ident(options)operator(.)ident(get)operator(()string<delimiter(')content(cssclass)delimiter(')>operator(,) string<delimiter(')content(highlight)delimiter(')>operator(\))operator(\))
        predefined_constant(self)operator(.)ident(cssstyles) operator(=) predefined_constant(self)operator(.)ident(_decodeifneeded)operator(()ident(options)operator(.)ident(get)operator(()string<delimiter(')content(cssstyles)delimiter(')>operator(,) string<delimiter(')delimiter(')>operator(\))operator(\))
        predefined_constant(self)operator(.)ident(prestyles) operator(=) predefined_constant(self)operator(.)ident(_decodeifneeded)operator(()ident(options)operator(.)ident(get)operator(()string<delimiter(')content(prestyles)delimiter(')>operator(,) string<delimiter(')delimiter(')>operator(\))operator(\))
        predefined_constant(self)operator(.)ident(cssfile) operator(=) predefined_constant(self)operator(.)ident(_decodeifneeded)operator(()ident(options)operator(.)ident(get)operator(()string<delimiter(')content(cssfile)delimiter(')>operator(,) string<delimiter(')delimiter(')>operator(\))operator(\))
        predefined_constant(self)operator(.)ident(noclobber_cssfile) operator(=) ident(get_bool_opt)operator(()ident(options)operator(,) string<delimiter(')content(noclobber_cssfile)delimiter(')>operator(,) predefined_constant(False)operator(\))

        ident(linenos) operator(=) ident(options)operator(.)ident(get)operator(()string<delimiter(')content(linenos)delimiter(')>operator(,) predefined_constant(False)operator(\))
        keyword(if) ident(linenos) operator(==) string<delimiter(')content(inline)delimiter(')>operator(:)
            predefined_constant(self)operator(.)ident(linenos) operator(=) integer(2)
        keyword(elif) ident(linenos)operator(:)
            comment(# compatibility with <= 0.7)
            predefined_constant(self)operator(.)ident(linenos) operator(=) integer(1)
        keyword(else)operator(:)
            predefined_constant(self)operator(.)ident(linenos) operator(=) integer(0)
        predefined_constant(self)operator(.)ident(linenostart) operator(=) predefined(abs)operator(()ident(get_int_opt)operator(()ident(options)operator(,) string<delimiter(')content(linenostart)delimiter(')>operator(,) integer(1)operator(\))operator(\))
        predefined_constant(self)operator(.)ident(linenostep) operator(=) predefined(abs)operator(()ident(get_int_opt)operator(()ident(options)operator(,) string<delimiter(')content(linenostep)delimiter(')>operator(,) integer(1)operator(\))operator(\))
        predefined_constant(self)operator(.)ident(linenospecial) operator(=) predefined(abs)operator(()ident(get_int_opt)operator(()ident(options)operator(,) string<delimiter(')content(linenospecial)delimiter(')>operator(,) integer(0)operator(\))operator(\))
        predefined_constant(self)operator(.)ident(nobackground) operator(=) ident(get_bool_opt)operator(()ident(options)operator(,) string<delimiter(')content(nobackground)delimiter(')>operator(,) predefined_constant(False)operator(\))
        predefined_constant(self)operator(.)ident(lineseparator) operator(=) ident(options)operator(.)ident(get)operator(()string<delimiter(')content(lineseparator)delimiter(')>operator(,) string<delimiter(')char(\\n)delimiter(')>operator(\))
        predefined_constant(self)operator(.)ident(lineanchors) operator(=) ident(options)operator(.)ident(get)operator(()string<delimiter(')content(lineanchors)delimiter(')>operator(,) string<delimiter(')delimiter(')>operator(\))
        predefined_constant(self)operator(.)ident(anchorlinenos) operator(=) ident(options)operator(.)ident(get)operator(()string<delimiter(')content(anchorlinenos)delimiter(')>operator(,) predefined_constant(False)operator(\))
        predefined_constant(self)operator(.)ident(hl_lines) operator(=) predefined(set)operator(()operator(\))
        keyword(for) ident(lineno) keyword(in) ident(get_list_opt)operator(()ident(options)operator(,) string<delimiter(')content(hl_lines)delimiter(')>operator(,) operator([)operator(])operator(\))operator(:)
            keyword(try)operator(:)
                predefined_constant(self)operator(.)ident(hl_lines)operator(.)ident(add)operator(()predefined(int)operator(()ident(lineno)operator(\))operator(\))
            keyword(except) exception(ValueError)operator(:)
                keyword(pass)

        predefined_constant(self)operator(.)ident(_class_cache) operator(=) operator({)operator(})
        predefined_constant(self)operator(.)ident(_create_stylesheet)operator(()operator(\))

    keyword(def) method(_get_css_class)operator(()predefined_constant(self)operator(,) ident(ttype)operator(\))operator(:)
        docstring<delimiter(""")content(Return the css class of this token type prefixed with)content(
)content(        the classprefix option.)delimiter(""")>
        keyword(if) ident(ttype) keyword(in) predefined_constant(self)operator(.)ident(_class_cache)operator(:)
            keyword(return) predefined_constant(self)operator(.)ident(_class_cache)operator([)ident(ttype)operator(])
        keyword(return) predefined_constant(self)operator(.)ident(classprefix) operator(+) ident(_get_ttype_class)operator(()ident(ttype)operator(\))

    keyword(def) method(_create_stylesheet)operator(()predefined_constant(self)operator(\))operator(:)
        ident(t2c) operator(=) predefined_constant(self)operator(.)ident(ttype2class) operator(=) operator({)ident(Token)operator(:) string<delimiter(')delimiter(')>operator(})
        ident(c2s) operator(=) predefined_constant(self)operator(.)ident(class2style) operator(=) operator({)operator(})
        ident(cp) operator(=) predefined_constant(self)operator(.)ident(classprefix)
        keyword(for) ident(ttype)operator(,) ident(ndef) keyword(in) predefined_constant(self)operator(.)ident(style)operator(:)
            ident(name) operator(=) ident(cp) operator(+) ident(_get_ttype_class)operator(()ident(ttype)operator(\))
            ident(style) operator(=) string<delimiter(')delimiter(')>
            keyword(if) ident(ndef)operator([)string<delimiter(')content(color)delimiter(')>operator(])operator(:)
                ident(style) operator(+=) string<delimiter(')content(color: #%s; )delimiter(')> operator(%) ident(ndef)operator([)string<delimiter(')content(color)delimiter(')>operator(])
            keyword(if) ident(ndef)operator([)string<delimiter(')content(bold)delimiter(')>operator(])operator(:)
                ident(style) operator(+=) string<delimiter(')content(font-weight: bold; )delimiter(')>
            keyword(if) ident(ndef)operator([)string<delimiter(')content(italic)delimiter(')>operator(])operator(:)
                ident(style) operator(+=) string<delimiter(')content(font-style: italic; )delimiter(')>
            keyword(if) ident(ndef)operator([)string<delimiter(')content(underline)delimiter(')>operator(])operator(:)
                ident(style) operator(+=) string<delimiter(')content(text-decoration: underline; )delimiter(')>
            keyword(if) ident(ndef)operator([)string<delimiter(')content(bgcolor)delimiter(')>operator(])operator(:)
                ident(style) operator(+=) string<delimiter(')content(background-color: #%s; )delimiter(')> operator(%) ident(ndef)operator([)string<delimiter(')content(bgcolor)delimiter(')>operator(])
            keyword(if) ident(ndef)operator([)string<delimiter(')content(border)delimiter(')>operator(])operator(:)
                ident(style) operator(+=) string<delimiter(')content(border: 1px solid #%s; )delimiter(')> operator(%) ident(ndef)operator([)string<delimiter(')content(border)delimiter(')>operator(])
            keyword(if) ident(style)operator(:)
                ident(t2c)operator([)ident(ttype)operator(]) operator(=) ident(name)
                comment(# save len(ttype\) to enable ordering the styles by)
                comment(# hierarchy (necessary for CSS cascading rules!\))
                ident(c2s)operator([)ident(name)operator(]) operator(=) operator(()ident(style)operator([)operator(:)operator(-)integer(2)operator(])operator(,) ident(ttype)operator(,) predefined(len)operator(()ident(ttype)operator(\))operator(\))

    keyword(def) method(get_style_defs)operator(()predefined_constant(self)operator(,) ident(arg)operator(=)predefined_constant(None)operator(\))operator(:)
        docstring<delimiter(""")content(
)content(        Return CSS style definitions for the classes produced by the current)content(
)content(        highlighting style. ``arg`` can be a string or list of selectors to)content(
)content(        insert before the token type classes.)content(
)content(        )delimiter(""")>
        keyword(if) ident(arg) keyword(is) predefined_constant(None)operator(:)
            ident(arg) operator(=) operator(()string<delimiter(')content(cssclass)delimiter(')> keyword(in) predefined_constant(self)operator(.)ident(options) keyword(and) string<delimiter(')content(.)delimiter(')>operator(+)predefined_constant(self)operator(.)ident(cssclass) keyword(or) string<delimiter(')delimiter(')>operator(\))
        keyword(if) predefined(isinstance)operator(()ident(arg)operator(,) predefined(basestring)operator(\))operator(:)
            ident(args) operator(=) operator([)ident(arg)operator(])
        keyword(else)operator(:)
            ident(args) operator(=) predefined(list)operator(()ident(arg)operator(\))

        keyword(def) method(prefix)operator(()ident(cls)operator(\))operator(:)
            keyword(if) ident(cls)operator(:)
                ident(cls) operator(=) string<delimiter(')content(.)delimiter(')> operator(+) ident(cls)
            ident(tmp) operator(=) operator([)operator(])
            keyword(for) ident(arg) keyword(in) ident(args)operator(:)
                ident(tmp)operator(.)ident(append)operator(()operator(()ident(arg) keyword(and) ident(arg) operator(+) string<delimiter(')content( )delimiter(')> keyword(or) string<delimiter(')delimiter(')>operator(\)) operator(+) ident(cls)operator(\))
            keyword(return) string<delimiter(')content(, )delimiter(')>operator(.)ident(join)operator(()ident(tmp)operator(\))

        ident(styles) operator(=) operator([)operator(()ident(level)operator(,) ident(ttype)operator(,) ident(cls)operator(,) ident(style)operator(\))
                  keyword(for) ident(cls)operator(,) operator(()ident(style)operator(,) ident(ttype)operator(,) ident(level)operator(\)) keyword(in) predefined_constant(self)operator(.)ident(class2style)operator(.)ident(iteritems)operator(()operator(\))
                  keyword(if) ident(cls) keyword(and) ident(style)operator(])
        ident(styles)operator(.)ident(sort)operator(()operator(\))
        ident(lines) operator(=) operator([)string<delimiter(')content(%s { %s } /* %s */)delimiter(')> operator(%) operator(()ident(prefix)operator(()ident(cls)operator(\))operator(,) ident(style)operator(,) predefined(repr)operator(()ident(ttype)operator(\))operator([)integer(6)operator(:)operator(])operator(\))
                 keyword(for) operator(()ident(level)operator(,) ident(ttype)operator(,) ident(cls)operator(,) ident(style)operator(\)) keyword(in) ident(styles)operator(])
        keyword(if) ident(arg) keyword(and) keyword(not) predefined_constant(self)operator(.)ident(nobackground) keyword(and) \
           predefined_constant(self)operator(.)ident(style)operator(.)ident(background_color) keyword(is) keyword(not) predefined_constant(None)operator(:)
            ident(text_style) operator(=) string<delimiter(')delimiter(')>
            keyword(if) ident(Text) keyword(in) predefined_constant(self)operator(.)ident(ttype2class)operator(:)
                ident(text_style) operator(=) string<delimiter(')content( )delimiter(')> operator(+) predefined_constant(self)operator(.)ident(class2style)operator([)predefined_constant(self)operator(.)ident(ttype2class)operator([)ident(Text)operator(])operator(])operator([)integer(0)operator(])
            ident(lines)operator(.)ident(insert)operator(()integer(0)operator(,) string<delimiter(')content(%s { background: %s;%s })delimiter(')> operator(%)
                         operator(()ident(prefix)operator(()string<delimiter(')delimiter(')>operator(\))operator(,) predefined_constant(self)operator(.)ident(style)operator(.)ident(background_color)operator(,) ident(text_style)operator(\))operator(\))
        keyword(if) predefined_constant(self)operator(.)ident(style)operator(.)ident(highlight_color) keyword(is) keyword(not) predefined_constant(None)operator(:)
            ident(lines)operator(.)ident(insert)operator(()integer(0)operator(,) string<delimiter(')content(%s.hll { background-color: %s })delimiter(')> operator(%)
                         operator(()ident(prefix)operator(()string<delimiter(')delimiter(')>operator(\))operator(,) predefined_constant(self)operator(.)ident(style)operator(.)ident(highlight_color)operator(\))operator(\))
        keyword(return) string<delimiter(')char(\\n)delimiter(')>operator(.)ident(join)operator(()ident(lines)operator(\))

    keyword(def) method(_decodeifneeded)operator(()predefined_constant(self)operator(,) ident(value)operator(\))operator(:)
        keyword(if) predefined(isinstance)operator(()ident(value)operator(,) predefined(bytes)operator(\))operator(:)
            keyword(if) predefined_constant(self)operator(.)ident(encoding)operator(:)
                keyword(return) ident(value)operator(.)ident(decode)operator(()predefined_constant(self)operator(.)ident(encoding)operator(\))
            keyword(return) ident(value)operator(.)ident(decode)operator(()operator(\))
        keyword(return) ident(value)

    keyword(def) method(_wrap_full)operator(()predefined_constant(self)operator(,) ident(inner)operator(,) ident(outfile)operator(\))operator(:)
        keyword(if) predefined_constant(self)operator(.)ident(cssfile)operator(:)
            keyword(if) ident(os)operator(.)ident(path)operator(.)ident(isabs)operator(()predefined_constant(self)operator(.)ident(cssfile)operator(\))operator(:)
                comment(# it's an absolute filename)
                ident(cssfilename) operator(=) predefined_constant(self)operator(.)ident(cssfile)
            keyword(else)operator(:)
                keyword(try)operator(:)
                    ident(filename) operator(=) ident(outfile)operator(.)ident(name)
                    keyword(if) keyword(not) ident(filename) keyword(or) ident(filename)operator([)integer(0)operator(]) operator(==) string<delimiter(')content(<)delimiter(')>operator(:)
                        comment(# pseudo files, e.g. name == '<fdopen>')
                        keyword(raise) exception(AttributeError)
                    ident(cssfilename) operator(=) ident(os)operator(.)ident(path)operator(.)ident(join)operator(()ident(os)operator(.)ident(path)operator(.)ident(dirname)operator(()ident(filename)operator(\))operator(,)
                                               predefined_constant(self)operator(.)ident(cssfile)operator(\))
                keyword(except) exception(AttributeError)operator(:)
                    keyword(print) operator(>>)ident(sys)operator(.)ident(stderr)operator(,) string<delimiter(')content(Note: Cannot determine output file name, )delimiter(')> \
                          string<delimiter(')content(using current directory as base for the CSS file name)delimiter(')>
                    ident(cssfilename) operator(=) predefined_constant(self)operator(.)ident(cssfile)
            comment(# write CSS file only if noclobber_cssfile isn't given as an option.)
            keyword(try)operator(:)
                keyword(if) keyword(not) ident(os)operator(.)ident(path)operator(.)ident(exists)operator(()ident(cssfilename)operator(\)) keyword(or) keyword(not) predefined_constant(self)operator(.)ident(noclobber_cssfile)operator(:)
                    ident(cf) operator(=) predefined(open)operator(()ident(cssfilename)operator(,) string<delimiter(")content(w)delimiter(")>operator(\))
                    ident(cf)operator(.)ident(write)operator(()ident(CSSFILE_TEMPLATE) operator(%)
                            operator({)string<delimiter(')content(styledefs)delimiter(')>operator(:) predefined_constant(self)operator(.)ident(get_style_defs)operator(()string<delimiter(')content(body)delimiter(')>operator(\))operator(})operator(\))
                    ident(cf)operator(.)ident(close)operator(()operator(\))
            keyword(except) exception(IOError)operator(,) ident(err)operator(:)
                ident(err)operator(.)ident(strerror) operator(=) string<delimiter(')content(Error writing CSS file: )delimiter(')> operator(+) ident(err)operator(.)ident(strerror)
                keyword(raise)

            keyword(yield) integer(0)operator(,) operator(()ident(DOC_HEADER_EXTERNALCSS) operator(%)
                      predefined(dict)operator(()ident(title)     operator(=) predefined_constant(self)operator(.)ident(title)operator(,)
                           ident(cssfile)   operator(=) predefined_constant(self)operator(.)ident(cssfile)operator(,)
                           ident(encoding)  operator(=) predefined_constant(self)operator(.)ident(encoding)operator(\))operator(\))
        keyword(else)operator(:)
            keyword(yield) integer(0)operator(,) operator(()ident(DOC_HEADER) operator(%)
                      predefined(dict)operator(()ident(title)     operator(=) predefined_constant(self)operator(.)ident(title)operator(,)
                           ident(styledefs) operator(=) predefined_constant(self)operator(.)ident(get_style_defs)operator(()string<delimiter(')content(body)delimiter(')>operator(\))operator(,)
                           ident(encoding)  operator(=) predefined_constant(self)operator(.)ident(encoding)operator(\))operator(\))

        keyword(for) ident(t)operator(,) ident(line) keyword(in) ident(inner)operator(:)
            keyword(yield) ident(t)operator(,) ident(line)
        keyword(yield) integer(0)operator(,) ident(DOC_FOOTER)

    keyword(def) method(_wrap_tablelinenos)operator(()predefined_constant(self)operator(,) ident(inner)operator(\))operator(:)
        ident(dummyoutfile) operator(=) ident(StringIO)operator(.)ident(StringIO)operator(()operator(\))
        ident(lncount) operator(=) integer(0)
        keyword(for) ident(t)operator(,) ident(line) keyword(in) ident(inner)operator(:)
            keyword(if) ident(t)operator(:)
                ident(lncount) operator(+=) integer(1)
            ident(dummyoutfile)operator(.)ident(write)operator(()ident(line)operator(\))

        ident(fl) operator(=) predefined_constant(self)operator(.)ident(linenostart)
        ident(mw) operator(=) predefined(len)operator(()predefined(str)operator(()ident(lncount) operator(+) ident(fl) operator(-) integer(1)operator(\))operator(\))
        ident(sp) operator(=) predefined_constant(self)operator(.)ident(linenospecial)
        ident(st) operator(=) predefined_constant(self)operator(.)ident(linenostep)
        ident(la) operator(=) predefined_constant(self)operator(.)ident(lineanchors)
        ident(aln) operator(=) predefined_constant(self)operator(.)ident(anchorlinenos)
        keyword(if) ident(sp)operator(:)
            ident(lines) operator(=) operator([)operator(])

            keyword(for) ident(i) keyword(in) predefined(range)operator(()ident(fl)operator(,) ident(fl)operator(+)ident(lncount)operator(\))operator(:)
                keyword(if) ident(i) operator(%) ident(st) operator(==) integer(0)operator(:)
                    keyword(if) ident(i) operator(%) ident(sp) operator(==) integer(0)operator(:)
                        keyword(if) ident(aln)operator(:)
                            ident(lines)operator(.)ident(append)operator(()string<delimiter(')content(<a href="#%s-%d" class="special">%*d</a>)delimiter(')> operator(%)
                                         operator(()ident(la)operator(,) ident(i)operator(,) ident(mw)operator(,) ident(i)operator(\))operator(\))
                        keyword(else)operator(:)
                            ident(lines)operator(.)ident(append)operator(()string<delimiter(')content(<span class="special">%*d</span>)delimiter(')> operator(%) operator(()ident(mw)operator(,) ident(i)operator(\))operator(\))
                    keyword(else)operator(:)
                        keyword(if) ident(aln)operator(:)
                            ident(lines)operator(.)ident(append)operator(()string<delimiter(')content(<a href="#%s-%d">%*d</a>)delimiter(')> operator(%) operator(()ident(la)operator(,) ident(i)operator(,) ident(mw)operator(,) ident(i)operator(\))operator(\))
                        keyword(else)operator(:)
                            ident(lines)operator(.)ident(append)operator(()string<delimiter(')content(%*d)delimiter(')> operator(%) operator(()ident(mw)operator(,) ident(i)operator(\))operator(\))
                keyword(else)operator(:)
                    ident(lines)operator(.)ident(append)operator(()string<delimiter(')delimiter(')>operator(\))
            ident(ls) operator(=) string<delimiter(')char(\\n)delimiter(')>operator(.)ident(join)operator(()ident(lines)operator(\))
        keyword(else)operator(:)
            ident(lines) operator(=) operator([)operator(])
            keyword(for) ident(i) keyword(in) predefined(range)operator(()ident(fl)operator(,) ident(fl)operator(+)ident(lncount)operator(\))operator(:)
                keyword(if) ident(i) operator(%) ident(st) operator(==) integer(0)operator(:)
                    keyword(if) ident(aln)operator(:)
                        ident(lines)operator(.)ident(append)operator(()string<delimiter(')content(<a href="#%s-%d">%*d</a>)delimiter(')> operator(%) operator(()ident(la)operator(,) ident(i)operator(,) ident(mw)operator(,) ident(i)operator(\))operator(\))
                    keyword(else)operator(:)
                        ident(lines)operator(.)ident(append)operator(()string<delimiter(')content(%*d)delimiter(')> operator(%) operator(()ident(mw)operator(,) ident(i)operator(\))operator(\))
                keyword(else)operator(:)
                    ident(lines)operator(.)ident(append)operator(()string<delimiter(')delimiter(')>operator(\))
            ident(ls) operator(=) string<delimiter(')char(\\n)delimiter(')>operator(.)ident(join)operator(()ident(lines)operator(\))

        comment(# in case you wonder about the seemingly redundant <div> here: since the)
        comment(# content in the other cell also is wrapped in a div, some browsers in)
        comment(# some configurations seem to mess up the formatting...)
        keyword(yield) integer(0)operator(,) operator(()string<delimiter(')content(<table class="%stable">)delimiter(')> operator(%) predefined_constant(self)operator(.)ident(cssclass) operator(+)
                  string<delimiter(')content(<tr><td class="linenos"><div class="linenodiv"><pre>)delimiter(')> operator(+)
                  ident(ls) operator(+) string<delimiter(')content(</pre></div></td><td class="code">)delimiter(')>operator(\))
        keyword(yield) integer(0)operator(,) ident(dummyoutfile)operator(.)ident(getvalue)operator(()operator(\))
        keyword(yield) integer(0)operator(,) string<delimiter(')content(</td></tr></table>)delimiter(')>

    keyword(def) method(_wrap_inlinelinenos)operator(()predefined_constant(self)operator(,) ident(inner)operator(\))operator(:)
        comment(# need a list of lines since we need the width of a single number :()
        ident(lines) operator(=) predefined(list)operator(()ident(inner)operator(\))
        ident(sp) operator(=) predefined_constant(self)operator(.)ident(linenospecial)
        ident(st) operator(=) predefined_constant(self)operator(.)ident(linenostep)
        ident(num) operator(=) predefined_constant(self)operator(.)ident(linenostart)
        ident(mw) operator(=) predefined(len)operator(()predefined(str)operator(()predefined(len)operator(()ident(lines)operator(\)) operator(+) ident(num) operator(-) integer(1)operator(\))operator(\))

        keyword(if) ident(sp)operator(:)
            keyword(for) ident(t)operator(,) ident(line) keyword(in) ident(lines)operator(:)
                keyword(yield) integer(1)operator(,) string<delimiter(')content(<span class="lineno%s">%*s</span> )delimiter(')> operator(%) operator(()
                    ident(num)operator(%)ident(sp) operator(==) integer(0) keyword(and) string<delimiter(')content( special)delimiter(')> keyword(or) string<delimiter(')delimiter(')>operator(,) ident(mw)operator(,)
                    operator(()ident(num)operator(%)ident(st) keyword(and) string<delimiter(')content( )delimiter(')> keyword(or) ident(num)operator(\))operator(\)) operator(+) ident(line)
                ident(num) operator(+=) integer(1)
        keyword(else)operator(:)
            keyword(for) ident(t)operator(,) ident(line) keyword(in) ident(lines)operator(:)
                keyword(yield) integer(1)operator(,) string<delimiter(')content(<span class="lineno">%*s</span> )delimiter(')> operator(%) operator(()
                    ident(mw)operator(,) operator(()ident(num)operator(%)ident(st) keyword(and) string<delimiter(')content( )delimiter(')> keyword(or) ident(num)operator(\))operator(\)) operator(+) ident(line)
                ident(num) operator(+=) integer(1)

    keyword(def) method(_wrap_lineanchors)operator(()predefined_constant(self)operator(,) ident(inner)operator(\))operator(:)
        ident(s) operator(=) predefined_constant(self)operator(.)ident(lineanchors)
        ident(i) operator(=) integer(0)
        keyword(for) ident(t)operator(,) ident(line) keyword(in) ident(inner)operator(:)
            keyword(if) ident(t)operator(:)
                ident(i) operator(+=) integer(1)
                keyword(yield) integer(1)operator(,) string<delimiter(')content(<a name="%s-%d"></a>)delimiter(')> operator(%) operator(()ident(s)operator(,) ident(i)operator(\)) operator(+) ident(line)
            keyword(else)operator(:)
                keyword(yield) integer(0)operator(,) ident(line)

    keyword(def) method(_wrap_div)operator(()predefined_constant(self)operator(,) ident(inner)operator(\))operator(:)
        keyword(yield) integer(0)operator(,) operator(()string<delimiter(')content(<div)delimiter(')> operator(+) operator(()predefined_constant(self)operator(.)ident(cssclass) keyword(and) string<delimiter(')content( class="%s")delimiter(')> operator(%) predefined_constant(self)operator(.)ident(cssclass)operator(\))
                  operator(+) operator(()predefined_constant(self)operator(.)ident(cssstyles) keyword(and) string<delimiter(')content( style="%s")delimiter(')> operator(%) predefined_constant(self)operator(.)ident(cssstyles)operator(\)) operator(+) string<delimiter(')content(>)delimiter(')>operator(\))
        keyword(for) ident(tup) keyword(in) ident(inner)operator(:)
            keyword(yield) ident(tup)
        keyword(yield) integer(0)operator(,) string<delimiter(')content(</div>)char(\\n)delimiter(')>

    keyword(def) method(_wrap_pre)operator(()predefined_constant(self)operator(,) ident(inner)operator(\))operator(:)
        keyword(yield) integer(0)operator(,) operator(()string<delimiter(')content(<pre)delimiter(')>
                  operator(+) operator(()predefined_constant(self)operator(.)ident(prestyles) keyword(and) string<delimiter(')content( style="%s")delimiter(')> operator(%) predefined_constant(self)operator(.)ident(prestyles)operator(\)) operator(+) string<delimiter(')content(>)delimiter(')>operator(\))
        keyword(for) ident(tup) keyword(in) ident(inner)operator(:)
            keyword(yield) ident(tup)
        keyword(yield) integer(0)operator(,) string<delimiter(')content(</pre>)delimiter(')>

    keyword(def) method(_format_lines)operator(()predefined_constant(self)operator(,) ident(tokensource)operator(\))operator(:)
        docstring<delimiter(""")content(
)content(        Just format the tokens, without any wrapping tags.)content(
)content(        Yield individual lines.)content(
)content(        )delimiter(""")>
        ident(nocls) operator(=) predefined_constant(self)operator(.)ident(noclasses)
        ident(lsep) operator(=) predefined_constant(self)operator(.)ident(lineseparator)
        comment(# for <span style=""> lookup only)
        ident(getcls) operator(=) predefined_constant(self)operator(.)ident(ttype2class)operator(.)ident(get)
        ident(c2s) operator(=) predefined_constant(self)operator(.)ident(class2style)

        ident(lspan) operator(=) string<delimiter(')delimiter(')>
        ident(line) operator(=) string<delimiter(')delimiter(')>
        keyword(for) ident(ttype)operator(,) ident(value) keyword(in) ident(tokensource)operator(:)
            keyword(if) ident(nocls)operator(:)
                ident(cclass) operator(=) ident(getcls)operator(()ident(ttype)operator(\))
                keyword(while) ident(cclass) keyword(is) predefined_constant(None)operator(:)
                    ident(ttype) operator(=) ident(ttype)operator(.)ident(parent)
                    ident(cclass) operator(=) ident(getcls)operator(()ident(ttype)operator(\))
                ident(cspan) operator(=) ident(cclass) keyword(and) string<delimiter(')content(<span style="%s">)delimiter(')> operator(%) ident(c2s)operator([)ident(cclass)operator(])operator([)integer(0)operator(]) keyword(or) string<delimiter(')delimiter(')>
            keyword(else)operator(:)
                ident(cls) operator(=) predefined_constant(self)operator(.)ident(_get_css_class)operator(()ident(ttype)operator(\))
                ident(cspan) operator(=) ident(cls) keyword(and) string<delimiter(')content(<span class="%s">)delimiter(')> operator(%) ident(cls) keyword(or) string<delimiter(')delimiter(')>

            ident(parts) operator(=) ident(escape_html)operator(()ident(value)operator(\))operator(.)ident(split)operator(()string<delimiter(')char(\\n)delimiter(')>operator(\))

            comment(# for all but the last line)
            keyword(for) ident(part) keyword(in) ident(parts)operator([)operator(:)operator(-)integer(1)operator(])operator(:)
                keyword(if) ident(line)operator(:)
                    keyword(if) ident(lspan) operator(!=) ident(cspan)operator(:)
                        ident(line) operator(+=) operator(()ident(lspan) keyword(and) string<delimiter(')content(</span>)delimiter(')>operator(\)) operator(+) ident(cspan) operator(+) ident(part) operator(+) \
                                operator(()ident(cspan) keyword(and) string<delimiter(')content(</span>)delimiter(')>operator(\)) operator(+) ident(lsep)
                    keyword(else)operator(:) comment(# both are the same)
                        ident(line) operator(+=) ident(part) operator(+) operator(()ident(lspan) keyword(and) string<delimiter(')content(</span>)delimiter(')>operator(\)) operator(+) ident(lsep)
                    keyword(yield) integer(1)operator(,) ident(line)
                    ident(line) operator(=) string<delimiter(')delimiter(')>
                keyword(elif) ident(part)operator(:)
                    keyword(yield) integer(1)operator(,) ident(cspan) operator(+) ident(part) operator(+) operator(()ident(cspan) keyword(and) string<delimiter(')content(</span>)delimiter(')>operator(\)) operator(+) ident(lsep)
                keyword(else)operator(:)
                    keyword(yield) integer(1)operator(,) ident(lsep)
            comment(# for the last line)
            keyword(if) ident(line) keyword(and) ident(parts)operator([)operator(-)integer(1)operator(])operator(:)
                keyword(if) ident(lspan) operator(!=) ident(cspan)operator(:)
                    ident(line) operator(+=) operator(()ident(lspan) keyword(and) string<delimiter(')content(</span>)delimiter(')>operator(\)) operator(+) ident(cspan) operator(+) ident(parts)operator([)operator(-)integer(1)operator(])
                    ident(lspan) operator(=) ident(cspan)
                keyword(else)operator(:)
                    ident(line) operator(+=) ident(parts)operator([)operator(-)integer(1)operator(])
            keyword(elif) ident(parts)operator([)operator(-)integer(1)operator(])operator(:)
                ident(line) operator(=) ident(cspan) operator(+) ident(parts)operator([)operator(-)integer(1)operator(])
                ident(lspan) operator(=) ident(cspan)
            comment(# else we neither have to open a new span nor set lspan)

        keyword(if) ident(line)operator(:)
            keyword(yield) integer(1)operator(,) ident(line) operator(+) operator(()ident(lspan) keyword(and) string<delimiter(')content(</span>)delimiter(')>operator(\)) operator(+) ident(lsep)

    keyword(def) method(_highlight_lines)operator(()predefined_constant(self)operator(,) ident(tokensource)operator(\))operator(:)
        docstring<delimiter(""")content(
)content(        Highlighted the lines specified in the `hl_lines` option by)content(
)content(        post-processing the token stream coming from `_format_lines`.)content(
)content(        )delimiter(""")>
        ident(hls) operator(=) predefined_constant(self)operator(.)ident(hl_lines)

        keyword(for) ident(i)operator(,) operator(()ident(t)operator(,) ident(value)operator(\)) keyword(in) predefined(enumerate)operator(()ident(tokensource)operator(\))operator(:)
            keyword(if) ident(t) operator(!=) integer(1)operator(:)
                keyword(yield) ident(t)operator(,) ident(value)
            keyword(if) ident(i) operator(+) integer(1) keyword(in) ident(hls)operator(:) comment(# i + 1 because Python indexes start at 0)
                keyword(yield) integer(1)operator(,) string<delimiter(')content(<span class="hll">%s</span>)delimiter(')> operator(%) ident(value)
            keyword(else)operator(:)
                keyword(yield) integer(1)operator(,) ident(value)

    keyword(def) method(wrap)operator(()predefined_constant(self)operator(,) ident(source)operator(,) ident(outfile)operator(\))operator(:)
        docstring<delimiter(""")content(
)content(        Wrap the ``source``, which is a generator yielding)content(
)content(        individual lines, in custom generators. See docstring)content(
)content(        for `format`. Can be overridden.)content(
)content(        )delimiter(""")>
        keyword(return) predefined_constant(self)operator(.)ident(_wrap_div)operator(()predefined_constant(self)operator(.)ident(_wrap_pre)operator(()ident(source)operator(\))operator(\))

    keyword(def) method(format_unencoded)operator(()predefined_constant(self)operator(,) ident(tokensource)operator(,) ident(outfile)operator(\))operator(:)
        docstring<delimiter(""")content(
)content(        The formatting process uses several nested generators; which of)content(
)content(        them are used is determined by the user's options.)content(
)content(
)content(        Each generator should take at least one argument, ``inner``,)content(
)content(        and wrap the pieces of text generated by this.)content(
)content(
)content(        Always yield 2-tuples: (code, text\). If "code" is 1, the text)content(
)content(        is part of the original tokensource being highlighted, if it's)content(
)content(        0, the text is some piece of wrapping. This makes it possible to)content(
)content(        use several different wrappers that process the original source)content(
)content(        linewise, e.g. line number generators.)content(
)content(        )delimiter(""")>
        ident(source) operator(=) predefined_constant(self)operator(.)ident(_format_lines)operator(()ident(tokensource)operator(\))
        keyword(if) predefined_constant(self)operator(.)ident(hl_lines)operator(:)
            ident(source) operator(=) predefined_constant(self)operator(.)ident(_highlight_lines)operator(()ident(source)operator(\))
        keyword(if) keyword(not) predefined_constant(self)operator(.)ident(nowrap)operator(:)
            keyword(if) predefined_constant(self)operator(.)ident(linenos) operator(==) integer(2)operator(:)
                ident(source) operator(=) predefined_constant(self)operator(.)ident(_wrap_inlinelinenos)operator(()ident(source)operator(\))
            keyword(if) predefined_constant(self)operator(.)ident(lineanchors)operator(:)
                ident(source) operator(=) predefined_constant(self)operator(.)ident(_wrap_lineanchors)operator(()ident(source)operator(\))
            ident(source) operator(=) predefined_constant(self)operator(.)ident(wrap)operator(()ident(source)operator(,) ident(outfile)operator(\))
            keyword(if) predefined_constant(self)operator(.)ident(linenos) operator(==) integer(1)operator(:)
                ident(source) operator(=) predefined_constant(self)operator(.)ident(_wrap_tablelinenos)operator(()ident(source)operator(\))
            keyword(if) predefined_constant(self)operator(.)ident(full)operator(:)
                ident(source) operator(=) predefined_constant(self)operator(.)ident(_wrap_full)operator(()ident(source)operator(,) ident(outfile)operator(\))

        keyword(for) ident(t)operator(,) ident(piece) keyword(in) ident(source)operator(:)
            ident(outfile)operator(.)ident(write)operator(()ident(piece)operator(\))
comment(# -*- coding: utf-8 -*-)
docstring<delimiter(""")content(
)content(    pygments.formatters.img)content(
)content(    ~~~~~~~~~~~~~~~~~~~~~~~)content(
)content(
)content(    Formatter for Pixmap output.)content(
)content(
)content(    :copyright: Copyright 2006-2009 by the Pygments team, see AUTHORS.)content(
)content(    :license: BSD, see LICENSE for details.)content(
)delimiter(""")>

keyword(import) include(sys)
keyword(from) include(commands) keyword(import) include(getstatusoutput)

keyword(from) include(pygments.formatter) keyword(import) include(Formatter)
keyword(from) include(pygments.util) keyword(import) include(get_bool_opt)operator(,) include(get_int_opt)operator(,) include(get_choice_opt)

comment(# Import this carefully)
keyword(try)operator(:)
    keyword(import) include(Image)operator(,) include(ImageDraw)operator(,) include(ImageFont)
    ident(pil_available) operator(=) predefined_constant(True)
keyword(except) exception(ImportError)operator(:)
    ident(pil_available) operator(=) predefined_constant(False)

keyword(try)operator(:)
    keyword(import) include(_winreg)
keyword(except) exception(ImportError)operator(:)
    ident(_winreg) operator(=) predefined_constant(None)

ident(__all__) operator(=) operator([)string<delimiter(')content(ImageFormatter)delimiter(')>operator(,) string<delimiter(')content(GifImageFormatter)delimiter(')>operator(,) string<delimiter(')content(JpgImageFormatter)delimiter(')>operator(,)
           string<delimiter(')content(BmpImageFormatter)delimiter(')>operator(])


comment(# For some unknown reason every font calls it something different)
ident(STYLES) operator(=) operator({)
    string<delimiter(')content(NORMAL)delimiter(')>operator(:)     operator([)string<delimiter(')delimiter(')>operator(,) string<delimiter(')content(Roman)delimiter(')>operator(,) string<delimiter(')content(Book)delimiter(')>operator(,) string<delimiter(')content(Normal)delimiter(')>operator(,) string<delimiter(')content(Regular)delimiter(')>operator(,) string<delimiter(')content(Medium)delimiter(')>operator(])operator(,)
    string<delimiter(')content(ITALIC)delimiter(')>operator(:)     operator([)string<delimiter(')content(Oblique)delimiter(')>operator(,) string<delimiter(')content(Italic)delimiter(')>operator(])operator(,)
    string<delimiter(')content(BOLD)delimiter(')>operator(:)       operator([)string<delimiter(')content(Bold)delimiter(')>operator(])operator(,)
    string<delimiter(')content(BOLDITALIC)delimiter(')>operator(:) operator([)string<delimiter(')content(Bold Oblique)delimiter(')>operator(,) string<delimiter(')content(Bold Italic)delimiter(')>operator(])operator(,)
operator(})

comment(# A sane default for modern systems)
ident(DEFAULT_FONT_NAME_NIX) operator(=) string<delimiter(')content(Bitstream Vera Sans Mono)delimiter(')>
ident(DEFAULT_FONT_NAME_WIN) operator(=) string<delimiter(')content(Courier New)delimiter(')>


keyword(class) class(PilNotAvailable)operator(()exception(ImportError)operator(\))operator(:)
    docstring<delimiter(""")content(When Python imaging library is not available)delimiter(""")>


keyword(class) class(FontNotFound)operator(()exception(Exception)operator(\))operator(:)
    docstring<delimiter(""")content(When there are no usable fonts specified)delimiter(""")>


keyword(class) class(FontManager)operator(()predefined(object)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Manages a set of fonts: normal, italic, bold, etc...)content(
)content(    )delimiter(""")>

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) ident(font_name)operator(,) ident(font_size)operator(=)integer(14)operator(\))operator(:)
        predefined_constant(self)operator(.)ident(font_name) operator(=) ident(font_name)
        predefined_constant(self)operator(.)ident(font_size) operator(=) ident(font_size)
        predefined_constant(self)operator(.)ident(fonts) operator(=) operator({)operator(})
        predefined_constant(self)operator(.)ident(encoding) operator(=) predefined_constant(None)
        keyword(if) ident(sys)operator(.)ident(platform)operator(.)ident(startswith)operator(()string<delimiter(')content(win)delimiter(')>operator(\))operator(:)
            keyword(if) keyword(not) ident(font_name)operator(:)
                predefined_constant(self)operator(.)ident(font_name) operator(=) ident(DEFAULT_FONT_NAME_WIN)
            predefined_constant(self)operator(.)ident(_create_win)operator(()operator(\))
        keyword(else)operator(:)
            keyword(if) keyword(not) ident(font_name)operator(:)
                predefined_constant(self)operator(.)ident(font_name) operator(=) ident(DEFAULT_FONT_NAME_NIX)
            predefined_constant(self)operator(.)ident(_create_nix)operator(()operator(\))

    keyword(def) method(_get_nix_font_path)operator(()predefined_constant(self)operator(,) ident(name)operator(,) ident(style)operator(\))operator(:)
        predefined(exit)operator(,) ident(out) operator(=) ident(getstatusoutput)operator(()string<delimiter(')content(fc-list "%s:style=%s" file)delimiter(')> operator(%)
                                    operator(()ident(name)operator(,) ident(style)operator(\))operator(\))
        keyword(if) keyword(not) predefined(exit)operator(:)
            ident(lines) operator(=) ident(out)operator(.)ident(splitlines)operator(()operator(\))
            keyword(if) ident(lines)operator(:)
                ident(path) operator(=) ident(lines)operator([)integer(0)operator(])operator(.)ident(strip)operator(()operator(\))operator(.)ident(strip)operator(()string<delimiter(')content(:)delimiter(')>operator(\))
                keyword(return) ident(path)

    keyword(def) method(_create_nix)operator(()predefined_constant(self)operator(\))operator(:)
        keyword(for) ident(name) keyword(in) ident(STYLES)operator([)string<delimiter(')content(NORMAL)delimiter(')>operator(])operator(:)
            ident(path) operator(=) predefined_constant(self)operator(.)ident(_get_nix_font_path)operator(()predefined_constant(self)operator(.)ident(font_name)operator(,) ident(name)operator(\))
            keyword(if) ident(path) keyword(is) keyword(not) predefined_constant(None)operator(:)
                predefined_constant(self)operator(.)ident(fonts)operator([)string<delimiter(')content(NORMAL)delimiter(')>operator(]) operator(=) ident(ImageFont)operator(.)ident(truetype)operator(()ident(path)operator(,) predefined_constant(self)operator(.)ident(font_size)operator(\))
                keyword(break)
        keyword(else)operator(:)
            keyword(raise) ident(FontNotFound)operator(()string<delimiter(')content(No usable fonts named: "%s")delimiter(')> operator(%)
                               predefined_constant(self)operator(.)ident(font_name)operator(\))
        keyword(for) ident(style) keyword(in) operator(()string<delimiter(')content(ITALIC)delimiter(')>operator(,) string<delimiter(')content(BOLD)delimiter(')>operator(,) string<delimiter(')content(BOLDITALIC)delimiter(')>operator(\))operator(:)
            keyword(for) ident(stylename) keyword(in) ident(STYLES)operator([)ident(style)operator(])operator(:)
                ident(path) operator(=) predefined_constant(self)operator(.)ident(_get_nix_font_path)operator(()predefined_constant(self)operator(.)ident(font_name)operator(,) ident(stylename)operator(\))
                keyword(if) ident(path) keyword(is) keyword(not) predefined_constant(None)operator(:)
                    predefined_constant(self)operator(.)ident(fonts)operator([)ident(style)operator(]) operator(=) ident(ImageFont)operator(.)ident(truetype)operator(()ident(path)operator(,) predefined_constant(self)operator(.)ident(font_size)operator(\))
                    keyword(break)
            keyword(else)operator(:)
                keyword(if) ident(style) operator(==) string<delimiter(')content(BOLDITALIC)delimiter(')>operator(:)
                    predefined_constant(self)operator(.)ident(fonts)operator([)ident(style)operator(]) operator(=) predefined_constant(self)operator(.)ident(fonts)operator([)string<delimiter(')content(BOLD)delimiter(')>operator(])
                keyword(else)operator(:)
                    predefined_constant(self)operator(.)ident(fonts)operator([)ident(style)operator(]) operator(=) predefined_constant(self)operator(.)ident(fonts)operator([)string<delimiter(')content(NORMAL)delimiter(')>operator(])

    keyword(def) method(_lookup_win)operator(()predefined_constant(self)operator(,) ident(key)operator(,) ident(basename)operator(,) ident(styles)operator(,) ident(fail)operator(=)predefined_constant(False)operator(\))operator(:)
        keyword(for) ident(suffix) keyword(in) operator(()string<delimiter(')delimiter(')>operator(,) string<delimiter(')content( (TrueType\))delimiter(')>operator(\))operator(:)
            keyword(for) ident(style) keyword(in) ident(styles)operator(:)
                keyword(try)operator(:)
                    ident(valname) operator(=) string<delimiter(')content(%s%s%s)delimiter(')> operator(%) operator(()ident(basename)operator(,) ident(style) keyword(and) string<delimiter(')content( )delimiter(')>operator(+)ident(style)operator(,) ident(suffix)operator(\))
                    ident(val)operator(,) ident(_) operator(=) ident(_winreg)operator(.)ident(QueryValueEx)operator(()ident(key)operator(,) ident(valname)operator(\))
                    keyword(return) ident(val)
                keyword(except) exception(EnvironmentError)operator(:)
                    keyword(continue)
        keyword(else)operator(:)
            keyword(if) ident(fail)operator(:)
                keyword(raise) ident(FontNotFound)operator(()string<delimiter(')content(Font %s (%s\) not found in registry)delimiter(')> operator(%)
                                   operator(()ident(basename)operator(,) ident(styles)operator([)integer(0)operator(])operator(\))operator(\))
            keyword(return) predefined_constant(None)

    keyword(def) method(_create_win)operator(()predefined_constant(self)operator(\))operator(:)
        keyword(try)operator(:)
            ident(key) operator(=) ident(_winreg)operator(.)ident(OpenKey)operator(()
                ident(_winreg)operator(.)ident(HKEY_LOCAL_MACHINE)operator(,)
                string<modifier(r)delimiter(')content(Software)content(\\M)content(icrosoft)content(\\W)content(indows NT)content(\\C)content(urrentVersion)content(\\F)content(onts)delimiter(')>operator(\))
        keyword(except) exception(EnvironmentError)operator(:)
            keyword(try)operator(:)
                ident(key) operator(=) ident(_winreg)operator(.)ident(OpenKey)operator(()
                    ident(_winreg)operator(.)ident(HKEY_LOCAL_MACHINE)operator(,)
                    string<modifier(r)delimiter(')content(Software)content(\\M)content(icrosoft)content(\\W)content(indows)content(\\C)content(urrentVersion)content(\\F)content(onts)delimiter(')>operator(\))
            keyword(except) exception(EnvironmentError)operator(:)
                keyword(raise) ident(FontNotFound)operator(()string<delimiter(')content(Can)char(\\')content(t open Windows font registry key)delimiter(')>operator(\))
        keyword(try)operator(:)
            ident(path) operator(=) predefined_constant(self)operator(.)ident(_lookup_win)operator(()ident(key)operator(,) predefined_constant(self)operator(.)ident(font_name)operator(,) ident(STYLES)operator([)string<delimiter(')content(NORMAL)delimiter(')>operator(])operator(,) predefined_constant(True)operator(\))
            predefined_constant(self)operator(.)ident(fonts)operator([)string<delimiter(')content(NORMAL)delimiter(')>operator(]) operator(=) ident(ImageFont)operator(.)ident(truetype)operator(()ident(path)operator(,) predefined_constant(self)operator(.)ident(font_size)operator(\))
            keyword(for) ident(style) keyword(in) operator(()string<delimiter(')content(ITALIC)delimiter(')>operator(,) string<delimiter(')content(BOLD)delimiter(')>operator(,) string<delimiter(')content(BOLDITALIC)delimiter(')>operator(\))operator(:)
                ident(path) operator(=) predefined_constant(self)operator(.)ident(_lookup_win)operator(()ident(key)operator(,) predefined_constant(self)operator(.)ident(font_name)operator(,) ident(STYLES)operator([)ident(style)operator(])operator(\))
                keyword(if) ident(path)operator(:)
                    predefined_constant(self)operator(.)ident(fonts)operator([)ident(style)operator(]) operator(=) ident(ImageFont)operator(.)ident(truetype)operator(()ident(path)operator(,) predefined_constant(self)operator(.)ident(font_size)operator(\))
                keyword(else)operator(:)
                    keyword(if) ident(style) operator(==) string<delimiter(')content(BOLDITALIC)delimiter(')>operator(:)
                        predefined_constant(self)operator(.)ident(fonts)operator([)ident(style)operator(]) operator(=) predefined_constant(self)operator(.)ident(fonts)operator([)string<delimiter(')content(BOLD)delimiter(')>operator(])
                    keyword(else)operator(:)
                        predefined_constant(self)operator(.)ident(fonts)operator([)ident(style)operator(]) operator(=) predefined_constant(self)operator(.)ident(fonts)operator([)string<delimiter(')content(NORMAL)delimiter(')>operator(])
        keyword(finally)operator(:)
            ident(_winreg)operator(.)ident(CloseKey)operator(()ident(key)operator(\))

    keyword(def) method(get_char_size)operator(()predefined_constant(self)operator(\))operator(:)
        docstring<delimiter(""")content(
)content(        Get the character size.)content(
)content(        )delimiter(""")>
        keyword(return) predefined_constant(self)operator(.)ident(fonts)operator([)string<delimiter(')content(NORMAL)delimiter(')>operator(])operator(.)ident(getsize)operator(()string<delimiter(')content(M)delimiter(')>operator(\))

    keyword(def) method(get_font)operator(()predefined_constant(self)operator(,) ident(bold)operator(,) ident(oblique)operator(\))operator(:)
        docstring<delimiter(""")content(
)content(        Get the font based on bold and italic flags.)content(
)content(        )delimiter(""")>
        keyword(if) ident(bold) keyword(and) ident(oblique)operator(:)
            keyword(return) predefined_constant(self)operator(.)ident(fonts)operator([)string<delimiter(')content(BOLDITALIC)delimiter(')>operator(])
        keyword(elif) ident(bold)operator(:)
            keyword(return) predefined_constant(self)operator(.)ident(fonts)operator([)string<delimiter(')content(BOLD)delimiter(')>operator(])
        keyword(elif) ident(oblique)operator(:)
            keyword(return) predefined_constant(self)operator(.)ident(fonts)operator([)string<delimiter(')content(ITALIC)delimiter(')>operator(])
        keyword(else)operator(:)
            keyword(return) predefined_constant(self)operator(.)ident(fonts)operator([)string<delimiter(')content(NORMAL)delimiter(')>operator(])


keyword(class) class(ImageFormatter)operator(()ident(Formatter)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Create a PNG image from source code. This uses the Python Imaging Library to)content(
)content(    generate a pixmap from the source code.)content(
)content(
)content(    *New in Pygments 0.10.*)content(
)content(
)content(    Additional options accepted:)content(
)content(
)content(    `image_format`)content(
)content(        An image format to output to that is recognised by PIL, these include:)content(
)content(
)content(        * "PNG" (default\))content(
)content(        * "JPEG")content(
)content(        * "BMP")content(
)content(        * "GIF")content(
)content(
)content(    `line_pad`)content(
)content(        The extra spacing (in pixels\) between each line of text.)content(
)content(
)content(        Default: 2)content(
)content(
)content(    `font_name`)content(
)content(        The font name to be used as the base font from which others, such as)content(
)content(        bold and italic fonts will be generated.  This really should be a)content(
)content(        monospace font to look sane.)content(
)content(
)content(        Default: "Bitstream Vera Sans Mono")content(
)content(
)content(    `font_size`)content(
)content(        The font size in points to be used.)content(
)content(
)content(        Default: 14)content(
)content(
)content(    `image_pad`)content(
)content(        The padding, in pixels to be used at each edge of the resulting image.)content(
)content(
)content(        Default: 10)content(
)content(
)content(    `line_numbers`)content(
)content(        Whether line numbers should be shown: True/False)content(
)content(
)content(        Default: True)content(
)content(
)content(    `line_number_step`)content(
)content(        The step used when printing line numbers.)content(
)content(
)content(        Default: 1)content(
)content(
)content(    `line_number_bg`)content(
)content(        The background colour (in "#123456" format\) of the line number bar, or)content(
)content(        None to use the style background color.)content(
)content(
)content(        Default: "#eed")content(
)content(
)content(    `line_number_fg`)content(
)content(        The text color of the line numbers (in "#123456"-like format\).)content(
)content(
)content(        Default: "#886")content(
)content(
)content(    `line_number_chars`)content(
)content(        The number of columns of line numbers allowable in the line number)content(
)content(        margin.)content(
)content(
)content(        Default: 2)content(
)content(
)content(    `line_number_bold`)content(
)content(        Whether line numbers will be bold: True/False)content(
)content(
)content(        Default: False)content(
)content(
)content(    `line_number_italic`)content(
)content(        Whether line numbers will be italicized: True/False)content(
)content(
)content(        Default: False)content(
)content(
)content(    `line_number_separator`)content(
)content(        Whether a line will be drawn between the line number area and the)content(
)content(        source code area: True/False)content(
)content(
)content(        Default: True)content(
)content(
)content(    `line_number_pad`)content(
)content(        The horizontal padding (in pixels\) between the line number margin, and)content(
)content(        the source code area.)content(
)content(
)content(        Default: 6)content(
)content(    )delimiter(""")>

    comment(# Required by the pygments mapper)
    ident(name) operator(=) string<delimiter(')content(img)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(img)delimiter(')>operator(,) string<delimiter(')content(IMG)delimiter(')>operator(,) string<delimiter(')content(png)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.png)delimiter(')>operator(])

    ident(unicodeoutput) operator(=) predefined_constant(False)

    ident(default_image_format) operator(=) string<delimiter(')content(png)delimiter(')>

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))operator(:)
        docstring<delimiter(""")content(
)content(        See the class docstring for explanation of options.)content(
)content(        )delimiter(""")>
        keyword(if) keyword(not) ident(pil_available)operator(:)
            keyword(raise) ident(PilNotAvailable)operator(()
                string<delimiter(')content(Python Imaging Library is required for this formatter)delimiter(')>operator(\))
        ident(Formatter)operator(.)ident(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))
        comment(# Read the style)
        predefined_constant(self)operator(.)ident(styles) operator(=) predefined(dict)operator(()predefined_constant(self)operator(.)ident(style)operator(\))
        keyword(if) predefined_constant(self)operator(.)ident(style)operator(.)ident(background_color) keyword(is) predefined_constant(None)operator(:)
            predefined_constant(self)operator(.)ident(background_color) operator(=) string<delimiter(')content(#fff)delimiter(')>
        keyword(else)operator(:)
            predefined_constant(self)operator(.)ident(background_color) operator(=) predefined_constant(self)operator(.)ident(style)operator(.)ident(background_color)
        comment(# Image options)
        predefined_constant(self)operator(.)ident(image_format) operator(=) ident(get_choice_opt)operator(()
            ident(options)operator(,) string<delimiter(')content(image_format)delimiter(')>operator(,) operator([)string<delimiter(')content(png)delimiter(')>operator(,) string<delimiter(')content(jpeg)delimiter(')>operator(,) string<delimiter(')content(gif)delimiter(')>operator(,) string<delimiter(')content(bmp)delimiter(')>operator(])operator(,)
            predefined_constant(self)operator(.)ident(default_image_format)operator(,) ident(normcase)operator(=)predefined_constant(True)operator(\))
        predefined_constant(self)operator(.)ident(image_pad) operator(=) ident(get_int_opt)operator(()ident(options)operator(,) string<delimiter(')content(image_pad)delimiter(')>operator(,) integer(10)operator(\))
        predefined_constant(self)operator(.)ident(line_pad) operator(=) ident(get_int_opt)operator(()ident(options)operator(,) string<delimiter(')content(line_pad)delimiter(')>operator(,) integer(2)operator(\))
        comment(# The fonts)
        ident(fontsize) operator(=) ident(get_int_opt)operator(()ident(options)operator(,) string<delimiter(')content(font_size)delimiter(')>operator(,) integer(14)operator(\))
        predefined_constant(self)operator(.)ident(fonts) operator(=) ident(FontManager)operator(()ident(options)operator(.)ident(get)operator(()string<delimiter(')content(font_name)delimiter(')>operator(,) string<delimiter(')delimiter(')>operator(\))operator(,) ident(fontsize)operator(\))
        predefined_constant(self)operator(.)ident(fontw)operator(,) predefined_constant(self)operator(.)ident(fonth) operator(=) predefined_constant(self)operator(.)ident(fonts)operator(.)ident(get_char_size)operator(()operator(\))
        comment(# Line number options)
        predefined_constant(self)operator(.)ident(line_number_fg) operator(=) ident(options)operator(.)ident(get)operator(()string<delimiter(')content(line_number_fg)delimiter(')>operator(,) string<delimiter(')content(#886)delimiter(')>operator(\))
        predefined_constant(self)operator(.)ident(line_number_bg) operator(=) ident(options)operator(.)ident(get)operator(()string<delimiter(')content(line_number_bg)delimiter(')>operator(,) string<delimiter(')content(#eed)delimiter(')>operator(\))
        predefined_constant(self)operator(.)ident(line_number_chars) operator(=) ident(get_int_opt)operator(()ident(options)operator(,)
                                        string<delimiter(')content(line_number_chars)delimiter(')>operator(,) integer(2)operator(\))
        predefined_constant(self)operator(.)ident(line_number_bold) operator(=) ident(get_bool_opt)operator(()ident(options)operator(,)
                                        string<delimiter(')content(line_number_bold)delimiter(')>operator(,) predefined_constant(False)operator(\))
        predefined_constant(self)operator(.)ident(line_number_italic) operator(=) ident(get_bool_opt)operator(()ident(options)operator(,)
                                        string<delimiter(')content(line_number_italic)delimiter(')>operator(,) predefined_constant(False)operator(\))
        predefined_constant(self)operator(.)ident(line_number_pad) operator(=) ident(get_int_opt)operator(()ident(options)operator(,) string<delimiter(')content(line_number_pad)delimiter(')>operator(,) integer(6)operator(\))
        predefined_constant(self)operator(.)ident(line_numbers) operator(=) ident(get_bool_opt)operator(()ident(options)operator(,) string<delimiter(')content(line_numbers)delimiter(')>operator(,) predefined_constant(True)operator(\))
        predefined_constant(self)operator(.)ident(line_number_separator) operator(=) ident(get_bool_opt)operator(()ident(options)operator(,)
                                        string<delimiter(')content(line_number_separator)delimiter(')>operator(,) predefined_constant(True)operator(\))
        predefined_constant(self)operator(.)ident(line_number_step) operator(=) ident(get_int_opt)operator(()ident(options)operator(,) string<delimiter(')content(line_number_step)delimiter(')>operator(,) integer(1)operator(\))
        keyword(if) predefined_constant(self)operator(.)ident(line_numbers)operator(:)
            predefined_constant(self)operator(.)ident(line_number_width) operator(=) operator(()predefined_constant(self)operator(.)ident(fontw) operator(*) predefined_constant(self)operator(.)ident(line_number_chars) operator(+)
                                   predefined_constant(self)operator(.)ident(line_number_pad) operator(*) integer(2)operator(\))
        keyword(else)operator(:)
            predefined_constant(self)operator(.)ident(line_number_width) operator(=) integer(0)
        predefined_constant(self)operator(.)ident(drawables) operator(=) operator([)operator(])

    keyword(def) method(get_style_defs)operator(()predefined_constant(self)operator(,) ident(arg)operator(=)string<delimiter(')delimiter(')>operator(\))operator(:)
        keyword(raise) exception(NotImplementedError)operator(()string<delimiter(')content(The -S option is meaningless for the image )delimiter(')>
                                  string<delimiter(')content(formatter. Use -O style=<stylename> instead.)delimiter(')>operator(\))

    keyword(def) method(_get_line_height)operator(()predefined_constant(self)operator(\))operator(:)
        docstring<delimiter(""")content(
)content(        Get the height of a line.)content(
)content(        )delimiter(""")>
        keyword(return) predefined_constant(self)operator(.)ident(fonth) operator(+) predefined_constant(self)operator(.)ident(line_pad)

    keyword(def) method(_get_line_y)operator(()predefined_constant(self)operator(,) ident(lineno)operator(\))operator(:)
        docstring<delimiter(""")content(
)content(        Get the Y coordinate of a line number.)content(
)content(        )delimiter(""")>
        keyword(return) ident(lineno) operator(*) predefined_constant(self)operator(.)ident(_get_line_height)operator(()operator(\)) operator(+) predefined_constant(self)operator(.)ident(image_pad)

    keyword(def) method(_get_char_width)operator(()predefined_constant(self)operator(\))operator(:)
        docstring<delimiter(""")content(
)content(        Get the width of a character.)content(
)content(        )delimiter(""")>
        keyword(return) predefined_constant(self)operator(.)ident(fontw)

    keyword(def) method(_get_char_x)operator(()predefined_constant(self)operator(,) ident(charno)operator(\))operator(:)
        docstring<delimiter(""")content(
)content(        Get the X coordinate of a character position.)content(
)content(        )delimiter(""")>
        keyword(return) ident(charno) operator(*) predefined_constant(self)operator(.)ident(fontw) operator(+) predefined_constant(self)operator(.)ident(image_pad) operator(+) predefined_constant(self)operator(.)ident(line_number_width)

    keyword(def) method(_get_text_pos)operator(()predefined_constant(self)operator(,) ident(charno)operator(,) ident(lineno)operator(\))operator(:)
        docstring<delimiter(""")content(
)content(        Get the actual position for a character and line position.)content(
)content(        )delimiter(""")>
        keyword(return) predefined_constant(self)operator(.)ident(_get_char_x)operator(()ident(charno)operator(\))operator(,) predefined_constant(self)operator(.)ident(_get_line_y)operator(()ident(lineno)operator(\))

    keyword(def) method(_get_linenumber_pos)operator(()predefined_constant(self)operator(,) ident(lineno)operator(\))operator(:)
        docstring<delimiter(""")content(
)content(        Get the actual position for the start of a line number.)content(
)content(        )delimiter(""")>
        keyword(return) operator(()predefined_constant(self)operator(.)ident(image_pad)operator(,) predefined_constant(self)operator(.)ident(_get_line_y)operator(()ident(lineno)operator(\))operator(\))

    keyword(def) method(_get_text_color)operator(()predefined_constant(self)operator(,) ident(style)operator(\))operator(:)
        docstring<delimiter(""")content(
)content(        Get the correct color for the token from the style.)content(
)content(        )delimiter(""")>
        keyword(if) ident(style)operator([)string<delimiter(')content(color)delimiter(')>operator(]) keyword(is) keyword(not) predefined_constant(None)operator(:)
            ident(fill) operator(=) string<delimiter(')content(#)delimiter(')> operator(+) ident(style)operator([)string<delimiter(')content(color)delimiter(')>operator(])
        keyword(else)operator(:)
            ident(fill) operator(=) string<delimiter(')content(#000)delimiter(')>
        keyword(return) ident(fill)

    keyword(def) method(_get_style_font)operator(()predefined_constant(self)operator(,) ident(style)operator(\))operator(:)
        docstring<delimiter(""")content(
)content(        Get the correct font for the style.)content(
)content(        )delimiter(""")>
        keyword(return) predefined_constant(self)operator(.)ident(fonts)operator(.)ident(get_font)operator(()ident(style)operator([)string<delimiter(')content(bold)delimiter(')>operator(])operator(,) ident(style)operator([)string<delimiter(')content(italic)delimiter(')>operator(])operator(\))

    keyword(def) method(_get_image_size)operator(()predefined_constant(self)operator(,) ident(maxcharno)operator(,) ident(maxlineno)operator(\))operator(:)
        docstring<delimiter(""")content(
)content(        Get the required image size.)content(
)content(        )delimiter(""")>
        keyword(return) operator(()predefined_constant(self)operator(.)ident(_get_char_x)operator(()ident(maxcharno)operator(\)) operator(+) predefined_constant(self)operator(.)ident(image_pad)operator(,)
                predefined_constant(self)operator(.)ident(_get_line_y)operator(()ident(maxlineno) operator(+) integer(0)operator(\)) operator(+) predefined_constant(self)operator(.)ident(image_pad)operator(\))

    keyword(def) method(_draw_linenumber)operator(()predefined_constant(self)operator(,) ident(lineno)operator(\))operator(:)
        docstring<delimiter(""")content(
)content(        Remember a line number drawable to paint later.)content(
)content(        )delimiter(""")>
        predefined_constant(self)operator(.)ident(_draw_text)operator(()
            predefined_constant(self)operator(.)ident(_get_linenumber_pos)operator(()ident(lineno)operator(\))operator(,)
            predefined(str)operator(()ident(lineno) operator(+) integer(1)operator(\))operator(.)ident(rjust)operator(()predefined_constant(self)operator(.)ident(line_number_chars)operator(\))operator(,)
            ident(font)operator(=)predefined_constant(self)operator(.)ident(fonts)operator(.)ident(get_font)operator(()predefined_constant(self)operator(.)ident(line_number_bold)operator(,)
                                     predefined_constant(self)operator(.)ident(line_number_italic)operator(\))operator(,)
            ident(fill)operator(=)predefined_constant(self)operator(.)ident(line_number_fg)operator(,)
        operator(\))

    keyword(def) method(_draw_text)operator(()predefined_constant(self)operator(,) ident(pos)operator(,) ident(text)operator(,) ident(font)operator(,) operator(**)ident(kw)operator(\))operator(:)
        docstring<delimiter(""")content(
)content(        Remember a single drawable tuple to paint later.)content(
)content(        )delimiter(""")>
        predefined_constant(self)operator(.)ident(drawables)operator(.)ident(append)operator(()operator(()ident(pos)operator(,) ident(text)operator(,) ident(font)operator(,) ident(kw)operator(\))operator(\))

    keyword(def) method(_create_drawables)operator(()predefined_constant(self)operator(,) ident(tokensource)operator(\))operator(:)
        docstring<delimiter(""")content(
)content(        Create drawables for the token content.)content(
)content(        )delimiter(""")>
        ident(lineno) operator(=) ident(charno) operator(=) ident(maxcharno) operator(=) integer(0)
        keyword(for) ident(ttype)operator(,) ident(value) keyword(in) ident(tokensource)operator(:)
            keyword(while) ident(ttype) keyword(not) keyword(in) predefined_constant(self)operator(.)ident(styles)operator(:)
                ident(ttype) operator(=) ident(ttype)operator(.)ident(parent)
            ident(style) operator(=) predefined_constant(self)operator(.)ident(styles)operator([)ident(ttype)operator(])
            comment(# TODO: make sure tab expansion happens earlier in the chain.  It)
            comment(# really ought to be done on the input, as to do it right here is)
            comment(# quite complex.)
            ident(value) operator(=) ident(value)operator(.)ident(expandtabs)operator(()integer(4)operator(\))
            ident(lines) operator(=) ident(value)operator(.)ident(splitlines)operator(()predefined_constant(True)operator(\))
            comment(#print lines)
            keyword(for) ident(i)operator(,) ident(line) keyword(in) predefined(enumerate)operator(()ident(lines)operator(\))operator(:)
                ident(temp) operator(=) ident(line)operator(.)ident(rstrip)operator(()string<delimiter(')char(\\n)delimiter(')>operator(\))
                keyword(if) ident(temp)operator(:)
                    predefined_constant(self)operator(.)ident(_draw_text)operator(()
                        predefined_constant(self)operator(.)ident(_get_text_pos)operator(()ident(charno)operator(,) ident(lineno)operator(\))operator(,)
                        ident(temp)operator(,)
                        ident(font) operator(=) predefined_constant(self)operator(.)ident(_get_style_font)operator(()ident(style)operator(\))operator(,)
                        ident(fill) operator(=) predefined_constant(self)operator(.)ident(_get_text_color)operator(()ident(style)operator(\))
                    operator(\))
                    ident(charno) operator(+=) predefined(len)operator(()ident(temp)operator(\))
                    ident(maxcharno) operator(=) predefined(max)operator(()ident(maxcharno)operator(,) ident(charno)operator(\))
                keyword(if) ident(line)operator(.)ident(endswith)operator(()string<delimiter(')char(\\n)delimiter(')>operator(\))operator(:)
                    comment(# add a line for each extra line in the value)
                    ident(charno) operator(=) integer(0)
                    ident(lineno) operator(+=) integer(1)
        predefined_constant(self)operator(.)ident(maxcharno) operator(=) ident(maxcharno)
        predefined_constant(self)operator(.)ident(maxlineno) operator(=) ident(lineno)

    keyword(def) method(_draw_line_numbers)operator(()predefined_constant(self)operator(\))operator(:)
        docstring<delimiter(""")content(
)content(        Create drawables for the line numbers.)content(
)content(        )delimiter(""")>
        keyword(if) keyword(not) predefined_constant(self)operator(.)ident(line_numbers)operator(:)
            keyword(return)
        keyword(for) ident(i) keyword(in) predefined(xrange)operator(()predefined_constant(self)operator(.)ident(maxlineno)operator(\))operator(:)
            keyword(if) operator(()operator(()ident(i) operator(+) integer(1)operator(\)) operator(%) predefined_constant(self)operator(.)ident(line_number_step)operator(\)) operator(==) integer(0)operator(:)
                predefined_constant(self)operator(.)ident(_draw_linenumber)operator(()ident(i)operator(\))

    keyword(def) method(_paint_line_number_bg)operator(()predefined_constant(self)operator(,) ident(im)operator(\))operator(:)
        docstring<delimiter(""")content(
)content(        Paint the line number background on the image.)content(
)content(        )delimiter(""")>
        keyword(if) keyword(not) predefined_constant(self)operator(.)ident(line_numbers)operator(:)
            keyword(return)
        keyword(if) predefined_constant(self)operator(.)ident(line_number_fg) keyword(is) predefined_constant(None)operator(:)
            keyword(return)
        ident(draw) operator(=) ident(ImageDraw)operator(.)ident(Draw)operator(()ident(im)operator(\))
        ident(recth) operator(=) ident(im)operator(.)ident(size)operator([)operator(-)integer(1)operator(])
        ident(rectw) operator(=) predefined_constant(self)operator(.)ident(image_pad) operator(+) predefined_constant(self)operator(.)ident(line_number_width) operator(-) predefined_constant(self)operator(.)ident(line_number_pad)
        ident(draw)operator(.)ident(rectangle)operator(()operator([)operator(()integer(0)operator(,) integer(0)operator(\))operator(,)
                        operator(()ident(rectw)operator(,) ident(recth)operator(\))operator(])operator(,)
             ident(fill)operator(=)predefined_constant(self)operator(.)ident(line_number_bg)operator(\))
        ident(draw)operator(.)ident(line)operator(()operator([)operator(()ident(rectw)operator(,) integer(0)operator(\))operator(,) operator(()ident(rectw)operator(,) ident(recth)operator(\))operator(])operator(,) ident(fill)operator(=)predefined_constant(self)operator(.)ident(line_number_fg)operator(\))
        keyword(del) ident(draw)

    keyword(def) method(format)operator(()predefined_constant(self)operator(,) ident(tokensource)operator(,) ident(outfile)operator(\))operator(:)
        docstring<delimiter(""")content(
)content(        Format ``tokensource``, an iterable of ``(tokentype, tokenstring\)``)content(
)content(        tuples and write it into ``outfile``.)content(
)content(
)content(        This implementation calculates where it should draw each token on the)content(
)content(        pixmap, then calculates the required pixmap size and draws the items.)content(
)content(        )delimiter(""")>
        predefined_constant(self)operator(.)ident(_create_drawables)operator(()ident(tokensource)operator(\))
        predefined_constant(self)operator(.)ident(_draw_line_numbers)operator(()operator(\))
        ident(im) operator(=) ident(Image)operator(.)ident(new)operator(()
            string<delimiter(')content(RGB)delimiter(')>operator(,)
            predefined_constant(self)operator(.)ident(_get_image_size)operator(()predefined_constant(self)operator(.)ident(maxcharno)operator(,) predefined_constant(self)operator(.)ident(maxlineno)operator(\))operator(,)
            predefined_constant(self)operator(.)ident(background_color)
        operator(\))
        predefined_constant(self)operator(.)ident(_paint_line_number_bg)operator(()ident(im)operator(\))
        ident(draw) operator(=) ident(ImageDraw)operator(.)ident(Draw)operator(()ident(im)operator(\))
        keyword(for) ident(pos)operator(,) ident(value)operator(,) ident(font)operator(,) ident(kw) keyword(in) predefined_constant(self)operator(.)ident(drawables)operator(:)
            ident(draw)operator(.)ident(text)operator(()ident(pos)operator(,) ident(value)operator(,) ident(font)operator(=)ident(font)operator(,) operator(**)ident(kw)operator(\))
        ident(im)operator(.)ident(save)operator(()ident(outfile)operator(,) predefined_constant(self)operator(.)ident(image_format)operator(.)ident(upper)operator(()operator(\))operator(\))


comment(# Add one formatter per format, so that the "-f gif" option gives the correct result)
comment(# when used in pygmentize.)

keyword(class) class(GifImageFormatter)operator(()ident(ImageFormatter)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Create a GIF image from source code. This uses the Python Imaging Library to)content(
)content(    generate a pixmap from the source code.)content(
)content(
)content(    *New in Pygments 1.0.* (You could create GIF images before by passing a)content(
)content(    suitable `image_format` option to the `ImageFormatter`.\))content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(img_gif)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(gif)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.gif)delimiter(')>operator(])
    ident(default_image_format) operator(=) string<delimiter(')content(gif)delimiter(')>


keyword(class) class(JpgImageFormatter)operator(()ident(ImageFormatter)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Create a JPEG image from source code. This uses the Python Imaging Library to)content(
)content(    generate a pixmap from the source code.)content(
)content(
)content(    *New in Pygments 1.0.* (You could create JPEG images before by passing a)content(
)content(    suitable `image_format` option to the `ImageFormatter`.\))content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(img_jpg)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(jpg)delimiter(')>operator(,) string<delimiter(')content(jpeg)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.jpg)delimiter(')>operator(])
    ident(default_image_format) operator(=) string<delimiter(')content(jpeg)delimiter(')>


keyword(class) class(BmpImageFormatter)operator(()ident(ImageFormatter)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Create a bitmap image from source code. This uses the Python Imaging Library to)content(
)content(    generate a pixmap from the source code.)content(
)content(
)content(    *New in Pygments 1.0.* (You could create bitmap images before by passing a)content(
)content(    suitable `image_format` option to the `ImageFormatter`.\))content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(img_bmp)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(bmp)delimiter(')>operator(,) string<delimiter(')content(bitmap)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.bmp)delimiter(')>operator(])
    ident(default_image_format) operator(=) string<delimiter(')content(bmp)delimiter(')>
comment(# -*- coding: utf-8 -*-)
docstring<delimiter(""")content(
)content(    pygments.formatters.latex)content(
)content(    ~~~~~~~~~~~~~~~~~~~~~~~~~)content(
)content(
)content(    Formatter for LaTeX fancyvrb output.)content(
)content(
)content(    :copyright: Copyright 2006-2009 by the Pygments team, see AUTHORS.)content(
)content(    :license: BSD, see LICENSE for details.)content(
)delimiter(""")>

keyword(from) include(pygments.formatter) keyword(import) include(Formatter)
keyword(from) include(pygments.token) keyword(import) include(Token)operator(,) include(STANDARD_TYPES)
keyword(from) include(pygments.util) keyword(import) include(get_bool_opt)operator(,) include(get_int_opt)operator(,) include(StringIO)


ident(__all__) operator(=) operator([)string<delimiter(')content(LatexFormatter)delimiter(')>operator(])


keyword(def) method(escape_tex)operator(()ident(text)operator(,) ident(commandprefix)operator(\))operator(:)
    keyword(return) ident(text)operator(.)ident(replace)operator(()string<delimiter(')content(@)delimiter(')>operator(,) string<delimiter(')char(\\x00)delimiter(')>operator(\))operator(.)    \
                ident(replace)operator(()string<delimiter(')content([)delimiter(')>operator(,) string<delimiter(')char(\\x01)delimiter(')>operator(\))operator(.)    \
                ident(replace)operator(()string<delimiter(')content(])delimiter(')>operator(,) string<delimiter(')char(\\x02)delimiter(')>operator(\))operator(.)    \
                ident(replace)operator(()string<delimiter(')char(\\x00)delimiter(')>operator(,) string<delimiter(')content(@%sZat[])delimiter(')> operator(%) ident(commandprefix)operator(\))operator(.)\
                ident(replace)operator(()string<delimiter(')char(\\x01)delimiter(')>operator(,) string<delimiter(')content(@%sZlb[])delimiter(')> operator(%) ident(commandprefix)operator(\))operator(.)\
                ident(replace)operator(()string<delimiter(')char(\\x02)delimiter(')>operator(,) string<delimiter(')content(@%sZrb[])delimiter(')> operator(%) ident(commandprefix)operator(\))


ident(DOC_TEMPLATE) operator(=) string<modifier(r)delimiter(''')content(
)content(\\d)content(ocumentclass{%(docclass\)s})content(
)content(\\u)content(sepackage{fancyvrb})content(
)content(\\u)content(sepackage{color})content(
)content(\\u)content(sepackage[%(encoding\)s]{inputenc})content(
)content(%(preamble\)s)content(
)content(
)content(%(styledefs\)s)content(
)content(
)content(\\b)content(egin{document})content(
)content(
)content(\\s)content(ection*{%(title\)s})content(
)content(
)content(%(code\)s)content(
)content(\\e)content(nd{document})content(
)delimiter(''')>

comment(## Small explanation of the mess below :\))
comment(#)
comment(# The previous version of the LaTeX formatter just assigned a command to)
comment(# each token type defined in the current style.  That obviously is)
comment(# problematic if the highlighted code is produced for a different style)
comment(# than the style commands themselves.)
comment(#)
comment(# This version works much like the HTML formatter which assigns multiple)
comment(# CSS classes to each <span> tag, from the most specific to the least)
comment(# specific token type, thus falling back to the parent token type if one)
comment(# is not defined.  Here, the classes are there too and use the same short)
comment(# forms given in token.STANDARD_TYPES.)
comment(#)
comment(# Highlighted code now only uses one custom command, which by default is)
comment(# \\PY and selectable by the commandprefix option (and in addition the)
comment(# escapes \\PYZat, \\PYZlb and \\PYZrb which haven't been renamed for)
comment(# backwards compatibility purposes\).)
comment(#)
comment(# \\PY has two arguments: the classes, separated by +, and the text to)
comment(# render in that style.  The classes are resolved into the respective)
comment(# style commands by magic, which serves to ignore unknown classes.)
comment(#)
comment(# The magic macros are:)
comment(# * \\PY@it, \\PY@bf, etc. are unconditionally wrapped around the text)
comment(#   to render in \\PY@do.  Their definition determines the style.)
comment(# * \\PY@reset resets \\PY@it etc. to do nothing.)
comment(# * \\PY@toks parses the list of classes, using magic inspired by the)
comment(#   keyval package (but modified to use plusses instead of commas)
comment(#   because fancyvrb redefines commas inside its environments\).)
comment(# * \\PY@tok processes one class, calling the \\PY@tok@classname command)
comment(#   if it exists.)
comment(# * \\PY@tok@classname sets the \\PY@it etc. to reflect the chosen style)
comment(#   for its class.)
comment(# * \\PY resets the style, parses the classnames and then calls \\PY@do.)

ident(STYLE_TEMPLATE) operator(=) string<modifier(r)delimiter(''')content(
)content(\\m)content(akeatletter)content(
)content(\\d)content(ef)content(\\%)content((cp\)s@reset{)content(\\l)content(et)content(\\%)content((cp\)s@it=)content(\\r)content(elax )content(\\l)content(et)content(\\%)content((cp\)s@bf=)content(\\r)content(elax%%)content(
)content(    )content(\\l)content(et)content(\\%)content((cp\)s@ul=)content(\\r)content(elax )content(\\l)content(et)content(\\%)content((cp\)s@tc=)content(\\r)content(elax%%)content(
)content(    )content(\\l)content(et)content(\\%)content((cp\)s@bc=)content(\\r)content(elax )content(\\l)content(et)content(\\%)content((cp\)s@ff=)content(\\r)content(elax})content(
)content(\\d)content(ef)content(\\%)content((cp\)s@tok#1{)content(\\c)content(sname %(cp\)s@tok@#1)content(\\e)content(ndcsname})content(
)content(\\d)content(ef)content(\\%)content((cp\)s@toks#1+{)content(\\i)content(fx)content(\\r)content(elax#1)content(\\e)content(mpty)content(\\e)content(lse%%)content(
)content(    )content(\\%)content((cp\)s@tok{#1})content(\\e)content(xpandafter)content(\\%)content((cp\)s@toks)content(\\f)content(i})content(
)content(\\d)content(ef)content(\\%)content((cp\)s@do#1{)content(\\%)content((cp\)s@bc{)content(\\%)content((cp\)s@tc{)content(\\%)content((cp\)s@ul{%%)content(
)content(    )content(\\%)content((cp\)s@it{)content(\\%)content((cp\)s@bf{)content(\\%)content((cp\)s@ff{#1}}}}}}})content(
)content(\\d)content(ef)content(\\%)content((cp\)s#1#2{)content(\\%)content((cp\)s@reset)content(\\%)content((cp\)s@toks#1+)content(\\r)content(elax+)content(\\%)content((cp\)s@do{#2}})content(
)content(
)content(%(styles\)s)content(
)content(
)content(\\d)content(ef)content(\\%)content((cp\)sZat{@})content(
)content(\\d)content(ef)content(\\%)content((cp\)sZlb{[})content(
)content(\\d)content(ef)content(\\%)content((cp\)sZrb{]})content(
)content(\\m)content(akeatother)content(
)delimiter(''')>


keyword(def) method(_get_ttype_name)operator(()ident(ttype)operator(\))operator(:)
    ident(fname) operator(=) ident(STANDARD_TYPES)operator(.)ident(get)operator(()ident(ttype)operator(\))
    keyword(if) ident(fname)operator(:)
        keyword(return) ident(fname)
    ident(aname) operator(=) string<delimiter(')delimiter(')>
    keyword(while) ident(fname) keyword(is) predefined_constant(None)operator(:)
        ident(aname) operator(=) ident(ttype)operator([)operator(-)integer(1)operator(]) operator(+) ident(aname)
        ident(ttype) operator(=) ident(ttype)operator(.)ident(parent)
        ident(fname) operator(=) ident(STANDARD_TYPES)operator(.)ident(get)operator(()ident(ttype)operator(\))
    keyword(return) ident(fname) operator(+) ident(aname)


keyword(class) class(LatexFormatter)operator(()ident(Formatter)operator(\))operator(:)
    docstring<modifier(r)delimiter(""")content(
)content(    Format tokens as LaTeX code. This needs the `fancyvrb` and `color`)content(
)content(    standard packages.)content(
)content(
)content(    Without the `full` option, code is formatted as one ``Verbatim``)content(
)content(    environment, like this:)content(
)content(
)content(    .. sourcecode:: latex)content(
)content(
)content(        )content(\\b)content(egin{Verbatim}[commandchars=@)content(\\[)content(\\])content(])content(
)content(        @PY[k][def ]@PY[n+nf][foo](@PY[n][bar]\):)content(
)content(            @PY[k][pass])content(
)content(        )content(\\e)content(nd{Verbatim})content(
)content(
)content(    The special command used here (``@PY``\) and all the other macros it needs)content(
)content(    are output by the `get_style_defs` method.)content(
)content(
)content(    With the `full` option, a complete LaTeX document is output, including)content(
)content(    the command definitions in the preamble.)content(
)content(
)content(    The `get_style_defs(\)` method of a `LatexFormatter` returns a string)content(
)content(    containing ``)content(\\d)content(ef`` commands defining the macros needed inside the)content(
)content(    ``Verbatim`` environments.)content(
)content(
)content(    Additional options accepted:)content(
)content(
)content(    `style`)content(
)content(        The style to use, can be a string or a Style subclass (default:)content(
)content(        ``'default'``\).)content(
)content(
)content(    `full`)content(
)content(        Tells the formatter to output a "full" document, i.e. a complete)content(
)content(        self-contained document (default: ``False``\).)content(
)content(
)content(    `title`)content(
)content(        If `full` is true, the title that should be used to caption the)content(
)content(        document (default: ``''``\).)content(
)content(
)content(    `docclass`)content(
)content(        If the `full` option is enabled, this is the document class to use)content(
)content(        (default: ``'article'``\).)content(
)content(
)content(    `preamble`)content(
)content(        If the `full` option is enabled, this can be further preamble commands,)content(
)content(        e.g. ``)content(\\u)content(sepackage`` (default: ``''``\).)content(
)content(
)content(    `linenos`)content(
)content(        If set to ``True``, output line numbers (default: ``False``\).)content(
)content(
)content(    `linenostart`)content(
)content(        The line number for the first line (default: ``1``\).)content(
)content(
)content(    `linenostep`)content(
)content(        If set to a number n > 1, only every nth line number is printed.)content(
)content(
)content(    `verboptions`)content(
)content(        Additional options given to the Verbatim environment (see the *fancyvrb*)content(
)content(        docs for possible values\) (default: ``''``\).)content(
)content(
)content(    `commandprefix`)content(
)content(        The LaTeX commands used to produce colored output are constructed)content(
)content(        using this prefix and some letters (default: ``'PY'``\).)content(
)content(        *New in Pygments 0.7.*)content(
)content(
)content(        *New in Pygments 0.10:* the default is now ``'PY'`` instead of ``'C'``.)content(
)content(    )delimiter(""")>
    ident(name) operator(=) string<delimiter(')content(LaTeX)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(latex)delimiter(')>operator(,) string<delimiter(')content(tex)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.tex)delimiter(')>operator(])

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))operator(:)
        ident(Formatter)operator(.)ident(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))
        predefined_constant(self)operator(.)ident(docclass) operator(=) ident(options)operator(.)ident(get)operator(()string<delimiter(')content(docclass)delimiter(')>operator(,) string<delimiter(')content(article)delimiter(')>operator(\))
        predefined_constant(self)operator(.)ident(preamble) operator(=) ident(options)operator(.)ident(get)operator(()string<delimiter(')content(preamble)delimiter(')>operator(,) string<delimiter(')delimiter(')>operator(\))
        predefined_constant(self)operator(.)ident(linenos) operator(=) ident(get_bool_opt)operator(()ident(options)operator(,) string<delimiter(')content(linenos)delimiter(')>operator(,) predefined_constant(False)operator(\))
        predefined_constant(self)operator(.)ident(linenostart) operator(=) predefined(abs)operator(()ident(get_int_opt)operator(()ident(options)operator(,) string<delimiter(')content(linenostart)delimiter(')>operator(,) integer(1)operator(\))operator(\))
        predefined_constant(self)operator(.)ident(linenostep) operator(=) predefined(abs)operator(()ident(get_int_opt)operator(()ident(options)operator(,) string<delimiter(')content(linenostep)delimiter(')>operator(,) integer(1)operator(\))operator(\))
        predefined_constant(self)operator(.)ident(verboptions) operator(=) ident(options)operator(.)ident(get)operator(()string<delimiter(')content(verboptions)delimiter(')>operator(,) string<delimiter(')delimiter(')>operator(\))
        predefined_constant(self)operator(.)ident(nobackground) operator(=) ident(get_bool_opt)operator(()ident(options)operator(,) string<delimiter(')content(nobackground)delimiter(')>operator(,) predefined_constant(False)operator(\))
        predefined_constant(self)operator(.)ident(commandprefix) operator(=) ident(options)operator(.)ident(get)operator(()string<delimiter(')content(commandprefix)delimiter(')>operator(,) string<delimiter(')content(PY)delimiter(')>operator(\))

        predefined_constant(self)operator(.)ident(_create_stylesheet)operator(()operator(\))


    keyword(def) method(_create_stylesheet)operator(()predefined_constant(self)operator(\))operator(:)
        ident(t2n) operator(=) predefined_constant(self)operator(.)ident(ttype2name) operator(=) operator({)ident(Token)operator(:) string<delimiter(')delimiter(')>operator(})
        ident(c2d) operator(=) predefined_constant(self)operator(.)ident(cmd2def) operator(=) operator({)operator(})
        ident(cp) operator(=) predefined_constant(self)operator(.)ident(commandprefix)

        keyword(def) method(rgbcolor)operator(()ident(col)operator(\))operator(:)
            keyword(if) ident(col)operator(:)
                keyword(return) string<delimiter(')content(,)delimiter(')>operator(.)ident(join)operator(()operator([)string<delimiter(')content(%.2f)delimiter(')> operator(%)operator(()predefined(int)operator(()ident(col)operator([)ident(i)operator(]) operator(+) ident(col)operator([)ident(i) operator(+) integer(1)operator(])operator(,) integer(16)operator(\)) operator(/) float(255.0)operator(\))
                                 keyword(for) ident(i) keyword(in) operator(()integer(0)operator(,) integer(2)operator(,) integer(4)operator(\))operator(])operator(\))
            keyword(else)operator(:)
                keyword(return) string<delimiter(')content(1,1,1)delimiter(')>

        keyword(for) ident(ttype)operator(,) ident(ndef) keyword(in) predefined_constant(self)operator(.)ident(style)operator(:)
            ident(name) operator(=) ident(_get_ttype_name)operator(()ident(ttype)operator(\))
            ident(cmndef) operator(=) string<delimiter(')delimiter(')>
            keyword(if) ident(ndef)operator([)string<delimiter(')content(bold)delimiter(')>operator(])operator(:)
                ident(cmndef) operator(+=) string<modifier(r)delimiter(')content(\\l)content(et)content(\\$)content($@bf=)content(\\t)content(extbf)delimiter(')>
            keyword(if) ident(ndef)operator([)string<delimiter(')content(italic)delimiter(')>operator(])operator(:)
                ident(cmndef) operator(+=) string<modifier(r)delimiter(')content(\\l)content(et)content(\\$)content($@it=)content(\\t)content(extit)delimiter(')>
            keyword(if) ident(ndef)operator([)string<delimiter(')content(underline)delimiter(')>operator(])operator(:)
                ident(cmndef) operator(+=) string<modifier(r)delimiter(')content(\\l)content(et)content(\\$)content($@ul=)content(\\u)content(nderline)delimiter(')>
            keyword(if) ident(ndef)operator([)string<delimiter(')content(roman)delimiter(')>operator(])operator(:)
                ident(cmndef) operator(+=) string<modifier(r)delimiter(')content(\\l)content(et)content(\\$)content($@ff=)content(\\t)content(extrm)delimiter(')>
            keyword(if) ident(ndef)operator([)string<delimiter(')content(sans)delimiter(')>operator(])operator(:)
                ident(cmndef) operator(+=) string<modifier(r)delimiter(')content(\\l)content(et)content(\\$)content($@ff=)content(\\t)content(extsf)delimiter(')>
            keyword(if) ident(ndef)operator([)string<delimiter(')content(mono)delimiter(')>operator(])operator(:)
                ident(cmndef) operator(+=) string<modifier(r)delimiter(')content(\\l)content(et)content(\\$)content($@ff=)content(\\t)content(extsf)delimiter(')>
            keyword(if) ident(ndef)operator([)string<delimiter(')content(color)delimiter(')>operator(])operator(:)
                ident(cmndef) operator(+=) operator(()string<modifier(r)delimiter(')content(\\d)content(ef)content(\\$)content($@tc##1{)content(\\t)content(extcolor[rgb]{%s}{##1}})delimiter(')> operator(%)
                           ident(rgbcolor)operator(()ident(ndef)operator([)string<delimiter(')content(color)delimiter(')>operator(])operator(\))operator(\))
            keyword(if) ident(ndef)operator([)string<delimiter(')content(border)delimiter(')>operator(])operator(:)
                ident(cmndef) operator(+=) operator(()string<modifier(r)delimiter(')content(\\d)content(ef)content(\\$)content($@bc##1{)content(\\f)content(colorbox[rgb]{%s}{%s}{##1}})delimiter(')> operator(%)
                           operator(()ident(rgbcolor)operator(()ident(ndef)operator([)string<delimiter(')content(border)delimiter(')>operator(])operator(\))operator(,)
                            ident(rgbcolor)operator(()ident(ndef)operator([)string<delimiter(')content(bgcolor)delimiter(')>operator(])operator(\))operator(\))operator(\))
            keyword(elif) ident(ndef)operator([)string<delimiter(')content(bgcolor)delimiter(')>operator(])operator(:)
                ident(cmndef) operator(+=) operator(()string<modifier(r)delimiter(')content(\\d)content(ef)content(\\$)content($@bc##1{)content(\\c)content(olorbox[rgb]{%s}{##1}})delimiter(')> operator(%)
                           ident(rgbcolor)operator(()ident(ndef)operator([)string<delimiter(')content(bgcolor)delimiter(')>operator(])operator(\))operator(\))
            keyword(if) ident(cmndef) operator(==) string<delimiter(')delimiter(')>operator(:)
                keyword(continue)
            ident(cmndef) operator(=) ident(cmndef)operator(.)ident(replace)operator(()string<delimiter(')content($$)delimiter(')>operator(,) ident(cp)operator(\))
            ident(t2n)operator([)ident(ttype)operator(]) operator(=) ident(name)
            ident(c2d)operator([)ident(name)operator(]) operator(=) ident(cmndef)

    keyword(def) method(get_style_defs)operator(()predefined_constant(self)operator(,) ident(arg)operator(=)string<delimiter(')delimiter(')>operator(\))operator(:)
        docstring<delimiter(""")content(
)content(        Return the command sequences needed to define the commands)content(
)content(        used to format text in the verbatim environment. ``arg`` is ignored.)content(
)content(        )delimiter(""")>
        ident(cp) operator(=) predefined_constant(self)operator(.)ident(commandprefix)
        ident(styles) operator(=) operator([)operator(])
        keyword(for) ident(name)operator(,) ident(definition) keyword(in) predefined_constant(self)operator(.)ident(cmd2def)operator(.)ident(iteritems)operator(()operator(\))operator(:)
            ident(styles)operator(.)ident(append)operator(()string<modifier(r)delimiter(')content(\\d)content(ef)content(\\%)content(s@tok@%s{%s})delimiter(')> operator(%) operator(()ident(cp)operator(,) ident(name)operator(,) ident(definition)operator(\))operator(\))
        keyword(return) ident(STYLE_TEMPLATE) operator(%) operator({)string<delimiter(')content(cp)delimiter(')>operator(:) predefined_constant(self)operator(.)ident(commandprefix)operator(,)
                                 string<delimiter(')content(styles)delimiter(')>operator(:) string<delimiter(')char(\\n)delimiter(')>operator(.)ident(join)operator(()ident(styles)operator(\))operator(})

    keyword(def) method(format_unencoded)operator(()predefined_constant(self)operator(,) ident(tokensource)operator(,) ident(outfile)operator(\))operator(:)
        comment(# TODO: add support for background colors)
        ident(t2n) operator(=) predefined_constant(self)operator(.)ident(ttype2name)
        ident(cp) operator(=) predefined_constant(self)operator(.)ident(commandprefix)

        keyword(if) predefined_constant(self)operator(.)ident(full)operator(:)
            ident(realoutfile) operator(=) ident(outfile)
            ident(outfile) operator(=) ident(StringIO)operator(()operator(\))

        ident(outfile)operator(.)ident(write)operator(()string<modifier(r)delimiter(')content(\\b)content(egin{Verbatim}[commandchars=@)content(\\[)content(\\])delimiter(')>operator(\))
        keyword(if) predefined_constant(self)operator(.)ident(linenos)operator(:)
            ident(start)operator(,) ident(step) operator(=) predefined_constant(self)operator(.)ident(linenostart)operator(,) predefined_constant(self)operator(.)ident(linenostep)
            ident(outfile)operator(.)ident(write)operator(()string<delimiter(')content(,numbers=left)delimiter(')> operator(+)
                          operator(()ident(start) keyword(and) string<delimiter(')content(,firstnumber=%d)delimiter(')> operator(%) ident(start) keyword(or) string<delimiter(')delimiter(')>operator(\)) operator(+)
                          operator(()ident(step) keyword(and) string<delimiter(')content(,stepnumber=%d)delimiter(')> operator(%) ident(step) keyword(or) string<delimiter(')delimiter(')>operator(\))operator(\))
        keyword(if) predefined_constant(self)operator(.)ident(verboptions)operator(:)
            ident(outfile)operator(.)ident(write)operator(()string<delimiter(')content(,)delimiter(')> operator(+) predefined_constant(self)operator(.)ident(verboptions)operator(\))
        ident(outfile)operator(.)ident(write)operator(()string<delimiter(')content(])char(\\n)delimiter(')>operator(\))

        keyword(for) ident(ttype)operator(,) ident(value) keyword(in) ident(tokensource)operator(:)
            ident(value) operator(=) ident(escape_tex)operator(()ident(value)operator(,) predefined_constant(self)operator(.)ident(commandprefix)operator(\))
            ident(styles) operator(=) operator([)operator(])
            keyword(while) ident(ttype) keyword(is) keyword(not) ident(Token)operator(:)
                keyword(try)operator(:)
                    ident(styles)operator(.)ident(append)operator(()ident(t2n)operator([)ident(ttype)operator(])operator(\))
                keyword(except) exception(KeyError)operator(:)
                    comment(# not in current style)
                    ident(styles)operator(.)ident(append)operator(()ident(_get_ttype_name)operator(()ident(ttype)operator(\))operator(\))
                ident(ttype) operator(=) ident(ttype)operator(.)ident(parent)
            ident(styleval) operator(=) string<delimiter(')content(+)delimiter(')>operator(.)ident(join)operator(()predefined(reversed)operator(()ident(styles)operator(\))operator(\))
            keyword(if) ident(styleval)operator(:)
                ident(spl) operator(=) ident(value)operator(.)ident(split)operator(()string<delimiter(')char(\\n)delimiter(')>operator(\))
                keyword(for) ident(line) keyword(in) ident(spl)operator([)operator(:)operator(-)integer(1)operator(])operator(:)
                    keyword(if) ident(line)operator(:)
                        ident(outfile)operator(.)ident(write)operator(()string<delimiter(")content(@%s[%s][%s])delimiter(")> operator(%) operator(()ident(cp)operator(,) ident(styleval)operator(,) ident(line)operator(\))operator(\))
                    ident(outfile)operator(.)ident(write)operator(()string<delimiter(')char(\\n)delimiter(')>operator(\))
                keyword(if) ident(spl)operator([)operator(-)integer(1)operator(])operator(:)
                    ident(outfile)operator(.)ident(write)operator(()string<delimiter(")content(@%s[%s][%s])delimiter(")> operator(%) operator(()ident(cp)operator(,) ident(styleval)operator(,) ident(spl)operator([)operator(-)integer(1)operator(])operator(\))operator(\))
            keyword(else)operator(:)
                ident(outfile)operator(.)ident(write)operator(()ident(value)operator(\))

        ident(outfile)operator(.)ident(write)operator(()string<delimiter(')char(\\\\)content(end{Verbatim})char(\\n)delimiter(')>operator(\))

        keyword(if) predefined_constant(self)operator(.)ident(full)operator(:)
            ident(realoutfile)operator(.)ident(write)operator(()ident(DOC_TEMPLATE) operator(%)
                predefined(dict)operator(()ident(docclass)  operator(=) predefined_constant(self)operator(.)ident(docclass)operator(,)
                     ident(preamble)  operator(=) predefined_constant(self)operator(.)ident(preamble)operator(,)
                     ident(title)     operator(=) predefined_constant(self)operator(.)ident(title)operator(,)
                     ident(encoding)  operator(=) predefined_constant(self)operator(.)ident(encoding) keyword(or) string<delimiter(')content(latin1)delimiter(')>operator(,)
                     ident(styledefs) operator(=) predefined_constant(self)operator(.)ident(get_style_defs)operator(()operator(\))operator(,)
                     ident(code)      operator(=) ident(outfile)operator(.)ident(getvalue)operator(()operator(\))operator(\))operator(\))
comment(# -*- coding: utf-8 -*-)
docstring<delimiter(""")content(
)content(    pygments.formatters.other)content(
)content(    ~~~~~~~~~~~~~~~~~~~~~~~~~)content(
)content(
)content(    Other formatters: NullFormatter, RawTokenFormatter.)content(
)content(
)content(    :copyright: Copyright 2006-2009 by the Pygments team, see AUTHORS.)content(
)content(    :license: BSD, see LICENSE for details.)content(
)delimiter(""")>

keyword(from) include(pygments.formatter) keyword(import) include(Formatter)
keyword(from) include(pygments.util) keyword(import) include(OptionError)operator(,) include(get_choice_opt)operator(,) include(b)
keyword(from) include(pygments.token) keyword(import) include(Token)
keyword(from) include(pygments.console) keyword(import) include(colorize)

ident(__all__) operator(=) operator([)string<delimiter(')content(NullFormatter)delimiter(')>operator(,) string<delimiter(')content(RawTokenFormatter)delimiter(')>operator(])


keyword(class) class(NullFormatter)operator(()ident(Formatter)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Output the text unchanged without any formatting.)content(
)content(    )delimiter(""")>
    ident(name) operator(=) string<delimiter(')content(Text only)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(text)delimiter(')>operator(,) string<delimiter(')content(null)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.txt)delimiter(')>operator(])

    keyword(def) method(format)operator(()predefined_constant(self)operator(,) ident(tokensource)operator(,) ident(outfile)operator(\))operator(:)
        ident(enc) operator(=) predefined_constant(self)operator(.)ident(encoding)
        keyword(for) ident(ttype)operator(,) ident(value) keyword(in) ident(tokensource)operator(:)
            keyword(if) ident(enc)operator(:)
                ident(outfile)operator(.)ident(write)operator(()ident(value)operator(.)ident(encode)operator(()ident(enc)operator(\))operator(\))
            keyword(else)operator(:)
                ident(outfile)operator(.)ident(write)operator(()ident(value)operator(\))


keyword(class) class(RawTokenFormatter)operator(()ident(Formatter)operator(\))operator(:)
    docstring<modifier(r)delimiter(""")content(
)content(    Format tokens as a raw representation for storing token streams.)content(
)content(
)content(    The format is ``tokentype<TAB>repr(tokenstring\))content(\\n)content(``. The output can later)content(
)content(    be converted to a token stream with the `RawTokenLexer`, described in the)content(
)content(    `lexer list <lexers.txt>`_.)content(
)content(
)content(    Only two options are accepted:)content(
)content(
)content(    `compress`)content(
)content(        If set to ``'gz'`` or ``'bz2'``, compress the output with the given)content(
)content(        compression algorithm after encoding (default: ``''``\).)content(
)content(    `error_color`)content(
)content(        If set to a color name, highlight error tokens using that color.  If)content(
)content(        set but with no value, defaults to ``'red'``.)content(
)content(        *New in Pygments 0.11.*)content(
)content(
)content(    )delimiter(""")>
    ident(name) operator(=) string<delimiter(')content(Raw tokens)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(raw)delimiter(')>operator(,) string<delimiter(')content(tokens)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.raw)delimiter(')>operator(])

    ident(unicodeoutput) operator(=) predefined_constant(False)

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))operator(:)
        ident(Formatter)operator(.)ident(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))
        keyword(if) predefined_constant(self)operator(.)ident(encoding)operator(:)
            keyword(raise) ident(OptionError)operator(()string<delimiter(')content(the raw formatter does not support the )delimiter(')>
                              string<delimiter(')content(encoding option)delimiter(')>operator(\))
        predefined_constant(self)operator(.)ident(encoding) operator(=) string<delimiter(')content(ascii)delimiter(')>  comment(# let pygments.format(\) do the right thing)
        predefined_constant(self)operator(.)ident(compress) operator(=) ident(get_choice_opt)operator(()ident(options)operator(,) string<delimiter(')content(compress)delimiter(')>operator(,)
                                       operator([)string<delimiter(')delimiter(')>operator(,) string<delimiter(')content(none)delimiter(')>operator(,) string<delimiter(')content(gz)delimiter(')>operator(,) string<delimiter(')content(bz2)delimiter(')>operator(])operator(,) string<delimiter(')delimiter(')>operator(\))
        predefined_constant(self)operator(.)ident(error_color) operator(=) ident(options)operator(.)ident(get)operator(()string<delimiter(')content(error_color)delimiter(')>operator(,) predefined_constant(None)operator(\))
        keyword(if) predefined_constant(self)operator(.)ident(error_color) keyword(is) predefined_constant(True)operator(:)
            predefined_constant(self)operator(.)ident(error_color) operator(=) string<delimiter(')content(red)delimiter(')>
        keyword(if) predefined_constant(self)operator(.)ident(error_color) keyword(is) keyword(not) predefined_constant(None)operator(:)
            keyword(try)operator(:)
                ident(colorize)operator(()predefined_constant(self)operator(.)ident(error_color)operator(,) string<delimiter(')delimiter(')>operator(\))
            keyword(except) exception(KeyError)operator(:)
                keyword(raise) exception(ValueError)operator(()string<delimiter(")content(Invalid color %r specified)delimiter(")> operator(%)
                                 predefined_constant(self)operator(.)ident(error_color)operator(\))

    keyword(def) method(format)operator(()predefined_constant(self)operator(,) ident(tokensource)operator(,) ident(outfile)operator(\))operator(:)
        keyword(try)operator(:)
            ident(outfile)operator(.)ident(write)operator(()ident(b)operator(()string<delimiter(')delimiter(')>operator(\))operator(\))
        keyword(except) exception(TypeError)operator(:)
            keyword(raise) exception(TypeError)operator(()string<delimiter(')content(The raw tokens formatter needs a binary )delimiter(')>
                            string<delimiter(')content(output file)delimiter(')>operator(\))
        keyword(if) predefined_constant(self)operator(.)ident(compress) operator(==) string<delimiter(')content(gz)delimiter(')>operator(:)
            keyword(import) include(gzip)
            ident(outfile) operator(=) ident(gzip)operator(.)ident(GzipFile)operator(()string<delimiter(')delimiter(')>operator(,) string<delimiter(')content(wb)delimiter(')>operator(,) integer(9)operator(,) ident(outfile)operator(\))
            keyword(def) method(write)operator(()ident(text)operator(\))operator(:)
                ident(outfile)operator(.)ident(write)operator(()ident(text)operator(.)ident(encode)operator(()operator(\))operator(\))
            ident(flush) operator(=) ident(outfile)operator(.)ident(flush)
        keyword(elif) predefined_constant(self)operator(.)ident(compress) operator(==) string<delimiter(')content(bz2)delimiter(')>operator(:)
            keyword(import) include(bz2)
            ident(compressor) operator(=) ident(bz2)operator(.)ident(BZ2Compressor)operator(()integer(9)operator(\))
            keyword(def) method(write)operator(()ident(text)operator(\))operator(:)
                ident(outfile)operator(.)ident(write)operator(()ident(compressor)operator(.)ident(compress)operator(()ident(text)operator(.)ident(encode)operator(()operator(\))operator(\))operator(\))
            keyword(def) method(flush)operator(()operator(\))operator(:)
                ident(outfile)operator(.)ident(write)operator(()ident(compressor)operator(.)ident(flush)operator(()operator(\))operator(\))
                ident(outfile)operator(.)ident(flush)operator(()operator(\))
        keyword(else)operator(:)
            keyword(def) method(write)operator(()ident(text)operator(\))operator(:)
                ident(outfile)operator(.)ident(write)operator(()ident(text)operator(.)ident(encode)operator(()operator(\))operator(\))
            ident(flush) operator(=) ident(outfile)operator(.)ident(flush)

        ident(lasttype) operator(=) predefined_constant(None)
        ident(lastval) operator(=) string<modifier(u)delimiter(')delimiter(')>
        keyword(if) predefined_constant(self)operator(.)ident(error_color)operator(:)
            keyword(for) ident(ttype)operator(,) ident(value) keyword(in) ident(tokensource)operator(:)
                ident(line) operator(=) string<delimiter(")content(%s)char(\\t)content(%r)char(\\n)delimiter(")> operator(%) operator(()ident(ttype)operator(,) ident(value)operator(\))
                keyword(if) ident(ttype) keyword(is) ident(Token)operator(.)ident(Error)operator(:)
                    ident(write)operator(()ident(colorize)operator(()predefined_constant(self)operator(.)ident(error_color)operator(,) ident(line)operator(\))operator(\))
                keyword(else)operator(:)
                    ident(write)operator(()ident(line)operator(\))
        keyword(else)operator(:)
            keyword(for) ident(ttype)operator(,) ident(value) keyword(in) ident(tokensource)operator(:)
                ident(write)operator(()string<delimiter(")content(%s)char(\\t)content(%r)char(\\n)delimiter(")> operator(%) operator(()ident(ttype)operator(,) ident(value)operator(\))operator(\))
        ident(flush)operator(()operator(\))
comment(# -*- coding: utf-8 -*-)
docstring<delimiter(""")content(
)content(    pygments.formatters.rtf)content(
)content(    ~~~~~~~~~~~~~~~~~~~~~~~)content(
)content(
)content(    A formatter that generates RTF files.)content(
)content(
)content(    :copyright: Copyright 2006-2009 by the Pygments team, see AUTHORS.)content(
)content(    :license: BSD, see LICENSE for details.)content(
)delimiter(""")>

keyword(from) include(pygments.formatter) keyword(import) include(Formatter)


ident(__all__) operator(=) operator([)string<delimiter(')content(RtfFormatter)delimiter(')>operator(])


keyword(class) class(RtfFormatter)operator(()ident(Formatter)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Format tokens as RTF markup. This formatter automatically outputs full RTF)content(
)content(    documents with color information and other useful stuff. Perfect for Copy and)content(
)content(    Paste into Microsoft® Word® documents.)content(
)content(
)content(    *New in Pygments 0.6.*)content(
)content(
)content(    Additional options accepted:)content(
)content(
)content(    `style`)content(
)content(        The style to use, can be a string or a Style subclass (default:)content(
)content(        ``'default'``\).)content(
)content(
)content(    `fontface`)content(
)content(        The used font famliy, for example ``Bitstream Vera Sans``. Defaults to)content(
)content(        some generic font which is supposed to have fixed width.)content(
)content(    )delimiter(""")>
    ident(name) operator(=) string<delimiter(')content(RTF)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(rtf)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.rtf)delimiter(')>operator(])

    ident(unicodeoutput) operator(=) predefined_constant(False)

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))operator(:)
        docstring<delimiter(""")content(
)content(        Additional options accepted:)content(
)content(
)content(        ``fontface``)content(
)content(            Name of the font used. Could for example be ``'Courier New'``)content(
)content(            to further specify the default which is ``')char(\\f)content(modern'``. The RTF)content(
)content(            specification claims that ``)char(\\f)content(modern`` are "Fixed-pitch serif)content(
)content(            and sans serif fonts". Hope every RTF implementation thinks)content(
)content(            the same about modern...)content(
)content(        )delimiter(""")>
        ident(Formatter)operator(.)ident(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))
        predefined_constant(self)operator(.)ident(fontface) operator(=) ident(options)operator(.)ident(get)operator(()string<delimiter(')content(fontface)delimiter(')>operator(\)) keyword(or) string<delimiter(')delimiter(')>

    keyword(def) method(_escape)operator(()predefined_constant(self)operator(,) ident(text)operator(\))operator(:)
        keyword(return) ident(text)operator(.)ident(replace)operator(()string<delimiter(')char(\\\\)delimiter(')>operator(,) string<delimiter(')char(\\\\)char(\\\\)delimiter(')>operator(\)) \
                   operator(.)ident(replace)operator(()string<delimiter(')content({)delimiter(')>operator(,) string<delimiter(')char(\\\\)content({)delimiter(')>operator(\)) \
                   operator(.)ident(replace)operator(()string<delimiter(')content(})delimiter(')>operator(,) string<delimiter(')char(\\\\)content(})delimiter(')>operator(\))

    keyword(def) method(_escape_text)operator(()predefined_constant(self)operator(,) ident(text)operator(\))operator(:)
        comment(# empty strings, should give a small performance improvment)
        keyword(if) keyword(not) ident(text)operator(:)
            keyword(return) string<delimiter(')delimiter(')>

        comment(# escape text)
        ident(text) operator(=) predefined_constant(self)operator(.)ident(_escape)operator(()ident(text)operator(\))
        keyword(if) predefined_constant(self)operator(.)ident(encoding) keyword(in) operator(()string<delimiter(')content(utf-8)delimiter(')>operator(,) string<delimiter(')content(utf-16)delimiter(')>operator(,) string<delimiter(')content(utf-32)delimiter(')>operator(\))operator(:)
            ident(encoding) operator(=) string<delimiter(')content(iso-8859-15)delimiter(')>
        keyword(else)operator(:)
            ident(encoding) operator(=) predefined_constant(self)operator(.)ident(encoding) keyword(or) string<delimiter(')content(iso-8859-15)delimiter(')>

        ident(buf) operator(=) operator([)operator(])
        keyword(for) ident(c) keyword(in) ident(text)operator(:)
            keyword(if) predefined(ord)operator(()ident(c)operator(\)) operator(>) integer(128)operator(:)
                ident(ansic) operator(=) ident(c)operator(.)ident(encode)operator(()ident(encoding)operator(,) string<delimiter(')content(ignore)delimiter(')>operator(\)) keyword(or) string<delimiter(')content(?)delimiter(')>
                keyword(if) predefined(ord)operator(()ident(ansic)operator(\)) operator(>) integer(128)operator(:)
                    ident(ansic) operator(=) string<delimiter(')char(\\\\)char(\\')content(%x)delimiter(')> operator(%) predefined(ord)operator(()ident(ansic)operator(\))
                keyword(else)operator(:)
                    ident(ansic) operator(=) ident(c)
                ident(buf)operator(.)ident(append)operator(()string<modifier(r)delimiter(')content(\\u)content(d{)content(\\u)content(%d%s})delimiter(')> operator(%) operator(()predefined(ord)operator(()ident(c)operator(\))operator(,) ident(ansic)operator(\))operator(\))
            keyword(else)operator(:)
                ident(buf)operator(.)ident(append)operator(()predefined(str)operator(()ident(c)operator(\))operator(\))

        keyword(return) string<delimiter(')delimiter(')>operator(.)ident(join)operator(()ident(buf)operator(\))operator(.)ident(replace)operator(()string<delimiter(')char(\\n)delimiter(')>operator(,) string<delimiter(')char(\\\\)content(par)char(\\n)delimiter(')>operator(\))

    keyword(def) method(format_unencoded)operator(()predefined_constant(self)operator(,) ident(tokensource)operator(,) ident(outfile)operator(\))operator(:)
        comment(# rtf 1.8 header)
        ident(outfile)operator(.)ident(write)operator(()string<modifier(r)delimiter(')content({)content(\\r)content(tf1)content(\\a)content(nsi)content(\\d)content(eff0)delimiter(')>
                      string<modifier(r)delimiter(')content({)content(\\f)content(onttbl{)content(\\f)content(0)content(\\f)content(modern)content(\\f)content(prq1)content(\\f)content(charset0%s;}})delimiter(')>
                      string<modifier(r)delimiter(')content({)content(\\c)content(olortbl;)delimiter(')> operator(%) operator(()predefined_constant(self)operator(.)ident(fontface) keyword(and)
                                        string<delimiter(')content( )delimiter(')> operator(+) predefined_constant(self)operator(.)ident(_escape)operator(()predefined_constant(self)operator(.)ident(fontface)operator(\)) keyword(or)
                                        string<delimiter(')delimiter(')>operator(\))operator(\))

        comment(# convert colors and save them in a mapping to access them later.)
        ident(color_mapping) operator(=) operator({)operator(})
        ident(offset) operator(=) integer(1)
        keyword(for) ident(_)operator(,) ident(style) keyword(in) predefined_constant(self)operator(.)ident(style)operator(:)
            keyword(for) ident(color) keyword(in) ident(style)operator([)string<delimiter(')content(color)delimiter(')>operator(])operator(,) ident(style)operator([)string<delimiter(')content(bgcolor)delimiter(')>operator(])operator(,) ident(style)operator([)string<delimiter(')content(border)delimiter(')>operator(])operator(:)
                keyword(if) ident(color) keyword(and) ident(color) keyword(not) keyword(in) ident(color_mapping)operator(:)
                    ident(color_mapping)operator([)ident(color)operator(]) operator(=) ident(offset)
                    ident(outfile)operator(.)ident(write)operator(()string<modifier(r)delimiter(')content(\\r)content(ed%d)content(\\g)content(reen%d)content(\\b)content(lue%d;)delimiter(')> operator(%) operator(()
                        predefined(int)operator(()ident(color)operator([)integer(0)operator(:)integer(2)operator(])operator(,) integer(16)operator(\))operator(,)
                        predefined(int)operator(()ident(color)operator([)integer(2)operator(:)integer(4)operator(])operator(,) integer(16)operator(\))operator(,)
                        predefined(int)operator(()ident(color)operator([)integer(4)operator(:)integer(6)operator(])operator(,) integer(16)operator(\))
                    operator(\))operator(\))
                    ident(offset) operator(+=) integer(1)
        ident(outfile)operator(.)ident(write)operator(()string<modifier(r)delimiter(')content(})content(\\f)content(0)delimiter(')>operator(\))

        comment(# highlight stream)
        keyword(for) ident(ttype)operator(,) ident(value) keyword(in) ident(tokensource)operator(:)
            keyword(while) keyword(not) predefined_constant(self)operator(.)ident(style)operator(.)ident(styles_token)operator(()ident(ttype)operator(\)) keyword(and) ident(ttype)operator(.)ident(parent)operator(:)
                ident(ttype) operator(=) ident(ttype)operator(.)ident(parent)
            ident(style) operator(=) predefined_constant(self)operator(.)ident(style)operator(.)ident(style_for_token)operator(()ident(ttype)operator(\))
            ident(buf) operator(=) operator([)operator(])
            keyword(if) ident(style)operator([)string<delimiter(')content(bgcolor)delimiter(')>operator(])operator(:)
                ident(buf)operator(.)ident(append)operator(()string<modifier(r)delimiter(')content(\\c)content(b%d)delimiter(')> operator(%) ident(color_mapping)operator([)ident(style)operator([)string<delimiter(')content(bgcolor)delimiter(')>operator(])operator(])operator(\))
            keyword(if) ident(style)operator([)string<delimiter(')content(color)delimiter(')>operator(])operator(:)
                ident(buf)operator(.)ident(append)operator(()string<modifier(r)delimiter(')content(\\c)content(f%d)delimiter(')> operator(%) ident(color_mapping)operator([)ident(style)operator([)string<delimiter(')content(color)delimiter(')>operator(])operator(])operator(\))
            keyword(if) ident(style)operator([)string<delimiter(')content(bold)delimiter(')>operator(])operator(:)
                ident(buf)operator(.)ident(append)operator(()string<modifier(r)delimiter(')content(\\b)delimiter(')>operator(\))
            keyword(if) ident(style)operator([)string<delimiter(')content(italic)delimiter(')>operator(])operator(:)
                ident(buf)operator(.)ident(append)operator(()string<modifier(r)delimiter(')content(\\i)delimiter(')>operator(\))
            keyword(if) ident(style)operator([)string<delimiter(')content(underline)delimiter(')>operator(])operator(:)
                ident(buf)operator(.)ident(append)operator(()string<modifier(r)delimiter(')content(\\u)content(l)delimiter(')>operator(\))
            keyword(if) ident(style)operator([)string<delimiter(')content(border)delimiter(')>operator(])operator(:)
                ident(buf)operator(.)ident(append)operator(()string<modifier(r)delimiter(')content(\\c)content(hbrdr)content(\\c)content(hcfpat%d)delimiter(')> operator(%)
                           ident(color_mapping)operator([)ident(style)operator([)string<delimiter(')content(border)delimiter(')>operator(])operator(])operator(\))
            ident(start) operator(=) string<delimiter(')delimiter(')>operator(.)ident(join)operator(()ident(buf)operator(\))
            keyword(if) ident(start)operator(:)
                ident(outfile)operator(.)ident(write)operator(()string<delimiter(')content({%s )delimiter(')> operator(%) ident(start)operator(\))
            ident(outfile)operator(.)ident(write)operator(()predefined_constant(self)operator(.)ident(_escape_text)operator(()ident(value)operator(\))operator(\))
            keyword(if) ident(start)operator(:)
                ident(outfile)operator(.)ident(write)operator(()string<delimiter(')content(})delimiter(')>operator(\))

        ident(outfile)operator(.)ident(write)operator(()string<delimiter(')content(})delimiter(')>operator(\))
comment(# -*- coding: utf-8 -*-)
docstring<delimiter(""")content(
)content(    pygments.formatters.svg)content(
)content(    ~~~~~~~~~~~~~~~~~~~~~~~)content(
)content(
)content(    Formatter for SVG output.)content(
)content(
)content(    :copyright: Copyright 2006-2009 by the Pygments team, see AUTHORS.)content(
)content(    :license: BSD, see LICENSE for details.)content(
)delimiter(""")>

keyword(from) include(pygments.formatter) keyword(import) include(Formatter)
keyword(from) include(pygments.util) keyword(import) include(get_bool_opt)operator(,) include(get_int_opt)

ident(__all__) operator(=) operator([)string<delimiter(')content(SvgFormatter)delimiter(')>operator(])


keyword(def) method(escape_html)operator(()ident(text)operator(\))operator(:)
    docstring<delimiter(""")content(Escape &, <, > as well as single and double quotes for HTML.)delimiter(""")>
    keyword(return) ident(text)operator(.)ident(replace)operator(()string<delimiter(')content(&)delimiter(')>operator(,) string<delimiter(')content(&amp;)delimiter(')>operator(\))operator(.)  \
                ident(replace)operator(()string<delimiter(')content(<)delimiter(')>operator(,) string<delimiter(')content(&lt;)delimiter(')>operator(\))operator(.)   \
                ident(replace)operator(()string<delimiter(')content(>)delimiter(')>operator(,) string<delimiter(')content(&gt;)delimiter(')>operator(\))operator(.)   \
                ident(replace)operator(()string<delimiter(')content(")delimiter(')>operator(,) string<delimiter(')content(&quot;)delimiter(')>operator(\))operator(.) \
                ident(replace)operator(()string<delimiter(")content(')delimiter(")>operator(,) string<delimiter(')content(&#39;)delimiter(')>operator(\))


ident(class2style) operator(=) operator({)operator(})

keyword(class) class(SvgFormatter)operator(()ident(Formatter)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Format tokens as an SVG graphics file.  This formatter is still experimental.)content(
)content(    Each line of code is a ``<text>`` element with explicit ``x`` and ``y``)content(
)content(    coordinates containing ``<tspan>`` elements with the individual token styles.)content(
)content(
)content(    By default, this formatter outputs a full SVG document including doctype)content(
)content(    declaration and the ``<svg>`` root element.)content(
)content(
)content(    *New in Pygments 0.9.*)content(
)content(
)content(    Additional options accepted:)content(
)content(
)content(    `nowrap`)content(
)content(        Don't wrap the SVG ``<text>`` elements in ``<svg><g>`` elements and)content(
)content(        don't add a XML declaration and a doctype.  If true, the `fontfamily`)content(
)content(        and `fontsize` options are ignored.  Defaults to ``False``.)content(
)content(
)content(    `fontfamily`)content(
)content(        The value to give the wrapping ``<g>`` element's ``font-family``)content(
)content(        attribute, defaults to ``"monospace"``.)content(
)content(
)content(    `fontsize`)content(
)content(        The value to give the wrapping ``<g>`` element's ``font-size``)content(
)content(        attribute, defaults to ``"14px"``.)content(
)content(
)content(    `xoffset`)content(
)content(        Starting offset in X direction, defaults to ``0``.)content(
)content(
)content(    `yoffset`)content(
)content(        Starting offset in Y direction, defaults to the font size if it is given)content(
)content(        in pixels, or ``20`` else.  (This is necessary since text coordinates)content(
)content(        refer to the text baseline, not the top edge.\))content(
)content(
)content(    `ystep`)content(
)content(        Offset to add to the Y coordinate for each subsequent line.  This should)content(
)content(        roughly be the text size plus 5.  It defaults to that value if the text)content(
)content(        size is given in pixels, or ``25`` else.)content(
)content(
)content(    `spacehack`)content(
)content(        Convert spaces in the source to ``&160;``, which are non-breaking)content(
)content(        spaces.  SVG provides the ``xml:space`` attribute to control how)content(
)content(        whitespace inside tags is handled, in theory, the ``preserve`` value)content(
)content(        could be used to keep all whitespace as-is.  However, many current SVG)content(
)content(        viewers don't obey that rule, so this option is provided as a workaround)content(
)content(        and defaults to ``True``.)content(
)content(    )delimiter(""")>
    ident(name) operator(=) string<delimiter(')content(SVG)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(svg)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.svg)delimiter(')>operator(])

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))operator(:)
        comment(# XXX outencoding)
        ident(Formatter)operator(.)ident(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))
        predefined_constant(self)operator(.)ident(nowrap) operator(=) ident(get_bool_opt)operator(()ident(options)operator(,) string<delimiter(')content(nowrap)delimiter(')>operator(,) predefined_constant(False)operator(\))
        predefined_constant(self)operator(.)ident(fontfamily) operator(=) ident(options)operator(.)ident(get)operator(()string<delimiter(')content(fontfamily)delimiter(')>operator(,) string<delimiter(')content(monospace)delimiter(')>operator(\))
        predefined_constant(self)operator(.)ident(fontsize) operator(=) ident(options)operator(.)ident(get)operator(()string<delimiter(')content(fontsize)delimiter(')>operator(,) string<delimiter(')content(14px)delimiter(')>operator(\))
        predefined_constant(self)operator(.)ident(xoffset) operator(=) ident(get_int_opt)operator(()ident(options)operator(,) string<delimiter(')content(xoffset)delimiter(')>operator(,) integer(0)operator(\))
        ident(fs) operator(=) predefined_constant(self)operator(.)ident(fontsize)operator(.)ident(strip)operator(()operator(\))
        keyword(if) ident(fs)operator(.)ident(endswith)operator(()string<delimiter(')content(px)delimiter(')>operator(\))operator(:) ident(fs) operator(=) ident(fs)operator([)operator(:)operator(-)integer(2)operator(])operator(.)ident(strip)operator(()operator(\))
        keyword(try)operator(:)
            ident(int_fs) operator(=) predefined(int)operator(()ident(fs)operator(\))
        keyword(except)operator(:)
            ident(int_fs) operator(=) integer(20)
        predefined_constant(self)operator(.)ident(yoffset) operator(=) ident(get_int_opt)operator(()ident(options)operator(,) string<delimiter(')content(yoffset)delimiter(')>operator(,) ident(int_fs)operator(\))
        predefined_constant(self)operator(.)ident(ystep) operator(=) ident(get_int_opt)operator(()ident(options)operator(,) string<delimiter(')content(ystep)delimiter(')>operator(,) ident(int_fs) operator(+) integer(5)operator(\))
        predefined_constant(self)operator(.)ident(spacehack) operator(=) ident(get_bool_opt)operator(()ident(options)operator(,) string<delimiter(')content(spacehack)delimiter(')>operator(,) predefined_constant(True)operator(\))
        predefined_constant(self)operator(.)ident(_stylecache) operator(=) operator({)operator(})

    keyword(def) method(format_unencoded)operator(()predefined_constant(self)operator(,) ident(tokensource)operator(,) ident(outfile)operator(\))operator(:)
        docstring<delimiter(""")content(
)content(        Format ``tokensource``, an iterable of ``(tokentype, tokenstring\)``)content(
)content(        tuples and write it into ``outfile``.)content(
)content(
)content(        For our implementation we put all lines in their own 'line group'.)content(
)content(        )delimiter(""")>
        ident(x) operator(=) predefined_constant(self)operator(.)ident(xoffset)
        ident(y) operator(=) predefined_constant(self)operator(.)ident(yoffset)
        keyword(if) keyword(not) predefined_constant(self)operator(.)ident(nowrap)operator(:)
            keyword(if) predefined_constant(self)operator(.)ident(encoding)operator(:)
                ident(outfile)operator(.)ident(write)operator(()string<delimiter(')content(<?xml version="1.0" encoding="%s"?>)char(\\n)delimiter(')> operator(%)
                              predefined_constant(self)operator(.)ident(encoding)operator(\))
            keyword(else)operator(:)
                ident(outfile)operator(.)ident(write)operator(()string<delimiter(')content(<?xml version="1.0"?>)char(\\n)delimiter(')>operator(\))
            ident(outfile)operator(.)ident(write)operator(()string<delimiter(')content(<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.0//EN" )delimiter(')>
                          string<delimiter(')content("http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/)delimiter(')>
                          string<delimiter(')content(svg10.dtd">)char(\\n)delimiter(')>operator(\))
            ident(outfile)operator(.)ident(write)operator(()string<delimiter(')content(<svg xmlns="http://www.w3.org/2000/svg">)char(\\n)delimiter(')>operator(\))
            ident(outfile)operator(.)ident(write)operator(()string<delimiter(')content(<g font-family="%s" font-size="%s">)char(\\n)delimiter(')> operator(%)
                          operator(()predefined_constant(self)operator(.)ident(fontfamily)operator(,) predefined_constant(self)operator(.)ident(fontsize)operator(\))operator(\))
        ident(outfile)operator(.)ident(write)operator(()string<delimiter(')content(<text x="%s" y="%s" xml:space="preserve">)delimiter(')> operator(%) operator(()ident(x)operator(,) ident(y)operator(\))operator(\))
        keyword(for) ident(ttype)operator(,) ident(value) keyword(in) ident(tokensource)operator(:)
            ident(style) operator(=) predefined_constant(self)operator(.)ident(_get_style)operator(()ident(ttype)operator(\))
            ident(tspan) operator(=) ident(style) keyword(and) string<delimiter(')content(<tspan)delimiter(')> operator(+) ident(style) operator(+) string<delimiter(')content(>)delimiter(')> keyword(or) string<delimiter(')delimiter(')>
            ident(tspanend) operator(=) ident(tspan) keyword(and) string<delimiter(')content(</tspan>)delimiter(')> keyword(or) string<delimiter(')delimiter(')>
            ident(value) operator(=) ident(escape_html)operator(()ident(value)operator(\))
            keyword(if) predefined_constant(self)operator(.)ident(spacehack)operator(:)
                ident(value) operator(=) ident(value)operator(.)ident(expandtabs)operator(()operator(\))operator(.)ident(replace)operator(()string<delimiter(')content( )delimiter(')>operator(,) string<delimiter(')content(&#160;)delimiter(')>operator(\))
            ident(parts) operator(=) ident(value)operator(.)ident(split)operator(()string<delimiter(')char(\\n)delimiter(')>operator(\))
            keyword(for) ident(part) keyword(in) ident(parts)operator([)operator(:)operator(-)integer(1)operator(])operator(:)
                ident(outfile)operator(.)ident(write)operator(()ident(tspan) operator(+) ident(part) operator(+) ident(tspanend)operator(\))
                ident(y) operator(+=) predefined_constant(self)operator(.)ident(ystep)
                ident(outfile)operator(.)ident(write)operator(()string<delimiter(')content(</text>)char(\\n)content(<text x="%s" y="%s" )delimiter(')>
                              string<delimiter(')content(xml:space="preserve">)delimiter(')> operator(%) operator(()ident(x)operator(,) ident(y)operator(\))operator(\))
            ident(outfile)operator(.)ident(write)operator(()ident(tspan) operator(+) ident(parts)operator([)operator(-)integer(1)operator(]) operator(+) ident(tspanend)operator(\))
        ident(outfile)operator(.)ident(write)operator(()string<delimiter(')content(</text>)delimiter(')>operator(\))

        keyword(if) keyword(not) predefined_constant(self)operator(.)ident(nowrap)operator(:)
            ident(outfile)operator(.)ident(write)operator(()string<delimiter(')content(</g></svg>)char(\\n)delimiter(')>operator(\))

    keyword(def) method(_get_style)operator(()predefined_constant(self)operator(,) ident(tokentype)operator(\))operator(:)
        keyword(if) ident(tokentype) keyword(in) predefined_constant(self)operator(.)ident(_stylecache)operator(:)
            keyword(return) predefined_constant(self)operator(.)ident(_stylecache)operator([)ident(tokentype)operator(])
        ident(otokentype) operator(=) ident(tokentype)
        keyword(while) keyword(not) predefined_constant(self)operator(.)ident(style)operator(.)ident(styles_token)operator(()ident(tokentype)operator(\))operator(:)
            ident(tokentype) operator(=) ident(tokentype)operator(.)ident(parent)
        ident(value) operator(=) predefined_constant(self)operator(.)ident(style)operator(.)ident(style_for_token)operator(()ident(tokentype)operator(\))
        ident(result) operator(=) string<delimiter(')delimiter(')>
        keyword(if) ident(value)operator([)string<delimiter(')content(color)delimiter(')>operator(])operator(:)
            ident(result) operator(=) string<delimiter(')content( fill="#)delimiter(')> operator(+) ident(value)operator([)string<delimiter(')content(color)delimiter(')>operator(]) operator(+) string<delimiter(')content(")delimiter(')>
        keyword(if) ident(value)operator([)string<delimiter(')content(bold)delimiter(')>operator(])operator(:)
            ident(result) operator(+=) string<delimiter(')content( font-weight="bold")delimiter(')>
        keyword(if) ident(value)operator([)string<delimiter(')content(italic)delimiter(')>operator(])operator(:)
            ident(result) operator(+=) string<delimiter(')content( font-style="italic")delimiter(')>
        predefined_constant(self)operator(.)ident(_stylecache)operator([)ident(otokentype)operator(]) operator(=) ident(result)
        keyword(return) ident(result)
comment(# -*- coding: utf-8 -*-)
docstring<delimiter(""")content(
)content(    pygments.formatters.terminal)content(
)content(    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~)content(
)content(
)content(    Formatter for terminal output with ANSI sequences.)content(
)content(
)content(    :copyright: Copyright 2006-2009 by the Pygments team, see AUTHORS.)content(
)content(    :license: BSD, see LICENSE for details.)content(
)delimiter(""")>

keyword(from) include(pygments.formatter) keyword(import) include(Formatter)
keyword(from) include(pygments.token) keyword(import) include(Keyword)operator(,) include(Name)operator(,) include(Comment)operator(,) include(String)operator(,) include(Error)operator(,) \
     include(Number)operator(,) include(Operator)operator(,) include(Generic)operator(,) include(Token)operator(,) include(Whitespace)
keyword(from) include(pygments.console) keyword(import) include(ansiformat)
keyword(from) include(pygments.util) keyword(import) include(get_choice_opt)


ident(__all__) operator(=) operator([)string<delimiter(')content(TerminalFormatter)delimiter(')>operator(])


comment(#: Map token types to a tuple of color values for light and dark)
comment(#: backgrounds.)
ident(TERMINAL_COLORS) operator(=) operator({)
    ident(Token)operator(:)              operator(()string<delimiter(')delimiter(')>operator(,)            string<delimiter(')delimiter(')>operator(\))operator(,)

    ident(Whitespace)operator(:)         operator(()string<delimiter(')content(lightgray)delimiter(')>operator(,)   string<delimiter(')content(darkgray)delimiter(')>operator(\))operator(,)
    ident(Comment)operator(:)            operator(()string<delimiter(')content(lightgray)delimiter(')>operator(,)   string<delimiter(')content(darkgray)delimiter(')>operator(\))operator(,)
    ident(Comment)operator(.)ident(Preproc)operator(:)    operator(()string<delimiter(')content(teal)delimiter(')>operator(,)        string<delimiter(')content(turquoise)delimiter(')>operator(\))operator(,)
    ident(Keyword)operator(:)            operator(()string<delimiter(')content(darkblue)delimiter(')>operator(,)    string<delimiter(')content(blue)delimiter(')>operator(\))operator(,)
    ident(Keyword)operator(.)ident(Type)operator(:)       operator(()string<delimiter(')content(teal)delimiter(')>operator(,)        string<delimiter(')content(turquoise)delimiter(')>operator(\))operator(,)
    ident(Operator)operator(.)ident(Word)operator(:)      operator(()string<delimiter(')content(purple)delimiter(')>operator(,)      string<delimiter(')content(fuchsia)delimiter(')>operator(\))operator(,)
    ident(Name)operator(.)ident(Builtin)operator(:)       operator(()string<delimiter(')content(teal)delimiter(')>operator(,)        string<delimiter(')content(turquoise)delimiter(')>operator(\))operator(,)
    ident(Name)operator(.)ident(Function)operator(:)      operator(()string<delimiter(')content(darkgreen)delimiter(')>operator(,)   string<delimiter(')content(green)delimiter(')>operator(\))operator(,)
    ident(Name)operator(.)ident(Namespace)operator(:)     operator(()string<delimiter(')content(_teal_)delimiter(')>operator(,)      string<delimiter(')content(_turquoise_)delimiter(')>operator(\))operator(,)
    ident(Name)operator(.)ident(Class)operator(:)         operator(()string<delimiter(')content(_darkgreen_)delimiter(')>operator(,) string<delimiter(')content(_green_)delimiter(')>operator(\))operator(,)
    ident(Name)operator(.)ident(Exception)operator(:)     operator(()string<delimiter(')content(teal)delimiter(')>operator(,)        string<delimiter(')content(turquoise)delimiter(')>operator(\))operator(,)
    ident(Name)operator(.)ident(Decorator)operator(:)     operator(()string<delimiter(')content(darkgray)delimiter(')>operator(,)    string<delimiter(')content(lightgray)delimiter(')>operator(\))operator(,)
    ident(Name)operator(.)ident(Variable)operator(:)      operator(()string<delimiter(')content(darkred)delimiter(')>operator(,)     string<delimiter(')content(red)delimiter(')>operator(\))operator(,)
    ident(Name)operator(.)ident(Constant)operator(:)      operator(()string<delimiter(')content(darkred)delimiter(')>operator(,)     string<delimiter(')content(red)delimiter(')>operator(\))operator(,)
    ident(Name)operator(.)ident(Attribute)operator(:)     operator(()string<delimiter(')content(teal)delimiter(')>operator(,)        string<delimiter(')content(turquoise)delimiter(')>operator(\))operator(,)
    ident(Name)operator(.)ident(Tag)operator(:)           operator(()string<delimiter(')content(blue)delimiter(')>operator(,)        string<delimiter(')content(blue)delimiter(')>operator(\))operator(,)
    ident(String)operator(:)             operator(()string<delimiter(')content(brown)delimiter(')>operator(,)       string<delimiter(')content(brown)delimiter(')>operator(\))operator(,)
    ident(Number)operator(:)             operator(()string<delimiter(')content(darkblue)delimiter(')>operator(,)    string<delimiter(')content(blue)delimiter(')>operator(\))operator(,)

    ident(Generic)operator(.)ident(Deleted)operator(:)    operator(()string<delimiter(')content(red)delimiter(')>operator(,)        string<delimiter(')content(red)delimiter(')>operator(\))operator(,)
    ident(Generic)operator(.)ident(Inserted)operator(:)   operator(()string<delimiter(')content(darkgreen)delimiter(')>operator(,)  string<delimiter(')content(green)delimiter(')>operator(\))operator(,)
    ident(Generic)operator(.)ident(Heading)operator(:)    operator(()string<delimiter(')content(**)delimiter(')>operator(,)         string<delimiter(')content(**)delimiter(')>operator(\))operator(,)
    ident(Generic)operator(.)ident(Subheading)operator(:) operator(()string<delimiter(')content(*purple*)delimiter(')>operator(,)   string<delimiter(')content(*fuchsia*)delimiter(')>operator(\))operator(,)
    ident(Generic)operator(.)ident(Error)operator(:)      operator(()string<delimiter(')content(red)delimiter(')>operator(,)        string<delimiter(')content(red)delimiter(')>operator(\))operator(,)

    ident(Error)operator(:)              operator(()string<delimiter(')content(_red_)delimiter(')>operator(,)      string<delimiter(')content(_red_)delimiter(')>operator(\))operator(,)
operator(})


keyword(class) class(TerminalFormatter)operator(()ident(Formatter)operator(\))operator(:)
    docstring<modifier(r)delimiter(""")content(
)content(    Format tokens with ANSI color sequences, for output in a text console.)content(
)content(    Color sequences are terminated at newlines, so that paging the output)content(
)content(    works correctly.)content(
)content(
)content(    The `get_style_defs(\)` method doesn't do anything special since there is)content(
)content(    no support for common styles.)content(
)content(
)content(    Options accepted:)content(
)content(
)content(    `bg`)content(
)content(        Set to ``"light"`` or ``"dark"`` depending on the terminal's background)content(
)content(        (default: ``"light"``\).)content(
)content(
)content(    `colorscheme`)content(
)content(        A dictionary mapping token types to (lightbg, darkbg\) color names or)content(
)content(        ``None`` (default: ``None`` = use builtin colorscheme\).)content(
)content(    )delimiter(""")>
    ident(name) operator(=) string<delimiter(')content(Terminal)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(terminal)delimiter(')>operator(,) string<delimiter(')content(console)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)operator(])

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))operator(:)
        ident(Formatter)operator(.)ident(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))
        predefined_constant(self)operator(.)ident(darkbg) operator(=) ident(get_choice_opt)operator(()ident(options)operator(,) string<delimiter(')content(bg)delimiter(')>operator(,)
                                     operator([)string<delimiter(')content(light)delimiter(')>operator(,) string<delimiter(')content(dark)delimiter(')>operator(])operator(,) string<delimiter(')content(light)delimiter(')>operator(\)) operator(==) string<delimiter(')content(dark)delimiter(')>
        predefined_constant(self)operator(.)ident(colorscheme) operator(=) ident(options)operator(.)ident(get)operator(()string<delimiter(')content(colorscheme)delimiter(')>operator(,) predefined_constant(None)operator(\)) keyword(or) ident(TERMINAL_COLORS)

    keyword(def) method(format)operator(()predefined_constant(self)operator(,) ident(tokensource)operator(,) ident(outfile)operator(\))operator(:)
        comment(# hack: if the output is a terminal and has an encoding set,)
        comment(# use that to avoid unicode encode problems)
        keyword(if) keyword(not) predefined_constant(self)operator(.)ident(encoding) keyword(and) predefined(hasattr)operator(()ident(outfile)operator(,) string<delimiter(")content(encoding)delimiter(")>operator(\)) keyword(and) \
           predefined(hasattr)operator(()ident(outfile)operator(,) string<delimiter(")content(isatty)delimiter(")>operator(\)) keyword(and) ident(outfile)operator(.)ident(isatty)operator(()operator(\))operator(:)
            predefined_constant(self)operator(.)ident(encoding) operator(=) ident(outfile)operator(.)ident(encoding)
        keyword(return) ident(Formatter)operator(.)ident(format)operator(()predefined_constant(self)operator(,) ident(tokensource)operator(,) ident(outfile)operator(\))

    keyword(def) method(format_unencoded)operator(()predefined_constant(self)operator(,) ident(tokensource)operator(,) ident(outfile)operator(\))operator(:)
        keyword(for) ident(ttype)operator(,) ident(value) keyword(in) ident(tokensource)operator(:)
            ident(color) operator(=) predefined_constant(self)operator(.)ident(colorscheme)operator(.)ident(get)operator(()ident(ttype)operator(\))
            keyword(while) ident(color) keyword(is) predefined_constant(None)operator(:)
                ident(ttype) operator(=) ident(ttype)operator([)operator(:)operator(-)integer(1)operator(])
                ident(color) operator(=) predefined_constant(self)operator(.)ident(colorscheme)operator(.)ident(get)operator(()ident(ttype)operator(\))
            keyword(if) ident(color)operator(:)
                ident(color) operator(=) ident(color)operator([)predefined_constant(self)operator(.)ident(darkbg)operator(])
                ident(spl) operator(=) ident(value)operator(.)ident(split)operator(()string<delimiter(')char(\\n)delimiter(')>operator(\))
                keyword(for) ident(line) keyword(in) ident(spl)operator([)operator(:)operator(-)integer(1)operator(])operator(:)
                    keyword(if) ident(line)operator(:)
                        ident(outfile)operator(.)ident(write)operator(()ident(ansiformat)operator(()ident(color)operator(,) ident(line)operator(\))operator(\))
                    ident(outfile)operator(.)ident(write)operator(()string<delimiter(')char(\\n)delimiter(')>operator(\))
                keyword(if) ident(spl)operator([)operator(-)integer(1)operator(])operator(:)
                    ident(outfile)operator(.)ident(write)operator(()ident(ansiformat)operator(()ident(color)operator(,) ident(spl)operator([)operator(-)integer(1)operator(])operator(\))operator(\))
            keyword(else)operator(:)
                ident(outfile)operator(.)ident(write)operator(()ident(value)operator(\))
comment(# -*- coding: utf-8 -*-)
docstring<delimiter(""")content(
)content(    pygments.formatters.terminal256)content(
)content(    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~)content(
)content(
)content(    Formatter for 256-color terminal output with ANSI sequences.)content(
)content(
)content(    RGB-to-XTERM color conversion routines adapted from xterm256-conv)content(
)content(    tool (http://frexx.de/xterm-256-notes/data/xterm256-conv2.tar.bz2\))content(
)content(    by Wolfgang Frisch.)content(
)content(
)content(    Formatter version 1.)content(
)content(
)content(    :copyright: Copyright 2006-2009 by the Pygments team, see AUTHORS.)content(
)content(    :license: BSD, see LICENSE for details.)content(
)delimiter(""")>

comment(# TODO:)
comment(#  - Options to map style's bold/underline/italic/border attributes)
comment(#    to some ANSI attrbutes (something like 'italic=underline'\))
comment(#  - An option to output "style RGB to xterm RGB/index" conversion table)
comment(#  - An option to indicate that we are running in "reverse background")
comment(#    xterm. This means that default colors are white-on-black, not)
comment(#    black-on-while, so colors like "white background" need to be converted)
comment(#    to "white background, black foreground", etc...)

keyword(from) include(pygments.formatter) keyword(import) include(Formatter)


ident(__all__) operator(=) operator([)string<delimiter(')content(Terminal256Formatter)delimiter(')>operator(])


keyword(class) class(EscapeSequence)operator(:)
    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) ident(fg)operator(=)predefined_constant(None)operator(,) ident(bg)operator(=)predefined_constant(None)operator(,) ident(bold)operator(=)predefined_constant(False)operator(,) ident(underline)operator(=)predefined_constant(False)operator(\))operator(:)
        predefined_constant(self)operator(.)ident(fg) operator(=) ident(fg)
        predefined_constant(self)operator(.)ident(bg) operator(=) ident(bg)
        predefined_constant(self)operator(.)ident(bold) operator(=) ident(bold)
        predefined_constant(self)operator(.)ident(underline) operator(=) ident(underline)

    keyword(def) method(escape)operator(()predefined_constant(self)operator(,) ident(attrs)operator(\))operator(:)
        keyword(if) predefined(len)operator(()ident(attrs)operator(\))operator(:)
            keyword(return) string<delimiter(")char(\\x1b)content([)delimiter(")> operator(+) string<delimiter(")content(;)delimiter(")>operator(.)ident(join)operator(()ident(attrs)operator(\)) operator(+) string<delimiter(")content(m)delimiter(")>
        keyword(return) string<delimiter(")delimiter(")>

    keyword(def) method(color_string)operator(()predefined_constant(self)operator(\))operator(:)
        ident(attrs) operator(=) operator([)operator(])
        keyword(if) predefined_constant(self)operator(.)ident(fg) keyword(is) keyword(not) predefined_constant(None)operator(:)
            ident(attrs)operator(.)ident(extend)operator(()operator(()string<delimiter(")content(38)delimiter(")>operator(,) string<delimiter(")content(5)delimiter(")>operator(,) string<delimiter(")content(%i)delimiter(")> operator(%) predefined_constant(self)operator(.)ident(fg)operator(\))operator(\))
        keyword(if) predefined_constant(self)operator(.)ident(bg) keyword(is) keyword(not) predefined_constant(None)operator(:)
            ident(attrs)operator(.)ident(extend)operator(()operator(()string<delimiter(")content(48)delimiter(")>operator(,) string<delimiter(")content(5)delimiter(")>operator(,) string<delimiter(")content(%i)delimiter(")> operator(%) predefined_constant(self)operator(.)ident(bg)operator(\))operator(\))
        keyword(if) predefined_constant(self)operator(.)ident(bold)operator(:)
            ident(attrs)operator(.)ident(append)operator(()string<delimiter(")content(01)delimiter(")>operator(\))
        keyword(if) predefined_constant(self)operator(.)ident(underline)operator(:)
            ident(attrs)operator(.)ident(append)operator(()string<delimiter(")content(04)delimiter(")>operator(\))
        keyword(return) predefined_constant(self)operator(.)ident(escape)operator(()ident(attrs)operator(\))

    keyword(def) method(reset_string)operator(()predefined_constant(self)operator(\))operator(:)
        ident(attrs) operator(=) operator([)operator(])
        keyword(if) predefined_constant(self)operator(.)ident(fg) keyword(is) keyword(not) predefined_constant(None)operator(:)
            ident(attrs)operator(.)ident(append)operator(()string<delimiter(")content(39)delimiter(")>operator(\))
        keyword(if) predefined_constant(self)operator(.)ident(bg) keyword(is) keyword(not) predefined_constant(None)operator(:)
            ident(attrs)operator(.)ident(append)operator(()string<delimiter(")content(49)delimiter(")>operator(\))
        keyword(if) predefined_constant(self)operator(.)ident(bold) keyword(or) predefined_constant(self)operator(.)ident(underline)operator(:)
            ident(attrs)operator(.)ident(append)operator(()string<delimiter(")content(00)delimiter(")>operator(\))
        keyword(return) predefined_constant(self)operator(.)ident(escape)operator(()ident(attrs)operator(\))

keyword(class) class(Terminal256Formatter)operator(()ident(Formatter)operator(\))operator(:)
    docstring<modifier(r)delimiter(""")content(
)content(    Format tokens with ANSI color sequences, for output in a 256-color)content(
)content(    terminal or console. Like in `TerminalFormatter` color sequences)content(
)content(    are terminated at newlines, so that paging the output works correctly.)content(
)content(
)content(    The formatter takes colors from a style defined by the `style` option)content(
)content(    and converts them to nearest ANSI 256-color escape sequences. Bold and)content(
)content(    underline attributes from the style are preserved (and displayed\).)content(
)content(
)content(    *New in Pygments 0.9.*)content(
)content(
)content(    Options accepted:)content(
)content(
)content(    `style`)content(
)content(        The style to use, can be a string or a Style subclass (default:)content(
)content(        ``'default'``\).)content(
)content(    )delimiter(""")>
    ident(name) operator(=) string<delimiter(')content(Terminal256)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(terminal256)delimiter(')>operator(,) string<delimiter(')content(console256)delimiter(')>operator(,) string<delimiter(')content(256)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)operator(])

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))operator(:)
        ident(Formatter)operator(.)ident(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))

        predefined_constant(self)operator(.)ident(xterm_colors) operator(=) operator([)operator(])
        predefined_constant(self)operator(.)ident(best_match) operator(=) operator({)operator(})
        predefined_constant(self)operator(.)ident(style_string) operator(=) operator({)operator(})

        predefined_constant(self)operator(.)ident(usebold) operator(=) string<delimiter(')content(nobold)delimiter(')> keyword(not) keyword(in) ident(options)
        predefined_constant(self)operator(.)ident(useunderline) operator(=) string<delimiter(')content(nounderline)delimiter(')> keyword(not) keyword(in) ident(options)

        predefined_constant(self)operator(.)ident(_build_color_table)operator(()operator(\)) comment(# build an RGB-to-256 color conversion table)
        predefined_constant(self)operator(.)ident(_setup_styles)operator(()operator(\)) comment(# convert selected style's colors to term. colors)

    keyword(def) method(_build_color_table)operator(()predefined_constant(self)operator(\))operator(:)
        comment(# colors 0..15: 16 basic colors)

        predefined_constant(self)operator(.)ident(xterm_colors)operator(.)ident(append)operator(()operator(()hex(0x00)operator(,) hex(0x00)operator(,) hex(0x00)operator(\))operator(\)) comment(# 0)
        predefined_constant(self)operator(.)ident(xterm_colors)operator(.)ident(append)operator(()operator(()hex(0xcd)operator(,) hex(0x00)operator(,) hex(0x00)operator(\))operator(\)) comment(# 1)
        predefined_constant(self)operator(.)ident(xterm_colors)operator(.)ident(append)operator(()operator(()hex(0x00)operator(,) hex(0xcd)operator(,) hex(0x00)operator(\))operator(\)) comment(# 2)
        predefined_constant(self)operator(.)ident(xterm_colors)operator(.)ident(append)operator(()operator(()hex(0xcd)operator(,) hex(0xcd)operator(,) hex(0x00)operator(\))operator(\)) comment(# 3)
        predefined_constant(self)operator(.)ident(xterm_colors)operator(.)ident(append)operator(()operator(()hex(0x00)operator(,) hex(0x00)operator(,) hex(0xee)operator(\))operator(\)) comment(# 4)
        predefined_constant(self)operator(.)ident(xterm_colors)operator(.)ident(append)operator(()operator(()hex(0xcd)operator(,) hex(0x00)operator(,) hex(0xcd)operator(\))operator(\)) comment(# 5)
        predefined_constant(self)operator(.)ident(xterm_colors)operator(.)ident(append)operator(()operator(()hex(0x00)operator(,) hex(0xcd)operator(,) hex(0xcd)operator(\))operator(\)) comment(# 6)
        predefined_constant(self)operator(.)ident(xterm_colors)operator(.)ident(append)operator(()operator(()hex(0xe5)operator(,) hex(0xe5)operator(,) hex(0xe5)operator(\))operator(\)) comment(# 7)
        predefined_constant(self)operator(.)ident(xterm_colors)operator(.)ident(append)operator(()operator(()hex(0x7f)operator(,) hex(0x7f)operator(,) hex(0x7f)operator(\))operator(\)) comment(# 8)
        predefined_constant(self)operator(.)ident(xterm_colors)operator(.)ident(append)operator(()operator(()hex(0xff)operator(,) hex(0x00)operator(,) hex(0x00)operator(\))operator(\)) comment(# 9)
        predefined_constant(self)operator(.)ident(xterm_colors)operator(.)ident(append)operator(()operator(()hex(0x00)operator(,) hex(0xff)operator(,) hex(0x00)operator(\))operator(\)) comment(# 10)
        predefined_constant(self)operator(.)ident(xterm_colors)operator(.)ident(append)operator(()operator(()hex(0xff)operator(,) hex(0xff)operator(,) hex(0x00)operator(\))operator(\)) comment(# 11)
        predefined_constant(self)operator(.)ident(xterm_colors)operator(.)ident(append)operator(()operator(()hex(0x5c)operator(,) hex(0x5c)operator(,) hex(0xff)operator(\))operator(\)) comment(# 12)
        predefined_constant(self)operator(.)ident(xterm_colors)operator(.)ident(append)operator(()operator(()hex(0xff)operator(,) hex(0x00)operator(,) hex(0xff)operator(\))operator(\)) comment(# 13)
        predefined_constant(self)operator(.)ident(xterm_colors)operator(.)ident(append)operator(()operator(()hex(0x00)operator(,) hex(0xff)operator(,) hex(0xff)operator(\))operator(\)) comment(# 14)
        predefined_constant(self)operator(.)ident(xterm_colors)operator(.)ident(append)operator(()operator(()hex(0xff)operator(,) hex(0xff)operator(,) hex(0xff)operator(\))operator(\)) comment(# 15)

        comment(# colors 16..232: the 6x6x6 color cube)

        ident(valuerange) operator(=) operator(()hex(0x00)operator(,) hex(0x5f)operator(,) hex(0x87)operator(,) hex(0xaf)operator(,) hex(0xd7)operator(,) hex(0xff)operator(\))

        keyword(for) ident(i) keyword(in) predefined(range)operator(()integer(217)operator(\))operator(:)
            ident(r) operator(=) ident(valuerange)operator([)operator(()ident(i) operator(//) integer(36)operator(\)) operator(%) integer(6)operator(])
            ident(g) operator(=) ident(valuerange)operator([)operator(()ident(i) operator(//) integer(6)operator(\)) operator(%) integer(6)operator(])
            ident(b) operator(=) ident(valuerange)operator([)ident(i) operator(%) integer(6)operator(])
            predefined_constant(self)operator(.)ident(xterm_colors)operator(.)ident(append)operator(()operator(()ident(r)operator(,) ident(g)operator(,) ident(b)operator(\))operator(\))

        comment(# colors 233..253: grayscale)

        keyword(for) ident(i) keyword(in) predefined(range)operator(()integer(1)operator(,) integer(22)operator(\))operator(:)
            ident(v) operator(=) integer(8) operator(+) ident(i) operator(*) integer(10)
            predefined_constant(self)operator(.)ident(xterm_colors)operator(.)ident(append)operator(()operator(()ident(v)operator(,) ident(v)operator(,) ident(v)operator(\))operator(\))

    keyword(def) method(_closest_color)operator(()predefined_constant(self)operator(,) ident(r)operator(,) ident(g)operator(,) ident(b)operator(\))operator(:)
        ident(distance) operator(=) integer(257)operator(*)integer(257)operator(*)integer(3) comment(# "infinity" (>distance from #000000 to #ffffff\))
        ident(match) operator(=) integer(0)

        keyword(for) ident(i) keyword(in) predefined(range)operator(()integer(0)operator(,) integer(254)operator(\))operator(:)
            ident(values) operator(=) predefined_constant(self)operator(.)ident(xterm_colors)operator([)ident(i)operator(])

            ident(rd) operator(=) ident(r) operator(-) ident(values)operator([)integer(0)operator(])
            ident(gd) operator(=) ident(g) operator(-) ident(values)operator([)integer(1)operator(])
            ident(bd) operator(=) ident(b) operator(-) ident(values)operator([)integer(2)operator(])
            ident(d) operator(=) ident(rd)operator(*)ident(rd) operator(+) ident(gd)operator(*)ident(gd) operator(+) ident(bd)operator(*)ident(bd)

            keyword(if) ident(d) operator(<) ident(distance)operator(:)
                ident(match) operator(=) ident(i)
                ident(distance) operator(=) ident(d)
        keyword(return) ident(match)

    keyword(def) method(_color_index)operator(()predefined_constant(self)operator(,) ident(color)operator(\))operator(:)
        ident(index) operator(=) predefined_constant(self)operator(.)ident(best_match)operator(.)ident(get)operator(()ident(color)operator(,) predefined_constant(None)operator(\))
        keyword(if) ident(index) keyword(is) predefined_constant(None)operator(:)
            keyword(try)operator(:)
                ident(rgb) operator(=) predefined(int)operator(()predefined(str)operator(()ident(color)operator(\))operator(,) integer(16)operator(\))
            keyword(except) exception(ValueError)operator(:)
                ident(rgb) operator(=) integer(0)

            ident(r) operator(=) operator(()ident(rgb) operator(>>) integer(16)operator(\)) operator(&) hex(0xff)
            ident(g) operator(=) operator(()ident(rgb) operator(>>) integer(8)operator(\)) operator(&) hex(0xff)
            ident(b) operator(=) ident(rgb) operator(&) hex(0xff)
            ident(index) operator(=) predefined_constant(self)operator(.)ident(_closest_color)operator(()ident(r)operator(,) ident(g)operator(,) ident(b)operator(\))
            predefined_constant(self)operator(.)ident(best_match)operator([)ident(color)operator(]) operator(=) ident(index)
        keyword(return) ident(index)

    keyword(def) method(_setup_styles)operator(()predefined_constant(self)operator(\))operator(:)
        keyword(for) ident(ttype)operator(,) ident(ndef) keyword(in) predefined_constant(self)operator(.)ident(style)operator(:)
            ident(escape) operator(=) ident(EscapeSequence)operator(()operator(\))
            keyword(if) ident(ndef)operator([)string<delimiter(')content(color)delimiter(')>operator(])operator(:)
                ident(escape)operator(.)ident(fg) operator(=) predefined_constant(self)operator(.)ident(_color_index)operator(()ident(ndef)operator([)string<delimiter(')content(color)delimiter(')>operator(])operator(\))
            keyword(if) ident(ndef)operator([)string<delimiter(')content(bgcolor)delimiter(')>operator(])operator(:)
                ident(escape)operator(.)ident(bg) operator(=) predefined_constant(self)operator(.)ident(_color_index)operator(()ident(ndef)operator([)string<delimiter(')content(bgcolor)delimiter(')>operator(])operator(\))
            keyword(if) predefined_constant(self)operator(.)ident(usebold) keyword(and) ident(ndef)operator([)string<delimiter(')content(bold)delimiter(')>operator(])operator(:)
                ident(escape)operator(.)ident(bold) operator(=) predefined_constant(True)
            keyword(if) predefined_constant(self)operator(.)ident(useunderline) keyword(and) ident(ndef)operator([)string<delimiter(')content(underline)delimiter(')>operator(])operator(:)
                ident(escape)operator(.)ident(underline) operator(=) predefined_constant(True)
            predefined_constant(self)operator(.)ident(style_string)operator([)predefined(str)operator(()ident(ttype)operator(\))operator(]) operator(=) operator(()ident(escape)operator(.)ident(color_string)operator(()operator(\))operator(,)
                                             ident(escape)operator(.)ident(reset_string)operator(()operator(\))operator(\))

    keyword(def) method(format)operator(()predefined_constant(self)operator(,) ident(tokensource)operator(,) ident(outfile)operator(\))operator(:)
        comment(# hack: if the output is a terminal and has an encoding set,)
        comment(# use that to avoid unicode encode problems)
        keyword(if) keyword(not) predefined_constant(self)operator(.)ident(encoding) keyword(and) predefined(hasattr)operator(()ident(outfile)operator(,) string<delimiter(")content(encoding)delimiter(")>operator(\)) keyword(and) \
           predefined(hasattr)operator(()ident(outfile)operator(,) string<delimiter(")content(isatty)delimiter(")>operator(\)) keyword(and) ident(outfile)operator(.)ident(isatty)operator(()operator(\))operator(:)
            predefined_constant(self)operator(.)ident(encoding) operator(=) ident(outfile)operator(.)ident(encoding)
        keyword(return) ident(Formatter)operator(.)ident(format)operator(()predefined_constant(self)operator(,) ident(tokensource)operator(,) ident(outfile)operator(\))

    keyword(def) method(format_unencoded)operator(()predefined_constant(self)operator(,) ident(tokensource)operator(,) ident(outfile)operator(\))operator(:)
        keyword(for) ident(ttype)operator(,) ident(value) keyword(in) ident(tokensource)operator(:)
            ident(not_found) operator(=) predefined_constant(True)
            keyword(while) ident(ttype) keyword(and) ident(not_found)operator(:)
                keyword(try)operator(:)
                    comment(#outfile.write( "<" + str(ttype\) + ">" \))
                    ident(on)operator(,) ident(off) operator(=) predefined_constant(self)operator(.)ident(style_string)operator([)predefined(str)operator(()ident(ttype)operator(\))operator(])

                    comment(# Like TerminalFormatter, add "reset colors" escape sequence)
                    comment(# on newline.)
                    ident(spl) operator(=) ident(value)operator(.)ident(split)operator(()string<delimiter(')char(\\n)delimiter(')>operator(\))
                    keyword(for) ident(line) keyword(in) ident(spl)operator([)operator(:)operator(-)integer(1)operator(])operator(:)
                        keyword(if) ident(line)operator(:)
                            ident(outfile)operator(.)ident(write)operator(()ident(on) operator(+) ident(line) operator(+) ident(off)operator(\))
                        ident(outfile)operator(.)ident(write)operator(()string<delimiter(')char(\\n)delimiter(')>operator(\))
                    keyword(if) ident(spl)operator([)operator(-)integer(1)operator(])operator(:)
                        ident(outfile)operator(.)ident(write)operator(()ident(on) operator(+) ident(spl)operator([)operator(-)integer(1)operator(]) operator(+) ident(off)operator(\))

                    ident(not_found) operator(=) predefined_constant(False)
                    comment(#outfile.write( '#' + str(ttype\) + '#' \))

                keyword(except) exception(KeyError)operator(:)
                    comment(#ottype = ttype)
                    ident(ttype) operator(=) ident(ttype)operator([)operator(:)operator(-)integer(1)operator(])
                    comment(#outfile.write( '!' + str(ottype\) + '->' + str(ttype\) + '!' \))

            keyword(if) ident(not_found)operator(:)
                ident(outfile)operator(.)ident(write)operator(()ident(value)operator(\))
comment(# -*- coding: utf-8 -*-)
docstring<delimiter(""")content(
)content(    pygments.lexer)content(
)content(    ~~~~~~~~~~~~~~)content(
)content(
)content(    Base lexer classes.)content(
)content(
)content(    :copyright: Copyright 2006-2009 by the Pygments team, see AUTHORS.)content(
)content(    :license: BSD, see LICENSE for details.)content(
)delimiter(""")>
keyword(import) include(re)

keyword(try)operator(:)
    predefined(set)
keyword(except) exception(NameError)operator(:)
    keyword(from) include(sets) keyword(import) include(Set) keyword(as) ident(set)

keyword(from) include(pygments.filter) keyword(import) include(apply_filters)operator(,) include(Filter)
keyword(from) include(pygments.filters) keyword(import) include(get_filter_by_name)
keyword(from) include(pygments.token) keyword(import) include(Error)operator(,) include(Text)operator(,) include(Other)operator(,) include(_TokenType)
keyword(from) include(pygments.util) keyword(import) include(get_bool_opt)operator(,) include(get_int_opt)operator(,) include(get_list_opt)operator(,) \
     include(make_analysator)


ident(__all__) operator(=) operator([)string<delimiter(')content(Lexer)delimiter(')>operator(,) string<delimiter(')content(RegexLexer)delimiter(')>operator(,) string<delimiter(')content(ExtendedRegexLexer)delimiter(')>operator(,) string<delimiter(')content(DelegatingLexer)delimiter(')>operator(,)
           string<delimiter(')content(LexerContext)delimiter(')>operator(,) string<delimiter(')content(include)delimiter(')>operator(,) string<delimiter(')content(flags)delimiter(')>operator(,) string<delimiter(')content(bygroups)delimiter(')>operator(,) string<delimiter(')content(using)delimiter(')>operator(,) string<delimiter(')content(this)delimiter(')>operator(])


ident(_default_analyse) operator(=) predefined(staticmethod)operator(()keyword(lambda) ident(x)operator(:) float(0.0)operator(\))


keyword(class) class(LexerMeta)operator(()predefined(type)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    This metaclass automagically converts ``analyse_text`` methods into)content(
)content(    static methods which always return float values.)content(
)content(    )delimiter(""")>

    keyword(def) method(__new__)operator(()ident(cls)operator(,) ident(name)operator(,) ident(bases)operator(,) ident(d)operator(\))operator(:)
        keyword(if) string<delimiter(')content(analyse_text)delimiter(')> keyword(in) ident(d)operator(:)
            ident(d)operator([)string<delimiter(')content(analyse_text)delimiter(')>operator(]) operator(=) ident(make_analysator)operator(()ident(d)operator([)string<delimiter(')content(analyse_text)delimiter(')>operator(])operator(\))
        keyword(return) predefined(type)operator(.)ident(__new__)operator(()ident(cls)operator(,) ident(name)operator(,) ident(bases)operator(,) ident(d)operator(\))


keyword(class) class(Lexer)operator(()predefined(object)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Lexer for a specific language.)content(
)content(
)content(    Basic options recognized:)content(
)content(    ``stripnl``)content(
)content(        Strip leading and trailing newlines from the input (default: True\).)content(
)content(    ``stripall``)content(
)content(        Strip all leading and trailing whitespace from the input)content(
)content(        (default: False\).)content(
)content(    ``tabsize``)content(
)content(        If given and greater than 0, expand tabs in the input (default: 0\).)content(
)content(    ``encoding``)content(
)content(        If given, must be an encoding name. This encoding will be used to)content(
)content(        convert the input string to Unicode, if it is not already a Unicode)content(
)content(        string (default: ``'latin1'``\).)content(
)content(        Can also be ``'guess'`` to use a simple UTF-8 / Latin1 detection, or)content(
)content(        ``'chardet'`` to use the chardet library, if it is installed.)content(
)content(    )delimiter(""")>

    comment(#: Name of the lexer)
    ident(name) operator(=) predefined_constant(None)

    comment(#: Shortcuts for the lexer)
    ident(aliases) operator(=) operator([)operator(])

    comment(#: fn match rules)
    ident(filenames) operator(=) operator([)operator(])

    comment(#: fn alias filenames)
    ident(alias_filenames) operator(=) operator([)operator(])

    comment(#: mime types)
    ident(mimetypes) operator(=) operator([)operator(])

    ident(__metaclass__) operator(=) ident(LexerMeta)

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))operator(:)
        predefined_constant(self)operator(.)ident(options) operator(=) ident(options)
        predefined_constant(self)operator(.)ident(stripnl) operator(=) ident(get_bool_opt)operator(()ident(options)operator(,) string<delimiter(')content(stripnl)delimiter(')>operator(,) predefined_constant(True)operator(\))
        predefined_constant(self)operator(.)ident(stripall) operator(=) ident(get_bool_opt)operator(()ident(options)operator(,) string<delimiter(')content(stripall)delimiter(')>operator(,) predefined_constant(False)operator(\))
        predefined_constant(self)operator(.)ident(tabsize) operator(=) ident(get_int_opt)operator(()ident(options)operator(,) string<delimiter(')content(tabsize)delimiter(')>operator(,) integer(0)operator(\))
        predefined_constant(self)operator(.)ident(encoding) operator(=) ident(options)operator(.)ident(get)operator(()string<delimiter(')content(encoding)delimiter(')>operator(,) string<delimiter(')content(latin1)delimiter(')>operator(\))
        comment(# self.encoding = options.get('inencoding', None\) or self.encoding)
        predefined_constant(self)operator(.)ident(filters) operator(=) operator([)operator(])
        keyword(for) ident(filter_) keyword(in) ident(get_list_opt)operator(()ident(options)operator(,) string<delimiter(')content(filters)delimiter(')>operator(,) operator(()operator(\))operator(\))operator(:)
            predefined_constant(self)operator(.)ident(add_filter)operator(()ident(filter_)operator(\))

    keyword(def) method(__repr__)operator(()predefined_constant(self)operator(\))operator(:)
        keyword(if) predefined_constant(self)operator(.)ident(options)operator(:)
            keyword(return) string<delimiter(')content(<pygments.lexers.%s with %r>)delimiter(')> operator(%) operator(()predefined_constant(self)operator(.)ident(__class__)operator(.)ident(__name__)operator(,)
                                                     predefined_constant(self)operator(.)ident(options)operator(\))
        keyword(else)operator(:)
            keyword(return) string<delimiter(')content(<pygments.lexers.%s>)delimiter(')> operator(%) predefined_constant(self)operator(.)ident(__class__)operator(.)ident(__name__)

    keyword(def) method(add_filter)operator(()predefined_constant(self)operator(,) ident(filter_)operator(,) operator(**)ident(options)operator(\))operator(:)
        docstring<delimiter(""")content(
)content(        Add a new stream filter to this lexer.)content(
)content(        )delimiter(""")>
        keyword(if) keyword(not) predefined(isinstance)operator(()ident(filter_)operator(,) ident(Filter)operator(\))operator(:)
            ident(filter_) operator(=) ident(get_filter_by_name)operator(()ident(filter_)operator(,) operator(**)ident(options)operator(\))
        predefined_constant(self)operator(.)ident(filters)operator(.)ident(append)operator(()ident(filter_)operator(\))

    keyword(def) method(analyse_text)operator(()ident(text)operator(\))operator(:)
        docstring<delimiter(""")content(
)content(        Has to return a float between ``0`` and ``1`` that indicates)content(
)content(        if a lexer wants to highlight this text. Used by ``guess_lexer``.)content(
)content(        If this method returns ``0`` it won't highlight it in any case, if)content(
)content(        it returns ``1`` highlighting with this lexer is guaranteed.)content(
)content(
)content(        The `LexerMeta` metaclass automatically wraps this function so)content(
)content(        that it works like a static method (no ``self`` or ``cls``)content(
)content(        parameter\) and the return value is automatically converted to)content(
)content(        `float`. If the return value is an object that is boolean `False`)content(
)content(        it's the same as if the return values was ``0.0``.)content(
)content(        )delimiter(""")>

    keyword(def) method(get_tokens)operator(()predefined_constant(self)operator(,) ident(text)operator(,) ident(unfiltered)operator(=)predefined_constant(False)operator(\))operator(:)
        docstring<delimiter(""")content(
)content(        Return an iterable of (tokentype, value\) pairs generated from)content(
)content(        `text`. If `unfiltered` is set to `True`, the filtering mechanism)content(
)content(        is bypassed even if filters are defined.)content(
)content(
)content(        Also preprocess the text, i.e. expand tabs and strip it if)content(
)content(        wanted and applies registered filters.)content(
)content(        )delimiter(""")>
        keyword(if) keyword(not) predefined(isinstance)operator(()ident(text)operator(,) predefined(unicode)operator(\))operator(:)
            keyword(if) predefined_constant(self)operator(.)ident(encoding) operator(==) string<delimiter(')content(guess)delimiter(')>operator(:)
                keyword(try)operator(:)
                    ident(text) operator(=) ident(text)operator(.)ident(decode)operator(()string<delimiter(')content(utf-8)delimiter(')>operator(\))
                    keyword(if) ident(text)operator(.)ident(startswith)operator(()string<modifier(u)delimiter(')char(\\ufeff)delimiter(')>operator(\))operator(:)
                        ident(text) operator(=) ident(text)operator([)predefined(len)operator(()string<modifier(u)delimiter(')char(\\ufeff)delimiter(')>operator(\))operator(:)operator(])
                keyword(except) exception(UnicodeDecodeError)operator(:)
                    ident(text) operator(=) ident(text)operator(.)ident(decode)operator(()string<delimiter(')content(latin1)delimiter(')>operator(\))
            keyword(elif) predefined_constant(self)operator(.)ident(encoding) operator(==) string<delimiter(')content(chardet)delimiter(')>operator(:)
                keyword(try)operator(:)
                    keyword(import) include(chardet)
                keyword(except) exception(ImportError)operator(:)
                    keyword(raise) exception(ImportError)operator(()string<delimiter(')content(To enable chardet encoding guessing, )delimiter(')>
                                      string<delimiter(')content(please install the chardet library )delimiter(')>
                                      string<delimiter(')content(from http://chardet.feedparser.org/)delimiter(')>operator(\))
                ident(enc) operator(=) ident(chardet)operator(.)ident(detect)operator(()ident(text)operator(\))
                ident(text) operator(=) ident(text)operator(.)ident(decode)operator(()ident(enc)operator([)string<delimiter(')content(encoding)delimiter(')>operator(])operator(\))
            keyword(else)operator(:)
                ident(text) operator(=) ident(text)operator(.)ident(decode)operator(()predefined_constant(self)operator(.)ident(encoding)operator(\))
        comment(# text now *is* a unicode string)
        ident(text) operator(=) ident(text)operator(.)ident(replace)operator(()string<delimiter(')char(\\r)char(\\n)delimiter(')>operator(,) string<delimiter(')char(\\n)delimiter(')>operator(\))
        ident(text) operator(=) ident(text)operator(.)ident(replace)operator(()string<delimiter(')char(\\r)delimiter(')>operator(,) string<delimiter(')char(\\n)delimiter(')>operator(\))
        keyword(if) predefined_constant(self)operator(.)ident(stripall)operator(:)
            ident(text) operator(=) ident(text)operator(.)ident(strip)operator(()operator(\))
        keyword(elif) predefined_constant(self)operator(.)ident(stripnl)operator(:)
            ident(text) operator(=) ident(text)operator(.)ident(strip)operator(()string<delimiter(')char(\\n)delimiter(')>operator(\))
        keyword(if) predefined_constant(self)operator(.)ident(tabsize) operator(>) integer(0)operator(:)
            ident(text) operator(=) ident(text)operator(.)ident(expandtabs)operator(()predefined_constant(self)operator(.)ident(tabsize)operator(\))
        keyword(if) keyword(not) ident(text)operator(.)ident(endswith)operator(()string<delimiter(')char(\\n)delimiter(')>operator(\))operator(:)
            ident(text) operator(+=) string<delimiter(')char(\\n)delimiter(')>

        keyword(def) method(streamer)operator(()operator(\))operator(:)
            keyword(for) ident(i)operator(,) ident(t)operator(,) ident(v) keyword(in) predefined_constant(self)operator(.)ident(get_tokens_unprocessed)operator(()ident(text)operator(\))operator(:)
                keyword(yield) ident(t)operator(,) ident(v)
        ident(stream) operator(=) ident(streamer)operator(()operator(\))
        keyword(if) keyword(not) ident(unfiltered)operator(:)
            ident(stream) operator(=) ident(apply_filters)operator(()ident(stream)operator(,) predefined_constant(self)operator(.)ident(filters)operator(,) predefined_constant(self)operator(\))
        keyword(return) ident(stream)

    keyword(def) method(get_tokens_unprocessed)operator(()predefined_constant(self)operator(,) ident(text)operator(\))operator(:)
        docstring<delimiter(""")content(
)content(        Return an iterable of (tokentype, value\) pairs.)content(
)content(        In subclasses, implement this method as a generator to)content(
)content(        maximize effectiveness.)content(
)content(        )delimiter(""")>
        keyword(raise) exception(NotImplementedError)


keyword(class) class(DelegatingLexer)operator(()ident(Lexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    This lexer takes two lexer as arguments. A root lexer and)content(
)content(    a language lexer. First everything is scanned using the language)content(
)content(    lexer, afterwards all ``Other`` tokens are lexed using the root)content(
)content(    lexer.)content(
)content(
)content(    The lexers from the ``template`` lexer package use this base lexer.)content(
)content(    )delimiter(""")>

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) ident(_root_lexer)operator(,) ident(_language_lexer)operator(,) ident(_needle)operator(=)ident(Other)operator(,) operator(**)ident(options)operator(\))operator(:)
        predefined_constant(self)operator(.)ident(root_lexer) operator(=) ident(_root_lexer)operator(()operator(**)ident(options)operator(\))
        predefined_constant(self)operator(.)ident(language_lexer) operator(=) ident(_language_lexer)operator(()operator(**)ident(options)operator(\))
        predefined_constant(self)operator(.)ident(needle) operator(=) ident(_needle)
        ident(Lexer)operator(.)ident(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))

    keyword(def) method(get_tokens_unprocessed)operator(()predefined_constant(self)operator(,) ident(text)operator(\))operator(:)
        ident(buffered) operator(=) string<delimiter(')delimiter(')>
        ident(insertions) operator(=) operator([)operator(])
        ident(lng_buffer) operator(=) operator([)operator(])
        keyword(for) ident(i)operator(,) ident(t)operator(,) ident(v) keyword(in) predefined_constant(self)operator(.)ident(language_lexer)operator(.)ident(get_tokens_unprocessed)operator(()ident(text)operator(\))operator(:)
            keyword(if) ident(t) keyword(is) predefined_constant(self)operator(.)ident(needle)operator(:)
                keyword(if) ident(lng_buffer)operator(:)
                    ident(insertions)operator(.)ident(append)operator(()operator(()predefined(len)operator(()ident(buffered)operator(\))operator(,) ident(lng_buffer)operator(\))operator(\))
                    ident(lng_buffer) operator(=) operator([)operator(])
                ident(buffered) operator(+=) ident(v)
            keyword(else)operator(:)
                ident(lng_buffer)operator(.)ident(append)operator(()operator(()ident(i)operator(,) ident(t)operator(,) ident(v)operator(\))operator(\))
        keyword(if) ident(lng_buffer)operator(:)
            ident(insertions)operator(.)ident(append)operator(()operator(()predefined(len)operator(()ident(buffered)operator(\))operator(,) ident(lng_buffer)operator(\))operator(\))
        keyword(return) ident(do_insertions)operator(()ident(insertions)operator(,)
                             predefined_constant(self)operator(.)ident(root_lexer)operator(.)ident(get_tokens_unprocessed)operator(()ident(buffered)operator(\))operator(\))


comment(#-------------------------------------------------------------------------------)
comment(# RegexLexer and ExtendedRegexLexer)
comment(#)


keyword(class) class(include)operator(()predefined(str)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Indicates that a state should include rules from another state.)content(
)content(    )delimiter(""")>
    keyword(pass)


keyword(class) class(combined)operator(()predefined(tuple)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Indicates a state combined from multiple states.)content(
)content(    )delimiter(""")>

    keyword(def) method(__new__)operator(()ident(cls)operator(,) operator(*)ident(args)operator(\))operator(:)
        keyword(return) predefined(tuple)operator(.)ident(__new__)operator(()ident(cls)operator(,) ident(args)operator(\))

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) operator(*)ident(args)operator(\))operator(:)
        comment(# tuple.__init__ doesn't do anything)
        keyword(pass)


keyword(class) class(_PseudoMatch)operator(()predefined(object)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    A pseudo match object constructed from a string.)content(
)content(    )delimiter(""")>

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) ident(start)operator(,) ident(text)operator(\))operator(:)
        predefined_constant(self)operator(.)ident(_text) operator(=) ident(text)
        predefined_constant(self)operator(.)ident(_start) operator(=) ident(start)

    keyword(def) method(start)operator(()predefined_constant(self)operator(,) ident(arg)operator(=)predefined_constant(None)operator(\))operator(:)
        keyword(return) predefined_constant(self)operator(.)ident(_start)

    keyword(def) method(end)operator(()predefined_constant(self)operator(,) ident(arg)operator(=)predefined_constant(None)operator(\))operator(:)
        keyword(return) predefined_constant(self)operator(.)ident(_start) operator(+) predefined(len)operator(()predefined_constant(self)operator(.)ident(_text)operator(\))

    keyword(def) method(group)operator(()predefined_constant(self)operator(,) ident(arg)operator(=)predefined_constant(None)operator(\))operator(:)
        keyword(if) ident(arg)operator(:)
            keyword(raise) exception(IndexError)operator(()string<delimiter(')content(No such group)delimiter(')>operator(\))
        keyword(return) predefined_constant(self)operator(.)ident(_text)

    keyword(def) method(groups)operator(()predefined_constant(self)operator(\))operator(:)
        keyword(return) operator(()predefined_constant(self)operator(.)ident(_text)operator(,)operator(\))

    keyword(def) method(groupdict)operator(()predefined_constant(self)operator(\))operator(:)
        keyword(return) operator({)operator(})


keyword(def) method(bygroups)operator(()operator(*)ident(args)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Callback that yields multiple actions for each group in the match.)content(
)content(    )delimiter(""")>
    keyword(def) method(callback)operator(()ident(lexer)operator(,) ident(match)operator(,) ident(ctx)operator(=)predefined_constant(None)operator(\))operator(:)
        keyword(for) ident(i)operator(,) ident(action) keyword(in) predefined(enumerate)operator(()ident(args)operator(\))operator(:)
            keyword(if) ident(action) keyword(is) predefined_constant(None)operator(:)
                keyword(continue)
            keyword(elif) predefined(type)operator(()ident(action)operator(\)) keyword(is) ident(_TokenType)operator(:)
                ident(data) operator(=) ident(match)operator(.)ident(group)operator(()ident(i) operator(+) integer(1)operator(\))
                keyword(if) ident(data)operator(:)
                    keyword(yield) ident(match)operator(.)ident(start)operator(()ident(i) operator(+) integer(1)operator(\))operator(,) ident(action)operator(,) ident(data)
            keyword(else)operator(:)
                keyword(if) ident(ctx)operator(:)
                    ident(ctx)operator(.)ident(pos) operator(=) ident(match)operator(.)ident(start)operator(()ident(i) operator(+) integer(1)operator(\))
                keyword(for) ident(item) keyword(in) ident(action)operator(()ident(lexer)operator(,) ident(_PseudoMatch)operator(()ident(match)operator(.)ident(start)operator(()ident(i) operator(+) integer(1)operator(\))operator(,)
                                   ident(match)operator(.)ident(group)operator(()ident(i) operator(+) integer(1)operator(\))operator(\))operator(,) ident(ctx)operator(\))operator(:)
                    keyword(if) ident(item)operator(:)
                        keyword(yield) ident(item)
        keyword(if) ident(ctx)operator(:)
            ident(ctx)operator(.)ident(pos) operator(=) ident(match)operator(.)ident(end)operator(()operator(\))
    keyword(return) ident(callback)


keyword(class) class(_This)operator(()predefined(object)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Special singleton used for indicating the caller class.)content(
)content(    Used by ``using``.)content(
)content(    )delimiter(""")>
ident(this) operator(=) ident(_This)operator(()operator(\))


keyword(def) method(using)operator(()ident(_other)operator(,) operator(**)ident(kwargs)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Callback that processes the match with a different lexer.)content(
)content(
)content(    The keyword arguments are forwarded to the lexer, except `state` which)content(
)content(    is handled separately.)content(
)content(
)content(    `state` specifies the state that the new lexer will start in, and can)content(
)content(    be an enumerable such as ('root', 'inline', 'string'\) or a simple)content(
)content(    string which is assumed to be on top of the root state.)content(
)content(
)content(    Note: For that to work, `_other` must not be an `ExtendedRegexLexer`.)content(
)content(    )delimiter(""")>
    ident(gt_kwargs) operator(=) operator({)operator(})
    keyword(if) string<delimiter(')content(state)delimiter(')> keyword(in) ident(kwargs)operator(:)
        ident(s) operator(=) ident(kwargs)operator(.)ident(pop)operator(()string<delimiter(')content(state)delimiter(')>operator(\))
        keyword(if) predefined(isinstance)operator(()ident(s)operator(,) operator(()predefined(list)operator(,) predefined(tuple)operator(\))operator(\))operator(:)
            ident(gt_kwargs)operator([)string<delimiter(')content(stack)delimiter(')>operator(]) operator(=) ident(s)
        keyword(else)operator(:)
            ident(gt_kwargs)operator([)string<delimiter(')content(stack)delimiter(')>operator(]) operator(=) operator(()string<delimiter(')content(root)delimiter(')>operator(,) ident(s)operator(\))

    keyword(if) ident(_other) keyword(is) ident(this)operator(:)
        keyword(def) method(callback)operator(()ident(lexer)operator(,) ident(match)operator(,) ident(ctx)operator(=)predefined_constant(None)operator(\))operator(:)
            comment(# if keyword arguments are given the callback)
            comment(# function has to create a new lexer instance)
            keyword(if) ident(kwargs)operator(:)
                comment(# XXX: cache that somehow)
                ident(kwargs)operator(.)ident(update)operator(()ident(lexer)operator(.)ident(options)operator(\))
                ident(lx) operator(=) ident(lexer)operator(.)ident(__class__)operator(()operator(**)ident(kwargs)operator(\))
            keyword(else)operator(:)
                ident(lx) operator(=) ident(lexer)
            ident(s) operator(=) ident(match)operator(.)ident(start)operator(()operator(\))
            keyword(for) ident(i)operator(,) ident(t)operator(,) ident(v) keyword(in) ident(lx)operator(.)ident(get_tokens_unprocessed)operator(()ident(match)operator(.)ident(group)operator(()operator(\))operator(,) operator(**)ident(gt_kwargs)operator(\))operator(:)
                keyword(yield) ident(i) operator(+) ident(s)operator(,) ident(t)operator(,) ident(v)
            keyword(if) ident(ctx)operator(:)
                ident(ctx)operator(.)ident(pos) operator(=) ident(match)operator(.)ident(end)operator(()operator(\))
    keyword(else)operator(:)
        keyword(def) method(callback)operator(()ident(lexer)operator(,) ident(match)operator(,) ident(ctx)operator(=)predefined_constant(None)operator(\))operator(:)
            comment(# XXX: cache that somehow)
            ident(kwargs)operator(.)ident(update)operator(()ident(lexer)operator(.)ident(options)operator(\))
            ident(lx) operator(=) ident(_other)operator(()operator(**)ident(kwargs)operator(\))

            ident(s) operator(=) ident(match)operator(.)ident(start)operator(()operator(\))
            keyword(for) ident(i)operator(,) ident(t)operator(,) ident(v) keyword(in) ident(lx)operator(.)ident(get_tokens_unprocessed)operator(()ident(match)operator(.)ident(group)operator(()operator(\))operator(,) operator(**)ident(gt_kwargs)operator(\))operator(:)
                keyword(yield) ident(i) operator(+) ident(s)operator(,) ident(t)operator(,) ident(v)
            keyword(if) ident(ctx)operator(:)
                ident(ctx)operator(.)ident(pos) operator(=) ident(match)operator(.)ident(end)operator(()operator(\))
    keyword(return) ident(callback)


keyword(class) class(RegexLexerMeta)operator(()ident(LexerMeta)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Metaclass for RegexLexer, creates the self._tokens attribute from)content(
)content(    self.tokens on the first instantiation.)content(
)content(    )delimiter(""")>

    keyword(def) method(_process_state)operator(()ident(cls)operator(,) ident(unprocessed)operator(,) ident(processed)operator(,) ident(state)operator(\))operator(:)
        keyword(assert) predefined(type)operator(()ident(state)operator(\)) keyword(is) predefined(str)operator(,) string<delimiter(")content(wrong state name %r)delimiter(")> operator(%) ident(state)
        keyword(assert) ident(state)operator([)integer(0)operator(]) operator(!=) string<delimiter(')content(#)delimiter(')>operator(,) string<delimiter(")content(invalid state name %r)delimiter(")> operator(%) ident(state)
        keyword(if) ident(state) keyword(in) ident(processed)operator(:)
            keyword(return) ident(processed)operator([)ident(state)operator(])
        ident(tokens) operator(=) ident(processed)operator([)ident(state)operator(]) operator(=) operator([)operator(])
        ident(rflags) operator(=) ident(cls)operator(.)ident(flags)
        keyword(for) ident(tdef) keyword(in) ident(unprocessed)operator([)ident(state)operator(])operator(:)
            keyword(if) predefined(isinstance)operator(()ident(tdef)operator(,) ident(include)operator(\))operator(:)
                comment(# it's a state reference)
                keyword(assert) ident(tdef) operator(!=) ident(state)operator(,) string<delimiter(")content(circular state reference %r)delimiter(")> operator(%) ident(state)
                ident(tokens)operator(.)ident(extend)operator(()ident(cls)operator(.)ident(_process_state)operator(()ident(unprocessed)operator(,) ident(processed)operator(,) predefined(str)operator(()ident(tdef)operator(\))operator(\))operator(\))
                keyword(continue)

            keyword(assert) predefined(type)operator(()ident(tdef)operator(\)) keyword(is) predefined(tuple)operator(,) string<delimiter(")content(wrong rule def %r)delimiter(")> operator(%) ident(tdef)

            keyword(try)operator(:)
                ident(rex) operator(=) ident(re)operator(.)ident(compile)operator(()ident(tdef)operator([)integer(0)operator(])operator(,) ident(rflags)operator(\))operator(.)ident(match)
            keyword(except) exception(Exception)operator(,) ident(err)operator(:)
                keyword(raise) exception(ValueError)operator(()string<delimiter(")content(uncompilable regex %r in state %r of %r: %s)delimiter(")> operator(%)
                                 operator(()ident(tdef)operator([)integer(0)operator(])operator(,) ident(state)operator(,) ident(cls)operator(,) ident(err)operator(\))operator(\))

            keyword(assert) predefined(type)operator(()ident(tdef)operator([)integer(1)operator(])operator(\)) keyword(is) ident(_TokenType) keyword(or) predefined(callable)operator(()ident(tdef)operator([)integer(1)operator(])operator(\))operator(,) \
                   string<delimiter(')content(token type must be simple type or callable, not %r)delimiter(')> operator(%) operator(()ident(tdef)operator([)integer(1)operator(])operator(,)operator(\))

            keyword(if) predefined(len)operator(()ident(tdef)operator(\)) operator(==) integer(2)operator(:)
                ident(new_state) operator(=) predefined_constant(None)
            keyword(else)operator(:)
                ident(tdef2) operator(=) ident(tdef)operator([)integer(2)operator(])
                keyword(if) predefined(isinstance)operator(()ident(tdef2)operator(,) predefined(str)operator(\))operator(:)
                    comment(# an existing state)
                    keyword(if) ident(tdef2) operator(==) string<delimiter(')content(#pop)delimiter(')>operator(:)
                        ident(new_state) operator(=) operator(-)integer(1)
                    keyword(elif) ident(tdef2) keyword(in) ident(unprocessed)operator(:)
                        ident(new_state) operator(=) operator(()ident(tdef2)operator(,)operator(\))
                    keyword(elif) ident(tdef2) operator(==) string<delimiter(')content(#push)delimiter(')>operator(:)
                        ident(new_state) operator(=) ident(tdef2)
                    keyword(elif) ident(tdef2)operator([)operator(:)integer(5)operator(]) operator(==) string<delimiter(')content(#pop:)delimiter(')>operator(:)
                        ident(new_state) operator(=) operator(-)predefined(int)operator(()ident(tdef2)operator([)integer(5)operator(:)operator(])operator(\))
                    keyword(else)operator(:)
                        keyword(assert) predefined_constant(False)operator(,) string<delimiter(')content(unknown new state %r)delimiter(')> operator(%) ident(tdef2)
                keyword(elif) predefined(isinstance)operator(()ident(tdef2)operator(,) ident(combined)operator(\))operator(:)
                    comment(# combine a new state from existing ones)
                    ident(new_state) operator(=) string<delimiter(')content(_tmp_%d)delimiter(')> operator(%) ident(cls)operator(.)ident(_tmpname)
                    ident(cls)operator(.)ident(_tmpname) operator(+=) integer(1)
                    ident(itokens) operator(=) operator([)operator(])
                    keyword(for) ident(istate) keyword(in) ident(tdef2)operator(:)
                        keyword(assert) ident(istate) operator(!=) ident(state)operator(,) string<delimiter(')content(circular state ref %r)delimiter(')> operator(%) ident(istate)
                        ident(itokens)operator(.)ident(extend)operator(()ident(cls)operator(.)ident(_process_state)operator(()ident(unprocessed)operator(,)
                                                          ident(processed)operator(,) ident(istate)operator(\))operator(\))
                    ident(processed)operator([)ident(new_state)operator(]) operator(=) ident(itokens)
                    ident(new_state) operator(=) operator(()ident(new_state)operator(,)operator(\))
                keyword(elif) predefined(isinstance)operator(()ident(tdef2)operator(,) predefined(tuple)operator(\))operator(:)
                    comment(# push more than one state)
                    keyword(for) ident(state) keyword(in) ident(tdef2)operator(:)
                        keyword(assert) operator(()ident(state) keyword(in) ident(unprocessed) keyword(or)
                                ident(state) keyword(in) operator(()string<delimiter(')content(#pop)delimiter(')>operator(,) string<delimiter(')content(#push)delimiter(')>operator(\))operator(\))operator(,) \
                               string<delimiter(')content(unknown new state )delimiter(')> operator(+) ident(state)
                    ident(new_state) operator(=) ident(tdef2)
                keyword(else)operator(:)
                    keyword(assert) predefined_constant(False)operator(,) string<delimiter(')content(unknown new state def %r)delimiter(')> operator(%) ident(tdef2)
            ident(tokens)operator(.)ident(append)operator(()operator(()ident(rex)operator(,) ident(tdef)operator([)integer(1)operator(])operator(,) ident(new_state)operator(\))operator(\))
        keyword(return) ident(tokens)

    keyword(def) method(process_tokendef)operator(()ident(cls)operator(,) ident(name)operator(,) ident(tokendefs)operator(=)predefined_constant(None)operator(\))operator(:)
        ident(processed) operator(=) ident(cls)operator(.)ident(_all_tokens)operator([)ident(name)operator(]) operator(=) operator({)operator(})
        ident(tokendefs) operator(=) ident(tokendefs) keyword(or) ident(cls)operator(.)ident(tokens)operator([)ident(name)operator(])
        keyword(for) ident(state) keyword(in) ident(tokendefs)operator(.)ident(keys)operator(()operator(\))operator(:)
            ident(cls)operator(.)ident(_process_state)operator(()ident(tokendefs)operator(,) ident(processed)operator(,) ident(state)operator(\))
        keyword(return) ident(processed)

    keyword(def) method(__call__)operator(()ident(cls)operator(,) operator(*)ident(args)operator(,) operator(**)ident(kwds)operator(\))operator(:)
        keyword(if) keyword(not) predefined(hasattr)operator(()ident(cls)operator(,) string<delimiter(')content(_tokens)delimiter(')>operator(\))operator(:)
            ident(cls)operator(.)ident(_all_tokens) operator(=) operator({)operator(})
            ident(cls)operator(.)ident(_tmpname) operator(=) integer(0)
            keyword(if) predefined(hasattr)operator(()ident(cls)operator(,) string<delimiter(')content(token_variants)delimiter(')>operator(\)) keyword(and) ident(cls)operator(.)ident(token_variants)operator(:)
                comment(# don't process yet)
                keyword(pass)
            keyword(else)operator(:)
                ident(cls)operator(.)ident(_tokens) operator(=) ident(cls)operator(.)ident(process_tokendef)operator(()string<delimiter(')delimiter(')>operator(,) ident(cls)operator(.)ident(tokens)operator(\))

        keyword(return) predefined(type)operator(.)ident(__call__)operator(()ident(cls)operator(,) operator(*)ident(args)operator(,) operator(**)ident(kwds)operator(\))


keyword(class) class(RegexLexer)operator(()ident(Lexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Base for simple stateful regular expression-based lexers.)content(
)content(    Simplifies the lexing process so that you need only)content(
)content(    provide a list of states and regular expressions.)content(
)content(    )delimiter(""")>
    ident(__metaclass__) operator(=) ident(RegexLexerMeta)

    comment(#: Flags for compiling the regular expressions.)
    comment(#: Defaults to MULTILINE.)
    ident(flags) operator(=) ident(re)operator(.)ident(MULTILINE)

    comment(#: Dict of ``{'state': [(regex, tokentype, new_state\), ...], ...}``)
    comment(#:)
    comment(#: The initial state is 'root'.)
    comment(#: ``new_state`` can be omitted to signify no state transition.)
    comment(#: If it is a string, the state is pushed on the stack and changed.)
    comment(#: If it is a tuple of strings, all states are pushed on the stack and)
    comment(#: the current state will be the topmost.)
    comment(#: It can also be ``combined('state1', 'state2', ...\)``)
    comment(#: to signify a new, anonymous state combined from the rules of two)
    comment(#: or more existing ones.)
    comment(#: Furthermore, it can be '#pop' to signify going back one step in)
    comment(#: the state stack, or '#push' to push the current state on the stack)
    comment(#: again.)
    comment(#:)
    comment(#: The tuple can also be replaced with ``include('state'\)``, in which)
    comment(#: case the rules from the state named by the string are included in the)
    comment(#: current one.)
    ident(tokens) operator(=) operator({)operator(})

    keyword(def) method(get_tokens_unprocessed)operator(()predefined_constant(self)operator(,) ident(text)operator(,) ident(stack)operator(=)operator(()string<delimiter(')content(root)delimiter(')>operator(,)operator(\))operator(\))operator(:)
        docstring<delimiter(""")content(
)content(        Split ``text`` into (tokentype, text\) pairs.)content(
)content(
)content(        ``stack`` is the inital stack (default: ``['root']``\))content(
)content(        )delimiter(""")>
        ident(pos) operator(=) integer(0)
        ident(tokendefs) operator(=) predefined_constant(self)operator(.)ident(_tokens)
        ident(statestack) operator(=) predefined(list)operator(()ident(stack)operator(\))
        ident(statetokens) operator(=) ident(tokendefs)operator([)ident(statestack)operator([)operator(-)integer(1)operator(])operator(])
        keyword(while) integer(1)operator(:)
            keyword(for) ident(rexmatch)operator(,) ident(action)operator(,) ident(new_state) keyword(in) ident(statetokens)operator(:)
                ident(m) operator(=) ident(rexmatch)operator(()ident(text)operator(,) ident(pos)operator(\))
                keyword(if) ident(m)operator(:)
                    keyword(if) predefined(type)operator(()ident(action)operator(\)) keyword(is) ident(_TokenType)operator(:)
                        keyword(yield) ident(pos)operator(,) ident(action)operator(,) ident(m)operator(.)ident(group)operator(()operator(\))
                    keyword(else)operator(:)
                        keyword(for) ident(item) keyword(in) ident(action)operator(()predefined_constant(self)operator(,) ident(m)operator(\))operator(:)
                            keyword(yield) ident(item)
                    ident(pos) operator(=) ident(m)operator(.)ident(end)operator(()operator(\))
                    keyword(if) ident(new_state) keyword(is) keyword(not) predefined_constant(None)operator(:)
                        comment(# state transition)
                        keyword(if) predefined(isinstance)operator(()ident(new_state)operator(,) predefined(tuple)operator(\))operator(:)
                            keyword(for) ident(state) keyword(in) ident(new_state)operator(:)
                                keyword(if) ident(state) operator(==) string<delimiter(')content(#pop)delimiter(')>operator(:)
                                    ident(statestack)operator(.)ident(pop)operator(()operator(\))
                                keyword(elif) ident(state) operator(==) string<delimiter(')content(#push)delimiter(')>operator(:)
                                    ident(statestack)operator(.)ident(append)operator(()ident(statestack)operator([)operator(-)integer(1)operator(])operator(\))
                                keyword(else)operator(:)
                                    ident(statestack)operator(.)ident(append)operator(()ident(state)operator(\))
                        keyword(elif) predefined(isinstance)operator(()ident(new_state)operator(,) predefined(int)operator(\))operator(:)
                            comment(# pop)
                            keyword(del) ident(statestack)operator([)ident(new_state)operator(:)operator(])
                        keyword(elif) ident(new_state) operator(==) string<delimiter(')content(#push)delimiter(')>operator(:)
                            ident(statestack)operator(.)ident(append)operator(()ident(statestack)operator([)operator(-)integer(1)operator(])operator(\))
                        keyword(else)operator(:)
                            keyword(assert) predefined_constant(False)operator(,) string<delimiter(")content(wrong state def: %r)delimiter(")> operator(%) ident(new_state)
                        ident(statetokens) operator(=) ident(tokendefs)operator([)ident(statestack)operator([)operator(-)integer(1)operator(])operator(])
                    keyword(break)
            keyword(else)operator(:)
                keyword(try)operator(:)
                    keyword(if) ident(text)operator([)ident(pos)operator(]) operator(==) string<delimiter(')char(\\n)delimiter(')>operator(:)
                        comment(# at EOL, reset state to "root")
                        ident(pos) operator(+=) integer(1)
                        ident(statestack) operator(=) operator([)string<delimiter(')content(root)delimiter(')>operator(])
                        ident(statetokens) operator(=) ident(tokendefs)operator([)string<delimiter(')content(root)delimiter(')>operator(])
                        keyword(yield) ident(pos)operator(,) ident(Text)operator(,) string<modifier(u)delimiter(')char(\\n)delimiter(')>
                        keyword(continue)
                    keyword(yield) ident(pos)operator(,) ident(Error)operator(,) ident(text)operator([)ident(pos)operator(])
                    ident(pos) operator(+=) integer(1)
                keyword(except) exception(IndexError)operator(:)
                    keyword(break)


keyword(class) class(LexerContext)operator(()predefined(object)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    A helper object that holds lexer position data.)content(
)content(    )delimiter(""")>

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) ident(text)operator(,) ident(pos)operator(,) ident(stack)operator(=)predefined_constant(None)operator(,) ident(end)operator(=)predefined_constant(None)operator(\))operator(:)
        predefined_constant(self)operator(.)ident(text) operator(=) ident(text)
        predefined_constant(self)operator(.)ident(pos) operator(=) ident(pos)
        predefined_constant(self)operator(.)ident(end) operator(=) ident(end) keyword(or) predefined(len)operator(()ident(text)operator(\)) comment(# end=0 not supported ;-\))
        predefined_constant(self)operator(.)ident(stack) operator(=) ident(stack) keyword(or) operator([)string<delimiter(')content(root)delimiter(')>operator(])

    keyword(def) method(__repr__)operator(()predefined_constant(self)operator(\))operator(:)
        keyword(return) string<delimiter(')content(LexerContext(%r, %r, %r\))delimiter(')> operator(%) operator(()
            predefined_constant(self)operator(.)ident(text)operator(,) predefined_constant(self)operator(.)ident(pos)operator(,) predefined_constant(self)operator(.)ident(stack)operator(\))


keyword(class) class(ExtendedRegexLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    A RegexLexer that uses a context object to store its state.)content(
)content(    )delimiter(""")>

    keyword(def) method(get_tokens_unprocessed)operator(()predefined_constant(self)operator(,) ident(text)operator(=)predefined_constant(None)operator(,) ident(context)operator(=)predefined_constant(None)operator(\))operator(:)
        docstring<delimiter(""")content(
)content(        Split ``text`` into (tokentype, text\) pairs.)content(
)content(        If ``context`` is given, use this lexer context instead.)content(
)content(        )delimiter(""")>
        ident(tokendefs) operator(=) predefined_constant(self)operator(.)ident(_tokens)
        keyword(if) keyword(not) ident(context)operator(:)
            ident(ctx) operator(=) ident(LexerContext)operator(()ident(text)operator(,) integer(0)operator(\))
            ident(statetokens) operator(=) ident(tokendefs)operator([)string<delimiter(')content(root)delimiter(')>operator(])
        keyword(else)operator(:)
            ident(ctx) operator(=) ident(context)
            ident(statetokens) operator(=) ident(tokendefs)operator([)ident(ctx)operator(.)ident(stack)operator([)operator(-)integer(1)operator(])operator(])
            ident(text) operator(=) ident(ctx)operator(.)ident(text)
        keyword(while) integer(1)operator(:)
            keyword(for) ident(rexmatch)operator(,) ident(action)operator(,) ident(new_state) keyword(in) ident(statetokens)operator(:)
                ident(m) operator(=) ident(rexmatch)operator(()ident(text)operator(,) ident(ctx)operator(.)ident(pos)operator(,) ident(ctx)operator(.)ident(end)operator(\))
                keyword(if) ident(m)operator(:)
                    keyword(if) predefined(type)operator(()ident(action)operator(\)) keyword(is) ident(_TokenType)operator(:)
                        keyword(yield) ident(ctx)operator(.)ident(pos)operator(,) ident(action)operator(,) ident(m)operator(.)ident(group)operator(()operator(\))
                        ident(ctx)operator(.)ident(pos) operator(=) ident(m)operator(.)ident(end)operator(()operator(\))
                    keyword(else)operator(:)
                        keyword(for) ident(item) keyword(in) ident(action)operator(()predefined_constant(self)operator(,) ident(m)operator(,) ident(ctx)operator(\))operator(:)
                            keyword(yield) ident(item)
                        keyword(if) keyword(not) ident(new_state)operator(:)
                            comment(# altered the state stack?)
                            ident(statetokens) operator(=) ident(tokendefs)operator([)ident(ctx)operator(.)ident(stack)operator([)operator(-)integer(1)operator(])operator(])
                    comment(# CAUTION: callback must set ctx.pos!)
                    keyword(if) ident(new_state) keyword(is) keyword(not) predefined_constant(None)operator(:)
                        comment(# state transition)
                        keyword(if) predefined(isinstance)operator(()ident(new_state)operator(,) predefined(tuple)operator(\))operator(:)
                            ident(ctx)operator(.)ident(stack)operator(.)ident(extend)operator(()ident(new_state)operator(\))
                        keyword(elif) predefined(isinstance)operator(()ident(new_state)operator(,) predefined(int)operator(\))operator(:)
                            comment(# pop)
                            keyword(del) ident(ctx)operator(.)ident(stack)operator([)ident(new_state)operator(:)operator(])
                        keyword(elif) ident(new_state) operator(==) string<delimiter(')content(#push)delimiter(')>operator(:)
                            ident(ctx)operator(.)ident(stack)operator(.)ident(append)operator(()ident(ctx)operator(.)ident(stack)operator([)operator(-)integer(1)operator(])operator(\))
                        keyword(else)operator(:)
                            keyword(assert) predefined_constant(False)operator(,) string<delimiter(")content(wrong state def: %r)delimiter(")> operator(%) ident(new_state)
                        ident(statetokens) operator(=) ident(tokendefs)operator([)ident(ctx)operator(.)ident(stack)operator([)operator(-)integer(1)operator(])operator(])
                    keyword(break)
            keyword(else)operator(:)
                keyword(try)operator(:)
                    keyword(if) ident(ctx)operator(.)ident(pos) operator(>=) ident(ctx)operator(.)ident(end)operator(:)
                        keyword(break)
                    keyword(if) ident(text)operator([)ident(ctx)operator(.)ident(pos)operator(]) operator(==) string<delimiter(')char(\\n)delimiter(')>operator(:)
                        comment(# at EOL, reset state to "root")
                        ident(ctx)operator(.)ident(pos) operator(+=) integer(1)
                        ident(ctx)operator(.)ident(stack) operator(=) operator([)string<delimiter(')content(root)delimiter(')>operator(])
                        ident(statetokens) operator(=) ident(tokendefs)operator([)string<delimiter(')content(root)delimiter(')>operator(])
                        keyword(yield) ident(ctx)operator(.)ident(pos)operator(,) ident(Text)operator(,) string<modifier(u)delimiter(')char(\\n)delimiter(')>
                        keyword(continue)
                    keyword(yield) ident(ctx)operator(.)ident(pos)operator(,) ident(Error)operator(,) ident(text)operator([)ident(ctx)operator(.)ident(pos)operator(])
                    ident(ctx)operator(.)ident(pos) operator(+=) integer(1)
                keyword(except) exception(IndexError)operator(:)
                    keyword(break)


keyword(def) method(do_insertions)operator(()ident(insertions)operator(,) ident(tokens)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Helper for lexers which must combine the results of several)content(
)content(    sublexers.)content(
)content(
)content(    ``insertions`` is a list of ``(index, itokens\)`` pairs.)content(
)content(    Each ``itokens`` iterable should be inserted at position)content(
)content(    ``index`` into the token stream given by the ``tokens``)content(
)content(    argument.)content(
)content(
)content(    The result is a combined token stream.)content(
)content(
)content(    TODO: clean up the code here.)content(
)content(    )delimiter(""")>
    ident(insertions) operator(=) predefined(iter)operator(()ident(insertions)operator(\))
    keyword(try)operator(:)
        ident(index)operator(,) ident(itokens) operator(=) ident(insertions)operator(.)ident(next)operator(()operator(\))
    keyword(except) exception(StopIteration)operator(:)
        comment(# no insertions)
        keyword(for) ident(item) keyword(in) ident(tokens)operator(:)
            keyword(yield) ident(item)
        keyword(return)

    ident(realpos) operator(=) predefined_constant(None)
    ident(insleft) operator(=) predefined_constant(True)

    comment(# iterate over the token stream where we want to insert)
    comment(# the tokens from the insertion list.)
    keyword(for) ident(i)operator(,) ident(t)operator(,) ident(v) keyword(in) ident(tokens)operator(:)
        comment(# first iteration. store the postition of first item)
        keyword(if) ident(realpos) keyword(is) predefined_constant(None)operator(:)
            ident(realpos) operator(=) ident(i)
        ident(oldi) operator(=) integer(0)
        keyword(while) ident(insleft) keyword(and) ident(i) operator(+) predefined(len)operator(()ident(v)operator(\)) operator(>=) ident(index)operator(:)
            ident(tmpval) operator(=) ident(v)operator([)ident(oldi)operator(:)ident(index) operator(-) ident(i)operator(])
            keyword(yield) ident(realpos)operator(,) ident(t)operator(,) ident(tmpval)
            ident(realpos) operator(+=) predefined(len)operator(()ident(tmpval)operator(\))
            keyword(for) ident(it_index)operator(,) ident(it_token)operator(,) ident(it_value) keyword(in) ident(itokens)operator(:)
                keyword(yield) ident(realpos)operator(,) ident(it_token)operator(,) ident(it_value)
                ident(realpos) operator(+=) predefined(len)operator(()ident(it_value)operator(\))
            ident(oldi) operator(=) ident(index) operator(-) ident(i)
            keyword(try)operator(:)
                ident(index)operator(,) ident(itokens) operator(=) ident(insertions)operator(.)ident(next)operator(()operator(\))
            keyword(except) exception(StopIteration)operator(:)
                ident(insleft) operator(=) predefined_constant(False)
                keyword(break)  comment(# not strictly necessary)
        keyword(yield) ident(realpos)operator(,) ident(t)operator(,) ident(v)operator([)ident(oldi)operator(:)operator(])
        ident(realpos) operator(+=) predefined(len)operator(()ident(v)operator(\)) operator(-) ident(oldi)

    comment(# leftover tokens)
    keyword(if) ident(insleft)operator(:)
        comment(# no normal tokens, set realpos to zero)
        ident(realpos) operator(=) ident(realpos) keyword(or) integer(0)
        keyword(for) ident(p)operator(,) ident(t)operator(,) ident(v) keyword(in) ident(itokens)operator(:)
            keyword(yield) ident(realpos)operator(,) ident(t)operator(,) ident(v)
            ident(realpos) operator(+=) predefined(len)operator(()ident(v)operator(\))
comment(# -*- coding: utf-8 -*-)
docstring<delimiter(""")content(
)content(    pygments.lexers)content(
)content(    ~~~~~~~~~~~~~~~)content(
)content(
)content(    Pygments lexers.)content(
)content(
)content(    :copyright: Copyright 2006-2009 by the Pygments team, see AUTHORS.)content(
)content(    :license: BSD, see LICENSE for details.)content(
)delimiter(""")>
keyword(import) include(sys)
keyword(import) include(fnmatch)
keyword(import) include(types)
keyword(from) include(os.path) keyword(import) include(basename)

keyword(try)operator(:)
    predefined(set)
keyword(except) exception(NameError)operator(:)
    keyword(from) include(sets) keyword(import) include(Set) keyword(as) ident(set)

keyword(from) include(pygments.lexers._mapping) keyword(import) include(LEXERS)
keyword(from) include(pygments.plugin) keyword(import) include(find_plugin_lexers)
keyword(from) include(pygments.util) keyword(import) include(ClassNotFound)operator(,) include(bytes)


ident(__all__) operator(=) operator([)string<delimiter(')content(get_lexer_by_name)delimiter(')>operator(,) string<delimiter(')content(get_lexer_for_filename)delimiter(')>operator(,) string<delimiter(')content(find_lexer_class)delimiter(')>operator(,)
           string<delimiter(')content(guess_lexer)delimiter(')>operator(]) operator(+) ident(LEXERS)operator(.)ident(keys)operator(()operator(\))

ident(_lexer_cache) operator(=) operator({)operator(})


keyword(def) method(_load_lexers)operator(()ident(module_name)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Load a lexer (and all others in the module too\).)content(
)content(    )delimiter(""")>
    ident(mod) operator(=) predefined(__import__)operator(()ident(module_name)operator(,) predefined_constant(None)operator(,) predefined_constant(None)operator(,) operator([)string<delimiter(')content(__all__)delimiter(')>operator(])operator(\))
    keyword(for) ident(lexer_name) keyword(in) ident(mod)operator(.)ident(__all__)operator(:)
        ident(cls) operator(=) predefined(getattr)operator(()ident(mod)operator(,) ident(lexer_name)operator(\))
        ident(_lexer_cache)operator([)ident(cls)operator(.)ident(name)operator(]) operator(=) ident(cls)


keyword(def) method(get_all_lexers)operator(()operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Return a generator of tuples in the form ``(name, aliases,)content(
)content(    filenames, mimetypes\)`` of all know lexers.)content(
)content(    )delimiter(""")>
    keyword(for) ident(item) keyword(in) ident(LEXERS)operator(.)ident(itervalues)operator(()operator(\))operator(:)
        keyword(yield) ident(item)operator([)integer(1)operator(:)operator(])
    keyword(for) ident(lexer) keyword(in) ident(find_plugin_lexers)operator(()operator(\))operator(:)
        keyword(yield) ident(lexer)operator(.)ident(name)operator(,) ident(lexer)operator(.)ident(aliases)operator(,) ident(lexer)operator(.)ident(filenames)operator(,) ident(lexer)operator(.)ident(mimetypes)


keyword(def) method(find_lexer_class)operator(()ident(name)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Lookup a lexer class by name. Return None if not found.)content(
)content(    )delimiter(""")>
    keyword(if) ident(name) keyword(in) ident(_lexer_cache)operator(:)
        keyword(return) ident(_lexer_cache)operator([)ident(name)operator(])
    comment(# lookup builtin lexers)
    keyword(for) ident(module_name)operator(,) ident(lname)operator(,) ident(aliases)operator(,) ident(_)operator(,) ident(_) keyword(in) ident(LEXERS)operator(.)ident(itervalues)operator(()operator(\))operator(:)
        keyword(if) ident(name) operator(==) ident(lname)operator(:)
            ident(_load_lexers)operator(()ident(module_name)operator(\))
            keyword(return) ident(_lexer_cache)operator([)ident(name)operator(])
    comment(# continue with lexers from setuptools entrypoints)
    keyword(for) ident(cls) keyword(in) ident(find_plugin_lexers)operator(()operator(\))operator(:)
        keyword(if) ident(cls)operator(.)ident(name) operator(==) ident(name)operator(:)
            keyword(return) ident(cls)


keyword(def) method(get_lexer_by_name)operator(()ident(_alias)operator(,) operator(**)ident(options)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Get a lexer by an alias.)content(
)content(    )delimiter(""")>
    comment(# lookup builtin lexers)
    keyword(for) ident(module_name)operator(,) ident(name)operator(,) ident(aliases)operator(,) ident(_)operator(,) ident(_) keyword(in) ident(LEXERS)operator(.)ident(itervalues)operator(()operator(\))operator(:)
        keyword(if) ident(_alias) keyword(in) ident(aliases)operator(:)
            keyword(if) ident(name) keyword(not) keyword(in) ident(_lexer_cache)operator(:)
                ident(_load_lexers)operator(()ident(module_name)operator(\))
            keyword(return) ident(_lexer_cache)operator([)ident(name)operator(])operator(()operator(**)ident(options)operator(\))
    comment(# continue with lexers from setuptools entrypoints)
    keyword(for) ident(cls) keyword(in) ident(find_plugin_lexers)operator(()operator(\))operator(:)
        keyword(if) ident(_alias) keyword(in) ident(cls)operator(.)ident(aliases)operator(:)
            keyword(return) ident(cls)operator(()operator(**)ident(options)operator(\))
    keyword(raise) ident(ClassNotFound)operator(()string<delimiter(')content(no lexer for alias %r found)delimiter(')> operator(%) ident(_alias)operator(\))


keyword(def) method(get_lexer_for_filename)operator(()ident(_fn)operator(,) ident(code)operator(=)predefined_constant(None)operator(,) operator(**)ident(options)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Get a lexer for a filename.  If multiple lexers match the filename)content(
)content(    pattern, use ``analyze_text(\)`` to figure out which one is more)content(
)content(    appropriate.)content(
)content(    )delimiter(""")>
    ident(matches) operator(=) operator([)operator(])
    ident(fn) operator(=) ident(basename)operator(()ident(_fn)operator(\))
    keyword(for) ident(modname)operator(,) ident(name)operator(,) ident(_)operator(,) ident(filenames)operator(,) ident(_) keyword(in) ident(LEXERS)operator(.)ident(itervalues)operator(()operator(\))operator(:)
        keyword(for) ident(filename) keyword(in) ident(filenames)operator(:)
            keyword(if) ident(fnmatch)operator(.)ident(fnmatch)operator(()ident(fn)operator(,) ident(filename)operator(\))operator(:)
                keyword(if) ident(name) keyword(not) keyword(in) ident(_lexer_cache)operator(:)
                    ident(_load_lexers)operator(()ident(modname)operator(\))
                ident(matches)operator(.)ident(append)operator(()ident(_lexer_cache)operator([)ident(name)operator(])operator(\))
    keyword(for) ident(cls) keyword(in) ident(find_plugin_lexers)operator(()operator(\))operator(:)
        keyword(for) ident(filename) keyword(in) ident(cls)operator(.)ident(filenames)operator(:)
            keyword(if) ident(fnmatch)operator(.)ident(fnmatch)operator(()ident(fn)operator(,) ident(filename)operator(\))operator(:)
                ident(matches)operator(.)ident(append)operator(()ident(cls)operator(\))

    keyword(if) ident(sys)operator(.)ident(version_info) operator(>) operator(()integer(3)operator(,)operator(\)) keyword(and) predefined(isinstance)operator(()ident(code)operator(,) predefined(bytes)operator(\))operator(:)
        comment(# decode it, since all analyse_text functions expect unicode)
        ident(code) operator(=) ident(code)operator(.)ident(decode)operator(()string<delimiter(')content(latin1)delimiter(')>operator(\))

    keyword(def) method(get_rating)operator(()ident(cls)operator(\))operator(:)
        comment(# The class _always_ defines analyse_text because it's included in)
        comment(# the Lexer class.  The default implementation returns None which)
        comment(# gets turned into 0.0.  Run scripts/detect_missing_analyse_text.py)
        comment(# to find lexers which need it overridden.)
        ident(d) operator(=) ident(cls)operator(.)ident(analyse_text)operator(()ident(code)operator(\))
        comment(#print "Got %r from %r" % (d, cls\))
        keyword(return) ident(d)

    keyword(if) ident(code)operator(:)
        ident(matches)operator(.)ident(sort)operator(()ident(key)operator(=)ident(get_rating)operator(\))
    keyword(if) ident(matches)operator(:)
        comment(#print "Possible lexers, after sort:", matches)
        keyword(return) ident(matches)operator([)operator(-)integer(1)operator(])operator(()operator(**)ident(options)operator(\))
    keyword(raise) ident(ClassNotFound)operator(()string<delimiter(')content(no lexer for filename %r found)delimiter(')> operator(%) ident(_fn)operator(\))


keyword(def) method(get_lexer_for_mimetype)operator(()ident(_mime)operator(,) operator(**)ident(options)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Get a lexer for a mimetype.)content(
)content(    )delimiter(""")>
    keyword(for) ident(modname)operator(,) ident(name)operator(,) ident(_)operator(,) ident(_)operator(,) ident(mimetypes) keyword(in) ident(LEXERS)operator(.)ident(itervalues)operator(()operator(\))operator(:)
        keyword(if) ident(_mime) keyword(in) ident(mimetypes)operator(:)
            keyword(if) ident(name) keyword(not) keyword(in) ident(_lexer_cache)operator(:)
                ident(_load_lexers)operator(()ident(modname)operator(\))
            keyword(return) ident(_lexer_cache)operator([)ident(name)operator(])operator(()operator(**)ident(options)operator(\))
    keyword(for) ident(cls) keyword(in) ident(find_plugin_lexers)operator(()operator(\))operator(:)
        keyword(if) ident(_mime) keyword(in) ident(cls)operator(.)ident(mimetypes)operator(:)
            keyword(return) ident(cls)operator(()operator(**)ident(options)operator(\))
    keyword(raise) ident(ClassNotFound)operator(()string<delimiter(')content(no lexer for mimetype %r found)delimiter(')> operator(%) ident(_mime)operator(\))


keyword(def) method(_iter_lexerclasses)operator(()operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Return an iterator over all lexer classes.)content(
)content(    )delimiter(""")>
    keyword(for) ident(module_name)operator(,) ident(name)operator(,) ident(_)operator(,) ident(_)operator(,) ident(_) keyword(in) ident(LEXERS)operator(.)ident(itervalues)operator(()operator(\))operator(:)
        keyword(if) ident(name) keyword(not) keyword(in) ident(_lexer_cache)operator(:)
            ident(_load_lexers)operator(()ident(module_name)operator(\))
        keyword(yield) ident(_lexer_cache)operator([)ident(name)operator(])
    keyword(for) ident(lexer) keyword(in) ident(find_plugin_lexers)operator(()operator(\))operator(:)
        keyword(yield) ident(lexer)


keyword(def) method(guess_lexer_for_filename)operator(()ident(_fn)operator(,) ident(_text)operator(,) operator(**)ident(options)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Lookup all lexers that handle those filenames primary (``filenames``\))content(
)content(    or secondary (``alias_filenames``\). Then run a text analysis for those)content(
)content(    lexers and choose the best result.)content(
)content(
)content(    usage::)content(
)content(
)content(        >>> from pygments.lexers import guess_lexer_for_filename)content(
)content(        >>> guess_lexer_for_filename('hello.html', '<%= @foo %>'\))content(
)content(        <pygments.lexers.templates.RhtmlLexer object at 0xb7d2f32c>)content(
)content(        >>> guess_lexer_for_filename('hello.html', '<h1>{{ title|e }}</h1>'\))content(
)content(        <pygments.lexers.templates.HtmlDjangoLexer object at 0xb7d2f2ac>)content(
)content(        >>> guess_lexer_for_filename('style.css', 'a { color: <?= $link ?> }'\))content(
)content(        <pygments.lexers.templates.CssPhpLexer object at 0xb7ba518c>)content(
)content(    )delimiter(""")>
    ident(fn) operator(=) ident(basename)operator(()ident(_fn)operator(\))
    ident(primary) operator(=) predefined_constant(None)
    ident(matching_lexers) operator(=) predefined(set)operator(()operator(\))
    keyword(for) ident(lexer) keyword(in) ident(_iter_lexerclasses)operator(()operator(\))operator(:)
        keyword(for) ident(filename) keyword(in) ident(lexer)operator(.)ident(filenames)operator(:)
            keyword(if) ident(fnmatch)operator(.)ident(fnmatch)operator(()ident(fn)operator(,) ident(filename)operator(\))operator(:)
                ident(matching_lexers)operator(.)ident(add)operator(()ident(lexer)operator(\))
                ident(primary) operator(=) ident(lexer)
        keyword(for) ident(filename) keyword(in) ident(lexer)operator(.)ident(alias_filenames)operator(:)
            keyword(if) ident(fnmatch)operator(.)ident(fnmatch)operator(()ident(fn)operator(,) ident(filename)operator(\))operator(:)
                ident(matching_lexers)operator(.)ident(add)operator(()ident(lexer)operator(\))
    keyword(if) keyword(not) ident(matching_lexers)operator(:)
        keyword(raise) ident(ClassNotFound)operator(()string<delimiter(')content(no lexer for filename %r found)delimiter(')> operator(%) ident(fn)operator(\))
    keyword(if) predefined(len)operator(()ident(matching_lexers)operator(\)) operator(==) integer(1)operator(:)
        keyword(return) ident(matching_lexers)operator(.)ident(pop)operator(()operator(\))operator(()operator(**)ident(options)operator(\))
    ident(result) operator(=) operator([)operator(])
    keyword(for) ident(lexer) keyword(in) ident(matching_lexers)operator(:)
        ident(rv) operator(=) ident(lexer)operator(.)ident(analyse_text)operator(()ident(_text)operator(\))
        keyword(if) ident(rv) operator(==) float(1.0)operator(:)
            keyword(return) ident(lexer)operator(()operator(**)ident(options)operator(\))
        ident(result)operator(.)ident(append)operator(()operator(()ident(rv)operator(,) ident(lexer)operator(\))operator(\))
    ident(result)operator(.)ident(sort)operator(()operator(\))
    keyword(if) keyword(not) ident(result)operator([)operator(-)integer(1)operator(])operator([)integer(0)operator(]) keyword(and) ident(primary) keyword(is) keyword(not) predefined_constant(None)operator(:)
        keyword(return) ident(primary)operator(()operator(**)ident(options)operator(\))
    keyword(return) ident(result)operator([)operator(-)integer(1)operator(])operator([)integer(1)operator(])operator(()operator(**)ident(options)operator(\))


keyword(def) method(guess_lexer)operator(()ident(_text)operator(,) operator(**)ident(options)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Guess a lexer by strong distinctions in the text (eg, shebang\).)content(
)content(    )delimiter(""")>
    ident(best_lexer) operator(=) operator([)float(0.0)operator(,) predefined_constant(None)operator(])
    keyword(for) ident(lexer) keyword(in) ident(_iter_lexerclasses)operator(()operator(\))operator(:)
        ident(rv) operator(=) ident(lexer)operator(.)ident(analyse_text)operator(()ident(_text)operator(\))
        keyword(if) ident(rv) operator(==) float(1.0)operator(:)
            keyword(return) ident(lexer)operator(()operator(**)ident(options)operator(\))
        keyword(if) ident(rv) operator(>) ident(best_lexer)operator([)integer(0)operator(])operator(:)
            ident(best_lexer)operator([)operator(:)operator(]) operator(=) operator(()ident(rv)operator(,) ident(lexer)operator(\))
    keyword(if) keyword(not) ident(best_lexer)operator([)integer(0)operator(]) keyword(or) ident(best_lexer)operator([)integer(1)operator(]) keyword(is) predefined_constant(None)operator(:)
        keyword(raise) ident(ClassNotFound)operator(()string<delimiter(')content(no lexer matching the text found)delimiter(')>operator(\))
    keyword(return) ident(best_lexer)operator([)integer(1)operator(])operator(()operator(**)ident(options)operator(\))


keyword(class) class(_automodule)operator(()ident(types)operator(.)ident(ModuleType)operator(\))operator(:)
    docstring<delimiter(""")content(Automatically import lexers.)delimiter(""")>

    keyword(def) method(__getattr__)operator(()predefined_constant(self)operator(,) ident(name)operator(\))operator(:)
        ident(info) operator(=) ident(LEXERS)operator(.)ident(get)operator(()ident(name)operator(\))
        keyword(if) ident(info)operator(:)
            ident(_load_lexers)operator(()ident(info)operator([)integer(0)operator(])operator(\))
            ident(cls) operator(=) ident(_lexer_cache)operator([)ident(info)operator([)integer(1)operator(])operator(])
            predefined(setattr)operator(()predefined_constant(self)operator(,) ident(name)operator(,) ident(cls)operator(\))
            keyword(return) ident(cls)
        keyword(raise) exception(AttributeError)operator(()ident(name)operator(\))


keyword(import) include(sys)
ident(oldmod) operator(=) ident(sys)operator(.)ident(modules)operator([)string<delimiter(')content(pygments.lexers)delimiter(')>operator(])
ident(newmod) operator(=) ident(_automodule)operator(()string<delimiter(')content(pygments.lexers)delimiter(')>operator(\))
ident(newmod)operator(.)ident(__dict__)operator(.)ident(update)operator(()ident(oldmod)operator(.)ident(__dict__)operator(\))
ident(sys)operator(.)ident(modules)operator([)string<delimiter(')content(pygments.lexers)delimiter(')>operator(]) operator(=) ident(newmod)
keyword(del) ident(newmod)operator(.)ident(newmod)operator(,) ident(newmod)operator(.)ident(oldmod)operator(,) ident(newmod)operator(.)ident(sys)operator(,) ident(newmod)operator(.)ident(types)
comment(# -*- coding: utf-8 -*-)
docstring<delimiter(""")content(
)content(    pygments.lexers._clbuiltins)content(
)content(    ~~~~~~~~~~~~~~~~~~~~~~~~~~~)content(
)content(
)content(    ANSI Common Lisp builtins.)content(
)content(
)content(    :copyright: Copyright 2006-2009 by the Pygments team, see AUTHORS.)content(
)content(    :license: BSD, see LICENSE for details.)content(
)delimiter(""")>

ident(BUILTIN_FUNCTIONS) operator(=) operator([) comment(# 638 functions)
    string<delimiter(')content(<)delimiter(')>operator(,) string<delimiter(')content(<=)delimiter(')>operator(,) string<delimiter(')content(=)delimiter(')>operator(,) string<delimiter(')content(>)delimiter(')>operator(,) string<delimiter(')content(>=)delimiter(')>operator(,) string<delimiter(')content(-)delimiter(')>operator(,) string<delimiter(')content(/)delimiter(')>operator(,) string<delimiter(')content(/=)delimiter(')>operator(,) string<delimiter(')content(*)delimiter(')>operator(,) string<delimiter(')content(+)delimiter(')>operator(,) string<delimiter(')content(1-)delimiter(')>operator(,) string<delimiter(')content(1+)delimiter(')>operator(,)
    string<delimiter(')content(abort)delimiter(')>operator(,) string<delimiter(')content(abs)delimiter(')>operator(,) string<delimiter(')content(acons)delimiter(')>operator(,) string<delimiter(')content(acos)delimiter(')>operator(,) string<delimiter(')content(acosh)delimiter(')>operator(,) string<delimiter(')content(add-method)delimiter(')>operator(,) string<delimiter(')content(adjoin)delimiter(')>operator(,)
    string<delimiter(')content(adjustable-array-p)delimiter(')>operator(,) string<delimiter(')content(adjust-array)delimiter(')>operator(,) string<delimiter(')content(allocate-instance)delimiter(')>operator(,)
    string<delimiter(')content(alpha-char-p)delimiter(')>operator(,) string<delimiter(')content(alphanumericp)delimiter(')>operator(,) string<delimiter(')content(append)delimiter(')>operator(,) string<delimiter(')content(apply)delimiter(')>operator(,) string<delimiter(')content(apropos)delimiter(')>operator(,)
    string<delimiter(')content(apropos-list)delimiter(')>operator(,) string<delimiter(')content(aref)delimiter(')>operator(,) string<delimiter(')content(arithmetic-error-operands)delimiter(')>operator(,)
    string<delimiter(')content(arithmetic-error-operation)delimiter(')>operator(,) string<delimiter(')content(array-dimension)delimiter(')>operator(,) string<delimiter(')content(array-dimensions)delimiter(')>operator(,)
    string<delimiter(')content(array-displacement)delimiter(')>operator(,) string<delimiter(')content(array-element-type)delimiter(')>operator(,) string<delimiter(')content(array-has-fill-pointer-p)delimiter(')>operator(,)
    string<delimiter(')content(array-in-bounds-p)delimiter(')>operator(,) string<delimiter(')content(arrayp)delimiter(')>operator(,) string<delimiter(')content(array-rank)delimiter(')>operator(,) string<delimiter(')content(array-row-major-index)delimiter(')>operator(,)
    string<delimiter(')content(array-total-size)delimiter(')>operator(,) string<delimiter(')content(ash)delimiter(')>operator(,) string<delimiter(')content(asin)delimiter(')>operator(,) string<delimiter(')content(asinh)delimiter(')>operator(,) string<delimiter(')content(assoc)delimiter(')>operator(,) string<delimiter(')content(assoc-if)delimiter(')>operator(,)
    string<delimiter(')content(assoc-if-not)delimiter(')>operator(,) string<delimiter(')content(atan)delimiter(')>operator(,) string<delimiter(')content(atanh)delimiter(')>operator(,) string<delimiter(')content(atom)delimiter(')>operator(,) string<delimiter(')content(bit)delimiter(')>operator(,) string<delimiter(')content(bit-and)delimiter(')>operator(,) string<delimiter(')content(bit-andc1)delimiter(')>operator(,)
    string<delimiter(')content(bit-andc2)delimiter(')>operator(,) string<delimiter(')content(bit-eqv)delimiter(')>operator(,) string<delimiter(')content(bit-ior)delimiter(')>operator(,) string<delimiter(')content(bit-nand)delimiter(')>operator(,) string<delimiter(')content(bit-nor)delimiter(')>operator(,) string<delimiter(')content(bit-not)delimiter(')>operator(,)
    string<delimiter(')content(bit-orc1)delimiter(')>operator(,) string<delimiter(')content(bit-orc2)delimiter(')>operator(,) string<delimiter(')content(bit-vector-p)delimiter(')>operator(,) string<delimiter(')content(bit-xor)delimiter(')>operator(,) string<delimiter(')content(boole)delimiter(')>operator(,)
    string<delimiter(')content(both-case-p)delimiter(')>operator(,) string<delimiter(')content(boundp)delimiter(')>operator(,) string<delimiter(')content(break)delimiter(')>operator(,) string<delimiter(')content(broadcast-stream-streams)delimiter(')>operator(,)
    string<delimiter(')content(butlast)delimiter(')>operator(,) string<delimiter(')content(byte)delimiter(')>operator(,) string<delimiter(')content(byte-position)delimiter(')>operator(,) string<delimiter(')content(byte-size)delimiter(')>operator(,) string<delimiter(')content(caaaar)delimiter(')>operator(,) string<delimiter(')content(caaadr)delimiter(')>operator(,)
    string<delimiter(')content(caaar)delimiter(')>operator(,) string<delimiter(')content(caadar)delimiter(')>operator(,) string<delimiter(')content(caaddr)delimiter(')>operator(,) string<delimiter(')content(caadr)delimiter(')>operator(,) string<delimiter(')content(caar)delimiter(')>operator(,) string<delimiter(')content(cadaar)delimiter(')>operator(,) string<delimiter(')content(cadadr)delimiter(')>operator(,)
    string<delimiter(')content(cadar)delimiter(')>operator(,) string<delimiter(')content(caddar)delimiter(')>operator(,) string<delimiter(')content(cadddr)delimiter(')>operator(,) string<delimiter(')content(caddr)delimiter(')>operator(,) string<delimiter(')content(cadr)delimiter(')>operator(,) string<delimiter(')content(call-next-method)delimiter(')>operator(,) string<delimiter(')content(car)delimiter(')>operator(,)
    string<delimiter(')content(cdaaar)delimiter(')>operator(,) string<delimiter(')content(cdaadr)delimiter(')>operator(,) string<delimiter(')content(cdaar)delimiter(')>operator(,) string<delimiter(')content(cdadar)delimiter(')>operator(,) string<delimiter(')content(cdaddr)delimiter(')>operator(,) string<delimiter(')content(cdadr)delimiter(')>operator(,) string<delimiter(')content(cdar)delimiter(')>operator(,)
    string<delimiter(')content(cddaar)delimiter(')>operator(,) string<delimiter(')content(cddadr)delimiter(')>operator(,) string<delimiter(')content(cddar)delimiter(')>operator(,) string<delimiter(')content(cdddar)delimiter(')>operator(,) string<delimiter(')content(cddddr)delimiter(')>operator(,) string<delimiter(')content(cdddr)delimiter(')>operator(,) string<delimiter(')content(cddr)delimiter(')>operator(,) string<delimiter(')content(cdr)delimiter(')>operator(,)
    string<delimiter(')content(ceiling)delimiter(')>operator(,) string<delimiter(')content(cell-error-name)delimiter(')>operator(,) string<delimiter(')content(cerror)delimiter(')>operator(,) string<delimiter(')content(change-class)delimiter(')>operator(,) string<delimiter(')content(char)delimiter(')>operator(,) string<delimiter(')content(char<)delimiter(')>operator(,)
    string<delimiter(')content(char<=)delimiter(')>operator(,) string<delimiter(')content(char=)delimiter(')>operator(,) string<delimiter(')content(char>)delimiter(')>operator(,) string<delimiter(')content(char>=)delimiter(')>operator(,) string<delimiter(')content(char/=)delimiter(')>operator(,) string<delimiter(')content(character)delimiter(')>operator(,)
    string<delimiter(')content(characterp)delimiter(')>operator(,) string<delimiter(')content(char-code)delimiter(')>operator(,) string<delimiter(')content(char-downcase)delimiter(')>operator(,) string<delimiter(')content(char-equal)delimiter(')>operator(,)
    string<delimiter(')content(char-greaterp)delimiter(')>operator(,) string<delimiter(')content(char-int)delimiter(')>operator(,) string<delimiter(')content(char-lessp)delimiter(')>operator(,) string<delimiter(')content(char-name)delimiter(')>operator(,)
    string<delimiter(')content(char-not-equal)delimiter(')>operator(,) string<delimiter(')content(char-not-greaterp)delimiter(')>operator(,) string<delimiter(')content(char-not-lessp)delimiter(')>operator(,) string<delimiter(')content(char-upcase)delimiter(')>operator(,)
    string<delimiter(')content(cis)delimiter(')>operator(,) string<delimiter(')content(class-name)delimiter(')>operator(,) string<delimiter(')content(class-of)delimiter(')>operator(,) string<delimiter(')content(clear-input)delimiter(')>operator(,) string<delimiter(')content(clear-output)delimiter(')>operator(,)
    string<delimiter(')content(close)delimiter(')>operator(,) string<delimiter(')content(clrhash)delimiter(')>operator(,) string<delimiter(')content(code-char)delimiter(')>operator(,) string<delimiter(')content(coerce)delimiter(')>operator(,) string<delimiter(')content(compile)delimiter(')>operator(,)
    string<delimiter(')content(compiled-function-p)delimiter(')>operator(,) string<delimiter(')content(compile-file)delimiter(')>operator(,) string<delimiter(')content(compile-file-pathname)delimiter(')>operator(,)
    string<delimiter(')content(compiler-macro-function)delimiter(')>operator(,) string<delimiter(')content(complement)delimiter(')>operator(,) string<delimiter(')content(complex)delimiter(')>operator(,) string<delimiter(')content(complexp)delimiter(')>operator(,)
    string<delimiter(')content(compute-applicable-methods)delimiter(')>operator(,) string<delimiter(')content(compute-restarts)delimiter(')>operator(,) string<delimiter(')content(concatenate)delimiter(')>operator(,)
    string<delimiter(')content(concatenated-stream-streams)delimiter(')>operator(,) string<delimiter(')content(conjugate)delimiter(')>operator(,) string<delimiter(')content(cons)delimiter(')>operator(,) string<delimiter(')content(consp)delimiter(')>operator(,)
    string<delimiter(')content(constantly)delimiter(')>operator(,) string<delimiter(')content(constantp)delimiter(')>operator(,) string<delimiter(')content(continue)delimiter(')>operator(,) string<delimiter(')content(copy-alist)delimiter(')>operator(,) string<delimiter(')content(copy-list)delimiter(')>operator(,)
    string<delimiter(')content(copy-pprint-dispatch)delimiter(')>operator(,) string<delimiter(')content(copy-readtable)delimiter(')>operator(,) string<delimiter(')content(copy-seq)delimiter(')>operator(,) string<delimiter(')content(copy-structure)delimiter(')>operator(,)
    string<delimiter(')content(copy-symbol)delimiter(')>operator(,) string<delimiter(')content(copy-tree)delimiter(')>operator(,) string<delimiter(')content(cos)delimiter(')>operator(,) string<delimiter(')content(cosh)delimiter(')>operator(,) string<delimiter(')content(count)delimiter(')>operator(,) string<delimiter(')content(count-if)delimiter(')>operator(,)
    string<delimiter(')content(count-if-not)delimiter(')>operator(,) string<delimiter(')content(decode-float)delimiter(')>operator(,) string<delimiter(')content(decode-universal-time)delimiter(')>operator(,) string<delimiter(')content(delete)delimiter(')>operator(,)
    string<delimiter(')content(delete-duplicates)delimiter(')>operator(,) string<delimiter(')content(delete-file)delimiter(')>operator(,) string<delimiter(')content(delete-if)delimiter(')>operator(,) string<delimiter(')content(delete-if-not)delimiter(')>operator(,)
    string<delimiter(')content(delete-package)delimiter(')>operator(,) string<delimiter(')content(denominator)delimiter(')>operator(,) string<delimiter(')content(deposit-field)delimiter(')>operator(,) string<delimiter(')content(describe)delimiter(')>operator(,)
    string<delimiter(')content(describe-object)delimiter(')>operator(,) string<delimiter(')content(digit-char)delimiter(')>operator(,) string<delimiter(')content(digit-char-p)delimiter(')>operator(,) string<delimiter(')content(directory)delimiter(')>operator(,)
    string<delimiter(')content(directory-namestring)delimiter(')>operator(,) string<delimiter(')content(disassemble)delimiter(')>operator(,) string<delimiter(')content(documentation)delimiter(')>operator(,) string<delimiter(')content(dpb)delimiter(')>operator(,)
    string<delimiter(')content(dribble)delimiter(')>operator(,) string<delimiter(')content(echo-stream-input-stream)delimiter(')>operator(,) string<delimiter(')content(echo-stream-output-stream)delimiter(')>operator(,)
    string<delimiter(')content(ed)delimiter(')>operator(,) string<delimiter(')content(eighth)delimiter(')>operator(,) string<delimiter(')content(elt)delimiter(')>operator(,) string<delimiter(')content(encode-universal-time)delimiter(')>operator(,) string<delimiter(')content(endp)delimiter(')>operator(,)
    string<delimiter(')content(enough-namestring)delimiter(')>operator(,) string<delimiter(')content(ensure-directories-exist)delimiter(')>operator(,)
    string<delimiter(')content(ensure-generic-function)delimiter(')>operator(,) string<delimiter(')content(eq)delimiter(')>operator(,) string<delimiter(')content(eql)delimiter(')>operator(,) string<delimiter(')content(equal)delimiter(')>operator(,) string<delimiter(')content(equalp)delimiter(')>operator(,) string<delimiter(')content(error)delimiter(')>operator(,)
    string<delimiter(')content(eval)delimiter(')>operator(,) string<delimiter(')content(evenp)delimiter(')>operator(,) string<delimiter(')content(every)delimiter(')>operator(,) string<delimiter(')content(exp)delimiter(')>operator(,) string<delimiter(')content(export)delimiter(')>operator(,) string<delimiter(')content(expt)delimiter(')>operator(,) string<delimiter(')content(fboundp)delimiter(')>operator(,)
    string<delimiter(')content(fceiling)delimiter(')>operator(,) string<delimiter(')content(fdefinition)delimiter(')>operator(,) string<delimiter(')content(ffloor)delimiter(')>operator(,) string<delimiter(')content(fifth)delimiter(')>operator(,) string<delimiter(')content(file-author)delimiter(')>operator(,)
    string<delimiter(')content(file-error-pathname)delimiter(')>operator(,) string<delimiter(')content(file-length)delimiter(')>operator(,) string<delimiter(')content(file-namestring)delimiter(')>operator(,)
    string<delimiter(')content(file-position)delimiter(')>operator(,) string<delimiter(')content(file-string-length)delimiter(')>operator(,) string<delimiter(')content(file-write-date)delimiter(')>operator(,)
    string<delimiter(')content(fill)delimiter(')>operator(,) string<delimiter(')content(fill-pointer)delimiter(')>operator(,) string<delimiter(')content(find)delimiter(')>operator(,) string<delimiter(')content(find-all-symbols)delimiter(')>operator(,) string<delimiter(')content(find-class)delimiter(')>operator(,)
    string<delimiter(')content(find-if)delimiter(')>operator(,) string<delimiter(')content(find-if-not)delimiter(')>operator(,) string<delimiter(')content(find-method)delimiter(')>operator(,) string<delimiter(')content(find-package)delimiter(')>operator(,) string<delimiter(')content(find-restart)delimiter(')>operator(,)
    string<delimiter(')content(find-symbol)delimiter(')>operator(,) string<delimiter(')content(finish-output)delimiter(')>operator(,) string<delimiter(')content(first)delimiter(')>operator(,) string<delimiter(')content(float)delimiter(')>operator(,) string<delimiter(')content(float-digits)delimiter(')>operator(,)
    string<delimiter(')content(floatp)delimiter(')>operator(,) string<delimiter(')content(float-precision)delimiter(')>operator(,) string<delimiter(')content(float-radix)delimiter(')>operator(,) string<delimiter(')content(float-sign)delimiter(')>operator(,) string<delimiter(')content(floor)delimiter(')>operator(,)
    string<delimiter(')content(fmakunbound)delimiter(')>operator(,) string<delimiter(')content(force-output)delimiter(')>operator(,) string<delimiter(')content(format)delimiter(')>operator(,) string<delimiter(')content(fourth)delimiter(')>operator(,) string<delimiter(')content(fresh-line)delimiter(')>operator(,)
    string<delimiter(')content(fround)delimiter(')>operator(,) string<delimiter(')content(ftruncate)delimiter(')>operator(,) string<delimiter(')content(funcall)delimiter(')>operator(,) string<delimiter(')content(function-keywords)delimiter(')>operator(,)
    string<delimiter(')content(function-lambda-expression)delimiter(')>operator(,) string<delimiter(')content(functionp)delimiter(')>operator(,) string<delimiter(')content(gcd)delimiter(')>operator(,) string<delimiter(')content(gensym)delimiter(')>operator(,) string<delimiter(')content(gentemp)delimiter(')>operator(,)
    string<delimiter(')content(get)delimiter(')>operator(,) string<delimiter(')content(get-decoded-time)delimiter(')>operator(,) string<delimiter(')content(get-dispatch-macro-character)delimiter(')>operator(,) string<delimiter(')content(getf)delimiter(')>operator(,)
    string<delimiter(')content(gethash)delimiter(')>operator(,) string<delimiter(')content(get-internal-real-time)delimiter(')>operator(,) string<delimiter(')content(get-internal-run-time)delimiter(')>operator(,)
    string<delimiter(')content(get-macro-character)delimiter(')>operator(,) string<delimiter(')content(get-output-stream-string)delimiter(')>operator(,) string<delimiter(')content(get-properties)delimiter(')>operator(,)
    string<delimiter(')content(get-setf-expansion)delimiter(')>operator(,) string<delimiter(')content(get-universal-time)delimiter(')>operator(,) string<delimiter(')content(graphic-char-p)delimiter(')>operator(,)
    string<delimiter(')content(hash-table-count)delimiter(')>operator(,) string<delimiter(')content(hash-table-p)delimiter(')>operator(,) string<delimiter(')content(hash-table-rehash-size)delimiter(')>operator(,)
    string<delimiter(')content(hash-table-rehash-threshold)delimiter(')>operator(,) string<delimiter(')content(hash-table-size)delimiter(')>operator(,) string<delimiter(')content(hash-table-test)delimiter(')>operator(,)
    string<delimiter(')content(host-namestring)delimiter(')>operator(,) string<delimiter(')content(identity)delimiter(')>operator(,) string<delimiter(')content(imagpart)delimiter(')>operator(,) string<delimiter(')content(import)delimiter(')>operator(,)
    string<delimiter(')content(initialize-instance)delimiter(')>operator(,) string<delimiter(')content(input-stream-p)delimiter(')>operator(,) string<delimiter(')content(inspect)delimiter(')>operator(,)
    string<delimiter(')content(integer-decode-float)delimiter(')>operator(,) string<delimiter(')content(integer-length)delimiter(')>operator(,) string<delimiter(')content(integerp)delimiter(')>operator(,)
    string<delimiter(')content(interactive-stream-p)delimiter(')>operator(,) string<delimiter(')content(intern)delimiter(')>operator(,) string<delimiter(')content(intersection)delimiter(')>operator(,)
    string<delimiter(')content(invalid-method-error)delimiter(')>operator(,) string<delimiter(')content(invoke-debugger)delimiter(')>operator(,) string<delimiter(')content(invoke-restart)delimiter(')>operator(,)
    string<delimiter(')content(invoke-restart-interactively)delimiter(')>operator(,) string<delimiter(')content(isqrt)delimiter(')>operator(,) string<delimiter(')content(keywordp)delimiter(')>operator(,) string<delimiter(')content(last)delimiter(')>operator(,) string<delimiter(')content(lcm)delimiter(')>operator(,)
    string<delimiter(')content(ldb)delimiter(')>operator(,) string<delimiter(')content(ldb-test)delimiter(')>operator(,) string<delimiter(')content(ldiff)delimiter(')>operator(,) string<delimiter(')content(length)delimiter(')>operator(,) string<delimiter(')content(lisp-implementation-type)delimiter(')>operator(,)
    string<delimiter(')content(lisp-implementation-version)delimiter(')>operator(,) string<delimiter(')content(list)delimiter(')>operator(,) string<delimiter(')content(list*)delimiter(')>operator(,) string<delimiter(')content(list-all-packages)delimiter(')>operator(,)
    string<delimiter(')content(listen)delimiter(')>operator(,) string<delimiter(')content(list-length)delimiter(')>operator(,) string<delimiter(')content(listp)delimiter(')>operator(,) string<delimiter(')content(load)delimiter(')>operator(,)
    string<delimiter(')content(load-logical-pathname-translations)delimiter(')>operator(,) string<delimiter(')content(log)delimiter(')>operator(,) string<delimiter(')content(logand)delimiter(')>operator(,) string<delimiter(')content(logandc1)delimiter(')>operator(,)
    string<delimiter(')content(logandc2)delimiter(')>operator(,) string<delimiter(')content(logbitp)delimiter(')>operator(,) string<delimiter(')content(logcount)delimiter(')>operator(,) string<delimiter(')content(logeqv)delimiter(')>operator(,) string<delimiter(')content(logical-pathname)delimiter(')>operator(,)
    string<delimiter(')content(logical-pathname-translations)delimiter(')>operator(,) string<delimiter(')content(logior)delimiter(')>operator(,) string<delimiter(')content(lognand)delimiter(')>operator(,) string<delimiter(')content(lognor)delimiter(')>operator(,)
    string<delimiter(')content(lognot)delimiter(')>operator(,) string<delimiter(')content(logorc1)delimiter(')>operator(,) string<delimiter(')content(logorc2)delimiter(')>operator(,) string<delimiter(')content(logtest)delimiter(')>operator(,) string<delimiter(')content(logxor)delimiter(')>operator(,) string<delimiter(')content(long-site-name)delimiter(')>operator(,)
    string<delimiter(')content(lower-case-p)delimiter(')>operator(,) string<delimiter(')content(machine-instance)delimiter(')>operator(,) string<delimiter(')content(machine-type)delimiter(')>operator(,) string<delimiter(')content(machine-version)delimiter(')>operator(,)
    string<delimiter(')content(macroexpand)delimiter(')>operator(,) string<delimiter(')content(macroexpand-1)delimiter(')>operator(,) string<delimiter(')content(macro-function)delimiter(')>operator(,) string<delimiter(')content(make-array)delimiter(')>operator(,)
    string<delimiter(')content(make-broadcast-stream)delimiter(')>operator(,) string<delimiter(')content(make-concatenated-stream)delimiter(')>operator(,) string<delimiter(')content(make-condition)delimiter(')>operator(,)
    string<delimiter(')content(make-dispatch-macro-character)delimiter(')>operator(,) string<delimiter(')content(make-echo-stream)delimiter(')>operator(,) string<delimiter(')content(make-hash-table)delimiter(')>operator(,)
    string<delimiter(')content(make-instance)delimiter(')>operator(,) string<delimiter(')content(make-instances-obsolete)delimiter(')>operator(,) string<delimiter(')content(make-list)delimiter(')>operator(,)
    string<delimiter(')content(make-load-form)delimiter(')>operator(,) string<delimiter(')content(make-load-form-saving-slots)delimiter(')>operator(,) string<delimiter(')content(make-package)delimiter(')>operator(,)
    string<delimiter(')content(make-pathname)delimiter(')>operator(,) string<delimiter(')content(make-random-state)delimiter(')>operator(,) string<delimiter(')content(make-sequence)delimiter(')>operator(,) string<delimiter(')content(make-string)delimiter(')>operator(,)
    string<delimiter(')content(make-string-input-stream)delimiter(')>operator(,) string<delimiter(')content(make-string-output-stream)delimiter(')>operator(,) string<delimiter(')content(make-symbol)delimiter(')>operator(,)
    string<delimiter(')content(make-synonym-stream)delimiter(')>operator(,) string<delimiter(')content(make-two-way-stream)delimiter(')>operator(,) string<delimiter(')content(makunbound)delimiter(')>operator(,) string<delimiter(')content(map)delimiter(')>operator(,)
    string<delimiter(')content(mapc)delimiter(')>operator(,) string<delimiter(')content(mapcan)delimiter(')>operator(,) string<delimiter(')content(mapcar)delimiter(')>operator(,) string<delimiter(')content(mapcon)delimiter(')>operator(,) string<delimiter(')content(maphash)delimiter(')>operator(,) string<delimiter(')content(map-into)delimiter(')>operator(,) string<delimiter(')content(mapl)delimiter(')>operator(,)
    string<delimiter(')content(maplist)delimiter(')>operator(,) string<delimiter(')content(mask-field)delimiter(')>operator(,) string<delimiter(')content(max)delimiter(')>operator(,) string<delimiter(')content(member)delimiter(')>operator(,) string<delimiter(')content(member-if)delimiter(')>operator(,) string<delimiter(')content(member-if-not)delimiter(')>operator(,)
    string<delimiter(')content(merge)delimiter(')>operator(,) string<delimiter(')content(merge-pathnames)delimiter(')>operator(,) string<delimiter(')content(method-combination-error)delimiter(')>operator(,)
    string<delimiter(')content(method-qualifiers)delimiter(')>operator(,) string<delimiter(')content(min)delimiter(')>operator(,) string<delimiter(')content(minusp)delimiter(')>operator(,) string<delimiter(')content(mismatch)delimiter(')>operator(,) string<delimiter(')content(mod)delimiter(')>operator(,)
    string<delimiter(')content(muffle-warning)delimiter(')>operator(,) string<delimiter(')content(name-char)delimiter(')>operator(,) string<delimiter(')content(namestring)delimiter(')>operator(,) string<delimiter(')content(nbutlast)delimiter(')>operator(,) string<delimiter(')content(nconc)delimiter(')>operator(,)
    string<delimiter(')content(next-method-p)delimiter(')>operator(,) string<delimiter(')content(nintersection)delimiter(')>operator(,) string<delimiter(')content(ninth)delimiter(')>operator(,) string<delimiter(')content(no-applicable-method)delimiter(')>operator(,)
    string<delimiter(')content(no-next-method)delimiter(')>operator(,) string<delimiter(')content(not)delimiter(')>operator(,) string<delimiter(')content(notany)delimiter(')>operator(,) string<delimiter(')content(notevery)delimiter(')>operator(,) string<delimiter(')content(nreconc)delimiter(')>operator(,) string<delimiter(')content(nreverse)delimiter(')>operator(,)
    string<delimiter(')content(nset-difference)delimiter(')>operator(,) string<delimiter(')content(nset-exclusive-or)delimiter(')>operator(,) string<delimiter(')content(nstring-capitalize)delimiter(')>operator(,)
    string<delimiter(')content(nstring-downcase)delimiter(')>operator(,) string<delimiter(')content(nstring-upcase)delimiter(')>operator(,) string<delimiter(')content(nsublis)delimiter(')>operator(,) string<delimiter(')content(nsubst)delimiter(')>operator(,) string<delimiter(')content(nsubst-if)delimiter(')>operator(,)
    string<delimiter(')content(nsubst-if-not)delimiter(')>operator(,) string<delimiter(')content(nsubstitute)delimiter(')>operator(,) string<delimiter(')content(nsubstitute-if)delimiter(')>operator(,) string<delimiter(')content(nsubstitute-if-not)delimiter(')>operator(,)
    string<delimiter(')content(nth)delimiter(')>operator(,) string<delimiter(')content(nthcdr)delimiter(')>operator(,) string<delimiter(')content(null)delimiter(')>operator(,) string<delimiter(')content(numberp)delimiter(')>operator(,) string<delimiter(')content(numerator)delimiter(')>operator(,) string<delimiter(')content(nunion)delimiter(')>operator(,) string<delimiter(')content(oddp)delimiter(')>operator(,)
    string<delimiter(')content(open)delimiter(')>operator(,) string<delimiter(')content(open-stream-p)delimiter(')>operator(,) string<delimiter(')content(output-stream-p)delimiter(')>operator(,) string<delimiter(')content(package-error-package)delimiter(')>operator(,)
    string<delimiter(')content(package-name)delimiter(')>operator(,) string<delimiter(')content(package-nicknames)delimiter(')>operator(,) string<delimiter(')content(packagep)delimiter(')>operator(,)
    string<delimiter(')content(package-shadowing-symbols)delimiter(')>operator(,) string<delimiter(')content(package-used-by-list)delimiter(')>operator(,) string<delimiter(')content(package-use-list)delimiter(')>operator(,)
    string<delimiter(')content(pairlis)delimiter(')>operator(,) string<delimiter(')content(parse-integer)delimiter(')>operator(,) string<delimiter(')content(parse-namestring)delimiter(')>operator(,) string<delimiter(')content(pathname)delimiter(')>operator(,)
    string<delimiter(')content(pathname-device)delimiter(')>operator(,) string<delimiter(')content(pathname-directory)delimiter(')>operator(,) string<delimiter(')content(pathname-host)delimiter(')>operator(,)
    string<delimiter(')content(pathname-match-p)delimiter(')>operator(,) string<delimiter(')content(pathname-name)delimiter(')>operator(,) string<delimiter(')content(pathnamep)delimiter(')>operator(,) string<delimiter(')content(pathname-type)delimiter(')>operator(,)
    string<delimiter(')content(pathname-version)delimiter(')>operator(,) string<delimiter(')content(peek-char)delimiter(')>operator(,) string<delimiter(')content(phase)delimiter(')>operator(,) string<delimiter(')content(plusp)delimiter(')>operator(,) string<delimiter(')content(position)delimiter(')>operator(,)
    string<delimiter(')content(position-if)delimiter(')>operator(,) string<delimiter(')content(position-if-not)delimiter(')>operator(,) string<delimiter(')content(pprint)delimiter(')>operator(,) string<delimiter(')content(pprint-dispatch)delimiter(')>operator(,)
    string<delimiter(')content(pprint-fill)delimiter(')>operator(,) string<delimiter(')content(pprint-indent)delimiter(')>operator(,) string<delimiter(')content(pprint-linear)delimiter(')>operator(,) string<delimiter(')content(pprint-newline)delimiter(')>operator(,)
    string<delimiter(')content(pprint-tab)delimiter(')>operator(,) string<delimiter(')content(pprint-tabular)delimiter(')>operator(,) string<delimiter(')content(prin1)delimiter(')>operator(,) string<delimiter(')content(prin1-to-string)delimiter(')>operator(,) string<delimiter(')content(princ)delimiter(')>operator(,)
    string<delimiter(')content(princ-to-string)delimiter(')>operator(,) string<delimiter(')content(print)delimiter(')>operator(,) string<delimiter(')content(print-object)delimiter(')>operator(,) string<delimiter(')content(probe-file)delimiter(')>operator(,) string<delimiter(')content(proclaim)delimiter(')>operator(,)
    string<delimiter(')content(provide)delimiter(')>operator(,) string<delimiter(')content(random)delimiter(')>operator(,) string<delimiter(')content(random-state-p)delimiter(')>operator(,) string<delimiter(')content(rassoc)delimiter(')>operator(,) string<delimiter(')content(rassoc-if)delimiter(')>operator(,)
    string<delimiter(')content(rassoc-if-not)delimiter(')>operator(,) string<delimiter(')content(rational)delimiter(')>operator(,) string<delimiter(')content(rationalize)delimiter(')>operator(,) string<delimiter(')content(rationalp)delimiter(')>operator(,) string<delimiter(')content(read)delimiter(')>operator(,)
    string<delimiter(')content(read-byte)delimiter(')>operator(,) string<delimiter(')content(read-char)delimiter(')>operator(,) string<delimiter(')content(read-char-no-hang)delimiter(')>operator(,) string<delimiter(')content(read-delimited-list)delimiter(')>operator(,)
    string<delimiter(')content(read-from-string)delimiter(')>operator(,) string<delimiter(')content(read-line)delimiter(')>operator(,) string<delimiter(')content(read-preserving-whitespace)delimiter(')>operator(,)
    string<delimiter(')content(read-sequence)delimiter(')>operator(,) string<delimiter(')content(readtable-case)delimiter(')>operator(,) string<delimiter(')content(readtablep)delimiter(')>operator(,) string<delimiter(')content(realp)delimiter(')>operator(,) string<delimiter(')content(realpart)delimiter(')>operator(,)
    string<delimiter(')content(reduce)delimiter(')>operator(,) string<delimiter(')content(reinitialize-instance)delimiter(')>operator(,) string<delimiter(')content(rem)delimiter(')>operator(,) string<delimiter(')content(remhash)delimiter(')>operator(,) string<delimiter(')content(remove)delimiter(')>operator(,)
    string<delimiter(')content(remove-duplicates)delimiter(')>operator(,) string<delimiter(')content(remove-if)delimiter(')>operator(,) string<delimiter(')content(remove-if-not)delimiter(')>operator(,) string<delimiter(')content(remove-method)delimiter(')>operator(,)
    string<delimiter(')content(remprop)delimiter(')>operator(,) string<delimiter(')content(rename-file)delimiter(')>operator(,) string<delimiter(')content(rename-package)delimiter(')>operator(,) string<delimiter(')content(replace)delimiter(')>operator(,) string<delimiter(')content(require)delimiter(')>operator(,)
    string<delimiter(')content(rest)delimiter(')>operator(,) string<delimiter(')content(restart-name)delimiter(')>operator(,) string<delimiter(')content(revappend)delimiter(')>operator(,) string<delimiter(')content(reverse)delimiter(')>operator(,) string<delimiter(')content(room)delimiter(')>operator(,) string<delimiter(')content(round)delimiter(')>operator(,)
    string<delimiter(')content(row-major-aref)delimiter(')>operator(,) string<delimiter(')content(rplaca)delimiter(')>operator(,) string<delimiter(')content(rplacd)delimiter(')>operator(,) string<delimiter(')content(sbit)delimiter(')>operator(,) string<delimiter(')content(scale-float)delimiter(')>operator(,) string<delimiter(')content(schar)delimiter(')>operator(,)
    string<delimiter(')content(search)delimiter(')>operator(,) string<delimiter(')content(second)delimiter(')>operator(,) string<delimiter(')content(set)delimiter(')>operator(,) string<delimiter(')content(set-difference)delimiter(')>operator(,)
    string<delimiter(')content(set-dispatch-macro-character)delimiter(')>operator(,) string<delimiter(')content(set-exclusive-or)delimiter(')>operator(,)
    string<delimiter(')content(set-macro-character)delimiter(')>operator(,) string<delimiter(')content(set-pprint-dispatch)delimiter(')>operator(,) string<delimiter(')content(set-syntax-from-char)delimiter(')>operator(,)
    string<delimiter(')content(seventh)delimiter(')>operator(,) string<delimiter(')content(shadow)delimiter(')>operator(,) string<delimiter(')content(shadowing-import)delimiter(')>operator(,) string<delimiter(')content(shared-initialize)delimiter(')>operator(,)
    string<delimiter(')content(short-site-name)delimiter(')>operator(,) string<delimiter(')content(signal)delimiter(')>operator(,) string<delimiter(')content(signum)delimiter(')>operator(,) string<delimiter(')content(simple-bit-vector-p)delimiter(')>operator(,)
    string<delimiter(')content(simple-condition-format-arguments)delimiter(')>operator(,) string<delimiter(')content(simple-condition-format-control)delimiter(')>operator(,)
    string<delimiter(')content(simple-string-p)delimiter(')>operator(,) string<delimiter(')content(simple-vector-p)delimiter(')>operator(,) string<delimiter(')content(sin)delimiter(')>operator(,) string<delimiter(')content(sinh)delimiter(')>operator(,) string<delimiter(')content(sixth)delimiter(')>operator(,) string<delimiter(')content(sleep)delimiter(')>operator(,)
    string<delimiter(')content(slot-boundp)delimiter(')>operator(,) string<delimiter(')content(slot-exists-p)delimiter(')>operator(,) string<delimiter(')content(slot-makunbound)delimiter(')>operator(,) string<delimiter(')content(slot-missing)delimiter(')>operator(,)
    string<delimiter(')content(slot-unbound)delimiter(')>operator(,) string<delimiter(')content(slot-value)delimiter(')>operator(,) string<delimiter(')content(software-type)delimiter(')>operator(,) string<delimiter(')content(software-version)delimiter(')>operator(,)
    string<delimiter(')content(some)delimiter(')>operator(,) string<delimiter(')content(sort)delimiter(')>operator(,) string<delimiter(')content(special-operator-p)delimiter(')>operator(,) string<delimiter(')content(sqrt)delimiter(')>operator(,) string<delimiter(')content(stable-sort)delimiter(')>operator(,)
    string<delimiter(')content(standard-char-p)delimiter(')>operator(,) string<delimiter(')content(store-value)delimiter(')>operator(,) string<delimiter(')content(stream-element-type)delimiter(')>operator(,)
    string<delimiter(')content(stream-error-stream)delimiter(')>operator(,) string<delimiter(')content(stream-external-format)delimiter(')>operator(,) string<delimiter(')content(streamp)delimiter(')>operator(,) string<delimiter(')content(string)delimiter(')>operator(,)
    string<delimiter(')content(string<)delimiter(')>operator(,) string<delimiter(')content(string<=)delimiter(')>operator(,) string<delimiter(')content(string=)delimiter(')>operator(,) string<delimiter(')content(string>)delimiter(')>operator(,) string<delimiter(')content(string>=)delimiter(')>operator(,) string<delimiter(')content(string/=)delimiter(')>operator(,)
    string<delimiter(')content(string-capitalize)delimiter(')>operator(,) string<delimiter(')content(string-downcase)delimiter(')>operator(,) string<delimiter(')content(string-equal)delimiter(')>operator(,)
    string<delimiter(')content(string-greaterp)delimiter(')>operator(,) string<delimiter(')content(string-left-trim)delimiter(')>operator(,) string<delimiter(')content(string-lessp)delimiter(')>operator(,)
    string<delimiter(')content(string-not-equal)delimiter(')>operator(,) string<delimiter(')content(string-not-greaterp)delimiter(')>operator(,) string<delimiter(')content(string-not-lessp)delimiter(')>operator(,)
    string<delimiter(')content(stringp)delimiter(')>operator(,) string<delimiter(')content(string-right-trim)delimiter(')>operator(,) string<delimiter(')content(string-trim)delimiter(')>operator(,) string<delimiter(')content(string-upcase)delimiter(')>operator(,)
    string<delimiter(')content(sublis)delimiter(')>operator(,) string<delimiter(')content(subseq)delimiter(')>operator(,) string<delimiter(')content(subsetp)delimiter(')>operator(,) string<delimiter(')content(subst)delimiter(')>operator(,) string<delimiter(')content(subst-if)delimiter(')>operator(,) string<delimiter(')content(subst-if-not)delimiter(')>operator(,)
    string<delimiter(')content(substitute)delimiter(')>operator(,) string<delimiter(')content(substitute-if)delimiter(')>operator(,) string<delimiter(')content(substitute-if-not)delimiter(')>operator(,) string<delimiter(')content(subtypep)delimiter(')>operator(,)string<delimiter(')content(svref)delimiter(')>operator(,)
    string<delimiter(')content(sxhash)delimiter(')>operator(,) string<delimiter(')content(symbol-function)delimiter(')>operator(,) string<delimiter(')content(symbol-name)delimiter(')>operator(,) string<delimiter(')content(symbolp)delimiter(')>operator(,) string<delimiter(')content(symbol-package)delimiter(')>operator(,)
    string<delimiter(')content(symbol-plist)delimiter(')>operator(,) string<delimiter(')content(symbol-value)delimiter(')>operator(,) string<delimiter(')content(synonym-stream-symbol)delimiter(')>operator(,) string<delimiter(')content(syntax:)delimiter(')>operator(,)
    string<delimiter(')content(tailp)delimiter(')>operator(,) string<delimiter(')content(tan)delimiter(')>operator(,) string<delimiter(')content(tanh)delimiter(')>operator(,) string<delimiter(')content(tenth)delimiter(')>operator(,) string<delimiter(')content(terpri)delimiter(')>operator(,) string<delimiter(')content(third)delimiter(')>operator(,)
    string<delimiter(')content(translate-logical-pathname)delimiter(')>operator(,) string<delimiter(')content(translate-pathname)delimiter(')>operator(,) string<delimiter(')content(tree-equal)delimiter(')>operator(,)
    string<delimiter(')content(truename)delimiter(')>operator(,) string<delimiter(')content(truncate)delimiter(')>operator(,) string<delimiter(')content(two-way-stream-input-stream)delimiter(')>operator(,)
    string<delimiter(')content(two-way-stream-output-stream)delimiter(')>operator(,) string<delimiter(')content(type-error-datum)delimiter(')>operator(,)
    string<delimiter(')content(type-error-expected-type)delimiter(')>operator(,) string<delimiter(')content(type-of)delimiter(')>operator(,) string<delimiter(')content(typep)delimiter(')>operator(,) string<delimiter(')content(unbound-slot-instance)delimiter(')>operator(,)
    string<delimiter(')content(unexport)delimiter(')>operator(,) string<delimiter(')content(unintern)delimiter(')>operator(,) string<delimiter(')content(union)delimiter(')>operator(,) string<delimiter(')content(unread-char)delimiter(')>operator(,) string<delimiter(')content(unuse-package)delimiter(')>operator(,)
    string<delimiter(')content(update-instance-for-different-class)delimiter(')>operator(,)
    string<delimiter(')content(update-instance-for-redefined-class)delimiter(')>operator(,) string<delimiter(')content(upgraded-array-element-type)delimiter(')>operator(,)
    string<delimiter(')content(upgraded-complex-part-type)delimiter(')>operator(,) string<delimiter(')content(upper-case-p)delimiter(')>operator(,) string<delimiter(')content(use-package)delimiter(')>operator(,)
    string<delimiter(')content(user-homedir-pathname)delimiter(')>operator(,) string<delimiter(')content(use-value)delimiter(')>operator(,) string<delimiter(')content(values)delimiter(')>operator(,) string<delimiter(')content(values-list)delimiter(')>operator(,) string<delimiter(')content(vector)delimiter(')>operator(,)
    string<delimiter(')content(vectorp)delimiter(')>operator(,) string<delimiter(')content(vector-pop)delimiter(')>operator(,) string<delimiter(')content(vector-push)delimiter(')>operator(,) string<delimiter(')content(vector-push-extend)delimiter(')>operator(,) string<delimiter(')content(warn)delimiter(')>operator(,)
    string<delimiter(')content(wild-pathname-p)delimiter(')>operator(,) string<delimiter(')content(write)delimiter(')>operator(,) string<delimiter(')content(write-byte)delimiter(')>operator(,) string<delimiter(')content(write-char)delimiter(')>operator(,) string<delimiter(')content(write-line)delimiter(')>operator(,)
    string<delimiter(')content(write-sequence)delimiter(')>operator(,) string<delimiter(')content(write-string)delimiter(')>operator(,) string<delimiter(')content(write-to-string)delimiter(')>operator(,) string<delimiter(')content(yes-or-no-p)delimiter(')>operator(,)
    string<delimiter(')content(y-or-n-p)delimiter(')>operator(,) string<delimiter(')content(zerop)delimiter(')>operator(,)
operator(])

ident(SPECIAL_FORMS) operator(=) operator([)
    string<delimiter(')content(block)delimiter(')>operator(,) string<delimiter(')content(catch)delimiter(')>operator(,) string<delimiter(')content(declare)delimiter(')>operator(,) string<delimiter(')content(eval-when)delimiter(')>operator(,) string<delimiter(')content(flet)delimiter(')>operator(,) string<delimiter(')content(function)delimiter(')>operator(,) string<delimiter(')content(go)delimiter(')>operator(,) string<delimiter(')content(if)delimiter(')>operator(,)
    string<delimiter(')content(labels)delimiter(')>operator(,) string<delimiter(')content(lambda)delimiter(')>operator(,) string<delimiter(')content(let)delimiter(')>operator(,) string<delimiter(')content(let*)delimiter(')>operator(,) string<delimiter(')content(load-time-value)delimiter(')>operator(,) string<delimiter(')content(locally)delimiter(')>operator(,) string<delimiter(')content(macrolet)delimiter(')>operator(,)
    string<delimiter(')content(multiple-value-call)delimiter(')>operator(,) string<delimiter(')content(multiple-value-prog1)delimiter(')>operator(,) string<delimiter(')content(progn)delimiter(')>operator(,) string<delimiter(')content(progv)delimiter(')>operator(,) string<delimiter(')content(quote)delimiter(')>operator(,)
    string<delimiter(')content(return-from)delimiter(')>operator(,) string<delimiter(')content(setq)delimiter(')>operator(,) string<delimiter(')content(symbol-macrolet)delimiter(')>operator(,) string<delimiter(')content(tagbody)delimiter(')>operator(,) string<delimiter(')content(the)delimiter(')>operator(,) string<delimiter(')content(throw)delimiter(')>operator(,)
    string<delimiter(')content(unwind-protect)delimiter(')>operator(,)
operator(])

ident(MACROS) operator(=) operator([)
    string<delimiter(')content(and)delimiter(')>operator(,) string<delimiter(')content(assert)delimiter(')>operator(,) string<delimiter(')content(call-method)delimiter(')>operator(,) string<delimiter(')content(case)delimiter(')>operator(,) string<delimiter(')content(ccase)delimiter(')>operator(,) string<delimiter(')content(check-type)delimiter(')>operator(,) string<delimiter(')content(cond)delimiter(')>operator(,)
    string<delimiter(')content(ctypecase)delimiter(')>operator(,) string<delimiter(')content(decf)delimiter(')>operator(,) string<delimiter(')content(declaim)delimiter(')>operator(,) string<delimiter(')content(defclass)delimiter(')>operator(,) string<delimiter(')content(defconstant)delimiter(')>operator(,) string<delimiter(')content(defgeneric)delimiter(')>operator(,)
    string<delimiter(')content(define-compiler-macro)delimiter(')>operator(,) string<delimiter(')content(define-condition)delimiter(')>operator(,) string<delimiter(')content(define-method-combination)delimiter(')>operator(,)
    string<delimiter(')content(define-modify-macro)delimiter(')>operator(,) string<delimiter(')content(define-setf-expander)delimiter(')>operator(,) string<delimiter(')content(define-symbol-macro)delimiter(')>operator(,)
    string<delimiter(')content(defmacro)delimiter(')>operator(,) string<delimiter(')content(defmethod)delimiter(')>operator(,) string<delimiter(')content(defpackage)delimiter(')>operator(,) string<delimiter(')content(defparameter)delimiter(')>operator(,) string<delimiter(')content(defsetf)delimiter(')>operator(,)
    string<delimiter(')content(defstruct)delimiter(')>operator(,) string<delimiter(')content(deftype)delimiter(')>operator(,) string<delimiter(')content(defun)delimiter(')>operator(,) string<delimiter(')content(defvar)delimiter(')>operator(,) string<delimiter(')content(destructuring-bind)delimiter(')>operator(,) string<delimiter(')content(do)delimiter(')>operator(,)
    string<delimiter(')content(do*)delimiter(')>operator(,) string<delimiter(')content(do-all-symbols)delimiter(')>operator(,) string<delimiter(')content(do-external-symbols)delimiter(')>operator(,) string<delimiter(')content(dolist)delimiter(')>operator(,) string<delimiter(')content(do-symbols)delimiter(')>operator(,)
    string<delimiter(')content(dotimes)delimiter(')>operator(,) string<delimiter(')content(ecase)delimiter(')>operator(,) string<delimiter(')content(etypecase)delimiter(')>operator(,) string<delimiter(')content(formatter)delimiter(')>operator(,) string<delimiter(')content(handler-bind)delimiter(')>operator(,)
    string<delimiter(')content(handler-case)delimiter(')>operator(,) string<delimiter(')content(ignore-errors)delimiter(')>operator(,) string<delimiter(')content(incf)delimiter(')>operator(,) string<delimiter(')content(in-package)delimiter(')>operator(,) string<delimiter(')content(lambda)delimiter(')>operator(,) string<delimiter(')content(loop)delimiter(')>operator(,)
    string<delimiter(')content(loop-finish)delimiter(')>operator(,) string<delimiter(')content(make-method)delimiter(')>operator(,) string<delimiter(')content(multiple-value-bind)delimiter(')>operator(,) string<delimiter(')content(multiple-value-list)delimiter(')>operator(,)
    string<delimiter(')content(multiple-value-setq)delimiter(')>operator(,) string<delimiter(')content(nth-value)delimiter(')>operator(,) string<delimiter(')content(or)delimiter(')>operator(,) string<delimiter(')content(pop)delimiter(')>operator(,)
    string<delimiter(')content(pprint-exit-if-list-exhausted)delimiter(')>operator(,) string<delimiter(')content(pprint-logical-block)delimiter(')>operator(,) string<delimiter(')content(pprint-pop)delimiter(')>operator(,)
    string<delimiter(')content(print-unreadable-object)delimiter(')>operator(,) string<delimiter(')content(prog)delimiter(')>operator(,) string<delimiter(')content(prog*)delimiter(')>operator(,) string<delimiter(')content(prog1)delimiter(')>operator(,) string<delimiter(')content(prog2)delimiter(')>operator(,) string<delimiter(')content(psetf)delimiter(')>operator(,)
    string<delimiter(')content(psetq)delimiter(')>operator(,) string<delimiter(')content(push)delimiter(')>operator(,) string<delimiter(')content(pushnew)delimiter(')>operator(,) string<delimiter(')content(remf)delimiter(')>operator(,) string<delimiter(')content(restart-bind)delimiter(')>operator(,) string<delimiter(')content(restart-case)delimiter(')>operator(,)
    string<delimiter(')content(return)delimiter(')>operator(,) string<delimiter(')content(rotatef)delimiter(')>operator(,) string<delimiter(')content(setf)delimiter(')>operator(,) string<delimiter(')content(shiftf)delimiter(')>operator(,) string<delimiter(')content(step)delimiter(')>operator(,) string<delimiter(')content(time)delimiter(')>operator(,) string<delimiter(')content(trace)delimiter(')>operator(,) string<delimiter(')content(typecase)delimiter(')>operator(,)
    string<delimiter(')content(unless)delimiter(')>operator(,) string<delimiter(')content(untrace)delimiter(')>operator(,) string<delimiter(')content(when)delimiter(')>operator(,) string<delimiter(')content(with-accessors)delimiter(')>operator(,) string<delimiter(')content(with-compilation-unit)delimiter(')>operator(,)
    string<delimiter(')content(with-condition-restarts)delimiter(')>operator(,) string<delimiter(')content(with-hash-table-iterator)delimiter(')>operator(,)
    string<delimiter(')content(with-input-from-string)delimiter(')>operator(,) string<delimiter(')content(with-open-file)delimiter(')>operator(,) string<delimiter(')content(with-open-stream)delimiter(')>operator(,)
    string<delimiter(')content(with-output-to-string)delimiter(')>operator(,) string<delimiter(')content(with-package-iterator)delimiter(')>operator(,) string<delimiter(')content(with-simple-restart)delimiter(')>operator(,)
    string<delimiter(')content(with-slots)delimiter(')>operator(,) string<delimiter(')content(with-standard-io-syntax)delimiter(')>operator(,)
operator(])

ident(LAMBDA_LIST_KEYWORDS) operator(=) operator([)
    string<delimiter(')content(&allow-other-keys)delimiter(')>operator(,) string<delimiter(')content(&aux)delimiter(')>operator(,) string<delimiter(')content(&body)delimiter(')>operator(,) string<delimiter(')content(&environment)delimiter(')>operator(,) string<delimiter(')content(&key)delimiter(')>operator(,) string<delimiter(')content(&optional)delimiter(')>operator(,)
    string<delimiter(')content(&rest)delimiter(')>operator(,) string<delimiter(')content(&whole)delimiter(')>operator(,)
operator(])

ident(DECLARATIONS) operator(=) operator([)
    string<delimiter(')content(dynamic-extent)delimiter(')>operator(,) string<delimiter(')content(ignore)delimiter(')>operator(,) string<delimiter(')content(optimize)delimiter(')>operator(,) string<delimiter(')content(ftype)delimiter(')>operator(,) string<delimiter(')content(inline)delimiter(')>operator(,) string<delimiter(')content(special)delimiter(')>operator(,)
    string<delimiter(')content(ignorable)delimiter(')>operator(,) string<delimiter(')content(notinline)delimiter(')>operator(,) string<delimiter(')content(type)delimiter(')>operator(,)
operator(])

ident(BUILTIN_TYPES) operator(=) operator([)
    string<delimiter(')content(atom)delimiter(')>operator(,) string<delimiter(')content(boolean)delimiter(')>operator(,) string<delimiter(')content(base-char)delimiter(')>operator(,) string<delimiter(')content(base-string)delimiter(')>operator(,) string<delimiter(')content(bignum)delimiter(')>operator(,) string<delimiter(')content(bit)delimiter(')>operator(,)
    string<delimiter(')content(compiled-function)delimiter(')>operator(,) string<delimiter(')content(extended-char)delimiter(')>operator(,) string<delimiter(')content(fixnum)delimiter(')>operator(,) string<delimiter(')content(keyword)delimiter(')>operator(,) string<delimiter(')content(nil)delimiter(')>operator(,)
    string<delimiter(')content(signed-byte)delimiter(')>operator(,) string<delimiter(')content(short-float)delimiter(')>operator(,) string<delimiter(')content(single-float)delimiter(')>operator(,) string<delimiter(')content(double-float)delimiter(')>operator(,) string<delimiter(')content(long-float)delimiter(')>operator(,)
    string<delimiter(')content(simple-array)delimiter(')>operator(,) string<delimiter(')content(simple-base-string)delimiter(')>operator(,) string<delimiter(')content(simple-bit-vector)delimiter(')>operator(,) string<delimiter(')content(simple-string)delimiter(')>operator(,)
    string<delimiter(')content(simple-vector)delimiter(')>operator(,) string<delimiter(')content(standard-char)delimiter(')>operator(,) string<delimiter(')content(unsigned-byte)delimiter(')>operator(,)

    comment(# Condition Types)
    string<delimiter(')content(arithmetic-error)delimiter(')>operator(,) string<delimiter(')content(cell-error)delimiter(')>operator(,) string<delimiter(')content(condition)delimiter(')>operator(,) string<delimiter(')content(control-error)delimiter(')>operator(,)
    string<delimiter(')content(division-by-zero)delimiter(')>operator(,) string<delimiter(')content(end-of-file)delimiter(')>operator(,) string<delimiter(')content(error)delimiter(')>operator(,) string<delimiter(')content(file-error)delimiter(')>operator(,)
    string<delimiter(')content(floating-point-inexact)delimiter(')>operator(,) string<delimiter(')content(floating-point-overflow)delimiter(')>operator(,)
    string<delimiter(')content(floating-point-underflow)delimiter(')>operator(,) string<delimiter(')content(floating-point-invalid-operation)delimiter(')>operator(,)
    string<delimiter(')content(parse-error)delimiter(')>operator(,) string<delimiter(')content(package-error)delimiter(')>operator(,) string<delimiter(')content(print-not-readable)delimiter(')>operator(,) string<delimiter(')content(program-error)delimiter(')>operator(,)
    string<delimiter(')content(reader-error)delimiter(')>operator(,) string<delimiter(')content(serious-condition)delimiter(')>operator(,) string<delimiter(')content(simple-condition)delimiter(')>operator(,) string<delimiter(')content(simple-error)delimiter(')>operator(,)
    string<delimiter(')content(simple-type-error)delimiter(')>operator(,) string<delimiter(')content(simple-warning)delimiter(')>operator(,) string<delimiter(')content(stream-error)delimiter(')>operator(,) string<delimiter(')content(storage-condition)delimiter(')>operator(,)
    string<delimiter(')content(style-warning)delimiter(')>operator(,) string<delimiter(')content(type-error)delimiter(')>operator(,) string<delimiter(')content(unbound-variable)delimiter(')>operator(,) string<delimiter(')content(unbound-slot)delimiter(')>operator(,)
    string<delimiter(')content(undefined-function)delimiter(')>operator(,) string<delimiter(')content(warning)delimiter(')>operator(,)
operator(])

ident(BUILTIN_CLASSES) operator(=) operator([)
    string<delimiter(')content(array)delimiter(')>operator(,) string<delimiter(')content(broadcast-stream)delimiter(')>operator(,) string<delimiter(')content(bit-vector)delimiter(')>operator(,) string<delimiter(')content(built-in-class)delimiter(')>operator(,) string<delimiter(')content(character)delimiter(')>operator(,)
    string<delimiter(')content(class)delimiter(')>operator(,) string<delimiter(')content(complex)delimiter(')>operator(,) string<delimiter(')content(concatenated-stream)delimiter(')>operator(,) string<delimiter(')content(cons)delimiter(')>operator(,) string<delimiter(')content(echo-stream)delimiter(')>operator(,)
    string<delimiter(')content(file-stream)delimiter(')>operator(,) string<delimiter(')content(float)delimiter(')>operator(,) string<delimiter(')content(function)delimiter(')>operator(,) string<delimiter(')content(generic-function)delimiter(')>operator(,) string<delimiter(')content(hash-table)delimiter(')>operator(,)
    string<delimiter(')content(integer)delimiter(')>operator(,) string<delimiter(')content(list)delimiter(')>operator(,) string<delimiter(')content(logical-pathname)delimiter(')>operator(,) string<delimiter(')content(method-combination)delimiter(')>operator(,) string<delimiter(')content(method)delimiter(')>operator(,)
    string<delimiter(')content(null)delimiter(')>operator(,) string<delimiter(')content(number)delimiter(')>operator(,) string<delimiter(')content(package)delimiter(')>operator(,) string<delimiter(')content(pathname)delimiter(')>operator(,) string<delimiter(')content(ratio)delimiter(')>operator(,) string<delimiter(')content(rational)delimiter(')>operator(,) string<delimiter(')content(readtable)delimiter(')>operator(,)
    string<delimiter(')content(real)delimiter(')>operator(,) string<delimiter(')content(random-state)delimiter(')>operator(,) string<delimiter(')content(restart)delimiter(')>operator(,) string<delimiter(')content(sequence)delimiter(')>operator(,) string<delimiter(')content(standard-class)delimiter(')>operator(,)
    string<delimiter(')content(standard-generic-function)delimiter(')>operator(,) string<delimiter(')content(standard-method)delimiter(')>operator(,) string<delimiter(')content(standard-object)delimiter(')>operator(,)
    string<delimiter(')content(string-stream)delimiter(')>operator(,) string<delimiter(')content(stream)delimiter(')>operator(,) string<delimiter(')content(string)delimiter(')>operator(,) string<delimiter(')content(structure-class)delimiter(')>operator(,) string<delimiter(')content(structure-object)delimiter(')>operator(,)
    string<delimiter(')content(symbol)delimiter(')>operator(,) string<delimiter(')content(synonym-stream)delimiter(')>operator(,) string<delimiter(')content(t)delimiter(')>operator(,) string<delimiter(')content(two-way-stream)delimiter(')>operator(,) string<delimiter(')content(vector)delimiter(')>operator(,)
operator(])
comment(# -*- coding: utf-8 -*-)
docstring<delimiter(""")content(
)content(    pygments.lexers._luabuiltins)content(
)content(    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~)content(
)content(
)content(    This file contains the names and modules of lua functions)content(
)content(    It is able to re-generate itself, but for adding new functions you)content(
)content(    probably have to add some callbacks (see function module_callbacks\).)content(
)content(
)content(    Do not edit the MODULES dict by hand.)content(
)content(
)content(    :copyright: Copyright 2006-2009 by the Pygments team, see AUTHORS.)content(
)content(    :license: BSD, see LICENSE for details.)content(
)delimiter(""")>

ident(MODULES) operator(=) operator({)string<delimiter(')content(basic)delimiter(')>operator(:) operator([)string<delimiter(')content(_G)delimiter(')>operator(,)
           string<delimiter(')content(_VERSION)delimiter(')>operator(,)
           string<delimiter(')content(assert)delimiter(')>operator(,)
           string<delimiter(')content(collectgarbage)delimiter(')>operator(,)
           string<delimiter(')content(dofile)delimiter(')>operator(,)
           string<delimiter(')content(error)delimiter(')>operator(,)
           string<delimiter(')content(getfenv)delimiter(')>operator(,)
           string<delimiter(')content(getmetatable)delimiter(')>operator(,)
           string<delimiter(')content(ipairs)delimiter(')>operator(,)
           string<delimiter(')content(load)delimiter(')>operator(,)
           string<delimiter(')content(loadfile)delimiter(')>operator(,)
           string<delimiter(')content(loadstring)delimiter(')>operator(,)
           string<delimiter(')content(next)delimiter(')>operator(,)
           string<delimiter(')content(pairs)delimiter(')>operator(,)
           string<delimiter(')content(pcall)delimiter(')>operator(,)
           string<delimiter(')content(print)delimiter(')>operator(,)
           string<delimiter(')content(rawequal)delimiter(')>operator(,)
           string<delimiter(')content(rawget)delimiter(')>operator(,)
           string<delimiter(')content(rawset)delimiter(')>operator(,)
           string<delimiter(')content(select)delimiter(')>operator(,)
           string<delimiter(')content(setfenv)delimiter(')>operator(,)
           string<delimiter(')content(setmetatable)delimiter(')>operator(,)
           string<delimiter(')content(tonumber)delimiter(')>operator(,)
           string<delimiter(')content(tostring)delimiter(')>operator(,)
           string<delimiter(')content(type)delimiter(')>operator(,)
           string<delimiter(')content(unpack)delimiter(')>operator(,)
           string<delimiter(')content(xpcall)delimiter(')>operator(])operator(,)
 string<delimiter(')content(coroutine)delimiter(')>operator(:) operator([)string<delimiter(')content(coroutine.create)delimiter(')>operator(,)
               string<delimiter(')content(coroutine.resume)delimiter(')>operator(,)
               string<delimiter(')content(coroutine.running)delimiter(')>operator(,)
               string<delimiter(')content(coroutine.status)delimiter(')>operator(,)
               string<delimiter(')content(coroutine.wrap)delimiter(')>operator(,)
               string<delimiter(')content(coroutine.yield)delimiter(')>operator(])operator(,)
 string<delimiter(')content(debug)delimiter(')>operator(:) operator([)string<delimiter(')content(debug.debug)delimiter(')>operator(,)
           string<delimiter(')content(debug.getfenv)delimiter(')>operator(,)
           string<delimiter(')content(debug.gethook)delimiter(')>operator(,)
           string<delimiter(')content(debug.getinfo)delimiter(')>operator(,)
           string<delimiter(')content(debug.getlocal)delimiter(')>operator(,)
           string<delimiter(')content(debug.getmetatable)delimiter(')>operator(,)
           string<delimiter(')content(debug.getregistry)delimiter(')>operator(,)
           string<delimiter(')content(debug.getupvalue)delimiter(')>operator(,)
           string<delimiter(')content(debug.setfenv)delimiter(')>operator(,)
           string<delimiter(')content(debug.sethook)delimiter(')>operator(,)
           string<delimiter(')content(debug.setlocal)delimiter(')>operator(,)
           string<delimiter(')content(debug.setmetatable)delimiter(')>operator(,)
           string<delimiter(')content(debug.setupvalue)delimiter(')>operator(,)
           string<delimiter(')content(debug.traceback)delimiter(')>operator(])operator(,)
 string<delimiter(')content(io)delimiter(')>operator(:) operator([)string<delimiter(')content(file:close)delimiter(')>operator(,)
        string<delimiter(')content(file:flush)delimiter(')>operator(,)
        string<delimiter(')content(file:lines)delimiter(')>operator(,)
        string<delimiter(')content(file:read)delimiter(')>operator(,)
        string<delimiter(')content(file:seek)delimiter(')>operator(,)
        string<delimiter(')content(file:setvbuf)delimiter(')>operator(,)
        string<delimiter(')content(file:write)delimiter(')>operator(,)
        string<delimiter(')content(io.close)delimiter(')>operator(,)
        string<delimiter(')content(io.flush)delimiter(')>operator(,)
        string<delimiter(')content(io.input)delimiter(')>operator(,)
        string<delimiter(')content(io.lines)delimiter(')>operator(,)
        string<delimiter(')content(io.open)delimiter(')>operator(,)
        string<delimiter(')content(io.output)delimiter(')>operator(,)
        string<delimiter(')content(io.popen)delimiter(')>operator(,)
        string<delimiter(')content(io.read)delimiter(')>operator(,)
        string<delimiter(')content(io.tmpfile)delimiter(')>operator(,)
        string<delimiter(')content(io.type)delimiter(')>operator(,)
        string<delimiter(')content(io.write)delimiter(')>operator(])operator(,)
 string<delimiter(')content(math)delimiter(')>operator(:) operator([)string<delimiter(')content(math.abs)delimiter(')>operator(,)
          string<delimiter(')content(math.acos)delimiter(')>operator(,)
          string<delimiter(')content(math.asin)delimiter(')>operator(,)
          string<delimiter(')content(math.atan2)delimiter(')>operator(,)
          string<delimiter(')content(math.atan)delimiter(')>operator(,)
          string<delimiter(')content(math.ceil)delimiter(')>operator(,)
          string<delimiter(')content(math.cosh)delimiter(')>operator(,)
          string<delimiter(')content(math.cos)delimiter(')>operator(,)
          string<delimiter(')content(math.deg)delimiter(')>operator(,)
          string<delimiter(')content(math.exp)delimiter(')>operator(,)
          string<delimiter(')content(math.floor)delimiter(')>operator(,)
          string<delimiter(')content(math.fmod)delimiter(')>operator(,)
          string<delimiter(')content(math.frexp)delimiter(')>operator(,)
          string<delimiter(')content(math.huge)delimiter(')>operator(,)
          string<delimiter(')content(math.ldexp)delimiter(')>operator(,)
          string<delimiter(')content(math.log10)delimiter(')>operator(,)
          string<delimiter(')content(math.log)delimiter(')>operator(,)
          string<delimiter(')content(math.max)delimiter(')>operator(,)
          string<delimiter(')content(math.min)delimiter(')>operator(,)
          string<delimiter(')content(math.modf)delimiter(')>operator(,)
          string<delimiter(')content(math.pi)delimiter(')>operator(,)
          string<delimiter(')content(math.pow)delimiter(')>operator(,)
          string<delimiter(')content(math.rad)delimiter(')>operator(,)
          string<delimiter(')content(math.random)delimiter(')>operator(,)
          string<delimiter(')content(math.randomseed)delimiter(')>operator(,)
          string<delimiter(')content(math.sinh)delimiter(')>operator(,)
          string<delimiter(')content(math.sin)delimiter(')>operator(,)
          string<delimiter(')content(math.sqrt)delimiter(')>operator(,)
          string<delimiter(')content(math.tanh)delimiter(')>operator(,)
          string<delimiter(')content(math.tan)delimiter(')>operator(])operator(,)
 string<delimiter(')content(modules)delimiter(')>operator(:) operator([)string<delimiter(')content(module)delimiter(')>operator(,)
             string<delimiter(')content(require)delimiter(')>operator(,)
             string<delimiter(')content(package.cpath)delimiter(')>operator(,)
             string<delimiter(')content(package.loaded)delimiter(')>operator(,)
             string<delimiter(')content(package.loadlib)delimiter(')>operator(,)
             string<delimiter(')content(package.path)delimiter(')>operator(,)
             string<delimiter(')content(package.preload)delimiter(')>operator(,)
             string<delimiter(')content(package.seeall)delimiter(')>operator(])operator(,)
 string<delimiter(')content(os)delimiter(')>operator(:) operator([)string<delimiter(')content(os.clock)delimiter(')>operator(,)
        string<delimiter(')content(os.date)delimiter(')>operator(,)
        string<delimiter(')content(os.difftime)delimiter(')>operator(,)
        string<delimiter(')content(os.execute)delimiter(')>operator(,)
        string<delimiter(')content(os.exit)delimiter(')>operator(,)
        string<delimiter(')content(os.getenv)delimiter(')>operator(,)
        string<delimiter(')content(os.remove)delimiter(')>operator(,)
        string<delimiter(')content(os.rename)delimiter(')>operator(,)
        string<delimiter(')content(os.setlocale)delimiter(')>operator(,)
        string<delimiter(')content(os.time)delimiter(')>operator(,)
        string<delimiter(')content(os.tmpname)delimiter(')>operator(])operator(,)
 string<delimiter(')content(string)delimiter(')>operator(:) operator([)string<delimiter(')content(string.byte)delimiter(')>operator(,)
            string<delimiter(')content(string.char)delimiter(')>operator(,)
            string<delimiter(')content(string.dump)delimiter(')>operator(,)
            string<delimiter(')content(string.find)delimiter(')>operator(,)
            string<delimiter(')content(string.format)delimiter(')>operator(,)
            string<delimiter(')content(string.gmatch)delimiter(')>operator(,)
            string<delimiter(')content(string.gsub)delimiter(')>operator(,)
            string<delimiter(')content(string.len)delimiter(')>operator(,)
            string<delimiter(')content(string.lower)delimiter(')>operator(,)
            string<delimiter(')content(string.match)delimiter(')>operator(,)
            string<delimiter(')content(string.rep)delimiter(')>operator(,)
            string<delimiter(')content(string.reverse)delimiter(')>operator(,)
            string<delimiter(')content(string.sub)delimiter(')>operator(,)
            string<delimiter(')content(string.upper)delimiter(')>operator(])operator(,)
 string<delimiter(')content(table)delimiter(')>operator(:) operator([)string<delimiter(')content(table.concat)delimiter(')>operator(,)
           string<delimiter(')content(table.insert)delimiter(')>operator(,)
           string<delimiter(')content(table.maxn)delimiter(')>operator(,)
           string<delimiter(')content(table.remove)delimiter(')>operator(,)
           string<delimiter(')content(table.sort)delimiter(')>operator(])operator(})

keyword(if) ident(__name__) operator(==) string<delimiter(')content(__main__)delimiter(')>operator(:)
    keyword(import) include(re)
    keyword(import) include(urllib)
    keyword(import) include(pprint)

    comment(# you can't generally find out what module a function belongs to if you)
    comment(# have only its name. Because of this, here are some callback functions)
    comment(# that recognize if a gioven function belongs to a specific module)
    keyword(def) method(module_callbacks)operator(()operator(\))operator(:)
        keyword(def) method(is_in_coroutine_module)operator(()ident(name)operator(\))operator(:)
            keyword(return) ident(name)operator(.)ident(startswith)operator(()string<delimiter(')content(coroutine.)delimiter(')>operator(\))

        keyword(def) method(is_in_modules_module)operator(()ident(name)operator(\))operator(:)
            keyword(if) ident(name) keyword(in) operator([)string<delimiter(')content(require)delimiter(')>operator(,) string<delimiter(')content(module)delimiter(')>operator(]) keyword(or) ident(name)operator(.)ident(startswith)operator(()string<delimiter(')content(package)delimiter(')>operator(\))operator(:)
                keyword(return) predefined_constant(True)
            keyword(else)operator(:)
                keyword(return) predefined_constant(False)

        keyword(def) method(is_in_string_module)operator(()ident(name)operator(\))operator(:)
            keyword(return) ident(name)operator(.)ident(startswith)operator(()string<delimiter(')content(string.)delimiter(')>operator(\))

        keyword(def) method(is_in_table_module)operator(()ident(name)operator(\))operator(:)
            keyword(return) ident(name)operator(.)ident(startswith)operator(()string<delimiter(')content(table.)delimiter(')>operator(\))

        keyword(def) method(is_in_math_module)operator(()ident(name)operator(\))operator(:)
            keyword(return) ident(name)operator(.)ident(startswith)operator(()string<delimiter(')content(math)delimiter(')>operator(\))

        keyword(def) method(is_in_io_module)operator(()ident(name)operator(\))operator(:)
            keyword(return) ident(name)operator(.)ident(startswith)operator(()string<delimiter(')content(io.)delimiter(')>operator(\)) keyword(or) ident(name)operator(.)ident(startswith)operator(()string<delimiter(')content(file:)delimiter(')>operator(\))

        keyword(def) method(is_in_os_module)operator(()ident(name)operator(\))operator(:)
            keyword(return) ident(name)operator(.)ident(startswith)operator(()string<delimiter(')content(os.)delimiter(')>operator(\))

        keyword(def) method(is_in_debug_module)operator(()ident(name)operator(\))operator(:)
            keyword(return) ident(name)operator(.)ident(startswith)operator(()string<delimiter(')content(debug.)delimiter(')>operator(\))

        keyword(return) operator({)string<delimiter(')content(coroutine)delimiter(')>operator(:) ident(is_in_coroutine_module)operator(,)
                string<delimiter(')content(modules)delimiter(')>operator(:) ident(is_in_modules_module)operator(,)
                string<delimiter(')content(string)delimiter(')>operator(:) ident(is_in_string_module)operator(,)
                string<delimiter(')content(table)delimiter(')>operator(:) ident(is_in_table_module)operator(,)
                string<delimiter(')content(math)delimiter(')>operator(:) ident(is_in_math_module)operator(,)
                string<delimiter(')content(io)delimiter(')>operator(:) ident(is_in_io_module)operator(,)
                string<delimiter(')content(os)delimiter(')>operator(:) ident(is_in_os_module)operator(,)
                string<delimiter(')content(debug)delimiter(')>operator(:) ident(is_in_debug_module)operator(})



    keyword(def) method(get_newest_version)operator(()operator(\))operator(:)
        ident(f) operator(=) ident(urllib)operator(.)ident(urlopen)operator(()string<delimiter(')content(http://www.lua.org/manual/)delimiter(')>operator(\))
        ident(r) operator(=) ident(re)operator(.)ident(compile)operator(()string<modifier(r)delimiter(')content(^<A HREF="()content(\\d)content(\\.)content(\\d)content(\)/">Lua )content(\\1)content(</A>)delimiter(')>operator(\))
        keyword(for) ident(line) keyword(in) ident(f)operator(:)
            ident(m) operator(=) ident(r)operator(.)ident(match)operator(()ident(line)operator(\))
            keyword(if) ident(m) keyword(is) keyword(not) predefined_constant(None)operator(:)
                keyword(return) ident(m)operator(.)ident(groups)operator(()operator(\))operator([)integer(0)operator(])

    keyword(def) method(get_lua_functions)operator(()ident(version)operator(\))operator(:)
        ident(f) operator(=) ident(urllib)operator(.)ident(urlopen)operator(()string<delimiter(')content(http://www.lua.org/manual/%s/)delimiter(')> operator(%) ident(version)operator(\))
        ident(r) operator(=) ident(re)operator(.)ident(compile)operator(()string<modifier(r)delimiter(')content(^<A HREF="manual.html#pdf-(.+\)">)content(\\1)content(</A>)delimiter(')>operator(\))
        ident(functions) operator(=) operator([)operator(])
        keyword(for) ident(line) keyword(in) ident(f)operator(:)
            ident(m) operator(=) ident(r)operator(.)ident(match)operator(()ident(line)operator(\))
            keyword(if) ident(m) keyword(is) keyword(not) predefined_constant(None)operator(:)
                ident(functions)operator(.)ident(append)operator(()ident(m)operator(.)ident(groups)operator(()operator(\))operator([)integer(0)operator(])operator(\))
        keyword(return) ident(functions)

    keyword(def) method(get_function_module)operator(()ident(name)operator(\))operator(:)
        keyword(for) ident(mod)operator(,) ident(cb) keyword(in) ident(module_callbacks)operator(()operator(\))operator(.)ident(iteritems)operator(()operator(\))operator(:)
            keyword(if) ident(cb)operator(()ident(name)operator(\))operator(:)
                keyword(return) ident(mod)
        keyword(if) string<delimiter(')content(.)delimiter(')> ident(in) ident(name)operator(:)
            keyword(return) ident(name)operator(.)ident(split)operator(()string<delimiter(')content(.)delimiter(')>operator(\))operator([)integer(0)operator(])
        keyword(else)operator(:)
            keyword(return) string<delimiter(')content(basic)delimiter(')>

    keyword(def) method(regenerate)operator(()ident(filename)operator(,) ident(modules)operator(\))operator(:)
        ident(f) operator(=) predefined(open)operator(()ident(filename)operator(\))
        keyword(try)operator(:)
            ident(content) operator(=) ident(f)operator(.)ident(read)operator(()operator(\))
        keyword(finally)operator(:)
            ident(f)operator(.)ident(close)operator(()operator(\))

        ident(header) operator(=) ident(content)operator([)operator(:)ident(content)operator(.)ident(find)operator(()string<delimiter(')content(MODULES = {)delimiter(')>operator(\))operator(])
        ident(footer) operator(=) ident(content)operator([)ident(content)operator(.)ident(find)operator(()string<delimiter(")content(if __name__ == '__main__':)delimiter(")>operator(\))operator(:)operator(])


        ident(f) operator(=) predefined(open)operator(()ident(filename)operator(,) string<delimiter(')content(w)delimiter(')>operator(\))
        ident(f)operator(.)ident(write)operator(()ident(header)operator(\))
        ident(f)operator(.)ident(write)operator(()string<delimiter(')content(MODULES = %s)char(\\n)char(\\n)delimiter(')> operator(%) ident(pprint)operator(.)ident(pformat)operator(()ident(modules)operator(\))operator(\))
        ident(f)operator(.)ident(write)operator(()ident(footer)operator(\))
        ident(f)operator(.)ident(close)operator(()operator(\))

    keyword(def) method(run)operator(()operator(\))operator(:)
        ident(version) operator(=) ident(get_newest_version)operator(()operator(\))
        keyword(print) string<delimiter(')content(> Downloading function index for Lua %s)delimiter(')> operator(%) ident(version)
        ident(functions) operator(=) ident(get_lua_functions)operator(()ident(version)operator(\))
        keyword(print) string<delimiter(')content(> %d functions found:)delimiter(')> operator(%) predefined(len)operator(()ident(functions)operator(\))

        ident(modules) operator(=) operator({)operator(})
        keyword(for) ident(full_function_name) keyword(in) ident(functions)operator(:)
            keyword(print) string<delimiter(')content(>> %s)delimiter(')> operator(%) ident(full_function_name)
            ident(m) operator(=) ident(get_function_module)operator(()ident(full_function_name)operator(\))
            ident(modules)operator(.)ident(setdefault)operator(()ident(m)operator(,) operator([)operator(])operator(\))operator(.)ident(append)operator(()ident(full_function_name)operator(\))

        ident(regenerate)operator(()ident(__file__)operator(,) ident(modules)operator(\))


    ident(run)operator(()operator(\))
comment(# -*- coding: utf-8 -*-)
docstring<delimiter(""")content(
)content(    pygments.lexers._mapping)content(
)content(    ~~~~~~~~~~~~~~~~~~~~~~~~)content(
)content(
)content(    Lexer mapping defintions. This file is generated by itself. Everytime)content(
)content(    you change something on a builtin lexer defintion, run this script from)content(
)content(    the lexers folder to update it.)content(
)content(
)content(    Do not alter the LEXERS dictionary by hand.)content(
)content(
)content(    :copyright: Copyright 2006-2009 by the Pygments team, see AUTHORS.)content(
)content(    :license: BSD, see LICENSE for details.)content(
)delimiter(""")>

ident(LEXERS) operator(=) operator({)
    string<delimiter(')content(ABAPLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.other)delimiter(')>operator(,) string<delimiter(')content(ABAP)delimiter(')>operator(,) operator(()string<delimiter(')content(abap)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(*.abap)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(text/x-abap)delimiter(')>operator(,)operator(\))operator(\))operator(,)
    string<delimiter(')content(ActionScript3Lexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.web)delimiter(')>operator(,) string<delimiter(')content(ActionScript 3)delimiter(')>operator(,) operator(()string<delimiter(')content(as3)delimiter(')>operator(,) string<delimiter(')content(actionscript3)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(*.as)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(application/x-actionscript)delimiter(')>operator(,) string<delimiter(')content(text/x-actionscript)delimiter(')>operator(,) string<delimiter(')content(text/actionscript)delimiter(')>operator(\))operator(\))operator(,)
    string<delimiter(')content(ActionScriptLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.web)delimiter(')>operator(,) string<delimiter(')content(ActionScript)delimiter(')>operator(,) operator(()string<delimiter(')content(as)delimiter(')>operator(,) string<delimiter(')content(actionscript)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(*.as)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(application/x-actionscript)delimiter(')>operator(,) string<delimiter(')content(text/x-actionscript)delimiter(')>operator(,) string<delimiter(')content(text/actionscript)delimiter(')>operator(\))operator(\))operator(,)
    string<delimiter(')content(AntlrActionScriptLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.parsers)delimiter(')>operator(,) string<delimiter(')content(ANTLR With ActionScript Target)delimiter(')>operator(,) operator(()string<delimiter(')content(antlr-as)delimiter(')>operator(,) string<delimiter(')content(antlr-actionscript)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(*.G)delimiter(')>operator(,) string<delimiter(')content(*.g)delimiter(')>operator(\))operator(,) operator(()operator(\))operator(\))operator(,)
    string<delimiter(')content(AntlrCSharpLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.parsers)delimiter(')>operator(,) string<delimiter(')content(ANTLR With C# Target)delimiter(')>operator(,) operator(()string<delimiter(')content(antlr-csharp)delimiter(')>operator(,) string<delimiter(')content(antlr-c#)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(*.G)delimiter(')>operator(,) string<delimiter(')content(*.g)delimiter(')>operator(\))operator(,) operator(()operator(\))operator(\))operator(,)
    string<delimiter(')content(AntlrCppLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.parsers)delimiter(')>operator(,) string<delimiter(')content(ANTLR With CPP Target)delimiter(')>operator(,) operator(()string<delimiter(')content(antlr-cpp)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(*.G)delimiter(')>operator(,) string<delimiter(')content(*.g)delimiter(')>operator(\))operator(,) operator(()operator(\))operator(\))operator(,)
    string<delimiter(')content(AntlrJavaLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.parsers)delimiter(')>operator(,) string<delimiter(')content(ANTLR With Java Target)delimiter(')>operator(,) operator(()string<delimiter(')content(antlr-java)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(*.G)delimiter(')>operator(,) string<delimiter(')content(*.g)delimiter(')>operator(\))operator(,) operator(()operator(\))operator(\))operator(,)
    string<delimiter(')content(AntlrLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.parsers)delimiter(')>operator(,) string<delimiter(')content(ANTLR)delimiter(')>operator(,) operator(()string<delimiter(')content(antlr)delimiter(')>operator(,)operator(\))operator(,) operator(()operator(\))operator(,) operator(()operator(\))operator(\))operator(,)
    string<delimiter(')content(AntlrObjectiveCLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.parsers)delimiter(')>operator(,) string<delimiter(')content(ANTLR With ObjectiveC Target)delimiter(')>operator(,) operator(()string<delimiter(')content(antlr-objc)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(*.G)delimiter(')>operator(,) string<delimiter(')content(*.g)delimiter(')>operator(\))operator(,) operator(()operator(\))operator(\))operator(,)
    string<delimiter(')content(AntlrPerlLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.parsers)delimiter(')>operator(,) string<delimiter(')content(ANTLR With Perl Target)delimiter(')>operator(,) operator(()string<delimiter(')content(antlr-perl)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(*.G)delimiter(')>operator(,) string<delimiter(')content(*.g)delimiter(')>operator(\))operator(,) operator(()operator(\))operator(\))operator(,)
    string<delimiter(')content(AntlrPythonLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.parsers)delimiter(')>operator(,) string<delimiter(')content(ANTLR With Python Target)delimiter(')>operator(,) operator(()string<delimiter(')content(antlr-python)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(*.G)delimiter(')>operator(,) string<delimiter(')content(*.g)delimiter(')>operator(\))operator(,) operator(()operator(\))operator(\))operator(,)
    string<delimiter(')content(AntlrRubyLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.parsers)delimiter(')>operator(,) string<delimiter(')content(ANTLR With Ruby Target)delimiter(')>operator(,) operator(()string<delimiter(')content(antlr-ruby)delimiter(')>operator(,) string<delimiter(')content(antlr-rb)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(*.G)delimiter(')>operator(,) string<delimiter(')content(*.g)delimiter(')>operator(\))operator(,) operator(()operator(\))operator(\))operator(,)
    string<delimiter(')content(ApacheConfLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.text)delimiter(')>operator(,) string<delimiter(')content(ApacheConf)delimiter(')>operator(,) operator(()string<delimiter(')content(apacheconf)delimiter(')>operator(,) string<delimiter(')content(aconf)delimiter(')>operator(,) string<delimiter(')content(apache)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(.htaccess)delimiter(')>operator(,) string<delimiter(')content(apache.conf)delimiter(')>operator(,) string<delimiter(')content(apache2.conf)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(text/x-apacheconf)delimiter(')>operator(,)operator(\))operator(\))operator(,)
    string<delimiter(')content(AppleScriptLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.other)delimiter(')>operator(,) string<delimiter(')content(AppleScript)delimiter(')>operator(,) operator(()string<delimiter(')content(applescript)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(*.applescript)delimiter(')>operator(,)operator(\))operator(,) operator(()operator(\))operator(\))operator(,)
    string<delimiter(')content(BBCodeLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.text)delimiter(')>operator(,) string<delimiter(')content(BBCode)delimiter(')>operator(,) operator(()string<delimiter(')content(bbcode)delimiter(')>operator(,)operator(\))operator(,) operator(()operator(\))operator(,) operator(()string<delimiter(')content(text/x-bbcode)delimiter(')>operator(,)operator(\))operator(\))operator(,)
    string<delimiter(')content(BaseMakefileLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.text)delimiter(')>operator(,) string<delimiter(')content(Makefile)delimiter(')>operator(,) operator(()string<delimiter(')content(basemake)delimiter(')>operator(,)operator(\))operator(,) operator(()operator(\))operator(,) operator(()operator(\))operator(\))operator(,)
    string<delimiter(')content(BashLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.other)delimiter(')>operator(,) string<delimiter(')content(Bash)delimiter(')>operator(,) operator(()string<delimiter(')content(bash)delimiter(')>operator(,) string<delimiter(')content(sh)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(*.sh)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(application/x-sh)delimiter(')>operator(,) string<delimiter(')content(application/x-shellscript)delimiter(')>operator(\))operator(\))operator(,)
    string<delimiter(')content(BashSessionLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.other)delimiter(')>operator(,) string<delimiter(')content(Bash Session)delimiter(')>operator(,) operator(()string<delimiter(')content(console)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(*.sh-session)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(application/x-shell-session)delimiter(')>operator(,)operator(\))operator(\))operator(,)
    string<delimiter(')content(BatchLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.other)delimiter(')>operator(,) string<delimiter(')content(Batchfile)delimiter(')>operator(,) operator(()string<delimiter(')content(bat)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(*.bat)delimiter(')>operator(,) string<delimiter(')content(*.cmd)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(application/x-dos-batch)delimiter(')>operator(,)operator(\))operator(\))operator(,)
    string<delimiter(')content(BefungeLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.other)delimiter(')>operator(,) string<delimiter(')content(Befunge)delimiter(')>operator(,) operator(()string<delimiter(')content(befunge)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(*.befunge)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(application/x-befunge)delimiter(')>operator(,)operator(\))operator(\))operator(,)
    string<delimiter(')content(BooLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.dotnet)delimiter(')>operator(,) string<delimiter(')content(Boo)delimiter(')>operator(,) operator(()string<delimiter(')content(boo)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(*.boo)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(text/x-boo)delimiter(')>operator(,)operator(\))operator(\))operator(,)
    string<delimiter(')content(BrainfuckLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.other)delimiter(')>operator(,) string<delimiter(')content(Brainfuck)delimiter(')>operator(,) operator(()string<delimiter(')content(brainfuck)delimiter(')>operator(,) string<delimiter(')content(bf)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(*.bf)delimiter(')>operator(,) string<delimiter(')content(*.b)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(application/x-brainfuck)delimiter(')>operator(,)operator(\))operator(\))operator(,)
    string<delimiter(')content(CLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.compiled)delimiter(')>operator(,) string<delimiter(')content(C)delimiter(')>operator(,) operator(()string<delimiter(')content(c)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(*.c)delimiter(')>operator(,) string<delimiter(')content(*.h)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(text/x-chdr)delimiter(')>operator(,) string<delimiter(')content(text/x-csrc)delimiter(')>operator(\))operator(\))operator(,)
    string<delimiter(')content(CObjdumpLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.asm)delimiter(')>operator(,) string<delimiter(')content(c-objdump)delimiter(')>operator(,) operator(()string<delimiter(')content(c-objdump)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(*.c-objdump)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(text/x-c-objdump)delimiter(')>operator(,)operator(\))operator(\))operator(,)
    string<delimiter(')content(CSharpAspxLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.dotnet)delimiter(')>operator(,) string<delimiter(')content(aspx-cs)delimiter(')>operator(,) operator(()string<delimiter(')content(aspx-cs)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(*.aspx)delimiter(')>operator(,) string<delimiter(')content(*.asax)delimiter(')>operator(,) string<delimiter(')content(*.ascx)delimiter(')>operator(,) string<delimiter(')content(*.ashx)delimiter(')>operator(,) string<delimiter(')content(*.asmx)delimiter(')>operator(,) string<delimiter(')content(*.axd)delimiter(')>operator(\))operator(,) operator(()operator(\))operator(\))operator(,)
    string<delimiter(')content(CSharpLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.dotnet)delimiter(')>operator(,) string<delimiter(')content(C#)delimiter(')>operator(,) operator(()string<delimiter(')content(csharp)delimiter(')>operator(,) string<delimiter(')content(c#)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(*.cs)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(text/x-csharp)delimiter(')>operator(,)operator(\))operator(\))operator(,)
    string<delimiter(')content(CheetahHtmlLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.templates)delimiter(')>operator(,) string<delimiter(')content(HTML+Cheetah)delimiter(')>operator(,) operator(()string<delimiter(')content(html+cheetah)delimiter(')>operator(,) string<delimiter(')content(html+spitfire)delimiter(')>operator(\))operator(,) operator(()operator(\))operator(,) operator(()string<delimiter(')content(text/html+cheetah)delimiter(')>operator(,) string<delimiter(')content(text/html+spitfire)delimiter(')>operator(\))operator(\))operator(,)
    string<delimiter(')content(CheetahJavascriptLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.templates)delimiter(')>operator(,) string<delimiter(')content(JavaScript+Cheetah)delimiter(')>operator(,) operator(()string<delimiter(')content(js+cheetah)delimiter(')>operator(,) string<delimiter(')content(javascript+cheetah)delimiter(')>operator(,) string<delimiter(')content(js+spitfire)delimiter(')>operator(,) string<delimiter(')content(javascript+spitfire)delimiter(')>operator(\))operator(,) operator(()operator(\))operator(,) operator(()string<delimiter(')content(application/x-javascript+cheetah)delimiter(')>operator(,) string<delimiter(')content(text/x-javascript+cheetah)delimiter(')>operator(,) string<delimiter(')content(text/javascript+cheetah)delimiter(')>operator(,) string<delimiter(')content(application/x-javascript+spitfire)delimiter(')>operator(,) string<delimiter(')content(text/x-javascript+spitfire)delimiter(')>operator(,) string<delimiter(')content(text/javascript+spitfire)delimiter(')>operator(\))operator(\))operator(,)
    string<delimiter(')content(CheetahLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.templates)delimiter(')>operator(,) string<delimiter(')content(Cheetah)delimiter(')>operator(,) operator(()string<delimiter(')content(cheetah)delimiter(')>operator(,) string<delimiter(')content(spitfire)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(*.tmpl)delimiter(')>operator(,) string<delimiter(')content(*.spt)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(application/x-cheetah)delimiter(')>operator(,) string<delimiter(')content(application/x-spitfire)delimiter(')>operator(\))operator(\))operator(,)
    string<delimiter(')content(CheetahXmlLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.templates)delimiter(')>operator(,) string<delimiter(')content(XML+Cheetah)delimiter(')>operator(,) operator(()string<delimiter(')content(xml+cheetah)delimiter(')>operator(,) string<delimiter(')content(xml+spitfire)delimiter(')>operator(\))operator(,) operator(()operator(\))operator(,) operator(()string<delimiter(')content(application/xml+cheetah)delimiter(')>operator(,) string<delimiter(')content(application/xml+spitfire)delimiter(')>operator(\))operator(\))operator(,)
    string<delimiter(')content(ClojureLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.agile)delimiter(')>operator(,) string<delimiter(')content(Clojure)delimiter(')>operator(,) operator(()string<delimiter(')content(clojure)delimiter(')>operator(,) string<delimiter(')content(clj)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(*.clj)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(text/x-clojure)delimiter(')>operator(,) string<delimiter(')content(application/x-clojure)delimiter(')>operator(\))operator(\))operator(,)
    string<delimiter(')content(CommonLispLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.functional)delimiter(')>operator(,) string<delimiter(')content(Common Lisp)delimiter(')>operator(,) operator(()string<delimiter(')content(common-lisp)delimiter(')>operator(,) string<delimiter(')content(cl)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(*.cl)delimiter(')>operator(,) string<delimiter(')content(*.lisp)delimiter(')>operator(,) string<delimiter(')content(*.el)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(text/x-common-lisp)delimiter(')>operator(,)operator(\))operator(\))operator(,)
    string<delimiter(')content(CppLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.compiled)delimiter(')>operator(,) string<delimiter(')content(C++)delimiter(')>operator(,) operator(()string<delimiter(')content(cpp)delimiter(')>operator(,) string<delimiter(')content(c++)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(*.cpp)delimiter(')>operator(,) string<delimiter(')content(*.hpp)delimiter(')>operator(,) string<delimiter(')content(*.c++)delimiter(')>operator(,) string<delimiter(')content(*.h++)delimiter(')>operator(,) string<delimiter(')content(*.cc)delimiter(')>operator(,) string<delimiter(')content(*.hh)delimiter(')>operator(,) string<delimiter(')content(*.cxx)delimiter(')>operator(,) string<delimiter(')content(*.hxx)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(text/x-c++hdr)delimiter(')>operator(,) string<delimiter(')content(text/x-c++src)delimiter(')>operator(\))operator(\))operator(,)
    string<delimiter(')content(CppObjdumpLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.asm)delimiter(')>operator(,) string<delimiter(')content(cpp-objdump)delimiter(')>operator(,) operator(()string<delimiter(')content(cpp-objdump)delimiter(')>operator(,) string<delimiter(')content(c++-objdumb)delimiter(')>operator(,) string<delimiter(')content(cxx-objdump)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(*.cpp-objdump)delimiter(')>operator(,) string<delimiter(')content(*.c++-objdump)delimiter(')>operator(,) string<delimiter(')content(*.cxx-objdump)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(text/x-cpp-objdump)delimiter(')>operator(,)operator(\))operator(\))operator(,)
    string<delimiter(')content(CssDjangoLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.templates)delimiter(')>operator(,) string<delimiter(')content(CSS+Django/Jinja)delimiter(')>operator(,) operator(()string<delimiter(')content(css+django)delimiter(')>operator(,) string<delimiter(')content(css+jinja)delimiter(')>operator(\))operator(,) operator(()operator(\))operator(,) operator(()string<delimiter(')content(text/css+django)delimiter(')>operator(,) string<delimiter(')content(text/css+jinja)delimiter(')>operator(\))operator(\))operator(,)
    string<delimiter(')content(CssErbLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.templates)delimiter(')>operator(,) string<delimiter(')content(CSS+Ruby)delimiter(')>operator(,) operator(()string<delimiter(')content(css+erb)delimiter(')>operator(,) string<delimiter(')content(css+ruby)delimiter(')>operator(\))operator(,) operator(()operator(\))operator(,) operator(()string<delimiter(')content(text/css+ruby)delimiter(')>operator(,)operator(\))operator(\))operator(,)
    string<delimiter(')content(CssGenshiLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.templates)delimiter(')>operator(,) string<delimiter(')content(CSS+Genshi Text)delimiter(')>operator(,) operator(()string<delimiter(')content(css+genshitext)delimiter(')>operator(,) string<delimiter(')content(css+genshi)delimiter(')>operator(\))operator(,) operator(()operator(\))operator(,) operator(()string<delimiter(')content(text/css+genshi)delimiter(')>operator(,)operator(\))operator(\))operator(,)
    string<delimiter(')content(CssLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.web)delimiter(')>operator(,) string<delimiter(')content(CSS)delimiter(')>operator(,) operator(()string<delimiter(')content(css)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(*.css)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(text/css)delimiter(')>operator(,)operator(\))operator(\))operator(,)
    string<delimiter(')content(CssPhpLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.templates)delimiter(')>operator(,) string<delimiter(')content(CSS+PHP)delimiter(')>operator(,) operator(()string<delimiter(')content(css+php)delimiter(')>operator(,)operator(\))operator(,) operator(()operator(\))operator(,) operator(()string<delimiter(')content(text/css+php)delimiter(')>operator(,)operator(\))operator(\))operator(,)
    string<delimiter(')content(CssSmartyLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.templates)delimiter(')>operator(,) string<delimiter(')content(CSS+Smarty)delimiter(')>operator(,) operator(()string<delimiter(')content(css+smarty)delimiter(')>operator(,)operator(\))operator(,) operator(()operator(\))operator(,) operator(()string<delimiter(')content(text/css+smarty)delimiter(')>operator(,)operator(\))operator(\))operator(,)
    string<delimiter(')content(CythonLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.compiled)delimiter(')>operator(,) string<delimiter(')content(Cython)delimiter(')>operator(,) operator(()string<delimiter(')content(cython)delimiter(')>operator(,) string<delimiter(')content(pyx)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(*.pyx)delimiter(')>operator(,) string<delimiter(')content(*.pxd)delimiter(')>operator(,) string<delimiter(')content(*.pxi)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(text/x-cython)delimiter(')>operator(,) string<delimiter(')content(application/x-cython)delimiter(')>operator(\))operator(\))operator(,)
    string<delimiter(')content(DLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.compiled)delimiter(')>operator(,) string<delimiter(')content(D)delimiter(')>operator(,) operator(()string<delimiter(')content(d)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(*.d)delimiter(')>operator(,) string<delimiter(')content(*.di)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(text/x-dsrc)delimiter(')>operator(,)operator(\))operator(\))operator(,)
    string<delimiter(')content(DObjdumpLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.asm)delimiter(')>operator(,) string<delimiter(')content(d-objdump)delimiter(')>operator(,) operator(()string<delimiter(')content(d-objdump)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(*.d-objdump)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(text/x-d-objdump)delimiter(')>operator(,)operator(\))operator(\))operator(,)
    string<delimiter(')content(DarcsPatchLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.text)delimiter(')>operator(,) string<delimiter(')content(Darcs Patch)delimiter(')>operator(,) operator(()string<delimiter(')content(dpatch)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(*.dpatch)delimiter(')>operator(,) string<delimiter(')content(*.darcspatch)delimiter(')>operator(\))operator(,) operator(()operator(\))operator(\))operator(,)
    string<delimiter(')content(DebianControlLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.text)delimiter(')>operator(,) string<delimiter(')content(Debian Control file)delimiter(')>operator(,) operator(()string<delimiter(')content(control)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(control)delimiter(')>operator(,)operator(\))operator(,) operator(()operator(\))operator(\))operator(,)
    string<delimiter(')content(DelphiLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.compiled)delimiter(')>operator(,) string<delimiter(')content(Delphi)delimiter(')>operator(,) operator(()string<delimiter(')content(delphi)delimiter(')>operator(,) string<delimiter(')content(pas)delimiter(')>operator(,) string<delimiter(')content(pascal)delimiter(')>operator(,) string<delimiter(')content(objectpascal)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(*.pas)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(text/x-pascal)delimiter(')>operator(,)operator(\))operator(\))operator(,)
    string<delimiter(')content(DiffLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.text)delimiter(')>operator(,) string<delimiter(')content(Diff)delimiter(')>operator(,) operator(()string<delimiter(')content(diff)delimiter(')>operator(,) string<delimiter(')content(udiff)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(*.diff)delimiter(')>operator(,) string<delimiter(')content(*.patch)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(text/x-diff)delimiter(')>operator(,) string<delimiter(')content(text/x-patch)delimiter(')>operator(\))operator(\))operator(,)
    string<delimiter(')content(DjangoLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.templates)delimiter(')>operator(,) string<delimiter(')content(Django/Jinja)delimiter(')>operator(,) operator(()string<delimiter(')content(django)delimiter(')>operator(,) string<delimiter(')content(jinja)delimiter(')>operator(\))operator(,) operator(()operator(\))operator(,) operator(()string<delimiter(')content(application/x-django-templating)delimiter(')>operator(,) string<delimiter(')content(application/x-jinja)delimiter(')>operator(\))operator(\))operator(,)
    string<delimiter(')content(DylanLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.compiled)delimiter(')>operator(,) string<delimiter(')content(Dylan)delimiter(')>operator(,) operator(()string<delimiter(')content(dylan)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(*.dylan)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(text/x-dylan)delimiter(')>operator(,)operator(\))operator(\))operator(,)
    string<delimiter(')content(ErbLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.templates)delimiter(')>operator(,) string<delimiter(')content(ERB)delimiter(')>operator(,) operator(()string<delimiter(')content(erb)delimiter(')>operator(,)operator(\))operator(,) operator(()operator(\))operator(,) operator(()string<delimiter(')content(application/x-ruby-templating)delimiter(')>operator(,)operator(\))operator(\))operator(,)
    string<delimiter(')content(ErlangLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.functional)delimiter(')>operator(,) string<delimiter(')content(Erlang)delimiter(')>operator(,) operator(()string<delimiter(')content(erlang)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(*.erl)delimiter(')>operator(,) string<delimiter(')content(*.hrl)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(text/x-erlang)delimiter(')>operator(,)operator(\))operator(\))operator(,)
    string<delimiter(')content(ErlangShellLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.functional)delimiter(')>operator(,) string<delimiter(')content(Erlang erl session)delimiter(')>operator(,) operator(()string<delimiter(')content(erl)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(*.erl-sh)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(text/x-erl-shellsession)delimiter(')>operator(,)operator(\))operator(\))operator(,)
    string<delimiter(')content(EvoqueHtmlLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.templates)delimiter(')>operator(,) string<delimiter(')content(HTML+Evoque)delimiter(')>operator(,) operator(()string<delimiter(')content(html+evoque)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(*.html)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(text/html+evoque)delimiter(')>operator(,)operator(\))operator(\))operator(,)
    string<delimiter(')content(EvoqueLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.templates)delimiter(')>operator(,) string<delimiter(')content(Evoque)delimiter(')>operator(,) operator(()string<delimiter(')content(evoque)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(*.evoque)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(application/x-evoque)delimiter(')>operator(,)operator(\))operator(\))operator(,)
    string<delimiter(')content(EvoqueXmlLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.templates)delimiter(')>operator(,) string<delimiter(')content(XML+Evoque)delimiter(')>operator(,) operator(()string<delimiter(')content(xml+evoque)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(*.xml)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(application/xml+evoque)delimiter(')>operator(,)operator(\))operator(\))operator(,)
    string<delimiter(')content(FortranLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.compiled)delimiter(')>operator(,) string<delimiter(')content(Fortran)delimiter(')>operator(,) operator(()string<delimiter(')content(fortran)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(*.f)delimiter(')>operator(,) string<delimiter(')content(*.f90)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(text/x-fortran)delimiter(')>operator(,)operator(\))operator(\))operator(,)
    string<delimiter(')content(GLShaderLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.compiled)delimiter(')>operator(,) string<delimiter(')content(GLSL)delimiter(')>operator(,) operator(()string<delimiter(')content(glsl)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(*.vert)delimiter(')>operator(,) string<delimiter(')content(*.frag)delimiter(')>operator(,) string<delimiter(')content(*.geo)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(text/x-glslsrc)delimiter(')>operator(,)operator(\))operator(\))operator(,)
    string<delimiter(')content(GasLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.asm)delimiter(')>operator(,) string<delimiter(')content(GAS)delimiter(')>operator(,) operator(()string<delimiter(')content(gas)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(*.s)delimiter(')>operator(,) string<delimiter(')content(*.S)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(text/x-gas)delimiter(')>operator(,)operator(\))operator(\))operator(,)
    string<delimiter(')content(GenshiLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.templates)delimiter(')>operator(,) string<delimiter(')content(Genshi)delimiter(')>operator(,) operator(()string<delimiter(')content(genshi)delimiter(')>operator(,) string<delimiter(')content(kid)delimiter(')>operator(,) string<delimiter(')content(xml+genshi)delimiter(')>operator(,) string<delimiter(')content(xml+kid)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(*.kid)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(application/x-genshi)delimiter(')>operator(,) string<delimiter(')content(application/x-kid)delimiter(')>operator(\))operator(\))operator(,)
    string<delimiter(')content(GenshiTextLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.templates)delimiter(')>operator(,) string<delimiter(')content(Genshi Text)delimiter(')>operator(,) operator(()string<delimiter(')content(genshitext)delimiter(')>operator(,)operator(\))operator(,) operator(()operator(\))operator(,) operator(()string<delimiter(')content(application/x-genshi-text)delimiter(')>operator(,) string<delimiter(')content(text/x-genshi)delimiter(')>operator(\))operator(\))operator(,)
    string<delimiter(')content(GettextLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.text)delimiter(')>operator(,) string<delimiter(')content(Gettext Catalog)delimiter(')>operator(,) operator(()string<delimiter(')content(pot)delimiter(')>operator(,) string<delimiter(')content(po)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(*.pot)delimiter(')>operator(,) string<delimiter(')content(*.po)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(application/x-gettext)delimiter(')>operator(,) string<delimiter(')content(text/x-gettext)delimiter(')>operator(,) string<delimiter(')content(text/gettext)delimiter(')>operator(\))operator(\))operator(,)
    string<delimiter(')content(GnuplotLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.other)delimiter(')>operator(,) string<delimiter(')content(Gnuplot)delimiter(')>operator(,) operator(()string<delimiter(')content(gnuplot)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(*.plot)delimiter(')>operator(,) string<delimiter(')content(*.plt)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(text/x-gnuplot)delimiter(')>operator(,)operator(\))operator(\))operator(,)
    string<delimiter(')content(GroffLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.text)delimiter(')>operator(,) string<delimiter(')content(Groff)delimiter(')>operator(,) operator(()string<delimiter(')content(groff)delimiter(')>operator(,) string<delimiter(')content(nroff)delimiter(')>operator(,) string<delimiter(')content(man)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(*.[1234567])delimiter(')>operator(,) string<delimiter(')content(*.man)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(application/x-troff)delimiter(')>operator(,) string<delimiter(')content(text/troff)delimiter(')>operator(\))operator(\))operator(,)
    string<delimiter(')content(HaskellLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.functional)delimiter(')>operator(,) string<delimiter(')content(Haskell)delimiter(')>operator(,) operator(()string<delimiter(')content(haskell)delimiter(')>operator(,) string<delimiter(')content(hs)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(*.hs)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(text/x-haskell)delimiter(')>operator(,)operator(\))operator(\))operator(,)
    string<delimiter(')content(HtmlDjangoLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.templates)delimiter(')>operator(,) string<delimiter(')content(HTML+Django/Jinja)delimiter(')>operator(,) operator(()string<delimiter(')content(html+django)delimiter(')>operator(,) string<delimiter(')content(html+jinja)delimiter(')>operator(\))operator(,) operator(()operator(\))operator(,) operator(()string<delimiter(')content(text/html+django)delimiter(')>operator(,) string<delimiter(')content(text/html+jinja)delimiter(')>operator(\))operator(\))operator(,)
    string<delimiter(')content(HtmlGenshiLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.templates)delimiter(')>operator(,) string<delimiter(')content(HTML+Genshi)delimiter(')>operator(,) operator(()string<delimiter(')content(html+genshi)delimiter(')>operator(,) string<delimiter(')content(html+kid)delimiter(')>operator(\))operator(,) operator(()operator(\))operator(,) operator(()string<delimiter(')content(text/html+genshi)delimiter(')>operator(,)operator(\))operator(\))operator(,)
    string<delimiter(')content(HtmlLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.web)delimiter(')>operator(,) string<delimiter(')content(HTML)delimiter(')>operator(,) operator(()string<delimiter(')content(html)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(*.html)delimiter(')>operator(,) string<delimiter(')content(*.htm)delimiter(')>operator(,) string<delimiter(')content(*.xhtml)delimiter(')>operator(,) string<delimiter(')content(*.xslt)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(text/html)delimiter(')>operator(,) string<delimiter(')content(application/xhtml+xml)delimiter(')>operator(\))operator(\))operator(,)
    string<delimiter(')content(HtmlPhpLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.templates)delimiter(')>operator(,) string<delimiter(')content(HTML+PHP)delimiter(')>operator(,) operator(()string<delimiter(')content(html+php)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(*.phtml)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(application/x-php)delimiter(')>operator(,) string<delimiter(')content(application/x-httpd-php)delimiter(')>operator(,) string<delimiter(')content(application/x-httpd-php3)delimiter(')>operator(,) string<delimiter(')content(application/x-httpd-php4)delimiter(')>operator(,) string<delimiter(')content(application/x-httpd-php5)delimiter(')>operator(\))operator(\))operator(,)
    string<delimiter(')content(HtmlSmartyLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.templates)delimiter(')>operator(,) string<delimiter(')content(HTML+Smarty)delimiter(')>operator(,) operator(()string<delimiter(')content(html+smarty)delimiter(')>operator(,)operator(\))operator(,) operator(()operator(\))operator(,) operator(()string<delimiter(')content(text/html+smarty)delimiter(')>operator(,)operator(\))operator(\))operator(,)
    string<delimiter(')content(IniLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.text)delimiter(')>operator(,) string<delimiter(')content(INI)delimiter(')>operator(,) operator(()string<delimiter(')content(ini)delimiter(')>operator(,) string<delimiter(')content(cfg)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(*.ini)delimiter(')>operator(,) string<delimiter(')content(*.cfg)delimiter(')>operator(,) string<delimiter(')content(*.properties)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(text/x-ini)delimiter(')>operator(,)operator(\))operator(\))operator(,)
    string<delimiter(')content(IoLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.agile)delimiter(')>operator(,) string<delimiter(')content(Io)delimiter(')>operator(,) operator(()string<delimiter(')content(io)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(*.io)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(text/x-iosrc)delimiter(')>operator(,)operator(\))operator(\))operator(,)
    string<delimiter(')content(IrcLogsLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.text)delimiter(')>operator(,) string<delimiter(')content(IRC logs)delimiter(')>operator(,) operator(()string<delimiter(')content(irc)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(*.weechatlog)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(text/x-irclog)delimiter(')>operator(,)operator(\))operator(\))operator(,)
    string<delimiter(')content(JavaLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.compiled)delimiter(')>operator(,) string<delimiter(')content(Java)delimiter(')>operator(,) operator(()string<delimiter(')content(java)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(*.java)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(text/x-java)delimiter(')>operator(,)operator(\))operator(\))operator(,)
    string<delimiter(')content(JavascriptDjangoLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.templates)delimiter(')>operator(,) string<delimiter(')content(JavaScript+Django/Jinja)delimiter(')>operator(,) operator(()string<delimiter(')content(js+django)delimiter(')>operator(,) string<delimiter(')content(javascript+django)delimiter(')>operator(,) string<delimiter(')content(js+jinja)delimiter(')>operator(,) string<delimiter(')content(javascript+jinja)delimiter(')>operator(\))operator(,) operator(()operator(\))operator(,) operator(()string<delimiter(')content(application/x-javascript+django)delimiter(')>operator(,) string<delimiter(')content(application/x-javascript+jinja)delimiter(')>operator(,) string<delimiter(')content(text/x-javascript+django)delimiter(')>operator(,) string<delimiter(')content(text/x-javascript+jinja)delimiter(')>operator(,) string<delimiter(')content(text/javascript+django)delimiter(')>operator(,) string<delimiter(')content(text/javascript+jinja)delimiter(')>operator(\))operator(\))operator(,)
    string<delimiter(')content(JavascriptErbLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.templates)delimiter(')>operator(,) string<delimiter(')content(JavaScript+Ruby)delimiter(')>operator(,) operator(()string<delimiter(')content(js+erb)delimiter(')>operator(,) string<delimiter(')content(javascript+erb)delimiter(')>operator(,) string<delimiter(')content(js+ruby)delimiter(')>operator(,) string<delimiter(')content(javascript+ruby)delimiter(')>operator(\))operator(,) operator(()operator(\))operator(,) operator(()string<delimiter(')content(application/x-javascript+ruby)delimiter(')>operator(,) string<delimiter(')content(text/x-javascript+ruby)delimiter(')>operator(,) string<delimiter(')content(text/javascript+ruby)delimiter(')>operator(\))operator(\))operator(,)
    string<delimiter(')content(JavascriptGenshiLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.templates)delimiter(')>operator(,) string<delimiter(')content(JavaScript+Genshi Text)delimiter(')>operator(,) operator(()string<delimiter(')content(js+genshitext)delimiter(')>operator(,) string<delimiter(')content(js+genshi)delimiter(')>operator(,) string<delimiter(')content(javascript+genshitext)delimiter(')>operator(,) string<delimiter(')content(javascript+genshi)delimiter(')>operator(\))operator(,) operator(()operator(\))operator(,) operator(()string<delimiter(')content(application/x-javascript+genshi)delimiter(')>operator(,) string<delimiter(')content(text/x-javascript+genshi)delimiter(')>operator(,) string<delimiter(')content(text/javascript+genshi)delimiter(')>operator(\))operator(\))operator(,)
    string<delimiter(')content(JavascriptLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.web)delimiter(')>operator(,) string<delimiter(')content(JavaScript)delimiter(')>operator(,) operator(()string<delimiter(')content(js)delimiter(')>operator(,) string<delimiter(')content(javascript)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(*.js)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(application/x-javascript)delimiter(')>operator(,) string<delimiter(')content(text/x-javascript)delimiter(')>operator(,) string<delimiter(')content(text/javascript)delimiter(')>operator(\))operator(\))operator(,)
    string<delimiter(')content(JavascriptPhpLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.templates)delimiter(')>operator(,) string<delimiter(')content(JavaScript+PHP)delimiter(')>operator(,) operator(()string<delimiter(')content(js+php)delimiter(')>operator(,) string<delimiter(')content(javascript+php)delimiter(')>operator(\))operator(,) operator(()operator(\))operator(,) operator(()string<delimiter(')content(application/x-javascript+php)delimiter(')>operator(,) string<delimiter(')content(text/x-javascript+php)delimiter(')>operator(,) string<delimiter(')content(text/javascript+php)delimiter(')>operator(\))operator(\))operator(,)
    string<delimiter(')content(JavascriptSmartyLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.templates)delimiter(')>operator(,) string<delimiter(')content(JavaScript+Smarty)delimiter(')>operator(,) operator(()string<delimiter(')content(js+smarty)delimiter(')>operator(,) string<delimiter(')content(javascript+smarty)delimiter(')>operator(\))operator(,) operator(()operator(\))operator(,) operator(()string<delimiter(')content(application/x-javascript+smarty)delimiter(')>operator(,) string<delimiter(')content(text/x-javascript+smarty)delimiter(')>operator(,) string<delimiter(')content(text/javascript+smarty)delimiter(')>operator(\))operator(\))operator(,)
    string<delimiter(')content(JspLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.templates)delimiter(')>operator(,) string<delimiter(')content(Java Server Page)delimiter(')>operator(,) operator(()string<delimiter(')content(jsp)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(*.jsp)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(application/x-jsp)delimiter(')>operator(,)operator(\))operator(\))operator(,)
    string<delimiter(')content(LighttpdConfLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.text)delimiter(')>operator(,) string<delimiter(')content(Lighttpd configuration file)delimiter(')>operator(,) operator(()string<delimiter(')content(lighty)delimiter(')>operator(,) string<delimiter(')content(lighttpd)delimiter(')>operator(\))operator(,) operator(()operator(\))operator(,) operator(()string<delimiter(')content(text/x-lighttpd-conf)delimiter(')>operator(,)operator(\))operator(\))operator(,)
    string<delimiter(')content(LiterateHaskellLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.functional)delimiter(')>operator(,) string<delimiter(')content(Literate Haskell)delimiter(')>operator(,) operator(()string<delimiter(')content(lhs)delimiter(')>operator(,) string<delimiter(')content(literate-haskell)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(*.lhs)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(text/x-literate-haskell)delimiter(')>operator(,)operator(\))operator(\))operator(,)
    string<delimiter(')content(LlvmLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.asm)delimiter(')>operator(,) string<delimiter(')content(LLVM)delimiter(')>operator(,) operator(()string<delimiter(')content(llvm)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(*.ll)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(text/x-llvm)delimiter(')>operator(,)operator(\))operator(\))operator(,)
    string<delimiter(')content(LogtalkLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.other)delimiter(')>operator(,) string<delimiter(')content(Logtalk)delimiter(')>operator(,) operator(()string<delimiter(')content(logtalk)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(*.lgt)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(text/x-logtalk)delimiter(')>operator(,)operator(\))operator(\))operator(,)
    string<delimiter(')content(LuaLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.agile)delimiter(')>operator(,) string<delimiter(')content(Lua)delimiter(')>operator(,) operator(()string<delimiter(')content(lua)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(*.lua)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(text/x-lua)delimiter(')>operator(,) string<delimiter(')content(application/x-lua)delimiter(')>operator(\))operator(\))operator(,)
    string<delimiter(')content(MOOCodeLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.other)delimiter(')>operator(,) string<delimiter(')content(MOOCode)delimiter(')>operator(,) operator(()string<delimiter(')content(moocode)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(*.moo)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(text/x-moocode)delimiter(')>operator(,)operator(\))operator(\))operator(,)
    string<delimiter(')content(MakefileLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.text)delimiter(')>operator(,) string<delimiter(')content(Makefile)delimiter(')>operator(,) operator(()string<delimiter(')content(make)delimiter(')>operator(,) string<delimiter(')content(makefile)delimiter(')>operator(,) string<delimiter(')content(mf)delimiter(')>operator(,) string<delimiter(')content(bsdmake)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(*.mak)delimiter(')>operator(,) string<delimiter(')content(Makefile)delimiter(')>operator(,) string<delimiter(')content(makefile)delimiter(')>operator(,) string<delimiter(')content(Makefile.*)delimiter(')>operator(,) string<delimiter(')content(GNUmakefile)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(text/x-makefile)delimiter(')>operator(,)operator(\))operator(\))operator(,)
    string<delimiter(')content(MakoCssLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.templates)delimiter(')>operator(,) string<delimiter(')content(CSS+Mako)delimiter(')>operator(,) operator(()string<delimiter(')content(css+mako)delimiter(')>operator(,)operator(\))operator(,) operator(()operator(\))operator(,) operator(()string<delimiter(')content(text/css+mako)delimiter(')>operator(,)operator(\))operator(\))operator(,)
    string<delimiter(')content(MakoHtmlLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.templates)delimiter(')>operator(,) string<delimiter(')content(HTML+Mako)delimiter(')>operator(,) operator(()string<delimiter(')content(html+mako)delimiter(')>operator(,)operator(\))operator(,) operator(()operator(\))operator(,) operator(()string<delimiter(')content(text/html+mako)delimiter(')>operator(,)operator(\))operator(\))operator(,)
    string<delimiter(')content(MakoJavascriptLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.templates)delimiter(')>operator(,) string<delimiter(')content(JavaScript+Mako)delimiter(')>operator(,) operator(()string<delimiter(')content(js+mako)delimiter(')>operator(,) string<delimiter(')content(javascript+mako)delimiter(')>operator(\))operator(,) operator(()operator(\))operator(,) operator(()string<delimiter(')content(application/x-javascript+mako)delimiter(')>operator(,) string<delimiter(')content(text/x-javascript+mako)delimiter(')>operator(,) string<delimiter(')content(text/javascript+mako)delimiter(')>operator(\))operator(\))operator(,)
    string<delimiter(')content(MakoLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.templates)delimiter(')>operator(,) string<delimiter(')content(Mako)delimiter(')>operator(,) operator(()string<delimiter(')content(mako)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(*.mao)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(application/x-mako)delimiter(')>operator(,)operator(\))operator(\))operator(,)
    string<delimiter(')content(MakoXmlLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.templates)delimiter(')>operator(,) string<delimiter(')content(XML+Mako)delimiter(')>operator(,) operator(()string<delimiter(')content(xml+mako)delimiter(')>operator(,)operator(\))operator(,) operator(()operator(\))operator(,) operator(()string<delimiter(')content(application/xml+mako)delimiter(')>operator(,)operator(\))operator(\))operator(,)
    string<delimiter(')content(MatlabLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.math)delimiter(')>operator(,) string<delimiter(')content(Matlab)delimiter(')>operator(,) operator(()string<delimiter(')content(matlab)delimiter(')>operator(,) string<delimiter(')content(octave)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(*.m)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(text/matlab)delimiter(')>operator(,)operator(\))operator(\))operator(,)
    string<delimiter(')content(MatlabSessionLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.math)delimiter(')>operator(,) string<delimiter(')content(Matlab session)delimiter(')>operator(,) operator(()string<delimiter(')content(matlabsession)delimiter(')>operator(,)operator(\))operator(,) operator(()operator(\))operator(,) operator(()operator(\))operator(\))operator(,)
    string<delimiter(')content(MiniDLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.agile)delimiter(')>operator(,) string<delimiter(')content(MiniD)delimiter(')>operator(,) operator(()string<delimiter(')content(minid)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(*.md)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(text/x-minidsrc)delimiter(')>operator(,)operator(\))operator(\))operator(,)
    string<delimiter(')content(ModelicaLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.other)delimiter(')>operator(,) string<delimiter(')content(Modelica)delimiter(')>operator(,) operator(()string<delimiter(')content(modelica)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(*.mo)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(text/x-modelica)delimiter(')>operator(,)operator(\))operator(\))operator(,)
    string<delimiter(')content(MoinWikiLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.text)delimiter(')>operator(,) string<delimiter(')content(MoinMoin/Trac Wiki markup)delimiter(')>operator(,) operator(()string<delimiter(')content(trac-wiki)delimiter(')>operator(,) string<delimiter(')content(moin)delimiter(')>operator(\))operator(,) operator(()operator(\))operator(,) operator(()string<delimiter(')content(text/x-trac-wiki)delimiter(')>operator(,)operator(\))operator(\))operator(,)
    string<delimiter(')content(MuPADLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.math)delimiter(')>operator(,) string<delimiter(')content(MuPAD)delimiter(')>operator(,) operator(()string<delimiter(')content(mupad)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(*.mu)delimiter(')>operator(,)operator(\))operator(,) operator(()operator(\))operator(\))operator(,)
    string<delimiter(')content(MxmlLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.web)delimiter(')>operator(,) string<delimiter(')content(MXML)delimiter(')>operator(,) operator(()string<delimiter(')content(mxml)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(*.mxml)delimiter(')>operator(,)operator(\))operator(,) operator(()operator(\))operator(\))operator(,)
    string<delimiter(')content(MySqlLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.other)delimiter(')>operator(,) string<delimiter(')content(MySQL)delimiter(')>operator(,) operator(()string<delimiter(')content(mysql)delimiter(')>operator(,)operator(\))operator(,) operator(()operator(\))operator(,) operator(()string<delimiter(')content(text/x-mysql)delimiter(')>operator(,)operator(\))operator(\))operator(,)
    string<delimiter(')content(MyghtyCssLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.templates)delimiter(')>operator(,) string<delimiter(')content(CSS+Myghty)delimiter(')>operator(,) operator(()string<delimiter(')content(css+myghty)delimiter(')>operator(,)operator(\))operator(,) operator(()operator(\))operator(,) operator(()string<delimiter(')content(text/css+myghty)delimiter(')>operator(,)operator(\))operator(\))operator(,)
    string<delimiter(')content(MyghtyHtmlLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.templates)delimiter(')>operator(,) string<delimiter(')content(HTML+Myghty)delimiter(')>operator(,) operator(()string<delimiter(')content(html+myghty)delimiter(')>operator(,)operator(\))operator(,) operator(()operator(\))operator(,) operator(()string<delimiter(')content(text/html+myghty)delimiter(')>operator(,)operator(\))operator(\))operator(,)
    string<delimiter(')content(MyghtyJavascriptLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.templates)delimiter(')>operator(,) string<delimiter(')content(JavaScript+Myghty)delimiter(')>operator(,) operator(()string<delimiter(')content(js+myghty)delimiter(')>operator(,) string<delimiter(')content(javascript+myghty)delimiter(')>operator(\))operator(,) operator(()operator(\))operator(,) operator(()string<delimiter(')content(application/x-javascript+myghty)delimiter(')>operator(,) string<delimiter(')content(text/x-javascript+myghty)delimiter(')>operator(,) string<delimiter(')content(text/javascript+mygthy)delimiter(')>operator(\))operator(\))operator(,)
    string<delimiter(')content(MyghtyLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.templates)delimiter(')>operator(,) string<delimiter(')content(Myghty)delimiter(')>operator(,) operator(()string<delimiter(')content(myghty)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(*.myt)delimiter(')>operator(,) string<delimiter(')content(autodelegate)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(application/x-myghty)delimiter(')>operator(,)operator(\))operator(\))operator(,)
    string<delimiter(')content(MyghtyXmlLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.templates)delimiter(')>operator(,) string<delimiter(')content(XML+Myghty)delimiter(')>operator(,) operator(()string<delimiter(')content(xml+myghty)delimiter(')>operator(,)operator(\))operator(,) operator(()operator(\))operator(,) operator(()string<delimiter(')content(application/xml+myghty)delimiter(')>operator(,)operator(\))operator(\))operator(,)
    string<delimiter(')content(NasmLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.asm)delimiter(')>operator(,) string<delimiter(')content(NASM)delimiter(')>operator(,) operator(()string<delimiter(')content(nasm)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(*.asm)delimiter(')>operator(,) string<delimiter(')content(*.ASM)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(text/x-nasm)delimiter(')>operator(,)operator(\))operator(\))operator(,)
    string<delimiter(')content(NginxConfLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.text)delimiter(')>operator(,) string<delimiter(')content(Nginx configuration file)delimiter(')>operator(,) operator(()string<delimiter(')content(nginx)delimiter(')>operator(,)operator(\))operator(,) operator(()operator(\))operator(,) operator(()string<delimiter(')content(text/x-nginx-conf)delimiter(')>operator(,)operator(\))operator(\))operator(,)
    string<delimiter(')content(NumPyLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.math)delimiter(')>operator(,) string<delimiter(')content(NumPy)delimiter(')>operator(,) operator(()string<delimiter(')content(numpy)delimiter(')>operator(,)operator(\))operator(,) operator(()operator(\))operator(,) operator(()operator(\))operator(\))operator(,)
    string<delimiter(')content(ObjdumpLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.asm)delimiter(')>operator(,) string<delimiter(')content(objdump)delimiter(')>operator(,) operator(()string<delimiter(')content(objdump)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(*.objdump)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(text/x-objdump)delimiter(')>operator(,)operator(\))operator(\))operator(,)
    string<delimiter(')content(ObjectiveCLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.compiled)delimiter(')>operator(,) string<delimiter(')content(Objective-C)delimiter(')>operator(,) operator(()string<delimiter(')content(objective-c)delimiter(')>operator(,) string<delimiter(')content(objectivec)delimiter(')>operator(,) string<delimiter(')content(obj-c)delimiter(')>operator(,) string<delimiter(')content(objc)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(*.m)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(text/x-objective-c)delimiter(')>operator(,)operator(\))operator(\))operator(,)
    string<delimiter(')content(OcamlLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.compiled)delimiter(')>operator(,) string<delimiter(')content(OCaml)delimiter(')>operator(,) operator(()string<delimiter(')content(ocaml)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(*.ml)delimiter(')>operator(,) string<delimiter(')content(*.mli)delimiter(')>operator(,) string<delimiter(')content(*.mll)delimiter(')>operator(,) string<delimiter(')content(*.mly)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(text/x-ocaml)delimiter(')>operator(,)operator(\))operator(\))operator(,)
    string<delimiter(')content(OcamlLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.functional)delimiter(')>operator(,) string<delimiter(')content(OCaml)delimiter(')>operator(,) operator(()string<delimiter(')content(ocaml)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(*.ml)delimiter(')>operator(,) string<delimiter(')content(*.mli)delimiter(')>operator(,) string<delimiter(')content(*.mll)delimiter(')>operator(,) string<delimiter(')content(*.mly)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(text/x-ocaml)delimiter(')>operator(,)operator(\))operator(\))operator(,)
    string<delimiter(')content(PerlLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.agile)delimiter(')>operator(,) string<delimiter(')content(Perl)delimiter(')>operator(,) operator(()string<delimiter(')content(perl)delimiter(')>operator(,) string<delimiter(')content(pl)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(*.pl)delimiter(')>operator(,) string<delimiter(')content(*.pm)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(text/x-perl)delimiter(')>operator(,) string<delimiter(')content(application/x-perl)delimiter(')>operator(\))operator(\))operator(,)
    string<delimiter(')content(PhpLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.web)delimiter(')>operator(,) string<delimiter(')content(PHP)delimiter(')>operator(,) operator(()string<delimiter(')content(php)delimiter(')>operator(,) string<delimiter(')content(php3)delimiter(')>operator(,) string<delimiter(')content(php4)delimiter(')>operator(,) string<delimiter(')content(php5)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(*.php)delimiter(')>operator(,) string<delimiter(')content(*.php[345])delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(text/x-php)delimiter(')>operator(,)operator(\))operator(\))operator(,)
    string<delimiter(')content(PovrayLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.other)delimiter(')>operator(,) string<delimiter(')content(POVRay)delimiter(')>operator(,) operator(()string<delimiter(')content(pov)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(*.pov)delimiter(')>operator(,) string<delimiter(')content(*.inc)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(text/x-povray)delimiter(')>operator(,)operator(\))operator(\))operator(,)
    string<delimiter(')content(PrologLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.compiled)delimiter(')>operator(,) string<delimiter(')content(Prolog)delimiter(')>operator(,) operator(()string<delimiter(')content(prolog)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(*.prolog)delimiter(')>operator(,) string<delimiter(')content(*.pro)delimiter(')>operator(,) string<delimiter(')content(*.pl)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(text/x-prolog)delimiter(')>operator(,)operator(\))operator(\))operator(,)
    string<delimiter(')content(Python3Lexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.agile)delimiter(')>operator(,) string<delimiter(')content(Python 3)delimiter(')>operator(,) operator(()string<delimiter(')content(python3)delimiter(')>operator(,) string<delimiter(')content(py3)delimiter(')>operator(\))operator(,) operator(()operator(\))operator(,) operator(()string<delimiter(')content(text/x-python3)delimiter(')>operator(,) string<delimiter(')content(application/x-python3)delimiter(')>operator(\))operator(\))operator(,)
    string<delimiter(')content(Python3TracebackLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.agile)delimiter(')>operator(,) string<delimiter(')content(Python 3.0 Traceback)delimiter(')>operator(,) operator(()string<delimiter(')content(py3tb)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(*.py3tb)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(text/x-python3-traceback)delimiter(')>operator(,)operator(\))operator(\))operator(,)
    string<delimiter(')content(PythonConsoleLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.agile)delimiter(')>operator(,) string<delimiter(')content(Python console session)delimiter(')>operator(,) operator(()string<delimiter(')content(pycon)delimiter(')>operator(,)operator(\))operator(,) operator(()operator(\))operator(,) operator(()string<delimiter(')content(text/x-python-doctest)delimiter(')>operator(,)operator(\))operator(\))operator(,)
    string<delimiter(')content(PythonLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.agile)delimiter(')>operator(,) string<delimiter(')content(Python)delimiter(')>operator(,) operator(()string<delimiter(')content(python)delimiter(')>operator(,) string<delimiter(')content(py)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(*.py)delimiter(')>operator(,) string<delimiter(')content(*.pyw)delimiter(')>operator(,) string<delimiter(')content(*.sc)delimiter(')>operator(,) string<delimiter(')content(SConstruct)delimiter(')>operator(,) string<delimiter(')content(SConscript)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(text/x-python)delimiter(')>operator(,) string<delimiter(')content(application/x-python)delimiter(')>operator(\))operator(\))operator(,)
    string<delimiter(')content(PythonTracebackLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.agile)delimiter(')>operator(,) string<delimiter(')content(Python Traceback)delimiter(')>operator(,) operator(()string<delimiter(')content(pytb)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(*.pytb)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(text/x-python-traceback)delimiter(')>operator(,)operator(\))operator(\))operator(,)
    string<delimiter(')content(RagelCLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.parsers)delimiter(')>operator(,) string<delimiter(')content(Ragel in C Host)delimiter(')>operator(,) operator(()string<delimiter(')content(ragel-c)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(*.rl)delimiter(')>operator(,)operator(\))operator(,) operator(()operator(\))operator(\))operator(,)
    string<delimiter(')content(RagelCppLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.parsers)delimiter(')>operator(,) string<delimiter(')content(Ragel in CPP Host)delimiter(')>operator(,) operator(()string<delimiter(')content(ragel-cpp)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(*.rl)delimiter(')>operator(,)operator(\))operator(,) operator(()operator(\))operator(\))operator(,)
    string<delimiter(')content(RagelDLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.parsers)delimiter(')>operator(,) string<delimiter(')content(Ragel in D Host)delimiter(')>operator(,) operator(()string<delimiter(')content(ragel-d)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(*.rl)delimiter(')>operator(,)operator(\))operator(,) operator(()operator(\))operator(\))operator(,)
    string<delimiter(')content(RagelEmbeddedLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.parsers)delimiter(')>operator(,) string<delimiter(')content(Embedded Ragel)delimiter(')>operator(,) operator(()string<delimiter(')content(ragel-em)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(*.rl)delimiter(')>operator(,)operator(\))operator(,) operator(()operator(\))operator(\))operator(,)
    string<delimiter(')content(RagelJavaLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.parsers)delimiter(')>operator(,) string<delimiter(')content(Ragel in Java Host)delimiter(')>operator(,) operator(()string<delimiter(')content(ragel-java)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(*.rl)delimiter(')>operator(,)operator(\))operator(,) operator(()operator(\))operator(\))operator(,)
    string<delimiter(')content(RagelLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.parsers)delimiter(')>operator(,) string<delimiter(')content(Ragel)delimiter(')>operator(,) operator(()string<delimiter(')content(ragel)delimiter(')>operator(,)operator(\))operator(,) operator(()operator(\))operator(,) operator(()operator(\))operator(\))operator(,)
    string<delimiter(')content(RagelObjectiveCLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.parsers)delimiter(')>operator(,) string<delimiter(')content(Ragel in Objective C Host)delimiter(')>operator(,) operator(()string<delimiter(')content(ragel-objc)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(*.rl)delimiter(')>operator(,)operator(\))operator(,) operator(()operator(\))operator(\))operator(,)
    string<delimiter(')content(RagelRubyLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.parsers)delimiter(')>operator(,) string<delimiter(')content(Ragel in Ruby Host)delimiter(')>operator(,) operator(()string<delimiter(')content(ragel-ruby)delimiter(')>operator(,) string<delimiter(')content(ragel-rb)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(*.rl)delimiter(')>operator(,)operator(\))operator(,) operator(()operator(\))operator(\))operator(,)
    string<delimiter(')content(RawTokenLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.special)delimiter(')>operator(,) string<delimiter(')content(Raw token data)delimiter(')>operator(,) operator(()string<delimiter(')content(raw)delimiter(')>operator(,)operator(\))operator(,) operator(()operator(\))operator(,) operator(()string<delimiter(')content(application/x-pygments-tokens)delimiter(')>operator(,)operator(\))operator(\))operator(,)
    string<delimiter(')content(RebolLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.other)delimiter(')>operator(,) string<delimiter(')content(REBOL)delimiter(')>operator(,) operator(()string<delimiter(')content(rebol)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(*.r)delimiter(')>operator(,) string<delimiter(')content(*.r3)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(text/x-rebol)delimiter(')>operator(,)operator(\))operator(\))operator(,)
    string<delimiter(')content(RedcodeLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.other)delimiter(')>operator(,) string<delimiter(')content(Redcode)delimiter(')>operator(,) operator(()string<delimiter(')content(redcode)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(*.cw)delimiter(')>operator(,)operator(\))operator(,) operator(()operator(\))operator(\))operator(,)
    string<delimiter(')content(RhtmlLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.templates)delimiter(')>operator(,) string<delimiter(')content(RHTML)delimiter(')>operator(,) operator(()string<delimiter(')content(rhtml)delimiter(')>operator(,) string<delimiter(')content(html+erb)delimiter(')>operator(,) string<delimiter(')content(html+ruby)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(*.rhtml)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(text/html+ruby)delimiter(')>operator(,)operator(\))operator(\))operator(,)
    string<delimiter(')content(RstLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.text)delimiter(')>operator(,) string<delimiter(')content(reStructuredText)delimiter(')>operator(,) operator(()string<delimiter(')content(rst)delimiter(')>operator(,) string<delimiter(')content(rest)delimiter(')>operator(,) string<delimiter(')content(restructuredtext)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(*.rst)delimiter(')>operator(,) string<delimiter(')content(*.rest)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(text/x-rst)delimiter(')>operator(,) string<delimiter(')content(text/prs.fallenstein.rst)delimiter(')>operator(\))operator(\))operator(,)
    string<delimiter(')content(RubyConsoleLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.agile)delimiter(')>operator(,) string<delimiter(')content(Ruby irb session)delimiter(')>operator(,) operator(()string<delimiter(')content(rbcon)delimiter(')>operator(,) string<delimiter(')content(irb)delimiter(')>operator(\))operator(,) operator(()operator(\))operator(,) operator(()string<delimiter(')content(text/x-ruby-shellsession)delimiter(')>operator(,)operator(\))operator(\))operator(,)
    string<delimiter(')content(RubyLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.agile)delimiter(')>operator(,) string<delimiter(')content(Ruby)delimiter(')>operator(,) operator(()string<delimiter(')content(rb)delimiter(')>operator(,) string<delimiter(')content(ruby)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(*.rb)delimiter(')>operator(,) string<delimiter(')content(*.rbw)delimiter(')>operator(,) string<delimiter(')content(Rakefile)delimiter(')>operator(,) string<delimiter(')content(*.rake)delimiter(')>operator(,) string<delimiter(')content(*.gemspec)delimiter(')>operator(,) string<delimiter(')content(*.rbx)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(text/x-ruby)delimiter(')>operator(,) string<delimiter(')content(application/x-ruby)delimiter(')>operator(\))operator(\))operator(,)
    string<delimiter(')content(SLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.math)delimiter(')>operator(,) string<delimiter(')content(S)delimiter(')>operator(,) operator(()string<delimiter(')content(splus)delimiter(')>operator(,) string<delimiter(')content(s)delimiter(')>operator(,) string<delimiter(')content(r)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(*.S)delimiter(')>operator(,) string<delimiter(')content(*.R)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(text/S-plus)delimiter(')>operator(,) string<delimiter(')content(text/S)delimiter(')>operator(,) string<delimiter(')content(text/R)delimiter(')>operator(\))operator(\))operator(,)
    string<delimiter(')content(ScalaLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.compiled)delimiter(')>operator(,) string<delimiter(')content(Scala)delimiter(')>operator(,) operator(()string<delimiter(')content(scala)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(*.scala)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(text/x-scala)delimiter(')>operator(,)operator(\))operator(\))operator(,)
    string<delimiter(')content(SchemeLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.functional)delimiter(')>operator(,) string<delimiter(')content(Scheme)delimiter(')>operator(,) operator(()string<delimiter(')content(scheme)delimiter(')>operator(,) string<delimiter(')content(scm)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(*.scm)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(text/x-scheme)delimiter(')>operator(,) string<delimiter(')content(application/x-scheme)delimiter(')>operator(\))operator(\))operator(,)
    string<delimiter(')content(SmalltalkLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.other)delimiter(')>operator(,) string<delimiter(')content(Smalltalk)delimiter(')>operator(,) operator(()string<delimiter(')content(smalltalk)delimiter(')>operator(,) string<delimiter(')content(squeak)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(*.st)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(text/x-smalltalk)delimiter(')>operator(,)operator(\))operator(\))operator(,)
    string<delimiter(')content(SmartyLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.templates)delimiter(')>operator(,) string<delimiter(')content(Smarty)delimiter(')>operator(,) operator(()string<delimiter(')content(smarty)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(*.tpl)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(application/x-smarty)delimiter(')>operator(,)operator(\))operator(\))operator(,)
    string<delimiter(')content(SourcesListLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.text)delimiter(')>operator(,) string<delimiter(')content(Debian Sourcelist)delimiter(')>operator(,) operator(()string<delimiter(')content(sourceslist)delimiter(')>operator(,) string<delimiter(')content(sources.list)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(sources.list)delimiter(')>operator(,)operator(\))operator(,) operator(()operator(\))operator(\))operator(,)
    string<delimiter(')content(SqlLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.other)delimiter(')>operator(,) string<delimiter(')content(SQL)delimiter(')>operator(,) operator(()string<delimiter(')content(sql)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(*.sql)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(text/x-sql)delimiter(')>operator(,)operator(\))operator(\))operator(,)
    string<delimiter(')content(SqliteConsoleLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.other)delimiter(')>operator(,) string<delimiter(')content(sqlite3con)delimiter(')>operator(,) operator(()string<delimiter(')content(sqlite3)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(*.sqlite3-console)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(text/x-sqlite3-console)delimiter(')>operator(,)operator(\))operator(\))operator(,)
    string<delimiter(')content(SquidConfLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.text)delimiter(')>operator(,) string<delimiter(')content(SquidConf)delimiter(')>operator(,) operator(()string<delimiter(')content(squidconf)delimiter(')>operator(,) string<delimiter(')content(squid.conf)delimiter(')>operator(,) string<delimiter(')content(squid)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(squid.conf)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(text/x-squidconf)delimiter(')>operator(,)operator(\))operator(\))operator(,)
    string<delimiter(')content(TclLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.agile)delimiter(')>operator(,) string<delimiter(')content(Tcl)delimiter(')>operator(,) operator(()string<delimiter(')content(tcl)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(*.tcl)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(text/x-tcl)delimiter(')>operator(,) string<delimiter(')content(text/x-script.tcl)delimiter(')>operator(,) string<delimiter(')content(application/x-tcl)delimiter(')>operator(\))operator(\))operator(,)
    string<delimiter(')content(TcshLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.other)delimiter(')>operator(,) string<delimiter(')content(Tcsh)delimiter(')>operator(,) operator(()string<delimiter(')content(tcsh)delimiter(')>operator(,) string<delimiter(')content(csh)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(*.tcsh)delimiter(')>operator(,) string<delimiter(')content(*.csh)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(application/x-csh)delimiter(')>operator(,)operator(\))operator(\))operator(,)
    string<delimiter(')content(TexLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.text)delimiter(')>operator(,) string<delimiter(')content(TeX)delimiter(')>operator(,) operator(()string<delimiter(')content(tex)delimiter(')>operator(,) string<delimiter(')content(latex)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(*.tex)delimiter(')>operator(,) string<delimiter(')content(*.aux)delimiter(')>operator(,) string<delimiter(')content(*.toc)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(text/x-tex)delimiter(')>operator(,) string<delimiter(')content(text/x-latex)delimiter(')>operator(\))operator(\))operator(,)
    string<delimiter(')content(TextLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.special)delimiter(')>operator(,) string<delimiter(')content(Text only)delimiter(')>operator(,) operator(()string<delimiter(')content(text)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(*.txt)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(text/plain)delimiter(')>operator(,)operator(\))operator(\))operator(,)
    string<delimiter(')content(VbNetAspxLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.dotnet)delimiter(')>operator(,) string<delimiter(')content(aspx-vb)delimiter(')>operator(,) operator(()string<delimiter(')content(aspx-vb)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(*.aspx)delimiter(')>operator(,) string<delimiter(')content(*.asax)delimiter(')>operator(,) string<delimiter(')content(*.ascx)delimiter(')>operator(,) string<delimiter(')content(*.ashx)delimiter(')>operator(,) string<delimiter(')content(*.asmx)delimiter(')>operator(,) string<delimiter(')content(*.axd)delimiter(')>operator(\))operator(,) operator(()operator(\))operator(\))operator(,)
    string<delimiter(')content(VbNetLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.dotnet)delimiter(')>operator(,) string<delimiter(')content(VB.net)delimiter(')>operator(,) operator(()string<delimiter(')content(vb.net)delimiter(')>operator(,) string<delimiter(')content(vbnet)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(*.vb)delimiter(')>operator(,) string<delimiter(')content(*.bas)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(text/x-vbnet)delimiter(')>operator(,) string<delimiter(')content(text/x-vba)delimiter(')>operator(\))operator(\))operator(,)
    string<delimiter(')content(VimLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.text)delimiter(')>operator(,) string<delimiter(')content(VimL)delimiter(')>operator(,) operator(()string<delimiter(')content(vim)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(*.vim)delimiter(')>operator(,) string<delimiter(')content(.vimrc)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(text/x-vim)delimiter(')>operator(,)operator(\))operator(\))operator(,)
    string<delimiter(')content(XmlDjangoLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.templates)delimiter(')>operator(,) string<delimiter(')content(XML+Django/Jinja)delimiter(')>operator(,) operator(()string<delimiter(')content(xml+django)delimiter(')>operator(,) string<delimiter(')content(xml+jinja)delimiter(')>operator(\))operator(,) operator(()operator(\))operator(,) operator(()string<delimiter(')content(application/xml+django)delimiter(')>operator(,) string<delimiter(')content(application/xml+jinja)delimiter(')>operator(\))operator(\))operator(,)
    string<delimiter(')content(XmlErbLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.templates)delimiter(')>operator(,) string<delimiter(')content(XML+Ruby)delimiter(')>operator(,) operator(()string<delimiter(')content(xml+erb)delimiter(')>operator(,) string<delimiter(')content(xml+ruby)delimiter(')>operator(\))operator(,) operator(()operator(\))operator(,) operator(()string<delimiter(')content(application/xml+ruby)delimiter(')>operator(,)operator(\))operator(\))operator(,)
    string<delimiter(')content(XmlLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.web)delimiter(')>operator(,) string<delimiter(')content(XML)delimiter(')>operator(,) operator(()string<delimiter(')content(xml)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(*.xml)delimiter(')>operator(,) string<delimiter(')content(*.xsl)delimiter(')>operator(,) string<delimiter(')content(*.rss)delimiter(')>operator(,) string<delimiter(')content(*.xslt)delimiter(')>operator(,) string<delimiter(')content(*.xsd)delimiter(')>operator(,) string<delimiter(')content(*.wsdl)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(text/xml)delimiter(')>operator(,) string<delimiter(')content(application/xml)delimiter(')>operator(,) string<delimiter(')content(image/svg+xml)delimiter(')>operator(,) string<delimiter(')content(application/rss+xml)delimiter(')>operator(,) string<delimiter(')content(application/atom+xml)delimiter(')>operator(,) string<delimiter(')content(application/xsl+xml)delimiter(')>operator(,) string<delimiter(')content(application/xslt+xml)delimiter(')>operator(\))operator(\))operator(,)
    string<delimiter(')content(XmlPhpLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.templates)delimiter(')>operator(,) string<delimiter(')content(XML+PHP)delimiter(')>operator(,) operator(()string<delimiter(')content(xml+php)delimiter(')>operator(,)operator(\))operator(,) operator(()operator(\))operator(,) operator(()string<delimiter(')content(application/xml+php)delimiter(')>operator(,)operator(\))operator(\))operator(,)
    string<delimiter(')content(XmlSmartyLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.templates)delimiter(')>operator(,) string<delimiter(')content(XML+Smarty)delimiter(')>operator(,) operator(()string<delimiter(')content(xml+smarty)delimiter(')>operator(,)operator(\))operator(,) operator(()operator(\))operator(,) operator(()string<delimiter(')content(application/xml+smarty)delimiter(')>operator(,)operator(\))operator(\))operator(,)
    string<delimiter(')content(XsltLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.web)delimiter(')>operator(,) string<delimiter(')content(XSLT)delimiter(')>operator(,) operator(()string<delimiter(')content(xslt)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(*.xsl)delimiter(')>operator(,) string<delimiter(')content(*.xslt)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(text/xml)delimiter(')>operator(,) string<delimiter(')content(application/xml)delimiter(')>operator(,) string<delimiter(')content(image/svg+xml)delimiter(')>operator(,) string<delimiter(')content(application/rss+xml)delimiter(')>operator(,) string<delimiter(')content(application/atom+xml)delimiter(')>operator(,) string<delimiter(')content(application/xsl+xml)delimiter(')>operator(,) string<delimiter(')content(application/xslt+xml)delimiter(')>operator(\))operator(\))operator(,)
    string<delimiter(')content(YamlLexer)delimiter(')>operator(:) operator(()string<delimiter(')content(pygments.lexers.text)delimiter(')>operator(,) string<delimiter(')content(YAML)delimiter(')>operator(,) operator(()string<delimiter(')content(yaml)delimiter(')>operator(,)operator(\))operator(,) operator(()string<delimiter(')content(*.yaml)delimiter(')>operator(,) string<delimiter(')content(*.yml)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(text/x-yaml)delimiter(')>operator(,)operator(\))operator(\))
operator(})

keyword(if) ident(__name__) operator(==) string<delimiter(')content(__main__)delimiter(')>operator(:)
    keyword(import) include(sys)
    keyword(import) include(os)

    comment(# lookup lexers)
    ident(found_lexers) operator(=) operator([)operator(])
    ident(sys)operator(.)ident(path)operator(.)ident(insert)operator(()integer(0)operator(,) ident(os)operator(.)ident(path)operator(.)ident(join)operator(()ident(os)operator(.)ident(path)operator(.)ident(dirname)operator(()ident(__file__)operator(\))operator(,) string<delimiter(')content(..)delimiter(')>operator(,) string<delimiter(')content(..)delimiter(')>operator(\))operator(\))
    keyword(for) ident(filename) keyword(in) ident(os)operator(.)ident(listdir)operator(()string<delimiter(')content(.)delimiter(')>operator(\))operator(:)
        keyword(if) ident(filename)operator(.)ident(endswith)operator(()string<delimiter(')content(.py)delimiter(')>operator(\)) keyword(and) keyword(not) ident(filename)operator(.)ident(startswith)operator(()string<delimiter(')content(_)delimiter(')>operator(\))operator(:)
            ident(module_name) operator(=) string<delimiter(')content(pygments.lexers.%s)delimiter(')> operator(%) ident(filename)operator([)operator(:)operator(-)integer(3)operator(])
            keyword(print) ident(module_name)
            ident(module) operator(=) predefined(__import__)operator(()ident(module_name)operator(,) predefined_constant(None)operator(,) predefined_constant(None)operator(,) operator([)string<delimiter(')delimiter(')>operator(])operator(\))
            keyword(for) ident(lexer_name) keyword(in) ident(module)operator(.)ident(__all__)operator(:)
                ident(lexer) operator(=) predefined(getattr)operator(()ident(module)operator(,) ident(lexer_name)operator(\))
                ident(found_lexers)operator(.)ident(append)operator(()
                    string<delimiter(')content(%r: %r)delimiter(')> operator(%) operator(()ident(lexer_name)operator(,)
                                operator(()ident(module_name)operator(,)
                                 ident(lexer)operator(.)ident(name)operator(,)
                                 predefined(tuple)operator(()ident(lexer)operator(.)ident(aliases)operator(\))operator(,)
                                 predefined(tuple)operator(()ident(lexer)operator(.)ident(filenames)operator(\))operator(,)
                                 predefined(tuple)operator(()ident(lexer)operator(.)ident(mimetypes)operator(\))operator(\))operator(\))operator(\))
    comment(# sort them, that should make the diff files for svn smaller)
    ident(found_lexers)operator(.)ident(sort)operator(()operator(\))

    comment(# extract useful sourcecode from this file)
    ident(f) operator(=) predefined(open)operator(()ident(__file__)operator(\))
    keyword(try)operator(:)
        ident(content) operator(=) ident(f)operator(.)ident(read)operator(()operator(\))
    keyword(finally)operator(:)
        ident(f)operator(.)ident(close)operator(()operator(\))
    ident(header) operator(=) ident(content)operator([)operator(:)ident(content)operator(.)ident(find)operator(()string<delimiter(')content(LEXERS = {)delimiter(')>operator(\))operator(])
    ident(footer) operator(=) ident(content)operator([)ident(content)operator(.)ident(find)operator(()string<delimiter(")content(if __name__ == '__main__':)delimiter(")>operator(\))operator(:)operator(])

    comment(# write new file)
    ident(f) operator(=) predefined(open)operator(()ident(__file__)operator(,) string<delimiter(')content(w)delimiter(')>operator(\))
    ident(f)operator(.)ident(write)operator(()ident(header)operator(\))
    ident(f)operator(.)ident(write)operator(()string<delimiter(')content(LEXERS = {)char(\\n)content(    %s)char(\\n)content(})char(\\n)char(\\n)delimiter(')> operator(%) string<delimiter(')content(,)char(\\n)content(    )delimiter(')>operator(.)ident(join)operator(()ident(found_lexers)operator(\))operator(\))
    ident(f)operator(.)ident(write)operator(()ident(footer)operator(\))
    ident(f)operator(.)ident(close)operator(()operator(\))
comment(# -*- coding: utf-8 -*-)
docstring<delimiter(""")content(
)content(    pygments.lexers._phpbuiltins)content(
)content(    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~)content(
)content(
)content(    This file loads the function names and their modules from the)content(
)content(    php webpage and generates itself.)content(
)content(
)content(    Do not alter the MODULES dict by hand!)content(
)content(
)content(    WARNING: the generation transfers quite much data over your)content(
)content(             internet connection. don't run that at home, use)content(
)content(             a server ;-\))content(
)content(
)content(    :copyright: Copyright 2006-2009 by the Pygments team, see AUTHORS.)content(
)content(    :license: BSD, see LICENSE for details.)content(
)delimiter(""")>


ident(MODULES) operator(=) operator({)string<delimiter(')content(.NET)delimiter(')>operator(:) operator([)string<delimiter(')content(dotnet_load)delimiter(')>operator(])operator(,)
 string<delimiter(')content(APD)delimiter(')>operator(:) operator([)string<delimiter(')content(apd_breakpoint)delimiter(')>operator(,)
         string<delimiter(')content(apd_callstack)delimiter(')>operator(,)
         string<delimiter(')content(apd_clunk)delimiter(')>operator(,)
         string<delimiter(')content(apd_continue)delimiter(')>operator(,)
         string<delimiter(')content(apd_croak)delimiter(')>operator(,)
         string<delimiter(')content(apd_dump_function_table)delimiter(')>operator(,)
         string<delimiter(')content(apd_dump_persistent_resources)delimiter(')>operator(,)
         string<delimiter(')content(apd_dump_regular_resources)delimiter(')>operator(,)
         string<delimiter(')content(apd_echo)delimiter(')>operator(,)
         string<delimiter(')content(apd_get_active_symbols)delimiter(')>operator(,)
         string<delimiter(')content(apd_set_pprof_trace)delimiter(')>operator(,)
         string<delimiter(')content(apd_set_session)delimiter(')>operator(,)
         string<delimiter(')content(apd_set_session_trace)delimiter(')>operator(,)
         string<delimiter(')content(apd_set_socket_session_trace)delimiter(')>operator(,)
         string<delimiter(')content(override_function)delimiter(')>operator(,)
         string<delimiter(')content(rename_function)delimiter(')>operator(])operator(,)
 string<delimiter(')content(Apache)delimiter(')>operator(:) operator([)string<delimiter(')content(apache_child_terminate)delimiter(')>operator(,)
            string<delimiter(')content(apache_get_modules)delimiter(')>operator(,)
            string<delimiter(')content(apache_get_version)delimiter(')>operator(,)
            string<delimiter(')content(apache_getenv)delimiter(')>operator(,)
            string<delimiter(')content(apache_lookup_uri)delimiter(')>operator(,)
            string<delimiter(')content(apache_note)delimiter(')>operator(,)
            string<delimiter(')content(apache_request_headers)delimiter(')>operator(,)
            string<delimiter(')content(apache_reset_timeout)delimiter(')>operator(,)
            string<delimiter(')content(apache_response_headers)delimiter(')>operator(,)
            string<delimiter(')content(apache_setenv)delimiter(')>operator(,)
            string<delimiter(')content(ascii2ebcdic)delimiter(')>operator(,)
            string<delimiter(')content(ebcdic2ascii)delimiter(')>operator(,)
            string<delimiter(')content(getallheaders)delimiter(')>operator(,)
            string<delimiter(')content(virtual)delimiter(')>operator(])operator(,)
 string<delimiter(')content(Arrays)delimiter(')>operator(:) operator([)string<delimiter(')content(array)delimiter(')>operator(,)
            string<delimiter(')content(array_change_key_case)delimiter(')>operator(,)
            string<delimiter(')content(array_chunk)delimiter(')>operator(,)
            string<delimiter(')content(array_combine)delimiter(')>operator(,)
            string<delimiter(')content(array_count_values)delimiter(')>operator(,)
            string<delimiter(')content(array_diff)delimiter(')>operator(,)
            string<delimiter(')content(array_diff_assoc)delimiter(')>operator(,)
            string<delimiter(')content(array_diff_key)delimiter(')>operator(,)
            string<delimiter(')content(array_diff_uassoc)delimiter(')>operator(,)
            string<delimiter(')content(array_diff_ukey)delimiter(')>operator(,)
            string<delimiter(')content(array_fill)delimiter(')>operator(,)
            string<delimiter(')content(array_filter)delimiter(')>operator(,)
            string<delimiter(')content(array_flip)delimiter(')>operator(,)
            string<delimiter(')content(array_intersect)delimiter(')>operator(,)
            string<delimiter(')content(array_intersect_assoc)delimiter(')>operator(,)
            string<delimiter(')content(array_intersect_key)delimiter(')>operator(,)
            string<delimiter(')content(array_intersect_uassoc)delimiter(')>operator(,)
            string<delimiter(')content(array_intersect_ukey)delimiter(')>operator(,)
            string<delimiter(')content(array_key_exists)delimiter(')>operator(,)
            string<delimiter(')content(array_keys)delimiter(')>operator(,)
            string<delimiter(')content(array_map)delimiter(')>operator(,)
            string<delimiter(')content(array_merge)delimiter(')>operator(,)
            string<delimiter(')content(array_merge_recursive)delimiter(')>operator(,)
            string<delimiter(')content(array_multisort)delimiter(')>operator(,)
            string<delimiter(')content(array_pad)delimiter(')>operator(,)
            string<delimiter(')content(array_pop)delimiter(')>operator(,)
            string<delimiter(')content(array_push)delimiter(')>operator(,)
            string<delimiter(')content(array_rand)delimiter(')>operator(,)
            string<delimiter(')content(array_reduce)delimiter(')>operator(,)
            string<delimiter(')content(array_reverse)delimiter(')>operator(,)
            string<delimiter(')content(array_search)delimiter(')>operator(,)
            string<delimiter(')content(array_shift)delimiter(')>operator(,)
            string<delimiter(')content(array_slice)delimiter(')>operator(,)
            string<delimiter(')content(array_splice)delimiter(')>operator(,)
            string<delimiter(')content(array_sum)delimiter(')>operator(,)
            string<delimiter(')content(array_udiff)delimiter(')>operator(,)
            string<delimiter(')content(array_udiff_assoc)delimiter(')>operator(,)
            string<delimiter(')content(array_udiff_uassoc)delimiter(')>operator(,)
            string<delimiter(')content(array_uintersect)delimiter(')>operator(,)
            string<delimiter(')content(array_uintersect_assoc)delimiter(')>operator(,)
            string<delimiter(')content(array_uintersect_uassoc)delimiter(')>operator(,)
            string<delimiter(')content(array_unique)delimiter(')>operator(,)
            string<delimiter(')content(array_unshift)delimiter(')>operator(,)
            string<delimiter(')content(array_values)delimiter(')>operator(,)
            string<delimiter(')content(array_walk)delimiter(')>operator(,)
            string<delimiter(')content(array_walk_recursive)delimiter(')>operator(,)
            string<delimiter(')content(arsort)delimiter(')>operator(,)
            string<delimiter(')content(asort)delimiter(')>operator(,)
            string<delimiter(')content(compact)delimiter(')>operator(,)
            string<delimiter(')content(count)delimiter(')>operator(,)
            string<delimiter(')content(current)delimiter(')>operator(,)
            string<delimiter(')content(each)delimiter(')>operator(,)
            string<delimiter(')content(end)delimiter(')>operator(,)
            string<delimiter(')content(extract)delimiter(')>operator(,)
            string<delimiter(')content(in_array)delimiter(')>operator(,)
            string<delimiter(')content(key)delimiter(')>operator(,)
            string<delimiter(')content(krsort)delimiter(')>operator(,)
            string<delimiter(')content(ksort)delimiter(')>operator(,)
            string<delimiter(')content(list)delimiter(')>operator(,)
            string<delimiter(')content(natcasesort)delimiter(')>operator(,)
            string<delimiter(')content(natsort)delimiter(')>operator(,)
            string<delimiter(')content(next)delimiter(')>operator(,)
            string<delimiter(')content(pos)delimiter(')>operator(,)
            string<delimiter(')content(prev)delimiter(')>operator(,)
            string<delimiter(')content(range)delimiter(')>operator(,)
            string<delimiter(')content(reset)delimiter(')>operator(,)
            string<delimiter(')content(rsort)delimiter(')>operator(,)
            string<delimiter(')content(shuffle)delimiter(')>operator(,)
            string<delimiter(')content(sizeof)delimiter(')>operator(,)
            string<delimiter(')content(sort)delimiter(')>operator(,)
            string<delimiter(')content(uasort)delimiter(')>operator(,)
            string<delimiter(')content(uksort)delimiter(')>operator(,)
            string<delimiter(')content(usort)delimiter(')>operator(])operator(,)
 string<delimiter(')content(Aspell)delimiter(')>operator(:) operator([)string<delimiter(')content(aspell_check)delimiter(')>operator(,)
            string<delimiter(')content(aspell_check_raw)delimiter(')>operator(,)
            string<delimiter(')content(aspell_new)delimiter(')>operator(,)
            string<delimiter(')content(aspell_suggest)delimiter(')>operator(])operator(,)
 string<delimiter(')content(BC math)delimiter(')>operator(:) operator([)string<delimiter(')content(bcadd)delimiter(')>operator(,)
             string<delimiter(')content(bccomp)delimiter(')>operator(,)
             string<delimiter(')content(bcdiv)delimiter(')>operator(,)
             string<delimiter(')content(bcmod)delimiter(')>operator(,)
             string<delimiter(')content(bcmul)delimiter(')>operator(,)
             string<delimiter(')content(bcpow)delimiter(')>operator(,)
             string<delimiter(')content(bcpowmod)delimiter(')>operator(,)
             string<delimiter(')content(bcscale)delimiter(')>operator(,)
             string<delimiter(')content(bcsqrt)delimiter(')>operator(,)
             string<delimiter(')content(bcsub)delimiter(')>operator(])operator(,)
 string<delimiter(')content(Bzip2)delimiter(')>operator(:) operator([)string<delimiter(')content(bzclose)delimiter(')>operator(,)
           string<delimiter(')content(bzcompress)delimiter(')>operator(,)
           string<delimiter(')content(bzdecompress)delimiter(')>operator(,)
           string<delimiter(')content(bzerrno)delimiter(')>operator(,)
           string<delimiter(')content(bzerror)delimiter(')>operator(,)
           string<delimiter(')content(bzerrstr)delimiter(')>operator(,)
           string<delimiter(')content(bzflush)delimiter(')>operator(,)
           string<delimiter(')content(bzopen)delimiter(')>operator(,)
           string<delimiter(')content(bzread)delimiter(')>operator(,)
           string<delimiter(')content(bzwrite)delimiter(')>operator(])operator(,)
 string<delimiter(')content(CCVS)delimiter(')>operator(:) operator([)string<delimiter(')content(ccvs_add)delimiter(')>operator(,)
          string<delimiter(')content(ccvs_auth)delimiter(')>operator(,)
          string<delimiter(')content(ccvs_command)delimiter(')>operator(,)
          string<delimiter(')content(ccvs_count)delimiter(')>operator(,)
          string<delimiter(')content(ccvs_delete)delimiter(')>operator(,)
          string<delimiter(')content(ccvs_done)delimiter(')>operator(,)
          string<delimiter(')content(ccvs_init)delimiter(')>operator(,)
          string<delimiter(')content(ccvs_lookup)delimiter(')>operator(,)
          string<delimiter(')content(ccvs_new)delimiter(')>operator(,)
          string<delimiter(')content(ccvs_report)delimiter(')>operator(,)
          string<delimiter(')content(ccvs_return)delimiter(')>operator(,)
          string<delimiter(')content(ccvs_reverse)delimiter(')>operator(,)
          string<delimiter(')content(ccvs_sale)delimiter(')>operator(,)
          string<delimiter(')content(ccvs_status)delimiter(')>operator(,)
          string<delimiter(')content(ccvs_textvalue)delimiter(')>operator(,)
          string<delimiter(')content(ccvs_void)delimiter(')>operator(])operator(,)
 string<delimiter(')content(COM)delimiter(')>operator(:) operator([)string<delimiter(')content(com_addref)delimiter(')>operator(,)
         string<delimiter(')content(com_create_guid)delimiter(')>operator(,)
         string<delimiter(')content(com_event_sink)delimiter(')>operator(,)
         string<delimiter(')content(com_get)delimiter(')>operator(,)
         string<delimiter(')content(com_get_active_object)delimiter(')>operator(,)
         string<delimiter(')content(com_invoke)delimiter(')>operator(,)
         string<delimiter(')content(com_isenum)delimiter(')>operator(,)
         string<delimiter(')content(com_load)delimiter(')>operator(,)
         string<delimiter(')content(com_load_typelib)delimiter(')>operator(,)
         string<delimiter(')content(com_message_pump)delimiter(')>operator(,)
         string<delimiter(')content(com_print_typeinfo)delimiter(')>operator(,)
         string<delimiter(')content(com_propget)delimiter(')>operator(,)
         string<delimiter(')content(com_propput)delimiter(')>operator(,)
         string<delimiter(')content(com_propset)delimiter(')>operator(,)
         string<delimiter(')content(com_release)delimiter(')>operator(,)
         string<delimiter(')content(com_set)delimiter(')>operator(,)
         string<delimiter(')content(variant_abs)delimiter(')>operator(,)
         string<delimiter(')content(variant_add)delimiter(')>operator(,)
         string<delimiter(')content(variant_and)delimiter(')>operator(,)
         string<delimiter(')content(variant_cast)delimiter(')>operator(,)
         string<delimiter(')content(variant_cat)delimiter(')>operator(,)
         string<delimiter(')content(variant_cmp)delimiter(')>operator(,)
         string<delimiter(')content(variant_date_from_timestamp)delimiter(')>operator(,)
         string<delimiter(')content(variant_date_to_timestamp)delimiter(')>operator(,)
         string<delimiter(')content(variant_div)delimiter(')>operator(,)
         string<delimiter(')content(variant_eqv)delimiter(')>operator(,)
         string<delimiter(')content(variant_fix)delimiter(')>operator(,)
         string<delimiter(')content(variant_get_type)delimiter(')>operator(,)
         string<delimiter(')content(variant_idiv)delimiter(')>operator(,)
         string<delimiter(')content(variant_imp)delimiter(')>operator(,)
         string<delimiter(')content(variant_int)delimiter(')>operator(,)
         string<delimiter(')content(variant_mod)delimiter(')>operator(,)
         string<delimiter(')content(variant_mul)delimiter(')>operator(,)
         string<delimiter(')content(variant_neg)delimiter(')>operator(,)
         string<delimiter(')content(variant_not)delimiter(')>operator(,)
         string<delimiter(')content(variant_or)delimiter(')>operator(,)
         string<delimiter(')content(variant_pow)delimiter(')>operator(,)
         string<delimiter(')content(variant_round)delimiter(')>operator(,)
         string<delimiter(')content(variant_set)delimiter(')>operator(,)
         string<delimiter(')content(variant_set_type)delimiter(')>operator(,)
         string<delimiter(')content(variant_sub)delimiter(')>operator(,)
         string<delimiter(')content(variant_xor)delimiter(')>operator(])operator(,)
 string<delimiter(')content(CURL)delimiter(')>operator(:) operator([)string<delimiter(')content(curl_close)delimiter(')>operator(,)
          string<delimiter(')content(curl_copy_handle)delimiter(')>operator(,)
          string<delimiter(')content(curl_errno)delimiter(')>operator(,)
          string<delimiter(')content(curl_error)delimiter(')>operator(,)
          string<delimiter(')content(curl_exec)delimiter(')>operator(,)
          string<delimiter(')content(curl_getinfo)delimiter(')>operator(,)
          string<delimiter(')content(curl_init)delimiter(')>operator(,)
          string<delimiter(')content(curl_multi_add_handle)delimiter(')>operator(,)
          string<delimiter(')content(curl_multi_close)delimiter(')>operator(,)
          string<delimiter(')content(curl_multi_exec)delimiter(')>operator(,)
          string<delimiter(')content(curl_multi_getcontent)delimiter(')>operator(,)
          string<delimiter(')content(curl_multi_info_read)delimiter(')>operator(,)
          string<delimiter(')content(curl_multi_init)delimiter(')>operator(,)
          string<delimiter(')content(curl_multi_remove_handle)delimiter(')>operator(,)
          string<delimiter(')content(curl_multi_select)delimiter(')>operator(,)
          string<delimiter(')content(curl_setopt)delimiter(')>operator(,)
          string<delimiter(')content(curl_version)delimiter(')>operator(])operator(,)
 string<delimiter(')content(Calendar)delimiter(')>operator(:) operator([)string<delimiter(')content(cal_days_in_month)delimiter(')>operator(,)
              string<delimiter(')content(cal_from_jd)delimiter(')>operator(,)
              string<delimiter(')content(cal_info)delimiter(')>operator(,)
              string<delimiter(')content(cal_to_jd)delimiter(')>operator(,)
              string<delimiter(')content(easter_date)delimiter(')>operator(,)
              string<delimiter(')content(easter_days)delimiter(')>operator(,)
              string<delimiter(')content(frenchtojd)delimiter(')>operator(,)
              string<delimiter(')content(gregoriantojd)delimiter(')>operator(,)
              string<delimiter(')content(jddayofweek)delimiter(')>operator(,)
              string<delimiter(')content(jdmonthname)delimiter(')>operator(,)
              string<delimiter(')content(jdtofrench)delimiter(')>operator(,)
              string<delimiter(')content(jdtogregorian)delimiter(')>operator(,)
              string<delimiter(')content(jdtojewish)delimiter(')>operator(,)
              string<delimiter(')content(jdtojulian)delimiter(')>operator(,)
              string<delimiter(')content(jdtounix)delimiter(')>operator(,)
              string<delimiter(')content(jewishtojd)delimiter(')>operator(,)
              string<delimiter(')content(juliantojd)delimiter(')>operator(,)
              string<delimiter(')content(unixtojd)delimiter(')>operator(])operator(,)
 string<delimiter(')content(Classes/Objects)delimiter(')>operator(:) operator([)string<delimiter(')content(call_user_method)delimiter(')>operator(,)
                     string<delimiter(')content(call_user_method_array)delimiter(')>operator(,)
                     string<delimiter(')content(class_exists)delimiter(')>operator(,)
                     string<delimiter(')content(get_class)delimiter(')>operator(,)
                     string<delimiter(')content(get_class_methods)delimiter(')>operator(,)
                     string<delimiter(')content(get_class_vars)delimiter(')>operator(,)
                     string<delimiter(')content(get_declared_classes)delimiter(')>operator(,)
                     string<delimiter(')content(get_declared_interfaces)delimiter(')>operator(,)
                     string<delimiter(')content(get_object_vars)delimiter(')>operator(,)
                     string<delimiter(')content(get_parent_class)delimiter(')>operator(,)
                     string<delimiter(')content(interface_exists)delimiter(')>operator(,)
                     string<delimiter(')content(is_a)delimiter(')>operator(,)
                     string<delimiter(')content(is_subclass_of)delimiter(')>operator(,)
                     string<delimiter(')content(method_exists)delimiter(')>operator(])operator(,)
 string<delimiter(')content(Classkit)delimiter(')>operator(:) operator([)string<delimiter(')content(classkit_import)delimiter(')>operator(,)
              string<delimiter(')content(classkit_method_add)delimiter(')>operator(,)
              string<delimiter(')content(classkit_method_copy)delimiter(')>operator(,)
              string<delimiter(')content(classkit_method_redefine)delimiter(')>operator(,)
              string<delimiter(')content(classkit_method_remove)delimiter(')>operator(,)
              string<delimiter(')content(classkit_method_rename)delimiter(')>operator(])operator(,)
 string<delimiter(')content(ClibPDF)delimiter(')>operator(:) operator([)string<delimiter(')content(cpdf_add_annotation)delimiter(')>operator(,)
             string<delimiter(')content(cpdf_add_outline)delimiter(')>operator(,)
             string<delimiter(')content(cpdf_arc)delimiter(')>operator(,)
             string<delimiter(')content(cpdf_begin_text)delimiter(')>operator(,)
             string<delimiter(')content(cpdf_circle)delimiter(')>operator(,)
             string<delimiter(')content(cpdf_clip)delimiter(')>operator(,)
             string<delimiter(')content(cpdf_close)delimiter(')>operator(,)
             string<delimiter(')content(cpdf_closepath)delimiter(')>operator(,)
             string<delimiter(')content(cpdf_closepath_fill_stroke)delimiter(')>operator(,)
             string<delimiter(')content(cpdf_closepath_stroke)delimiter(')>operator(,)
             string<delimiter(')content(cpdf_continue_text)delimiter(')>operator(,)
             string<delimiter(')content(cpdf_curveto)delimiter(')>operator(,)
             string<delimiter(')content(cpdf_end_text)delimiter(')>operator(,)
             string<delimiter(')content(cpdf_fill)delimiter(')>operator(,)
             string<delimiter(')content(cpdf_fill_stroke)delimiter(')>operator(,)
             string<delimiter(')content(cpdf_finalize)delimiter(')>operator(,)
             string<delimiter(')content(cpdf_finalize_page)delimiter(')>operator(,)
             string<delimiter(')content(cpdf_global_set_document_limits)delimiter(')>operator(,)
             string<delimiter(')content(cpdf_import_jpeg)delimiter(')>operator(,)
             string<delimiter(')content(cpdf_lineto)delimiter(')>operator(,)
             string<delimiter(')content(cpdf_moveto)delimiter(')>operator(,)
             string<delimiter(')content(cpdf_newpath)delimiter(')>operator(,)
             string<delimiter(')content(cpdf_open)delimiter(')>operator(,)
             string<delimiter(')content(cpdf_output_buffer)delimiter(')>operator(,)
             string<delimiter(')content(cpdf_page_init)delimiter(')>operator(,)
             string<delimiter(')content(cpdf_place_inline_image)delimiter(')>operator(,)
             string<delimiter(')content(cpdf_rect)delimiter(')>operator(,)
             string<delimiter(')content(cpdf_restore)delimiter(')>operator(,)
             string<delimiter(')content(cpdf_rlineto)delimiter(')>operator(,)
             string<delimiter(')content(cpdf_rmoveto)delimiter(')>operator(,)
             string<delimiter(')content(cpdf_rotate)delimiter(')>operator(,)
             string<delimiter(')content(cpdf_rotate_text)delimiter(')>operator(,)
             string<delimiter(')content(cpdf_save)delimiter(')>operator(,)
             string<delimiter(')content(cpdf_save_to_file)delimiter(')>operator(,)
             string<delimiter(')content(cpdf_scale)delimiter(')>operator(,)
             string<delimiter(')content(cpdf_set_action_url)delimiter(')>operator(,)
             string<delimiter(')content(cpdf_set_char_spacing)delimiter(')>operator(,)
             string<delimiter(')content(cpdf_set_creator)delimiter(')>operator(,)
             string<delimiter(')content(cpdf_set_current_page)delimiter(')>operator(,)
             string<delimiter(')content(cpdf_set_font)delimiter(')>operator(,)
             string<delimiter(')content(cpdf_set_font_directories)delimiter(')>operator(,)
             string<delimiter(')content(cpdf_set_font_map_file)delimiter(')>operator(,)
             string<delimiter(')content(cpdf_set_horiz_scaling)delimiter(')>operator(,)
             string<delimiter(')content(cpdf_set_keywords)delimiter(')>operator(,)
             string<delimiter(')content(cpdf_set_leading)delimiter(')>operator(,)
             string<delimiter(')content(cpdf_set_page_animation)delimiter(')>operator(,)
             string<delimiter(')content(cpdf_set_subject)delimiter(')>operator(,)
             string<delimiter(')content(cpdf_set_text_matrix)delimiter(')>operator(,)
             string<delimiter(')content(cpdf_set_text_pos)delimiter(')>operator(,)
             string<delimiter(')content(cpdf_set_text_rendering)delimiter(')>operator(,)
             string<delimiter(')content(cpdf_set_text_rise)delimiter(')>operator(,)
             string<delimiter(')content(cpdf_set_title)delimiter(')>operator(,)
             string<delimiter(')content(cpdf_set_viewer_preferences)delimiter(')>operator(,)
             string<delimiter(')content(cpdf_set_word_spacing)delimiter(')>operator(,)
             string<delimiter(')content(cpdf_setdash)delimiter(')>operator(,)
             string<delimiter(')content(cpdf_setflat)delimiter(')>operator(,)
             string<delimiter(')content(cpdf_setgray)delimiter(')>operator(,)
             string<delimiter(')content(cpdf_setgray_fill)delimiter(')>operator(,)
             string<delimiter(')content(cpdf_setgray_stroke)delimiter(')>operator(,)
             string<delimiter(')content(cpdf_setlinecap)delimiter(')>operator(,)
             string<delimiter(')content(cpdf_setlinejoin)delimiter(')>operator(,)
             string<delimiter(')content(cpdf_setlinewidth)delimiter(')>operator(,)
             string<delimiter(')content(cpdf_setmiterlimit)delimiter(')>operator(,)
             string<delimiter(')content(cpdf_setrgbcolor)delimiter(')>operator(,)
             string<delimiter(')content(cpdf_setrgbcolor_fill)delimiter(')>operator(,)
             string<delimiter(')content(cpdf_setrgbcolor_stroke)delimiter(')>operator(,)
             string<delimiter(')content(cpdf_show)delimiter(')>operator(,)
             string<delimiter(')content(cpdf_show_xy)delimiter(')>operator(,)
             string<delimiter(')content(cpdf_stringwidth)delimiter(')>operator(,)
             string<delimiter(')content(cpdf_stroke)delimiter(')>operator(,)
             string<delimiter(')content(cpdf_text)delimiter(')>operator(,)
             string<delimiter(')content(cpdf_translate)delimiter(')>operator(])operator(,)
 string<delimiter(')content(Crack)delimiter(')>operator(:) operator([)string<delimiter(')content(crack_check)delimiter(')>operator(,)
           string<delimiter(')content(crack_closedict)delimiter(')>operator(,)
           string<delimiter(')content(crack_getlastmessage)delimiter(')>operator(,)
           string<delimiter(')content(crack_opendict)delimiter(')>operator(])operator(,)
 string<delimiter(')content(Cybercash)delimiter(')>operator(:) operator([)string<delimiter(')content(cybercash_base64_decode)delimiter(')>operator(,)
               string<delimiter(')content(cybercash_base64_encode)delimiter(')>operator(,)
               string<delimiter(')content(cybercash_decr)delimiter(')>operator(,)
               string<delimiter(')content(cybercash_encr)delimiter(')>operator(])operator(,)
 string<delimiter(')content(Cyrus IMAP)delimiter(')>operator(:) operator([)string<delimiter(')content(cyrus_authenticate)delimiter(')>operator(,)
                string<delimiter(')content(cyrus_bind)delimiter(')>operator(,)
                string<delimiter(')content(cyrus_close)delimiter(')>operator(,)
                string<delimiter(')content(cyrus_connect)delimiter(')>operator(,)
                string<delimiter(')content(cyrus_query)delimiter(')>operator(,)
                string<delimiter(')content(cyrus_unbind)delimiter(')>operator(])operator(,)
 string<delimiter(')content(DB++)delimiter(')>operator(:) operator([)string<delimiter(')content(dbplus_add)delimiter(')>operator(,)
          string<delimiter(')content(dbplus_aql)delimiter(')>operator(,)
          string<delimiter(')content(dbplus_chdir)delimiter(')>operator(,)
          string<delimiter(')content(dbplus_close)delimiter(')>operator(,)
          string<delimiter(')content(dbplus_curr)delimiter(')>operator(,)
          string<delimiter(')content(dbplus_errcode)delimiter(')>operator(,)
          string<delimiter(')content(dbplus_errno)delimiter(')>operator(,)
          string<delimiter(')content(dbplus_find)delimiter(')>operator(,)
          string<delimiter(')content(dbplus_first)delimiter(')>operator(,)
          string<delimiter(')content(dbplus_flush)delimiter(')>operator(,)
          string<delimiter(')content(dbplus_freealllocks)delimiter(')>operator(,)
          string<delimiter(')content(dbplus_freelock)delimiter(')>operator(,)
          string<delimiter(')content(dbplus_freerlocks)delimiter(')>operator(,)
          string<delimiter(')content(dbplus_getlock)delimiter(')>operator(,)
          string<delimiter(')content(dbplus_getunique)delimiter(')>operator(,)
          string<delimiter(')content(dbplus_info)delimiter(')>operator(,)
          string<delimiter(')content(dbplus_last)delimiter(')>operator(,)
          string<delimiter(')content(dbplus_lockrel)delimiter(')>operator(,)
          string<delimiter(')content(dbplus_next)delimiter(')>operator(,)
          string<delimiter(')content(dbplus_open)delimiter(')>operator(,)
          string<delimiter(')content(dbplus_prev)delimiter(')>operator(,)
          string<delimiter(')content(dbplus_rchperm)delimiter(')>operator(,)
          string<delimiter(')content(dbplus_rcreate)delimiter(')>operator(,)
          string<delimiter(')content(dbplus_rcrtexact)delimiter(')>operator(,)
          string<delimiter(')content(dbplus_rcrtlike)delimiter(')>operator(,)
          string<delimiter(')content(dbplus_resolve)delimiter(')>operator(,)
          string<delimiter(')content(dbplus_restorepos)delimiter(')>operator(,)
          string<delimiter(')content(dbplus_rkeys)delimiter(')>operator(,)
          string<delimiter(')content(dbplus_ropen)delimiter(')>operator(,)
          string<delimiter(')content(dbplus_rquery)delimiter(')>operator(,)
          string<delimiter(')content(dbplus_rrename)delimiter(')>operator(,)
          string<delimiter(')content(dbplus_rsecindex)delimiter(')>operator(,)
          string<delimiter(')content(dbplus_runlink)delimiter(')>operator(,)
          string<delimiter(')content(dbplus_rzap)delimiter(')>operator(,)
          string<delimiter(')content(dbplus_savepos)delimiter(')>operator(,)
          string<delimiter(')content(dbplus_setindex)delimiter(')>operator(,)
          string<delimiter(')content(dbplus_setindexbynumber)delimiter(')>operator(,)
          string<delimiter(')content(dbplus_sql)delimiter(')>operator(,)
          string<delimiter(')content(dbplus_tcl)delimiter(')>operator(,)
          string<delimiter(')content(dbplus_tremove)delimiter(')>operator(,)
          string<delimiter(')content(dbplus_undo)delimiter(')>operator(,)
          string<delimiter(')content(dbplus_undoprepare)delimiter(')>operator(,)
          string<delimiter(')content(dbplus_unlockrel)delimiter(')>operator(,)
          string<delimiter(')content(dbplus_unselect)delimiter(')>operator(,)
          string<delimiter(')content(dbplus_update)delimiter(')>operator(,)
          string<delimiter(')content(dbplus_xlockrel)delimiter(')>operator(,)
          string<delimiter(')content(dbplus_xunlockrel)delimiter(')>operator(])operator(,)
 string<delimiter(')content(DBM)delimiter(')>operator(:) operator([)string<delimiter(')content(dblist)delimiter(')>operator(,)
         string<delimiter(')content(dbmclose)delimiter(')>operator(,)
         string<delimiter(')content(dbmdelete)delimiter(')>operator(,)
         string<delimiter(')content(dbmexists)delimiter(')>operator(,)
         string<delimiter(')content(dbmfetch)delimiter(')>operator(,)
         string<delimiter(')content(dbmfirstkey)delimiter(')>operator(,)
         string<delimiter(')content(dbminsert)delimiter(')>operator(,)
         string<delimiter(')content(dbmnextkey)delimiter(')>operator(,)
         string<delimiter(')content(dbmopen)delimiter(')>operator(,)
         string<delimiter(')content(dbmreplace)delimiter(')>operator(])operator(,)
 string<delimiter(')content(DOM)delimiter(')>operator(:) operator([)string<delimiter(')content(dom_import_simplexml)delimiter(')>operator(])operator(,)
 string<delimiter(')content(DOM XML)delimiter(')>operator(:) operator([)string<delimiter(')content(domxml_new_doc)delimiter(')>operator(,)
             string<delimiter(')content(domxml_open_file)delimiter(')>operator(,)
             string<delimiter(')content(domxml_open_mem)delimiter(')>operator(,)
             string<delimiter(')content(domxml_version)delimiter(')>operator(,)
             string<delimiter(')content(domxml_xmltree)delimiter(')>operator(,)
             string<delimiter(')content(domxml_xslt_stylesheet)delimiter(')>operator(,)
             string<delimiter(')content(domxml_xslt_stylesheet_doc)delimiter(')>operator(,)
             string<delimiter(')content(domxml_xslt_stylesheet_file)delimiter(')>operator(,)
             string<delimiter(')content(xpath_eval)delimiter(')>operator(,)
             string<delimiter(')content(xpath_eval_expression)delimiter(')>operator(,)
             string<delimiter(')content(xpath_new_context)delimiter(')>operator(,)
             string<delimiter(')content(xptr_eval)delimiter(')>operator(,)
             string<delimiter(')content(xptr_new_context)delimiter(')>operator(])operator(,)
 string<delimiter(')content(Date/Time)delimiter(')>operator(:) operator([)string<delimiter(')content(checkdate)delimiter(')>operator(,)
               string<delimiter(')content(date)delimiter(')>operator(,)
               string<delimiter(')content(date_sunrise)delimiter(')>operator(,)
               string<delimiter(')content(date_sunset)delimiter(')>operator(,)
               string<delimiter(')content(getdate)delimiter(')>operator(,)
               string<delimiter(')content(gettimeofday)delimiter(')>operator(,)
               string<delimiter(')content(gmdate)delimiter(')>operator(,)
               string<delimiter(')content(gmmktime)delimiter(')>operator(,)
               string<delimiter(')content(gmstrftime)delimiter(')>operator(,)
               string<delimiter(')content(idate)delimiter(')>operator(,)
               string<delimiter(')content(localtime)delimiter(')>operator(,)
               string<delimiter(')content(microtime)delimiter(')>operator(,)
               string<delimiter(')content(mktime)delimiter(')>operator(,)
               string<delimiter(')content(strftime)delimiter(')>operator(,)
               string<delimiter(')content(strptime)delimiter(')>operator(,)
               string<delimiter(')content(strtotime)delimiter(')>operator(,)
               string<delimiter(')content(time)delimiter(')>operator(])operator(,)
 string<delimiter(')content(Direct IO)delimiter(')>operator(:) operator([)string<delimiter(')content(dio_close)delimiter(')>operator(,)
               string<delimiter(')content(dio_fcntl)delimiter(')>operator(,)
               string<delimiter(')content(dio_open)delimiter(')>operator(,)
               string<delimiter(')content(dio_read)delimiter(')>operator(,)
               string<delimiter(')content(dio_seek)delimiter(')>operator(,)
               string<delimiter(')content(dio_stat)delimiter(')>operator(,)
               string<delimiter(')content(dio_tcsetattr)delimiter(')>operator(,)
               string<delimiter(')content(dio_truncate)delimiter(')>operator(,)
               string<delimiter(')content(dio_write)delimiter(')>operator(])operator(,)
 string<delimiter(')content(Directories)delimiter(')>operator(:) operator([)string<delimiter(')content(chdir)delimiter(')>operator(,)
                 string<delimiter(')content(chroot)delimiter(')>operator(,)
                 string<delimiter(')content(closedir)delimiter(')>operator(,)
                 string<delimiter(')content(getcwd)delimiter(')>operator(,)
                 string<delimiter(')content(opendir)delimiter(')>operator(,)
                 string<delimiter(')content(readdir)delimiter(')>operator(,)
                 string<delimiter(')content(rewinddir)delimiter(')>operator(,)
                 string<delimiter(')content(scandir)delimiter(')>operator(])operator(,)
 string<delimiter(')content(Errors and Logging)delimiter(')>operator(:) operator([)string<delimiter(')content(debug_backtrace)delimiter(')>operator(,)
                        string<delimiter(')content(debug_print_backtrace)delimiter(')>operator(,)
                        string<delimiter(')content(error_log)delimiter(')>operator(,)
                        string<delimiter(')content(error_reporting)delimiter(')>operator(,)
                        string<delimiter(')content(restore_error_handler)delimiter(')>operator(,)
                        string<delimiter(')content(restore_exception_handler)delimiter(')>operator(,)
                        string<delimiter(')content(set_error_handler)delimiter(')>operator(,)
                        string<delimiter(')content(set_exception_handler)delimiter(')>operator(,)
                        string<delimiter(')content(trigger_error)delimiter(')>operator(,)
                        string<delimiter(')content(user_error)delimiter(')>operator(])operator(,)
 string<delimiter(')content(Exif)delimiter(')>operator(:) operator([)string<delimiter(')content(exif_imagetype)delimiter(')>operator(,)
          string<delimiter(')content(exif_read_data)delimiter(')>operator(,)
          string<delimiter(')content(exif_tagname)delimiter(')>operator(,)
          string<delimiter(')content(exif_thumbnail)delimiter(')>operator(,)
          string<delimiter(')content(read_exif_data)delimiter(')>operator(])operator(,)
 string<delimiter(')content(FDF)delimiter(')>operator(:) operator([)string<delimiter(')content(fdf_add_doc_javascript)delimiter(')>operator(,)
         string<delimiter(')content(fdf_add_template)delimiter(')>operator(,)
         string<delimiter(')content(fdf_close)delimiter(')>operator(,)
         string<delimiter(')content(fdf_create)delimiter(')>operator(,)
         string<delimiter(')content(fdf_enum_values)delimiter(')>operator(,)
         string<delimiter(')content(fdf_errno)delimiter(')>operator(,)
         string<delimiter(')content(fdf_error)delimiter(')>operator(,)
         string<delimiter(')content(fdf_get_ap)delimiter(')>operator(,)
         string<delimiter(')content(fdf_get_attachment)delimiter(')>operator(,)
         string<delimiter(')content(fdf_get_encoding)delimiter(')>operator(,)
         string<delimiter(')content(fdf_get_file)delimiter(')>operator(,)
         string<delimiter(')content(fdf_get_flags)delimiter(')>operator(,)
         string<delimiter(')content(fdf_get_opt)delimiter(')>operator(,)
         string<delimiter(')content(fdf_get_status)delimiter(')>operator(,)
         string<delimiter(')content(fdf_get_value)delimiter(')>operator(,)
         string<delimiter(')content(fdf_get_version)delimiter(')>operator(,)
         string<delimiter(')content(fdf_header)delimiter(')>operator(,)
         string<delimiter(')content(fdf_next_field_name)delimiter(')>operator(,)
         string<delimiter(')content(fdf_open)delimiter(')>operator(,)
         string<delimiter(')content(fdf_open_string)delimiter(')>operator(,)
         string<delimiter(')content(fdf_remove_item)delimiter(')>operator(,)
         string<delimiter(')content(fdf_save)delimiter(')>operator(,)
         string<delimiter(')content(fdf_save_string)delimiter(')>operator(,)
         string<delimiter(')content(fdf_set_ap)delimiter(')>operator(,)
         string<delimiter(')content(fdf_set_encoding)delimiter(')>operator(,)
         string<delimiter(')content(fdf_set_file)delimiter(')>operator(,)
         string<delimiter(')content(fdf_set_flags)delimiter(')>operator(,)
         string<delimiter(')content(fdf_set_javascript_action)delimiter(')>operator(,)
         string<delimiter(')content(fdf_set_on_import_javascript)delimiter(')>operator(,)
         string<delimiter(')content(fdf_set_opt)delimiter(')>operator(,)
         string<delimiter(')content(fdf_set_status)delimiter(')>operator(,)
         string<delimiter(')content(fdf_set_submit_form_action)delimiter(')>operator(,)
         string<delimiter(')content(fdf_set_target_frame)delimiter(')>operator(,)
         string<delimiter(')content(fdf_set_value)delimiter(')>operator(,)
         string<delimiter(')content(fdf_set_version)delimiter(')>operator(])operator(,)
 string<delimiter(')content(FTP)delimiter(')>operator(:) operator([)string<delimiter(')content(ftp_alloc)delimiter(')>operator(,)
         string<delimiter(')content(ftp_cdup)delimiter(')>operator(,)
         string<delimiter(')content(ftp_chdir)delimiter(')>operator(,)
         string<delimiter(')content(ftp_chmod)delimiter(')>operator(,)
         string<delimiter(')content(ftp_close)delimiter(')>operator(,)
         string<delimiter(')content(ftp_connect)delimiter(')>operator(,)
         string<delimiter(')content(ftp_delete)delimiter(')>operator(,)
         string<delimiter(')content(ftp_exec)delimiter(')>operator(,)
         string<delimiter(')content(ftp_fget)delimiter(')>operator(,)
         string<delimiter(')content(ftp_fput)delimiter(')>operator(,)
         string<delimiter(')content(ftp_get)delimiter(')>operator(,)
         string<delimiter(')content(ftp_get_option)delimiter(')>operator(,)
         string<delimiter(')content(ftp_login)delimiter(')>operator(,)
         string<delimiter(')content(ftp_mdtm)delimiter(')>operator(,)
         string<delimiter(')content(ftp_mkdir)delimiter(')>operator(,)
         string<delimiter(')content(ftp_nb_continue)delimiter(')>operator(,)
         string<delimiter(')content(ftp_nb_fget)delimiter(')>operator(,)
         string<delimiter(')content(ftp_nb_fput)delimiter(')>operator(,)
         string<delimiter(')content(ftp_nb_get)delimiter(')>operator(,)
         string<delimiter(')content(ftp_nb_put)delimiter(')>operator(,)
         string<delimiter(')content(ftp_nlist)delimiter(')>operator(,)
         string<delimiter(')content(ftp_pasv)delimiter(')>operator(,)
         string<delimiter(')content(ftp_put)delimiter(')>operator(,)
         string<delimiter(')content(ftp_pwd)delimiter(')>operator(,)
         string<delimiter(')content(ftp_quit)delimiter(')>operator(,)
         string<delimiter(')content(ftp_raw)delimiter(')>operator(,)
         string<delimiter(')content(ftp_rawlist)delimiter(')>operator(,)
         string<delimiter(')content(ftp_rename)delimiter(')>operator(,)
         string<delimiter(')content(ftp_rmdir)delimiter(')>operator(,)
         string<delimiter(')content(ftp_set_option)delimiter(')>operator(,)
         string<delimiter(')content(ftp_site)delimiter(')>operator(,)
         string<delimiter(')content(ftp_size)delimiter(')>operator(,)
         string<delimiter(')content(ftp_ssl_connect)delimiter(')>operator(,)
         string<delimiter(')content(ftp_systype)delimiter(')>operator(])operator(,)
 string<delimiter(')content(Filesystem)delimiter(')>operator(:) operator([)string<delimiter(')content(basename)delimiter(')>operator(,)
                string<delimiter(')content(chgrp)delimiter(')>operator(,)
                string<delimiter(')content(chmod)delimiter(')>operator(,)
                string<delimiter(')content(chown)delimiter(')>operator(,)
                string<delimiter(')content(clearstatcache)delimiter(')>operator(,)
                string<delimiter(')content(copy)delimiter(')>operator(,)
                string<delimiter(')content(delete)delimiter(')>operator(,)
                string<delimiter(')content(dirname)delimiter(')>operator(,)
                string<delimiter(')content(disk_free_space)delimiter(')>operator(,)
                string<delimiter(')content(disk_total_space)delimiter(')>operator(,)
                string<delimiter(')content(diskfreespace)delimiter(')>operator(,)
                string<delimiter(')content(fclose)delimiter(')>operator(,)
                string<delimiter(')content(feof)delimiter(')>operator(,)
                string<delimiter(')content(fflush)delimiter(')>operator(,)
                string<delimiter(')content(fgetc)delimiter(')>operator(,)
                string<delimiter(')content(fgetcsv)delimiter(')>operator(,)
                string<delimiter(')content(fgets)delimiter(')>operator(,)
                string<delimiter(')content(fgetss)delimiter(')>operator(,)
                string<delimiter(')content(file)delimiter(')>operator(,)
                string<delimiter(')content(file_exists)delimiter(')>operator(,)
                string<delimiter(')content(file_get_contents)delimiter(')>operator(,)
                string<delimiter(')content(file_put_contents)delimiter(')>operator(,)
                string<delimiter(')content(fileatime)delimiter(')>operator(,)
                string<delimiter(')content(filectime)delimiter(')>operator(,)
                string<delimiter(')content(filegroup)delimiter(')>operator(,)
                string<delimiter(')content(fileinode)delimiter(')>operator(,)
                string<delimiter(')content(filemtime)delimiter(')>operator(,)
                string<delimiter(')content(fileowner)delimiter(')>operator(,)
                string<delimiter(')content(fileperms)delimiter(')>operator(,)
                string<delimiter(')content(filesize)delimiter(')>operator(,)
                string<delimiter(')content(filetype)delimiter(')>operator(,)
                string<delimiter(')content(flock)delimiter(')>operator(,)
                string<delimiter(')content(fnmatch)delimiter(')>operator(,)
                string<delimiter(')content(fopen)delimiter(')>operator(,)
                string<delimiter(')content(fpassthru)delimiter(')>operator(,)
                string<delimiter(')content(fputcsv)delimiter(')>operator(,)
                string<delimiter(')content(fputs)delimiter(')>operator(,)
                string<delimiter(')content(fread)delimiter(')>operator(,)
                string<delimiter(')content(fscanf)delimiter(')>operator(,)
                string<delimiter(')content(fseek)delimiter(')>operator(,)
                string<delimiter(')content(fstat)delimiter(')>operator(,)
                string<delimiter(')content(ftell)delimiter(')>operator(,)
                string<delimiter(')content(ftruncate)delimiter(')>operator(,)
                string<delimiter(')content(fwrite)delimiter(')>operator(,)
                string<delimiter(')content(glob)delimiter(')>operator(,)
                string<delimiter(')content(is_dir)delimiter(')>operator(,)
                string<delimiter(')content(is_executable)delimiter(')>operator(,)
                string<delimiter(')content(is_file)delimiter(')>operator(,)
                string<delimiter(')content(is_link)delimiter(')>operator(,)
                string<delimiter(')content(is_readable)delimiter(')>operator(,)
                string<delimiter(')content(is_uploaded_file)delimiter(')>operator(,)
                string<delimiter(')content(is_writable)delimiter(')>operator(,)
                string<delimiter(')content(is_writeable)delimiter(')>operator(,)
                string<delimiter(')content(link)delimiter(')>operator(,)
                string<delimiter(')content(linkinfo)delimiter(')>operator(,)
                string<delimiter(')content(lstat)delimiter(')>operator(,)
                string<delimiter(')content(mkdir)delimiter(')>operator(,)
                string<delimiter(')content(move_uploaded_file)delimiter(')>operator(,)
                string<delimiter(')content(parse_ini_file)delimiter(')>operator(,)
                string<delimiter(')content(pathinfo)delimiter(')>operator(,)
                string<delimiter(')content(pclose)delimiter(')>operator(,)
                string<delimiter(')content(popen)delimiter(')>operator(,)
                string<delimiter(')content(readfile)delimiter(')>operator(,)
                string<delimiter(')content(readlink)delimiter(')>operator(,)
                string<delimiter(')content(realpath)delimiter(')>operator(,)
                string<delimiter(')content(rename)delimiter(')>operator(,)
                string<delimiter(')content(rewind)delimiter(')>operator(,)
                string<delimiter(')content(rmdir)delimiter(')>operator(,)
                string<delimiter(')content(set_file_buffer)delimiter(')>operator(,)
                string<delimiter(')content(stat)delimiter(')>operator(,)
                string<delimiter(')content(symlink)delimiter(')>operator(,)
                string<delimiter(')content(tempnam)delimiter(')>operator(,)
                string<delimiter(')content(tmpfile)delimiter(')>operator(,)
                string<delimiter(')content(touch)delimiter(')>operator(,)
                string<delimiter(')content(umask)delimiter(')>operator(,)
                string<delimiter(')content(unlink)delimiter(')>operator(])operator(,)
 string<delimiter(')content(Firebird/InterBase)delimiter(')>operator(:) operator([)string<delimiter(')content(ibase_add_user)delimiter(')>operator(,)
                        string<delimiter(')content(ibase_affected_rows)delimiter(')>operator(,)
                        string<delimiter(')content(ibase_backup)delimiter(')>operator(,)
                        string<delimiter(')content(ibase_blob_add)delimiter(')>operator(,)
                        string<delimiter(')content(ibase_blob_cancel)delimiter(')>operator(,)
                        string<delimiter(')content(ibase_blob_close)delimiter(')>operator(,)
                        string<delimiter(')content(ibase_blob_create)delimiter(')>operator(,)
                        string<delimiter(')content(ibase_blob_echo)delimiter(')>operator(,)
                        string<delimiter(')content(ibase_blob_get)delimiter(')>operator(,)
                        string<delimiter(')content(ibase_blob_import)delimiter(')>operator(,)
                        string<delimiter(')content(ibase_blob_info)delimiter(')>operator(,)
                        string<delimiter(')content(ibase_blob_open)delimiter(')>operator(,)
                        string<delimiter(')content(ibase_close)delimiter(')>operator(,)
                        string<delimiter(')content(ibase_commit)delimiter(')>operator(,)
                        string<delimiter(')content(ibase_commit_ret)delimiter(')>operator(,)
                        string<delimiter(')content(ibase_connect)delimiter(')>operator(,)
                        string<delimiter(')content(ibase_db_info)delimiter(')>operator(,)
                        string<delimiter(')content(ibase_delete_user)delimiter(')>operator(,)
                        string<delimiter(')content(ibase_drop_db)delimiter(')>operator(,)
                        string<delimiter(')content(ibase_errcode)delimiter(')>operator(,)
                        string<delimiter(')content(ibase_errmsg)delimiter(')>operator(,)
                        string<delimiter(')content(ibase_execute)delimiter(')>operator(,)
                        string<delimiter(')content(ibase_fetch_assoc)delimiter(')>operator(,)
                        string<delimiter(')content(ibase_fetch_object)delimiter(')>operator(,)
                        string<delimiter(')content(ibase_fetch_row)delimiter(')>operator(,)
                        string<delimiter(')content(ibase_field_info)delimiter(')>operator(,)
                        string<delimiter(')content(ibase_free_event_handler)delimiter(')>operator(,)
                        string<delimiter(')content(ibase_free_query)delimiter(')>operator(,)
                        string<delimiter(')content(ibase_free_result)delimiter(')>operator(,)
                        string<delimiter(')content(ibase_gen_id)delimiter(')>operator(,)
                        string<delimiter(')content(ibase_maintain_db)delimiter(')>operator(,)
                        string<delimiter(')content(ibase_modify_user)delimiter(')>operator(,)
                        string<delimiter(')content(ibase_name_result)delimiter(')>operator(,)
                        string<delimiter(')content(ibase_num_fields)delimiter(')>operator(,)
                        string<delimiter(')content(ibase_num_params)delimiter(')>operator(,)
                        string<delimiter(')content(ibase_param_info)delimiter(')>operator(,)
                        string<delimiter(')content(ibase_pconnect)delimiter(')>operator(,)
                        string<delimiter(')content(ibase_prepare)delimiter(')>operator(,)
                        string<delimiter(')content(ibase_query)delimiter(')>operator(,)
                        string<delimiter(')content(ibase_restore)delimiter(')>operator(,)
                        string<delimiter(')content(ibase_rollback)delimiter(')>operator(,)
                        string<delimiter(')content(ibase_rollback_ret)delimiter(')>operator(,)
                        string<delimiter(')content(ibase_server_info)delimiter(')>operator(,)
                        string<delimiter(')content(ibase_service_attach)delimiter(')>operator(,)
                        string<delimiter(')content(ibase_service_detach)delimiter(')>operator(,)
                        string<delimiter(')content(ibase_set_event_handler)delimiter(')>operator(,)
                        string<delimiter(')content(ibase_timefmt)delimiter(')>operator(,)
                        string<delimiter(')content(ibase_trans)delimiter(')>operator(,)
                        string<delimiter(')content(ibase_wait_event)delimiter(')>operator(])operator(,)
 string<delimiter(')content(FriBiDi)delimiter(')>operator(:) operator([)string<delimiter(')content(fribidi_log2vis)delimiter(')>operator(])operator(,)
 string<delimiter(')content(FrontBase)delimiter(')>operator(:) operator([)string<delimiter(')content(fbsql_affected_rows)delimiter(')>operator(,)
               string<delimiter(')content(fbsql_autocommit)delimiter(')>operator(,)
               string<delimiter(')content(fbsql_blob_size)delimiter(')>operator(,)
               string<delimiter(')content(fbsql_change_user)delimiter(')>operator(,)
               string<delimiter(')content(fbsql_clob_size)delimiter(')>operator(,)
               string<delimiter(')content(fbsql_close)delimiter(')>operator(,)
               string<delimiter(')content(fbsql_commit)delimiter(')>operator(,)
               string<delimiter(')content(fbsql_connect)delimiter(')>operator(,)
               string<delimiter(')content(fbsql_create_blob)delimiter(')>operator(,)
               string<delimiter(')content(fbsql_create_clob)delimiter(')>operator(,)
               string<delimiter(')content(fbsql_create_db)delimiter(')>operator(,)
               string<delimiter(')content(fbsql_data_seek)delimiter(')>operator(,)
               string<delimiter(')content(fbsql_database)delimiter(')>operator(,)
               string<delimiter(')content(fbsql_database_password)delimiter(')>operator(,)
               string<delimiter(')content(fbsql_db_query)delimiter(')>operator(,)
               string<delimiter(')content(fbsql_db_status)delimiter(')>operator(,)
               string<delimiter(')content(fbsql_drop_db)delimiter(')>operator(,)
               string<delimiter(')content(fbsql_errno)delimiter(')>operator(,)
               string<delimiter(')content(fbsql_error)delimiter(')>operator(,)
               string<delimiter(')content(fbsql_fetch_array)delimiter(')>operator(,)
               string<delimiter(')content(fbsql_fetch_assoc)delimiter(')>operator(,)
               string<delimiter(')content(fbsql_fetch_field)delimiter(')>operator(,)
               string<delimiter(')content(fbsql_fetch_lengths)delimiter(')>operator(,)
               string<delimiter(')content(fbsql_fetch_object)delimiter(')>operator(,)
               string<delimiter(')content(fbsql_fetch_row)delimiter(')>operator(,)
               string<delimiter(')content(fbsql_field_flags)delimiter(')>operator(,)
               string<delimiter(')content(fbsql_field_len)delimiter(')>operator(,)
               string<delimiter(')content(fbsql_field_name)delimiter(')>operator(,)
               string<delimiter(')content(fbsql_field_seek)delimiter(')>operator(,)
               string<delimiter(')content(fbsql_field_table)delimiter(')>operator(,)
               string<delimiter(')content(fbsql_field_type)delimiter(')>operator(,)
               string<delimiter(')content(fbsql_free_result)delimiter(')>operator(,)
               string<delimiter(')content(fbsql_get_autostart_info)delimiter(')>operator(,)
               string<delimiter(')content(fbsql_hostname)delimiter(')>operator(,)
               string<delimiter(')content(fbsql_insert_id)delimiter(')>operator(,)
               string<delimiter(')content(fbsql_list_dbs)delimiter(')>operator(,)
               string<delimiter(')content(fbsql_list_fields)delimiter(')>operator(,)
               string<delimiter(')content(fbsql_list_tables)delimiter(')>operator(,)
               string<delimiter(')content(fbsql_next_result)delimiter(')>operator(,)
               string<delimiter(')content(fbsql_num_fields)delimiter(')>operator(,)
               string<delimiter(')content(fbsql_num_rows)delimiter(')>operator(,)
               string<delimiter(')content(fbsql_password)delimiter(')>operator(,)
               string<delimiter(')content(fbsql_pconnect)delimiter(')>operator(,)
               string<delimiter(')content(fbsql_query)delimiter(')>operator(,)
               string<delimiter(')content(fbsql_read_blob)delimiter(')>operator(,)
               string<delimiter(')content(fbsql_read_clob)delimiter(')>operator(,)
               string<delimiter(')content(fbsql_result)delimiter(')>operator(,)
               string<delimiter(')content(fbsql_rollback)delimiter(')>operator(,)
               string<delimiter(')content(fbsql_select_db)delimiter(')>operator(,)
               string<delimiter(')content(fbsql_set_lob_mode)delimiter(')>operator(,)
               string<delimiter(')content(fbsql_set_password)delimiter(')>operator(,)
               string<delimiter(')content(fbsql_set_transaction)delimiter(')>operator(,)
               string<delimiter(')content(fbsql_start_db)delimiter(')>operator(,)
               string<delimiter(')content(fbsql_stop_db)delimiter(')>operator(,)
               string<delimiter(')content(fbsql_tablename)delimiter(')>operator(,)
               string<delimiter(')content(fbsql_username)delimiter(')>operator(,)
               string<delimiter(')content(fbsql_warnings)delimiter(')>operator(])operator(,)
 string<delimiter(')content(Function handling)delimiter(')>operator(:) operator([)string<delimiter(')content(call_user_func)delimiter(')>operator(,)
                       string<delimiter(')content(call_user_func_array)delimiter(')>operator(,)
                       string<delimiter(')content(create_function)delimiter(')>operator(,)
                       string<delimiter(')content(func_get_arg)delimiter(')>operator(,)
                       string<delimiter(')content(func_get_args)delimiter(')>operator(,)
                       string<delimiter(')content(func_num_args)delimiter(')>operator(,)
                       string<delimiter(')content(function_exists)delimiter(')>operator(,)
                       string<delimiter(')content(get_defined_functions)delimiter(')>operator(,)
                       string<delimiter(')content(register_shutdown_function)delimiter(')>operator(,)
                       string<delimiter(')content(register_tick_function)delimiter(')>operator(,)
                       string<delimiter(')content(unregister_tick_function)delimiter(')>operator(])operator(,)
 string<delimiter(')content(GMP)delimiter(')>operator(:) operator([)string<delimiter(')content(gmp_abs)delimiter(')>operator(,)
         string<delimiter(')content(gmp_add)delimiter(')>operator(,)
         string<delimiter(')content(gmp_and)delimiter(')>operator(,)
         string<delimiter(')content(gmp_clrbit)delimiter(')>operator(,)
         string<delimiter(')content(gmp_cmp)delimiter(')>operator(,)
         string<delimiter(')content(gmp_com)delimiter(')>operator(,)
         string<delimiter(')content(gmp_div)delimiter(')>operator(,)
         string<delimiter(')content(gmp_div_q)delimiter(')>operator(,)
         string<delimiter(')content(gmp_div_qr)delimiter(')>operator(,)
         string<delimiter(')content(gmp_div_r)delimiter(')>operator(,)
         string<delimiter(')content(gmp_divexact)delimiter(')>operator(,)
         string<delimiter(')content(gmp_fact)delimiter(')>operator(,)
         string<delimiter(')content(gmp_gcd)delimiter(')>operator(,)
         string<delimiter(')content(gmp_gcdext)delimiter(')>operator(,)
         string<delimiter(')content(gmp_hamdist)delimiter(')>operator(,)
         string<delimiter(')content(gmp_init)delimiter(')>operator(,)
         string<delimiter(')content(gmp_intval)delimiter(')>operator(,)
         string<delimiter(')content(gmp_invert)delimiter(')>operator(,)
         string<delimiter(')content(gmp_jacobi)delimiter(')>operator(,)
         string<delimiter(')content(gmp_legendre)delimiter(')>operator(,)
         string<delimiter(')content(gmp_mod)delimiter(')>operator(,)
         string<delimiter(')content(gmp_mul)delimiter(')>operator(,)
         string<delimiter(')content(gmp_neg)delimiter(')>operator(,)
         string<delimiter(')content(gmp_or)delimiter(')>operator(,)
         string<delimiter(')content(gmp_perfect_square)delimiter(')>operator(,)
         string<delimiter(')content(gmp_popcount)delimiter(')>operator(,)
         string<delimiter(')content(gmp_pow)delimiter(')>operator(,)
         string<delimiter(')content(gmp_powm)delimiter(')>operator(,)
         string<delimiter(')content(gmp_prob_prime)delimiter(')>operator(,)
         string<delimiter(')content(gmp_random)delimiter(')>operator(,)
         string<delimiter(')content(gmp_scan0)delimiter(')>operator(,)
         string<delimiter(')content(gmp_scan1)delimiter(')>operator(,)
         string<delimiter(')content(gmp_setbit)delimiter(')>operator(,)
         string<delimiter(')content(gmp_sign)delimiter(')>operator(,)
         string<delimiter(')content(gmp_sqrt)delimiter(')>operator(,)
         string<delimiter(')content(gmp_sqrtrem)delimiter(')>operator(,)
         string<delimiter(')content(gmp_strval)delimiter(')>operator(,)
         string<delimiter(')content(gmp_sub)delimiter(')>operator(,)
         string<delimiter(')content(gmp_xor)delimiter(')>operator(])operator(,)
 string<delimiter(')content(Hyperwave)delimiter(')>operator(:) operator([)string<delimiter(')content(hw_array2objrec)delimiter(')>operator(,)
               string<delimiter(')content(hw_changeobject)delimiter(')>operator(,)
               string<delimiter(')content(hw_children)delimiter(')>operator(,)
               string<delimiter(')content(hw_childrenobj)delimiter(')>operator(,)
               string<delimiter(')content(hw_close)delimiter(')>operator(,)
               string<delimiter(')content(hw_connect)delimiter(')>operator(,)
               string<delimiter(')content(hw_connection_info)delimiter(')>operator(,)
               string<delimiter(')content(hw_cp)delimiter(')>operator(,)
               string<delimiter(')content(hw_deleteobject)delimiter(')>operator(,)
               string<delimiter(')content(hw_docbyanchor)delimiter(')>operator(,)
               string<delimiter(')content(hw_docbyanchorobj)delimiter(')>operator(,)
               string<delimiter(')content(hw_document_attributes)delimiter(')>operator(,)
               string<delimiter(')content(hw_document_bodytag)delimiter(')>operator(,)
               string<delimiter(')content(hw_document_content)delimiter(')>operator(,)
               string<delimiter(')content(hw_document_setcontent)delimiter(')>operator(,)
               string<delimiter(')content(hw_document_size)delimiter(')>operator(,)
               string<delimiter(')content(hw_dummy)delimiter(')>operator(,)
               string<delimiter(')content(hw_edittext)delimiter(')>operator(,)
               string<delimiter(')content(hw_error)delimiter(')>operator(,)
               string<delimiter(')content(hw_errormsg)delimiter(')>operator(,)
               string<delimiter(')content(hw_free_document)delimiter(')>operator(,)
               string<delimiter(')content(hw_getanchors)delimiter(')>operator(,)
               string<delimiter(')content(hw_getanchorsobj)delimiter(')>operator(,)
               string<delimiter(')content(hw_getandlock)delimiter(')>operator(,)
               string<delimiter(')content(hw_getchildcoll)delimiter(')>operator(,)
               string<delimiter(')content(hw_getchildcollobj)delimiter(')>operator(,)
               string<delimiter(')content(hw_getchilddoccoll)delimiter(')>operator(,)
               string<delimiter(')content(hw_getchilddoccollobj)delimiter(')>operator(,)
               string<delimiter(')content(hw_getobject)delimiter(')>operator(,)
               string<delimiter(')content(hw_getobjectbyquery)delimiter(')>operator(,)
               string<delimiter(')content(hw_getobjectbyquerycoll)delimiter(')>operator(,)
               string<delimiter(')content(hw_getobjectbyquerycollobj)delimiter(')>operator(,)
               string<delimiter(')content(hw_getobjectbyqueryobj)delimiter(')>operator(,)
               string<delimiter(')content(hw_getparents)delimiter(')>operator(,)
               string<delimiter(')content(hw_getparentsobj)delimiter(')>operator(,)
               string<delimiter(')content(hw_getrellink)delimiter(')>operator(,)
               string<delimiter(')content(hw_getremote)delimiter(')>operator(,)
               string<delimiter(')content(hw_getremotechildren)delimiter(')>operator(,)
               string<delimiter(')content(hw_getsrcbydestobj)delimiter(')>operator(,)
               string<delimiter(')content(hw_gettext)delimiter(')>operator(,)
               string<delimiter(')content(hw_getusername)delimiter(')>operator(,)
               string<delimiter(')content(hw_identify)delimiter(')>operator(,)
               string<delimiter(')content(hw_incollections)delimiter(')>operator(,)
               string<delimiter(')content(hw_info)delimiter(')>operator(,)
               string<delimiter(')content(hw_inscoll)delimiter(')>operator(,)
               string<delimiter(')content(hw_insdoc)delimiter(')>operator(,)
               string<delimiter(')content(hw_insertanchors)delimiter(')>operator(,)
               string<delimiter(')content(hw_insertdocument)delimiter(')>operator(,)
               string<delimiter(')content(hw_insertobject)delimiter(')>operator(,)
               string<delimiter(')content(hw_mapid)delimiter(')>operator(,)
               string<delimiter(')content(hw_modifyobject)delimiter(')>operator(,)
               string<delimiter(')content(hw_mv)delimiter(')>operator(,)
               string<delimiter(')content(hw_new_document)delimiter(')>operator(,)
               string<delimiter(')content(hw_objrec2array)delimiter(')>operator(,)
               string<delimiter(')content(hw_output_document)delimiter(')>operator(,)
               string<delimiter(')content(hw_pconnect)delimiter(')>operator(,)
               string<delimiter(')content(hw_pipedocument)delimiter(')>operator(,)
               string<delimiter(')content(hw_root)delimiter(')>operator(,)
               string<delimiter(')content(hw_setlinkroot)delimiter(')>operator(,)
               string<delimiter(')content(hw_stat)delimiter(')>operator(,)
               string<delimiter(')content(hw_unlock)delimiter(')>operator(,)
               string<delimiter(')content(hw_who)delimiter(')>operator(])operator(,)
 string<delimiter(')content(Hyperwave API)delimiter(')>operator(:) operator([)string<delimiter(')content(hwapi_hgcsp)delimiter(')>operator(])operator(,)
 string<delimiter(')content(IMAP)delimiter(')>operator(:) operator([)string<delimiter(')content(imap_8bit)delimiter(')>operator(,)
          string<delimiter(')content(imap_alerts)delimiter(')>operator(,)
          string<delimiter(')content(imap_append)delimiter(')>operator(,)
          string<delimiter(')content(imap_base64)delimiter(')>operator(,)
          string<delimiter(')content(imap_binary)delimiter(')>operator(,)
          string<delimiter(')content(imap_body)delimiter(')>operator(,)
          string<delimiter(')content(imap_bodystruct)delimiter(')>operator(,)
          string<delimiter(')content(imap_check)delimiter(')>operator(,)
          string<delimiter(')content(imap_clearflag_full)delimiter(')>operator(,)
          string<delimiter(')content(imap_close)delimiter(')>operator(,)
          string<delimiter(')content(imap_createmailbox)delimiter(')>operator(,)
          string<delimiter(')content(imap_delete)delimiter(')>operator(,)
          string<delimiter(')content(imap_deletemailbox)delimiter(')>operator(,)
          string<delimiter(')content(imap_errors)delimiter(')>operator(,)
          string<delimiter(')content(imap_expunge)delimiter(')>operator(,)
          string<delimiter(')content(imap_fetch_overview)delimiter(')>operator(,)
          string<delimiter(')content(imap_fetchbody)delimiter(')>operator(,)
          string<delimiter(')content(imap_fetchheader)delimiter(')>operator(,)
          string<delimiter(')content(imap_fetchstructure)delimiter(')>operator(,)
          string<delimiter(')content(imap_get_quota)delimiter(')>operator(,)
          string<delimiter(')content(imap_get_quotaroot)delimiter(')>operator(,)
          string<delimiter(')content(imap_getacl)delimiter(')>operator(,)
          string<delimiter(')content(imap_getmailboxes)delimiter(')>operator(,)
          string<delimiter(')content(imap_getsubscribed)delimiter(')>operator(,)
          string<delimiter(')content(imap_header)delimiter(')>operator(,)
          string<delimiter(')content(imap_headerinfo)delimiter(')>operator(,)
          string<delimiter(')content(imap_headers)delimiter(')>operator(,)
          string<delimiter(')content(imap_last_error)delimiter(')>operator(,)
          string<delimiter(')content(imap_list)delimiter(')>operator(,)
          string<delimiter(')content(imap_listmailbox)delimiter(')>operator(,)
          string<delimiter(')content(imap_listscan)delimiter(')>operator(,)
          string<delimiter(')content(imap_listsubscribed)delimiter(')>operator(,)
          string<delimiter(')content(imap_lsub)delimiter(')>operator(,)
          string<delimiter(')content(imap_mail)delimiter(')>operator(,)
          string<delimiter(')content(imap_mail_compose)delimiter(')>operator(,)
          string<delimiter(')content(imap_mail_copy)delimiter(')>operator(,)
          string<delimiter(')content(imap_mail_move)delimiter(')>operator(,)
          string<delimiter(')content(imap_mailboxmsginfo)delimiter(')>operator(,)
          string<delimiter(')content(imap_mime_header_decode)delimiter(')>operator(,)
          string<delimiter(')content(imap_msgno)delimiter(')>operator(,)
          string<delimiter(')content(imap_num_msg)delimiter(')>operator(,)
          string<delimiter(')content(imap_num_recent)delimiter(')>operator(,)
          string<delimiter(')content(imap_open)delimiter(')>operator(,)
          string<delimiter(')content(imap_ping)delimiter(')>operator(,)
          string<delimiter(')content(imap_qprint)delimiter(')>operator(,)
          string<delimiter(')content(imap_renamemailbox)delimiter(')>operator(,)
          string<delimiter(')content(imap_reopen)delimiter(')>operator(,)
          string<delimiter(')content(imap_rfc822_parse_adrlist)delimiter(')>operator(,)
          string<delimiter(')content(imap_rfc822_parse_headers)delimiter(')>operator(,)
          string<delimiter(')content(imap_rfc822_write_address)delimiter(')>operator(,)
          string<delimiter(')content(imap_scanmailbox)delimiter(')>operator(,)
          string<delimiter(')content(imap_search)delimiter(')>operator(,)
          string<delimiter(')content(imap_set_quota)delimiter(')>operator(,)
          string<delimiter(')content(imap_setacl)delimiter(')>operator(,)
          string<delimiter(')content(imap_setflag_full)delimiter(')>operator(,)
          string<delimiter(')content(imap_sort)delimiter(')>operator(,)
          string<delimiter(')content(imap_status)delimiter(')>operator(,)
          string<delimiter(')content(imap_subscribe)delimiter(')>operator(,)
          string<delimiter(')content(imap_thread)delimiter(')>operator(,)
          string<delimiter(')content(imap_timeout)delimiter(')>operator(,)
          string<delimiter(')content(imap_uid)delimiter(')>operator(,)
          string<delimiter(')content(imap_undelete)delimiter(')>operator(,)
          string<delimiter(')content(imap_unsubscribe)delimiter(')>operator(,)
          string<delimiter(')content(imap_utf7_decode)delimiter(')>operator(,)
          string<delimiter(')content(imap_utf7_encode)delimiter(')>operator(,)
          string<delimiter(')content(imap_utf8)delimiter(')>operator(])operator(,)
 string<delimiter(')content(IRC Gateway)delimiter(')>operator(:) operator([)string<delimiter(')content(ircg_channel_mode)delimiter(')>operator(,)
                 string<delimiter(')content(ircg_disconnect)delimiter(')>operator(,)
                 string<delimiter(')content(ircg_eval_ecmascript_params)delimiter(')>operator(,)
                 string<delimiter(')content(ircg_fetch_error_msg)delimiter(')>operator(,)
                 string<delimiter(')content(ircg_get_username)delimiter(')>operator(,)
                 string<delimiter(')content(ircg_html_encode)delimiter(')>operator(,)
                 string<delimiter(')content(ircg_ignore_add)delimiter(')>operator(,)
                 string<delimiter(')content(ircg_ignore_del)delimiter(')>operator(,)
                 string<delimiter(')content(ircg_invite)delimiter(')>operator(,)
                 string<delimiter(')content(ircg_is_conn_alive)delimiter(')>operator(,)
                 string<delimiter(')content(ircg_join)delimiter(')>operator(,)
                 string<delimiter(')content(ircg_kick)delimiter(')>operator(,)
                 string<delimiter(')content(ircg_list)delimiter(')>operator(,)
                 string<delimiter(')content(ircg_lookup_format_messages)delimiter(')>operator(,)
                 string<delimiter(')content(ircg_lusers)delimiter(')>operator(,)
                 string<delimiter(')content(ircg_msg)delimiter(')>operator(,)
                 string<delimiter(')content(ircg_names)delimiter(')>operator(,)
                 string<delimiter(')content(ircg_nick)delimiter(')>operator(,)
                 string<delimiter(')content(ircg_nickname_escape)delimiter(')>operator(,)
                 string<delimiter(')content(ircg_nickname_unescape)delimiter(')>operator(,)
                 string<delimiter(')content(ircg_notice)delimiter(')>operator(,)
                 string<delimiter(')content(ircg_oper)delimiter(')>operator(,)
                 string<delimiter(')content(ircg_part)delimiter(')>operator(,)
                 string<delimiter(')content(ircg_pconnect)delimiter(')>operator(,)
                 string<delimiter(')content(ircg_register_format_messages)delimiter(')>operator(,)
                 string<delimiter(')content(ircg_set_current)delimiter(')>operator(,)
                 string<delimiter(')content(ircg_set_file)delimiter(')>operator(,)
                 string<delimiter(')content(ircg_set_on_die)delimiter(')>operator(,)
                 string<delimiter(')content(ircg_topic)delimiter(')>operator(,)
                 string<delimiter(')content(ircg_who)delimiter(')>operator(,)
                 string<delimiter(')content(ircg_whois)delimiter(')>operator(])operator(,)
 string<delimiter(')content(Image)delimiter(')>operator(:) operator([)string<delimiter(')content(gd_info)delimiter(')>operator(,)
           string<delimiter(')content(getimagesize)delimiter(')>operator(,)
           string<delimiter(')content(image2wbmp)delimiter(')>operator(,)
           string<delimiter(')content(image_type_to_extension)delimiter(')>operator(,)
           string<delimiter(')content(image_type_to_mime_type)delimiter(')>operator(,)
           string<delimiter(')content(imagealphablending)delimiter(')>operator(,)
           string<delimiter(')content(imageantialias)delimiter(')>operator(,)
           string<delimiter(')content(imagearc)delimiter(')>operator(,)
           string<delimiter(')content(imagechar)delimiter(')>operator(,)
           string<delimiter(')content(imagecharup)delimiter(')>operator(,)
           string<delimiter(')content(imagecolorallocate)delimiter(')>operator(,)
           string<delimiter(')content(imagecolorallocatealpha)delimiter(')>operator(,)
           string<delimiter(')content(imagecolorat)delimiter(')>operator(,)
           string<delimiter(')content(imagecolorclosest)delimiter(')>operator(,)
           string<delimiter(')content(imagecolorclosestalpha)delimiter(')>operator(,)
           string<delimiter(')content(imagecolorclosesthwb)delimiter(')>operator(,)
           string<delimiter(')content(imagecolordeallocate)delimiter(')>operator(,)
           string<delimiter(')content(imagecolorexact)delimiter(')>operator(,)
           string<delimiter(')content(imagecolorexactalpha)delimiter(')>operator(,)
           string<delimiter(')content(imagecolormatch)delimiter(')>operator(,)
           string<delimiter(')content(imagecolorresolve)delimiter(')>operator(,)
           string<delimiter(')content(imagecolorresolvealpha)delimiter(')>operator(,)
           string<delimiter(')content(imagecolorset)delimiter(')>operator(,)
           string<delimiter(')content(imagecolorsforindex)delimiter(')>operator(,)
           string<delimiter(')content(imagecolorstotal)delimiter(')>operator(,)
           string<delimiter(')content(imagecolortransparent)delimiter(')>operator(,)
           string<delimiter(')content(imagecopy)delimiter(')>operator(,)
           string<delimiter(')content(imagecopymerge)delimiter(')>operator(,)
           string<delimiter(')content(imagecopymergegray)delimiter(')>operator(,)
           string<delimiter(')content(imagecopyresampled)delimiter(')>operator(,)
           string<delimiter(')content(imagecopyresized)delimiter(')>operator(,)
           string<delimiter(')content(imagecreate)delimiter(')>operator(,)
           string<delimiter(')content(imagecreatefromgd)delimiter(')>operator(,)
           string<delimiter(')content(imagecreatefromgd2)delimiter(')>operator(,)
           string<delimiter(')content(imagecreatefromgd2part)delimiter(')>operator(,)
           string<delimiter(')content(imagecreatefromgif)delimiter(')>operator(,)
           string<delimiter(')content(imagecreatefromjpeg)delimiter(')>operator(,)
           string<delimiter(')content(imagecreatefrompng)delimiter(')>operator(,)
           string<delimiter(')content(imagecreatefromstring)delimiter(')>operator(,)
           string<delimiter(')content(imagecreatefromwbmp)delimiter(')>operator(,)
           string<delimiter(')content(imagecreatefromxbm)delimiter(')>operator(,)
           string<delimiter(')content(imagecreatefromxpm)delimiter(')>operator(,)
           string<delimiter(')content(imagecreatetruecolor)delimiter(')>operator(,)
           string<delimiter(')content(imagedashedline)delimiter(')>operator(,)
           string<delimiter(')content(imagedestroy)delimiter(')>operator(,)
           string<delimiter(')content(imageellipse)delimiter(')>operator(,)
           string<delimiter(')content(imagefill)delimiter(')>operator(,)
           string<delimiter(')content(imagefilledarc)delimiter(')>operator(,)
           string<delimiter(')content(imagefilledellipse)delimiter(')>operator(,)
           string<delimiter(')content(imagefilledpolygon)delimiter(')>operator(,)
           string<delimiter(')content(imagefilledrectangle)delimiter(')>operator(,)
           string<delimiter(')content(imagefilltoborder)delimiter(')>operator(,)
           string<delimiter(')content(imagefilter)delimiter(')>operator(,)
           string<delimiter(')content(imagefontheight)delimiter(')>operator(,)
           string<delimiter(')content(imagefontwidth)delimiter(')>operator(,)
           string<delimiter(')content(imageftbbox)delimiter(')>operator(,)
           string<delimiter(')content(imagefttext)delimiter(')>operator(,)
           string<delimiter(')content(imagegammacorrect)delimiter(')>operator(,)
           string<delimiter(')content(imagegd)delimiter(')>operator(,)
           string<delimiter(')content(imagegd2)delimiter(')>operator(,)
           string<delimiter(')content(imagegif)delimiter(')>operator(,)
           string<delimiter(')content(imageinterlace)delimiter(')>operator(,)
           string<delimiter(')content(imageistruecolor)delimiter(')>operator(,)
           string<delimiter(')content(imagejpeg)delimiter(')>operator(,)
           string<delimiter(')content(imagelayereffect)delimiter(')>operator(,)
           string<delimiter(')content(imageline)delimiter(')>operator(,)
           string<delimiter(')content(imageloadfont)delimiter(')>operator(,)
           string<delimiter(')content(imagepalettecopy)delimiter(')>operator(,)
           string<delimiter(')content(imagepng)delimiter(')>operator(,)
           string<delimiter(')content(imagepolygon)delimiter(')>operator(,)
           string<delimiter(')content(imagepsbbox)delimiter(')>operator(,)
           string<delimiter(')content(imagepsencodefont)delimiter(')>operator(,)
           string<delimiter(')content(imagepsextendfont)delimiter(')>operator(,)
           string<delimiter(')content(imagepsfreefont)delimiter(')>operator(,)
           string<delimiter(')content(imagepsloadfont)delimiter(')>operator(,)
           string<delimiter(')content(imagepsslantfont)delimiter(')>operator(,)
           string<delimiter(')content(imagepstext)delimiter(')>operator(,)
           string<delimiter(')content(imagerectangle)delimiter(')>operator(,)
           string<delimiter(')content(imagerotate)delimiter(')>operator(,)
           string<delimiter(')content(imagesavealpha)delimiter(')>operator(,)
           string<delimiter(')content(imagesetbrush)delimiter(')>operator(,)
           string<delimiter(')content(imagesetpixel)delimiter(')>operator(,)
           string<delimiter(')content(imagesetstyle)delimiter(')>operator(,)
           string<delimiter(')content(imagesetthickness)delimiter(')>operator(,)
           string<delimiter(')content(imagesettile)delimiter(')>operator(,)
           string<delimiter(')content(imagestring)delimiter(')>operator(,)
           string<delimiter(')content(imagestringup)delimiter(')>operator(,)
           string<delimiter(')content(imagesx)delimiter(')>operator(,)
           string<delimiter(')content(imagesy)delimiter(')>operator(,)
           string<delimiter(')content(imagetruecolortopalette)delimiter(')>operator(,)
           string<delimiter(')content(imagettfbbox)delimiter(')>operator(,)
           string<delimiter(')content(imagettftext)delimiter(')>operator(,)
           string<delimiter(')content(imagetypes)delimiter(')>operator(,)
           string<delimiter(')content(imagewbmp)delimiter(')>operator(,)
           string<delimiter(')content(imagexbm)delimiter(')>operator(,)
           string<delimiter(')content(iptcembed)delimiter(')>operator(,)
           string<delimiter(')content(iptcparse)delimiter(')>operator(,)
           string<delimiter(')content(jpeg2wbmp)delimiter(')>operator(,)
           string<delimiter(')content(png2wbmp)delimiter(')>operator(])operator(,)
 string<delimiter(')content(Informix)delimiter(')>operator(:) operator([)string<delimiter(')content(ifx_affected_rows)delimiter(')>operator(,)
              string<delimiter(')content(ifx_blobinfile_mode)delimiter(')>operator(,)
              string<delimiter(')content(ifx_byteasvarchar)delimiter(')>operator(,)
              string<delimiter(')content(ifx_close)delimiter(')>operator(,)
              string<delimiter(')content(ifx_connect)delimiter(')>operator(,)
              string<delimiter(')content(ifx_copy_blob)delimiter(')>operator(,)
              string<delimiter(')content(ifx_create_blob)delimiter(')>operator(,)
              string<delimiter(')content(ifx_create_char)delimiter(')>operator(,)
              string<delimiter(')content(ifx_do)delimiter(')>operator(,)
              string<delimiter(')content(ifx_error)delimiter(')>operator(,)
              string<delimiter(')content(ifx_errormsg)delimiter(')>operator(,)
              string<delimiter(')content(ifx_fetch_row)delimiter(')>operator(,)
              string<delimiter(')content(ifx_fieldproperties)delimiter(')>operator(,)
              string<delimiter(')content(ifx_fieldtypes)delimiter(')>operator(,)
              string<delimiter(')content(ifx_free_blob)delimiter(')>operator(,)
              string<delimiter(')content(ifx_free_char)delimiter(')>operator(,)
              string<delimiter(')content(ifx_free_result)delimiter(')>operator(,)
              string<delimiter(')content(ifx_get_blob)delimiter(')>operator(,)
              string<delimiter(')content(ifx_get_char)delimiter(')>operator(,)
              string<delimiter(')content(ifx_getsqlca)delimiter(')>operator(,)
              string<delimiter(')content(ifx_htmltbl_result)delimiter(')>operator(,)
              string<delimiter(')content(ifx_nullformat)delimiter(')>operator(,)
              string<delimiter(')content(ifx_num_fields)delimiter(')>operator(,)
              string<delimiter(')content(ifx_num_rows)delimiter(')>operator(,)
              string<delimiter(')content(ifx_pconnect)delimiter(')>operator(,)
              string<delimiter(')content(ifx_prepare)delimiter(')>operator(,)
              string<delimiter(')content(ifx_query)delimiter(')>operator(,)
              string<delimiter(')content(ifx_textasvarchar)delimiter(')>operator(,)
              string<delimiter(')content(ifx_update_blob)delimiter(')>operator(,)
              string<delimiter(')content(ifx_update_char)delimiter(')>operator(,)
              string<delimiter(')content(ifxus_close_slob)delimiter(')>operator(,)
              string<delimiter(')content(ifxus_create_slob)delimiter(')>operator(,)
              string<delimiter(')content(ifxus_free_slob)delimiter(')>operator(,)
              string<delimiter(')content(ifxus_open_slob)delimiter(')>operator(,)
              string<delimiter(')content(ifxus_read_slob)delimiter(')>operator(,)
              string<delimiter(')content(ifxus_seek_slob)delimiter(')>operator(,)
              string<delimiter(')content(ifxus_tell_slob)delimiter(')>operator(,)
              string<delimiter(')content(ifxus_write_slob)delimiter(')>operator(])operator(,)
 string<delimiter(')content(Ingres II)delimiter(')>operator(:) operator([)string<delimiter(')content(ingres_autocommit)delimiter(')>operator(,)
               string<delimiter(')content(ingres_close)delimiter(')>operator(,)
               string<delimiter(')content(ingres_commit)delimiter(')>operator(,)
               string<delimiter(')content(ingres_connect)delimiter(')>operator(,)
               string<delimiter(')content(ingres_fetch_array)delimiter(')>operator(,)
               string<delimiter(')content(ingres_fetch_object)delimiter(')>operator(,)
               string<delimiter(')content(ingres_fetch_row)delimiter(')>operator(,)
               string<delimiter(')content(ingres_field_length)delimiter(')>operator(,)
               string<delimiter(')content(ingres_field_name)delimiter(')>operator(,)
               string<delimiter(')content(ingres_field_nullable)delimiter(')>operator(,)
               string<delimiter(')content(ingres_field_precision)delimiter(')>operator(,)
               string<delimiter(')content(ingres_field_scale)delimiter(')>operator(,)
               string<delimiter(')content(ingres_field_type)delimiter(')>operator(,)
               string<delimiter(')content(ingres_num_fields)delimiter(')>operator(,)
               string<delimiter(')content(ingres_num_rows)delimiter(')>operator(,)
               string<delimiter(')content(ingres_pconnect)delimiter(')>operator(,)
               string<delimiter(')content(ingres_query)delimiter(')>operator(,)
               string<delimiter(')content(ingres_rollback)delimiter(')>operator(])operator(,)
 string<delimiter(')content(Java)delimiter(')>operator(:) operator([)string<delimiter(')content(java_last_exception_clear)delimiter(')>operator(,) string<delimiter(')content(java_last_exception_get)delimiter(')>operator(])operator(,)
 string<delimiter(')content(LDAP)delimiter(')>operator(:) operator([)string<delimiter(')content(ldap_8859_to_t61)delimiter(')>operator(,)
          string<delimiter(')content(ldap_add)delimiter(')>operator(,)
          string<delimiter(')content(ldap_bind)delimiter(')>operator(,)
          string<delimiter(')content(ldap_close)delimiter(')>operator(,)
          string<delimiter(')content(ldap_compare)delimiter(')>operator(,)
          string<delimiter(')content(ldap_connect)delimiter(')>operator(,)
          string<delimiter(')content(ldap_count_entries)delimiter(')>operator(,)
          string<delimiter(')content(ldap_delete)delimiter(')>operator(,)
          string<delimiter(')content(ldap_dn2ufn)delimiter(')>operator(,)
          string<delimiter(')content(ldap_err2str)delimiter(')>operator(,)
          string<delimiter(')content(ldap_errno)delimiter(')>operator(,)
          string<delimiter(')content(ldap_error)delimiter(')>operator(,)
          string<delimiter(')content(ldap_explode_dn)delimiter(')>operator(,)
          string<delimiter(')content(ldap_first_attribute)delimiter(')>operator(,)
          string<delimiter(')content(ldap_first_entry)delimiter(')>operator(,)
          string<delimiter(')content(ldap_first_reference)delimiter(')>operator(,)
          string<delimiter(')content(ldap_free_result)delimiter(')>operator(,)
          string<delimiter(')content(ldap_get_attributes)delimiter(')>operator(,)
          string<delimiter(')content(ldap_get_dn)delimiter(')>operator(,)
          string<delimiter(')content(ldap_get_entries)delimiter(')>operator(,)
          string<delimiter(')content(ldap_get_option)delimiter(')>operator(,)
          string<delimiter(')content(ldap_get_values)delimiter(')>operator(,)
          string<delimiter(')content(ldap_get_values_len)delimiter(')>operator(,)
          string<delimiter(')content(ldap_list)delimiter(')>operator(,)
          string<delimiter(')content(ldap_mod_add)delimiter(')>operator(,)
          string<delimiter(')content(ldap_mod_del)delimiter(')>operator(,)
          string<delimiter(')content(ldap_mod_replace)delimiter(')>operator(,)
          string<delimiter(')content(ldap_modify)delimiter(')>operator(,)
          string<delimiter(')content(ldap_next_attribute)delimiter(')>operator(,)
          string<delimiter(')content(ldap_next_entry)delimiter(')>operator(,)
          string<delimiter(')content(ldap_next_reference)delimiter(')>operator(,)
          string<delimiter(')content(ldap_parse_reference)delimiter(')>operator(,)
          string<delimiter(')content(ldap_parse_result)delimiter(')>operator(,)
          string<delimiter(')content(ldap_read)delimiter(')>operator(,)
          string<delimiter(')content(ldap_rename)delimiter(')>operator(,)
          string<delimiter(')content(ldap_sasl_bind)delimiter(')>operator(,)
          string<delimiter(')content(ldap_search)delimiter(')>operator(,)
          string<delimiter(')content(ldap_set_option)delimiter(')>operator(,)
          string<delimiter(')content(ldap_set_rebind_proc)delimiter(')>operator(,)
          string<delimiter(')content(ldap_sort)delimiter(')>operator(,)
          string<delimiter(')content(ldap_start_tls)delimiter(')>operator(,)
          string<delimiter(')content(ldap_t61_to_8859)delimiter(')>operator(,)
          string<delimiter(')content(ldap_unbind)delimiter(')>operator(])operator(,)
 string<delimiter(')content(LZF)delimiter(')>operator(:) operator([)string<delimiter(')content(lzf_compress)delimiter(')>operator(,) string<delimiter(')content(lzf_decompress)delimiter(')>operator(,) string<delimiter(')content(lzf_optimized_for)delimiter(')>operator(])operator(,)
 string<delimiter(')content(Lotus Notes)delimiter(')>operator(:) operator([)string<delimiter(')content(notes_body)delimiter(')>operator(,)
                 string<delimiter(')content(notes_copy_db)delimiter(')>operator(,)
                 string<delimiter(')content(notes_create_db)delimiter(')>operator(,)
                 string<delimiter(')content(notes_create_note)delimiter(')>operator(,)
                 string<delimiter(')content(notes_drop_db)delimiter(')>operator(,)
                 string<delimiter(')content(notes_find_note)delimiter(')>operator(,)
                 string<delimiter(')content(notes_header_info)delimiter(')>operator(,)
                 string<delimiter(')content(notes_list_msgs)delimiter(')>operator(,)
                 string<delimiter(')content(notes_mark_read)delimiter(')>operator(,)
                 string<delimiter(')content(notes_mark_unread)delimiter(')>operator(,)
                 string<delimiter(')content(notes_nav_create)delimiter(')>operator(,)
                 string<delimiter(')content(notes_search)delimiter(')>operator(,)
                 string<delimiter(')content(notes_unread)delimiter(')>operator(,)
                 string<delimiter(')content(notes_version)delimiter(')>operator(])operator(,)
 string<delimiter(')content(MCAL)delimiter(')>operator(:) operator([)string<delimiter(')content(mcal_append_event)delimiter(')>operator(,)
          string<delimiter(')content(mcal_close)delimiter(')>operator(,)
          string<delimiter(')content(mcal_create_calendar)delimiter(')>operator(,)
          string<delimiter(')content(mcal_date_compare)delimiter(')>operator(,)
          string<delimiter(')content(mcal_date_valid)delimiter(')>operator(,)
          string<delimiter(')content(mcal_day_of_week)delimiter(')>operator(,)
          string<delimiter(')content(mcal_day_of_year)delimiter(')>operator(,)
          string<delimiter(')content(mcal_days_in_month)delimiter(')>operator(,)
          string<delimiter(')content(mcal_delete_calendar)delimiter(')>operator(,)
          string<delimiter(')content(mcal_delete_event)delimiter(')>operator(,)
          string<delimiter(')content(mcal_event_add_attribute)delimiter(')>operator(,)
          string<delimiter(')content(mcal_event_init)delimiter(')>operator(,)
          string<delimiter(')content(mcal_event_set_alarm)delimiter(')>operator(,)
          string<delimiter(')content(mcal_event_set_category)delimiter(')>operator(,)
          string<delimiter(')content(mcal_event_set_class)delimiter(')>operator(,)
          string<delimiter(')content(mcal_event_set_description)delimiter(')>operator(,)
          string<delimiter(')content(mcal_event_set_end)delimiter(')>operator(,)
          string<delimiter(')content(mcal_event_set_recur_daily)delimiter(')>operator(,)
          string<delimiter(')content(mcal_event_set_recur_monthly_mday)delimiter(')>operator(,)
          string<delimiter(')content(mcal_event_set_recur_monthly_wday)delimiter(')>operator(,)
          string<delimiter(')content(mcal_event_set_recur_none)delimiter(')>operator(,)
          string<delimiter(')content(mcal_event_set_recur_weekly)delimiter(')>operator(,)
          string<delimiter(')content(mcal_event_set_recur_yearly)delimiter(')>operator(,)
          string<delimiter(')content(mcal_event_set_start)delimiter(')>operator(,)
          string<delimiter(')content(mcal_event_set_title)delimiter(')>operator(,)
          string<delimiter(')content(mcal_expunge)delimiter(')>operator(,)
          string<delimiter(')content(mcal_fetch_current_stream_event)delimiter(')>operator(,)
          string<delimiter(')content(mcal_fetch_event)delimiter(')>operator(,)
          string<delimiter(')content(mcal_is_leap_year)delimiter(')>operator(,)
          string<delimiter(')content(mcal_list_alarms)delimiter(')>operator(,)
          string<delimiter(')content(mcal_list_events)delimiter(')>operator(,)
          string<delimiter(')content(mcal_next_recurrence)delimiter(')>operator(,)
          string<delimiter(')content(mcal_open)delimiter(')>operator(,)
          string<delimiter(')content(mcal_popen)delimiter(')>operator(,)
          string<delimiter(')content(mcal_rename_calendar)delimiter(')>operator(,)
          string<delimiter(')content(mcal_reopen)delimiter(')>operator(,)
          string<delimiter(')content(mcal_snooze)delimiter(')>operator(,)
          string<delimiter(')content(mcal_store_event)delimiter(')>operator(,)
          string<delimiter(')content(mcal_time_valid)delimiter(')>operator(,)
          string<delimiter(')content(mcal_week_of_year)delimiter(')>operator(])operator(,)
 string<delimiter(')content(MS SQL Server)delimiter(')>operator(:) operator([)string<delimiter(')content(mssql_bind)delimiter(')>operator(,)
                   string<delimiter(')content(mssql_close)delimiter(')>operator(,)
                   string<delimiter(')content(mssql_connect)delimiter(')>operator(,)
                   string<delimiter(')content(mssql_data_seek)delimiter(')>operator(,)
                   string<delimiter(')content(mssql_execute)delimiter(')>operator(,)
                   string<delimiter(')content(mssql_fetch_array)delimiter(')>operator(,)
                   string<delimiter(')content(mssql_fetch_assoc)delimiter(')>operator(,)
                   string<delimiter(')content(mssql_fetch_batch)delimiter(')>operator(,)
                   string<delimiter(')content(mssql_fetch_field)delimiter(')>operator(,)
                   string<delimiter(')content(mssql_fetch_object)delimiter(')>operator(,)
                   string<delimiter(')content(mssql_fetch_row)delimiter(')>operator(,)
                   string<delimiter(')content(mssql_field_length)delimiter(')>operator(,)
                   string<delimiter(')content(mssql_field_name)delimiter(')>operator(,)
                   string<delimiter(')content(mssql_field_seek)delimiter(')>operator(,)
                   string<delimiter(')content(mssql_field_type)delimiter(')>operator(,)
                   string<delimiter(')content(mssql_free_result)delimiter(')>operator(,)
                   string<delimiter(')content(mssql_free_statement)delimiter(')>operator(,)
                   string<delimiter(')content(mssql_get_last_message)delimiter(')>operator(,)
                   string<delimiter(')content(mssql_guid_string)delimiter(')>operator(,)
                   string<delimiter(')content(mssql_init)delimiter(')>operator(,)
                   string<delimiter(')content(mssql_min_error_severity)delimiter(')>operator(,)
                   string<delimiter(')content(mssql_min_message_severity)delimiter(')>operator(,)
                   string<delimiter(')content(mssql_next_result)delimiter(')>operator(,)
                   string<delimiter(')content(mssql_num_fields)delimiter(')>operator(,)
                   string<delimiter(')content(mssql_num_rows)delimiter(')>operator(,)
                   string<delimiter(')content(mssql_pconnect)delimiter(')>operator(,)
                   string<delimiter(')content(mssql_query)delimiter(')>operator(,)
                   string<delimiter(')content(mssql_result)delimiter(')>operator(,)
                   string<delimiter(')content(mssql_rows_affected)delimiter(')>operator(,)
                   string<delimiter(')content(mssql_select_db)delimiter(')>operator(])operator(,)
 string<delimiter(')content(Mail)delimiter(')>operator(:) operator([)string<delimiter(')content(ezmlm_hash)delimiter(')>operator(,) string<delimiter(')content(mail)delimiter(')>operator(])operator(,)
 string<delimiter(')content(Math)delimiter(')>operator(:) operator([)string<delimiter(')content(abs)delimiter(')>operator(,)
          string<delimiter(')content(acos)delimiter(')>operator(,)
          string<delimiter(')content(acosh)delimiter(')>operator(,)
          string<delimiter(')content(asin)delimiter(')>operator(,)
          string<delimiter(')content(asinh)delimiter(')>operator(,)
          string<delimiter(')content(atan)delimiter(')>operator(,)
          string<delimiter(')content(atan2)delimiter(')>operator(,)
          string<delimiter(')content(atanh)delimiter(')>operator(,)
          string<delimiter(')content(base_convert)delimiter(')>operator(,)
          string<delimiter(')content(bindec)delimiter(')>operator(,)
          string<delimiter(')content(ceil)delimiter(')>operator(,)
          string<delimiter(')content(cos)delimiter(')>operator(,)
          string<delimiter(')content(cosh)delimiter(')>operator(,)
          string<delimiter(')content(decbin)delimiter(')>operator(,)
          string<delimiter(')content(dechex)delimiter(')>operator(,)
          string<delimiter(')content(decoct)delimiter(')>operator(,)
          string<delimiter(')content(deg2rad)delimiter(')>operator(,)
          string<delimiter(')content(exp)delimiter(')>operator(,)
          string<delimiter(')content(expm1)delimiter(')>operator(,)
          string<delimiter(')content(floor)delimiter(')>operator(,)
          string<delimiter(')content(fmod)delimiter(')>operator(,)
          string<delimiter(')content(getrandmax)delimiter(')>operator(,)
          string<delimiter(')content(hexdec)delimiter(')>operator(,)
          string<delimiter(')content(hypot)delimiter(')>operator(,)
          string<delimiter(')content(is_finite)delimiter(')>operator(,)
          string<delimiter(')content(is_infinite)delimiter(')>operator(,)
          string<delimiter(')content(is_nan)delimiter(')>operator(,)
          string<delimiter(')content(lcg_value)delimiter(')>operator(,)
          string<delimiter(')content(log)delimiter(')>operator(,)
          string<delimiter(')content(log10)delimiter(')>operator(,)
          string<delimiter(')content(log1p)delimiter(')>operator(,)
          string<delimiter(')content(max)delimiter(')>operator(,)
          string<delimiter(')content(min)delimiter(')>operator(,)
          string<delimiter(')content(mt_getrandmax)delimiter(')>operator(,)
          string<delimiter(')content(mt_rand)delimiter(')>operator(,)
          string<delimiter(')content(mt_srand)delimiter(')>operator(,)
          string<delimiter(')content(octdec)delimiter(')>operator(,)
          string<delimiter(')content(pi)delimiter(')>operator(,)
          string<delimiter(')content(pow)delimiter(')>operator(,)
          string<delimiter(')content(rad2deg)delimiter(')>operator(,)
          string<delimiter(')content(rand)delimiter(')>operator(,)
          string<delimiter(')content(round)delimiter(')>operator(,)
          string<delimiter(')content(sin)delimiter(')>operator(,)
          string<delimiter(')content(sinh)delimiter(')>operator(,)
          string<delimiter(')content(sqrt)delimiter(')>operator(,)
          string<delimiter(')content(srand)delimiter(')>operator(,)
          string<delimiter(')content(tan)delimiter(')>operator(,)
          string<delimiter(')content(tanh)delimiter(')>operator(])operator(,)
 string<delimiter(')content(Memcache)delimiter(')>operator(:) operator([)string<delimiter(')content(memcache_debug)delimiter(')>operator(])operator(,)
 string<delimiter(')content(Mimetype)delimiter(')>operator(:) operator([)string<delimiter(')content(mime_content_type)delimiter(')>operator(])operator(,)
 string<delimiter(')content(Ming (flash\))delimiter(')>operator(:) operator([)string<delimiter(')content(ming_setcubicthreshold)delimiter(')>operator(,)
                  string<delimiter(')content(ming_setscale)delimiter(')>operator(,)
                  string<delimiter(')content(ming_useswfversion)delimiter(')>operator(,)
                  string<delimiter(')content(swfaction)delimiter(')>operator(,)
                  string<delimiter(')content(swfbitmap)delimiter(')>operator(,)
                  string<delimiter(')content(swfbutton)delimiter(')>operator(,)
                  string<delimiter(')content(swffill)delimiter(')>operator(,)
                  string<delimiter(')content(swffont)delimiter(')>operator(,)
                  string<delimiter(')content(swfgradient)delimiter(')>operator(,)
                  string<delimiter(')content(swfmorph)delimiter(')>operator(,)
                  string<delimiter(')content(swfmovie)delimiter(')>operator(,)
                  string<delimiter(')content(swfshape)delimiter(')>operator(,)
                  string<delimiter(')content(swfsprite)delimiter(')>operator(,)
                  string<delimiter(')content(swftext)delimiter(')>operator(,)
                  string<delimiter(')content(swftextfield)delimiter(')>operator(])operator(,)
 string<delimiter(')content(Misc.)delimiter(')>operator(:) operator([)string<delimiter(')content(connection_aborted)delimiter(')>operator(,)
           string<delimiter(')content(connection_status)delimiter(')>operator(,)
           string<delimiter(')content(connection_timeout)delimiter(')>operator(,)
           string<delimiter(')content(constant)delimiter(')>operator(,)
           string<delimiter(')content(define)delimiter(')>operator(,)
           string<delimiter(')content(defined)delimiter(')>operator(,)
           string<delimiter(')content(die)delimiter(')>operator(,)
           string<delimiter(')content(eval)delimiter(')>operator(,)
           string<delimiter(')content(exit)delimiter(')>operator(,)
           string<delimiter(')content(get_browser)delimiter(')>operator(,)
           string<delimiter(')content(highlight_file)delimiter(')>operator(,)
           string<delimiter(')content(highlight_string)delimiter(')>operator(,)
           string<delimiter(')content(ignore_user_abort)delimiter(')>operator(,)
           string<delimiter(')content(pack)delimiter(')>operator(,)
           string<delimiter(')content(php_check_syntax)delimiter(')>operator(,)
           string<delimiter(')content(php_strip_whitespace)delimiter(')>operator(,)
           string<delimiter(')content(show_source)delimiter(')>operator(,)
           string<delimiter(')content(sleep)delimiter(')>operator(,)
           string<delimiter(')content(time_nanosleep)delimiter(')>operator(,)
           string<delimiter(')content(uniqid)delimiter(')>operator(,)
           string<delimiter(')content(unpack)delimiter(')>operator(,)
           string<delimiter(')content(usleep)delimiter(')>operator(])operator(,)
 string<delimiter(')content(Msession)delimiter(')>operator(:) operator([)string<delimiter(')content(msession_connect)delimiter(')>operator(,)
              string<delimiter(')content(msession_count)delimiter(')>operator(,)
              string<delimiter(')content(msession_create)delimiter(')>operator(,)
              string<delimiter(')content(msession_destroy)delimiter(')>operator(,)
              string<delimiter(')content(msession_disconnect)delimiter(')>operator(,)
              string<delimiter(')content(msession_find)delimiter(')>operator(,)
              string<delimiter(')content(msession_get)delimiter(')>operator(,)
              string<delimiter(')content(msession_get_array)delimiter(')>operator(,)
              string<delimiter(')content(msession_get_data)delimiter(')>operator(,)
              string<delimiter(')content(msession_inc)delimiter(')>operator(,)
              string<delimiter(')content(msession_list)delimiter(')>operator(,)
              string<delimiter(')content(msession_listvar)delimiter(')>operator(,)
              string<delimiter(')content(msession_lock)delimiter(')>operator(,)
              string<delimiter(')content(msession_plugin)delimiter(')>operator(,)
              string<delimiter(')content(msession_randstr)delimiter(')>operator(,)
              string<delimiter(')content(msession_set)delimiter(')>operator(,)
              string<delimiter(')content(msession_set_array)delimiter(')>operator(,)
              string<delimiter(')content(msession_set_data)delimiter(')>operator(,)
              string<delimiter(')content(msession_timeout)delimiter(')>operator(,)
              string<delimiter(')content(msession_uniq)delimiter(')>operator(,)
              string<delimiter(')content(msession_unlock)delimiter(')>operator(])operator(,)
 string<delimiter(')content(Multibyte String)delimiter(')>operator(:) operator([)string<delimiter(')content(mb_convert_case)delimiter(')>operator(,)
                      string<delimiter(')content(mb_convert_encoding)delimiter(')>operator(,)
                      string<delimiter(')content(mb_convert_kana)delimiter(')>operator(,)
                      string<delimiter(')content(mb_convert_variables)delimiter(')>operator(,)
                      string<delimiter(')content(mb_decode_mimeheader)delimiter(')>operator(,)
                      string<delimiter(')content(mb_decode_numericentity)delimiter(')>operator(,)
                      string<delimiter(')content(mb_detect_encoding)delimiter(')>operator(,)
                      string<delimiter(')content(mb_detect_order)delimiter(')>operator(,)
                      string<delimiter(')content(mb_encode_mimeheader)delimiter(')>operator(,)
                      string<delimiter(')content(mb_encode_numericentity)delimiter(')>operator(,)
                      string<delimiter(')content(mb_ereg)delimiter(')>operator(,)
                      string<delimiter(')content(mb_ereg_match)delimiter(')>operator(,)
                      string<delimiter(')content(mb_ereg_replace)delimiter(')>operator(,)
                      string<delimiter(')content(mb_ereg_search)delimiter(')>operator(,)
                      string<delimiter(')content(mb_ereg_search_getpos)delimiter(')>operator(,)
                      string<delimiter(')content(mb_ereg_search_getregs)delimiter(')>operator(,)
                      string<delimiter(')content(mb_ereg_search_init)delimiter(')>operator(,)
                      string<delimiter(')content(mb_ereg_search_pos)delimiter(')>operator(,)
                      string<delimiter(')content(mb_ereg_search_regs)delimiter(')>operator(,)
                      string<delimiter(')content(mb_ereg_search_setpos)delimiter(')>operator(,)
                      string<delimiter(')content(mb_eregi)delimiter(')>operator(,)
                      string<delimiter(')content(mb_eregi_replace)delimiter(')>operator(,)
                      string<delimiter(')content(mb_get_info)delimiter(')>operator(,)
                      string<delimiter(')content(mb_http_input)delimiter(')>operator(,)
                      string<delimiter(')content(mb_http_output)delimiter(')>operator(,)
                      string<delimiter(')content(mb_internal_encoding)delimiter(')>operator(,)
                      string<delimiter(')content(mb_language)delimiter(')>operator(,)
                      string<delimiter(')content(mb_list_encodings)delimiter(')>operator(,)
                      string<delimiter(')content(mb_output_handler)delimiter(')>operator(,)
                      string<delimiter(')content(mb_parse_str)delimiter(')>operator(,)
                      string<delimiter(')content(mb_preferred_mime_name)delimiter(')>operator(,)
                      string<delimiter(')content(mb_regex_encoding)delimiter(')>operator(,)
                      string<delimiter(')content(mb_regex_set_options)delimiter(')>operator(,)
                      string<delimiter(')content(mb_send_mail)delimiter(')>operator(,)
                      string<delimiter(')content(mb_split)delimiter(')>operator(,)
                      string<delimiter(')content(mb_strcut)delimiter(')>operator(,)
                      string<delimiter(')content(mb_strimwidth)delimiter(')>operator(,)
                      string<delimiter(')content(mb_strlen)delimiter(')>operator(,)
                      string<delimiter(')content(mb_strpos)delimiter(')>operator(,)
                      string<delimiter(')content(mb_strrpos)delimiter(')>operator(,)
                      string<delimiter(')content(mb_strtolower)delimiter(')>operator(,)
                      string<delimiter(')content(mb_strtoupper)delimiter(')>operator(,)
                      string<delimiter(')content(mb_strwidth)delimiter(')>operator(,)
                      string<delimiter(')content(mb_substitute_character)delimiter(')>operator(,)
                      string<delimiter(')content(mb_substr)delimiter(')>operator(,)
                      string<delimiter(')content(mb_substr_count)delimiter(')>operator(])operator(,)
 string<delimiter(')content(MySQL)delimiter(')>operator(:) operator([)string<delimiter(')content(mysql_affected_rows)delimiter(')>operator(,)
           string<delimiter(')content(mysql_change_user)delimiter(')>operator(,)
           string<delimiter(')content(mysql_client_encoding)delimiter(')>operator(,)
           string<delimiter(')content(mysql_close)delimiter(')>operator(,)
           string<delimiter(')content(mysql_connect)delimiter(')>operator(,)
           string<delimiter(')content(mysql_create_db)delimiter(')>operator(,)
           string<delimiter(')content(mysql_data_seek)delimiter(')>operator(,)
           string<delimiter(')content(mysql_db_name)delimiter(')>operator(,)
           string<delimiter(')content(mysql_db_query)delimiter(')>operator(,)
           string<delimiter(')content(mysql_drop_db)delimiter(')>operator(,)
           string<delimiter(')content(mysql_errno)delimiter(')>operator(,)
           string<delimiter(')content(mysql_error)delimiter(')>operator(,)
           string<delimiter(')content(mysql_escape_string)delimiter(')>operator(,)
           string<delimiter(')content(mysql_fetch_array)delimiter(')>operator(,)
           string<delimiter(')content(mysql_fetch_assoc)delimiter(')>operator(,)
           string<delimiter(')content(mysql_fetch_field)delimiter(')>operator(,)
           string<delimiter(')content(mysql_fetch_lengths)delimiter(')>operator(,)
           string<delimiter(')content(mysql_fetch_object)delimiter(')>operator(,)
           string<delimiter(')content(mysql_fetch_row)delimiter(')>operator(,)
           string<delimiter(')content(mysql_field_flags)delimiter(')>operator(,)
           string<delimiter(')content(mysql_field_len)delimiter(')>operator(,)
           string<delimiter(')content(mysql_field_name)delimiter(')>operator(,)
           string<delimiter(')content(mysql_field_seek)delimiter(')>operator(,)
           string<delimiter(')content(mysql_field_table)delimiter(')>operator(,)
           string<delimiter(')content(mysql_field_type)delimiter(')>operator(,)
           string<delimiter(')content(mysql_free_result)delimiter(')>operator(,)
           string<delimiter(')content(mysql_get_client_info)delimiter(')>operator(,)
           string<delimiter(')content(mysql_get_host_info)delimiter(')>operator(,)
           string<delimiter(')content(mysql_get_proto_info)delimiter(')>operator(,)
           string<delimiter(')content(mysql_get_server_info)delimiter(')>operator(,)
           string<delimiter(')content(mysql_info)delimiter(')>operator(,)
           string<delimiter(')content(mysql_insert_id)delimiter(')>operator(,)
           string<delimiter(')content(mysql_list_dbs)delimiter(')>operator(,)
           string<delimiter(')content(mysql_list_fields)delimiter(')>operator(,)
           string<delimiter(')content(mysql_list_processes)delimiter(')>operator(,)
           string<delimiter(')content(mysql_list_tables)delimiter(')>operator(,)
           string<delimiter(')content(mysql_num_fields)delimiter(')>operator(,)
           string<delimiter(')content(mysql_num_rows)delimiter(')>operator(,)
           string<delimiter(')content(mysql_pconnect)delimiter(')>operator(,)
           string<delimiter(')content(mysql_ping)delimiter(')>operator(,)
           string<delimiter(')content(mysql_query)delimiter(')>operator(,)
           string<delimiter(')content(mysql_real_escape_string)delimiter(')>operator(,)
           string<delimiter(')content(mysql_result)delimiter(')>operator(,)
           string<delimiter(')content(mysql_select_db)delimiter(')>operator(,)
           string<delimiter(')content(mysql_stat)delimiter(')>operator(,)
           string<delimiter(')content(mysql_tablename)delimiter(')>operator(,)
           string<delimiter(')content(mysql_thread_id)delimiter(')>operator(,)
           string<delimiter(')content(mysql_unbuffered_query)delimiter(')>operator(])operator(,)
 string<delimiter(')content(NSAPI)delimiter(')>operator(:) operator([)string<delimiter(')content(nsapi_request_headers)delimiter(')>operator(,) string<delimiter(')content(nsapi_response_headers)delimiter(')>operator(,) string<delimiter(')content(nsapi_virtual)delimiter(')>operator(])operator(,)
 string<delimiter(')content(Ncurses)delimiter(')>operator(:) operator([)string<delimiter(')content(ncurses_addch)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_addchnstr)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_addchstr)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_addnstr)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_addstr)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_assume_default_colors)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_attroff)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_attron)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_attrset)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_baudrate)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_beep)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_bkgd)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_bkgdset)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_border)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_bottom_panel)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_can_change_color)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_cbreak)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_clear)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_clrtobot)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_clrtoeol)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_color_content)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_color_set)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_curs_set)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_def_prog_mode)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_def_shell_mode)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_define_key)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_del_panel)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_delay_output)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_delch)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_deleteln)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_delwin)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_doupdate)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_echo)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_echochar)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_end)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_erase)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_erasechar)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_filter)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_flash)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_flushinp)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_getch)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_getmaxyx)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_getmouse)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_getyx)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_halfdelay)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_has_colors)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_has_ic)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_has_il)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_has_key)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_hide_panel)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_hline)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_inch)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_init)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_init_color)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_init_pair)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_insch)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_insdelln)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_insertln)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_insstr)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_instr)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_isendwin)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_keyok)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_keypad)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_killchar)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_longname)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_meta)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_mouse_trafo)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_mouseinterval)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_mousemask)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_move)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_move_panel)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_mvaddch)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_mvaddchnstr)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_mvaddchstr)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_mvaddnstr)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_mvaddstr)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_mvcur)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_mvdelch)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_mvgetch)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_mvhline)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_mvinch)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_mvvline)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_mvwaddstr)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_napms)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_new_panel)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_newpad)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_newwin)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_nl)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_nocbreak)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_noecho)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_nonl)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_noqiflush)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_noraw)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_pair_content)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_panel_above)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_panel_below)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_panel_window)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_pnoutrefresh)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_prefresh)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_putp)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_qiflush)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_raw)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_refresh)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_replace_panel)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_reset_prog_mode)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_reset_shell_mode)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_resetty)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_savetty)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_scr_dump)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_scr_init)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_scr_restore)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_scr_set)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_scrl)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_show_panel)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_slk_attr)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_slk_attroff)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_slk_attron)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_slk_attrset)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_slk_clear)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_slk_color)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_slk_init)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_slk_noutrefresh)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_slk_refresh)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_slk_restore)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_slk_set)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_slk_touch)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_standend)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_standout)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_start_color)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_termattrs)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_termname)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_timeout)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_top_panel)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_typeahead)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_ungetch)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_ungetmouse)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_update_panels)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_use_default_colors)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_use_env)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_use_extended_names)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_vidattr)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_vline)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_waddch)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_waddstr)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_wattroff)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_wattron)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_wattrset)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_wborder)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_wclear)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_wcolor_set)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_werase)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_wgetch)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_whline)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_wmouse_trafo)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_wmove)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_wnoutrefresh)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_wrefresh)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_wstandend)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_wstandout)delimiter(')>operator(,)
             string<delimiter(')content(ncurses_wvline)delimiter(')>operator(])operator(,)
 string<delimiter(')content(Network)delimiter(')>operator(:) operator([)string<delimiter(')content(checkdnsrr)delimiter(')>operator(,)
             string<delimiter(')content(closelog)delimiter(')>operator(,)
             string<delimiter(')content(debugger_off)delimiter(')>operator(,)
             string<delimiter(')content(debugger_on)delimiter(')>operator(,)
             string<delimiter(')content(define_syslog_variables)delimiter(')>operator(,)
             string<delimiter(')content(dns_check_record)delimiter(')>operator(,)
             string<delimiter(')content(dns_get_mx)delimiter(')>operator(,)
             string<delimiter(')content(dns_get_record)delimiter(')>operator(,)
             string<delimiter(')content(fsockopen)delimiter(')>operator(,)
             string<delimiter(')content(gethostbyaddr)delimiter(')>operator(,)
             string<delimiter(')content(gethostbyname)delimiter(')>operator(,)
             string<delimiter(')content(gethostbynamel)delimiter(')>operator(,)
             string<delimiter(')content(getmxrr)delimiter(')>operator(,)
             string<delimiter(')content(getprotobyname)delimiter(')>operator(,)
             string<delimiter(')content(getprotobynumber)delimiter(')>operator(,)
             string<delimiter(')content(getservbyname)delimiter(')>operator(,)
             string<delimiter(')content(getservbyport)delimiter(')>operator(,)
             string<delimiter(')content(header)delimiter(')>operator(,)
             string<delimiter(')content(headers_list)delimiter(')>operator(,)
             string<delimiter(')content(headers_sent)delimiter(')>operator(,)
             string<delimiter(')content(inet_ntop)delimiter(')>operator(,)
             string<delimiter(')content(inet_pton)delimiter(')>operator(,)
             string<delimiter(')content(ip2long)delimiter(')>operator(,)
             string<delimiter(')content(long2ip)delimiter(')>operator(,)
             string<delimiter(')content(openlog)delimiter(')>operator(,)
             string<delimiter(')content(pfsockopen)delimiter(')>operator(,)
             string<delimiter(')content(setcookie)delimiter(')>operator(,)
             string<delimiter(')content(setrawcookie)delimiter(')>operator(,)
             string<delimiter(')content(socket_get_status)delimiter(')>operator(,)
             string<delimiter(')content(socket_set_blocking)delimiter(')>operator(,)
             string<delimiter(')content(socket_set_timeout)delimiter(')>operator(,)
             string<delimiter(')content(syslog)delimiter(')>operator(])operator(,)
 string<delimiter(')content(OCI8)delimiter(')>operator(:) operator([)string<delimiter(')content(oci_bind_by_name)delimiter(')>operator(,)
          string<delimiter(')content(oci_cancel)delimiter(')>operator(,)
          string<delimiter(')content(oci_close)delimiter(')>operator(,)
          string<delimiter(')content(oci_commit)delimiter(')>operator(,)
          string<delimiter(')content(oci_connect)delimiter(')>operator(,)
          string<delimiter(')content(oci_define_by_name)delimiter(')>operator(,)
          string<delimiter(')content(oci_error)delimiter(')>operator(,)
          string<delimiter(')content(oci_execute)delimiter(')>operator(,)
          string<delimiter(')content(oci_fetch)delimiter(')>operator(,)
          string<delimiter(')content(oci_fetch_all)delimiter(')>operator(,)
          string<delimiter(')content(oci_fetch_array)delimiter(')>operator(,)
          string<delimiter(')content(oci_fetch_assoc)delimiter(')>operator(,)
          string<delimiter(')content(oci_fetch_object)delimiter(')>operator(,)
          string<delimiter(')content(oci_fetch_row)delimiter(')>operator(,)
          string<delimiter(')content(oci_field_is_null)delimiter(')>operator(,)
          string<delimiter(')content(oci_field_name)delimiter(')>operator(,)
          string<delimiter(')content(oci_field_precision)delimiter(')>operator(,)
          string<delimiter(')content(oci_field_scale)delimiter(')>operator(,)
          string<delimiter(')content(oci_field_size)delimiter(')>operator(,)
          string<delimiter(')content(oci_field_type)delimiter(')>operator(,)
          string<delimiter(')content(oci_field_type_raw)delimiter(')>operator(,)
          string<delimiter(')content(oci_free_statement)delimiter(')>operator(,)
          string<delimiter(')content(oci_internal_debug)delimiter(')>operator(,)
          string<delimiter(')content(oci_lob_copy)delimiter(')>operator(,)
          string<delimiter(')content(oci_lob_is_equal)delimiter(')>operator(,)
          string<delimiter(')content(oci_new_collection)delimiter(')>operator(,)
          string<delimiter(')content(oci_new_connect)delimiter(')>operator(,)
          string<delimiter(')content(oci_new_cursor)delimiter(')>operator(,)
          string<delimiter(')content(oci_new_descriptor)delimiter(')>operator(,)
          string<delimiter(')content(oci_num_fields)delimiter(')>operator(,)
          string<delimiter(')content(oci_num_rows)delimiter(')>operator(,)
          string<delimiter(')content(oci_parse)delimiter(')>operator(,)
          string<delimiter(')content(oci_password_change)delimiter(')>operator(,)
          string<delimiter(')content(oci_pconnect)delimiter(')>operator(,)
          string<delimiter(')content(oci_result)delimiter(')>operator(,)
          string<delimiter(')content(oci_rollback)delimiter(')>operator(,)
          string<delimiter(')content(oci_server_version)delimiter(')>operator(,)
          string<delimiter(')content(oci_set_prefetch)delimiter(')>operator(,)
          string<delimiter(')content(oci_statement_type)delimiter(')>operator(,)
          string<delimiter(')content(ocibindbyname)delimiter(')>operator(,)
          string<delimiter(')content(ocicancel)delimiter(')>operator(,)
          string<delimiter(')content(ocicloselob)delimiter(')>operator(,)
          string<delimiter(')content(ocicollappend)delimiter(')>operator(,)
          string<delimiter(')content(ocicollassign)delimiter(')>operator(,)
          string<delimiter(')content(ocicollassignelem)delimiter(')>operator(,)
          string<delimiter(')content(ocicollgetelem)delimiter(')>operator(,)
          string<delimiter(')content(ocicollmax)delimiter(')>operator(,)
          string<delimiter(')content(ocicollsize)delimiter(')>operator(,)
          string<delimiter(')content(ocicolltrim)delimiter(')>operator(,)
          string<delimiter(')content(ocicolumnisnull)delimiter(')>operator(,)
          string<delimiter(')content(ocicolumnname)delimiter(')>operator(,)
          string<delimiter(')content(ocicolumnprecision)delimiter(')>operator(,)
          string<delimiter(')content(ocicolumnscale)delimiter(')>operator(,)
          string<delimiter(')content(ocicolumnsize)delimiter(')>operator(,)
          string<delimiter(')content(ocicolumntype)delimiter(')>operator(,)
          string<delimiter(')content(ocicolumntyperaw)delimiter(')>operator(,)
          string<delimiter(')content(ocicommit)delimiter(')>operator(,)
          string<delimiter(')content(ocidefinebyname)delimiter(')>operator(,)
          string<delimiter(')content(ocierror)delimiter(')>operator(,)
          string<delimiter(')content(ociexecute)delimiter(')>operator(,)
          string<delimiter(')content(ocifetch)delimiter(')>operator(,)
          string<delimiter(')content(ocifetchinto)delimiter(')>operator(,)
          string<delimiter(')content(ocifetchstatement)delimiter(')>operator(,)
          string<delimiter(')content(ocifreecollection)delimiter(')>operator(,)
          string<delimiter(')content(ocifreecursor)delimiter(')>operator(,)
          string<delimiter(')content(ocifreedesc)delimiter(')>operator(,)
          string<delimiter(')content(ocifreestatement)delimiter(')>operator(,)
          string<delimiter(')content(ociinternaldebug)delimiter(')>operator(,)
          string<delimiter(')content(ociloadlob)delimiter(')>operator(,)
          string<delimiter(')content(ocilogoff)delimiter(')>operator(,)
          string<delimiter(')content(ocilogon)delimiter(')>operator(,)
          string<delimiter(')content(ocinewcollection)delimiter(')>operator(,)
          string<delimiter(')content(ocinewcursor)delimiter(')>operator(,)
          string<delimiter(')content(ocinewdescriptor)delimiter(')>operator(,)
          string<delimiter(')content(ocinlogon)delimiter(')>operator(,)
          string<delimiter(')content(ocinumcols)delimiter(')>operator(,)
          string<delimiter(')content(ociparse)delimiter(')>operator(,)
          string<delimiter(')content(ociplogon)delimiter(')>operator(,)
          string<delimiter(')content(ociresult)delimiter(')>operator(,)
          string<delimiter(')content(ocirollback)delimiter(')>operator(,)
          string<delimiter(')content(ocirowcount)delimiter(')>operator(,)
          string<delimiter(')content(ocisavelob)delimiter(')>operator(,)
          string<delimiter(')content(ocisavelobfile)delimiter(')>operator(,)
          string<delimiter(')content(ociserverversion)delimiter(')>operator(,)
          string<delimiter(')content(ocisetprefetch)delimiter(')>operator(,)
          string<delimiter(')content(ocistatementtype)delimiter(')>operator(,)
          string<delimiter(')content(ociwritelobtofile)delimiter(')>operator(,)
          string<delimiter(')content(ociwritetemporarylob)delimiter(')>operator(])operator(,)
 string<delimiter(')content(ODBC)delimiter(')>operator(:) operator([)string<delimiter(')content(odbc_autocommit)delimiter(')>operator(,)
          string<delimiter(')content(odbc_binmode)delimiter(')>operator(,)
          string<delimiter(')content(odbc_close)delimiter(')>operator(,)
          string<delimiter(')content(odbc_close_all)delimiter(')>operator(,)
          string<delimiter(')content(odbc_columnprivileges)delimiter(')>operator(,)
          string<delimiter(')content(odbc_columns)delimiter(')>operator(,)
          string<delimiter(')content(odbc_commit)delimiter(')>operator(,)
          string<delimiter(')content(odbc_connect)delimiter(')>operator(,)
          string<delimiter(')content(odbc_cursor)delimiter(')>operator(,)
          string<delimiter(')content(odbc_data_source)delimiter(')>operator(,)
          string<delimiter(')content(odbc_do)delimiter(')>operator(,)
          string<delimiter(')content(odbc_error)delimiter(')>operator(,)
          string<delimiter(')content(odbc_errormsg)delimiter(')>operator(,)
          string<delimiter(')content(odbc_exec)delimiter(')>operator(,)
          string<delimiter(')content(odbc_execute)delimiter(')>operator(,)
          string<delimiter(')content(odbc_fetch_array)delimiter(')>operator(,)
          string<delimiter(')content(odbc_fetch_into)delimiter(')>operator(,)
          string<delimiter(')content(odbc_fetch_object)delimiter(')>operator(,)
          string<delimiter(')content(odbc_fetch_row)delimiter(')>operator(,)
          string<delimiter(')content(odbc_field_len)delimiter(')>operator(,)
          string<delimiter(')content(odbc_field_name)delimiter(')>operator(,)
          string<delimiter(')content(odbc_field_num)delimiter(')>operator(,)
          string<delimiter(')content(odbc_field_precision)delimiter(')>operator(,)
          string<delimiter(')content(odbc_field_scale)delimiter(')>operator(,)
          string<delimiter(')content(odbc_field_type)delimiter(')>operator(,)
          string<delimiter(')content(odbc_foreignkeys)delimiter(')>operator(,)
          string<delimiter(')content(odbc_free_result)delimiter(')>operator(,)
          string<delimiter(')content(odbc_gettypeinfo)delimiter(')>operator(,)
          string<delimiter(')content(odbc_longreadlen)delimiter(')>operator(,)
          string<delimiter(')content(odbc_next_result)delimiter(')>operator(,)
          string<delimiter(')content(odbc_num_fields)delimiter(')>operator(,)
          string<delimiter(')content(odbc_num_rows)delimiter(')>operator(,)
          string<delimiter(')content(odbc_pconnect)delimiter(')>operator(,)
          string<delimiter(')content(odbc_prepare)delimiter(')>operator(,)
          string<delimiter(')content(odbc_primarykeys)delimiter(')>operator(,)
          string<delimiter(')content(odbc_procedurecolumns)delimiter(')>operator(,)
          string<delimiter(')content(odbc_procedures)delimiter(')>operator(,)
          string<delimiter(')content(odbc_result)delimiter(')>operator(,)
          string<delimiter(')content(odbc_result_all)delimiter(')>operator(,)
          string<delimiter(')content(odbc_rollback)delimiter(')>operator(,)
          string<delimiter(')content(odbc_setoption)delimiter(')>operator(,)
          string<delimiter(')content(odbc_specialcolumns)delimiter(')>operator(,)
          string<delimiter(')content(odbc_statistics)delimiter(')>operator(,)
          string<delimiter(')content(odbc_tableprivileges)delimiter(')>operator(,)
          string<delimiter(')content(odbc_tables)delimiter(')>operator(])operator(,)
 string<delimiter(')content(Object Aggregation)delimiter(')>operator(:) operator([)string<delimiter(')content(aggregate)delimiter(')>operator(,)
                        string<delimiter(')content(aggregate_info)delimiter(')>operator(,)
                        string<delimiter(')content(aggregate_methods)delimiter(')>operator(,)
                        string<delimiter(')content(aggregate_methods_by_list)delimiter(')>operator(,)
                        string<delimiter(')content(aggregate_methods_by_regexp)delimiter(')>operator(,)
                        string<delimiter(')content(aggregate_properties)delimiter(')>operator(,)
                        string<delimiter(')content(aggregate_properties_by_list)delimiter(')>operator(,)
                        string<delimiter(')content(aggregate_properties_by_regexp)delimiter(')>operator(,)
                        string<delimiter(')content(aggregation_info)delimiter(')>operator(,)
                        string<delimiter(')content(deaggregate)delimiter(')>operator(])operator(,)
 string<delimiter(')content(Object overloading)delimiter(')>operator(:) operator([)string<delimiter(')content(overload)delimiter(')>operator(])operator(,)
 string<delimiter(')content(OpenSSL)delimiter(')>operator(:) operator([)string<delimiter(')content(openssl_csr_export)delimiter(')>operator(,)
             string<delimiter(')content(openssl_csr_export_to_file)delimiter(')>operator(,)
             string<delimiter(')content(openssl_csr_new)delimiter(')>operator(,)
             string<delimiter(')content(openssl_csr_sign)delimiter(')>operator(,)
             string<delimiter(')content(openssl_error_string)delimiter(')>operator(,)
             string<delimiter(')content(openssl_free_key)delimiter(')>operator(,)
             string<delimiter(')content(openssl_get_privatekey)delimiter(')>operator(,)
             string<delimiter(')content(openssl_get_publickey)delimiter(')>operator(,)
             string<delimiter(')content(openssl_open)delimiter(')>operator(,)
             string<delimiter(')content(openssl_pkcs7_decrypt)delimiter(')>operator(,)
             string<delimiter(')content(openssl_pkcs7_encrypt)delimiter(')>operator(,)
             string<delimiter(')content(openssl_pkcs7_sign)delimiter(')>operator(,)
             string<delimiter(')content(openssl_pkcs7_verify)delimiter(')>operator(,)
             string<delimiter(')content(openssl_pkey_export)delimiter(')>operator(,)
             string<delimiter(')content(openssl_pkey_export_to_file)delimiter(')>operator(,)
             string<delimiter(')content(openssl_pkey_get_private)delimiter(')>operator(,)
             string<delimiter(')content(openssl_pkey_get_public)delimiter(')>operator(,)
             string<delimiter(')content(openssl_pkey_new)delimiter(')>operator(,)
             string<delimiter(')content(openssl_private_decrypt)delimiter(')>operator(,)
             string<delimiter(')content(openssl_private_encrypt)delimiter(')>operator(,)
             string<delimiter(')content(openssl_public_decrypt)delimiter(')>operator(,)
             string<delimiter(')content(openssl_public_encrypt)delimiter(')>operator(,)
             string<delimiter(')content(openssl_seal)delimiter(')>operator(,)
             string<delimiter(')content(openssl_sign)delimiter(')>operator(,)
             string<delimiter(')content(openssl_verify)delimiter(')>operator(,)
             string<delimiter(')content(openssl_x509_check_private_key)delimiter(')>operator(,)
             string<delimiter(')content(openssl_x509_checkpurpose)delimiter(')>operator(,)
             string<delimiter(')content(openssl_x509_export)delimiter(')>operator(,)
             string<delimiter(')content(openssl_x509_export_to_file)delimiter(')>operator(,)
             string<delimiter(')content(openssl_x509_free)delimiter(')>operator(,)
             string<delimiter(')content(openssl_x509_parse)delimiter(')>operator(,)
             string<delimiter(')content(openssl_x509_read)delimiter(')>operator(])operator(,)
 string<delimiter(')content(Oracle)delimiter(')>operator(:) operator([)string<delimiter(')content(ora_bind)delimiter(')>operator(,)
            string<delimiter(')content(ora_close)delimiter(')>operator(,)
            string<delimiter(')content(ora_columnname)delimiter(')>operator(,)
            string<delimiter(')content(ora_columnsize)delimiter(')>operator(,)
            string<delimiter(')content(ora_columntype)delimiter(')>operator(,)
            string<delimiter(')content(ora_commit)delimiter(')>operator(,)
            string<delimiter(')content(ora_commitoff)delimiter(')>operator(,)
            string<delimiter(')content(ora_commiton)delimiter(')>operator(,)
            string<delimiter(')content(ora_do)delimiter(')>operator(,)
            string<delimiter(')content(ora_error)delimiter(')>operator(,)
            string<delimiter(')content(ora_errorcode)delimiter(')>operator(,)
            string<delimiter(')content(ora_exec)delimiter(')>operator(,)
            string<delimiter(')content(ora_fetch)delimiter(')>operator(,)
            string<delimiter(')content(ora_fetch_into)delimiter(')>operator(,)
            string<delimiter(')content(ora_getcolumn)delimiter(')>operator(,)
            string<delimiter(')content(ora_logoff)delimiter(')>operator(,)
            string<delimiter(')content(ora_logon)delimiter(')>operator(,)
            string<delimiter(')content(ora_numcols)delimiter(')>operator(,)
            string<delimiter(')content(ora_numrows)delimiter(')>operator(,)
            string<delimiter(')content(ora_open)delimiter(')>operator(,)
            string<delimiter(')content(ora_parse)delimiter(')>operator(,)
            string<delimiter(')content(ora_plogon)delimiter(')>operator(,)
            string<delimiter(')content(ora_rollback)delimiter(')>operator(])operator(,)
 string<delimiter(')content(Output Control)delimiter(')>operator(:) operator([)string<delimiter(')content(flush)delimiter(')>operator(,)
                    string<delimiter(')content(ob_clean)delimiter(')>operator(,)
                    string<delimiter(')content(ob_end_clean)delimiter(')>operator(,)
                    string<delimiter(')content(ob_end_flush)delimiter(')>operator(,)
                    string<delimiter(')content(ob_flush)delimiter(')>operator(,)
                    string<delimiter(')content(ob_get_clean)delimiter(')>operator(,)
                    string<delimiter(')content(ob_get_contents)delimiter(')>operator(,)
                    string<delimiter(')content(ob_get_flush)delimiter(')>operator(,)
                    string<delimiter(')content(ob_get_length)delimiter(')>operator(,)
                    string<delimiter(')content(ob_get_level)delimiter(')>operator(,)
                    string<delimiter(')content(ob_get_status)delimiter(')>operator(,)
                    string<delimiter(')content(ob_gzhandler)delimiter(')>operator(,)
                    string<delimiter(')content(ob_implicit_flush)delimiter(')>operator(,)
                    string<delimiter(')content(ob_list_handlers)delimiter(')>operator(,)
                    string<delimiter(')content(ob_start)delimiter(')>operator(,)
                    string<delimiter(')content(output_add_rewrite_var)delimiter(')>operator(,)
                    string<delimiter(')content(output_reset_rewrite_vars)delimiter(')>operator(])operator(,)
 string<delimiter(')content(OvrimosSQL)delimiter(')>operator(:) operator([)string<delimiter(')content(ovrimos_close)delimiter(')>operator(,)
                string<delimiter(')content(ovrimos_commit)delimiter(')>operator(,)
                string<delimiter(')content(ovrimos_connect)delimiter(')>operator(,)
                string<delimiter(')content(ovrimos_cursor)delimiter(')>operator(,)
                string<delimiter(')content(ovrimos_exec)delimiter(')>operator(,)
                string<delimiter(')content(ovrimos_execute)delimiter(')>operator(,)
                string<delimiter(')content(ovrimos_fetch_into)delimiter(')>operator(,)
                string<delimiter(')content(ovrimos_fetch_row)delimiter(')>operator(,)
                string<delimiter(')content(ovrimos_field_len)delimiter(')>operator(,)
                string<delimiter(')content(ovrimos_field_name)delimiter(')>operator(,)
                string<delimiter(')content(ovrimos_field_num)delimiter(')>operator(,)
                string<delimiter(')content(ovrimos_field_type)delimiter(')>operator(,)
                string<delimiter(')content(ovrimos_free_result)delimiter(')>operator(,)
                string<delimiter(')content(ovrimos_longreadlen)delimiter(')>operator(,)
                string<delimiter(')content(ovrimos_num_fields)delimiter(')>operator(,)
                string<delimiter(')content(ovrimos_num_rows)delimiter(')>operator(,)
                string<delimiter(')content(ovrimos_prepare)delimiter(')>operator(,)
                string<delimiter(')content(ovrimos_result)delimiter(')>operator(,)
                string<delimiter(')content(ovrimos_result_all)delimiter(')>operator(,)
                string<delimiter(')content(ovrimos_rollback)delimiter(')>operator(])operator(,)
 string<delimiter(')content(PCNTL)delimiter(')>operator(:) operator([)string<delimiter(')content(pcntl_alarm)delimiter(')>operator(,)
           string<delimiter(')content(pcntl_exec)delimiter(')>operator(,)
           string<delimiter(')content(pcntl_fork)delimiter(')>operator(,)
           string<delimiter(')content(pcntl_getpriority)delimiter(')>operator(,)
           string<delimiter(')content(pcntl_setpriority)delimiter(')>operator(,)
           string<delimiter(')content(pcntl_signal)delimiter(')>operator(,)
           string<delimiter(')content(pcntl_wait)delimiter(')>operator(,)
           string<delimiter(')content(pcntl_waitpid)delimiter(')>operator(,)
           string<delimiter(')content(pcntl_wexitstatus)delimiter(')>operator(,)
           string<delimiter(')content(pcntl_wifexited)delimiter(')>operator(,)
           string<delimiter(')content(pcntl_wifsignaled)delimiter(')>operator(,)
           string<delimiter(')content(pcntl_wifstopped)delimiter(')>operator(,)
           string<delimiter(')content(pcntl_wstopsig)delimiter(')>operator(,)
           string<delimiter(')content(pcntl_wtermsig)delimiter(')>operator(])operator(,)
 string<delimiter(')content(PCRE)delimiter(')>operator(:) operator([)string<delimiter(')content(preg_grep)delimiter(')>operator(,)
          string<delimiter(')content(preg_match)delimiter(')>operator(,)
          string<delimiter(')content(preg_match_all)delimiter(')>operator(,)
          string<delimiter(')content(preg_quote)delimiter(')>operator(,)
          string<delimiter(')content(preg_replace)delimiter(')>operator(,)
          string<delimiter(')content(preg_replace_callback)delimiter(')>operator(,)
          string<delimiter(')content(preg_split)delimiter(')>operator(])operator(,)
 string<delimiter(')content(PDF)delimiter(')>operator(:) operator([)string<delimiter(')content(pdf_add_annotation)delimiter(')>operator(,)
         string<delimiter(')content(pdf_add_bookmark)delimiter(')>operator(,)
         string<delimiter(')content(pdf_add_launchlink)delimiter(')>operator(,)
         string<delimiter(')content(pdf_add_locallink)delimiter(')>operator(,)
         string<delimiter(')content(pdf_add_note)delimiter(')>operator(,)
         string<delimiter(')content(pdf_add_outline)delimiter(')>operator(,)
         string<delimiter(')content(pdf_add_pdflink)delimiter(')>operator(,)
         string<delimiter(')content(pdf_add_thumbnail)delimiter(')>operator(,)
         string<delimiter(')content(pdf_add_weblink)delimiter(')>operator(,)
         string<delimiter(')content(pdf_arc)delimiter(')>operator(,)
         string<delimiter(')content(pdf_arcn)delimiter(')>operator(,)
         string<delimiter(')content(pdf_attach_file)delimiter(')>operator(,)
         string<delimiter(')content(pdf_begin_page)delimiter(')>operator(,)
         string<delimiter(')content(pdf_begin_pattern)delimiter(')>operator(,)
         string<delimiter(')content(pdf_begin_template)delimiter(')>operator(,)
         string<delimiter(')content(pdf_circle)delimiter(')>operator(,)
         string<delimiter(')content(pdf_clip)delimiter(')>operator(,)
         string<delimiter(')content(pdf_close)delimiter(')>operator(,)
         string<delimiter(')content(pdf_close_image)delimiter(')>operator(,)
         string<delimiter(')content(pdf_close_pdi)delimiter(')>operator(,)
         string<delimiter(')content(pdf_close_pdi_page)delimiter(')>operator(,)
         string<delimiter(')content(pdf_closepath)delimiter(')>operator(,)
         string<delimiter(')content(pdf_closepath_fill_stroke)delimiter(')>operator(,)
         string<delimiter(')content(pdf_closepath_stroke)delimiter(')>operator(,)
         string<delimiter(')content(pdf_concat)delimiter(')>operator(,)
         string<delimiter(')content(pdf_continue_text)delimiter(')>operator(,)
         string<delimiter(')content(pdf_curveto)delimiter(')>operator(,)
         string<delimiter(')content(pdf_delete)delimiter(')>operator(,)
         string<delimiter(')content(pdf_end_page)delimiter(')>operator(,)
         string<delimiter(')content(pdf_end_pattern)delimiter(')>operator(,)
         string<delimiter(')content(pdf_end_template)delimiter(')>operator(,)
         string<delimiter(')content(pdf_endpath)delimiter(')>operator(,)
         string<delimiter(')content(pdf_fill)delimiter(')>operator(,)
         string<delimiter(')content(pdf_fill_stroke)delimiter(')>operator(,)
         string<delimiter(')content(pdf_findfont)delimiter(')>operator(,)
         string<delimiter(')content(pdf_get_buffer)delimiter(')>operator(,)
         string<delimiter(')content(pdf_get_font)delimiter(')>operator(,)
         string<delimiter(')content(pdf_get_fontname)delimiter(')>operator(,)
         string<delimiter(')content(pdf_get_fontsize)delimiter(')>operator(,)
         string<delimiter(')content(pdf_get_image_height)delimiter(')>operator(,)
         string<delimiter(')content(pdf_get_image_width)delimiter(')>operator(,)
         string<delimiter(')content(pdf_get_majorversion)delimiter(')>operator(,)
         string<delimiter(')content(pdf_get_minorversion)delimiter(')>operator(,)
         string<delimiter(')content(pdf_get_parameter)delimiter(')>operator(,)
         string<delimiter(')content(pdf_get_pdi_parameter)delimiter(')>operator(,)
         string<delimiter(')content(pdf_get_pdi_value)delimiter(')>operator(,)
         string<delimiter(')content(pdf_get_value)delimiter(')>operator(,)
         string<delimiter(')content(pdf_initgraphics)delimiter(')>operator(,)
         string<delimiter(')content(pdf_lineto)delimiter(')>operator(,)
         string<delimiter(')content(pdf_makespotcolor)delimiter(')>operator(,)
         string<delimiter(')content(pdf_moveto)delimiter(')>operator(,)
         string<delimiter(')content(pdf_new)delimiter(')>operator(,)
         string<delimiter(')content(pdf_open_ccitt)delimiter(')>operator(,)
         string<delimiter(')content(pdf_open_file)delimiter(')>operator(,)
         string<delimiter(')content(pdf_open_gif)delimiter(')>operator(,)
         string<delimiter(')content(pdf_open_image)delimiter(')>operator(,)
         string<delimiter(')content(pdf_open_image_file)delimiter(')>operator(,)
         string<delimiter(')content(pdf_open_jpeg)delimiter(')>operator(,)
         string<delimiter(')content(pdf_open_memory_image)delimiter(')>operator(,)
         string<delimiter(')content(pdf_open_pdi)delimiter(')>operator(,)
         string<delimiter(')content(pdf_open_pdi_page)delimiter(')>operator(,)
         string<delimiter(')content(pdf_open_tiff)delimiter(')>operator(,)
         string<delimiter(')content(pdf_place_image)delimiter(')>operator(,)
         string<delimiter(')content(pdf_place_pdi_page)delimiter(')>operator(,)
         string<delimiter(')content(pdf_rect)delimiter(')>operator(,)
         string<delimiter(')content(pdf_restore)delimiter(')>operator(,)
         string<delimiter(')content(pdf_rotate)delimiter(')>operator(,)
         string<delimiter(')content(pdf_save)delimiter(')>operator(,)
         string<delimiter(')content(pdf_scale)delimiter(')>operator(,)
         string<delimiter(')content(pdf_set_border_color)delimiter(')>operator(,)
         string<delimiter(')content(pdf_set_border_dash)delimiter(')>operator(,)
         string<delimiter(')content(pdf_set_border_style)delimiter(')>operator(,)
         string<delimiter(')content(pdf_set_char_spacing)delimiter(')>operator(,)
         string<delimiter(')content(pdf_set_duration)delimiter(')>operator(,)
         string<delimiter(')content(pdf_set_horiz_scaling)delimiter(')>operator(,)
         string<delimiter(')content(pdf_set_info)delimiter(')>operator(,)
         string<delimiter(')content(pdf_set_info_author)delimiter(')>operator(,)
         string<delimiter(')content(pdf_set_info_creator)delimiter(')>operator(,)
         string<delimiter(')content(pdf_set_info_keywords)delimiter(')>operator(,)
         string<delimiter(')content(pdf_set_info_subject)delimiter(')>operator(,)
         string<delimiter(')content(pdf_set_info_title)delimiter(')>operator(,)
         string<delimiter(')content(pdf_set_leading)delimiter(')>operator(,)
         string<delimiter(')content(pdf_set_parameter)delimiter(')>operator(,)
         string<delimiter(')content(pdf_set_text_matrix)delimiter(')>operator(,)
         string<delimiter(')content(pdf_set_text_pos)delimiter(')>operator(,)
         string<delimiter(')content(pdf_set_text_rendering)delimiter(')>operator(,)
         string<delimiter(')content(pdf_set_text_rise)delimiter(')>operator(,)
         string<delimiter(')content(pdf_set_value)delimiter(')>operator(,)
         string<delimiter(')content(pdf_set_word_spacing)delimiter(')>operator(,)
         string<delimiter(')content(pdf_setcolor)delimiter(')>operator(,)
         string<delimiter(')content(pdf_setdash)delimiter(')>operator(,)
         string<delimiter(')content(pdf_setflat)delimiter(')>operator(,)
         string<delimiter(')content(pdf_setfont)delimiter(')>operator(,)
         string<delimiter(')content(pdf_setgray)delimiter(')>operator(,)
         string<delimiter(')content(pdf_setgray_fill)delimiter(')>operator(,)
         string<delimiter(')content(pdf_setgray_stroke)delimiter(')>operator(,)
         string<delimiter(')content(pdf_setlinecap)delimiter(')>operator(,)
         string<delimiter(')content(pdf_setlinejoin)delimiter(')>operator(,)
         string<delimiter(')content(pdf_setlinewidth)delimiter(')>operator(,)
         string<delimiter(')content(pdf_setmatrix)delimiter(')>operator(,)
         string<delimiter(')content(pdf_setmiterlimit)delimiter(')>operator(,)
         string<delimiter(')content(pdf_setpolydash)delimiter(')>operator(,)
         string<delimiter(')content(pdf_setrgbcolor)delimiter(')>operator(,)
         string<delimiter(')content(pdf_setrgbcolor_fill)delimiter(')>operator(,)
         string<delimiter(')content(pdf_setrgbcolor_stroke)delimiter(')>operator(,)
         string<delimiter(')content(pdf_show)delimiter(')>operator(,)
         string<delimiter(')content(pdf_show_boxed)delimiter(')>operator(,)
         string<delimiter(')content(pdf_show_xy)delimiter(')>operator(,)
         string<delimiter(')content(pdf_skew)delimiter(')>operator(,)
         string<delimiter(')content(pdf_stringwidth)delimiter(')>operator(,)
         string<delimiter(')content(pdf_stroke)delimiter(')>operator(,)
         string<delimiter(')content(pdf_translate)delimiter(')>operator(])operator(,)
 string<delimiter(')content(PHP Options/Info)delimiter(')>operator(:) operator([)string<delimiter(')content(assert)delimiter(')>operator(,)
                      string<delimiter(')content(assert_options)delimiter(')>operator(,)
                      string<delimiter(')content(dl)delimiter(')>operator(,)
                      string<delimiter(')content(extension_loaded)delimiter(')>operator(,)
                      string<delimiter(')content(get_cfg_var)delimiter(')>operator(,)
                      string<delimiter(')content(get_current_user)delimiter(')>operator(,)
                      string<delimiter(')content(get_defined_constants)delimiter(')>operator(,)
                      string<delimiter(')content(get_extension_funcs)delimiter(')>operator(,)
                      string<delimiter(')content(get_include_path)delimiter(')>operator(,)
                      string<delimiter(')content(get_included_files)delimiter(')>operator(,)
                      string<delimiter(')content(get_loaded_extensions)delimiter(')>operator(,)
                      string<delimiter(')content(get_magic_quotes_gpc)delimiter(')>operator(,)
                      string<delimiter(')content(get_magic_quotes_runtime)delimiter(')>operator(,)
                      string<delimiter(')content(get_required_files)delimiter(')>operator(,)
                      string<delimiter(')content(getenv)delimiter(')>operator(,)
                      string<delimiter(')content(getlastmod)delimiter(')>operator(,)
                      string<delimiter(')content(getmygid)delimiter(')>operator(,)
                      string<delimiter(')content(getmyinode)delimiter(')>operator(,)
                      string<delimiter(')content(getmypid)delimiter(')>operator(,)
                      string<delimiter(')content(getmyuid)delimiter(')>operator(,)
                      string<delimiter(')content(getopt)delimiter(')>operator(,)
                      string<delimiter(')content(getrusage)delimiter(')>operator(,)
                      string<delimiter(')content(ini_alter)delimiter(')>operator(,)
                      string<delimiter(')content(ini_get)delimiter(')>operator(,)
                      string<delimiter(')content(ini_get_all)delimiter(')>operator(,)
                      string<delimiter(')content(ini_restore)delimiter(')>operator(,)
                      string<delimiter(')content(ini_set)delimiter(')>operator(,)
                      string<delimiter(')content(main)delimiter(')>operator(,)
                      string<delimiter(')content(memory_get_usage)delimiter(')>operator(,)
                      string<delimiter(')content(php_ini_scanned_files)delimiter(')>operator(,)
                      string<delimiter(')content(php_logo_guid)delimiter(')>operator(,)
                      string<delimiter(')content(php_sapi_name)delimiter(')>operator(,)
                      string<delimiter(')content(php_uname)delimiter(')>operator(,)
                      string<delimiter(')content(phpcredits)delimiter(')>operator(,)
                      string<delimiter(')content(phpinfo)delimiter(')>operator(,)
                      string<delimiter(')content(phpversion)delimiter(')>operator(,)
                      string<delimiter(')content(putenv)delimiter(')>operator(,)
                      string<delimiter(')content(restore_include_path)delimiter(')>operator(,)
                      string<delimiter(')content(set_include_path)delimiter(')>operator(,)
                      string<delimiter(')content(set_magic_quotes_runtime)delimiter(')>operator(,)
                      string<delimiter(')content(set_time_limit)delimiter(')>operator(,)
                      string<delimiter(')content(version_compare)delimiter(')>operator(,)
                      string<delimiter(')content(zend_logo_guid)delimiter(')>operator(,)
                      string<delimiter(')content(zend_version)delimiter(')>operator(])operator(,)
 string<delimiter(')content(POSIX)delimiter(')>operator(:) operator([)string<delimiter(')content(posix_ctermid)delimiter(')>operator(,)
           string<delimiter(')content(posix_get_last_error)delimiter(')>operator(,)
           string<delimiter(')content(posix_getcwd)delimiter(')>operator(,)
           string<delimiter(')content(posix_getegid)delimiter(')>operator(,)
           string<delimiter(')content(posix_geteuid)delimiter(')>operator(,)
           string<delimiter(')content(posix_getgid)delimiter(')>operator(,)
           string<delimiter(')content(posix_getgrgid)delimiter(')>operator(,)
           string<delimiter(')content(posix_getgrnam)delimiter(')>operator(,)
           string<delimiter(')content(posix_getgroups)delimiter(')>operator(,)
           string<delimiter(')content(posix_getlogin)delimiter(')>operator(,)
           string<delimiter(')content(posix_getpgid)delimiter(')>operator(,)
           string<delimiter(')content(posix_getpgrp)delimiter(')>operator(,)
           string<delimiter(')content(posix_getpid)delimiter(')>operator(,)
           string<delimiter(')content(posix_getppid)delimiter(')>operator(,)
           string<delimiter(')content(posix_getpwnam)delimiter(')>operator(,)
           string<delimiter(')content(posix_getpwuid)delimiter(')>operator(,)
           string<delimiter(')content(posix_getrlimit)delimiter(')>operator(,)
           string<delimiter(')content(posix_getsid)delimiter(')>operator(,)
           string<delimiter(')content(posix_getuid)delimiter(')>operator(,)
           string<delimiter(')content(posix_isatty)delimiter(')>operator(,)
           string<delimiter(')content(posix_kill)delimiter(')>operator(,)
           string<delimiter(')content(posix_mkfifo)delimiter(')>operator(,)
           string<delimiter(')content(posix_setegid)delimiter(')>operator(,)
           string<delimiter(')content(posix_seteuid)delimiter(')>operator(,)
           string<delimiter(')content(posix_setgid)delimiter(')>operator(,)
           string<delimiter(')content(posix_setpgid)delimiter(')>operator(,)
           string<delimiter(')content(posix_setsid)delimiter(')>operator(,)
           string<delimiter(')content(posix_setuid)delimiter(')>operator(,)
           string<delimiter(')content(posix_strerror)delimiter(')>operator(,)
           string<delimiter(')content(posix_times)delimiter(')>operator(,)
           string<delimiter(')content(posix_ttyname)delimiter(')>operator(,)
           string<delimiter(')content(posix_uname)delimiter(')>operator(])operator(,)
 string<delimiter(')content(POSIX Regex)delimiter(')>operator(:) operator([)string<delimiter(')content(ereg)delimiter(')>operator(,)
                 string<delimiter(')content(ereg_replace)delimiter(')>operator(,)
                 string<delimiter(')content(eregi)delimiter(')>operator(,)
                 string<delimiter(')content(eregi_replace)delimiter(')>operator(,)
                 string<delimiter(')content(split)delimiter(')>operator(,)
                 string<delimiter(')content(spliti)delimiter(')>operator(,)
                 string<delimiter(')content(sql_regcase)delimiter(')>operator(])operator(,)
 string<delimiter(')content(Parsekit)delimiter(')>operator(:) operator([)string<delimiter(')content(parsekit_compile_file)delimiter(')>operator(,)
              string<delimiter(')content(parsekit_compile_string)delimiter(')>operator(,)
              string<delimiter(')content(parsekit_func_arginfo)delimiter(')>operator(])operator(,)
 string<delimiter(')content(PostgreSQL)delimiter(')>operator(:) operator([)string<delimiter(')content(pg_affected_rows)delimiter(')>operator(,)
                string<delimiter(')content(pg_cancel_query)delimiter(')>operator(,)
                string<delimiter(')content(pg_client_encoding)delimiter(')>operator(,)
                string<delimiter(')content(pg_close)delimiter(')>operator(,)
                string<delimiter(')content(pg_connect)delimiter(')>operator(,)
                string<delimiter(')content(pg_connection_busy)delimiter(')>operator(,)
                string<delimiter(')content(pg_connection_reset)delimiter(')>operator(,)
                string<delimiter(')content(pg_connection_status)delimiter(')>operator(,)
                string<delimiter(')content(pg_convert)delimiter(')>operator(,)
                string<delimiter(')content(pg_copy_from)delimiter(')>operator(,)
                string<delimiter(')content(pg_copy_to)delimiter(')>operator(,)
                string<delimiter(')content(pg_dbname)delimiter(')>operator(,)
                string<delimiter(')content(pg_delete)delimiter(')>operator(,)
                string<delimiter(')content(pg_end_copy)delimiter(')>operator(,)
                string<delimiter(')content(pg_escape_bytea)delimiter(')>operator(,)
                string<delimiter(')content(pg_escape_string)delimiter(')>operator(,)
                string<delimiter(')content(pg_fetch_all)delimiter(')>operator(,)
                string<delimiter(')content(pg_fetch_array)delimiter(')>operator(,)
                string<delimiter(')content(pg_fetch_assoc)delimiter(')>operator(,)
                string<delimiter(')content(pg_fetch_object)delimiter(')>operator(,)
                string<delimiter(')content(pg_fetch_result)delimiter(')>operator(,)
                string<delimiter(')content(pg_fetch_row)delimiter(')>operator(,)
                string<delimiter(')content(pg_field_is_null)delimiter(')>operator(,)
                string<delimiter(')content(pg_field_name)delimiter(')>operator(,)
                string<delimiter(')content(pg_field_num)delimiter(')>operator(,)
                string<delimiter(')content(pg_field_prtlen)delimiter(')>operator(,)
                string<delimiter(')content(pg_field_size)delimiter(')>operator(,)
                string<delimiter(')content(pg_field_type)delimiter(')>operator(,)
                string<delimiter(')content(pg_free_result)delimiter(')>operator(,)
                string<delimiter(')content(pg_get_notify)delimiter(')>operator(,)
                string<delimiter(')content(pg_get_pid)delimiter(')>operator(,)
                string<delimiter(')content(pg_get_result)delimiter(')>operator(,)
                string<delimiter(')content(pg_host)delimiter(')>operator(,)
                string<delimiter(')content(pg_insert)delimiter(')>operator(,)
                string<delimiter(')content(pg_last_error)delimiter(')>operator(,)
                string<delimiter(')content(pg_last_notice)delimiter(')>operator(,)
                string<delimiter(')content(pg_last_oid)delimiter(')>operator(,)
                string<delimiter(')content(pg_lo_close)delimiter(')>operator(,)
                string<delimiter(')content(pg_lo_create)delimiter(')>operator(,)
                string<delimiter(')content(pg_lo_export)delimiter(')>operator(,)
                string<delimiter(')content(pg_lo_import)delimiter(')>operator(,)
                string<delimiter(')content(pg_lo_open)delimiter(')>operator(,)
                string<delimiter(')content(pg_lo_read)delimiter(')>operator(,)
                string<delimiter(')content(pg_lo_read_all)delimiter(')>operator(,)
                string<delimiter(')content(pg_lo_seek)delimiter(')>operator(,)
                string<delimiter(')content(pg_lo_tell)delimiter(')>operator(,)
                string<delimiter(')content(pg_lo_unlink)delimiter(')>operator(,)
                string<delimiter(')content(pg_lo_write)delimiter(')>operator(,)
                string<delimiter(')content(pg_meta_data)delimiter(')>operator(,)
                string<delimiter(')content(pg_num_fields)delimiter(')>operator(,)
                string<delimiter(')content(pg_num_rows)delimiter(')>operator(,)
                string<delimiter(')content(pg_options)delimiter(')>operator(,)
                string<delimiter(')content(pg_parameter_status)delimiter(')>operator(,)
                string<delimiter(')content(pg_pconnect)delimiter(')>operator(,)
                string<delimiter(')content(pg_ping)delimiter(')>operator(,)
                string<delimiter(')content(pg_port)delimiter(')>operator(,)
                string<delimiter(')content(pg_put_line)delimiter(')>operator(,)
                string<delimiter(')content(pg_query)delimiter(')>operator(,)
                string<delimiter(')content(pg_result_error)delimiter(')>operator(,)
                string<delimiter(')content(pg_result_seek)delimiter(')>operator(,)
                string<delimiter(')content(pg_result_status)delimiter(')>operator(,)
                string<delimiter(')content(pg_select)delimiter(')>operator(,)
                string<delimiter(')content(pg_send_query)delimiter(')>operator(,)
                string<delimiter(')content(pg_set_client_encoding)delimiter(')>operator(,)
                string<delimiter(')content(pg_trace)delimiter(')>operator(,)
                string<delimiter(')content(pg_tty)delimiter(')>operator(,)
                string<delimiter(')content(pg_unescape_bytea)delimiter(')>operator(,)
                string<delimiter(')content(pg_untrace)delimiter(')>operator(,)
                string<delimiter(')content(pg_update)delimiter(')>operator(,)
                string<delimiter(')content(pg_version)delimiter(')>operator(])operator(,)
 string<delimiter(')content(Printer)delimiter(')>operator(:) operator([)string<delimiter(')content(printer_abort)delimiter(')>operator(,)
             string<delimiter(')content(printer_close)delimiter(')>operator(,)
             string<delimiter(')content(printer_create_brush)delimiter(')>operator(,)
             string<delimiter(')content(printer_create_dc)delimiter(')>operator(,)
             string<delimiter(')content(printer_create_font)delimiter(')>operator(,)
             string<delimiter(')content(printer_create_pen)delimiter(')>operator(,)
             string<delimiter(')content(printer_delete_brush)delimiter(')>operator(,)
             string<delimiter(')content(printer_delete_dc)delimiter(')>operator(,)
             string<delimiter(')content(printer_delete_font)delimiter(')>operator(,)
             string<delimiter(')content(printer_delete_pen)delimiter(')>operator(,)
             string<delimiter(')content(printer_draw_bmp)delimiter(')>operator(,)
             string<delimiter(')content(printer_draw_chord)delimiter(')>operator(,)
             string<delimiter(')content(printer_draw_elipse)delimiter(')>operator(,)
             string<delimiter(')content(printer_draw_line)delimiter(')>operator(,)
             string<delimiter(')content(printer_draw_pie)delimiter(')>operator(,)
             string<delimiter(')content(printer_draw_rectangle)delimiter(')>operator(,)
             string<delimiter(')content(printer_draw_roundrect)delimiter(')>operator(,)
             string<delimiter(')content(printer_draw_text)delimiter(')>operator(,)
             string<delimiter(')content(printer_end_doc)delimiter(')>operator(,)
             string<delimiter(')content(printer_end_page)delimiter(')>operator(,)
             string<delimiter(')content(printer_get_option)delimiter(')>operator(,)
             string<delimiter(')content(printer_list)delimiter(')>operator(,)
             string<delimiter(')content(printer_logical_fontheight)delimiter(')>operator(,)
             string<delimiter(')content(printer_open)delimiter(')>operator(,)
             string<delimiter(')content(printer_select_brush)delimiter(')>operator(,)
             string<delimiter(')content(printer_select_font)delimiter(')>operator(,)
             string<delimiter(')content(printer_select_pen)delimiter(')>operator(,)
             string<delimiter(')content(printer_set_option)delimiter(')>operator(,)
             string<delimiter(')content(printer_start_doc)delimiter(')>operator(,)
             string<delimiter(')content(printer_start_page)delimiter(')>operator(,)
             string<delimiter(')content(printer_write)delimiter(')>operator(])operator(,)
 string<delimiter(')content(Program Execution)delimiter(')>operator(:) operator([)string<delimiter(')content(escapeshellarg)delimiter(')>operator(,)
                       string<delimiter(')content(escapeshellcmd)delimiter(')>operator(,)
                       string<delimiter(')content(exec)delimiter(')>operator(,)
                       string<delimiter(')content(passthru)delimiter(')>operator(,)
                       string<delimiter(')content(proc_close)delimiter(')>operator(,)
                       string<delimiter(')content(proc_get_status)delimiter(')>operator(,)
                       string<delimiter(')content(proc_nice)delimiter(')>operator(,)
                       string<delimiter(')content(proc_open)delimiter(')>operator(,)
                       string<delimiter(')content(proc_terminate)delimiter(')>operator(,)
                       string<delimiter(')content(shell_exec)delimiter(')>operator(,)
                       string<delimiter(')content(system)delimiter(')>operator(])operator(,)
 string<delimiter(')content(Pspell)delimiter(')>operator(:) operator([)string<delimiter(')content(pspell_add_to_personal)delimiter(')>operator(,)
            string<delimiter(')content(pspell_add_to_session)delimiter(')>operator(,)
            string<delimiter(')content(pspell_check)delimiter(')>operator(,)
            string<delimiter(')content(pspell_clear_session)delimiter(')>operator(,)
            string<delimiter(')content(pspell_config_create)delimiter(')>operator(,)
            string<delimiter(')content(pspell_config_data_dir)delimiter(')>operator(,)
            string<delimiter(')content(pspell_config_dict_dir)delimiter(')>operator(,)
            string<delimiter(')content(pspell_config_ignore)delimiter(')>operator(,)
            string<delimiter(')content(pspell_config_mode)delimiter(')>operator(,)
            string<delimiter(')content(pspell_config_personal)delimiter(')>operator(,)
            string<delimiter(')content(pspell_config_repl)delimiter(')>operator(,)
            string<delimiter(')content(pspell_config_runtogether)delimiter(')>operator(,)
            string<delimiter(')content(pspell_config_save_repl)delimiter(')>operator(,)
            string<delimiter(')content(pspell_new)delimiter(')>operator(,)
            string<delimiter(')content(pspell_new_config)delimiter(')>operator(,)
            string<delimiter(')content(pspell_new_personal)delimiter(')>operator(,)
            string<delimiter(')content(pspell_save_wordlist)delimiter(')>operator(,)
            string<delimiter(')content(pspell_store_replacement)delimiter(')>operator(,)
            string<delimiter(')content(pspell_suggest)delimiter(')>operator(])operator(,)
 string<delimiter(')content(Rar)delimiter(')>operator(:) operator([)string<delimiter(')content(rar_close)delimiter(')>operator(,) string<delimiter(')content(rar_entry_get)delimiter(')>operator(,) string<delimiter(')content(rar_list)delimiter(')>operator(,) string<delimiter(')content(rar_open)delimiter(')>operator(])operator(,)
 string<delimiter(')content(Readline)delimiter(')>operator(:) operator([)string<delimiter(')content(readline)delimiter(')>operator(,)
              string<delimiter(')content(readline_add_history)delimiter(')>operator(,)
              string<delimiter(')content(readline_callback_handler_install)delimiter(')>operator(,)
              string<delimiter(')content(readline_callback_handler_remove)delimiter(')>operator(,)
              string<delimiter(')content(readline_callback_read_char)delimiter(')>operator(,)
              string<delimiter(')content(readline_clear_history)delimiter(')>operator(,)
              string<delimiter(')content(readline_completion_function)delimiter(')>operator(,)
              string<delimiter(')content(readline_info)delimiter(')>operator(,)
              string<delimiter(')content(readline_list_history)delimiter(')>operator(,)
              string<delimiter(')content(readline_on_new_line)delimiter(')>operator(,)
              string<delimiter(')content(readline_read_history)delimiter(')>operator(,)
              string<delimiter(')content(readline_redisplay)delimiter(')>operator(,)
              string<delimiter(')content(readline_write_history)delimiter(')>operator(])operator(,)
 string<delimiter(')content(Recode)delimiter(')>operator(:) operator([)string<delimiter(')content(recode)delimiter(')>operator(,) string<delimiter(')content(recode_file)delimiter(')>operator(,) string<delimiter(')content(recode_string)delimiter(')>operator(])operator(,)
 string<delimiter(')content(SESAM)delimiter(')>operator(:) operator([)string<delimiter(')content(sesam_affected_rows)delimiter(')>operator(,)
           string<delimiter(')content(sesam_commit)delimiter(')>operator(,)
           string<delimiter(')content(sesam_connect)delimiter(')>operator(,)
           string<delimiter(')content(sesam_diagnostic)delimiter(')>operator(,)
           string<delimiter(')content(sesam_disconnect)delimiter(')>operator(,)
           string<delimiter(')content(sesam_errormsg)delimiter(')>operator(,)
           string<delimiter(')content(sesam_execimm)delimiter(')>operator(,)
           string<delimiter(')content(sesam_fetch_array)delimiter(')>operator(,)
           string<delimiter(')content(sesam_fetch_result)delimiter(')>operator(,)
           string<delimiter(')content(sesam_fetch_row)delimiter(')>operator(,)
           string<delimiter(')content(sesam_field_array)delimiter(')>operator(,)
           string<delimiter(')content(sesam_field_name)delimiter(')>operator(,)
           string<delimiter(')content(sesam_free_result)delimiter(')>operator(,)
           string<delimiter(')content(sesam_num_fields)delimiter(')>operator(,)
           string<delimiter(')content(sesam_query)delimiter(')>operator(,)
           string<delimiter(')content(sesam_rollback)delimiter(')>operator(,)
           string<delimiter(')content(sesam_seek_row)delimiter(')>operator(,)
           string<delimiter(')content(sesam_settransaction)delimiter(')>operator(])operator(,)
 string<delimiter(')content(SNMP)delimiter(')>operator(:) operator([)string<delimiter(')content(snmp_get_quick_print)delimiter(')>operator(,)
          string<delimiter(')content(snmp_get_valueretrieval)delimiter(')>operator(,)
          string<delimiter(')content(snmp_read_mib)delimiter(')>operator(,)
          string<delimiter(')content(snmp_set_enum_print)delimiter(')>operator(,)
          string<delimiter(')content(snmp_set_oid_numeric_print)delimiter(')>operator(,)
          string<delimiter(')content(snmp_set_quick_print)delimiter(')>operator(,)
          string<delimiter(')content(snmp_set_valueretrieval)delimiter(')>operator(,)
          string<delimiter(')content(snmpget)delimiter(')>operator(,)
          string<delimiter(')content(snmpgetnext)delimiter(')>operator(,)
          string<delimiter(')content(snmprealwalk)delimiter(')>operator(,)
          string<delimiter(')content(snmpset)delimiter(')>operator(,)
          string<delimiter(')content(snmpwalk)delimiter(')>operator(,)
          string<delimiter(')content(snmpwalkoid)delimiter(')>operator(])operator(,)
 string<delimiter(')content(SOAP)delimiter(')>operator(:) operator([)string<delimiter(')content(is_soap_fault)delimiter(')>operator(])operator(,)
 string<delimiter(')content(SQLite)delimiter(')>operator(:) operator([)string<delimiter(')content(sqlite_array_query)delimiter(')>operator(,)
            string<delimiter(')content(sqlite_busy_timeout)delimiter(')>operator(,)
            string<delimiter(')content(sqlite_changes)delimiter(')>operator(,)
            string<delimiter(')content(sqlite_close)delimiter(')>operator(,)
            string<delimiter(')content(sqlite_column)delimiter(')>operator(,)
            string<delimiter(')content(sqlite_create_aggregate)delimiter(')>operator(,)
            string<delimiter(')content(sqlite_create_function)delimiter(')>operator(,)
            string<delimiter(')content(sqlite_current)delimiter(')>operator(,)
            string<delimiter(')content(sqlite_error_string)delimiter(')>operator(,)
            string<delimiter(')content(sqlite_escape_string)delimiter(')>operator(,)
            string<delimiter(')content(sqlite_exec)delimiter(')>operator(,)
            string<delimiter(')content(sqlite_factory)delimiter(')>operator(,)
            string<delimiter(')content(sqlite_fetch_all)delimiter(')>operator(,)
            string<delimiter(')content(sqlite_fetch_array)delimiter(')>operator(,)
            string<delimiter(')content(sqlite_fetch_column_types)delimiter(')>operator(,)
            string<delimiter(')content(sqlite_fetch_object)delimiter(')>operator(,)
            string<delimiter(')content(sqlite_fetch_single)delimiter(')>operator(,)
            string<delimiter(')content(sqlite_fetch_string)delimiter(')>operator(,)
            string<delimiter(')content(sqlite_field_name)delimiter(')>operator(,)
            string<delimiter(')content(sqlite_has_more)delimiter(')>operator(,)
            string<delimiter(')content(sqlite_has_prev)delimiter(')>operator(,)
            string<delimiter(')content(sqlite_last_error)delimiter(')>operator(,)
            string<delimiter(')content(sqlite_last_insert_rowid)delimiter(')>operator(,)
            string<delimiter(')content(sqlite_libencoding)delimiter(')>operator(,)
            string<delimiter(')content(sqlite_libversion)delimiter(')>operator(,)
            string<delimiter(')content(sqlite_next)delimiter(')>operator(,)
            string<delimiter(')content(sqlite_num_fields)delimiter(')>operator(,)
            string<delimiter(')content(sqlite_num_rows)delimiter(')>operator(,)
            string<delimiter(')content(sqlite_open)delimiter(')>operator(,)
            string<delimiter(')content(sqlite_popen)delimiter(')>operator(,)
            string<delimiter(')content(sqlite_prev)delimiter(')>operator(,)
            string<delimiter(')content(sqlite_query)delimiter(')>operator(,)
            string<delimiter(')content(sqlite_rewind)delimiter(')>operator(,)
            string<delimiter(')content(sqlite_seek)delimiter(')>operator(,)
            string<delimiter(')content(sqlite_single_query)delimiter(')>operator(,)
            string<delimiter(')content(sqlite_udf_decode_binary)delimiter(')>operator(,)
            string<delimiter(')content(sqlite_udf_encode_binary)delimiter(')>operator(,)
            string<delimiter(')content(sqlite_unbuffered_query)delimiter(')>operator(])operator(,)
 string<delimiter(')content(SWF)delimiter(')>operator(:) operator([)string<delimiter(')content(swf_actiongeturl)delimiter(')>operator(,)
         string<delimiter(')content(swf_actiongotoframe)delimiter(')>operator(,)
         string<delimiter(')content(swf_actiongotolabel)delimiter(')>operator(,)
         string<delimiter(')content(swf_actionnextframe)delimiter(')>operator(,)
         string<delimiter(')content(swf_actionplay)delimiter(')>operator(,)
         string<delimiter(')content(swf_actionprevframe)delimiter(')>operator(,)
         string<delimiter(')content(swf_actionsettarget)delimiter(')>operator(,)
         string<delimiter(')content(swf_actionstop)delimiter(')>operator(,)
         string<delimiter(')content(swf_actiontogglequality)delimiter(')>operator(,)
         string<delimiter(')content(swf_actionwaitforframe)delimiter(')>operator(,)
         string<delimiter(')content(swf_addbuttonrecord)delimiter(')>operator(,)
         string<delimiter(')content(swf_addcolor)delimiter(')>operator(,)
         string<delimiter(')content(swf_closefile)delimiter(')>operator(,)
         string<delimiter(')content(swf_definebitmap)delimiter(')>operator(,)
         string<delimiter(')content(swf_definefont)delimiter(')>operator(,)
         string<delimiter(')content(swf_defineline)delimiter(')>operator(,)
         string<delimiter(')content(swf_definepoly)delimiter(')>operator(,)
         string<delimiter(')content(swf_definerect)delimiter(')>operator(,)
         string<delimiter(')content(swf_definetext)delimiter(')>operator(,)
         string<delimiter(')content(swf_endbutton)delimiter(')>operator(,)
         string<delimiter(')content(swf_enddoaction)delimiter(')>operator(,)
         string<delimiter(')content(swf_endshape)delimiter(')>operator(,)
         string<delimiter(')content(swf_endsymbol)delimiter(')>operator(,)
         string<delimiter(')content(swf_fontsize)delimiter(')>operator(,)
         string<delimiter(')content(swf_fontslant)delimiter(')>operator(,)
         string<delimiter(')content(swf_fonttracking)delimiter(')>operator(,)
         string<delimiter(')content(swf_getbitmapinfo)delimiter(')>operator(,)
         string<delimiter(')content(swf_getfontinfo)delimiter(')>operator(,)
         string<delimiter(')content(swf_getframe)delimiter(')>operator(,)
         string<delimiter(')content(swf_labelframe)delimiter(')>operator(,)
         string<delimiter(')content(swf_lookat)delimiter(')>operator(,)
         string<delimiter(')content(swf_modifyobject)delimiter(')>operator(,)
         string<delimiter(')content(swf_mulcolor)delimiter(')>operator(,)
         string<delimiter(')content(swf_nextid)delimiter(')>operator(,)
         string<delimiter(')content(swf_oncondition)delimiter(')>operator(,)
         string<delimiter(')content(swf_openfile)delimiter(')>operator(,)
         string<delimiter(')content(swf_ortho)delimiter(')>operator(,)
         string<delimiter(')content(swf_ortho2)delimiter(')>operator(,)
         string<delimiter(')content(swf_perspective)delimiter(')>operator(,)
         string<delimiter(')content(swf_placeobject)delimiter(')>operator(,)
         string<delimiter(')content(swf_polarview)delimiter(')>operator(,)
         string<delimiter(')content(swf_popmatrix)delimiter(')>operator(,)
         string<delimiter(')content(swf_posround)delimiter(')>operator(,)
         string<delimiter(')content(swf_pushmatrix)delimiter(')>operator(,)
         string<delimiter(')content(swf_removeobject)delimiter(')>operator(,)
         string<delimiter(')content(swf_rotate)delimiter(')>operator(,)
         string<delimiter(')content(swf_scale)delimiter(')>operator(,)
         string<delimiter(')content(swf_setfont)delimiter(')>operator(,)
         string<delimiter(')content(swf_setframe)delimiter(')>operator(,)
         string<delimiter(')content(swf_shapearc)delimiter(')>operator(,)
         string<delimiter(')content(swf_shapecurveto)delimiter(')>operator(,)
         string<delimiter(')content(swf_shapecurveto3)delimiter(')>operator(,)
         string<delimiter(')content(swf_shapefillbitmapclip)delimiter(')>operator(,)
         string<delimiter(')content(swf_shapefillbitmaptile)delimiter(')>operator(,)
         string<delimiter(')content(swf_shapefilloff)delimiter(')>operator(,)
         string<delimiter(')content(swf_shapefillsolid)delimiter(')>operator(,)
         string<delimiter(')content(swf_shapelinesolid)delimiter(')>operator(,)
         string<delimiter(')content(swf_shapelineto)delimiter(')>operator(,)
         string<delimiter(')content(swf_shapemoveto)delimiter(')>operator(,)
         string<delimiter(')content(swf_showframe)delimiter(')>operator(,)
         string<delimiter(')content(swf_startbutton)delimiter(')>operator(,)
         string<delimiter(')content(swf_startdoaction)delimiter(')>operator(,)
         string<delimiter(')content(swf_startshape)delimiter(')>operator(,)
         string<delimiter(')content(swf_startsymbol)delimiter(')>operator(,)
         string<delimiter(')content(swf_textwidth)delimiter(')>operator(,)
         string<delimiter(')content(swf_translate)delimiter(')>operator(,)
         string<delimiter(')content(swf_viewport)delimiter(')>operator(])operator(,)
 string<delimiter(')content(Semaphore)delimiter(')>operator(:) operator([)string<delimiter(')content(ftok)delimiter(')>operator(,)
               string<delimiter(')content(msg_get_queue)delimiter(')>operator(,)
               string<delimiter(')content(msg_receive)delimiter(')>operator(,)
               string<delimiter(')content(msg_remove_queue)delimiter(')>operator(,)
               string<delimiter(')content(msg_send)delimiter(')>operator(,)
               string<delimiter(')content(msg_set_queue)delimiter(')>operator(,)
               string<delimiter(')content(msg_stat_queue)delimiter(')>operator(,)
               string<delimiter(')content(sem_acquire)delimiter(')>operator(,)
               string<delimiter(')content(sem_get)delimiter(')>operator(,)
               string<delimiter(')content(sem_release)delimiter(')>operator(,)
               string<delimiter(')content(sem_remove)delimiter(')>operator(,)
               string<delimiter(')content(shm_attach)delimiter(')>operator(,)
               string<delimiter(')content(shm_detach)delimiter(')>operator(,)
               string<delimiter(')content(shm_get_var)delimiter(')>operator(,)
               string<delimiter(')content(shm_put_var)delimiter(')>operator(,)
               string<delimiter(')content(shm_remove)delimiter(')>operator(,)
               string<delimiter(')content(shm_remove_var)delimiter(')>operator(])operator(,)
 string<delimiter(')content(Sessions)delimiter(')>operator(:) operator([)string<delimiter(')content(session_cache_expire)delimiter(')>operator(,)
              string<delimiter(')content(session_cache_limiter)delimiter(')>operator(,)
              string<delimiter(')content(session_commit)delimiter(')>operator(,)
              string<delimiter(')content(session_decode)delimiter(')>operator(,)
              string<delimiter(')content(session_destroy)delimiter(')>operator(,)
              string<delimiter(')content(session_encode)delimiter(')>operator(,)
              string<delimiter(')content(session_get_cookie_params)delimiter(')>operator(,)
              string<delimiter(')content(session_id)delimiter(')>operator(,)
              string<delimiter(')content(session_is_registered)delimiter(')>operator(,)
              string<delimiter(')content(session_module_name)delimiter(')>operator(,)
              string<delimiter(')content(session_name)delimiter(')>operator(,)
              string<delimiter(')content(session_regenerate_id)delimiter(')>operator(,)
              string<delimiter(')content(session_register)delimiter(')>operator(,)
              string<delimiter(')content(session_save_path)delimiter(')>operator(,)
              string<delimiter(')content(session_set_cookie_params)delimiter(')>operator(,)
              string<delimiter(')content(session_set_save_handler)delimiter(')>operator(,)
              string<delimiter(')content(session_start)delimiter(')>operator(,)
              string<delimiter(')content(session_unregister)delimiter(')>operator(,)
              string<delimiter(')content(session_unset)delimiter(')>operator(,)
              string<delimiter(')content(session_write_close)delimiter(')>operator(])operator(,)
 string<delimiter(')content(SimpleXML)delimiter(')>operator(:) operator([)string<delimiter(')content(simplexml_import_dom)delimiter(')>operator(,)
               string<delimiter(')content(simplexml_load_file)delimiter(')>operator(,)
               string<delimiter(')content(simplexml_load_string)delimiter(')>operator(])operator(,)
 string<delimiter(')content(Sockets)delimiter(')>operator(:) operator([)string<delimiter(')content(socket_accept)delimiter(')>operator(,)
             string<delimiter(')content(socket_bind)delimiter(')>operator(,)
             string<delimiter(')content(socket_clear_error)delimiter(')>operator(,)
             string<delimiter(')content(socket_close)delimiter(')>operator(,)
             string<delimiter(')content(socket_connect)delimiter(')>operator(,)
             string<delimiter(')content(socket_create)delimiter(')>operator(,)
             string<delimiter(')content(socket_create_listen)delimiter(')>operator(,)
             string<delimiter(')content(socket_create_pair)delimiter(')>operator(,)
             string<delimiter(')content(socket_get_option)delimiter(')>operator(,)
             string<delimiter(')content(socket_getpeername)delimiter(')>operator(,)
             string<delimiter(')content(socket_getsockname)delimiter(')>operator(,)
             string<delimiter(')content(socket_last_error)delimiter(')>operator(,)
             string<delimiter(')content(socket_listen)delimiter(')>operator(,)
             string<delimiter(')content(socket_read)delimiter(')>operator(,)
             string<delimiter(')content(socket_recv)delimiter(')>operator(,)
             string<delimiter(')content(socket_recvfrom)delimiter(')>operator(,)
             string<delimiter(')content(socket_select)delimiter(')>operator(,)
             string<delimiter(')content(socket_send)delimiter(')>operator(,)
             string<delimiter(')content(socket_sendto)delimiter(')>operator(,)
             string<delimiter(')content(socket_set_block)delimiter(')>operator(,)
             string<delimiter(')content(socket_set_nonblock)delimiter(')>operator(,)
             string<delimiter(')content(socket_set_option)delimiter(')>operator(,)
             string<delimiter(')content(socket_shutdown)delimiter(')>operator(,)
             string<delimiter(')content(socket_strerror)delimiter(')>operator(,)
             string<delimiter(')content(socket_write)delimiter(')>operator(])operator(,)
 string<delimiter(')content(Streams)delimiter(')>operator(:) operator([)string<delimiter(')content(stream_context_create)delimiter(')>operator(,)
             string<delimiter(')content(stream_context_get_default)delimiter(')>operator(,)
             string<delimiter(')content(stream_context_get_options)delimiter(')>operator(,)
             string<delimiter(')content(stream_context_set_option)delimiter(')>operator(,)
             string<delimiter(')content(stream_context_set_params)delimiter(')>operator(,)
             string<delimiter(')content(stream_copy_to_stream)delimiter(')>operator(,)
             string<delimiter(')content(stream_filter_append)delimiter(')>operator(,)
             string<delimiter(')content(stream_filter_prepend)delimiter(')>operator(,)
             string<delimiter(')content(stream_filter_register)delimiter(')>operator(,)
             string<delimiter(')content(stream_filter_remove)delimiter(')>operator(,)
             string<delimiter(')content(stream_get_contents)delimiter(')>operator(,)
             string<delimiter(')content(stream_get_filters)delimiter(')>operator(,)
             string<delimiter(')content(stream_get_line)delimiter(')>operator(,)
             string<delimiter(')content(stream_get_meta_data)delimiter(')>operator(,)
             string<delimiter(')content(stream_get_transports)delimiter(')>operator(,)
             string<delimiter(')content(stream_get_wrappers)delimiter(')>operator(,)
             string<delimiter(')content(stream_register_wrapper)delimiter(')>operator(,)
             string<delimiter(')content(stream_select)delimiter(')>operator(,)
             string<delimiter(')content(stream_set_blocking)delimiter(')>operator(,)
             string<delimiter(')content(stream_set_timeout)delimiter(')>operator(,)
             string<delimiter(')content(stream_set_write_buffer)delimiter(')>operator(,)
             string<delimiter(')content(stream_socket_accept)delimiter(')>operator(,)
             string<delimiter(')content(stream_socket_client)delimiter(')>operator(,)
             string<delimiter(')content(stream_socket_enable_crypto)delimiter(')>operator(,)
             string<delimiter(')content(stream_socket_get_name)delimiter(')>operator(,)
             string<delimiter(')content(stream_socket_pair)delimiter(')>operator(,)
             string<delimiter(')content(stream_socket_recvfrom)delimiter(')>operator(,)
             string<delimiter(')content(stream_socket_sendto)delimiter(')>operator(,)
             string<delimiter(')content(stream_socket_server)delimiter(')>operator(,)
             string<delimiter(')content(stream_wrapper_register)delimiter(')>operator(,)
             string<delimiter(')content(stream_wrapper_restore)delimiter(')>operator(,)
             string<delimiter(')content(stream_wrapper_unregister)delimiter(')>operator(])operator(,)
 string<delimiter(')content(Strings)delimiter(')>operator(:) operator([)string<delimiter(')content(addcslashes)delimiter(')>operator(,)
             string<delimiter(')content(addslashes)delimiter(')>operator(,)
             string<delimiter(')content(bin2hex)delimiter(')>operator(,)
             string<delimiter(')content(chop)delimiter(')>operator(,)
             string<delimiter(')content(chr)delimiter(')>operator(,)
             string<delimiter(')content(chunk_split)delimiter(')>operator(,)
             string<delimiter(')content(convert_cyr_string)delimiter(')>operator(,)
             string<delimiter(')content(convert_uudecode)delimiter(')>operator(,)
             string<delimiter(')content(convert_uuencode)delimiter(')>operator(,)
             string<delimiter(')content(count_chars)delimiter(')>operator(,)
             string<delimiter(')content(crc32)delimiter(')>operator(,)
             string<delimiter(')content(crypt)delimiter(')>operator(,)
             string<delimiter(')content(echo)delimiter(')>operator(,)
             string<delimiter(')content(explode)delimiter(')>operator(,)
             string<delimiter(')content(fprintf)delimiter(')>operator(,)
             string<delimiter(')content(get_html_translation_table)delimiter(')>operator(,)
             string<delimiter(')content(hebrev)delimiter(')>operator(,)
             string<delimiter(')content(hebrevc)delimiter(')>operator(,)
             string<delimiter(')content(html_entity_decode)delimiter(')>operator(,)
             string<delimiter(')content(htmlentities)delimiter(')>operator(,)
             string<delimiter(')content(htmlspecialchars)delimiter(')>operator(,)
             string<delimiter(')content(implode)delimiter(')>operator(,)
             string<delimiter(')content(join)delimiter(')>operator(,)
             string<delimiter(')content(levenshtein)delimiter(')>operator(,)
             string<delimiter(')content(localeconv)delimiter(')>operator(,)
             string<delimiter(')content(ltrim)delimiter(')>operator(,)
             string<delimiter(')content(md5)delimiter(')>operator(,)
             string<delimiter(')content(md5_file)delimiter(')>operator(,)
             string<delimiter(')content(metaphone)delimiter(')>operator(,)
             string<delimiter(')content(money_format)delimiter(')>operator(,)
             string<delimiter(')content(nl2br)delimiter(')>operator(,)
             string<delimiter(')content(nl_langinfo)delimiter(')>operator(,)
             string<delimiter(')content(number_format)delimiter(')>operator(,)
             string<delimiter(')content(ord)delimiter(')>operator(,)
             string<delimiter(')content(parse_str)delimiter(')>operator(,)
             string<delimiter(')content(print)delimiter(')>operator(,)
             string<delimiter(')content(printf)delimiter(')>operator(,)
             string<delimiter(')content(quoted_printable_decode)delimiter(')>operator(,)
             string<delimiter(')content(quotemeta)delimiter(')>operator(,)
             string<delimiter(')content(rtrim)delimiter(')>operator(,)
             string<delimiter(')content(setlocale)delimiter(')>operator(,)
             string<delimiter(')content(sha1)delimiter(')>operator(,)
             string<delimiter(')content(sha1_file)delimiter(')>operator(,)
             string<delimiter(')content(similar_text)delimiter(')>operator(,)
             string<delimiter(')content(soundex)delimiter(')>operator(,)
             string<delimiter(')content(sprintf)delimiter(')>operator(,)
             string<delimiter(')content(sscanf)delimiter(')>operator(,)
             string<delimiter(')content(str_ireplace)delimiter(')>operator(,)
             string<delimiter(')content(str_pad)delimiter(')>operator(,)
             string<delimiter(')content(str_repeat)delimiter(')>operator(,)
             string<delimiter(')content(str_replace)delimiter(')>operator(,)
             string<delimiter(')content(str_rot13)delimiter(')>operator(,)
             string<delimiter(')content(str_shuffle)delimiter(')>operator(,)
             string<delimiter(')content(str_split)delimiter(')>operator(,)
             string<delimiter(')content(str_word_count)delimiter(')>operator(,)
             string<delimiter(')content(strcasecmp)delimiter(')>operator(,)
             string<delimiter(')content(strchr)delimiter(')>operator(,)
             string<delimiter(')content(strcmp)delimiter(')>operator(,)
             string<delimiter(')content(strcoll)delimiter(')>operator(,)
             string<delimiter(')content(strcspn)delimiter(')>operator(,)
             string<delimiter(')content(strip_tags)delimiter(')>operator(,)
             string<delimiter(')content(stripcslashes)delimiter(')>operator(,)
             string<delimiter(')content(stripos)delimiter(')>operator(,)
             string<delimiter(')content(stripslashes)delimiter(')>operator(,)
             string<delimiter(')content(stristr)delimiter(')>operator(,)
             string<delimiter(')content(strlen)delimiter(')>operator(,)
             string<delimiter(')content(strnatcasecmp)delimiter(')>operator(,)
             string<delimiter(')content(strnatcmp)delimiter(')>operator(,)
             string<delimiter(')content(strncasecmp)delimiter(')>operator(,)
             string<delimiter(')content(strncmp)delimiter(')>operator(,)
             string<delimiter(')content(strpbrk)delimiter(')>operator(,)
             string<delimiter(')content(strpos)delimiter(')>operator(,)
             string<delimiter(')content(strrchr)delimiter(')>operator(,)
             string<delimiter(')content(strrev)delimiter(')>operator(,)
             string<delimiter(')content(strripos)delimiter(')>operator(,)
             string<delimiter(')content(strrpos)delimiter(')>operator(,)
             string<delimiter(')content(strspn)delimiter(')>operator(,)
             string<delimiter(')content(strstr)delimiter(')>operator(,)
             string<delimiter(')content(strtok)delimiter(')>operator(,)
             string<delimiter(')content(strtolower)delimiter(')>operator(,)
             string<delimiter(')content(strtoupper)delimiter(')>operator(,)
             string<delimiter(')content(strtr)delimiter(')>operator(,)
             string<delimiter(')content(substr)delimiter(')>operator(,)
             string<delimiter(')content(substr_compare)delimiter(')>operator(,)
             string<delimiter(')content(substr_count)delimiter(')>operator(,)
             string<delimiter(')content(substr_replace)delimiter(')>operator(,)
             string<delimiter(')content(trim)delimiter(')>operator(,)
             string<delimiter(')content(ucfirst)delimiter(')>operator(,)
             string<delimiter(')content(ucwords)delimiter(')>operator(,)
             string<delimiter(')content(vfprintf)delimiter(')>operator(,)
             string<delimiter(')content(vprintf)delimiter(')>operator(,)
             string<delimiter(')content(vsprintf)delimiter(')>operator(,)
             string<delimiter(')content(wordwrap)delimiter(')>operator(])operator(,)
 string<delimiter(')content(Sybase)delimiter(')>operator(:) operator([)string<delimiter(')content(sybase_affected_rows)delimiter(')>operator(,)
            string<delimiter(')content(sybase_close)delimiter(')>operator(,)
            string<delimiter(')content(sybase_connect)delimiter(')>operator(,)
            string<delimiter(')content(sybase_data_seek)delimiter(')>operator(,)
            string<delimiter(')content(sybase_deadlock_retry_count)delimiter(')>operator(,)
            string<delimiter(')content(sybase_fetch_array)delimiter(')>operator(,)
            string<delimiter(')content(sybase_fetch_assoc)delimiter(')>operator(,)
            string<delimiter(')content(sybase_fetch_field)delimiter(')>operator(,)
            string<delimiter(')content(sybase_fetch_object)delimiter(')>operator(,)
            string<delimiter(')content(sybase_fetch_row)delimiter(')>operator(,)
            string<delimiter(')content(sybase_field_seek)delimiter(')>operator(,)
            string<delimiter(')content(sybase_free_result)delimiter(')>operator(,)
            string<delimiter(')content(sybase_get_last_message)delimiter(')>operator(,)
            string<delimiter(')content(sybase_min_client_severity)delimiter(')>operator(,)
            string<delimiter(')content(sybase_min_error_severity)delimiter(')>operator(,)
            string<delimiter(')content(sybase_min_message_severity)delimiter(')>operator(,)
            string<delimiter(')content(sybase_min_server_severity)delimiter(')>operator(,)
            string<delimiter(')content(sybase_num_fields)delimiter(')>operator(,)
            string<delimiter(')content(sybase_num_rows)delimiter(')>operator(,)
            string<delimiter(')content(sybase_pconnect)delimiter(')>operator(,)
            string<delimiter(')content(sybase_query)delimiter(')>operator(,)
            string<delimiter(')content(sybase_result)delimiter(')>operator(,)
            string<delimiter(')content(sybase_select_db)delimiter(')>operator(,)
            string<delimiter(')content(sybase_set_message_handler)delimiter(')>operator(,)
            string<delimiter(')content(sybase_unbuffered_query)delimiter(')>operator(])operator(,)
 string<delimiter(')content(TCP Wrappers)delimiter(')>operator(:) operator([)string<delimiter(')content(tcpwrap_check)delimiter(')>operator(])operator(,)
 string<delimiter(')content(Tokenizer)delimiter(')>operator(:) operator([)string<delimiter(')content(token_get_all)delimiter(')>operator(,) string<delimiter(')content(token_name)delimiter(')>operator(])operator(,)
 string<delimiter(')content(URLs)delimiter(')>operator(:) operator([)string<delimiter(')content(base64_decode)delimiter(')>operator(,)
          string<delimiter(')content(base64_encode)delimiter(')>operator(,)
          string<delimiter(')content(get_headers)delimiter(')>operator(,)
          string<delimiter(')content(get_meta_tags)delimiter(')>operator(,)
          string<delimiter(')content(http_build_query)delimiter(')>operator(,)
          string<delimiter(')content(parse_url)delimiter(')>operator(,)
          string<delimiter(')content(rawurldecode)delimiter(')>operator(,)
          string<delimiter(')content(rawurlencode)delimiter(')>operator(,)
          string<delimiter(')content(urldecode)delimiter(')>operator(,)
          string<delimiter(')content(urlencode)delimiter(')>operator(])operator(,)
 string<delimiter(')content(Variables handling)delimiter(')>operator(:) operator([)string<delimiter(')content(debug_zval_dump)delimiter(')>operator(,)
                        string<delimiter(')content(doubleval)delimiter(')>operator(,)
                        string<delimiter(')content(empty)delimiter(')>operator(,)
                        string<delimiter(')content(floatval)delimiter(')>operator(,)
                        string<delimiter(')content(get_defined_vars)delimiter(')>operator(,)
                        string<delimiter(')content(get_resource_type)delimiter(')>operator(,)
                        string<delimiter(')content(gettype)delimiter(')>operator(,)
                        string<delimiter(')content(import_request_variables)delimiter(')>operator(,)
                        string<delimiter(')content(intval)delimiter(')>operator(,)
                        string<delimiter(')content(is_array)delimiter(')>operator(,)
                        string<delimiter(')content(is_bool)delimiter(')>operator(,)
                        string<delimiter(')content(is_callable)delimiter(')>operator(,)
                        string<delimiter(')content(is_double)delimiter(')>operator(,)
                        string<delimiter(')content(is_float)delimiter(')>operator(,)
                        string<delimiter(')content(is_int)delimiter(')>operator(,)
                        string<delimiter(')content(is_integer)delimiter(')>operator(,)
                        string<delimiter(')content(is_long)delimiter(')>operator(,)
                        string<delimiter(')content(is_null)delimiter(')>operator(,)
                        string<delimiter(')content(is_numeric)delimiter(')>operator(,)
                        string<delimiter(')content(is_object)delimiter(')>operator(,)
                        string<delimiter(')content(is_real)delimiter(')>operator(,)
                        string<delimiter(')content(is_resource)delimiter(')>operator(,)
                        string<delimiter(')content(is_scalar)delimiter(')>operator(,)
                        string<delimiter(')content(is_string)delimiter(')>operator(,)
                        string<delimiter(')content(isset)delimiter(')>operator(,)
                        string<delimiter(')content(print_r)delimiter(')>operator(,)
                        string<delimiter(')content(serialize)delimiter(')>operator(,)
                        string<delimiter(')content(settype)delimiter(')>operator(,)
                        string<delimiter(')content(strval)delimiter(')>operator(,)
                        string<delimiter(')content(unserialize)delimiter(')>operator(,)
                        string<delimiter(')content(unset)delimiter(')>operator(,)
                        string<delimiter(')content(var_dump)delimiter(')>operator(,)
                        string<delimiter(')content(var_export)delimiter(')>operator(])operator(,)
 string<delimiter(')content(Verisign Payflow Pro)delimiter(')>operator(:) operator([)string<delimiter(')content(pfpro_cleanup)delimiter(')>operator(,)
                          string<delimiter(')content(pfpro_init)delimiter(')>operator(,)
                          string<delimiter(')content(pfpro_process)delimiter(')>operator(,)
                          string<delimiter(')content(pfpro_process_raw)delimiter(')>operator(,)
                          string<delimiter(')content(pfpro_version)delimiter(')>operator(])operator(,)
 string<delimiter(')content(W32api)delimiter(')>operator(:) operator([)string<delimiter(')content(w32api_deftype)delimiter(')>operator(,)
            string<delimiter(')content(w32api_init_dtype)delimiter(')>operator(,)
            string<delimiter(')content(w32api_invoke_function)delimiter(')>operator(,)
            string<delimiter(')content(w32api_register_function)delimiter(')>operator(,)
            string<delimiter(')content(w32api_set_call_method)delimiter(')>operator(])operator(,)
 string<delimiter(')content(WDDX)delimiter(')>operator(:) operator([)string<delimiter(')content(wddx_add_vars)delimiter(')>operator(,)
          string<delimiter(')content(wddx_deserialize)delimiter(')>operator(,)
          string<delimiter(')content(wddx_packet_end)delimiter(')>operator(,)
          string<delimiter(')content(wddx_packet_start)delimiter(')>operator(,)
          string<delimiter(')content(wddx_serialize_value)delimiter(')>operator(,)
          string<delimiter(')content(wddx_serialize_vars)delimiter(')>operator(])operator(,)
 string<delimiter(')content(XML)delimiter(')>operator(:) operator([)string<delimiter(')content(utf8_decode)delimiter(')>operator(,)
         string<delimiter(')content(utf8_encode)delimiter(')>operator(,)
         string<delimiter(')content(xml_error_string)delimiter(')>operator(,)
         string<delimiter(')content(xml_get_current_byte_index)delimiter(')>operator(,)
         string<delimiter(')content(xml_get_current_column_number)delimiter(')>operator(,)
         string<delimiter(')content(xml_get_current_line_number)delimiter(')>operator(,)
         string<delimiter(')content(xml_get_error_code)delimiter(')>operator(,)
         string<delimiter(')content(xml_parse)delimiter(')>operator(,)
         string<delimiter(')content(xml_parse_into_struct)delimiter(')>operator(,)
         string<delimiter(')content(xml_parser_create)delimiter(')>operator(,)
         string<delimiter(')content(xml_parser_create_ns)delimiter(')>operator(,)
         string<delimiter(')content(xml_parser_free)delimiter(')>operator(,)
         string<delimiter(')content(xml_parser_get_option)delimiter(')>operator(,)
         string<delimiter(')content(xml_parser_set_option)delimiter(')>operator(,)
         string<delimiter(')content(xml_set_character_data_handler)delimiter(')>operator(,)
         string<delimiter(')content(xml_set_default_handler)delimiter(')>operator(,)
         string<delimiter(')content(xml_set_element_handler)delimiter(')>operator(,)
         string<delimiter(')content(xml_set_end_namespace_decl_handler)delimiter(')>operator(,)
         string<delimiter(')content(xml_set_external_entity_ref_handler)delimiter(')>operator(,)
         string<delimiter(')content(xml_set_notation_decl_handler)delimiter(')>operator(,)
         string<delimiter(')content(xml_set_object)delimiter(')>operator(,)
         string<delimiter(')content(xml_set_processing_instruction_handler)delimiter(')>operator(,)
         string<delimiter(')content(xml_set_start_namespace_decl_handler)delimiter(')>operator(,)
         string<delimiter(')content(xml_set_unparsed_entity_decl_handler)delimiter(')>operator(])operator(,)
 string<delimiter(')content(XML-RPC)delimiter(')>operator(:) operator([)string<delimiter(')content(xmlrpc_decode)delimiter(')>operator(,)
             string<delimiter(')content(xmlrpc_decode_request)delimiter(')>operator(,)
             string<delimiter(')content(xmlrpc_encode)delimiter(')>operator(,)
             string<delimiter(')content(xmlrpc_encode_request)delimiter(')>operator(,)
             string<delimiter(')content(xmlrpc_get_type)delimiter(')>operator(,)
             string<delimiter(')content(xmlrpc_is_fault)delimiter(')>operator(,)
             string<delimiter(')content(xmlrpc_parse_method_descriptions)delimiter(')>operator(,)
             string<delimiter(')content(xmlrpc_server_add_introspection_data)delimiter(')>operator(,)
             string<delimiter(')content(xmlrpc_server_call_method)delimiter(')>operator(,)
             string<delimiter(')content(xmlrpc_server_create)delimiter(')>operator(,)
             string<delimiter(')content(xmlrpc_server_destroy)delimiter(')>operator(,)
             string<delimiter(')content(xmlrpc_server_register_introspection_callback)delimiter(')>operator(,)
             string<delimiter(')content(xmlrpc_server_register_method)delimiter(')>operator(,)
             string<delimiter(')content(xmlrpc_set_type)delimiter(')>operator(])operator(,)
 string<delimiter(')content(XSL)delimiter(')>operator(:) operator([)string<delimiter(')content(xsl_xsltprocessor_get_parameter)delimiter(')>operator(,)
         string<delimiter(')content(xsl_xsltprocessor_has_exslt_support)delimiter(')>operator(,)
         string<delimiter(')content(xsl_xsltprocessor_import_stylesheet)delimiter(')>operator(,)
         string<delimiter(')content(xsl_xsltprocessor_register_php_functions)delimiter(')>operator(,)
         string<delimiter(')content(xsl_xsltprocessor_remove_parameter)delimiter(')>operator(,)
         string<delimiter(')content(xsl_xsltprocessor_set_parameter)delimiter(')>operator(,)
         string<delimiter(')content(xsl_xsltprocessor_transform_to_doc)delimiter(')>operator(,)
         string<delimiter(')content(xsl_xsltprocessor_transform_to_uri)delimiter(')>operator(,)
         string<delimiter(')content(xsl_xsltprocessor_transform_to_xml)delimiter(')>operator(])operator(,)
 string<delimiter(')content(XSLT)delimiter(')>operator(:) operator([)string<delimiter(')content(xslt_backend_info)delimiter(')>operator(,)
          string<delimiter(')content(xslt_backend_name)delimiter(')>operator(,)
          string<delimiter(')content(xslt_backend_version)delimiter(')>operator(,)
          string<delimiter(')content(xslt_create)delimiter(')>operator(,)
          string<delimiter(')content(xslt_errno)delimiter(')>operator(,)
          string<delimiter(')content(xslt_error)delimiter(')>operator(,)
          string<delimiter(')content(xslt_free)delimiter(')>operator(,)
          string<delimiter(')content(xslt_getopt)delimiter(')>operator(,)
          string<delimiter(')content(xslt_process)delimiter(')>operator(,)
          string<delimiter(')content(xslt_set_base)delimiter(')>operator(,)
          string<delimiter(')content(xslt_set_encoding)delimiter(')>operator(,)
          string<delimiter(')content(xslt_set_error_handler)delimiter(')>operator(,)
          string<delimiter(')content(xslt_set_log)delimiter(')>operator(,)
          string<delimiter(')content(xslt_set_object)delimiter(')>operator(,)
          string<delimiter(')content(xslt_set_sax_handler)delimiter(')>operator(,)
          string<delimiter(')content(xslt_set_sax_handlers)delimiter(')>operator(,)
          string<delimiter(')content(xslt_set_scheme_handler)delimiter(')>operator(,)
          string<delimiter(')content(xslt_set_scheme_handlers)delimiter(')>operator(,)
          string<delimiter(')content(xslt_setopt)delimiter(')>operator(])operator(,)
 string<delimiter(')content(YAZ)delimiter(')>operator(:) operator([)string<delimiter(')content(yaz_addinfo)delimiter(')>operator(,)
         string<delimiter(')content(yaz_ccl_conf)delimiter(')>operator(,)
         string<delimiter(')content(yaz_ccl_parse)delimiter(')>operator(,)
         string<delimiter(')content(yaz_close)delimiter(')>operator(,)
         string<delimiter(')content(yaz_connect)delimiter(')>operator(,)
         string<delimiter(')content(yaz_database)delimiter(')>operator(,)
         string<delimiter(')content(yaz_element)delimiter(')>operator(,)
         string<delimiter(')content(yaz_errno)delimiter(')>operator(,)
         string<delimiter(')content(yaz_error)delimiter(')>operator(,)
         string<delimiter(')content(yaz_es_result)delimiter(')>operator(,)
         string<delimiter(')content(yaz_get_option)delimiter(')>operator(,)
         string<delimiter(')content(yaz_hits)delimiter(')>operator(,)
         string<delimiter(')content(yaz_itemorder)delimiter(')>operator(,)
         string<delimiter(')content(yaz_present)delimiter(')>operator(,)
         string<delimiter(')content(yaz_range)delimiter(')>operator(,)
         string<delimiter(')content(yaz_record)delimiter(')>operator(,)
         string<delimiter(')content(yaz_scan)delimiter(')>operator(,)
         string<delimiter(')content(yaz_scan_result)delimiter(')>operator(,)
         string<delimiter(')content(yaz_schema)delimiter(')>operator(,)
         string<delimiter(')content(yaz_search)delimiter(')>operator(,)
         string<delimiter(')content(yaz_set_option)delimiter(')>operator(,)
         string<delimiter(')content(yaz_sort)delimiter(')>operator(,)
         string<delimiter(')content(yaz_syntax)delimiter(')>operator(,)
         string<delimiter(')content(yaz_wait)delimiter(')>operator(])operator(,)
 string<delimiter(')content(YP/NIS)delimiter(')>operator(:) operator([)string<delimiter(')content(yp_all)delimiter(')>operator(,)
            string<delimiter(')content(yp_cat)delimiter(')>operator(,)
            string<delimiter(')content(yp_err_string)delimiter(')>operator(,)
            string<delimiter(')content(yp_errno)delimiter(')>operator(,)
            string<delimiter(')content(yp_first)delimiter(')>operator(,)
            string<delimiter(')content(yp_get_default_domain)delimiter(')>operator(,)
            string<delimiter(')content(yp_master)delimiter(')>operator(,)
            string<delimiter(')content(yp_match)delimiter(')>operator(,)
            string<delimiter(')content(yp_next)delimiter(')>operator(,)
            string<delimiter(')content(yp_order)delimiter(')>operator(])operator(,)
 string<delimiter(')content(Zip)delimiter(')>operator(:) operator([)string<delimiter(')content(zip_close)delimiter(')>operator(,)
         string<delimiter(')content(zip_entry_close)delimiter(')>operator(,)
         string<delimiter(')content(zip_entry_compressedsize)delimiter(')>operator(,)
         string<delimiter(')content(zip_entry_compressionmethod)delimiter(')>operator(,)
         string<delimiter(')content(zip_entry_filesize)delimiter(')>operator(,)
         string<delimiter(')content(zip_entry_name)delimiter(')>operator(,)
         string<delimiter(')content(zip_entry_open)delimiter(')>operator(,)
         string<delimiter(')content(zip_entry_read)delimiter(')>operator(,)
         string<delimiter(')content(zip_open)delimiter(')>operator(,)
         string<delimiter(')content(zip_read)delimiter(')>operator(])operator(,)
 string<delimiter(')content(Zlib)delimiter(')>operator(:) operator([)string<delimiter(')content(gzclose)delimiter(')>operator(,)
          string<delimiter(')content(gzcompress)delimiter(')>operator(,)
          string<delimiter(')content(gzdeflate)delimiter(')>operator(,)
          string<delimiter(')content(gzencode)delimiter(')>operator(,)
          string<delimiter(')content(gzeof)delimiter(')>operator(,)
          string<delimiter(')content(gzfile)delimiter(')>operator(,)
          string<delimiter(')content(gzgetc)delimiter(')>operator(,)
          string<delimiter(')content(gzgets)delimiter(')>operator(,)
          string<delimiter(')content(gzgetss)delimiter(')>operator(,)
          string<delimiter(')content(gzinflate)delimiter(')>operator(,)
          string<delimiter(')content(gzopen)delimiter(')>operator(,)
          string<delimiter(')content(gzpassthru)delimiter(')>operator(,)
          string<delimiter(')content(gzputs)delimiter(')>operator(,)
          string<delimiter(')content(gzread)delimiter(')>operator(,)
          string<delimiter(')content(gzrewind)delimiter(')>operator(,)
          string<delimiter(')content(gzseek)delimiter(')>operator(,)
          string<delimiter(')content(gztell)delimiter(')>operator(,)
          string<delimiter(')content(gzuncompress)delimiter(')>operator(,)
          string<delimiter(')content(gzwrite)delimiter(')>operator(,)
          string<delimiter(')content(readgzfile)delimiter(')>operator(,)
          string<delimiter(')content(zlib_get_coding_type)delimiter(')>operator(])operator(,)
 string<delimiter(')content(bcompiler)delimiter(')>operator(:) operator([)string<delimiter(')content(bcompiler_load)delimiter(')>operator(,)
               string<delimiter(')content(bcompiler_load_exe)delimiter(')>operator(,)
               string<delimiter(')content(bcompiler_parse_class)delimiter(')>operator(,)
               string<delimiter(')content(bcompiler_read)delimiter(')>operator(,)
               string<delimiter(')content(bcompiler_write_class)delimiter(')>operator(,)
               string<delimiter(')content(bcompiler_write_constant)delimiter(')>operator(,)
               string<delimiter(')content(bcompiler_write_exe_footer)delimiter(')>operator(,)
               string<delimiter(')content(bcompiler_write_footer)delimiter(')>operator(,)
               string<delimiter(')content(bcompiler_write_function)delimiter(')>operator(,)
               string<delimiter(')content(bcompiler_write_functions_from_file)delimiter(')>operator(,)
               string<delimiter(')content(bcompiler_write_header)delimiter(')>operator(])operator(,)
 string<delimiter(')content(ctype)delimiter(')>operator(:) operator([)string<delimiter(')content(ctype_alnum)delimiter(')>operator(,)
           string<delimiter(')content(ctype_alpha)delimiter(')>operator(,)
           string<delimiter(')content(ctype_cntrl)delimiter(')>operator(,)
           string<delimiter(')content(ctype_digit)delimiter(')>operator(,)
           string<delimiter(')content(ctype_graph)delimiter(')>operator(,)
           string<delimiter(')content(ctype_lower)delimiter(')>operator(,)
           string<delimiter(')content(ctype_print)delimiter(')>operator(,)
           string<delimiter(')content(ctype_punct)delimiter(')>operator(,)
           string<delimiter(')content(ctype_space)delimiter(')>operator(,)
           string<delimiter(')content(ctype_upper)delimiter(')>operator(,)
           string<delimiter(')content(ctype_xdigit)delimiter(')>operator(])operator(,)
 string<delimiter(')content(dBase)delimiter(')>operator(:) operator([)string<delimiter(')content(dbase_add_record)delimiter(')>operator(,)
           string<delimiter(')content(dbase_close)delimiter(')>operator(,)
           string<delimiter(')content(dbase_create)delimiter(')>operator(,)
           string<delimiter(')content(dbase_delete_record)delimiter(')>operator(,)
           string<delimiter(')content(dbase_get_header_info)delimiter(')>operator(,)
           string<delimiter(')content(dbase_get_record)delimiter(')>operator(,)
           string<delimiter(')content(dbase_get_record_with_names)delimiter(')>operator(,)
           string<delimiter(')content(dbase_numfields)delimiter(')>operator(,)
           string<delimiter(')content(dbase_numrecords)delimiter(')>operator(,)
           string<delimiter(')content(dbase_open)delimiter(')>operator(,)
           string<delimiter(')content(dbase_pack)delimiter(')>operator(,)
           string<delimiter(')content(dbase_replace_record)delimiter(')>operator(])operator(,)
 string<delimiter(')content(dba)delimiter(')>operator(:) operator([)string<delimiter(')content(dba_close)delimiter(')>operator(,)
         string<delimiter(')content(dba_delete)delimiter(')>operator(,)
         string<delimiter(')content(dba_exists)delimiter(')>operator(,)
         string<delimiter(')content(dba_fetch)delimiter(')>operator(,)
         string<delimiter(')content(dba_firstkey)delimiter(')>operator(,)
         string<delimiter(')content(dba_handlers)delimiter(')>operator(,)
         string<delimiter(')content(dba_insert)delimiter(')>operator(,)
         string<delimiter(')content(dba_key_split)delimiter(')>operator(,)
         string<delimiter(')content(dba_list)delimiter(')>operator(,)
         string<delimiter(')content(dba_nextkey)delimiter(')>operator(,)
         string<delimiter(')content(dba_open)delimiter(')>operator(,)
         string<delimiter(')content(dba_optimize)delimiter(')>operator(,)
         string<delimiter(')content(dba_popen)delimiter(')>operator(,)
         string<delimiter(')content(dba_replace)delimiter(')>operator(,)
         string<delimiter(')content(dba_sync)delimiter(')>operator(])operator(,)
 string<delimiter(')content(dbx)delimiter(')>operator(:) operator([)string<delimiter(')content(dbx_close)delimiter(')>operator(,)
         string<delimiter(')content(dbx_compare)delimiter(')>operator(,)
         string<delimiter(')content(dbx_connect)delimiter(')>operator(,)
         string<delimiter(')content(dbx_error)delimiter(')>operator(,)
         string<delimiter(')content(dbx_escape_string)delimiter(')>operator(,)
         string<delimiter(')content(dbx_fetch_row)delimiter(')>operator(,)
         string<delimiter(')content(dbx_query)delimiter(')>operator(,)
         string<delimiter(')content(dbx_sort)delimiter(')>operator(])operator(,)
 string<delimiter(')content(fam)delimiter(')>operator(:) operator([)string<delimiter(')content(fam_cancel_monitor)delimiter(')>operator(,)
         string<delimiter(')content(fam_close)delimiter(')>operator(,)
         string<delimiter(')content(fam_monitor_collection)delimiter(')>operator(,)
         string<delimiter(')content(fam_monitor_directory)delimiter(')>operator(,)
         string<delimiter(')content(fam_monitor_file)delimiter(')>operator(,)
         string<delimiter(')content(fam_next_event)delimiter(')>operator(,)
         string<delimiter(')content(fam_open)delimiter(')>operator(,)
         string<delimiter(')content(fam_pending)delimiter(')>operator(,)
         string<delimiter(')content(fam_resume_monitor)delimiter(')>operator(,)
         string<delimiter(')content(fam_suspend_monitor)delimiter(')>operator(])operator(,)
 string<delimiter(')content(filePro)delimiter(')>operator(:) operator([)string<delimiter(')content(filepro)delimiter(')>operator(,)
             string<delimiter(')content(filepro_fieldcount)delimiter(')>operator(,)
             string<delimiter(')content(filepro_fieldname)delimiter(')>operator(,)
             string<delimiter(')content(filepro_fieldtype)delimiter(')>operator(,)
             string<delimiter(')content(filepro_fieldwidth)delimiter(')>operator(,)
             string<delimiter(')content(filepro_retrieve)delimiter(')>operator(,)
             string<delimiter(')content(filepro_rowcount)delimiter(')>operator(])operator(,)
 string<delimiter(')content(gettext)delimiter(')>operator(:) operator([)string<delimiter(')content(bind_textdomain_codeset)delimiter(')>operator(,)
             string<delimiter(')content(bindtextdomain)delimiter(')>operator(,)
             string<delimiter(')content(dcgettext)delimiter(')>operator(,)
             string<delimiter(')content(dcngettext)delimiter(')>operator(,)
             string<delimiter(')content(dgettext)delimiter(')>operator(,)
             string<delimiter(')content(dngettext)delimiter(')>operator(,)
             string<delimiter(')content(gettext)delimiter(')>operator(,)
             string<delimiter(')content(ngettext)delimiter(')>operator(,)
             string<delimiter(')content(textdomain)delimiter(')>operator(])operator(,)
 string<delimiter(')content(iconv)delimiter(')>operator(:) operator([)string<delimiter(')content(iconv)delimiter(')>operator(,)
           string<delimiter(')content(iconv_get_encoding)delimiter(')>operator(,)
           string<delimiter(')content(iconv_mime_decode)delimiter(')>operator(,)
           string<delimiter(')content(iconv_mime_decode_headers)delimiter(')>operator(,)
           string<delimiter(')content(iconv_mime_encode)delimiter(')>operator(,)
           string<delimiter(')content(iconv_set_encoding)delimiter(')>operator(,)
           string<delimiter(')content(iconv_strlen)delimiter(')>operator(,)
           string<delimiter(')content(iconv_strpos)delimiter(')>operator(,)
           string<delimiter(')content(iconv_strrpos)delimiter(')>operator(,)
           string<delimiter(')content(iconv_substr)delimiter(')>operator(,)
           string<delimiter(')content(ob_iconv_handler)delimiter(')>operator(])operator(,)
 string<delimiter(')content(id3)delimiter(')>operator(:) operator([)string<delimiter(')content(id3_get_frame_long_name)delimiter(')>operator(,)
         string<delimiter(')content(id3_get_frame_short_name)delimiter(')>operator(,)
         string<delimiter(')content(id3_get_genre_id)delimiter(')>operator(,)
         string<delimiter(')content(id3_get_genre_list)delimiter(')>operator(,)
         string<delimiter(')content(id3_get_genre_name)delimiter(')>operator(,)
         string<delimiter(')content(id3_get_tag)delimiter(')>operator(,)
         string<delimiter(')content(id3_get_version)delimiter(')>operator(,)
         string<delimiter(')content(id3_remove_tag)delimiter(')>operator(,)
         string<delimiter(')content(id3_set_tag)delimiter(')>operator(])operator(,)
 string<delimiter(')content(mSQL)delimiter(')>operator(:) operator([)string<delimiter(')content(msql)delimiter(')>operator(,)
          string<delimiter(')content(msql_affected_rows)delimiter(')>operator(,)
          string<delimiter(')content(msql_close)delimiter(')>operator(,)
          string<delimiter(')content(msql_connect)delimiter(')>operator(,)
          string<delimiter(')content(msql_create_db)delimiter(')>operator(,)
          string<delimiter(')content(msql_createdb)delimiter(')>operator(,)
          string<delimiter(')content(msql_data_seek)delimiter(')>operator(,)
          string<delimiter(')content(msql_db_query)delimiter(')>operator(,)
          string<delimiter(')content(msql_dbname)delimiter(')>operator(,)
          string<delimiter(')content(msql_drop_db)delimiter(')>operator(,)
          string<delimiter(')content(msql_error)delimiter(')>operator(,)
          string<delimiter(')content(msql_fetch_array)delimiter(')>operator(,)
          string<delimiter(')content(msql_fetch_field)delimiter(')>operator(,)
          string<delimiter(')content(msql_fetch_object)delimiter(')>operator(,)
          string<delimiter(')content(msql_fetch_row)delimiter(')>operator(,)
          string<delimiter(')content(msql_field_flags)delimiter(')>operator(,)
          string<delimiter(')content(msql_field_len)delimiter(')>operator(,)
          string<delimiter(')content(msql_field_name)delimiter(')>operator(,)
          string<delimiter(')content(msql_field_seek)delimiter(')>operator(,)
          string<delimiter(')content(msql_field_table)delimiter(')>operator(,)
          string<delimiter(')content(msql_field_type)delimiter(')>operator(,)
          string<delimiter(')content(msql_fieldflags)delimiter(')>operator(,)
          string<delimiter(')content(msql_fieldlen)delimiter(')>operator(,)
          string<delimiter(')content(msql_fieldname)delimiter(')>operator(,)
          string<delimiter(')content(msql_fieldtable)delimiter(')>operator(,)
          string<delimiter(')content(msql_fieldtype)delimiter(')>operator(,)
          string<delimiter(')content(msql_free_result)delimiter(')>operator(,)
          string<delimiter(')content(msql_list_dbs)delimiter(')>operator(,)
          string<delimiter(')content(msql_list_fields)delimiter(')>operator(,)
          string<delimiter(')content(msql_list_tables)delimiter(')>operator(,)
          string<delimiter(')content(msql_num_fields)delimiter(')>operator(,)
          string<delimiter(')content(msql_num_rows)delimiter(')>operator(,)
          string<delimiter(')content(msql_numfields)delimiter(')>operator(,)
          string<delimiter(')content(msql_numrows)delimiter(')>operator(,)
          string<delimiter(')content(msql_pconnect)delimiter(')>operator(,)
          string<delimiter(')content(msql_query)delimiter(')>operator(,)
          string<delimiter(')content(msql_regcase)delimiter(')>operator(,)
          string<delimiter(')content(msql_result)delimiter(')>operator(,)
          string<delimiter(')content(msql_select_db)delimiter(')>operator(,)
          string<delimiter(')content(msql_tablename)delimiter(')>operator(])operator(,)
 string<delimiter(')content(mailparse)delimiter(')>operator(:) operator([)string<delimiter(')content(mailparse_determine_best_xfer_encoding)delimiter(')>operator(,)
               string<delimiter(')content(mailparse_msg_create)delimiter(')>operator(,)
               string<delimiter(')content(mailparse_msg_extract_part)delimiter(')>operator(,)
               string<delimiter(')content(mailparse_msg_extract_part_file)delimiter(')>operator(,)
               string<delimiter(')content(mailparse_msg_free)delimiter(')>operator(,)
               string<delimiter(')content(mailparse_msg_get_part)delimiter(')>operator(,)
               string<delimiter(')content(mailparse_msg_get_part_data)delimiter(')>operator(,)
               string<delimiter(')content(mailparse_msg_get_structure)delimiter(')>operator(,)
               string<delimiter(')content(mailparse_msg_parse)delimiter(')>operator(,)
               string<delimiter(')content(mailparse_msg_parse_file)delimiter(')>operator(,)
               string<delimiter(')content(mailparse_rfc822_parse_addresses)delimiter(')>operator(,)
               string<delimiter(')content(mailparse_stream_encode)delimiter(')>operator(,)
               string<delimiter(')content(mailparse_uudecode_all)delimiter(')>operator(])operator(,)
 string<delimiter(')content(mcrypt)delimiter(')>operator(:) operator([)string<delimiter(')content(mcrypt_cbc)delimiter(')>operator(,)
            string<delimiter(')content(mcrypt_cfb)delimiter(')>operator(,)
            string<delimiter(')content(mcrypt_create_iv)delimiter(')>operator(,)
            string<delimiter(')content(mcrypt_decrypt)delimiter(')>operator(,)
            string<delimiter(')content(mcrypt_ecb)delimiter(')>operator(,)
            string<delimiter(')content(mcrypt_enc_get_algorithms_name)delimiter(')>operator(,)
            string<delimiter(')content(mcrypt_enc_get_block_size)delimiter(')>operator(,)
            string<delimiter(')content(mcrypt_enc_get_iv_size)delimiter(')>operator(,)
            string<delimiter(')content(mcrypt_enc_get_key_size)delimiter(')>operator(,)
            string<delimiter(')content(mcrypt_enc_get_modes_name)delimiter(')>operator(,)
            string<delimiter(')content(mcrypt_enc_get_supported_key_sizes)delimiter(')>operator(,)
            string<delimiter(')content(mcrypt_enc_is_block_algorithm)delimiter(')>operator(,)
            string<delimiter(')content(mcrypt_enc_is_block_algorithm_mode)delimiter(')>operator(,)
            string<delimiter(')content(mcrypt_enc_is_block_mode)delimiter(')>operator(,)
            string<delimiter(')content(mcrypt_enc_self_test)delimiter(')>operator(,)
            string<delimiter(')content(mcrypt_encrypt)delimiter(')>operator(,)
            string<delimiter(')content(mcrypt_generic)delimiter(')>operator(,)
            string<delimiter(')content(mcrypt_generic_deinit)delimiter(')>operator(,)
            string<delimiter(')content(mcrypt_generic_end)delimiter(')>operator(,)
            string<delimiter(')content(mcrypt_generic_init)delimiter(')>operator(,)
            string<delimiter(')content(mcrypt_get_block_size)delimiter(')>operator(,)
            string<delimiter(')content(mcrypt_get_cipher_name)delimiter(')>operator(,)
            string<delimiter(')content(mcrypt_get_iv_size)delimiter(')>operator(,)
            string<delimiter(')content(mcrypt_get_key_size)delimiter(')>operator(,)
            string<delimiter(')content(mcrypt_list_algorithms)delimiter(')>operator(,)
            string<delimiter(')content(mcrypt_list_modes)delimiter(')>operator(,)
            string<delimiter(')content(mcrypt_module_close)delimiter(')>operator(,)
            string<delimiter(')content(mcrypt_module_get_algo_block_size)delimiter(')>operator(,)
            string<delimiter(')content(mcrypt_module_get_algo_key_size)delimiter(')>operator(,)
            string<delimiter(')content(mcrypt_module_get_supported_key_sizes)delimiter(')>operator(,)
            string<delimiter(')content(mcrypt_module_is_block_algorithm)delimiter(')>operator(,)
            string<delimiter(')content(mcrypt_module_is_block_algorithm_mode)delimiter(')>operator(,)
            string<delimiter(')content(mcrypt_module_is_block_mode)delimiter(')>operator(,)
            string<delimiter(')content(mcrypt_module_open)delimiter(')>operator(,)
            string<delimiter(')content(mcrypt_module_self_test)delimiter(')>operator(,)
            string<delimiter(')content(mcrypt_ofb)delimiter(')>operator(,)
            string<delimiter(')content(mdecrypt_generic)delimiter(')>operator(])operator(,)
 string<delimiter(')content(mhash)delimiter(')>operator(:) operator([)string<delimiter(')content(mhash)delimiter(')>operator(,)
           string<delimiter(')content(mhash_count)delimiter(')>operator(,)
           string<delimiter(')content(mhash_get_block_size)delimiter(')>operator(,)
           string<delimiter(')content(mhash_get_hash_name)delimiter(')>operator(,)
           string<delimiter(')content(mhash_keygen_s2k)delimiter(')>operator(])operator(,)
 string<delimiter(')content(mnoGoSearch)delimiter(')>operator(:) operator([)string<delimiter(')content(udm_add_search_limit)delimiter(')>operator(,)
                 string<delimiter(')content(udm_alloc_agent)delimiter(')>operator(,)
                 string<delimiter(')content(udm_alloc_agent_array)delimiter(')>operator(,)
                 string<delimiter(')content(udm_api_version)delimiter(')>operator(,)
                 string<delimiter(')content(udm_cat_list)delimiter(')>operator(,)
                 string<delimiter(')content(udm_cat_path)delimiter(')>operator(,)
                 string<delimiter(')content(udm_check_charset)delimiter(')>operator(,)
                 string<delimiter(')content(udm_check_stored)delimiter(')>operator(,)
                 string<delimiter(')content(udm_clear_search_limits)delimiter(')>operator(,)
                 string<delimiter(')content(udm_close_stored)delimiter(')>operator(,)
                 string<delimiter(')content(udm_crc32)delimiter(')>operator(,)
                 string<delimiter(')content(udm_errno)delimiter(')>operator(,)
                 string<delimiter(')content(udm_error)delimiter(')>operator(,)
                 string<delimiter(')content(udm_find)delimiter(')>operator(,)
                 string<delimiter(')content(udm_free_agent)delimiter(')>operator(,)
                 string<delimiter(')content(udm_free_ispell_data)delimiter(')>operator(,)
                 string<delimiter(')content(udm_free_res)delimiter(')>operator(,)
                 string<delimiter(')content(udm_get_doc_count)delimiter(')>operator(,)
                 string<delimiter(')content(udm_get_res_field)delimiter(')>operator(,)
                 string<delimiter(')content(udm_get_res_param)delimiter(')>operator(,)
                 string<delimiter(')content(udm_hash32)delimiter(')>operator(,)
                 string<delimiter(')content(udm_load_ispell_data)delimiter(')>operator(,)
                 string<delimiter(')content(udm_open_stored)delimiter(')>operator(,)
                 string<delimiter(')content(udm_set_agent_param)delimiter(')>operator(])operator(,)
 string<delimiter(')content(muscat)delimiter(')>operator(:) operator([)string<delimiter(')content(muscat_close)delimiter(')>operator(,)
            string<delimiter(')content(muscat_get)delimiter(')>operator(,)
            string<delimiter(')content(muscat_give)delimiter(')>operator(,)
            string<delimiter(')content(muscat_setup)delimiter(')>operator(,)
            string<delimiter(')content(muscat_setup_net)delimiter(')>operator(])operator(,)
 string<delimiter(')content(mysqli)delimiter(')>operator(:) operator([)string<delimiter(')content(mysqli_affected_rows)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_autocommit)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_bind_param)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_bind_result)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_change_user)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_character_set_name)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_client_encoding)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_close)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_commit)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_connect)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_connect_errno)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_connect_error)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_data_seek)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_debug)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_disable_reads_from_master)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_disable_rpl_parse)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_dump_debug_info)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_embedded_connect)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_enable_reads_from_master)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_enable_rpl_parse)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_errno)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_error)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_escape_string)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_execute)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_fetch)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_fetch_array)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_fetch_assoc)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_fetch_field)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_fetch_field_direct)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_fetch_fields)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_fetch_lengths)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_fetch_object)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_fetch_row)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_field_count)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_field_seek)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_field_tell)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_free_result)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_get_client_info)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_get_client_version)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_get_host_info)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_get_metadata)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_get_proto_info)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_get_server_info)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_get_server_version)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_info)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_init)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_insert_id)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_kill)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_master_query)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_more_results)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_multi_query)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_next_result)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_num_fields)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_num_rows)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_options)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_param_count)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_ping)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_prepare)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_query)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_real_connect)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_real_escape_string)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_real_query)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_report)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_rollback)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_rpl_parse_enabled)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_rpl_probe)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_rpl_query_type)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_select_db)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_send_long_data)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_send_query)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_server_end)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_server_init)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_set_opt)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_sqlstate)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_ssl_set)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_stat)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_stmt_affected_rows)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_stmt_bind_param)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_stmt_bind_result)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_stmt_close)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_stmt_data_seek)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_stmt_errno)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_stmt_error)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_stmt_execute)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_stmt_fetch)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_stmt_free_result)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_stmt_init)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_stmt_num_rows)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_stmt_param_count)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_stmt_prepare)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_stmt_reset)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_stmt_result_metadata)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_stmt_send_long_data)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_stmt_sqlstate)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_stmt_store_result)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_store_result)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_thread_id)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_thread_safe)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_use_result)delimiter(')>operator(,)
            string<delimiter(')content(mysqli_warning_count)delimiter(')>operator(])operator(,)
 string<delimiter(')content(openal)delimiter(')>operator(:) operator([)string<delimiter(')content(openal_buffer_create)delimiter(')>operator(,)
            string<delimiter(')content(openal_buffer_data)delimiter(')>operator(,)
            string<delimiter(')content(openal_buffer_destroy)delimiter(')>operator(,)
            string<delimiter(')content(openal_buffer_get)delimiter(')>operator(,)
            string<delimiter(')content(openal_buffer_loadwav)delimiter(')>operator(,)
            string<delimiter(')content(openal_context_create)delimiter(')>operator(,)
            string<delimiter(')content(openal_context_current)delimiter(')>operator(,)
            string<delimiter(')content(openal_context_destroy)delimiter(')>operator(,)
            string<delimiter(')content(openal_context_process)delimiter(')>operator(,)
            string<delimiter(')content(openal_context_suspend)delimiter(')>operator(,)
            string<delimiter(')content(openal_device_close)delimiter(')>operator(,)
            string<delimiter(')content(openal_device_open)delimiter(')>operator(,)
            string<delimiter(')content(openal_listener_get)delimiter(')>operator(,)
            string<delimiter(')content(openal_listener_set)delimiter(')>operator(,)
            string<delimiter(')content(openal_source_create)delimiter(')>operator(,)
            string<delimiter(')content(openal_source_destroy)delimiter(')>operator(,)
            string<delimiter(')content(openal_source_get)delimiter(')>operator(,)
            string<delimiter(')content(openal_source_pause)delimiter(')>operator(,)
            string<delimiter(')content(openal_source_play)delimiter(')>operator(,)
            string<delimiter(')content(openal_source_rewind)delimiter(')>operator(,)
            string<delimiter(')content(openal_source_set)delimiter(')>operator(,)
            string<delimiter(')content(openal_source_stop)delimiter(')>operator(,)
            string<delimiter(')content(openal_stream)delimiter(')>operator(])operator(,)
 string<delimiter(')content(qtdom)delimiter(')>operator(:) operator([)string<delimiter(')content(qdom_error)delimiter(')>operator(,) string<delimiter(')content(qdom_tree)delimiter(')>operator(])operator(,)
 string<delimiter(')content(shmop)delimiter(')>operator(:) operator([)string<delimiter(')content(shmop_close)delimiter(')>operator(,)
           string<delimiter(')content(shmop_delete)delimiter(')>operator(,)
           string<delimiter(')content(shmop_open)delimiter(')>operator(,)
           string<delimiter(')content(shmop_read)delimiter(')>operator(,)
           string<delimiter(')content(shmop_size)delimiter(')>operator(,)
           string<delimiter(')content(shmop_write)delimiter(')>operator(])operator(,)
 string<delimiter(')content(spl)delimiter(')>operator(:) operator([)string<delimiter(')content(class_implements)delimiter(')>operator(,)
         string<delimiter(')content(class_parents)delimiter(')>operator(,)
         string<delimiter(')content(iterator-to-array)delimiter(')>operator(,)
         string<delimiter(')content(iterator_count)delimiter(')>operator(,)
         string<delimiter(')content(spl_classes)delimiter(')>operator(])operator(,)
 string<delimiter(')content(ssh2)delimiter(')>operator(:) operator([)string<delimiter(')content(ssh2_auth_none)delimiter(')>operator(,)
          string<delimiter(')content(ssh2_auth_password)delimiter(')>operator(,)
          string<delimiter(')content(ssh2_auth_pubkey_file)delimiter(')>operator(,)
          string<delimiter(')content(ssh2_connect)delimiter(')>operator(,)
          string<delimiter(')content(ssh2_exec)delimiter(')>operator(,)
          string<delimiter(')content(ssh2_fetch_stream)delimiter(')>operator(,)
          string<delimiter(')content(ssh2_fingerprint)delimiter(')>operator(,)
          string<delimiter(')content(ssh2_methods_negotiated)delimiter(')>operator(,)
          string<delimiter(')content(ssh2_scp_recv)delimiter(')>operator(,)
          string<delimiter(')content(ssh2_scp_send)delimiter(')>operator(,)
          string<delimiter(')content(ssh2_sftp)delimiter(')>operator(,)
          string<delimiter(')content(ssh2_sftp_lstat)delimiter(')>operator(,)
          string<delimiter(')content(ssh2_sftp_mkdir)delimiter(')>operator(,)
          string<delimiter(')content(ssh2_sftp_readlink)delimiter(')>operator(,)
          string<delimiter(')content(ssh2_sftp_realpath)delimiter(')>operator(,)
          string<delimiter(')content(ssh2_sftp_rename)delimiter(')>operator(,)
          string<delimiter(')content(ssh2_sftp_rmdir)delimiter(')>operator(,)
          string<delimiter(')content(ssh2_sftp_stat)delimiter(')>operator(,)
          string<delimiter(')content(ssh2_sftp_symlink)delimiter(')>operator(,)
          string<delimiter(')content(ssh2_sftp_unlink)delimiter(')>operator(,)
          string<delimiter(')content(ssh2_shell)delimiter(')>operator(,)
          string<delimiter(')content(ssh2_tunnel)delimiter(')>operator(])operator(,)
 string<delimiter(')content(tidy)delimiter(')>operator(:) operator([)string<delimiter(')content(ob_tidyhandler)delimiter(')>operator(,)
          string<delimiter(')content(tidy_access_count)delimiter(')>operator(,)
          string<delimiter(')content(tidy_clean_repair)delimiter(')>operator(,)
          string<delimiter(')content(tidy_config_count)delimiter(')>operator(,)
          string<delimiter(')content(tidy_diagnose)delimiter(')>operator(,)
          string<delimiter(')content(tidy_error_count)delimiter(')>operator(,)
          string<delimiter(')content(tidy_get_body)delimiter(')>operator(,)
          string<delimiter(')content(tidy_get_config)delimiter(')>operator(,)
          string<delimiter(')content(tidy_get_error_buffer)delimiter(')>operator(,)
          string<delimiter(')content(tidy_get_head)delimiter(')>operator(,)
          string<delimiter(')content(tidy_get_html)delimiter(')>operator(,)
          string<delimiter(')content(tidy_get_html_ver)delimiter(')>operator(,)
          string<delimiter(')content(tidy_get_output)delimiter(')>operator(,)
          string<delimiter(')content(tidy_get_release)delimiter(')>operator(,)
          string<delimiter(')content(tidy_get_root)delimiter(')>operator(,)
          string<delimiter(')content(tidy_get_status)delimiter(')>operator(,)
          string<delimiter(')content(tidy_getopt)delimiter(')>operator(,)
          string<delimiter(')content(tidy_is_xhtml)delimiter(')>operator(,)
          string<delimiter(')content(tidy_is_xml)delimiter(')>operator(,)
          string<delimiter(')content(tidy_load_config)delimiter(')>operator(,)
          string<delimiter(')content(tidy_parse_file)delimiter(')>operator(,)
          string<delimiter(')content(tidy_parse_string)delimiter(')>operator(,)
          string<delimiter(')content(tidy_repair_file)delimiter(')>operator(,)
          string<delimiter(')content(tidy_repair_string)delimiter(')>operator(,)
          string<delimiter(')content(tidy_reset_config)delimiter(')>operator(,)
          string<delimiter(')content(tidy_save_config)delimiter(')>operator(,)
          string<delimiter(')content(tidy_set_encoding)delimiter(')>operator(,)
          string<delimiter(')content(tidy_setopt)delimiter(')>operator(,)
          string<delimiter(')content(tidy_warning_count)delimiter(')>operator(])operator(,)
 string<delimiter(')content(unknown)delimiter(')>operator(:) operator([)string<delimiter(')content(bcompile_write_file)delimiter(')>operator(,)
             string<delimiter(')content(com)delimiter(')>operator(,)
             string<delimiter(')content(dir)delimiter(')>operator(,)
             string<delimiter(')content(dotnet)delimiter(')>operator(,)
             string<delimiter(')content(hw_api_attribute)delimiter(')>operator(,)
             string<delimiter(')content(hw_api_content)delimiter(')>operator(,)
             string<delimiter(')content(hw_api_object)delimiter(')>operator(,)
             string<delimiter(')content(imagepscopyfont)delimiter(')>operator(,)
             string<delimiter(')content(mcve_adduser)delimiter(')>operator(,)
             string<delimiter(')content(mcve_adduserarg)delimiter(')>operator(,)
             string<delimiter(')content(mcve_bt)delimiter(')>operator(,)
             string<delimiter(')content(mcve_checkstatus)delimiter(')>operator(,)
             string<delimiter(')content(mcve_chkpwd)delimiter(')>operator(,)
             string<delimiter(')content(mcve_chngpwd)delimiter(')>operator(,)
             string<delimiter(')content(mcve_completeauthorizations)delimiter(')>operator(,)
             string<delimiter(')content(mcve_connect)delimiter(')>operator(,)
             string<delimiter(')content(mcve_connectionerror)delimiter(')>operator(,)
             string<delimiter(')content(mcve_deleteresponse)delimiter(')>operator(,)
             string<delimiter(')content(mcve_deletetrans)delimiter(')>operator(,)
             string<delimiter(')content(mcve_deleteusersetup)delimiter(')>operator(,)
             string<delimiter(')content(mcve_deluser)delimiter(')>operator(,)
             string<delimiter(')content(mcve_destroyconn)delimiter(')>operator(,)
             string<delimiter(')content(mcve_destroyengine)delimiter(')>operator(,)
             string<delimiter(')content(mcve_disableuser)delimiter(')>operator(,)
             string<delimiter(')content(mcve_edituser)delimiter(')>operator(,)
             string<delimiter(')content(mcve_enableuser)delimiter(')>operator(,)
             string<delimiter(')content(mcve_force)delimiter(')>operator(,)
             string<delimiter(')content(mcve_getcell)delimiter(')>operator(,)
             string<delimiter(')content(mcve_getcellbynum)delimiter(')>operator(,)
             string<delimiter(')content(mcve_getcommadelimited)delimiter(')>operator(,)
             string<delimiter(')content(mcve_getheader)delimiter(')>operator(,)
             string<delimiter(')content(mcve_getuserarg)delimiter(')>operator(,)
             string<delimiter(')content(mcve_getuserparam)delimiter(')>operator(,)
             string<delimiter(')content(mcve_gft)delimiter(')>operator(,)
             string<delimiter(')content(mcve_gl)delimiter(')>operator(,)
             string<delimiter(')content(mcve_gut)delimiter(')>operator(,)
             string<delimiter(')content(mcve_initconn)delimiter(')>operator(,)
             string<delimiter(')content(mcve_initengine)delimiter(')>operator(,)
             string<delimiter(')content(mcve_initusersetup)delimiter(')>operator(,)
             string<delimiter(')content(mcve_iscommadelimited)delimiter(')>operator(,)
             string<delimiter(')content(mcve_liststats)delimiter(')>operator(,)
             string<delimiter(')content(mcve_listusers)delimiter(')>operator(,)
             string<delimiter(')content(mcve_maxconntimeout)delimiter(')>operator(,)
             string<delimiter(')content(mcve_monitor)delimiter(')>operator(,)
             string<delimiter(')content(mcve_numcolumns)delimiter(')>operator(,)
             string<delimiter(')content(mcve_numrows)delimiter(')>operator(,)
             string<delimiter(')content(mcve_override)delimiter(')>operator(,)
             string<delimiter(')content(mcve_parsecommadelimited)delimiter(')>operator(,)
             string<delimiter(')content(mcve_ping)delimiter(')>operator(,)
             string<delimiter(')content(mcve_preauth)delimiter(')>operator(,)
             string<delimiter(')content(mcve_preauthcompletion)delimiter(')>operator(,)
             string<delimiter(')content(mcve_qc)delimiter(')>operator(,)
             string<delimiter(')content(mcve_responseparam)delimiter(')>operator(,)
             string<delimiter(')content(mcve_return)delimiter(')>operator(,)
             string<delimiter(')content(mcve_returncode)delimiter(')>operator(,)
             string<delimiter(')content(mcve_returnstatus)delimiter(')>operator(,)
             string<delimiter(')content(mcve_sale)delimiter(')>operator(,)
             string<delimiter(')content(mcve_setblocking)delimiter(')>operator(,)
             string<delimiter(')content(mcve_setdropfile)delimiter(')>operator(,)
             string<delimiter(')content(mcve_setip)delimiter(')>operator(,)
             string<delimiter(')content(mcve_setssl)delimiter(')>operator(,)
             string<delimiter(')content(mcve_setssl_files)delimiter(')>operator(,)
             string<delimiter(')content(mcve_settimeout)delimiter(')>operator(,)
             string<delimiter(')content(mcve_settle)delimiter(')>operator(,)
             string<delimiter(')content(mcve_text_avs)delimiter(')>operator(,)
             string<delimiter(')content(mcve_text_code)delimiter(')>operator(,)
             string<delimiter(')content(mcve_text_cv)delimiter(')>operator(,)
             string<delimiter(')content(mcve_transactionauth)delimiter(')>operator(,)
             string<delimiter(')content(mcve_transactionavs)delimiter(')>operator(,)
             string<delimiter(')content(mcve_transactionbatch)delimiter(')>operator(,)
             string<delimiter(')content(mcve_transactioncv)delimiter(')>operator(,)
             string<delimiter(')content(mcve_transactionid)delimiter(')>operator(,)
             string<delimiter(')content(mcve_transactionitem)delimiter(')>operator(,)
             string<delimiter(')content(mcve_transactionssent)delimiter(')>operator(,)
             string<delimiter(')content(mcve_transactiontext)delimiter(')>operator(,)
             string<delimiter(')content(mcve_transinqueue)delimiter(')>operator(,)
             string<delimiter(')content(mcve_transnew)delimiter(')>operator(,)
             string<delimiter(')content(mcve_transparam)delimiter(')>operator(,)
             string<delimiter(')content(mcve_transsend)delimiter(')>operator(,)
             string<delimiter(')content(mcve_ub)delimiter(')>operator(,)
             string<delimiter(')content(mcve_uwait)delimiter(')>operator(,)
             string<delimiter(')content(mcve_verifyconnection)delimiter(')>operator(,)
             string<delimiter(')content(mcve_verifysslcert)delimiter(')>operator(,)
             string<delimiter(')content(mcve_void)delimiter(')>operator(,)
             string<delimiter(')content(mysqli(\))delimiter(')>operator(,)
             string<delimiter(')content(pdf_open)delimiter(')>operator(,)
             string<delimiter(')content(pdf_open_png)delimiter(')>operator(,)
             string<delimiter(')content(pdf_set_font)delimiter(')>operator(,)
             string<delimiter(')content(php_register_url_stream_wrapper)delimiter(')>operator(,)
             string<delimiter(')content(php_stream_can_cast)delimiter(')>operator(,)
             string<delimiter(')content(php_stream_cast)delimiter(')>operator(,)
             string<delimiter(')content(php_stream_close)delimiter(')>operator(,)
             string<delimiter(')content(php_stream_closedir)delimiter(')>operator(,)
             string<delimiter(')content(php_stream_copy_to_mem)delimiter(')>operator(,)
             string<delimiter(')content(php_stream_copy_to_stream)delimiter(')>operator(,)
             string<delimiter(')content(php_stream_eof)delimiter(')>operator(,)
             string<delimiter(')content(php_stream_filter_register_factory)delimiter(')>operator(,)
             string<delimiter(')content(php_stream_filter_unregister_factory)delimiter(')>operator(,)
             string<delimiter(')content(php_stream_flush)delimiter(')>operator(,)
             string<delimiter(')content(php_stream_fopen_from_file)delimiter(')>operator(,)
             string<delimiter(')content(php_stream_fopen_temporary_file)delimiter(')>operator(,)
             string<delimiter(')content(php_stream_fopen_tmpfile)delimiter(')>operator(,)
             string<delimiter(')content(php_stream_getc)delimiter(')>operator(,)
             string<delimiter(')content(php_stream_gets)delimiter(')>operator(,)
             string<delimiter(')content(php_stream_is)delimiter(')>operator(,)
             string<delimiter(')content(php_stream_is_persistent)delimiter(')>operator(,)
             string<delimiter(')content(php_stream_make_seekable)delimiter(')>operator(,)
             string<delimiter(')content(php_stream_open_wrapper)delimiter(')>operator(,)
             string<delimiter(')content(php_stream_open_wrapper_as_file)delimiter(')>operator(,)
             string<delimiter(')content(php_stream_open_wrapper_ex)delimiter(')>operator(,)
             string<delimiter(')content(php_stream_opendir)delimiter(')>operator(,)
             string<delimiter(')content(php_stream_passthru)delimiter(')>operator(,)
             string<delimiter(')content(php_stream_read)delimiter(')>operator(,)
             string<delimiter(')content(php_stream_readdir)delimiter(')>operator(,)
             string<delimiter(')content(php_stream_rewinddir)delimiter(')>operator(,)
             string<delimiter(')content(php_stream_seek)delimiter(')>operator(,)
             string<delimiter(')content(php_stream_sock_open_from_socket)delimiter(')>operator(,)
             string<delimiter(')content(php_stream_sock_open_host)delimiter(')>operator(,)
             string<delimiter(')content(php_stream_sock_open_unix)delimiter(')>operator(,)
             string<delimiter(')content(php_stream_stat)delimiter(')>operator(,)
             string<delimiter(')content(php_stream_stat_path)delimiter(')>operator(,)
             string<delimiter(')content(php_stream_tell)delimiter(')>operator(,)
             string<delimiter(')content(php_stream_write)delimiter(')>operator(,)
             string<delimiter(')content(php_unregister_url_stream_wrapper)delimiter(')>operator(,)
             string<delimiter(')content(swfbutton_keypress)delimiter(')>operator(,)
             string<delimiter(')content(swfdisplayitem)delimiter(')>operator(,)
             string<delimiter(')content(variant)delimiter(')>operator(])operator(,)
 string<delimiter(')content(vpopmail)delimiter(')>operator(:) operator([)string<delimiter(')content(vpopmail_add_alias_domain)delimiter(')>operator(,)
              string<delimiter(')content(vpopmail_add_alias_domain_ex)delimiter(')>operator(,)
              string<delimiter(')content(vpopmail_add_domain)delimiter(')>operator(,)
              string<delimiter(')content(vpopmail_add_domain_ex)delimiter(')>operator(,)
              string<delimiter(')content(vpopmail_add_user)delimiter(')>operator(,)
              string<delimiter(')content(vpopmail_alias_add)delimiter(')>operator(,)
              string<delimiter(')content(vpopmail_alias_del)delimiter(')>operator(,)
              string<delimiter(')content(vpopmail_alias_del_domain)delimiter(')>operator(,)
              string<delimiter(')content(vpopmail_alias_get)delimiter(')>operator(,)
              string<delimiter(')content(vpopmail_alias_get_all)delimiter(')>operator(,)
              string<delimiter(')content(vpopmail_auth_user)delimiter(')>operator(,)
              string<delimiter(')content(vpopmail_del_domain)delimiter(')>operator(,)
              string<delimiter(')content(vpopmail_del_domain_ex)delimiter(')>operator(,)
              string<delimiter(')content(vpopmail_del_user)delimiter(')>operator(,)
              string<delimiter(')content(vpopmail_error)delimiter(')>operator(,)
              string<delimiter(')content(vpopmail_passwd)delimiter(')>operator(,)
              string<delimiter(')content(vpopmail_set_user_quota)delimiter(')>operator(])operator(,)
 string<delimiter(')content(xattr)delimiter(')>operator(:) operator([)string<delimiter(')content(xattr_get)delimiter(')>operator(,)
           string<delimiter(')content(xattr_list)delimiter(')>operator(,)
           string<delimiter(')content(xattr_remove)delimiter(')>operator(,)
           string<delimiter(')content(xattr_set)delimiter(')>operator(,)
           string<delimiter(')content(xattr_supported)delimiter(')>operator(])operator(,)
 string<delimiter(')content(xdiff)delimiter(')>operator(:) operator([)string<delimiter(')content(xdiff_file_diff)delimiter(')>operator(,)
           string<delimiter(')content(xdiff_file_diff_binary)delimiter(')>operator(,)
           string<delimiter(')content(xdiff_file_merge3)delimiter(')>operator(,)
           string<delimiter(')content(xdiff_file_patch)delimiter(')>operator(,)
           string<delimiter(')content(xdiff_file_patch_binary)delimiter(')>operator(,)
           string<delimiter(')content(xdiff_string_diff)delimiter(')>operator(,)
           string<delimiter(')content(xdiff_string_diff_binary)delimiter(')>operator(,)
           string<delimiter(')content(xdiff_string_merge3)delimiter(')>operator(,)
           string<delimiter(')content(xdiff_string_patch)delimiter(')>operator(,)
           string<delimiter(')content(xdiff_string_patch_binary)delimiter(')>operator(])operator(})


keyword(if) ident(__name__) operator(==) string<delimiter(')content(__main__)delimiter(')>operator(:)
    keyword(import) include(pprint)
    keyword(import) include(re)
    keyword(import) include(urllib)
    ident(_function_re) operator(=) ident(re)operator(.)ident(compile)operator(()string<delimiter(')content(<B)content(\\s)content(+CLASS="function")content(\\s)content(*>(.*?\))content(\\()content(\\\))content(</B)content(\\s)content(*>(?uism\))delimiter(')>operator(\))

    keyword(def) method(get_php_functions)operator(()operator(\))operator(:)
        ident(uf) operator(=) ident(urllib)operator(.)ident(urlopen)operator(()string<delimiter(')content(http://de.php.net/manual/en/index.functions.php)delimiter(')>operator(\))
        ident(data) operator(=) ident(uf)operator(.)ident(read)operator(()operator(\))
        ident(uf)operator(.)ident(close)operator(()operator(\))
        ident(results) operator(=) predefined(set)operator(()operator(\))
        keyword(for) ident(match) keyword(in) ident(_function_re)operator(.)ident(finditer)operator(()ident(data)operator(\))operator(:)
            ident(fn) operator(=) ident(match)operator(.)ident(group)operator(()integer(1)operator(\))
            keyword(if) string<delimiter(')content(-&#62;)delimiter(')> keyword(not) keyword(in) ident(fn) keyword(and) string<delimiter(')content(::)delimiter(')> keyword(not) keyword(in) ident(fn)operator(:)
                ident(results)operator(.)ident(add)operator(()ident(fn)operator(\))
        comment(# PY24: use sorted(\))
        ident(results) operator(=) predefined(list)operator(()ident(results)operator(\))
        ident(results)operator(.)ident(sort)operator(()operator(\))
        keyword(return) ident(results)

    keyword(def) method(get_function_module)operator(()ident(func_name)operator(\))operator(:)
        ident(fn) operator(=) ident(func_name)operator(.)ident(replace)operator(()string<delimiter(')content(_)delimiter(')>operator(,) string<delimiter(')content(-)delimiter(')>operator(\))
        ident(uf) operator(=) ident(urllib)operator(.)ident(urlopen)operator(()string<delimiter(')content(http://de.php.net/manual/en/function.%s.php)delimiter(')> operator(%) ident(fn)operator(\))
        ident(regex) operator(=) ident(re)operator(.)ident(compile)operator(()string<delimiter(')content(<li class="header up">)delimiter(')>
                           string<delimiter(')content(<a href="ref)content(\\.)content(.*?)content(\\.)content(php">([a-zA-Z0-9)content(\\s)content(]+\)</a></li>)delimiter(')>operator(\))
        keyword(for) ident(line) keyword(in) ident(uf)operator(:)
            ident(match) operator(=) ident(regex)operator(.)ident(search)operator(()ident(line)operator(\))
            keyword(if) ident(match)operator(:)
                keyword(return) ident(match)operator(.)ident(group)operator(()integer(1)operator(\))

    keyword(print) string<delimiter(')content(>> Downloading Function Index)delimiter(')>
    ident(functions) operator(=) ident(get_php_functions)operator(()operator(\))
    ident(total) operator(=) predefined(len)operator(()ident(functions)operator(\))
    keyword(print) string<delimiter(')content(%d functions found)delimiter(')> operator(%) ident(total)
    ident(modules) operator(=) operator({)operator(})
    ident(idx) operator(=) integer(1)
    keyword(for) ident(function_name) keyword(in) ident(get_php_functions)operator(()operator(\))operator(:)
        keyword(print) string<delimiter(')content(>> %r (%d/%d\))delimiter(')> operator(%) operator(()ident(function_name)operator(,) ident(idx)operator(,) ident(total)operator(\))
        ident(m) operator(=) ident(get_function_module)operator(()ident(function_name)operator(\))
        keyword(if) ident(m) keyword(is) predefined_constant(None)operator(:)
            keyword(print) string<delimiter(')content(NOT_FOUND)delimiter(')>
            ident(m) operator(=) string<delimiter(')content(unknown)delimiter(')>
        keyword(else)operator(:)
            keyword(print) predefined(repr)operator(()ident(m)operator(\))
        ident(modules)operator(.)ident(setdefault)operator(()ident(m)operator(,) operator([)operator(])operator(\))operator(.)ident(append)operator(()ident(function_name)operator(\))
        ident(idx) operator(+=) integer(1)

    comment(# extract useful sourcecode from this file)
    ident(f) operator(=) predefined(open)operator(()ident(__file__)operator(\))
    keyword(try)operator(:)
        ident(content) operator(=) ident(f)operator(.)ident(read)operator(()operator(\))
    keyword(finally)operator(:)
        ident(f)operator(.)ident(close)operator(()operator(\))
    ident(header) operator(=) ident(content)operator([)operator(:)ident(content)operator(.)ident(find)operator(()string<delimiter(')content(MODULES = {)delimiter(')>operator(\))operator(])
    ident(footer) operator(=) ident(content)operator([)ident(content)operator(.)ident(find)operator(()string<delimiter(")content(if __name__ == '__main__':)delimiter(")>operator(\))operator(:)operator(])

    comment(# write new file)
    ident(f) operator(=) predefined(open)operator(()ident(__file__)operator(,) string<delimiter(')content(w)delimiter(')>operator(\))
    ident(f)operator(.)ident(write)operator(()ident(header)operator(\))
    ident(f)operator(.)ident(write)operator(()string<delimiter(')content(MODULES = %s)char(\\n)char(\\n)delimiter(')> operator(%) ident(pprint)operator(.)ident(pformat)operator(()ident(modules)operator(\))operator(\))
    ident(f)operator(.)ident(write)operator(()ident(footer)operator(\))
    ident(f)operator(.)ident(close)operator(()operator(\))
ident(auto)operator(=)operator([)operator(()string<delimiter(')content(BufAdd)delimiter(')>operator(,) string<delimiter(')content(BufAdd)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(BufCreate)delimiter(')>operator(,) string<delimiter(')content(BufCreate)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(BufDelete)delimiter(')>operator(,) string<delimiter(')content(BufDelete)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(BufEnter)delimiter(')>operator(,) string<delimiter(')content(BufEnter)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(BufFilePost)delimiter(')>operator(,) string<delimiter(')content(BufFilePost)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(BufFilePre)delimiter(')>operator(,) string<delimiter(')content(BufFilePre)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(BufHidden)delimiter(')>operator(,) string<delimiter(')content(BufHidden)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(BufLeave)delimiter(')>operator(,) string<delimiter(')content(BufLeave)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(BufNew)delimiter(')>operator(,) string<delimiter(')content(BufNew)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(BufNewFile)delimiter(')>operator(,) string<delimiter(')content(BufNewFile)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(BufRead)delimiter(')>operator(,) string<delimiter(')content(BufRead)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(BufReadCmd)delimiter(')>operator(,) string<delimiter(')content(BufReadCmd)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(BufReadPost)delimiter(')>operator(,) string<delimiter(')content(BufReadPost)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(BufReadPre)delimiter(')>operator(,) string<delimiter(')content(BufReadPre)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(BufUnload)delimiter(')>operator(,) string<delimiter(')content(BufUnload)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(BufWinEnter)delimiter(')>operator(,) string<delimiter(')content(BufWinEnter)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(BufWinLeave)delimiter(')>operator(,) string<delimiter(')content(BufWinLeave)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(BufWipeout)delimiter(')>operator(,) string<delimiter(')content(BufWipeout)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(BufWrite)delimiter(')>operator(,) string<delimiter(')content(BufWrite)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(BufWriteCmd)delimiter(')>operator(,) string<delimiter(')content(BufWriteCmd)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(BufWritePost)delimiter(')>operator(,) string<delimiter(')content(BufWritePost)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(BufWritePre)delimiter(')>operator(,) string<delimiter(')content(BufWritePre)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(Cmd)delimiter(')>operator(,) string<delimiter(')content(Cmd)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(CmdwinEnter)delimiter(')>operator(,) string<delimiter(')content(CmdwinEnter)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(CmdwinLeave)delimiter(')>operator(,) string<delimiter(')content(CmdwinLeave)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(ColorScheme)delimiter(')>operator(,) string<delimiter(')content(ColorScheme)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(CursorHold)delimiter(')>operator(,) string<delimiter(')content(CursorHold)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(CursorHoldI)delimiter(')>operator(,) string<delimiter(')content(CursorHoldI)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(CursorMoved)delimiter(')>operator(,) string<delimiter(')content(CursorMoved)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(CursorMovedI)delimiter(')>operator(,) string<delimiter(')content(CursorMovedI)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(EncodingChanged)delimiter(')>operator(,) string<delimiter(')content(EncodingChanged)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(FileAppendCmd)delimiter(')>operator(,) string<delimiter(')content(FileAppendCmd)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(FileAppendPost)delimiter(')>operator(,) string<delimiter(')content(FileAppendPost)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(FileAppendPre)delimiter(')>operator(,) string<delimiter(')content(FileAppendPre)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(FileChangedRO)delimiter(')>operator(,) string<delimiter(')content(FileChangedRO)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(FileChangedShell)delimiter(')>operator(,) string<delimiter(')content(FileChangedShell)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(FileChangedShellPost)delimiter(')>operator(,) string<delimiter(')content(FileChangedShellPost)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(FileEncoding)delimiter(')>operator(,) string<delimiter(')content(FileEncoding)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(FileReadCmd)delimiter(')>operator(,) string<delimiter(')content(FileReadCmd)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(FileReadPost)delimiter(')>operator(,) string<delimiter(')content(FileReadPost)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(FileReadPre)delimiter(')>operator(,) string<delimiter(')content(FileReadPre)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(FileType)delimiter(')>operator(,) string<delimiter(')content(FileType)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(FileWriteCmd)delimiter(')>operator(,) string<delimiter(')content(FileWriteCmd)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(FileWritePost)delimiter(')>operator(,) string<delimiter(')content(FileWritePost)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(FileWritePre)delimiter(')>operator(,) string<delimiter(')content(FileWritePre)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(FilterReadPost)delimiter(')>operator(,) string<delimiter(')content(FilterReadPost)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(FilterReadPre)delimiter(')>operator(,) string<delimiter(')content(FilterReadPre)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(FilterWritePost)delimiter(')>operator(,) string<delimiter(')content(FilterWritePost)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(FilterWritePre)delimiter(')>operator(,) string<delimiter(')content(FilterWritePre)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(FocusGained)delimiter(')>operator(,) string<delimiter(')content(FocusGained)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(FocusLost)delimiter(')>operator(,) string<delimiter(')content(FocusLost)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(FuncUndefined)delimiter(')>operator(,) string<delimiter(')content(FuncUndefined)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(GUIEnter)delimiter(')>operator(,) string<delimiter(')content(GUIEnter)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(InsertChange)delimiter(')>operator(,) string<delimiter(')content(InsertChange)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(InsertEnter)delimiter(')>operator(,) string<delimiter(')content(InsertEnter)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(InsertLeave)delimiter(')>operator(,) string<delimiter(')content(InsertLeave)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(MenuPopup)delimiter(')>operator(,) string<delimiter(')content(MenuPopup)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(QuickFixCmdPost)delimiter(')>operator(,) string<delimiter(')content(QuickFixCmdPost)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(QuickFixCmdPre)delimiter(')>operator(,) string<delimiter(')content(QuickFixCmdPre)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(RemoteReply)delimiter(')>operator(,) string<delimiter(')content(RemoteReply)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(SessionLoadPost)delimiter(')>operator(,) string<delimiter(')content(SessionLoadPost)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(ShellCmdPost)delimiter(')>operator(,) string<delimiter(')content(ShellCmdPost)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(ShellFilterPost)delimiter(')>operator(,) string<delimiter(')content(ShellFilterPost)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(SourcePre)delimiter(')>operator(,) string<delimiter(')content(SourcePre)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(SpellFileMissing)delimiter(')>operator(,) string<delimiter(')content(SpellFileMissing)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(StdinReadPost)delimiter(')>operator(,) string<delimiter(')content(StdinReadPost)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(StdinReadPre)delimiter(')>operator(,) string<delimiter(')content(StdinReadPre)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(SwapExists)delimiter(')>operator(,) string<delimiter(')content(SwapExists)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(Syntax)delimiter(')>operator(,) string<delimiter(')content(Syntax)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(TabEnter)delimiter(')>operator(,) string<delimiter(')content(TabEnter)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(TabLeave)delimiter(')>operator(,) string<delimiter(')content(TabLeave)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(TermChanged)delimiter(')>operator(,) string<delimiter(')content(TermChanged)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(TermResponse)delimiter(')>operator(,) string<delimiter(')content(TermResponse)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(User)delimiter(')>operator(,) string<delimiter(')content(User)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(UserGettingBored)delimiter(')>operator(,) string<delimiter(')content(UserGettingBored)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(VimEnter)delimiter(')>operator(,) string<delimiter(')content(VimEnter)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(VimLeave)delimiter(')>operator(,) string<delimiter(')content(VimLeave)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(VimLeavePre)delimiter(')>operator(,) string<delimiter(')content(VimLeavePre)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(VimResized)delimiter(')>operator(,) string<delimiter(')content(VimResized)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(WinEnter)delimiter(')>operator(,) string<delimiter(')content(WinEnter)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(WinLeave)delimiter(')>operator(,) string<delimiter(')content(WinLeave)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(event)delimiter(')>operator(,) string<delimiter(')content(event)delimiter(')>operator(\))operator(])
ident(command)operator(=)operator([)operator(()string<delimiter(')content(DeleteFirst)delimiter(')>operator(,) string<delimiter(')content(DeleteFirst)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(Explore)delimiter(')>operator(,) string<delimiter(')content(Explore)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(Hexplore)delimiter(')>operator(,) string<delimiter(')content(Hexplore)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(I)delimiter(')>operator(,) string<delimiter(')content(I)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(N)delimiter(')>operator(,) string<delimiter(')content(Next)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(NetrwSettings)delimiter(')>operator(,) string<delimiter(')content(NetrwSettings)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(Nread)delimiter(')>operator(,) string<delimiter(')content(Nread)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(Nw)delimiter(')>operator(,) string<delimiter(')content(Nw)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(P)delimiter(')>operator(,) string<delimiter(')content(Print)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(Sexplore)delimiter(')>operator(,) string<delimiter(')content(Sexplore)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(Vexplore)delimiter(')>operator(,) string<delimiter(')content(Vexplore)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(X)delimiter(')>operator(,) string<delimiter(')content(X)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(XMLent)delimiter(')>operator(,) string<delimiter(')content(XMLent)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(XMLns)delimiter(')>operator(,) string<delimiter(')content(XMLns)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(ab)delimiter(')>operator(,) string<delimiter(')content(abbreviate)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(abc)delimiter(')>operator(,) string<delimiter(')content(abclear)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(abo)delimiter(')>operator(,) string<delimiter(')content(aboveleft)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(al)delimiter(')>operator(,) string<delimiter(')content(all)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(ar)delimiter(')>operator(,) string<delimiter(')content(args)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(arga)delimiter(')>operator(,) string<delimiter(')content(argadd)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(argd)delimiter(')>operator(,) string<delimiter(')content(argdelete)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(argdo)delimiter(')>operator(,) string<delimiter(')content(argdo)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(arge)delimiter(')>operator(,) string<delimiter(')content(argedit)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(argg)delimiter(')>operator(,) string<delimiter(')content(argglobal)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(argl)delimiter(')>operator(,) string<delimiter(')content(arglocal)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(argu)delimiter(')>operator(,) string<delimiter(')content(argument)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(as)delimiter(')>operator(,) string<delimiter(')content(ascii)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(b)delimiter(')>operator(,) string<delimiter(')content(buffer)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(bN)delimiter(')>operator(,) string<delimiter(')content(bNext)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(ba)delimiter(')>operator(,) string<delimiter(')content(ball)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(bad)delimiter(')>operator(,) string<delimiter(')content(badd)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(bd)delimiter(')>operator(,) string<delimiter(')content(bdelete)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(be)delimiter(')>operator(,) string<delimiter(')content(be)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(bel)delimiter(')>operator(,) string<delimiter(')content(belowright)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(bf)delimiter(')>operator(,) string<delimiter(')content(bfirst)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(bl)delimiter(')>operator(,) string<delimiter(')content(blast)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(bm)delimiter(')>operator(,) string<delimiter(')content(bmodified)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(bn)delimiter(')>operator(,) string<delimiter(')content(bnext)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(bo)delimiter(')>operator(,) string<delimiter(')content(botright)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(bp)delimiter(')>operator(,) string<delimiter(')content(bprevious)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(br)delimiter(')>operator(,) string<delimiter(')content(brewind)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(brea)delimiter(')>operator(,) string<delimiter(')content(break)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(breaka)delimiter(')>operator(,) string<delimiter(')content(breakadd)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(breakd)delimiter(')>operator(,) string<delimiter(')content(breakdel)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(breakl)delimiter(')>operator(,) string<delimiter(')content(breaklist)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(bro)delimiter(')>operator(,) string<delimiter(')content(browse)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(bufdo)delimiter(')>operator(,) string<delimiter(')content(bufdo)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(buffers)delimiter(')>operator(,) string<delimiter(')content(buffers)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(bun)delimiter(')>operator(,) string<delimiter(')content(bunload)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(bw)delimiter(')>operator(,) string<delimiter(')content(bwipeout)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(c)delimiter(')>operator(,) string<delimiter(')content(change)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(cN)delimiter(')>operator(,) string<delimiter(')content(cNext)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(cNf)delimiter(')>operator(,) string<delimiter(')content(cNfile)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(ca)delimiter(')>operator(,) string<delimiter(')content(cabbrev)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(cabc)delimiter(')>operator(,) string<delimiter(')content(cabclear)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(cad)delimiter(')>operator(,) string<delimiter(')content(caddexpr)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(caddb)delimiter(')>operator(,) string<delimiter(')content(caddbuffer)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(caddf)delimiter(')>operator(,) string<delimiter(')content(caddfile)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(cal)delimiter(')>operator(,) string<delimiter(')content(call)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(cat)delimiter(')>operator(,) string<delimiter(')content(catch)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(cb)delimiter(')>operator(,) string<delimiter(')content(cbuffer)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(cc)delimiter(')>operator(,) string<delimiter(')content(cc)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(ccl)delimiter(')>operator(,) string<delimiter(')content(cclose)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(cd)delimiter(')>operator(,) string<delimiter(')content(cd)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(ce)delimiter(')>operator(,) string<delimiter(')content(center)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(cex)delimiter(')>operator(,) string<delimiter(')content(cexpr)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(cf)delimiter(')>operator(,) string<delimiter(')content(cfile)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(cfir)delimiter(')>operator(,) string<delimiter(')content(cfirst)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(cg)delimiter(')>operator(,) string<delimiter(')content(cgetfile)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(cgetb)delimiter(')>operator(,) string<delimiter(')content(cgetbuffer)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(cgete)delimiter(')>operator(,) string<delimiter(')content(cgetexpr)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(changes)delimiter(')>operator(,) string<delimiter(')content(changes)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(chd)delimiter(')>operator(,) string<delimiter(')content(chdir)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(che)delimiter(')>operator(,) string<delimiter(')content(checkpath)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(checkt)delimiter(')>operator(,) string<delimiter(')content(checktime)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(cl)delimiter(')>operator(,) string<delimiter(')content(clist)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(cla)delimiter(')>operator(,) string<delimiter(')content(clast)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(clo)delimiter(')>operator(,) string<delimiter(')content(close)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(cmapc)delimiter(')>operator(,) string<delimiter(')content(cmapclear)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(cn)delimiter(')>operator(,) string<delimiter(')content(cnext)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(cnew)delimiter(')>operator(,) string<delimiter(')content(cnewer)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(cnf)delimiter(')>operator(,) string<delimiter(')content(cnfile)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(cnorea)delimiter(')>operator(,) string<delimiter(')content(cnoreabbrev)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(co)delimiter(')>operator(,) string<delimiter(')content(copy)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(col)delimiter(')>operator(,) string<delimiter(')content(colder)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(colo)delimiter(')>operator(,) string<delimiter(')content(colorscheme)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(comc)delimiter(')>operator(,) string<delimiter(')content(comclear)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(comp)delimiter(')>operator(,) string<delimiter(')content(compiler)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(con)delimiter(')>operator(,) string<delimiter(')content(continue)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(conf)delimiter(')>operator(,) string<delimiter(')content(confirm)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(cope)delimiter(')>operator(,) string<delimiter(')content(copen)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(cp)delimiter(')>operator(,) string<delimiter(')content(cprevious)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(cpf)delimiter(')>operator(,) string<delimiter(')content(cpfile)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(cq)delimiter(')>operator(,) string<delimiter(')content(cquit)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(cr)delimiter(')>operator(,) string<delimiter(')content(crewind)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(cu)delimiter(')>operator(,) string<delimiter(')content(cunmap)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(cuna)delimiter(')>operator(,) string<delimiter(')content(cunabbrev)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(cw)delimiter(')>operator(,) string<delimiter(')content(cwindow)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(d)delimiter(')>operator(,) string<delimiter(')content(delete)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(debugg)delimiter(')>operator(,) string<delimiter(')content(debuggreedy)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(delc)delimiter(')>operator(,) string<delimiter(')content(delcommand)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(delf)delimiter(')>operator(,) string<delimiter(')content(delfunction)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(delm)delimiter(')>operator(,) string<delimiter(')content(delmarks)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(di)delimiter(')>operator(,) string<delimiter(')content(display)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(diffg)delimiter(')>operator(,) string<delimiter(')content(diffget)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(diffoff)delimiter(')>operator(,) string<delimiter(')content(diffoff)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(diffpatch)delimiter(')>operator(,) string<delimiter(')content(diffpatch)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(diffpu)delimiter(')>operator(,) string<delimiter(')content(diffput)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(diffsplit)delimiter(')>operator(,) string<delimiter(')content(diffsplit)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(diffthis)delimiter(')>operator(,) string<delimiter(')content(diffthis)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(diffu)delimiter(')>operator(,) string<delimiter(')content(diffupdate)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(dig)delimiter(')>operator(,) string<delimiter(')content(digraphs)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(dj)delimiter(')>operator(,) string<delimiter(')content(djump)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(dl)delimiter(')>operator(,) string<delimiter(')content(dlist)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(dr)delimiter(')>operator(,) string<delimiter(')content(drop)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(ds)delimiter(')>operator(,) string<delimiter(')content(dsearch)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(dsp)delimiter(')>operator(,) string<delimiter(')content(dsplit)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(e)delimiter(')>operator(,) string<delimiter(')content(edit)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(earlier)delimiter(')>operator(,) string<delimiter(')content(earlier)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(echoe)delimiter(')>operator(,) string<delimiter(')content(echoerr)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(echom)delimiter(')>operator(,) string<delimiter(')content(echomsg)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(echon)delimiter(')>operator(,) string<delimiter(')content(echon)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(el)delimiter(')>operator(,) string<delimiter(')content(else)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(elsei)delimiter(')>operator(,) string<delimiter(')content(elseif)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(em)delimiter(')>operator(,) string<delimiter(')content(emenu)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(emenu)delimiter(')>operator(,) string<delimiter(')content(emenu)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(en)delimiter(')>operator(,) string<delimiter(')content(endif)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(endf)delimiter(')>operator(,) string<delimiter(')content(endfunction)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(endfo)delimiter(')>operator(,) string<delimiter(')content(endfor)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(endt)delimiter(')>operator(,) string<delimiter(')content(endtry)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(endw)delimiter(')>operator(,) string<delimiter(')content(endwhile)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(ene)delimiter(')>operator(,) string<delimiter(')content(enew)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(ex)delimiter(')>operator(,) string<delimiter(')content(ex)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(exi)delimiter(')>operator(,) string<delimiter(')content(exit)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(exu)delimiter(')>operator(,) string<delimiter(')content(exusage)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(f)delimiter(')>operator(,) string<delimiter(')content(file)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(files)delimiter(')>operator(,) string<delimiter(')content(files)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(filetype)delimiter(')>operator(,) string<delimiter(')content(filetype)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(fin)delimiter(')>operator(,) string<delimiter(')content(find)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(fina)delimiter(')>operator(,) string<delimiter(')content(finally)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(fini)delimiter(')>operator(,) string<delimiter(')content(finish)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(fir)delimiter(')>operator(,) string<delimiter(')content(first)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(fix)delimiter(')>operator(,) string<delimiter(')content(fixdel)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(fo)delimiter(')>operator(,) string<delimiter(')content(fold)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(foldc)delimiter(')>operator(,) string<delimiter(')content(foldclose)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(foldd)delimiter(')>operator(,) string<delimiter(')content(folddoopen)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(folddoc)delimiter(')>operator(,) string<delimiter(')content(folddoclosed)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(foldo)delimiter(')>operator(,) string<delimiter(')content(foldopen)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(for)delimiter(')>operator(,) string<delimiter(')content(for)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(fu)delimiter(')>operator(,) string<delimiter(')content(function)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(go)delimiter(')>operator(,) string<delimiter(')content(goto)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(gr)delimiter(')>operator(,) string<delimiter(')content(grep)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(grepa)delimiter(')>operator(,) string<delimiter(')content(grepadd)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(h)delimiter(')>operator(,) string<delimiter(')content(help)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(ha)delimiter(')>operator(,) string<delimiter(')content(hardcopy)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(helpf)delimiter(')>operator(,) string<delimiter(')content(helpfind)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(helpg)delimiter(')>operator(,) string<delimiter(')content(helpgrep)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(helpt)delimiter(')>operator(,) string<delimiter(')content(helptags)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(hid)delimiter(')>operator(,) string<delimiter(')content(hide)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(his)delimiter(')>operator(,) string<delimiter(')content(history)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(ia)delimiter(')>operator(,) string<delimiter(')content(iabbrev)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(iabc)delimiter(')>operator(,) string<delimiter(')content(iabclear)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(if)delimiter(')>operator(,) string<delimiter(')content(if)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(ij)delimiter(')>operator(,) string<delimiter(')content(ijump)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(il)delimiter(')>operator(,) string<delimiter(')content(ilist)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(imapc)delimiter(')>operator(,) string<delimiter(')content(imapclear)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(in)delimiter(')>operator(,) string<delimiter(')content(in)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(inorea)delimiter(')>operator(,) string<delimiter(')content(inoreabbrev)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(is)delimiter(')>operator(,) string<delimiter(')content(isearch)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(isp)delimiter(')>operator(,) string<delimiter(')content(isplit)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(iu)delimiter(')>operator(,) string<delimiter(')content(iunmap)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(iuna)delimiter(')>operator(,) string<delimiter(')content(iunabbrev)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(j)delimiter(')>operator(,) string<delimiter(')content(join)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(ju)delimiter(')>operator(,) string<delimiter(')content(jumps)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(k)delimiter(')>operator(,) string<delimiter(')content(k)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(kee)delimiter(')>operator(,) string<delimiter(')content(keepmarks)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(keepalt)delimiter(')>operator(,) string<delimiter(')content(keepalt)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(keepj)delimiter(')>operator(,) string<delimiter(')content(keepjumps)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(l)delimiter(')>operator(,) string<delimiter(')content(list)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(lN)delimiter(')>operator(,) string<delimiter(')content(lNext)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(lNf)delimiter(')>operator(,) string<delimiter(')content(lNfile)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(la)delimiter(')>operator(,) string<delimiter(')content(last)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(lad)delimiter(')>operator(,) string<delimiter(')content(laddexpr)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(laddb)delimiter(')>operator(,) string<delimiter(')content(laddbuffer)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(laddf)delimiter(')>operator(,) string<delimiter(')content(laddfile)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(lan)delimiter(')>operator(,) string<delimiter(')content(language)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(later)delimiter(')>operator(,) string<delimiter(')content(later)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(lb)delimiter(')>operator(,) string<delimiter(')content(lbuffer)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(lc)delimiter(')>operator(,) string<delimiter(')content(lcd)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(lch)delimiter(')>operator(,) string<delimiter(')content(lchdir)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(lcl)delimiter(')>operator(,) string<delimiter(')content(lclose)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(le)delimiter(')>operator(,) string<delimiter(')content(left)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(lefta)delimiter(')>operator(,) string<delimiter(')content(leftabove)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(lex)delimiter(')>operator(,) string<delimiter(')content(lexpr)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(lf)delimiter(')>operator(,) string<delimiter(')content(lfile)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(lfir)delimiter(')>operator(,) string<delimiter(')content(lfirst)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(lg)delimiter(')>operator(,) string<delimiter(')content(lgetfile)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(lgetb)delimiter(')>operator(,) string<delimiter(')content(lgetbuffer)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(lgete)delimiter(')>operator(,) string<delimiter(')content(lgetexpr)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(lgr)delimiter(')>operator(,) string<delimiter(')content(lgrep)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(lgrepa)delimiter(')>operator(,) string<delimiter(')content(lgrepadd)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(lh)delimiter(')>operator(,) string<delimiter(')content(lhelpgrep)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(ll)delimiter(')>operator(,) string<delimiter(')content(ll)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(lla)delimiter(')>operator(,) string<delimiter(')content(llast)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(lli)delimiter(')>operator(,) string<delimiter(')content(llist)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(lm)delimiter(')>operator(,) string<delimiter(')content(lmap)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(lmak)delimiter(')>operator(,) string<delimiter(')content(lmake)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(lmapc)delimiter(')>operator(,) string<delimiter(')content(lmapclear)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(ln)delimiter(')>operator(,) string<delimiter(')content(lnoremap)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(lne)delimiter(')>operator(,) string<delimiter(')content(lnext)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(lnew)delimiter(')>operator(,) string<delimiter(')content(lnewer)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(lnf)delimiter(')>operator(,) string<delimiter(')content(lnfile)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(lo)delimiter(')>operator(,) string<delimiter(')content(loadview)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(loc)delimiter(')>operator(,) string<delimiter(')content(lockmarks)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(lockv)delimiter(')>operator(,) string<delimiter(')content(lockvar)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(lol)delimiter(')>operator(,) string<delimiter(')content(lolder)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(lop)delimiter(')>operator(,) string<delimiter(')content(lopen)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(lp)delimiter(')>operator(,) string<delimiter(')content(lprevious)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(lpf)delimiter(')>operator(,) string<delimiter(')content(lpfile)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(lr)delimiter(')>operator(,) string<delimiter(')content(lrewind)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(ls)delimiter(')>operator(,) string<delimiter(')content(ls)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(lt)delimiter(')>operator(,) string<delimiter(')content(ltag)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(lu)delimiter(')>operator(,) string<delimiter(')content(lunmap)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(lv)delimiter(')>operator(,) string<delimiter(')content(lvimgrep)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(lvimgrepa)delimiter(')>operator(,) string<delimiter(')content(lvimgrepadd)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(lw)delimiter(')>operator(,) string<delimiter(')content(lwindow)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(m)delimiter(')>operator(,) string<delimiter(')content(move)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(ma)delimiter(')>operator(,) string<delimiter(')content(mark)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(mak)delimiter(')>operator(,) string<delimiter(')content(make)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(marks)delimiter(')>operator(,) string<delimiter(')content(marks)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(mat)delimiter(')>operator(,) string<delimiter(')content(match)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(menut)delimiter(')>operator(,) string<delimiter(')content(menutranslate)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(mk)delimiter(')>operator(,) string<delimiter(')content(mkexrc)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(mks)delimiter(')>operator(,) string<delimiter(')content(mksession)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(mksp)delimiter(')>operator(,) string<delimiter(')content(mkspell)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(mkv)delimiter(')>operator(,) string<delimiter(')content(mkvimrc)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(mkvie)delimiter(')>operator(,) string<delimiter(')content(mkview)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(mod)delimiter(')>operator(,) string<delimiter(')content(mode)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(mz)delimiter(')>operator(,) string<delimiter(')content(mzscheme)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(mzf)delimiter(')>operator(,) string<delimiter(')content(mzfile)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(n)delimiter(')>operator(,) string<delimiter(')content(next)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nbkey)delimiter(')>operator(,) string<delimiter(')content(nbkey)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(new)delimiter(')>operator(,) string<delimiter(')content(new)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nmapc)delimiter(')>operator(,) string<delimiter(')content(nmapclear)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(noh)delimiter(')>operator(,) string<delimiter(')content(nohlsearch)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(norea)delimiter(')>operator(,) string<delimiter(')content(noreabbrev)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nu)delimiter(')>operator(,) string<delimiter(')content(number)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nun)delimiter(')>operator(,) string<delimiter(')content(nunmap)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(o)delimiter(')>operator(,) string<delimiter(')content(open)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(omapc)delimiter(')>operator(,) string<delimiter(')content(omapclear)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(on)delimiter(')>operator(,) string<delimiter(')content(only)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(opt)delimiter(')>operator(,) string<delimiter(')content(options)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(ou)delimiter(')>operator(,) string<delimiter(')content(ounmap)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(p)delimiter(')>operator(,) string<delimiter(')content(print)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(pc)delimiter(')>operator(,) string<delimiter(')content(pclose)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(pe)delimiter(')>operator(,) string<delimiter(')content(perl)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(ped)delimiter(')>operator(,) string<delimiter(')content(pedit)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(perld)delimiter(')>operator(,) string<delimiter(')content(perldo)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(po)delimiter(')>operator(,) string<delimiter(')content(pop)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(popu)delimiter(')>operator(,) string<delimiter(')content(popu)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(popu)delimiter(')>operator(,) string<delimiter(')content(popup)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(pp)delimiter(')>operator(,) string<delimiter(')content(ppop)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(pre)delimiter(')>operator(,) string<delimiter(')content(preserve)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(prev)delimiter(')>operator(,) string<delimiter(')content(previous)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(prof)delimiter(')>operator(,) string<delimiter(')content(profile)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(profd)delimiter(')>operator(,) string<delimiter(')content(profdel)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(prompt)delimiter(')>operator(,) string<delimiter(')content(prompt)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(promptf)delimiter(')>operator(,) string<delimiter(')content(promptfind)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(promptr)delimiter(')>operator(,) string<delimiter(')content(promptrepl)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(ps)delimiter(')>operator(,) string<delimiter(')content(psearch)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(ptN)delimiter(')>operator(,) string<delimiter(')content(ptNext)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(pta)delimiter(')>operator(,) string<delimiter(')content(ptag)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(ptf)delimiter(')>operator(,) string<delimiter(')content(ptfirst)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(ptj)delimiter(')>operator(,) string<delimiter(')content(ptjump)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(ptl)delimiter(')>operator(,) string<delimiter(')content(ptlast)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(ptn)delimiter(')>operator(,) string<delimiter(')content(ptnext)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(ptp)delimiter(')>operator(,) string<delimiter(')content(ptprevious)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(ptr)delimiter(')>operator(,) string<delimiter(')content(ptrewind)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(pts)delimiter(')>operator(,) string<delimiter(')content(ptselect)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(pu)delimiter(')>operator(,) string<delimiter(')content(put)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(pw)delimiter(')>operator(,) string<delimiter(')content(pwd)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(py)delimiter(')>operator(,) string<delimiter(')content(python)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(pyf)delimiter(')>operator(,) string<delimiter(')content(pyfile)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(q)delimiter(')>operator(,) string<delimiter(')content(quit)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(qa)delimiter(')>operator(,) string<delimiter(')content(qall)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(quita)delimiter(')>operator(,) string<delimiter(')content(quitall)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(r)delimiter(')>operator(,) string<delimiter(')content(read)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(rec)delimiter(')>operator(,) string<delimiter(')content(recover)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(red)delimiter(')>operator(,) string<delimiter(')content(redo)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(redi)delimiter(')>operator(,) string<delimiter(')content(redir)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(redr)delimiter(')>operator(,) string<delimiter(')content(redraw)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(redraws)delimiter(')>operator(,) string<delimiter(')content(redrawstatus)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(reg)delimiter(')>operator(,) string<delimiter(')content(registers)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(res)delimiter(')>operator(,) string<delimiter(')content(resize)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(ret)delimiter(')>operator(,) string<delimiter(')content(retab)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(retu)delimiter(')>operator(,) string<delimiter(')content(return)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(rew)delimiter(')>operator(,) string<delimiter(')content(rewind)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(ri)delimiter(')>operator(,) string<delimiter(')content(right)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(rightb)delimiter(')>operator(,) string<delimiter(')content(rightbelow)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(ru)delimiter(')>operator(,) string<delimiter(')content(runtime)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(rub)delimiter(')>operator(,) string<delimiter(')content(ruby)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(rubyd)delimiter(')>operator(,) string<delimiter(')content(rubydo)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(rubyf)delimiter(')>operator(,) string<delimiter(')content(rubyfile)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(rv)delimiter(')>operator(,) string<delimiter(')content(rviminfo)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(sN)delimiter(')>operator(,) string<delimiter(')content(sNext)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(sa)delimiter(')>operator(,) string<delimiter(')content(sargument)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(sal)delimiter(')>operator(,) string<delimiter(')content(sall)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(san)delimiter(')>operator(,) string<delimiter(')content(sandbox)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(sav)delimiter(')>operator(,) string<delimiter(')content(saveas)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(sb)delimiter(')>operator(,) string<delimiter(')content(sbuffer)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(sbN)delimiter(')>operator(,) string<delimiter(')content(sbNext)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(sba)delimiter(')>operator(,) string<delimiter(')content(sball)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(sbf)delimiter(')>operator(,) string<delimiter(')content(sbfirst)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(sbl)delimiter(')>operator(,) string<delimiter(')content(sblast)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(sbm)delimiter(')>operator(,) string<delimiter(')content(sbmodified)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(sbn)delimiter(')>operator(,) string<delimiter(')content(sbnext)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(sbp)delimiter(')>operator(,) string<delimiter(')content(sbprevious)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(sbr)delimiter(')>operator(,) string<delimiter(')content(sbrewind)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(scrip)delimiter(')>operator(,) string<delimiter(')content(scriptnames)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(scripte)delimiter(')>operator(,) string<delimiter(')content(scriptencoding)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(se)delimiter(')>operator(,) string<delimiter(')content(set)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(setf)delimiter(')>operator(,) string<delimiter(')content(setfiletype)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(setg)delimiter(')>operator(,) string<delimiter(')content(setglobal)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(setl)delimiter(')>operator(,) string<delimiter(')content(setlocal)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(sf)delimiter(')>operator(,) string<delimiter(')content(sfind)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(sfir)delimiter(')>operator(,) string<delimiter(')content(sfirst)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(sh)delimiter(')>operator(,) string<delimiter(')content(shell)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(sign)delimiter(')>operator(,) string<delimiter(')content(sign)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(sil)delimiter(')>operator(,) string<delimiter(')content(silent)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(sim)delimiter(')>operator(,) string<delimiter(')content(simalt)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(sl)delimiter(')>operator(,) string<delimiter(')content(sleep)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(sla)delimiter(')>operator(,) string<delimiter(')content(slast)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(sm)delimiter(')>operator(,) string<delimiter(')content(smagic)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(sm)delimiter(')>operator(,) string<delimiter(')content(smap)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(smapc)delimiter(')>operator(,) string<delimiter(')content(smapclear)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(sme)delimiter(')>operator(,) string<delimiter(')content(sme)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(smenu)delimiter(')>operator(,) string<delimiter(')content(smenu)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(sn)delimiter(')>operator(,) string<delimiter(')content(snext)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(sni)delimiter(')>operator(,) string<delimiter(')content(sniff)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(sno)delimiter(')>operator(,) string<delimiter(')content(snomagic)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(snor)delimiter(')>operator(,) string<delimiter(')content(snoremap)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(snoreme)delimiter(')>operator(,) string<delimiter(')content(snoreme)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(snoremenu)delimiter(')>operator(,) string<delimiter(')content(snoremenu)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(so)delimiter(')>operator(,) string<delimiter(')content(source)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(sor)delimiter(')>operator(,) string<delimiter(')content(sort)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(sp)delimiter(')>operator(,) string<delimiter(')content(split)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(spe)delimiter(')>operator(,) string<delimiter(')content(spellgood)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(spelld)delimiter(')>operator(,) string<delimiter(')content(spelldump)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(spelli)delimiter(')>operator(,) string<delimiter(')content(spellinfo)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(spellr)delimiter(')>operator(,) string<delimiter(')content(spellrepall)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(spellu)delimiter(')>operator(,) string<delimiter(')content(spellundo)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(spellw)delimiter(')>operator(,) string<delimiter(')content(spellwrong)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(spr)delimiter(')>operator(,) string<delimiter(')content(sprevious)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(sre)delimiter(')>operator(,) string<delimiter(')content(srewind)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(st)delimiter(')>operator(,) string<delimiter(')content(stop)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(sta)delimiter(')>operator(,) string<delimiter(')content(stag)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(star)delimiter(')>operator(,) string<delimiter(')content(startinsert)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(startg)delimiter(')>operator(,) string<delimiter(')content(startgreplace)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(startr)delimiter(')>operator(,) string<delimiter(')content(startreplace)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(stj)delimiter(')>operator(,) string<delimiter(')content(stjump)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(stopi)delimiter(')>operator(,) string<delimiter(')content(stopinsert)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(sts)delimiter(')>operator(,) string<delimiter(')content(stselect)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(sun)delimiter(')>operator(,) string<delimiter(')content(sunhide)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(sunm)delimiter(')>operator(,) string<delimiter(')content(sunmap)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(sus)delimiter(')>operator(,) string<delimiter(')content(suspend)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(sv)delimiter(')>operator(,) string<delimiter(')content(sview)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(syncbind)delimiter(')>operator(,) string<delimiter(')content(syncbind)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t)delimiter(')>operator(,) string<delimiter(')content(t)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(tN)delimiter(')>operator(,) string<delimiter(')content(tNext)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(ta)delimiter(')>operator(,) string<delimiter(')content(tag)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(tab)delimiter(')>operator(,) string<delimiter(')content(tab)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(tabN)delimiter(')>operator(,) string<delimiter(')content(tabNext)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(tabc)delimiter(')>operator(,) string<delimiter(')content(tabclose)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(tabd)delimiter(')>operator(,) string<delimiter(')content(tabdo)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(tabe)delimiter(')>operator(,) string<delimiter(')content(tabedit)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(tabf)delimiter(')>operator(,) string<delimiter(')content(tabfind)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(tabfir)delimiter(')>operator(,) string<delimiter(')content(tabfirst)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(tabl)delimiter(')>operator(,) string<delimiter(')content(tablast)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(tabmove)delimiter(')>operator(,) string<delimiter(')content(tabmove)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(tabn)delimiter(')>operator(,) string<delimiter(')content(tabnext)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(tabnew)delimiter(')>operator(,) string<delimiter(')content(tabnew)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(tabo)delimiter(')>operator(,) string<delimiter(')content(tabonly)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(tabp)delimiter(')>operator(,) string<delimiter(')content(tabprevious)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(tabr)delimiter(')>operator(,) string<delimiter(')content(tabrewind)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(tabs)delimiter(')>operator(,) string<delimiter(')content(tabs)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(tags)delimiter(')>operator(,) string<delimiter(')content(tags)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(tc)delimiter(')>operator(,) string<delimiter(')content(tcl)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(tcld)delimiter(')>operator(,) string<delimiter(')content(tcldo)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(tclf)delimiter(')>operator(,) string<delimiter(')content(tclfile)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(te)delimiter(')>operator(,) string<delimiter(')content(tearoff)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(tf)delimiter(')>operator(,) string<delimiter(')content(tfirst)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(th)delimiter(')>operator(,) string<delimiter(')content(throw)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(the)delimiter(')>operator(,) string<delimiter(')content(the)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(tj)delimiter(')>operator(,) string<delimiter(')content(tjump)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(tl)delimiter(')>operator(,) string<delimiter(')content(tlast)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(tm)delimiter(')>operator(,) string<delimiter(')content(tm)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(tm)delimiter(')>operator(,) string<delimiter(')content(tmenu)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(tn)delimiter(')>operator(,) string<delimiter(')content(tnext)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(to)delimiter(')>operator(,) string<delimiter(')content(topleft)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(tp)delimiter(')>operator(,) string<delimiter(')content(tprevious)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(tr)delimiter(')>operator(,) string<delimiter(')content(trewind)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(try)delimiter(')>operator(,) string<delimiter(')content(try)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(ts)delimiter(')>operator(,) string<delimiter(')content(tselect)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(tu)delimiter(')>operator(,) string<delimiter(')content(tu)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(tu)delimiter(')>operator(,) string<delimiter(')content(tunmenu)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(u)delimiter(')>operator(,) string<delimiter(')content(undo)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(una)delimiter(')>operator(,) string<delimiter(')content(unabbreviate)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(undoj)delimiter(')>operator(,) string<delimiter(')content(undojoin)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(undol)delimiter(')>operator(,) string<delimiter(')content(undolist)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(unh)delimiter(')>operator(,) string<delimiter(')content(unhide)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(unlo)delimiter(')>operator(,) string<delimiter(')content(unlockvar)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(unm)delimiter(')>operator(,) string<delimiter(')content(unmap)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(up)delimiter(')>operator(,) string<delimiter(')content(update)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(ve)delimiter(')>operator(,) string<delimiter(')content(version)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(verb)delimiter(')>operator(,) string<delimiter(')content(verbose)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(vert)delimiter(')>operator(,) string<delimiter(')content(vertical)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(vi)delimiter(')>operator(,) string<delimiter(')content(visual)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(vie)delimiter(')>operator(,) string<delimiter(')content(view)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(vim)delimiter(')>operator(,) string<delimiter(')content(vimgrep)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(vimgrepa)delimiter(')>operator(,) string<delimiter(')content(vimgrepadd)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(viu)delimiter(')>operator(,) string<delimiter(')content(viusage)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(vmapc)delimiter(')>operator(,) string<delimiter(')content(vmapclear)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(vne)delimiter(')>operator(,) string<delimiter(')content(vnew)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(vs)delimiter(')>operator(,) string<delimiter(')content(vsplit)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(vu)delimiter(')>operator(,) string<delimiter(')content(vunmap)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(w)delimiter(')>operator(,) string<delimiter(')content(write)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(wN)delimiter(')>operator(,) string<delimiter(')content(wNext)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(wa)delimiter(')>operator(,) string<delimiter(')content(wall)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(wh)delimiter(')>operator(,) string<delimiter(')content(while)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(win)delimiter(')>operator(,) string<delimiter(')content(winsize)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(winc)delimiter(')>operator(,) string<delimiter(')content(wincmd)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(windo)delimiter(')>operator(,) string<delimiter(')content(windo)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(winp)delimiter(')>operator(,) string<delimiter(')content(winpos)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(wn)delimiter(')>operator(,) string<delimiter(')content(wnext)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(wp)delimiter(')>operator(,) string<delimiter(')content(wprevious)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(wq)delimiter(')>operator(,) string<delimiter(')content(wq)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(wqa)delimiter(')>operator(,) string<delimiter(')content(wqall)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(ws)delimiter(')>operator(,) string<delimiter(')content(wsverb)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(wv)delimiter(')>operator(,) string<delimiter(')content(wviminfo)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(x)delimiter(')>operator(,) string<delimiter(')content(xit)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(xa)delimiter(')>operator(,) string<delimiter(')content(xall)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(xm)delimiter(')>operator(,) string<delimiter(')content(xmap)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(xmapc)delimiter(')>operator(,) string<delimiter(')content(xmapclear)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(xme)delimiter(')>operator(,) string<delimiter(')content(xme)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(xmenu)delimiter(')>operator(,) string<delimiter(')content(xmenu)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(xn)delimiter(')>operator(,) string<delimiter(')content(xnoremap)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(xnoreme)delimiter(')>operator(,) string<delimiter(')content(xnoreme)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(xnoremenu)delimiter(')>operator(,) string<delimiter(')content(xnoremenu)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(xu)delimiter(')>operator(,) string<delimiter(')content(xunmap)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(y)delimiter(')>operator(,) string<delimiter(')content(yank)delimiter(')>operator(\))operator(])
ident(option)operator(=)operator([)operator(()string<delimiter(')content(acd)delimiter(')>operator(,) string<delimiter(')content(acd)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(ai)delimiter(')>operator(,) string<delimiter(')content(ai)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(akm)delimiter(')>operator(,) string<delimiter(')content(akm)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(al)delimiter(')>operator(,) string<delimiter(')content(al)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(aleph)delimiter(')>operator(,) string<delimiter(')content(aleph)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(allowrevins)delimiter(')>operator(,) string<delimiter(')content(allowrevins)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(altkeymap)delimiter(')>operator(,) string<delimiter(')content(altkeymap)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(ambiwidth)delimiter(')>operator(,) string<delimiter(')content(ambiwidth)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(ambw)delimiter(')>operator(,) string<delimiter(')content(ambw)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(anti)delimiter(')>operator(,) string<delimiter(')content(anti)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(antialias)delimiter(')>operator(,) string<delimiter(')content(antialias)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(ar)delimiter(')>operator(,) string<delimiter(')content(ar)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(arab)delimiter(')>operator(,) string<delimiter(')content(arab)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(arabic)delimiter(')>operator(,) string<delimiter(')content(arabic)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(arabicshape)delimiter(')>operator(,) string<delimiter(')content(arabicshape)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(ari)delimiter(')>operator(,) string<delimiter(')content(ari)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(arshape)delimiter(')>operator(,) string<delimiter(')content(arshape)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(autochdir)delimiter(')>operator(,) string<delimiter(')content(autochdir)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(autoindent)delimiter(')>operator(,) string<delimiter(')content(autoindent)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(autoread)delimiter(')>operator(,) string<delimiter(')content(autoread)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(autowrite)delimiter(')>operator(,) string<delimiter(')content(autowrite)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(autowriteall)delimiter(')>operator(,) string<delimiter(')content(autowriteall)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(aw)delimiter(')>operator(,) string<delimiter(')content(aw)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(awa)delimiter(')>operator(,) string<delimiter(')content(awa)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(background)delimiter(')>operator(,) string<delimiter(')content(background)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(backspace)delimiter(')>operator(,) string<delimiter(')content(backspace)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(backup)delimiter(')>operator(,) string<delimiter(')content(backup)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(backupcopy)delimiter(')>operator(,) string<delimiter(')content(backupcopy)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(backupdir)delimiter(')>operator(,) string<delimiter(')content(backupdir)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(backupext)delimiter(')>operator(,) string<delimiter(')content(backupext)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(backupskip)delimiter(')>operator(,) string<delimiter(')content(backupskip)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(balloondelay)delimiter(')>operator(,) string<delimiter(')content(balloondelay)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(ballooneval)delimiter(')>operator(,) string<delimiter(')content(ballooneval)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(balloonexpr)delimiter(')>operator(,) string<delimiter(')content(balloonexpr)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(bar)delimiter(')>operator(,) string<delimiter(')content(bar)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(bdir)delimiter(')>operator(,) string<delimiter(')content(bdir)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(bdlay)delimiter(')>operator(,) string<delimiter(')content(bdlay)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(beval)delimiter(')>operator(,) string<delimiter(')content(beval)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(bex)delimiter(')>operator(,) string<delimiter(')content(bex)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(bexpr)delimiter(')>operator(,) string<delimiter(')content(bexpr)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(bg)delimiter(')>operator(,) string<delimiter(')content(bg)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(bh)delimiter(')>operator(,) string<delimiter(')content(bh)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(bin)delimiter(')>operator(,) string<delimiter(')content(bin)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(binary)delimiter(')>operator(,) string<delimiter(')content(binary)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(biosk)delimiter(')>operator(,) string<delimiter(')content(biosk)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(bioskey)delimiter(')>operator(,) string<delimiter(')content(bioskey)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(bk)delimiter(')>operator(,) string<delimiter(')content(bk)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(bkc)delimiter(')>operator(,) string<delimiter(')content(bkc)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(bl)delimiter(')>operator(,) string<delimiter(')content(bl)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(block)delimiter(')>operator(,) string<delimiter(')content(block)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(bomb)delimiter(')>operator(,) string<delimiter(')content(bomb)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(breakat)delimiter(')>operator(,) string<delimiter(')content(breakat)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(brk)delimiter(')>operator(,) string<delimiter(')content(brk)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(browsedir)delimiter(')>operator(,) string<delimiter(')content(browsedir)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(bs)delimiter(')>operator(,) string<delimiter(')content(bs)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(bsdir)delimiter(')>operator(,) string<delimiter(')content(bsdir)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(bsk)delimiter(')>operator(,) string<delimiter(')content(bsk)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(bt)delimiter(')>operator(,) string<delimiter(')content(bt)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(bufhidden)delimiter(')>operator(,) string<delimiter(')content(bufhidden)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(buflisted)delimiter(')>operator(,) string<delimiter(')content(buflisted)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(buftype)delimiter(')>operator(,) string<delimiter(')content(buftype)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(casemap)delimiter(')>operator(,) string<delimiter(')content(casemap)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(cb)delimiter(')>operator(,) string<delimiter(')content(cb)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(ccv)delimiter(')>operator(,) string<delimiter(')content(ccv)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(cd)delimiter(')>operator(,) string<delimiter(')content(cd)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(cdpath)delimiter(')>operator(,) string<delimiter(')content(cdpath)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(cedit)delimiter(')>operator(,) string<delimiter(')content(cedit)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(cf)delimiter(')>operator(,) string<delimiter(')content(cf)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(cfu)delimiter(')>operator(,) string<delimiter(')content(cfu)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(ch)delimiter(')>operator(,) string<delimiter(')content(ch)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(charconvert)delimiter(')>operator(,) string<delimiter(')content(charconvert)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(ci)delimiter(')>operator(,) string<delimiter(')content(ci)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(cin)delimiter(')>operator(,) string<delimiter(')content(cin)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(cindent)delimiter(')>operator(,) string<delimiter(')content(cindent)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(cink)delimiter(')>operator(,) string<delimiter(')content(cink)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(cinkeys)delimiter(')>operator(,) string<delimiter(')content(cinkeys)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(cino)delimiter(')>operator(,) string<delimiter(')content(cino)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(cinoptions)delimiter(')>operator(,) string<delimiter(')content(cinoptions)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(cinw)delimiter(')>operator(,) string<delimiter(')content(cinw)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(cinwords)delimiter(')>operator(,) string<delimiter(')content(cinwords)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(clipboard)delimiter(')>operator(,) string<delimiter(')content(clipboard)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(cmdheight)delimiter(')>operator(,) string<delimiter(')content(cmdheight)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(cmdwinheight)delimiter(')>operator(,) string<delimiter(')content(cmdwinheight)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(cmp)delimiter(')>operator(,) string<delimiter(')content(cmp)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(cms)delimiter(')>operator(,) string<delimiter(')content(cms)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(co)delimiter(')>operator(,) string<delimiter(')content(co)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(columns)delimiter(')>operator(,) string<delimiter(')content(columns)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(com)delimiter(')>operator(,) string<delimiter(')content(com)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(comments)delimiter(')>operator(,) string<delimiter(')content(comments)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(commentstring)delimiter(')>operator(,) string<delimiter(')content(commentstring)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(compatible)delimiter(')>operator(,) string<delimiter(')content(compatible)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(complete)delimiter(')>operator(,) string<delimiter(')content(complete)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(completefunc)delimiter(')>operator(,) string<delimiter(')content(completefunc)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(completeopt)delimiter(')>operator(,) string<delimiter(')content(completeopt)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(confirm)delimiter(')>operator(,) string<delimiter(')content(confirm)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(consk)delimiter(')>operator(,) string<delimiter(')content(consk)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(conskey)delimiter(')>operator(,) string<delimiter(')content(conskey)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(copyindent)delimiter(')>operator(,) string<delimiter(')content(copyindent)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(cot)delimiter(')>operator(,) string<delimiter(')content(cot)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(cp)delimiter(')>operator(,) string<delimiter(')content(cp)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(cpo)delimiter(')>operator(,) string<delimiter(')content(cpo)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(cpoptions)delimiter(')>operator(,) string<delimiter(')content(cpoptions)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(cpt)delimiter(')>operator(,) string<delimiter(')content(cpt)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(cscopepathcomp)delimiter(')>operator(,) string<delimiter(')content(cscopepathcomp)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(cscopeprg)delimiter(')>operator(,) string<delimiter(')content(cscopeprg)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(cscopequickfix)delimiter(')>operator(,) string<delimiter(')content(cscopequickfix)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(cscopetag)delimiter(')>operator(,) string<delimiter(')content(cscopetag)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(cscopetagorder)delimiter(')>operator(,) string<delimiter(')content(cscopetagorder)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(cscopeverbose)delimiter(')>operator(,) string<delimiter(')content(cscopeverbose)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(cspc)delimiter(')>operator(,) string<delimiter(')content(cspc)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(csprg)delimiter(')>operator(,) string<delimiter(')content(csprg)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(csqf)delimiter(')>operator(,) string<delimiter(')content(csqf)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(cst)delimiter(')>operator(,) string<delimiter(')content(cst)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(csto)delimiter(')>operator(,) string<delimiter(')content(csto)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(csverb)delimiter(')>operator(,) string<delimiter(')content(csverb)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(cuc)delimiter(')>operator(,) string<delimiter(')content(cuc)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(cul)delimiter(')>operator(,) string<delimiter(')content(cul)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(cursor)delimiter(')>operator(,) string<delimiter(')content(cursor)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(cursor)delimiter(')>operator(,) string<delimiter(')content(cursor)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(cursorcolumn)delimiter(')>operator(,) string<delimiter(')content(cursorcolumn)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(cursorline)delimiter(')>operator(,) string<delimiter(')content(cursorline)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(cwh)delimiter(')>operator(,) string<delimiter(')content(cwh)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(debug)delimiter(')>operator(,) string<delimiter(')content(debug)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(deco)delimiter(')>operator(,) string<delimiter(')content(deco)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(def)delimiter(')>operator(,) string<delimiter(')content(def)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(define)delimiter(')>operator(,) string<delimiter(')content(define)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(delcombine)delimiter(')>operator(,) string<delimiter(')content(delcombine)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(dex)delimiter(')>operator(,) string<delimiter(')content(dex)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(dg)delimiter(')>operator(,) string<delimiter(')content(dg)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(dict)delimiter(')>operator(,) string<delimiter(')content(dict)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(dictionary)delimiter(')>operator(,) string<delimiter(')content(dictionary)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(diff)delimiter(')>operator(,) string<delimiter(')content(diff)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(diffexpr)delimiter(')>operator(,) string<delimiter(')content(diffexpr)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(diffopt)delimiter(')>operator(,) string<delimiter(')content(diffopt)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(digraph)delimiter(')>operator(,) string<delimiter(')content(digraph)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(dip)delimiter(')>operator(,) string<delimiter(')content(dip)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(dir)delimiter(')>operator(,) string<delimiter(')content(dir)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(directory)delimiter(')>operator(,) string<delimiter(')content(directory)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(display)delimiter(')>operator(,) string<delimiter(')content(display)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(dy)delimiter(')>operator(,) string<delimiter(')content(dy)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(ea)delimiter(')>operator(,) string<delimiter(')content(ea)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(ead)delimiter(')>operator(,) string<delimiter(')content(ead)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(eadirection)delimiter(')>operator(,) string<delimiter(')content(eadirection)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(eb)delimiter(')>operator(,) string<delimiter(')content(eb)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(ed)delimiter(')>operator(,) string<delimiter(')content(ed)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(edcompatible)delimiter(')>operator(,) string<delimiter(')content(edcompatible)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(ef)delimiter(')>operator(,) string<delimiter(')content(ef)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(efm)delimiter(')>operator(,) string<delimiter(')content(efm)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(ei)delimiter(')>operator(,) string<delimiter(')content(ei)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(ek)delimiter(')>operator(,) string<delimiter(')content(ek)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(enc)delimiter(')>operator(,) string<delimiter(')content(enc)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(encoding)delimiter(')>operator(,) string<delimiter(')content(encoding)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(end)delimiter(')>operator(,) string<delimiter(')content(end)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(endofline)delimiter(')>operator(,) string<delimiter(')content(endofline)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(eol)delimiter(')>operator(,) string<delimiter(')content(eol)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(ep)delimiter(')>operator(,) string<delimiter(')content(ep)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(equalalways)delimiter(')>operator(,) string<delimiter(')content(equalalways)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(equalprg)delimiter(')>operator(,) string<delimiter(')content(equalprg)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(errorbells)delimiter(')>operator(,) string<delimiter(')content(errorbells)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(errorfile)delimiter(')>operator(,) string<delimiter(')content(errorfile)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(errorformat)delimiter(')>operator(,) string<delimiter(')content(errorformat)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(esckeys)delimiter(')>operator(,) string<delimiter(')content(esckeys)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(et)delimiter(')>operator(,) string<delimiter(')content(et)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(eventignore)delimiter(')>operator(,) string<delimiter(')content(eventignore)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(ex)delimiter(')>operator(,) string<delimiter(')content(ex)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(expandtab)delimiter(')>operator(,) string<delimiter(')content(expandtab)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(exrc)delimiter(')>operator(,) string<delimiter(')content(exrc)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(fcl)delimiter(')>operator(,) string<delimiter(')content(fcl)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(fcs)delimiter(')>operator(,) string<delimiter(')content(fcs)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(fdc)delimiter(')>operator(,) string<delimiter(')content(fdc)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(fde)delimiter(')>operator(,) string<delimiter(')content(fde)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(fdi)delimiter(')>operator(,) string<delimiter(')content(fdi)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(fdl)delimiter(')>operator(,) string<delimiter(')content(fdl)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(fdls)delimiter(')>operator(,) string<delimiter(')content(fdls)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(fdm)delimiter(')>operator(,) string<delimiter(')content(fdm)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(fdn)delimiter(')>operator(,) string<delimiter(')content(fdn)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(fdo)delimiter(')>operator(,) string<delimiter(')content(fdo)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(fdt)delimiter(')>operator(,) string<delimiter(')content(fdt)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(fen)delimiter(')>operator(,) string<delimiter(')content(fen)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(fenc)delimiter(')>operator(,) string<delimiter(')content(fenc)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(fencs)delimiter(')>operator(,) string<delimiter(')content(fencs)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(fex)delimiter(')>operator(,) string<delimiter(')content(fex)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(ff)delimiter(')>operator(,) string<delimiter(')content(ff)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(ffs)delimiter(')>operator(,) string<delimiter(')content(ffs)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(fileencoding)delimiter(')>operator(,) string<delimiter(')content(fileencoding)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(fileencodings)delimiter(')>operator(,) string<delimiter(')content(fileencodings)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(fileformat)delimiter(')>operator(,) string<delimiter(')content(fileformat)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(fileformats)delimiter(')>operator(,) string<delimiter(')content(fileformats)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(filetype)delimiter(')>operator(,) string<delimiter(')content(filetype)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(fillchars)delimiter(')>operator(,) string<delimiter(')content(fillchars)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(fk)delimiter(')>operator(,) string<delimiter(')content(fk)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(fkmap)delimiter(')>operator(,) string<delimiter(')content(fkmap)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(flp)delimiter(')>operator(,) string<delimiter(')content(flp)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(fml)delimiter(')>operator(,) string<delimiter(')content(fml)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(fmr)delimiter(')>operator(,) string<delimiter(')content(fmr)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(fo)delimiter(')>operator(,) string<delimiter(')content(fo)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(foldclose)delimiter(')>operator(,) string<delimiter(')content(foldclose)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(foldcolumn)delimiter(')>operator(,) string<delimiter(')content(foldcolumn)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(foldenable)delimiter(')>operator(,) string<delimiter(')content(foldenable)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(foldexpr)delimiter(')>operator(,) string<delimiter(')content(foldexpr)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(foldignore)delimiter(')>operator(,) string<delimiter(')content(foldignore)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(foldlevel)delimiter(')>operator(,) string<delimiter(')content(foldlevel)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(foldlevelstart)delimiter(')>operator(,) string<delimiter(')content(foldlevelstart)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(foldmarker)delimiter(')>operator(,) string<delimiter(')content(foldmarker)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(foldmethod)delimiter(')>operator(,) string<delimiter(')content(foldmethod)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(foldminlines)delimiter(')>operator(,) string<delimiter(')content(foldminlines)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(foldnestmax)delimiter(')>operator(,) string<delimiter(')content(foldnestmax)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(foldopen)delimiter(')>operator(,) string<delimiter(')content(foldopen)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(foldtext)delimiter(')>operator(,) string<delimiter(')content(foldtext)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(formatexpr)delimiter(')>operator(,) string<delimiter(')content(formatexpr)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(formatlistpat)delimiter(')>operator(,) string<delimiter(')content(formatlistpat)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(formatoptions)delimiter(')>operator(,) string<delimiter(')content(formatoptions)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(formatprg)delimiter(')>operator(,) string<delimiter(')content(formatprg)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(fp)delimiter(')>operator(,) string<delimiter(')content(fp)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(fs)delimiter(')>operator(,) string<delimiter(')content(fs)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(fsync)delimiter(')>operator(,) string<delimiter(')content(fsync)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(ft)delimiter(')>operator(,) string<delimiter(')content(ft)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(gcr)delimiter(')>operator(,) string<delimiter(')content(gcr)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(gd)delimiter(')>operator(,) string<delimiter(')content(gd)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(gdefault)delimiter(')>operator(,) string<delimiter(')content(gdefault)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(gfm)delimiter(')>operator(,) string<delimiter(')content(gfm)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(gfn)delimiter(')>operator(,) string<delimiter(')content(gfn)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(gfs)delimiter(')>operator(,) string<delimiter(')content(gfs)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(gfw)delimiter(')>operator(,) string<delimiter(')content(gfw)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(ghr)delimiter(')>operator(,) string<delimiter(')content(ghr)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(go)delimiter(')>operator(,) string<delimiter(')content(go)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(gp)delimiter(')>operator(,) string<delimiter(')content(gp)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(grepformat)delimiter(')>operator(,) string<delimiter(')content(grepformat)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(grepprg)delimiter(')>operator(,) string<delimiter(')content(grepprg)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(gtl)delimiter(')>operator(,) string<delimiter(')content(gtl)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(gtt)delimiter(')>operator(,) string<delimiter(')content(gtt)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(guicursor)delimiter(')>operator(,) string<delimiter(')content(guicursor)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(guifont)delimiter(')>operator(,) string<delimiter(')content(guifont)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(guifontset)delimiter(')>operator(,) string<delimiter(')content(guifontset)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(guifontwide)delimiter(')>operator(,) string<delimiter(')content(guifontwide)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(guiheadroom)delimiter(')>operator(,) string<delimiter(')content(guiheadroom)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(guioptions)delimiter(')>operator(,) string<delimiter(')content(guioptions)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(guipty)delimiter(')>operator(,) string<delimiter(')content(guipty)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(guitablabel)delimiter(')>operator(,) string<delimiter(')content(guitablabel)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(guitabtooltip)delimiter(')>operator(,) string<delimiter(')content(guitabtooltip)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(helpfile)delimiter(')>operator(,) string<delimiter(')content(helpfile)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(helpheight)delimiter(')>operator(,) string<delimiter(')content(helpheight)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(helplang)delimiter(')>operator(,) string<delimiter(')content(helplang)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(hf)delimiter(')>operator(,) string<delimiter(')content(hf)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(hh)delimiter(')>operator(,) string<delimiter(')content(hh)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(hi)delimiter(')>operator(,) string<delimiter(')content(hi)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(hid)delimiter(')>operator(,) string<delimiter(')content(hid)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(hidden)delimiter(')>operator(,) string<delimiter(')content(hidden)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(highlight)delimiter(')>operator(,) string<delimiter(')content(highlight)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(history)delimiter(')>operator(,) string<delimiter(')content(history)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(hk)delimiter(')>operator(,) string<delimiter(')content(hk)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(hkmap)delimiter(')>operator(,) string<delimiter(')content(hkmap)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(hkmapp)delimiter(')>operator(,) string<delimiter(')content(hkmapp)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(hkp)delimiter(')>operator(,) string<delimiter(')content(hkp)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(hl)delimiter(')>operator(,) string<delimiter(')content(hl)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(hlg)delimiter(')>operator(,) string<delimiter(')content(hlg)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(hls)delimiter(')>operator(,) string<delimiter(')content(hls)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(hlsearch)delimiter(')>operator(,) string<delimiter(')content(hlsearch)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(ic)delimiter(')>operator(,) string<delimiter(')content(ic)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(icon)delimiter(')>operator(,) string<delimiter(')content(icon)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(iconstring)delimiter(')>operator(,) string<delimiter(')content(iconstring)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(ignorecase)delimiter(')>operator(,) string<delimiter(')content(ignorecase)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(im)delimiter(')>operator(,) string<delimiter(')content(im)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(imactivatekey)delimiter(')>operator(,) string<delimiter(')content(imactivatekey)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(imak)delimiter(')>operator(,) string<delimiter(')content(imak)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(imc)delimiter(')>operator(,) string<delimiter(')content(imc)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(imcmdline)delimiter(')>operator(,) string<delimiter(')content(imcmdline)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(imd)delimiter(')>operator(,) string<delimiter(')content(imd)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(imdisable)delimiter(')>operator(,) string<delimiter(')content(imdisable)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(imi)delimiter(')>operator(,) string<delimiter(')content(imi)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(iminsert)delimiter(')>operator(,) string<delimiter(')content(iminsert)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(ims)delimiter(')>operator(,) string<delimiter(')content(ims)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(imsearch)delimiter(')>operator(,) string<delimiter(')content(imsearch)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(inc)delimiter(')>operator(,) string<delimiter(')content(inc)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(include)delimiter(')>operator(,) string<delimiter(')content(include)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(includeexpr)delimiter(')>operator(,) string<delimiter(')content(includeexpr)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(incsearch)delimiter(')>operator(,) string<delimiter(')content(incsearch)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(inde)delimiter(')>operator(,) string<delimiter(')content(inde)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(indentexpr)delimiter(')>operator(,) string<delimiter(')content(indentexpr)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(indentkeys)delimiter(')>operator(,) string<delimiter(')content(indentkeys)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(indk)delimiter(')>operator(,) string<delimiter(')content(indk)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(inex)delimiter(')>operator(,) string<delimiter(')content(inex)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(inf)delimiter(')>operator(,) string<delimiter(')content(inf)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(infercase)delimiter(')>operator(,) string<delimiter(')content(infercase)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(insert)delimiter(')>operator(,) string<delimiter(')content(insert)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(insert)delimiter(')>operator(,) string<delimiter(')content(insert)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(insertmode)delimiter(')>operator(,) string<delimiter(')content(insertmode)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invacd)delimiter(')>operator(,) string<delimiter(')content(invacd)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invai)delimiter(')>operator(,) string<delimiter(')content(invai)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invakm)delimiter(')>operator(,) string<delimiter(')content(invakm)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invallowrevins)delimiter(')>operator(,) string<delimiter(')content(invallowrevins)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invaltkeymap)delimiter(')>operator(,) string<delimiter(')content(invaltkeymap)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invanti)delimiter(')>operator(,) string<delimiter(')content(invanti)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invantialias)delimiter(')>operator(,) string<delimiter(')content(invantialias)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invar)delimiter(')>operator(,) string<delimiter(')content(invar)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invarab)delimiter(')>operator(,) string<delimiter(')content(invarab)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invarabic)delimiter(')>operator(,) string<delimiter(')content(invarabic)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invarabicshape)delimiter(')>operator(,) string<delimiter(')content(invarabicshape)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invari)delimiter(')>operator(,) string<delimiter(')content(invari)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invarshape)delimiter(')>operator(,) string<delimiter(')content(invarshape)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invautochdir)delimiter(')>operator(,) string<delimiter(')content(invautochdir)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invautoindent)delimiter(')>operator(,) string<delimiter(')content(invautoindent)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invautoread)delimiter(')>operator(,) string<delimiter(')content(invautoread)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invautowrite)delimiter(')>operator(,) string<delimiter(')content(invautowrite)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invautowriteall)delimiter(')>operator(,) string<delimiter(')content(invautowriteall)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invaw)delimiter(')>operator(,) string<delimiter(')content(invaw)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invawa)delimiter(')>operator(,) string<delimiter(')content(invawa)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invbackup)delimiter(')>operator(,) string<delimiter(')content(invbackup)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invballooneval)delimiter(')>operator(,) string<delimiter(')content(invballooneval)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invbeval)delimiter(')>operator(,) string<delimiter(')content(invbeval)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invbin)delimiter(')>operator(,) string<delimiter(')content(invbin)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invbinary)delimiter(')>operator(,) string<delimiter(')content(invbinary)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invbiosk)delimiter(')>operator(,) string<delimiter(')content(invbiosk)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invbioskey)delimiter(')>operator(,) string<delimiter(')content(invbioskey)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invbk)delimiter(')>operator(,) string<delimiter(')content(invbk)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invbl)delimiter(')>operator(,) string<delimiter(')content(invbl)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invbomb)delimiter(')>operator(,) string<delimiter(')content(invbomb)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invbuflisted)delimiter(')>operator(,) string<delimiter(')content(invbuflisted)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invcf)delimiter(')>operator(,) string<delimiter(')content(invcf)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invci)delimiter(')>operator(,) string<delimiter(')content(invci)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invcin)delimiter(')>operator(,) string<delimiter(')content(invcin)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invcindent)delimiter(')>operator(,) string<delimiter(')content(invcindent)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invcompatible)delimiter(')>operator(,) string<delimiter(')content(invcompatible)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invconfirm)delimiter(')>operator(,) string<delimiter(')content(invconfirm)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invconsk)delimiter(')>operator(,) string<delimiter(')content(invconsk)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invconskey)delimiter(')>operator(,) string<delimiter(')content(invconskey)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invcopyindent)delimiter(')>operator(,) string<delimiter(')content(invcopyindent)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invcp)delimiter(')>operator(,) string<delimiter(')content(invcp)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invcscopetag)delimiter(')>operator(,) string<delimiter(')content(invcscopetag)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invcscopeverbose)delimiter(')>operator(,) string<delimiter(')content(invcscopeverbose)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invcst)delimiter(')>operator(,) string<delimiter(')content(invcst)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invcsverb)delimiter(')>operator(,) string<delimiter(')content(invcsverb)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invcuc)delimiter(')>operator(,) string<delimiter(')content(invcuc)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invcul)delimiter(')>operator(,) string<delimiter(')content(invcul)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invcursorcolumn)delimiter(')>operator(,) string<delimiter(')content(invcursorcolumn)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invcursorline)delimiter(')>operator(,) string<delimiter(')content(invcursorline)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invdeco)delimiter(')>operator(,) string<delimiter(')content(invdeco)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invdelcombine)delimiter(')>operator(,) string<delimiter(')content(invdelcombine)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invdg)delimiter(')>operator(,) string<delimiter(')content(invdg)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invdiff)delimiter(')>operator(,) string<delimiter(')content(invdiff)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invdigraph)delimiter(')>operator(,) string<delimiter(')content(invdigraph)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invdisable)delimiter(')>operator(,) string<delimiter(')content(invdisable)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invea)delimiter(')>operator(,) string<delimiter(')content(invea)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(inveb)delimiter(')>operator(,) string<delimiter(')content(inveb)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(inved)delimiter(')>operator(,) string<delimiter(')content(inved)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invedcompatible)delimiter(')>operator(,) string<delimiter(')content(invedcompatible)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invek)delimiter(')>operator(,) string<delimiter(')content(invek)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invendofline)delimiter(')>operator(,) string<delimiter(')content(invendofline)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(inveol)delimiter(')>operator(,) string<delimiter(')content(inveol)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invequalalways)delimiter(')>operator(,) string<delimiter(')content(invequalalways)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(inverrorbells)delimiter(')>operator(,) string<delimiter(')content(inverrorbells)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invesckeys)delimiter(')>operator(,) string<delimiter(')content(invesckeys)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invet)delimiter(')>operator(,) string<delimiter(')content(invet)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invex)delimiter(')>operator(,) string<delimiter(')content(invex)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invexpandtab)delimiter(')>operator(,) string<delimiter(')content(invexpandtab)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invexrc)delimiter(')>operator(,) string<delimiter(')content(invexrc)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invfen)delimiter(')>operator(,) string<delimiter(')content(invfen)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invfk)delimiter(')>operator(,) string<delimiter(')content(invfk)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invfkmap)delimiter(')>operator(,) string<delimiter(')content(invfkmap)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invfoldenable)delimiter(')>operator(,) string<delimiter(')content(invfoldenable)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invgd)delimiter(')>operator(,) string<delimiter(')content(invgd)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invgdefault)delimiter(')>operator(,) string<delimiter(')content(invgdefault)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invguipty)delimiter(')>operator(,) string<delimiter(')content(invguipty)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invhid)delimiter(')>operator(,) string<delimiter(')content(invhid)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invhidden)delimiter(')>operator(,) string<delimiter(')content(invhidden)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invhk)delimiter(')>operator(,) string<delimiter(')content(invhk)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invhkmap)delimiter(')>operator(,) string<delimiter(')content(invhkmap)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invhkmapp)delimiter(')>operator(,) string<delimiter(')content(invhkmapp)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invhkp)delimiter(')>operator(,) string<delimiter(')content(invhkp)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invhls)delimiter(')>operator(,) string<delimiter(')content(invhls)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invhlsearch)delimiter(')>operator(,) string<delimiter(')content(invhlsearch)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invic)delimiter(')>operator(,) string<delimiter(')content(invic)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invicon)delimiter(')>operator(,) string<delimiter(')content(invicon)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invignorecase)delimiter(')>operator(,) string<delimiter(')content(invignorecase)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invim)delimiter(')>operator(,) string<delimiter(')content(invim)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invimc)delimiter(')>operator(,) string<delimiter(')content(invimc)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invimcmdline)delimiter(')>operator(,) string<delimiter(')content(invimcmdline)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invimd)delimiter(')>operator(,) string<delimiter(')content(invimd)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invincsearch)delimiter(')>operator(,) string<delimiter(')content(invincsearch)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invinf)delimiter(')>operator(,) string<delimiter(')content(invinf)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invinfercase)delimiter(')>operator(,) string<delimiter(')content(invinfercase)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invinsertmode)delimiter(')>operator(,) string<delimiter(')content(invinsertmode)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invis)delimiter(')>operator(,) string<delimiter(')content(invis)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invjoinspaces)delimiter(')>operator(,) string<delimiter(')content(invjoinspaces)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invjs)delimiter(')>operator(,) string<delimiter(')content(invjs)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invlazyredraw)delimiter(')>operator(,) string<delimiter(')content(invlazyredraw)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invlbr)delimiter(')>operator(,) string<delimiter(')content(invlbr)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invlinebreak)delimiter(')>operator(,) string<delimiter(')content(invlinebreak)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invlisp)delimiter(')>operator(,) string<delimiter(')content(invlisp)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invlist)delimiter(')>operator(,) string<delimiter(')content(invlist)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invloadplugins)delimiter(')>operator(,) string<delimiter(')content(invloadplugins)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invlpl)delimiter(')>operator(,) string<delimiter(')content(invlpl)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invlz)delimiter(')>operator(,) string<delimiter(')content(invlz)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invma)delimiter(')>operator(,) string<delimiter(')content(invma)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invmacatsui)delimiter(')>operator(,) string<delimiter(')content(invmacatsui)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invmagic)delimiter(')>operator(,) string<delimiter(')content(invmagic)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invmh)delimiter(')>operator(,) string<delimiter(')content(invmh)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invml)delimiter(')>operator(,) string<delimiter(')content(invml)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invmod)delimiter(')>operator(,) string<delimiter(')content(invmod)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invmodeline)delimiter(')>operator(,) string<delimiter(')content(invmodeline)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invmodifiable)delimiter(')>operator(,) string<delimiter(')content(invmodifiable)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invmodified)delimiter(')>operator(,) string<delimiter(')content(invmodified)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invmore)delimiter(')>operator(,) string<delimiter(')content(invmore)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invmousef)delimiter(')>operator(,) string<delimiter(')content(invmousef)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invmousefocus)delimiter(')>operator(,) string<delimiter(')content(invmousefocus)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invmousehide)delimiter(')>operator(,) string<delimiter(')content(invmousehide)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invnu)delimiter(')>operator(,) string<delimiter(')content(invnu)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invnumber)delimiter(')>operator(,) string<delimiter(')content(invnumber)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invpaste)delimiter(')>operator(,) string<delimiter(')content(invpaste)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invpi)delimiter(')>operator(,) string<delimiter(')content(invpi)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invpreserveindent)delimiter(')>operator(,) string<delimiter(')content(invpreserveindent)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invpreviewwindow)delimiter(')>operator(,) string<delimiter(')content(invpreviewwindow)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invprompt)delimiter(')>operator(,) string<delimiter(')content(invprompt)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invpvw)delimiter(')>operator(,) string<delimiter(')content(invpvw)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invreadonly)delimiter(')>operator(,) string<delimiter(')content(invreadonly)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invremap)delimiter(')>operator(,) string<delimiter(')content(invremap)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invrestorescreen)delimiter(')>operator(,) string<delimiter(')content(invrestorescreen)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invrevins)delimiter(')>operator(,) string<delimiter(')content(invrevins)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invri)delimiter(')>operator(,) string<delimiter(')content(invri)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invrightleft)delimiter(')>operator(,) string<delimiter(')content(invrightleft)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invrightleftcmd)delimiter(')>operator(,) string<delimiter(')content(invrightleftcmd)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invrl)delimiter(')>operator(,) string<delimiter(')content(invrl)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invrlc)delimiter(')>operator(,) string<delimiter(')content(invrlc)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invro)delimiter(')>operator(,) string<delimiter(')content(invro)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invrs)delimiter(')>operator(,) string<delimiter(')content(invrs)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invru)delimiter(')>operator(,) string<delimiter(')content(invru)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invruler)delimiter(')>operator(,) string<delimiter(')content(invruler)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invsb)delimiter(')>operator(,) string<delimiter(')content(invsb)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invsc)delimiter(')>operator(,) string<delimiter(')content(invsc)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invscb)delimiter(')>operator(,) string<delimiter(')content(invscb)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invscrollbind)delimiter(')>operator(,) string<delimiter(')content(invscrollbind)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invscs)delimiter(')>operator(,) string<delimiter(')content(invscs)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invsecure)delimiter(')>operator(,) string<delimiter(')content(invsecure)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invsft)delimiter(')>operator(,) string<delimiter(')content(invsft)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invshellslash)delimiter(')>operator(,) string<delimiter(')content(invshellslash)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invshelltemp)delimiter(')>operator(,) string<delimiter(')content(invshelltemp)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invshiftround)delimiter(')>operator(,) string<delimiter(')content(invshiftround)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invshortname)delimiter(')>operator(,) string<delimiter(')content(invshortname)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invshowcmd)delimiter(')>operator(,) string<delimiter(')content(invshowcmd)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invshowfulltag)delimiter(')>operator(,) string<delimiter(')content(invshowfulltag)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invshowmatch)delimiter(')>operator(,) string<delimiter(')content(invshowmatch)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invshowmode)delimiter(')>operator(,) string<delimiter(')content(invshowmode)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invsi)delimiter(')>operator(,) string<delimiter(')content(invsi)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invsm)delimiter(')>operator(,) string<delimiter(')content(invsm)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invsmartcase)delimiter(')>operator(,) string<delimiter(')content(invsmartcase)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invsmartindent)delimiter(')>operator(,) string<delimiter(')content(invsmartindent)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invsmarttab)delimiter(')>operator(,) string<delimiter(')content(invsmarttab)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invsmd)delimiter(')>operator(,) string<delimiter(')content(invsmd)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invsn)delimiter(')>operator(,) string<delimiter(')content(invsn)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invsol)delimiter(')>operator(,) string<delimiter(')content(invsol)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invspell)delimiter(')>operator(,) string<delimiter(')content(invspell)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invsplitbelow)delimiter(')>operator(,) string<delimiter(')content(invsplitbelow)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invsplitright)delimiter(')>operator(,) string<delimiter(')content(invsplitright)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invspr)delimiter(')>operator(,) string<delimiter(')content(invspr)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invsr)delimiter(')>operator(,) string<delimiter(')content(invsr)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invssl)delimiter(')>operator(,) string<delimiter(')content(invssl)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invsta)delimiter(')>operator(,) string<delimiter(')content(invsta)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invstartofline)delimiter(')>operator(,) string<delimiter(')content(invstartofline)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invstmp)delimiter(')>operator(,) string<delimiter(')content(invstmp)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invswapfile)delimiter(')>operator(,) string<delimiter(')content(invswapfile)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invswf)delimiter(')>operator(,) string<delimiter(')content(invswf)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invta)delimiter(')>operator(,) string<delimiter(')content(invta)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invtagbsearch)delimiter(')>operator(,) string<delimiter(')content(invtagbsearch)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invtagrelative)delimiter(')>operator(,) string<delimiter(')content(invtagrelative)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invtagstack)delimiter(')>operator(,) string<delimiter(')content(invtagstack)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invtbi)delimiter(')>operator(,) string<delimiter(')content(invtbi)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invtbidi)delimiter(')>operator(,) string<delimiter(')content(invtbidi)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invtbs)delimiter(')>operator(,) string<delimiter(')content(invtbs)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invtermbidi)delimiter(')>operator(,) string<delimiter(')content(invtermbidi)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invterse)delimiter(')>operator(,) string<delimiter(')content(invterse)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invtextauto)delimiter(')>operator(,) string<delimiter(')content(invtextauto)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invtextmode)delimiter(')>operator(,) string<delimiter(')content(invtextmode)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invtf)delimiter(')>operator(,) string<delimiter(')content(invtf)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invtgst)delimiter(')>operator(,) string<delimiter(')content(invtgst)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invtildeop)delimiter(')>operator(,) string<delimiter(')content(invtildeop)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invtimeout)delimiter(')>operator(,) string<delimiter(')content(invtimeout)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invtitle)delimiter(')>operator(,) string<delimiter(')content(invtitle)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invto)delimiter(')>operator(,) string<delimiter(')content(invto)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invtop)delimiter(')>operator(,) string<delimiter(')content(invtop)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invtr)delimiter(')>operator(,) string<delimiter(')content(invtr)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invttimeout)delimiter(')>operator(,) string<delimiter(')content(invttimeout)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invttybuiltin)delimiter(')>operator(,) string<delimiter(')content(invttybuiltin)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invttyfast)delimiter(')>operator(,) string<delimiter(')content(invttyfast)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invtx)delimiter(')>operator(,) string<delimiter(')content(invtx)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invvb)delimiter(')>operator(,) string<delimiter(')content(invvb)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invvisualbell)delimiter(')>operator(,) string<delimiter(')content(invvisualbell)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invwa)delimiter(')>operator(,) string<delimiter(')content(invwa)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invwarn)delimiter(')>operator(,) string<delimiter(')content(invwarn)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invwb)delimiter(')>operator(,) string<delimiter(')content(invwb)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invweirdinvert)delimiter(')>operator(,) string<delimiter(')content(invweirdinvert)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invwfh)delimiter(')>operator(,) string<delimiter(')content(invwfh)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invwfw)delimiter(')>operator(,) string<delimiter(')content(invwfw)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invwildmenu)delimiter(')>operator(,) string<delimiter(')content(invwildmenu)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invwinfixheight)delimiter(')>operator(,) string<delimiter(')content(invwinfixheight)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invwinfixwidth)delimiter(')>operator(,) string<delimiter(')content(invwinfixwidth)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invwiv)delimiter(')>operator(,) string<delimiter(')content(invwiv)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invwmnu)delimiter(')>operator(,) string<delimiter(')content(invwmnu)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invwrap)delimiter(')>operator(,) string<delimiter(')content(invwrap)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invwrapscan)delimiter(')>operator(,) string<delimiter(')content(invwrapscan)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invwrite)delimiter(')>operator(,) string<delimiter(')content(invwrite)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invwriteany)delimiter(')>operator(,) string<delimiter(')content(invwriteany)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invwritebackup)delimiter(')>operator(,) string<delimiter(')content(invwritebackup)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(invws)delimiter(')>operator(,) string<delimiter(')content(invws)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(is)delimiter(')>operator(,) string<delimiter(')content(is)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(isf)delimiter(')>operator(,) string<delimiter(')content(isf)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(isfname)delimiter(')>operator(,) string<delimiter(')content(isfname)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(isi)delimiter(')>operator(,) string<delimiter(')content(isi)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(isident)delimiter(')>operator(,) string<delimiter(')content(isident)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(isk)delimiter(')>operator(,) string<delimiter(')content(isk)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(iskeyword)delimiter(')>operator(,) string<delimiter(')content(iskeyword)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(isp)delimiter(')>operator(,) string<delimiter(')content(isp)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(isprint)delimiter(')>operator(,) string<delimiter(')content(isprint)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(joinspaces)delimiter(')>operator(,) string<delimiter(')content(joinspaces)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(js)delimiter(')>operator(,) string<delimiter(')content(js)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(key)delimiter(')>operator(,) string<delimiter(')content(key)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(keymap)delimiter(')>operator(,) string<delimiter(')content(keymap)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(keymodel)delimiter(')>operator(,) string<delimiter(')content(keymodel)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(keywordprg)delimiter(')>operator(,) string<delimiter(')content(keywordprg)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(km)delimiter(')>operator(,) string<delimiter(')content(km)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(kmp)delimiter(')>operator(,) string<delimiter(')content(kmp)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(kp)delimiter(')>operator(,) string<delimiter(')content(kp)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(langmap)delimiter(')>operator(,) string<delimiter(')content(langmap)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(langmenu)delimiter(')>operator(,) string<delimiter(')content(langmenu)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(laststatus)delimiter(')>operator(,) string<delimiter(')content(laststatus)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(lazyredraw)delimiter(')>operator(,) string<delimiter(')content(lazyredraw)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(lbr)delimiter(')>operator(,) string<delimiter(')content(lbr)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(lcs)delimiter(')>operator(,) string<delimiter(')content(lcs)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(linebreak)delimiter(')>operator(,) string<delimiter(')content(linebreak)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(lines)delimiter(')>operator(,) string<delimiter(')content(lines)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(linespace)delimiter(')>operator(,) string<delimiter(')content(linespace)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(lisp)delimiter(')>operator(,) string<delimiter(')content(lisp)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(lispwords)delimiter(')>operator(,) string<delimiter(')content(lispwords)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(list)delimiter(')>operator(,) string<delimiter(')content(list)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(listchars)delimiter(')>operator(,) string<delimiter(')content(listchars)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(lm)delimiter(')>operator(,) string<delimiter(')content(lm)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(lmap)delimiter(')>operator(,) string<delimiter(')content(lmap)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(loadplugins)delimiter(')>operator(,) string<delimiter(')content(loadplugins)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(lpl)delimiter(')>operator(,) string<delimiter(')content(lpl)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(ls)delimiter(')>operator(,) string<delimiter(')content(ls)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(lsp)delimiter(')>operator(,) string<delimiter(')content(lsp)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(lw)delimiter(')>operator(,) string<delimiter(')content(lw)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(lz)delimiter(')>operator(,) string<delimiter(')content(lz)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(ma)delimiter(')>operator(,) string<delimiter(')content(ma)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(macatsui)delimiter(')>operator(,) string<delimiter(')content(macatsui)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(magic)delimiter(')>operator(,) string<delimiter(')content(magic)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(makeef)delimiter(')>operator(,) string<delimiter(')content(makeef)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(makeprg)delimiter(')>operator(,) string<delimiter(')content(makeprg)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(mat)delimiter(')>operator(,) string<delimiter(')content(mat)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(matchpairs)delimiter(')>operator(,) string<delimiter(')content(matchpairs)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(matchtime)delimiter(')>operator(,) string<delimiter(')content(matchtime)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(maxcombine)delimiter(')>operator(,) string<delimiter(')content(maxcombine)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(maxfuncdepth)delimiter(')>operator(,) string<delimiter(')content(maxfuncdepth)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(maxmapdepth)delimiter(')>operator(,) string<delimiter(')content(maxmapdepth)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(maxmem)delimiter(')>operator(,) string<delimiter(')content(maxmem)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(maxmempattern)delimiter(')>operator(,) string<delimiter(')content(maxmempattern)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(maxmemtot)delimiter(')>operator(,) string<delimiter(')content(maxmemtot)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(mco)delimiter(')>operator(,) string<delimiter(')content(mco)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(mef)delimiter(')>operator(,) string<delimiter(')content(mef)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(menuitems)delimiter(')>operator(,) string<delimiter(')content(menuitems)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(mfd)delimiter(')>operator(,) string<delimiter(')content(mfd)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(mh)delimiter(')>operator(,) string<delimiter(')content(mh)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(mis)delimiter(')>operator(,) string<delimiter(')content(mis)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(mkspellmem)delimiter(')>operator(,) string<delimiter(')content(mkspellmem)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(ml)delimiter(')>operator(,) string<delimiter(')content(ml)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(mls)delimiter(')>operator(,) string<delimiter(')content(mls)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(mm)delimiter(')>operator(,) string<delimiter(')content(mm)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(mmd)delimiter(')>operator(,) string<delimiter(')content(mmd)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(mmp)delimiter(')>operator(,) string<delimiter(')content(mmp)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(mmt)delimiter(')>operator(,) string<delimiter(')content(mmt)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(mod)delimiter(')>operator(,) string<delimiter(')content(mod)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(mode)delimiter(')>operator(,) string<delimiter(')content(mode)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(mode)delimiter(')>operator(,) string<delimiter(')content(mode)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(modeline)delimiter(')>operator(,) string<delimiter(')content(modeline)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(modelines)delimiter(')>operator(,) string<delimiter(')content(modelines)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(modifiable)delimiter(')>operator(,) string<delimiter(')content(modifiable)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(modified)delimiter(')>operator(,) string<delimiter(')content(modified)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(more)delimiter(')>operator(,) string<delimiter(')content(more)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(mouse)delimiter(')>operator(,) string<delimiter(')content(mouse)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(mousef)delimiter(')>operator(,) string<delimiter(')content(mousef)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(mousefocus)delimiter(')>operator(,) string<delimiter(')content(mousefocus)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(mousehide)delimiter(')>operator(,) string<delimiter(')content(mousehide)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(mousem)delimiter(')>operator(,) string<delimiter(')content(mousem)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(mousemodel)delimiter(')>operator(,) string<delimiter(')content(mousemodel)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(mouses)delimiter(')>operator(,) string<delimiter(')content(mouses)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(mouseshape)delimiter(')>operator(,) string<delimiter(')content(mouseshape)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(mouset)delimiter(')>operator(,) string<delimiter(')content(mouset)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(mousetime)delimiter(')>operator(,) string<delimiter(')content(mousetime)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(mp)delimiter(')>operator(,) string<delimiter(')content(mp)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(mps)delimiter(')>operator(,) string<delimiter(')content(mps)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(msm)delimiter(')>operator(,) string<delimiter(')content(msm)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(mzq)delimiter(')>operator(,) string<delimiter(')content(mzq)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(mzquantum)delimiter(')>operator(,) string<delimiter(')content(mzquantum)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nf)delimiter(')>operator(,) string<delimiter(')content(nf)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(noacd)delimiter(')>operator(,) string<delimiter(')content(noacd)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(noai)delimiter(')>operator(,) string<delimiter(')content(noai)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(noakm)delimiter(')>operator(,) string<delimiter(')content(noakm)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(noallowrevins)delimiter(')>operator(,) string<delimiter(')content(noallowrevins)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(noaltkeymap)delimiter(')>operator(,) string<delimiter(')content(noaltkeymap)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(noanti)delimiter(')>operator(,) string<delimiter(')content(noanti)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(noantialias)delimiter(')>operator(,) string<delimiter(')content(noantialias)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(noar)delimiter(')>operator(,) string<delimiter(')content(noar)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(noarab)delimiter(')>operator(,) string<delimiter(')content(noarab)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(noarabic)delimiter(')>operator(,) string<delimiter(')content(noarabic)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(noarabicshape)delimiter(')>operator(,) string<delimiter(')content(noarabicshape)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(noari)delimiter(')>operator(,) string<delimiter(')content(noari)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(noarshape)delimiter(')>operator(,) string<delimiter(')content(noarshape)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(noautochdir)delimiter(')>operator(,) string<delimiter(')content(noautochdir)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(noautoindent)delimiter(')>operator(,) string<delimiter(')content(noautoindent)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(noautoread)delimiter(')>operator(,) string<delimiter(')content(noautoread)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(noautowrite)delimiter(')>operator(,) string<delimiter(')content(noautowrite)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(noautowriteall)delimiter(')>operator(,) string<delimiter(')content(noautowriteall)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(noaw)delimiter(')>operator(,) string<delimiter(')content(noaw)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(noawa)delimiter(')>operator(,) string<delimiter(')content(noawa)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nobackup)delimiter(')>operator(,) string<delimiter(')content(nobackup)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(noballooneval)delimiter(')>operator(,) string<delimiter(')content(noballooneval)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nobeval)delimiter(')>operator(,) string<delimiter(')content(nobeval)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nobin)delimiter(')>operator(,) string<delimiter(')content(nobin)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nobinary)delimiter(')>operator(,) string<delimiter(')content(nobinary)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nobiosk)delimiter(')>operator(,) string<delimiter(')content(nobiosk)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nobioskey)delimiter(')>operator(,) string<delimiter(')content(nobioskey)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nobk)delimiter(')>operator(,) string<delimiter(')content(nobk)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nobl)delimiter(')>operator(,) string<delimiter(')content(nobl)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nobomb)delimiter(')>operator(,) string<delimiter(')content(nobomb)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nobuflisted)delimiter(')>operator(,) string<delimiter(')content(nobuflisted)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nocf)delimiter(')>operator(,) string<delimiter(')content(nocf)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(noci)delimiter(')>operator(,) string<delimiter(')content(noci)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nocin)delimiter(')>operator(,) string<delimiter(')content(nocin)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nocindent)delimiter(')>operator(,) string<delimiter(')content(nocindent)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nocompatible)delimiter(')>operator(,) string<delimiter(')content(nocompatible)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(noconfirm)delimiter(')>operator(,) string<delimiter(')content(noconfirm)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(noconsk)delimiter(')>operator(,) string<delimiter(')content(noconsk)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(noconskey)delimiter(')>operator(,) string<delimiter(')content(noconskey)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nocopyindent)delimiter(')>operator(,) string<delimiter(')content(nocopyindent)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nocp)delimiter(')>operator(,) string<delimiter(')content(nocp)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nocscopetag)delimiter(')>operator(,) string<delimiter(')content(nocscopetag)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nocscopeverbose)delimiter(')>operator(,) string<delimiter(')content(nocscopeverbose)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nocst)delimiter(')>operator(,) string<delimiter(')content(nocst)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nocsverb)delimiter(')>operator(,) string<delimiter(')content(nocsverb)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nocuc)delimiter(')>operator(,) string<delimiter(')content(nocuc)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nocul)delimiter(')>operator(,) string<delimiter(')content(nocul)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nocursorcolumn)delimiter(')>operator(,) string<delimiter(')content(nocursorcolumn)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nocursorline)delimiter(')>operator(,) string<delimiter(')content(nocursorline)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nodeco)delimiter(')>operator(,) string<delimiter(')content(nodeco)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nodelcombine)delimiter(')>operator(,) string<delimiter(')content(nodelcombine)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nodg)delimiter(')>operator(,) string<delimiter(')content(nodg)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nodiff)delimiter(')>operator(,) string<delimiter(')content(nodiff)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nodigraph)delimiter(')>operator(,) string<delimiter(')content(nodigraph)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nodisable)delimiter(')>operator(,) string<delimiter(')content(nodisable)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(noea)delimiter(')>operator(,) string<delimiter(')content(noea)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(noeb)delimiter(')>operator(,) string<delimiter(')content(noeb)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(noed)delimiter(')>operator(,) string<delimiter(')content(noed)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(noedcompatible)delimiter(')>operator(,) string<delimiter(')content(noedcompatible)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(noek)delimiter(')>operator(,) string<delimiter(')content(noek)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(noendofline)delimiter(')>operator(,) string<delimiter(')content(noendofline)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(noeol)delimiter(')>operator(,) string<delimiter(')content(noeol)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(noequalalways)delimiter(')>operator(,) string<delimiter(')content(noequalalways)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(noerrorbells)delimiter(')>operator(,) string<delimiter(')content(noerrorbells)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(noesckeys)delimiter(')>operator(,) string<delimiter(')content(noesckeys)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(noet)delimiter(')>operator(,) string<delimiter(')content(noet)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(noex)delimiter(')>operator(,) string<delimiter(')content(noex)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(noexpandtab)delimiter(')>operator(,) string<delimiter(')content(noexpandtab)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(noexrc)delimiter(')>operator(,) string<delimiter(')content(noexrc)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nofen)delimiter(')>operator(,) string<delimiter(')content(nofen)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nofk)delimiter(')>operator(,) string<delimiter(')content(nofk)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nofkmap)delimiter(')>operator(,) string<delimiter(')content(nofkmap)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nofoldenable)delimiter(')>operator(,) string<delimiter(')content(nofoldenable)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nogd)delimiter(')>operator(,) string<delimiter(')content(nogd)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nogdefault)delimiter(')>operator(,) string<delimiter(')content(nogdefault)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(noguipty)delimiter(')>operator(,) string<delimiter(')content(noguipty)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nohid)delimiter(')>operator(,) string<delimiter(')content(nohid)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nohidden)delimiter(')>operator(,) string<delimiter(')content(nohidden)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nohk)delimiter(')>operator(,) string<delimiter(')content(nohk)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nohkmap)delimiter(')>operator(,) string<delimiter(')content(nohkmap)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nohkmapp)delimiter(')>operator(,) string<delimiter(')content(nohkmapp)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nohkp)delimiter(')>operator(,) string<delimiter(')content(nohkp)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nohls)delimiter(')>operator(,) string<delimiter(')content(nohls)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nohlsearch)delimiter(')>operator(,) string<delimiter(')content(nohlsearch)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(noic)delimiter(')>operator(,) string<delimiter(')content(noic)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(noicon)delimiter(')>operator(,) string<delimiter(')content(noicon)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(noignorecase)delimiter(')>operator(,) string<delimiter(')content(noignorecase)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(noim)delimiter(')>operator(,) string<delimiter(')content(noim)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(noimc)delimiter(')>operator(,) string<delimiter(')content(noimc)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(noimcmdline)delimiter(')>operator(,) string<delimiter(')content(noimcmdline)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(noimd)delimiter(')>operator(,) string<delimiter(')content(noimd)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(noincsearch)delimiter(')>operator(,) string<delimiter(')content(noincsearch)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(noinf)delimiter(')>operator(,) string<delimiter(')content(noinf)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(noinfercase)delimiter(')>operator(,) string<delimiter(')content(noinfercase)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(noinsertmode)delimiter(')>operator(,) string<delimiter(')content(noinsertmode)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nois)delimiter(')>operator(,) string<delimiter(')content(nois)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nojoinspaces)delimiter(')>operator(,) string<delimiter(')content(nojoinspaces)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nojs)delimiter(')>operator(,) string<delimiter(')content(nojs)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nolazyredraw)delimiter(')>operator(,) string<delimiter(')content(nolazyredraw)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nolbr)delimiter(')>operator(,) string<delimiter(')content(nolbr)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nolinebreak)delimiter(')>operator(,) string<delimiter(')content(nolinebreak)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nolisp)delimiter(')>operator(,) string<delimiter(')content(nolisp)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nolist)delimiter(')>operator(,) string<delimiter(')content(nolist)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(noloadplugins)delimiter(')>operator(,) string<delimiter(')content(noloadplugins)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nolpl)delimiter(')>operator(,) string<delimiter(')content(nolpl)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nolz)delimiter(')>operator(,) string<delimiter(')content(nolz)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(noma)delimiter(')>operator(,) string<delimiter(')content(noma)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nomacatsui)delimiter(')>operator(,) string<delimiter(')content(nomacatsui)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nomagic)delimiter(')>operator(,) string<delimiter(')content(nomagic)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nomh)delimiter(')>operator(,) string<delimiter(')content(nomh)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(noml)delimiter(')>operator(,) string<delimiter(')content(noml)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nomod)delimiter(')>operator(,) string<delimiter(')content(nomod)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nomodeline)delimiter(')>operator(,) string<delimiter(')content(nomodeline)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nomodifiable)delimiter(')>operator(,) string<delimiter(')content(nomodifiable)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nomodified)delimiter(')>operator(,) string<delimiter(')content(nomodified)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nomore)delimiter(')>operator(,) string<delimiter(')content(nomore)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nomousef)delimiter(')>operator(,) string<delimiter(')content(nomousef)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nomousefocus)delimiter(')>operator(,) string<delimiter(')content(nomousefocus)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nomousehide)delimiter(')>operator(,) string<delimiter(')content(nomousehide)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nonu)delimiter(')>operator(,) string<delimiter(')content(nonu)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nonumber)delimiter(')>operator(,) string<delimiter(')content(nonumber)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nopaste)delimiter(')>operator(,) string<delimiter(')content(nopaste)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nopi)delimiter(')>operator(,) string<delimiter(')content(nopi)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nopreserveindent)delimiter(')>operator(,) string<delimiter(')content(nopreserveindent)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nopreviewwindow)delimiter(')>operator(,) string<delimiter(')content(nopreviewwindow)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(noprompt)delimiter(')>operator(,) string<delimiter(')content(noprompt)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nopvw)delimiter(')>operator(,) string<delimiter(')content(nopvw)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(noreadonly)delimiter(')>operator(,) string<delimiter(')content(noreadonly)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(noremap)delimiter(')>operator(,) string<delimiter(')content(noremap)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(norestorescreen)delimiter(')>operator(,) string<delimiter(')content(norestorescreen)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(norevins)delimiter(')>operator(,) string<delimiter(')content(norevins)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nori)delimiter(')>operator(,) string<delimiter(')content(nori)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(norightleft)delimiter(')>operator(,) string<delimiter(')content(norightleft)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(norightleftcmd)delimiter(')>operator(,) string<delimiter(')content(norightleftcmd)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(norl)delimiter(')>operator(,) string<delimiter(')content(norl)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(norlc)delimiter(')>operator(,) string<delimiter(')content(norlc)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(noro)delimiter(')>operator(,) string<delimiter(')content(noro)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nors)delimiter(')>operator(,) string<delimiter(')content(nors)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(noru)delimiter(')>operator(,) string<delimiter(')content(noru)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(noruler)delimiter(')>operator(,) string<delimiter(')content(noruler)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nosb)delimiter(')>operator(,) string<delimiter(')content(nosb)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nosc)delimiter(')>operator(,) string<delimiter(')content(nosc)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(noscb)delimiter(')>operator(,) string<delimiter(')content(noscb)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(noscrollbind)delimiter(')>operator(,) string<delimiter(')content(noscrollbind)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(noscs)delimiter(')>operator(,) string<delimiter(')content(noscs)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nosecure)delimiter(')>operator(,) string<delimiter(')content(nosecure)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nosft)delimiter(')>operator(,) string<delimiter(')content(nosft)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(noshellslash)delimiter(')>operator(,) string<delimiter(')content(noshellslash)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(noshelltemp)delimiter(')>operator(,) string<delimiter(')content(noshelltemp)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(noshiftround)delimiter(')>operator(,) string<delimiter(')content(noshiftround)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(noshortname)delimiter(')>operator(,) string<delimiter(')content(noshortname)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(noshowcmd)delimiter(')>operator(,) string<delimiter(')content(noshowcmd)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(noshowfulltag)delimiter(')>operator(,) string<delimiter(')content(noshowfulltag)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(noshowmatch)delimiter(')>operator(,) string<delimiter(')content(noshowmatch)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(noshowmode)delimiter(')>operator(,) string<delimiter(')content(noshowmode)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nosi)delimiter(')>operator(,) string<delimiter(')content(nosi)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nosm)delimiter(')>operator(,) string<delimiter(')content(nosm)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nosmartcase)delimiter(')>operator(,) string<delimiter(')content(nosmartcase)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nosmartindent)delimiter(')>operator(,) string<delimiter(')content(nosmartindent)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nosmarttab)delimiter(')>operator(,) string<delimiter(')content(nosmarttab)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nosmd)delimiter(')>operator(,) string<delimiter(')content(nosmd)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nosn)delimiter(')>operator(,) string<delimiter(')content(nosn)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nosol)delimiter(')>operator(,) string<delimiter(')content(nosol)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nospell)delimiter(')>operator(,) string<delimiter(')content(nospell)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nosplitbelow)delimiter(')>operator(,) string<delimiter(')content(nosplitbelow)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nosplitright)delimiter(')>operator(,) string<delimiter(')content(nosplitright)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nospr)delimiter(')>operator(,) string<delimiter(')content(nospr)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nosr)delimiter(')>operator(,) string<delimiter(')content(nosr)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nossl)delimiter(')>operator(,) string<delimiter(')content(nossl)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nosta)delimiter(')>operator(,) string<delimiter(')content(nosta)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nostartofline)delimiter(')>operator(,) string<delimiter(')content(nostartofline)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nostmp)delimiter(')>operator(,) string<delimiter(')content(nostmp)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(noswapfile)delimiter(')>operator(,) string<delimiter(')content(noswapfile)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(noswf)delimiter(')>operator(,) string<delimiter(')content(noswf)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nota)delimiter(')>operator(,) string<delimiter(')content(nota)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(notagbsearch)delimiter(')>operator(,) string<delimiter(')content(notagbsearch)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(notagrelative)delimiter(')>operator(,) string<delimiter(')content(notagrelative)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(notagstack)delimiter(')>operator(,) string<delimiter(')content(notagstack)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(notbi)delimiter(')>operator(,) string<delimiter(')content(notbi)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(notbidi)delimiter(')>operator(,) string<delimiter(')content(notbidi)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(notbs)delimiter(')>operator(,) string<delimiter(')content(notbs)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(notermbidi)delimiter(')>operator(,) string<delimiter(')content(notermbidi)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(noterse)delimiter(')>operator(,) string<delimiter(')content(noterse)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(notextauto)delimiter(')>operator(,) string<delimiter(')content(notextauto)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(notextmode)delimiter(')>operator(,) string<delimiter(')content(notextmode)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(notf)delimiter(')>operator(,) string<delimiter(')content(notf)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(notgst)delimiter(')>operator(,) string<delimiter(')content(notgst)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(notildeop)delimiter(')>operator(,) string<delimiter(')content(notildeop)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(notimeout)delimiter(')>operator(,) string<delimiter(')content(notimeout)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(notitle)delimiter(')>operator(,) string<delimiter(')content(notitle)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(noto)delimiter(')>operator(,) string<delimiter(')content(noto)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(notop)delimiter(')>operator(,) string<delimiter(')content(notop)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(notr)delimiter(')>operator(,) string<delimiter(')content(notr)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nottimeout)delimiter(')>operator(,) string<delimiter(')content(nottimeout)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nottybuiltin)delimiter(')>operator(,) string<delimiter(')content(nottybuiltin)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nottyfast)delimiter(')>operator(,) string<delimiter(')content(nottyfast)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(notx)delimiter(')>operator(,) string<delimiter(')content(notx)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(novb)delimiter(')>operator(,) string<delimiter(')content(novb)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(novisualbell)delimiter(')>operator(,) string<delimiter(')content(novisualbell)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nowa)delimiter(')>operator(,) string<delimiter(')content(nowa)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nowarn)delimiter(')>operator(,) string<delimiter(')content(nowarn)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nowb)delimiter(')>operator(,) string<delimiter(')content(nowb)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(noweirdinvert)delimiter(')>operator(,) string<delimiter(')content(noweirdinvert)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nowfh)delimiter(')>operator(,) string<delimiter(')content(nowfh)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nowfw)delimiter(')>operator(,) string<delimiter(')content(nowfw)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nowildmenu)delimiter(')>operator(,) string<delimiter(')content(nowildmenu)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nowinfixheight)delimiter(')>operator(,) string<delimiter(')content(nowinfixheight)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nowinfixwidth)delimiter(')>operator(,) string<delimiter(')content(nowinfixwidth)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nowiv)delimiter(')>operator(,) string<delimiter(')content(nowiv)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nowmnu)delimiter(')>operator(,) string<delimiter(')content(nowmnu)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nowrap)delimiter(')>operator(,) string<delimiter(')content(nowrap)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nowrapscan)delimiter(')>operator(,) string<delimiter(')content(nowrapscan)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nowrite)delimiter(')>operator(,) string<delimiter(')content(nowrite)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nowriteany)delimiter(')>operator(,) string<delimiter(')content(nowriteany)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nowritebackup)delimiter(')>operator(,) string<delimiter(')content(nowritebackup)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nows)delimiter(')>operator(,) string<delimiter(')content(nows)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nrformats)delimiter(')>operator(,) string<delimiter(')content(nrformats)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nu)delimiter(')>operator(,) string<delimiter(')content(nu)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(number)delimiter(')>operator(,) string<delimiter(')content(number)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(numberwidth)delimiter(')>operator(,) string<delimiter(')content(numberwidth)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(nuw)delimiter(')>operator(,) string<delimiter(')content(nuw)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(oft)delimiter(')>operator(,) string<delimiter(')content(oft)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(ofu)delimiter(')>operator(,) string<delimiter(')content(ofu)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(omnifunc)delimiter(')>operator(,) string<delimiter(')content(omnifunc)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(operatorfunc)delimiter(')>operator(,) string<delimiter(')content(operatorfunc)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(opfunc)delimiter(')>operator(,) string<delimiter(')content(opfunc)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(osfiletype)delimiter(')>operator(,) string<delimiter(')content(osfiletype)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(pa)delimiter(')>operator(,) string<delimiter(')content(pa)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(para)delimiter(')>operator(,) string<delimiter(')content(para)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(paragraphs)delimiter(')>operator(,) string<delimiter(')content(paragraphs)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(paste)delimiter(')>operator(,) string<delimiter(')content(paste)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(pastetoggle)delimiter(')>operator(,) string<delimiter(')content(pastetoggle)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(patchexpr)delimiter(')>operator(,) string<delimiter(')content(patchexpr)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(patchmode)delimiter(')>operator(,) string<delimiter(')content(patchmode)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(path)delimiter(')>operator(,) string<delimiter(')content(path)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(pdev)delimiter(')>operator(,) string<delimiter(')content(pdev)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(penc)delimiter(')>operator(,) string<delimiter(')content(penc)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(pex)delimiter(')>operator(,) string<delimiter(')content(pex)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(pexpr)delimiter(')>operator(,) string<delimiter(')content(pexpr)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(pfn)delimiter(')>operator(,) string<delimiter(')content(pfn)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(ph)delimiter(')>operator(,) string<delimiter(')content(ph)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(pheader)delimiter(')>operator(,) string<delimiter(')content(pheader)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(pi)delimiter(')>operator(,) string<delimiter(')content(pi)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(pm)delimiter(')>operator(,) string<delimiter(')content(pm)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(pmbcs)delimiter(')>operator(,) string<delimiter(')content(pmbcs)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(pmbfn)delimiter(')>operator(,) string<delimiter(')content(pmbfn)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(popt)delimiter(')>operator(,) string<delimiter(')content(popt)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(preserveindent)delimiter(')>operator(,) string<delimiter(')content(preserveindent)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(previewheight)delimiter(')>operator(,) string<delimiter(')content(previewheight)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(previewwindow)delimiter(')>operator(,) string<delimiter(')content(previewwindow)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(printdevice)delimiter(')>operator(,) string<delimiter(')content(printdevice)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(printencoding)delimiter(')>operator(,) string<delimiter(')content(printencoding)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(printexpr)delimiter(')>operator(,) string<delimiter(')content(printexpr)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(printfont)delimiter(')>operator(,) string<delimiter(')content(printfont)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(printheader)delimiter(')>operator(,) string<delimiter(')content(printheader)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(printmbcharset)delimiter(')>operator(,) string<delimiter(')content(printmbcharset)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(printmbfont)delimiter(')>operator(,) string<delimiter(')content(printmbfont)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(printoptions)delimiter(')>operator(,) string<delimiter(')content(printoptions)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(prompt)delimiter(')>operator(,) string<delimiter(')content(prompt)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(pt)delimiter(')>operator(,) string<delimiter(')content(pt)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(pumheight)delimiter(')>operator(,) string<delimiter(')content(pumheight)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(pvh)delimiter(')>operator(,) string<delimiter(')content(pvh)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(pvw)delimiter(')>operator(,) string<delimiter(')content(pvw)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(qe)delimiter(')>operator(,) string<delimiter(')content(qe)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(quoteescape)delimiter(')>operator(,) string<delimiter(')content(quoteescape)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(readonly)delimiter(')>operator(,) string<delimiter(')content(readonly)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(remap)delimiter(')>operator(,) string<delimiter(')content(remap)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(report)delimiter(')>operator(,) string<delimiter(')content(report)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(restorescreen)delimiter(')>operator(,) string<delimiter(')content(restorescreen)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(revins)delimiter(')>operator(,) string<delimiter(')content(revins)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(ri)delimiter(')>operator(,) string<delimiter(')content(ri)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(rightleft)delimiter(')>operator(,) string<delimiter(')content(rightleft)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(rightleftcmd)delimiter(')>operator(,) string<delimiter(')content(rightleftcmd)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(rl)delimiter(')>operator(,) string<delimiter(')content(rl)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(rlc)delimiter(')>operator(,) string<delimiter(')content(rlc)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(ro)delimiter(')>operator(,) string<delimiter(')content(ro)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(rs)delimiter(')>operator(,) string<delimiter(')content(rs)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(rtp)delimiter(')>operator(,) string<delimiter(')content(rtp)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(ru)delimiter(')>operator(,) string<delimiter(')content(ru)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(ruf)delimiter(')>operator(,) string<delimiter(')content(ruf)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(ruler)delimiter(')>operator(,) string<delimiter(')content(ruler)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(rulerformat)delimiter(')>operator(,) string<delimiter(')content(rulerformat)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(runtimepath)delimiter(')>operator(,) string<delimiter(')content(runtimepath)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(sb)delimiter(')>operator(,) string<delimiter(')content(sb)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(sbo)delimiter(')>operator(,) string<delimiter(')content(sbo)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(sbr)delimiter(')>operator(,) string<delimiter(')content(sbr)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(sc)delimiter(')>operator(,) string<delimiter(')content(sc)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(scb)delimiter(')>operator(,) string<delimiter(')content(scb)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(scr)delimiter(')>operator(,) string<delimiter(')content(scr)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(scroll)delimiter(')>operator(,) string<delimiter(')content(scroll)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(scrollbind)delimiter(')>operator(,) string<delimiter(')content(scrollbind)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(scrolljump)delimiter(')>operator(,) string<delimiter(')content(scrolljump)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(scrolloff)delimiter(')>operator(,) string<delimiter(')content(scrolloff)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(scrollopt)delimiter(')>operator(,) string<delimiter(')content(scrollopt)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(scs)delimiter(')>operator(,) string<delimiter(')content(scs)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(sect)delimiter(')>operator(,) string<delimiter(')content(sect)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(sections)delimiter(')>operator(,) string<delimiter(')content(sections)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(secure)delimiter(')>operator(,) string<delimiter(')content(secure)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(sel)delimiter(')>operator(,) string<delimiter(')content(sel)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(selection)delimiter(')>operator(,) string<delimiter(')content(selection)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(selectmode)delimiter(')>operator(,) string<delimiter(')content(selectmode)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(sessionoptions)delimiter(')>operator(,) string<delimiter(')content(sessionoptions)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(sft)delimiter(')>operator(,) string<delimiter(')content(sft)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(sh)delimiter(')>operator(,) string<delimiter(')content(sh)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(shape)delimiter(')>operator(,) string<delimiter(')content(shape)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(shape)delimiter(')>operator(,) string<delimiter(')content(shape)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(shcf)delimiter(')>operator(,) string<delimiter(')content(shcf)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(shell)delimiter(')>operator(,) string<delimiter(')content(shell)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(shellcmdflag)delimiter(')>operator(,) string<delimiter(')content(shellcmdflag)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(shellpipe)delimiter(')>operator(,) string<delimiter(')content(shellpipe)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(shellquote)delimiter(')>operator(,) string<delimiter(')content(shellquote)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(shellredir)delimiter(')>operator(,) string<delimiter(')content(shellredir)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(shellslash)delimiter(')>operator(,) string<delimiter(')content(shellslash)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(shelltemp)delimiter(')>operator(,) string<delimiter(')content(shelltemp)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(shelltype)delimiter(')>operator(,) string<delimiter(')content(shelltype)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(shellxquote)delimiter(')>operator(,) string<delimiter(')content(shellxquote)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(shiftround)delimiter(')>operator(,) string<delimiter(')content(shiftround)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(shiftwidth)delimiter(')>operator(,) string<delimiter(')content(shiftwidth)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(shm)delimiter(')>operator(,) string<delimiter(')content(shm)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(shortmess)delimiter(')>operator(,) string<delimiter(')content(shortmess)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(shortname)delimiter(')>operator(,) string<delimiter(')content(shortname)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(showbreak)delimiter(')>operator(,) string<delimiter(')content(showbreak)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(showcmd)delimiter(')>operator(,) string<delimiter(')content(showcmd)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(showfulltag)delimiter(')>operator(,) string<delimiter(')content(showfulltag)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(showmatch)delimiter(')>operator(,) string<delimiter(')content(showmatch)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(showmode)delimiter(')>operator(,) string<delimiter(')content(showmode)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(showtabline)delimiter(')>operator(,) string<delimiter(')content(showtabline)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(shq)delimiter(')>operator(,) string<delimiter(')content(shq)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(si)delimiter(')>operator(,) string<delimiter(')content(si)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(sidescroll)delimiter(')>operator(,) string<delimiter(')content(sidescroll)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(sidescrolloff)delimiter(')>operator(,) string<delimiter(')content(sidescrolloff)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(siso)delimiter(')>operator(,) string<delimiter(')content(siso)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(sj)delimiter(')>operator(,) string<delimiter(')content(sj)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(slm)delimiter(')>operator(,) string<delimiter(')content(slm)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(sm)delimiter(')>operator(,) string<delimiter(')content(sm)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(smartcase)delimiter(')>operator(,) string<delimiter(')content(smartcase)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(smartindent)delimiter(')>operator(,) string<delimiter(')content(smartindent)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(smarttab)delimiter(')>operator(,) string<delimiter(')content(smarttab)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(smc)delimiter(')>operator(,) string<delimiter(')content(smc)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(smd)delimiter(')>operator(,) string<delimiter(')content(smd)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(sn)delimiter(')>operator(,) string<delimiter(')content(sn)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(so)delimiter(')>operator(,) string<delimiter(')content(so)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(softtabstop)delimiter(')>operator(,) string<delimiter(')content(softtabstop)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(sol)delimiter(')>operator(,) string<delimiter(')content(sol)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(sp)delimiter(')>operator(,) string<delimiter(')content(sp)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(spc)delimiter(')>operator(,) string<delimiter(')content(spc)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(spell)delimiter(')>operator(,) string<delimiter(')content(spell)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(spellcapcheck)delimiter(')>operator(,) string<delimiter(')content(spellcapcheck)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(spellfile)delimiter(')>operator(,) string<delimiter(')content(spellfile)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(spelllang)delimiter(')>operator(,) string<delimiter(')content(spelllang)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(spellsuggest)delimiter(')>operator(,) string<delimiter(')content(spellsuggest)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(spf)delimiter(')>operator(,) string<delimiter(')content(spf)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(spl)delimiter(')>operator(,) string<delimiter(')content(spl)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(splitbelow)delimiter(')>operator(,) string<delimiter(')content(splitbelow)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(splitright)delimiter(')>operator(,) string<delimiter(')content(splitright)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(spr)delimiter(')>operator(,) string<delimiter(')content(spr)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(sps)delimiter(')>operator(,) string<delimiter(')content(sps)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(sr)delimiter(')>operator(,) string<delimiter(')content(sr)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(srr)delimiter(')>operator(,) string<delimiter(')content(srr)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(ss)delimiter(')>operator(,) string<delimiter(')content(ss)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(ssl)delimiter(')>operator(,) string<delimiter(')content(ssl)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(ssop)delimiter(')>operator(,) string<delimiter(')content(ssop)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(st)delimiter(')>operator(,) string<delimiter(')content(st)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(sta)delimiter(')>operator(,) string<delimiter(')content(sta)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(stal)delimiter(')>operator(,) string<delimiter(')content(stal)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(start)delimiter(')>operator(,) string<delimiter(')content(start)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(startofline)delimiter(')>operator(,) string<delimiter(')content(startofline)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(statusline)delimiter(')>operator(,) string<delimiter(')content(statusline)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(stl)delimiter(')>operator(,) string<delimiter(')content(stl)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(stmp)delimiter(')>operator(,) string<delimiter(')content(stmp)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(sts)delimiter(')>operator(,) string<delimiter(')content(sts)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(su)delimiter(')>operator(,) string<delimiter(')content(su)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(sua)delimiter(')>operator(,) string<delimiter(')content(sua)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(suffixes)delimiter(')>operator(,) string<delimiter(')content(suffixes)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(suffixesadd)delimiter(')>operator(,) string<delimiter(')content(suffixesadd)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(sw)delimiter(')>operator(,) string<delimiter(')content(sw)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(swapfile)delimiter(')>operator(,) string<delimiter(')content(swapfile)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(swapsync)delimiter(')>operator(,) string<delimiter(')content(swapsync)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(swb)delimiter(')>operator(,) string<delimiter(')content(swb)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(swf)delimiter(')>operator(,) string<delimiter(')content(swf)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(switchbuf)delimiter(')>operator(,) string<delimiter(')content(switchbuf)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(sws)delimiter(')>operator(,) string<delimiter(')content(sws)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(sxq)delimiter(')>operator(,) string<delimiter(')content(sxq)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(syn)delimiter(')>operator(,) string<delimiter(')content(syn)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(synmaxcol)delimiter(')>operator(,) string<delimiter(')content(synmaxcol)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(syntax)delimiter(')>operator(,) string<delimiter(')content(syntax)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_AB)delimiter(')>operator(,) string<delimiter(')content(t_AB)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_AF)delimiter(')>operator(,) string<delimiter(')content(t_AF)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_AL)delimiter(')>operator(,) string<delimiter(')content(t_AL)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_CS)delimiter(')>operator(,) string<delimiter(')content(t_CS)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_CV)delimiter(')>operator(,) string<delimiter(')content(t_CV)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_Ce)delimiter(')>operator(,) string<delimiter(')content(t_Ce)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_Co)delimiter(')>operator(,) string<delimiter(')content(t_Co)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_Cs)delimiter(')>operator(,) string<delimiter(')content(t_Cs)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_DL)delimiter(')>operator(,) string<delimiter(')content(t_DL)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_EI)delimiter(')>operator(,) string<delimiter(')content(t_EI)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_EI)delimiter(')>operator(,) string<delimiter(')content(t_EI)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_EI)delimiter(')>operator(,) string<delimiter(')content(t_EI)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_F1)delimiter(')>operator(,) string<delimiter(')content(t_F1)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_F2)delimiter(')>operator(,) string<delimiter(')content(t_F2)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_F3)delimiter(')>operator(,) string<delimiter(')content(t_F3)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_F4)delimiter(')>operator(,) string<delimiter(')content(t_F4)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_F5)delimiter(')>operator(,) string<delimiter(')content(t_F5)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_F6)delimiter(')>operator(,) string<delimiter(')content(t_F6)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_F7)delimiter(')>operator(,) string<delimiter(')content(t_F7)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_F8)delimiter(')>operator(,) string<delimiter(')content(t_F8)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_F9)delimiter(')>operator(,) string<delimiter(')content(t_F9)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_IE)delimiter(')>operator(,) string<delimiter(')content(t_IE)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_IS)delimiter(')>operator(,) string<delimiter(')content(t_IS)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_K1)delimiter(')>operator(,) string<delimiter(')content(t_K1)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_K3)delimiter(')>operator(,) string<delimiter(')content(t_K3)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_K4)delimiter(')>operator(,) string<delimiter(')content(t_K4)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_K5)delimiter(')>operator(,) string<delimiter(')content(t_K5)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_K6)delimiter(')>operator(,) string<delimiter(')content(t_K6)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_K7)delimiter(')>operator(,) string<delimiter(')content(t_K7)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_K8)delimiter(')>operator(,) string<delimiter(')content(t_K8)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_K9)delimiter(')>operator(,) string<delimiter(')content(t_K9)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_KA)delimiter(')>operator(,) string<delimiter(')content(t_KA)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_KB)delimiter(')>operator(,) string<delimiter(')content(t_KB)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_KC)delimiter(')>operator(,) string<delimiter(')content(t_KC)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_KD)delimiter(')>operator(,) string<delimiter(')content(t_KD)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_KE)delimiter(')>operator(,) string<delimiter(')content(t_KE)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_KF)delimiter(')>operator(,) string<delimiter(')content(t_KF)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_KG)delimiter(')>operator(,) string<delimiter(')content(t_KG)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_KH)delimiter(')>operator(,) string<delimiter(')content(t_KH)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_KI)delimiter(')>operator(,) string<delimiter(')content(t_KI)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_KJ)delimiter(')>operator(,) string<delimiter(')content(t_KJ)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_KK)delimiter(')>operator(,) string<delimiter(')content(t_KK)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_KL)delimiter(')>operator(,) string<delimiter(')content(t_KL)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_RI)delimiter(')>operator(,) string<delimiter(')content(t_RI)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_RV)delimiter(')>operator(,) string<delimiter(')content(t_RV)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_SI)delimiter(')>operator(,) string<delimiter(')content(t_SI)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_SI)delimiter(')>operator(,) string<delimiter(')content(t_SI)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_SI)delimiter(')>operator(,) string<delimiter(')content(t_SI)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_Sb)delimiter(')>operator(,) string<delimiter(')content(t_Sb)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_Sf)delimiter(')>operator(,) string<delimiter(')content(t_Sf)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_WP)delimiter(')>operator(,) string<delimiter(')content(t_WP)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_WS)delimiter(')>operator(,) string<delimiter(')content(t_WS)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_ZH)delimiter(')>operator(,) string<delimiter(')content(t_ZH)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_ZR)delimiter(')>operator(,) string<delimiter(')content(t_ZR)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_al)delimiter(')>operator(,) string<delimiter(')content(t_al)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_bc)delimiter(')>operator(,) string<delimiter(')content(t_bc)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_cd)delimiter(')>operator(,) string<delimiter(')content(t_cd)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_ce)delimiter(')>operator(,) string<delimiter(')content(t_ce)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_cl)delimiter(')>operator(,) string<delimiter(')content(t_cl)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_cm)delimiter(')>operator(,) string<delimiter(')content(t_cm)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_cs)delimiter(')>operator(,) string<delimiter(')content(t_cs)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_da)delimiter(')>operator(,) string<delimiter(')content(t_da)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_db)delimiter(')>operator(,) string<delimiter(')content(t_db)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_dl)delimiter(')>operator(,) string<delimiter(')content(t_dl)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_fs)delimiter(')>operator(,) string<delimiter(')content(t_fs)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_k1)delimiter(')>operator(,) string<delimiter(')content(t_k1)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_k2)delimiter(')>operator(,) string<delimiter(')content(t_k2)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_k3)delimiter(')>operator(,) string<delimiter(')content(t_k3)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_k4)delimiter(')>operator(,) string<delimiter(')content(t_k4)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_k5)delimiter(')>operator(,) string<delimiter(')content(t_k5)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_k6)delimiter(')>operator(,) string<delimiter(')content(t_k6)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_k7)delimiter(')>operator(,) string<delimiter(')content(t_k7)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_k8)delimiter(')>operator(,) string<delimiter(')content(t_k8)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_k9)delimiter(')>operator(,) string<delimiter(')content(t_k9)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_kB)delimiter(')>operator(,) string<delimiter(')content(t_kB)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_kD)delimiter(')>operator(,) string<delimiter(')content(t_kD)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_kI)delimiter(')>operator(,) string<delimiter(')content(t_kI)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_kN)delimiter(')>operator(,) string<delimiter(')content(t_kN)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_kP)delimiter(')>operator(,) string<delimiter(')content(t_kP)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_kb)delimiter(')>operator(,) string<delimiter(')content(t_kb)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_kd)delimiter(')>operator(,) string<delimiter(')content(t_kd)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_ke)delimiter(')>operator(,) string<delimiter(')content(t_ke)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_kh)delimiter(')>operator(,) string<delimiter(')content(t_kh)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_kl)delimiter(')>operator(,) string<delimiter(')content(t_kl)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_kr)delimiter(')>operator(,) string<delimiter(')content(t_kr)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_ks)delimiter(')>operator(,) string<delimiter(')content(t_ks)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_ku)delimiter(')>operator(,) string<delimiter(')content(t_ku)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_le)delimiter(')>operator(,) string<delimiter(')content(t_le)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_mb)delimiter(')>operator(,) string<delimiter(')content(t_mb)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_md)delimiter(')>operator(,) string<delimiter(')content(t_md)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_me)delimiter(')>operator(,) string<delimiter(')content(t_me)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_mr)delimiter(')>operator(,) string<delimiter(')content(t_mr)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_ms)delimiter(')>operator(,) string<delimiter(')content(t_ms)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_nd)delimiter(')>operator(,) string<delimiter(')content(t_nd)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_op)delimiter(')>operator(,) string<delimiter(')content(t_op)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_se)delimiter(')>operator(,) string<delimiter(')content(t_se)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_so)delimiter(')>operator(,) string<delimiter(')content(t_so)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_sr)delimiter(')>operator(,) string<delimiter(')content(t_sr)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_te)delimiter(')>operator(,) string<delimiter(')content(t_te)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_ti)delimiter(')>operator(,) string<delimiter(')content(t_ti)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_ts)delimiter(')>operator(,) string<delimiter(')content(t_ts)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_ue)delimiter(')>operator(,) string<delimiter(')content(t_ue)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_us)delimiter(')>operator(,) string<delimiter(')content(t_us)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_ut)delimiter(')>operator(,) string<delimiter(')content(t_ut)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_vb)delimiter(')>operator(,) string<delimiter(')content(t_vb)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_ve)delimiter(')>operator(,) string<delimiter(')content(t_ve)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_vi)delimiter(')>operator(,) string<delimiter(')content(t_vi)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_vs)delimiter(')>operator(,) string<delimiter(')content(t_vs)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(t_xs)delimiter(')>operator(,) string<delimiter(')content(t_xs)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(ta)delimiter(')>operator(,) string<delimiter(')content(ta)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(tabline)delimiter(')>operator(,) string<delimiter(')content(tabline)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(tabpagemax)delimiter(')>operator(,) string<delimiter(')content(tabpagemax)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(tabstop)delimiter(')>operator(,) string<delimiter(')content(tabstop)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(tag)delimiter(')>operator(,) string<delimiter(')content(tag)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(tagbsearch)delimiter(')>operator(,) string<delimiter(')content(tagbsearch)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(taglength)delimiter(')>operator(,) string<delimiter(')content(taglength)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(tagrelative)delimiter(')>operator(,) string<delimiter(')content(tagrelative)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(tags)delimiter(')>operator(,) string<delimiter(')content(tags)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(tagstack)delimiter(')>operator(,) string<delimiter(')content(tagstack)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(tal)delimiter(')>operator(,) string<delimiter(')content(tal)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(tb)delimiter(')>operator(,) string<delimiter(')content(tb)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(tbi)delimiter(')>operator(,) string<delimiter(')content(tbi)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(tbidi)delimiter(')>operator(,) string<delimiter(')content(tbidi)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(tbis)delimiter(')>operator(,) string<delimiter(')content(tbis)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(tbs)delimiter(')>operator(,) string<delimiter(')content(tbs)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(tenc)delimiter(')>operator(,) string<delimiter(')content(tenc)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(term)delimiter(')>operator(,) string<delimiter(')content(term)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(termbidi)delimiter(')>operator(,) string<delimiter(')content(termbidi)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(termencoding)delimiter(')>operator(,) string<delimiter(')content(termencoding)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(terse)delimiter(')>operator(,) string<delimiter(')content(terse)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(textauto)delimiter(')>operator(,) string<delimiter(')content(textauto)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(textmode)delimiter(')>operator(,) string<delimiter(')content(textmode)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(textwidth)delimiter(')>operator(,) string<delimiter(')content(textwidth)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(tf)delimiter(')>operator(,) string<delimiter(')content(tf)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(tgst)delimiter(')>operator(,) string<delimiter(')content(tgst)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(thesaurus)delimiter(')>operator(,) string<delimiter(')content(thesaurus)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(tildeop)delimiter(')>operator(,) string<delimiter(')content(tildeop)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(timeout)delimiter(')>operator(,) string<delimiter(')content(timeout)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(timeoutlen)delimiter(')>operator(,) string<delimiter(')content(timeoutlen)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(title)delimiter(')>operator(,) string<delimiter(')content(title)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(titlelen)delimiter(')>operator(,) string<delimiter(')content(titlelen)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(titleold)delimiter(')>operator(,) string<delimiter(')content(titleold)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(titlestring)delimiter(')>operator(,) string<delimiter(')content(titlestring)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(tl)delimiter(')>operator(,) string<delimiter(')content(tl)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(tm)delimiter(')>operator(,) string<delimiter(')content(tm)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(to)delimiter(')>operator(,) string<delimiter(')content(to)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(toolbar)delimiter(')>operator(,) string<delimiter(')content(toolbar)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(toolbariconsize)delimiter(')>operator(,) string<delimiter(')content(toolbariconsize)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(top)delimiter(')>operator(,) string<delimiter(')content(top)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(tpm)delimiter(')>operator(,) string<delimiter(')content(tpm)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(tr)delimiter(')>operator(,) string<delimiter(')content(tr)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(ts)delimiter(')>operator(,) string<delimiter(')content(ts)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(tsl)delimiter(')>operator(,) string<delimiter(')content(tsl)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(tsr)delimiter(')>operator(,) string<delimiter(')content(tsr)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(ttimeout)delimiter(')>operator(,) string<delimiter(')content(ttimeout)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(ttimeoutlen)delimiter(')>operator(,) string<delimiter(')content(ttimeoutlen)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(ttm)delimiter(')>operator(,) string<delimiter(')content(ttm)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(tty)delimiter(')>operator(,) string<delimiter(')content(tty)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(ttybuiltin)delimiter(')>operator(,) string<delimiter(')content(ttybuiltin)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(ttyfast)delimiter(')>operator(,) string<delimiter(')content(ttyfast)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(ttym)delimiter(')>operator(,) string<delimiter(')content(ttym)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(ttymouse)delimiter(')>operator(,) string<delimiter(')content(ttymouse)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(ttyscroll)delimiter(')>operator(,) string<delimiter(')content(ttyscroll)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(ttytype)delimiter(')>operator(,) string<delimiter(')content(ttytype)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(tw)delimiter(')>operator(,) string<delimiter(')content(tw)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(tx)delimiter(')>operator(,) string<delimiter(')content(tx)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(uc)delimiter(')>operator(,) string<delimiter(')content(uc)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(ul)delimiter(')>operator(,) string<delimiter(')content(ul)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(undolevels)delimiter(')>operator(,) string<delimiter(')content(undolevels)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(updatecount)delimiter(')>operator(,) string<delimiter(')content(updatecount)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(updatetime)delimiter(')>operator(,) string<delimiter(')content(updatetime)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(ut)delimiter(')>operator(,) string<delimiter(')content(ut)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(vb)delimiter(')>operator(,) string<delimiter(')content(vb)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(vbs)delimiter(')>operator(,) string<delimiter(')content(vbs)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(vdir)delimiter(')>operator(,) string<delimiter(')content(vdir)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(ve)delimiter(')>operator(,) string<delimiter(')content(ve)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(verbose)delimiter(')>operator(,) string<delimiter(')content(verbose)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(verbosefile)delimiter(')>operator(,) string<delimiter(')content(verbosefile)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(vfile)delimiter(')>operator(,) string<delimiter(')content(vfile)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(vi)delimiter(')>operator(,) string<delimiter(')content(vi)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(viewdir)delimiter(')>operator(,) string<delimiter(')content(viewdir)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(viewoptions)delimiter(')>operator(,) string<delimiter(')content(viewoptions)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(viminfo)delimiter(')>operator(,) string<delimiter(')content(viminfo)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(virtualedit)delimiter(')>operator(,) string<delimiter(')content(virtualedit)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(visualbell)delimiter(')>operator(,) string<delimiter(')content(visualbell)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(vop)delimiter(')>operator(,) string<delimiter(')content(vop)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(wa)delimiter(')>operator(,) string<delimiter(')content(wa)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(wak)delimiter(')>operator(,) string<delimiter(')content(wak)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(warn)delimiter(')>operator(,) string<delimiter(')content(warn)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(wb)delimiter(')>operator(,) string<delimiter(')content(wb)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(wc)delimiter(')>operator(,) string<delimiter(')content(wc)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(wcm)delimiter(')>operator(,) string<delimiter(')content(wcm)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(wd)delimiter(')>operator(,) string<delimiter(')content(wd)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(weirdinvert)delimiter(')>operator(,) string<delimiter(')content(weirdinvert)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(wfh)delimiter(')>operator(,) string<delimiter(')content(wfh)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(wfw)delimiter(')>operator(,) string<delimiter(')content(wfw)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(wh)delimiter(')>operator(,) string<delimiter(')content(wh)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(whichwrap)delimiter(')>operator(,) string<delimiter(')content(whichwrap)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(wi)delimiter(')>operator(,) string<delimiter(')content(wi)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(wig)delimiter(')>operator(,) string<delimiter(')content(wig)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(wildchar)delimiter(')>operator(,) string<delimiter(')content(wildchar)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(wildcharm)delimiter(')>operator(,) string<delimiter(')content(wildcharm)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(wildignore)delimiter(')>operator(,) string<delimiter(')content(wildignore)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(wildmenu)delimiter(')>operator(,) string<delimiter(')content(wildmenu)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(wildmode)delimiter(')>operator(,) string<delimiter(')content(wildmode)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(wildoptions)delimiter(')>operator(,) string<delimiter(')content(wildoptions)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(wim)delimiter(')>operator(,) string<delimiter(')content(wim)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(winaltkeys)delimiter(')>operator(,) string<delimiter(')content(winaltkeys)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(window)delimiter(')>operator(,) string<delimiter(')content(window)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(winfixheight)delimiter(')>operator(,) string<delimiter(')content(winfixheight)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(winfixwidth)delimiter(')>operator(,) string<delimiter(')content(winfixwidth)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(winheight)delimiter(')>operator(,) string<delimiter(')content(winheight)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(winminheight)delimiter(')>operator(,) string<delimiter(')content(winminheight)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(winminwidth)delimiter(')>operator(,) string<delimiter(')content(winminwidth)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(winwidth)delimiter(')>operator(,) string<delimiter(')content(winwidth)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(wiv)delimiter(')>operator(,) string<delimiter(')content(wiv)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(wiw)delimiter(')>operator(,) string<delimiter(')content(wiw)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(wm)delimiter(')>operator(,) string<delimiter(')content(wm)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(wmh)delimiter(')>operator(,) string<delimiter(')content(wmh)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(wmnu)delimiter(')>operator(,) string<delimiter(')content(wmnu)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(wmw)delimiter(')>operator(,) string<delimiter(')content(wmw)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(wop)delimiter(')>operator(,) string<delimiter(')content(wop)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(wrap)delimiter(')>operator(,) string<delimiter(')content(wrap)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(wrapmargin)delimiter(')>operator(,) string<delimiter(')content(wrapmargin)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(wrapscan)delimiter(')>operator(,) string<delimiter(')content(wrapscan)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(write)delimiter(')>operator(,) string<delimiter(')content(write)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(writeany)delimiter(')>operator(,) string<delimiter(')content(writeany)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(writebackup)delimiter(')>operator(,) string<delimiter(')content(writebackup)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(writedelay)delimiter(')>operator(,) string<delimiter(')content(writedelay)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(ws)delimiter(')>operator(,) string<delimiter(')content(ws)delimiter(')>operator(\))operator(,) operator(()string<delimiter(')content(ww)delimiter(')>operator(,) string<delimiter(')content(ww)delimiter(')>operator(\))operator(])
comment(# -*- coding: utf-8 -*-)
docstring<delimiter(""")content(
)content(    pygments.lexers.agile)content(
)content(    ~~~~~~~~~~~~~~~~~~~~~)content(
)content(
)content(    Lexers for agile languages.)content(
)content(
)content(    :copyright: Copyright 2006-2009 by the Pygments team, see AUTHORS.)content(
)content(    :license: BSD, see LICENSE for details.)content(
)delimiter(""")>

keyword(import) include(re)
keyword(try)operator(:)
    predefined(set)
keyword(except) exception(NameError)operator(:)
    keyword(from) include(sets) keyword(import) include(Set) keyword(as) ident(set)

keyword(from) include(pygments.lexer) keyword(import) include(Lexer)operator(,) include(RegexLexer)operator(,) include(ExtendedRegexLexer)operator(,) \
     include(LexerContext)operator(,) include(include)operator(,) include(combined)operator(,) include(do_insertions)operator(,) include(bygroups)operator(,) include(using)
keyword(from) include(pygments.token) keyword(import) include(Error)operator(,) include(Text)operator(,) \
     include(Comment)operator(,) include(Operator)operator(,) include(Keyword)operator(,) include(Name)operator(,) include(String)operator(,) include(Number)operator(,) include(Generic)operator(,) include(Punctuation)
keyword(from) include(pygments.util) keyword(import) include(get_bool_opt)operator(,) include(get_list_opt)operator(,) include(shebang_matches)
keyword(from) include(pygments) keyword(import) include(unistring) keyword(as) ident(uni)


ident(__all__) operator(=) operator([)string<delimiter(')content(PythonLexer)delimiter(')>operator(,) string<delimiter(')content(PythonConsoleLexer)delimiter(')>operator(,) string<delimiter(')content(PythonTracebackLexer)delimiter(')>operator(,)
           string<delimiter(')content(RubyLexer)delimiter(')>operator(,) string<delimiter(')content(RubyConsoleLexer)delimiter(')>operator(,) string<delimiter(')content(PerlLexer)delimiter(')>operator(,) string<delimiter(')content(LuaLexer)delimiter(')>operator(,)
           string<delimiter(')content(MiniDLexer)delimiter(')>operator(,) string<delimiter(')content(IoLexer)delimiter(')>operator(,) string<delimiter(')content(TclLexer)delimiter(')>operator(,) string<delimiter(')content(ClojureLexer)delimiter(')>operator(,)
           string<delimiter(')content(Python3Lexer)delimiter(')>operator(,) string<delimiter(')content(Python3TracebackLexer)delimiter(')>operator(])

comment(# b/w compatibility)
keyword(from) include(pygments.lexers.functional) keyword(import) include(SchemeLexer)

ident(line_re)  operator(=) ident(re)operator(.)ident(compile)operator(()string<delimiter(')content(.*?)char(\\n)delimiter(')>operator(\))


keyword(class) class(PythonLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    For `Python <http://www.python.org>`_ source code.)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(Python)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(python)delimiter(')>operator(,) string<delimiter(')content(py)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.py)delimiter(')>operator(,) string<delimiter(')content(*.pyw)delimiter(')>operator(,) string<delimiter(')content(*.sc)delimiter(')>operator(,) string<delimiter(')content(SConstruct)delimiter(')>operator(,) string<delimiter(')content(SConscript)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(text/x-python)delimiter(')>operator(,) string<delimiter(')content(application/x-python)delimiter(')>operator(])

    ident(tokens) operator(=) operator({)
        string<delimiter(')content(root)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\n)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(^()content(\\s)content(*\)("""(?:.|)content(\\n)content(\)*?"""\))delimiter(')>operator(,) ident(bygroups)operator(()ident(Text)operator(,) ident(String)operator(.)ident(Doc)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(")content(^()content(\\s)content(*\)('''(?:.|)content(\\n)content(\)*?'''\))delimiter(")>operator(,) ident(bygroups)operator(()ident(Text)operator(,) ident(String)operator(.)ident(Doc)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([^)content(\\S)content(\\n)content(]+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(#.*$)delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([]{}:(\),;[])delimiter(')>operator(,) ident(Punctuation)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\\\)content(\\n)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\\\)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((in|is|and|or|not\))content(\\b)delimiter(')>operator(,) ident(Operator)operator(.)ident(Word)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(!=|==|<<|>>|[-~+/*%=<>&^|.])delimiter(')>operator(,) ident(Operator)operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(keywords)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((def\)()content(\\s)content(+\))delimiter(')>operator(,) ident(bygroups)operator(()ident(Keyword)operator(,) ident(Text)operator(\))operator(,) string<delimiter(')content(funcname)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((class\)()content(\\s)content(+\))delimiter(')>operator(,) ident(bygroups)operator(()ident(Keyword)operator(,) ident(Text)operator(\))operator(,) string<delimiter(')content(classname)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((from\)()content(\\s)content(+\))delimiter(')>operator(,) ident(bygroups)operator(()ident(Keyword)operator(.)ident(Namespace)operator(,) ident(Text)operator(\))operator(,) string<delimiter(')content(fromimport)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((import\)()content(\\s)content(+\))delimiter(')>operator(,) ident(bygroups)operator(()ident(Keyword)operator(.)ident(Namespace)operator(,) ident(Text)operator(\))operator(,) string<delimiter(')content(import)delimiter(')>operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(builtins)delimiter(')>operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(backtick)delimiter(')>operator(\))operator(,)
            operator(()string<delimiter(')content((?:[rR]|[uU][rR]|[rR][uU]\)""")delimiter(')>operator(,) ident(String)operator(,) string<delimiter(')content(tdqs)delimiter(')>operator(\))operator(,)
            operator(()string<delimiter(")content((?:[rR]|[uU][rR]|[rR][uU]\)''')delimiter(")>operator(,) ident(String)operator(,) string<delimiter(')content(tsqs)delimiter(')>operator(\))operator(,)
            operator(()string<delimiter(')content((?:[rR]|[uU][rR]|[rR][uU]\)")delimiter(')>operator(,) ident(String)operator(,) string<delimiter(')content(dqs)delimiter(')>operator(\))operator(,)
            operator(()string<delimiter(")content((?:[rR]|[uU][rR]|[rR][uU]\)')delimiter(")>operator(,) ident(String)operator(,) string<delimiter(')content(sqs)delimiter(')>operator(\))operator(,)
            operator(()string<delimiter(')content([uU]?""")delimiter(')>operator(,) ident(String)operator(,) ident(combined)operator(()string<delimiter(')content(stringescape)delimiter(')>operator(,) string<delimiter(')content(tdqs)delimiter(')>operator(\))operator(\))operator(,)
            operator(()string<delimiter(")content([uU]?''')delimiter(")>operator(,) ident(String)operator(,) ident(combined)operator(()string<delimiter(')content(stringescape)delimiter(')>operator(,) string<delimiter(')content(tsqs)delimiter(')>operator(\))operator(\))operator(,)
            operator(()string<delimiter(')content([uU]?")delimiter(')>operator(,) ident(String)operator(,) ident(combined)operator(()string<delimiter(')content(stringescape)delimiter(')>operator(,) string<delimiter(')content(dqs)delimiter(')>operator(\))operator(\))operator(,)
            operator(()string<delimiter(")content([uU]?')delimiter(")>operator(,) ident(String)operator(,) ident(combined)operator(()string<delimiter(')content(stringescape)delimiter(')>operator(,) string<delimiter(')content(sqs)delimiter(')>operator(\))operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(name)delimiter(')>operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(numbers)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(keywords)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content((assert|break|continue|del|elif|else|except|exec|)delimiter(')>
             string<modifier(r)delimiter(')content(finally|for|global|if|lambda|pass|print|raise|)delimiter(')>
             string<modifier(r)delimiter(')content(return|try|while|yield|as|with\))content(\\b)delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(builtins)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content((?<!)content(\\.)content(\)(__import__|abs|all|any|apply|basestring|bin|bool|buffer|)delimiter(')>
             string<modifier(r)delimiter(')content(bytearray|bytes|callable|chr|classmethod|cmp|coerce|compile|)delimiter(')>
             string<modifier(r)delimiter(')content(complex|delattr|dict|dir|divmod|enumerate|eval|execfile|exit|)delimiter(')>
             string<modifier(r)delimiter(')content(file|filter|float|frozenset|getattr|globals|hasattr|hash|hex|id|)delimiter(')>
             string<modifier(r)delimiter(')content(input|int|intern|isinstance|issubclass|iter|len|list|locals|)delimiter(')>
             string<modifier(r)delimiter(')content(long|map|max|min|next|object|oct|open|ord|pow|property|range|)delimiter(')>
             string<modifier(r)delimiter(')content(raw_input|reduce|reload|repr|reversed|round|set|setattr|slice|)delimiter(')>
             string<modifier(r)delimiter(')content(sorted|staticmethod|str|sum|super|tuple|type|unichr|unicode|)delimiter(')>
             string<modifier(r)delimiter(')content(vars|xrange|zip\))content(\\b)delimiter(')>operator(,) ident(Name)operator(.)ident(Builtin)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((?<!)content(\\.)content(\)(self|None|Ellipsis|NotImplemented|False|True)delimiter(')>
             string<modifier(r)delimiter(')content(\))content(\\b)delimiter(')>operator(,) ident(Name)operator(.)ident(Builtin)operator(.)ident(Pseudo)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((?<!)content(\\.)content(\)(ArithmeticError|AssertionError|AttributeError|)delimiter(')>
             string<modifier(r)delimiter(')content(BaseException|DeprecationWarning|EOFError|EnvironmentError|)delimiter(')>
             string<modifier(r)delimiter(')content(Exception|FloatingPointError|FutureWarning|GeneratorExit|IOError|)delimiter(')>
             string<modifier(r)delimiter(')content(ImportError|ImportWarning|IndentationError|IndexError|KeyError|)delimiter(')>
             string<modifier(r)delimiter(')content(KeyboardInterrupt|LookupError|MemoryError|NameError|)delimiter(')>
             string<modifier(r)delimiter(')content(NotImplemented|NotImplementedError|OSError|OverflowError|)delimiter(')>
             string<modifier(r)delimiter(')content(OverflowWarning|PendingDeprecationWarning|ReferenceError|)delimiter(')>
             string<modifier(r)delimiter(')content(RuntimeError|RuntimeWarning|StandardError|StopIteration|)delimiter(')>
             string<modifier(r)delimiter(')content(SyntaxError|SyntaxWarning|SystemError|SystemExit|TabError|)delimiter(')>
             string<modifier(r)delimiter(')content(TypeError|UnboundLocalError|UnicodeDecodeError|)delimiter(')>
             string<modifier(r)delimiter(')content(UnicodeEncodeError|UnicodeError|UnicodeTranslateError|)delimiter(')>
             string<modifier(r)delimiter(')content(UnicodeWarning|UserWarning|ValueError|Warning|ZeroDivisionError)delimiter(')>
             string<modifier(r)delimiter(')content(\))content(\\b)delimiter(')>operator(,) ident(Name)operator(.)ident(Exception)operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(numbers)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(()content(\\d)content(+)content(\\.)content(\\d)content(*|)content(\\d)content(*)content(\\.)content(\\d)content(+\)([eE][+-]?[0-9]+\)?)delimiter(')>operator(,) ident(Number)operator(.)ident(Float)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\d)content(+[eE][+-]?[0-9]+)delimiter(')>operator(,) ident(Number)operator(.)ident(Float)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(0)content(\\d)content(+)delimiter(')>operator(,) ident(Number)operator(.)ident(Oct)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(0[xX][a-fA-F0-9]+)delimiter(')>operator(,) ident(Number)operator(.)ident(Hex)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\d)content(+L)delimiter(')>operator(,) ident(Number)operator(.)ident(Integer)operator(.)ident(Long)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\d)content(+)delimiter(')>operator(,) ident(Number)operator(.)ident(Integer)operator(\))
        operator(])operator(,)
        string<delimiter(')content(backtick)delimiter(')>operator(:) operator([)
            operator(()string<delimiter(')content(`.*?`)delimiter(')>operator(,) ident(String)operator(.)ident(Backtick)operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(name)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(@[a-zA-Z0-9_.]+)delimiter(')>operator(,) ident(Name)operator(.)ident(Decorator)operator(\))operator(,)
            operator(()string<delimiter(')content([a-zA-Z_][a-zA-Z0-9_]*)delimiter(')>operator(,) ident(Name)operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(funcname)delimiter(')>operator(:) operator([)
            operator(()string<delimiter(')content([a-zA-Z_][a-zA-Z0-9_]*)delimiter(')>operator(,) ident(Name)operator(.)ident(Function)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))
        operator(])operator(,)
        string<delimiter(')content(classname)delimiter(')>operator(:) operator([)
            operator(()string<delimiter(')content([a-zA-Z_][a-zA-Z0-9_]*)delimiter(')>operator(,) ident(Name)operator(.)ident(Class)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))
        operator(])operator(,)
        string<delimiter(')content(import)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(()content(\\s)content(+\)(as\)()content(\\s)content(+\))delimiter(')>operator(,) ident(bygroups)operator(()ident(Text)operator(,) ident(Keyword)operator(.)ident(Namespace)operator(,) ident(Text)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([a-zA-Z_][a-zA-Z0-9_.]*)delimiter(')>operator(,) ident(Name)operator(.)ident(Namespace)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(()content(\\s)content(*\)(,\)()content(\\s)content(*\))delimiter(')>operator(,) ident(bygroups)operator(()ident(Text)operator(,) ident(Operator)operator(,) ident(Text)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')delimiter(')>operator(,) ident(Text)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\)) comment(# all else: go back)
        operator(])operator(,)
        string<delimiter(')content(fromimport)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(()content(\\s)content(+\)(import\))content(\\b)delimiter(')>operator(,) ident(bygroups)operator(()ident(Text)operator(,) ident(Keyword)operator(.)ident(Namespace)operator(\))operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([a-zA-Z_.][a-zA-Z0-9_.]*)delimiter(')>operator(,) ident(Name)operator(.)ident(Namespace)operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(stringescape)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\\\)content(([)content(\\\\)content(abfnrtv")content(\\')content(]|)content(\\n)content(|N{.*?}|u[a-fA-F0-9]{4}|)delimiter(')>
             string<modifier(r)delimiter(')content(U[a-fA-F0-9]{8}|x[a-fA-F0-9]{2}|[0-7]{1,3}\))delimiter(')>operator(,) ident(String)operator(.)ident(Escape)operator(\))
        operator(])operator(,)
        string<delimiter(')content(strings)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(%()content(\\()content([a-zA-Z0-9_]+)content(\\\))content(\)?[-#0 +]*([0-9]+|[*]\)?()content(\\.)content(([0-9]+|[*]\)\)?)delimiter(')>
             string<delimiter(')content([hlL]?[diouxXeEfFgGcrs%])delimiter(')>operator(,) ident(String)operator(.)ident(Interpol)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([^)content(\\\\)content(\\')content("%)content(\\n)content(]+)delimiter(')>operator(,) ident(String)operator(\))operator(,)
            comment(# quotes, percents and backslashes must be parsed one at a time)
            operator(()string<modifier(r)delimiter(')content([)content(\\')content(")content(\\\\)content(])delimiter(')>operator(,) ident(String)operator(\))operator(,)
            comment(# unhandled string formatting sign)
            operator(()string<modifier(r)delimiter(')content(%)delimiter(')>operator(,) ident(String)operator(\))
            comment(# newlines are an error (use "nl" state\))
        operator(])operator(,)
        string<delimiter(')content(nl)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\n)delimiter(')>operator(,) ident(String)operator(\))
        operator(])operator(,)
        string<delimiter(')content(dqs)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(")delimiter(')>operator(,) ident(String)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\\\)content(\\\\)content(|)content(\\\\)content("|)content(\\\\)content(\\n)delimiter(')>operator(,) ident(String)operator(.)ident(Escape)operator(\))operator(,) comment(# included here again for raw strings)
            ident(include)operator(()string<delimiter(')content(strings)delimiter(')>operator(\))
        operator(])operator(,)
        string<delimiter(')content(sqs)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(")content(')delimiter(")>operator(,) ident(String)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(")content(\\\\)content(\\\\)content(|)content(\\\\)content('|)content(\\\\)content(\\n)delimiter(")>operator(,) ident(String)operator(.)ident(Escape)operator(\))operator(,) comment(# included here again for raw strings)
            ident(include)operator(()string<delimiter(')content(strings)delimiter(')>operator(\))
        operator(])operator(,)
        string<delimiter(')content(tdqs)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(""")delimiter(')>operator(,) ident(String)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(strings)delimiter(')>operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(nl)delimiter(')>operator(\))
        operator(])operator(,)
        string<delimiter(')content(tsqs)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(")content(''')delimiter(")>operator(,) ident(String)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(strings)delimiter(')>operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(nl)delimiter(')>operator(\))
        operator(])operator(,)
    operator(})

    keyword(def) method(analyse_text)operator(()ident(text)operator(\))operator(:)
        keyword(return) ident(shebang_matches)operator(()ident(text)operator(,) string<modifier(r)delimiter(')content(pythonw?(2)content(\\.)content(\\d)content(\)?)delimiter(')>operator(\))


keyword(class) class(Python3Lexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    For `Python <http://www.python.org>`_ source code (version 3.0\).)content(
)content(
)content(    *New in Pygments 0.10.*)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(Python 3)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(python3)delimiter(')>operator(,) string<delimiter(')content(py3)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)operator(])  comment(# Nothing until Python 3 gets widespread)
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(text/x-python3)delimiter(')>operator(,) string<delimiter(')content(application/x-python3)delimiter(')>operator(])

    ident(flags) operator(=) ident(re)operator(.)ident(MULTILINE) operator(|) ident(re)operator(.)ident(UNICODE)

    ident(uni_name) operator(=) string<delimiter(")content([%s][%s]*)delimiter(")> operator(%) operator(()ident(uni)operator(.)ident(xid_start)operator(,) ident(uni)operator(.)ident(xid_continue)operator(\))

    ident(tokens) operator(=) ident(PythonLexer)operator(.)ident(tokens)operator(.)ident(copy)operator(()operator(\))
    ident(tokens)operator([)string<delimiter(')content(keywords)delimiter(')>operator(]) operator(=) operator([)
        operator(()string<modifier(r)delimiter(')content((assert|break|continue|del|elif|else|except|)delimiter(')>
         string<modifier(r)delimiter(')content(finally|for|global|if|lambda|pass|raise|)delimiter(')>
         string<modifier(r)delimiter(')content(return|try|while|yield|as|with|True|False|None\))content(\\b)delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
    operator(])
    ident(tokens)operator([)string<delimiter(')content(builtins)delimiter(')>operator(]) operator(=) operator([)
        operator(()string<modifier(r)delimiter(')content((?<!)content(\\.)content(\)(__import__|abs|all|any|bin|bool|bytearray|bytes|)delimiter(')>
         string<modifier(r)delimiter(')content(chr|classmethod|cmp|compile|complex|delattr|dict|dir|)delimiter(')>
         string<modifier(r)delimiter(')content(divmod|enumerate|eval|filter|float|format|frozenset|getattr|)delimiter(')>
         string<modifier(r)delimiter(')content(globals|hasattr|hash|hex|id|input|int|isinstance|issubclass|)delimiter(')>
         string<modifier(r)delimiter(')content(iter|len|list|locals|map|max|memoryview|min|next|object|oct|)delimiter(')>
         string<modifier(r)delimiter(')content(open|ord|pow|print|property|range|repr|reversed|round|)delimiter(')>
         string<modifier(r)delimiter(')content(set|setattr|slice|sorted|staticmethod|str|sum|super|tuple|type|)delimiter(')>
         string<modifier(r)delimiter(')content(vars|zip\))content(\\b)delimiter(')>operator(,) ident(Name)operator(.)ident(Builtin)operator(\))operator(,)
        operator(()string<modifier(r)delimiter(')content((?<!)content(\\.)content(\)(self|Ellipsis|NotImplemented\))content(\\b)delimiter(')>operator(,) ident(Name)operator(.)ident(Builtin)operator(.)ident(Pseudo)operator(\))operator(,)
        operator(()string<modifier(r)delimiter(')content((?<!)content(\\.)content(\)(ArithmeticError|AssertionError|AttributeError|)delimiter(')>
         string<modifier(r)delimiter(')content(BaseException|BufferError|BytesWarning|DeprecationWarning|)delimiter(')>
         string<modifier(r)delimiter(')content(EOFError|EnvironmentError|Exception|FloatingPointError|)delimiter(')>
         string<modifier(r)delimiter(')content(FutureWarning|GeneratorExit|IOError|ImportError|)delimiter(')>
         string<modifier(r)delimiter(')content(ImportWarning|IndentationError|IndexError|KeyError|)delimiter(')>
         string<modifier(r)delimiter(')content(KeyboardInterrupt|LookupError|MemoryError|NameError|)delimiter(')>
         string<modifier(r)delimiter(')content(NotImplementedError|OSError|OverflowError|)delimiter(')>
         string<modifier(r)delimiter(')content(PendingDeprecationWarning|ReferenceError|)delimiter(')>
         string<modifier(r)delimiter(')content(RuntimeError|RuntimeWarning|StopIteration|)delimiter(')>
         string<modifier(r)delimiter(')content(SyntaxError|SyntaxWarning|SystemError|SystemExit|TabError|)delimiter(')>
         string<modifier(r)delimiter(')content(TypeError|UnboundLocalError|UnicodeDecodeError|)delimiter(')>
         string<modifier(r)delimiter(')content(UnicodeEncodeError|UnicodeError|UnicodeTranslateError|)delimiter(')>
         string<modifier(r)delimiter(')content(UnicodeWarning|UserWarning|ValueError|Warning|ZeroDivisionError)delimiter(')>
         string<modifier(r)delimiter(')content(\))content(\\b)delimiter(')>operator(,) ident(Name)operator(.)ident(Exception)operator(\))operator(,)
    operator(])
    ident(tokens)operator([)string<delimiter(')content(numbers)delimiter(')>operator(]) operator(=) operator([)
        operator(()string<modifier(r)delimiter(')content(()content(\\d)content(+)content(\\.)content(\\d)content(*|)content(\\d)content(*)content(\\.)content(\\d)content(+\)([eE][+-]?[0-9]+\)?)delimiter(')>operator(,) ident(Number)operator(.)ident(Float)operator(\))operator(,)
        operator(()string<modifier(r)delimiter(')content(0[oO][0-7]+)delimiter(')>operator(,) ident(Number)operator(.)ident(Oct)operator(\))operator(,)
        operator(()string<modifier(r)delimiter(')content(0[bB][01]+)delimiter(')>operator(,) ident(Number)operator(.)ident(Bin)operator(\))operator(,)
        operator(()string<modifier(r)delimiter(')content(0[xX][a-fA-F0-9]+)delimiter(')>operator(,) ident(Number)operator(.)ident(Hex)operator(\))operator(,)
        operator(()string<modifier(r)delimiter(')content(\\d)content(+)delimiter(')>operator(,) ident(Number)operator(.)ident(Integer)operator(\))
    operator(])
    ident(tokens)operator([)string<delimiter(')content(backtick)delimiter(')>operator(]) operator(=) operator([)operator(])
    ident(tokens)operator([)string<delimiter(')content(name)delimiter(')>operator(]) operator(=) operator([)
        operator(()string<modifier(r)delimiter(')content(@[a-zA-Z0-9_]+)delimiter(')>operator(,) ident(Name)operator(.)ident(Decorator)operator(\))operator(,)
        operator(()ident(uni_name)operator(,) ident(Name)operator(\))operator(,)
    operator(])
    ident(tokens)operator([)string<delimiter(')content(funcname)delimiter(')>operator(]) operator(=) operator([)
        operator(()ident(uni_name)operator(,) ident(Name)operator(.)ident(Function)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))
    operator(])
    ident(tokens)operator([)string<delimiter(')content(classname)delimiter(')>operator(]) operator(=) operator([)
        operator(()ident(uni_name)operator(,) ident(Name)operator(.)ident(Class)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))
    operator(])
    ident(tokens)operator([)string<delimiter(')content(import)delimiter(')>operator(]) operator(=) operator([)
        operator(()string<modifier(r)delimiter(')content(()content(\\s)content(+\)(as\)()content(\\s)content(+\))delimiter(')>operator(,) ident(bygroups)operator(()ident(Text)operator(,) ident(Keyword)operator(,) ident(Text)operator(\))operator(\))operator(,)
        operator(()string<modifier(r)delimiter(')content(\\.)delimiter(')>operator(,) ident(Name)operator(.)ident(Namespace)operator(\))operator(,)
        operator(()ident(uni_name)operator(,) ident(Name)operator(.)ident(Namespace)operator(\))operator(,)
        operator(()string<modifier(r)delimiter(')content(()content(\\s)content(*\)(,\)()content(\\s)content(*\))delimiter(')>operator(,) ident(bygroups)operator(()ident(Text)operator(,) ident(Operator)operator(,) ident(Text)operator(\))operator(\))operator(,)
        operator(()string<modifier(r)delimiter(')delimiter(')>operator(,) ident(Text)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\)) comment(# all else: go back)
    operator(])
    ident(tokens)operator([)string<delimiter(')content(fromimport)delimiter(')>operator(]) operator(=) operator([)
        operator(()string<modifier(r)delimiter(')content(()content(\\s)content(+\)(import\))content(\\b)delimiter(')>operator(,) ident(bygroups)operator(()ident(Text)operator(,) ident(Keyword)operator(\))operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
        operator(()string<modifier(r)delimiter(')content(\\.)delimiter(')>operator(,) ident(Name)operator(.)ident(Namespace)operator(\))operator(,)
        operator(()ident(uni_name)operator(,) ident(Name)operator(.)ident(Namespace)operator(\))operator(,)
    operator(])
    comment(# don't highlight "%s" substitutions)
    ident(tokens)operator([)string<delimiter(')content(strings)delimiter(')>operator(]) operator(=) operator([)
        operator(()string<modifier(r)delimiter(')content([^)content(\\\\)content(\\')content("%)content(\\n)content(]+)delimiter(')>operator(,) ident(String)operator(\))operator(,)
        comment(# quotes, percents and backslashes must be parsed one at a time)
        operator(()string<modifier(r)delimiter(')content([)content(\\')content(")content(\\\\)content(])delimiter(')>operator(,) ident(String)operator(\))operator(,)
        comment(# unhandled string formatting sign)
        operator(()string<modifier(r)delimiter(')content(%)delimiter(')>operator(,) ident(String)operator(\))
        comment(# newlines are an error (use "nl" state\))
    operator(])

    keyword(def) method(analyse_text)operator(()ident(text)operator(\))operator(:)
        keyword(return) ident(shebang_matches)operator(()ident(text)operator(,) string<modifier(r)delimiter(')content(pythonw?(3)content(\\.)content(\\d)content(\)?)delimiter(')>operator(\))


keyword(class) class(PythonConsoleLexer)operator(()ident(Lexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    For Python console output or doctests, such as:)content(
)content(
)content(    .. sourcecode:: pycon)content(
)content(
)content(        >>> a = 'foo')content(
)content(        >>> print a)content(
)content(        foo)content(
)content(        >>> 1 / 0)content(
)content(        Traceback (most recent call last\):)content(
)content(          File "<stdin>", line 1, in <module>)content(
)content(        ZeroDivisionError: integer division or modulo by zero)content(
)content(
)content(    Additional options:)content(
)content(
)content(    `python3`)content(
)content(        Use Python 3 lexer for code.  Default is ``False``.)content(
)content(        *New in Pygments 1.0.*)content(
)content(    )delimiter(""")>
    ident(name) operator(=) string<delimiter(')content(Python console session)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(pycon)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(text/x-python-doctest)delimiter(')>operator(])

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))operator(:)
        predefined_constant(self)operator(.)ident(python3) operator(=) ident(get_bool_opt)operator(()ident(options)operator(,) string<delimiter(')content(python3)delimiter(')>operator(,) predefined_constant(False)operator(\))
        ident(Lexer)operator(.)ident(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))

    keyword(def) method(get_tokens_unprocessed)operator(()predefined_constant(self)operator(,) ident(text)operator(\))operator(:)
        keyword(if) predefined_constant(self)operator(.)ident(python3)operator(:)
            ident(pylexer) operator(=) ident(Python3Lexer)operator(()operator(**)predefined_constant(self)operator(.)ident(options)operator(\))
            ident(tblexer) operator(=) ident(Python3TracebackLexer)operator(()operator(**)predefined_constant(self)operator(.)ident(options)operator(\))
        keyword(else)operator(:)
            ident(pylexer) operator(=) ident(PythonLexer)operator(()operator(**)predefined_constant(self)operator(.)ident(options)operator(\))
            ident(tblexer) operator(=) ident(PythonTracebackLexer)operator(()operator(**)predefined_constant(self)operator(.)ident(options)operator(\))

        ident(curcode) operator(=) string<delimiter(')delimiter(')>
        ident(insertions) operator(=) operator([)operator(])
        ident(curtb) operator(=) string<delimiter(')delimiter(')>
        ident(tbindex) operator(=) integer(0)
        ident(tb) operator(=) integer(0)
        keyword(for) ident(match) keyword(in) ident(line_re)operator(.)ident(finditer)operator(()ident(text)operator(\))operator(:)
            ident(line) operator(=) ident(match)operator(.)ident(group)operator(()operator(\))
            keyword(if) ident(line)operator(.)ident(startswith)operator(()string<delimiter(')content(>>> )delimiter(')>operator(\)) keyword(or) ident(line)operator(.)ident(startswith)operator(()string<delimiter(')content(... )delimiter(')>operator(\))operator(:)
                ident(tb) operator(=) integer(0)
                ident(insertions)operator(.)ident(append)operator(()operator(()predefined(len)operator(()ident(curcode)operator(\))operator(,)
                                   operator([)operator(()integer(0)operator(,) ident(Generic)operator(.)ident(Prompt)operator(,) ident(line)operator([)operator(:)integer(4)operator(])operator(\))operator(])operator(\))operator(\))
                ident(curcode) operator(+=) ident(line)operator([)integer(4)operator(:)operator(])
            keyword(elif) ident(line)operator(.)ident(rstrip)operator(()operator(\)) operator(==) string<delimiter(')content(...)delimiter(')>operator(:)
                ident(tb) operator(=) integer(0)
                ident(insertions)operator(.)ident(append)operator(()operator(()predefined(len)operator(()ident(curcode)operator(\))operator(,)
                                   operator([)operator(()integer(0)operator(,) ident(Generic)operator(.)ident(Prompt)operator(,) string<delimiter(')content(...)delimiter(')>operator(\))operator(])operator(\))operator(\))
                ident(curcode) operator(+=) ident(line)operator([)integer(3)operator(:)operator(])
            keyword(else)operator(:)
                keyword(if) ident(curcode)operator(:)
                    keyword(for) ident(item) keyword(in) ident(do_insertions)operator(()ident(insertions)operator(,)
                                    ident(pylexer)operator(.)ident(get_tokens_unprocessed)operator(()ident(curcode)operator(\))operator(\))operator(:)
                        keyword(yield) ident(item)
                    ident(curcode) operator(=) string<delimiter(')delimiter(')>
                    ident(insertions) operator(=) operator([)operator(])
                keyword(if) operator(()ident(line)operator(.)ident(startswith)operator(()string<delimiter(')content(Traceback (most recent call last\):)delimiter(')>operator(\)) keyword(or)
                    ident(re)operator(.)ident(match)operator(()string<modifier(r)delimiter(')content(  File "[^"]+", line )content(\\d)content(+)content(\\n)content($)delimiter(')>operator(,) ident(line)operator(\))operator(\))operator(:)
                    ident(tb) operator(=) integer(1)
                    ident(curtb) operator(=) ident(line)
                    ident(tbindex) operator(=) ident(match)operator(.)ident(start)operator(()operator(\))
                keyword(elif) ident(line) operator(==) string<delimiter(')content(KeyboardInterrupt)char(\\n)delimiter(')>operator(:)
                    keyword(yield) ident(match)operator(.)ident(start)operator(()operator(\))operator(,) ident(Name)operator(.)ident(Class)operator(,) ident(line)
                keyword(elif) ident(tb)operator(:)
                    ident(curtb) operator(+=) ident(line)
                    keyword(if) keyword(not) operator(()ident(line)operator(.)ident(startswith)operator(()string<delimiter(')content( )delimiter(')>operator(\)) keyword(or) ident(line)operator(.)ident(strip)operator(()operator(\)) operator(==) string<delimiter(')content(...)delimiter(')>operator(\))operator(:)
                        ident(tb) operator(=) integer(0)
                        keyword(for) ident(i)operator(,) ident(t)operator(,) ident(v) keyword(in) ident(tblexer)operator(.)ident(get_tokens_unprocessed)operator(()ident(curtb)operator(\))operator(:)
                            keyword(yield) ident(tbindex)operator(+)ident(i)operator(,) ident(t)operator(,) ident(v)
                keyword(else)operator(:)
                    keyword(yield) ident(match)operator(.)ident(start)operator(()operator(\))operator(,) ident(Generic)operator(.)ident(Output)operator(,) ident(line)
        keyword(if) ident(curcode)operator(:)
            keyword(for) ident(item) keyword(in) ident(do_insertions)operator(()ident(insertions)operator(,)
                                      ident(pylexer)operator(.)ident(get_tokens_unprocessed)operator(()ident(curcode)operator(\))operator(\))operator(:)
                keyword(yield) ident(item)


keyword(class) class(PythonTracebackLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    For Python tracebacks.)content(
)content(
)content(    *New in Pygments 0.7.*)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(Python Traceback)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(pytb)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.pytb)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(text/x-python-traceback)delimiter(')>operator(])

    ident(tokens) operator(=) operator({)
        string<delimiter(')content(root)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(^Traceback )content(\\()content(most recent call last)content(\\\))content(:)content(\\n)delimiter(')>operator(,) ident(Generic)operator(.)ident(Traceback)operator(,) string<delimiter(')content(intb)delimiter(')>operator(\))operator(,)
            comment(# SyntaxError starts with this.)
            operator(()string<modifier(r)delimiter(')content(^(?=  File "[^"]+", line )content(\\d)content(+)content(\\n)content(\))delimiter(')>operator(,) ident(Generic)operator(.)ident(Traceback)operator(,) string<delimiter(')content(intb)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(intb)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(^(  File \)("[^"]+"\)(, line \)()content(\\d)content(+\)(, in \)(.+\)()content(\\n)content(\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Text)operator(,) ident(Name)operator(.)ident(Builtin)operator(,) ident(Text)operator(,) ident(Number)operator(,) ident(Text)operator(,) ident(Name)operator(.)ident(Identifier)operator(,) ident(Text)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(^(  File \)("[^"]+"\)(, line \)()content(\\d)content(+\)()content(\\n)content(\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Text)operator(,) ident(Name)operator(.)ident(Builtin)operator(,) ident(Text)operator(,) ident(Number)operator(,) ident(Text)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(^(    \)(.+\)()content(\\n)content(\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Text)operator(,) ident(using)operator(()ident(PythonLexer)operator(\))operator(,) ident(Text)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(^([ )content(\\t)content(]*\)(...\)()content(\\n)content(\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Text)operator(,) ident(Comment)operator(,) ident(Text)operator(\))operator(\))operator(,) comment(# for doctests...)
            operator(()string<modifier(r)delimiter(')content(^(.+\)(: \)(.+\)()content(\\n)content(\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Name)operator(.)ident(Class)operator(,) ident(Text)operator(,) ident(Name)operator(.)ident(Identifier)operator(,) ident(Text)operator(\))operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(^([a-zA-Z_][a-zA-Z0-9_]*\)(:?)content(\\n)content(\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Name)operator(.)ident(Class)operator(,) ident(Text)operator(\))operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))
        operator(])operator(,)
    operator(})


keyword(class) class(Python3TracebackLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    For Python 3.0 tracebacks, with support for chained exceptions.)content(
)content(
)content(    *New in Pygments 1.0.*)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(Python 3.0 Traceback)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(py3tb)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.py3tb)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(text/x-python3-traceback)delimiter(')>operator(])

    ident(tokens) operator(=) operator({)
        string<delimiter(')content(root)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\n)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(^Traceback )content(\\()content(most recent call last)content(\\\))content(:)content(\\n)delimiter(')>operator(,) ident(Generic)operator(.)ident(Traceback)operator(,) string<delimiter(')content(intb)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(^During handling of the above exception, another )delimiter(')>
             string<modifier(r)delimiter(')content(exception occurred:)content(\\n)content(\\n)delimiter(')>operator(,) ident(Generic)operator(.)ident(Traceback)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(^The above exception was the direct cause of the )delimiter(')>
             string<modifier(r)delimiter(')content(following exception:)content(\\n)content(\\n)delimiter(')>operator(,) ident(Generic)operator(.)ident(Traceback)operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(intb)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(^(  File \)("[^"]+"\)(, line \)()content(\\d)content(+\)(, in \)(.+\)()content(\\n)content(\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Text)operator(,) ident(Name)operator(.)ident(Builtin)operator(,) ident(Text)operator(,) ident(Number)operator(,) ident(Text)operator(,) ident(Name)operator(.)ident(Identifier)operator(,) ident(Text)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(^(    \)(.+\)()content(\\n)content(\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Text)operator(,) ident(using)operator(()ident(Python3Lexer)operator(\))operator(,) ident(Text)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(^([ )content(\\t)content(]*\)(...\)()content(\\n)content(\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Text)operator(,) ident(Comment)operator(,) ident(Text)operator(\))operator(\))operator(,) comment(# for doctests...)
            operator(()string<modifier(r)delimiter(')content(^(.+\)(: \)(.+\)()content(\\n)content(\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Name)operator(.)ident(Class)operator(,) ident(Text)operator(,) ident(Name)operator(.)ident(Identifier)operator(,) ident(Text)operator(\))operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(^([a-zA-Z_][a-zA-Z0-9_]*\)(:?)content(\\n)content(\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Name)operator(.)ident(Class)operator(,) ident(Text)operator(\))operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))
        operator(])operator(,)
    operator(})


keyword(class) class(RubyLexer)operator(()ident(ExtendedRegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    For `Ruby <http://www.ruby-lang.org>`_ source code.)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(Ruby)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(rb)delimiter(')>operator(,) string<delimiter(')content(ruby)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.rb)delimiter(')>operator(,) string<delimiter(')content(*.rbw)delimiter(')>operator(,) string<delimiter(')content(Rakefile)delimiter(')>operator(,) string<delimiter(')content(*.rake)delimiter(')>operator(,) string<delimiter(')content(*.gemspec)delimiter(')>operator(,) string<delimiter(')content(*.rbx)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(text/x-ruby)delimiter(')>operator(,) string<delimiter(')content(application/x-ruby)delimiter(')>operator(])

    ident(flags) operator(=) ident(re)operator(.)ident(DOTALL) operator(|) ident(re)operator(.)ident(MULTILINE)

    keyword(def) method(heredoc_callback)operator(()predefined_constant(self)operator(,) ident(match)operator(,) ident(ctx)operator(\))operator(:)
        comment(# okay, this is the hardest part of parsing Ruby...)
        comment(# match: 1 = <<-?, 2 = quote? 3 = name 4 = quote? 5 = rest of line)

        ident(start) operator(=) ident(match)operator(.)ident(start)operator(()integer(1)operator(\))
        keyword(yield) ident(start)operator(,) ident(Operator)operator(,) ident(match)operator(.)ident(group)operator(()integer(1)operator(\))        comment(# <<-?)
        keyword(yield) ident(match)operator(.)ident(start)operator(()integer(2)operator(\))operator(,) ident(String)operator(.)ident(Heredoc)operator(,) ident(match)operator(.)ident(group)operator(()integer(2)operator(\))  comment(# quote ", ', `)
        keyword(yield) ident(match)operator(.)ident(start)operator(()integer(3)operator(\))operator(,) ident(Name)operator(.)ident(Constant)operator(,) ident(match)operator(.)ident(group)operator(()integer(3)operator(\))   comment(# heredoc name)
        keyword(yield) ident(match)operator(.)ident(start)operator(()integer(4)operator(\))operator(,) ident(String)operator(.)ident(Heredoc)operator(,) ident(match)operator(.)ident(group)operator(()integer(4)operator(\))  comment(# quote again)

        ident(heredocstack) operator(=) ident(ctx)operator(.)ident(__dict__)operator(.)ident(setdefault)operator(()string<delimiter(')content(heredocstack)delimiter(')>operator(,) operator([)operator(])operator(\))
        ident(outermost) operator(=) keyword(not) predefined(bool)operator(()ident(heredocstack)operator(\))
        ident(heredocstack)operator(.)ident(append)operator(()operator(()ident(match)operator(.)ident(group)operator(()integer(1)operator(\)) operator(==) string<delimiter(')content(<<-)delimiter(')>operator(,) ident(match)operator(.)ident(group)operator(()integer(3)operator(\))operator(\))operator(\))

        ident(ctx)operator(.)ident(pos) operator(=) ident(match)operator(.)ident(start)operator(()integer(5)operator(\))
        ident(ctx)operator(.)ident(end) operator(=) ident(match)operator(.)ident(end)operator(()integer(5)operator(\))
        comment(# this may find other heredocs)
        keyword(for) ident(i)operator(,) ident(t)operator(,) ident(v) keyword(in) predefined_constant(self)operator(.)ident(get_tokens_unprocessed)operator(()ident(context)operator(=)ident(ctx)operator(\))operator(:)
            keyword(yield) ident(i)operator(,) ident(t)operator(,) ident(v)
        ident(ctx)operator(.)ident(pos) operator(=) ident(match)operator(.)ident(end)operator(()operator(\))

        keyword(if) ident(outermost)operator(:)
            comment(# this is the outer heredoc again, now we can process them all)
            keyword(for) ident(tolerant)operator(,) ident(hdname) keyword(in) ident(heredocstack)operator(:)
                ident(lines) operator(=) operator([)operator(])
                keyword(for) ident(match) keyword(in) ident(line_re)operator(.)ident(finditer)operator(()ident(ctx)operator(.)ident(text)operator(,) ident(ctx)operator(.)ident(pos)operator(\))operator(:)
                    keyword(if) ident(tolerant)operator(:)
                        ident(check) operator(=) ident(match)operator(.)ident(group)operator(()operator(\))operator(.)ident(strip)operator(()operator(\))
                    keyword(else)operator(:)
                        ident(check) operator(=) ident(match)operator(.)ident(group)operator(()operator(\))operator(.)ident(rstrip)operator(()operator(\))
                    keyword(if) ident(check) operator(==) ident(hdname)operator(:)
                        keyword(for) ident(amatch) keyword(in) ident(lines)operator(:)
                            keyword(yield) ident(amatch)operator(.)ident(start)operator(()operator(\))operator(,) ident(String)operator(.)ident(Heredoc)operator(,) ident(amatch)operator(.)ident(group)operator(()operator(\))
                        keyword(yield) ident(match)operator(.)ident(start)operator(()operator(\))operator(,) ident(Name)operator(.)ident(Constant)operator(,) ident(match)operator(.)ident(group)operator(()operator(\))
                        ident(ctx)operator(.)ident(pos) operator(=) ident(match)operator(.)ident(end)operator(()operator(\))
                        keyword(break)
                    keyword(else)operator(:)
                        ident(lines)operator(.)ident(append)operator(()ident(match)operator(\))
                keyword(else)operator(:)
                    comment(# end of heredoc not found -- error!)
                    keyword(for) ident(amatch) keyword(in) ident(lines)operator(:)
                        keyword(yield) ident(amatch)operator(.)ident(start)operator(()operator(\))operator(,) ident(Error)operator(,) ident(amatch)operator(.)ident(group)operator(()operator(\))
            ident(ctx)operator(.)ident(end) operator(=) predefined(len)operator(()ident(ctx)operator(.)ident(text)operator(\))
            keyword(del) ident(heredocstack)operator([)operator(:)operator(])


    keyword(def) method(gen_rubystrings_rules)operator(()operator(\))operator(:)
        keyword(def) method(intp_regex_callback)operator(()predefined_constant(self)operator(,) ident(match)operator(,) ident(ctx)operator(\))operator(:)
            keyword(yield) ident(match)operator(.)ident(start)operator(()integer(1)operator(\))operator(,) ident(String)operator(.)ident(Regex)operator(,) ident(match)operator(.)ident(group)operator(()integer(1)operator(\))    comment(# begin)
            ident(nctx) operator(=) ident(LexerContext)operator(()ident(match)operator(.)ident(group)operator(()integer(3)operator(\))operator(,) integer(0)operator(,) operator([)string<delimiter(')content(interpolated-regex)delimiter(')>operator(])operator(\))
            keyword(for) ident(i)operator(,) ident(t)operator(,) ident(v) keyword(in) predefined_constant(self)operator(.)ident(get_tokens_unprocessed)operator(()ident(context)operator(=)ident(nctx)operator(\))operator(:)
                keyword(yield) ident(match)operator(.)ident(start)operator(()integer(3)operator(\))operator(+)ident(i)operator(,) ident(t)operator(,) ident(v)
            keyword(yield) ident(match)operator(.)ident(start)operator(()integer(4)operator(\))operator(,) ident(String)operator(.)ident(Regex)operator(,) ident(match)operator(.)ident(group)operator(()integer(4)operator(\))    comment(# end[mixounse]*)
            ident(ctx)operator(.)ident(pos) operator(=) ident(match)operator(.)ident(end)operator(()operator(\))

        keyword(def) method(intp_string_callback)operator(()predefined_constant(self)operator(,) ident(match)operator(,) ident(ctx)operator(\))operator(:)
            keyword(yield) ident(match)operator(.)ident(start)operator(()integer(1)operator(\))operator(,) ident(String)operator(.)ident(Other)operator(,) ident(match)operator(.)ident(group)operator(()integer(1)operator(\))
            ident(nctx) operator(=) ident(LexerContext)operator(()ident(match)operator(.)ident(group)operator(()integer(3)operator(\))operator(,) integer(0)operator(,) operator([)string<delimiter(')content(interpolated-string)delimiter(')>operator(])operator(\))
            keyword(for) ident(i)operator(,) ident(t)operator(,) ident(v) keyword(in) predefined_constant(self)operator(.)ident(get_tokens_unprocessed)operator(()ident(context)operator(=)ident(nctx)operator(\))operator(:)
                keyword(yield) ident(match)operator(.)ident(start)operator(()integer(3)operator(\))operator(+)ident(i)operator(,) ident(t)operator(,) ident(v)
            keyword(yield) ident(match)operator(.)ident(start)operator(()integer(4)operator(\))operator(,) ident(String)operator(.)ident(Other)operator(,) ident(match)operator(.)ident(group)operator(()integer(4)operator(\))    comment(# end)
            ident(ctx)operator(.)ident(pos) operator(=) ident(match)operator(.)ident(end)operator(()operator(\))

        ident(states) operator(=) operator({)operator(})
        ident(states)operator([)string<delimiter(')content(strings)delimiter(')>operator(]) operator(=) operator([)
            comment(# easy ones)
            operator(()string<modifier(r)delimiter(')content(\\:)content(([a-zA-Z_][)content(\\w)content(_]*[)content(\\!)content(\\?)content(]?|)content(\\*)content(\\*)content(?|[-+]@?|)delimiter(')>
             string<modifier(r)delimiter(')content([/%&|^`~]|)content(\\[)content(\\])content(=?|<<|>>|<=?>|>=?|===?\))delimiter(')>operator(,) ident(String)operator(.)ident(Symbol)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(")content(:'()content(\\\\)content(\\\\)content(|)content(\\\\)content('|[^']\)*')delimiter(")>operator(,) ident(String)operator(.)ident(Symbol)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(")content('()content(\\\\)content(\\\\)content(|)content(\\\\)content('|[^']\)*')delimiter(")>operator(,) ident(String)operator(.)ident(Single)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(:")delimiter(')>operator(,) ident(String)operator(.)ident(Symbol)operator(,) string<delimiter(')content(simple-sym)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(")delimiter(')>operator(,) ident(String)operator(.)ident(Double)operator(,) string<delimiter(')content(simple-string)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((?<!)content(\\.)content(\)`)delimiter(')>operator(,) ident(String)operator(.)ident(Backtick)operator(,) string<delimiter(')content(simple-backtick)delimiter(')>operator(\))operator(,)
        operator(])

        comment(# double-quoted string and symbol)
        keyword(for) ident(name)operator(,) ident(ttype)operator(,) ident(end) keyword(in) operator(()string<delimiter(')content(string)delimiter(')>operator(,) ident(String)operator(.)ident(Double)operator(,) string<delimiter(')content(")delimiter(')>operator(\))operator(,) \
                                operator(()string<delimiter(')content(sym)delimiter(')>operator(,) ident(String)operator(.)ident(Symbol)operator(,) string<delimiter(')content(")delimiter(')>operator(\))operator(,) \
                                operator(()string<delimiter(')content(backtick)delimiter(')>operator(,) ident(String)operator(.)ident(Backtick)operator(,) string<delimiter(')content(`)delimiter(')>operator(\))operator(:)
            ident(states)operator([)string<delimiter(')content(simple-)delimiter(')>operator(+)ident(name)operator(]) operator(=) operator([)
                ident(include)operator(()string<delimiter(')content(string-intp-escaped)delimiter(')>operator(\))operator(,)
                operator(()string<modifier(r)delimiter(')content([^)content(\\\\)content(%s#]+)delimiter(')> operator(%) ident(end)operator(,) ident(ttype)operator(\))operator(,)
                operator(()string<modifier(r)delimiter(')content([)content(\\\\)content(#])delimiter(')>operator(,) ident(ttype)operator(\))operator(,)
                operator(()ident(end)operator(,) ident(ttype)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(])

        comment(# braced quoted strings)
        keyword(for) ident(lbrace)operator(,) ident(rbrace)operator(,) ident(name) keyword(in) operator(()string<delimiter(')char(\\\\)content({)delimiter(')>operator(,) string<delimiter(')char(\\\\)content(})delimiter(')>operator(,) string<delimiter(')content(cb)delimiter(')>operator(\))operator(,) \
                                    operator(()string<delimiter(')char(\\\\)content([)delimiter(')>operator(,) string<delimiter(')char(\\\\)content(])delimiter(')>operator(,) string<delimiter(')content(sb)delimiter(')>operator(\))operator(,) \
                                    operator(()string<delimiter(')char(\\\\)content(()delimiter(')>operator(,) string<delimiter(')char(\\\\)content(\))delimiter(')>operator(,) string<delimiter(')content(pa)delimiter(')>operator(\))operator(,) \
                                    operator(()string<delimiter(')content(<)delimiter(')>operator(,) string<delimiter(')content(>)delimiter(')>operator(,) string<delimiter(')content(ab)delimiter(')>operator(\))operator(:)
            ident(states)operator([)ident(name)operator(+)string<delimiter(')content(-intp-string)delimiter(')>operator(]) operator(=) operator([)
                operator(()string<modifier(r)delimiter(')content(\\\\)content([)content(\\\\)delimiter(')> operator(+) ident(lbrace) operator(+) ident(rbrace) operator(+) string<delimiter(')content(])delimiter(')>operator(,) ident(String)operator(.)ident(Other)operator(\))operator(,)
                operator(()string<modifier(r)delimiter(')content((?<!)content(\\\\)content(\))delimiter(')> operator(+) ident(lbrace)operator(,) ident(String)operator(.)ident(Other)operator(,) string<delimiter(')content(#push)delimiter(')>operator(\))operator(,)
                operator(()string<modifier(r)delimiter(')content((?<!)content(\\\\)content(\))delimiter(')> operator(+) ident(rbrace)operator(,) ident(String)operator(.)ident(Other)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
                ident(include)operator(()string<delimiter(')content(string-intp-escaped)delimiter(')>operator(\))operator(,)
                operator(()string<modifier(r)delimiter(')content([)content(\\\\)content(#)delimiter(')> operator(+) ident(lbrace) operator(+) ident(rbrace) operator(+) string<delimiter(')content(])delimiter(')>operator(,) ident(String)operator(.)ident(Other)operator(\))operator(,)
                operator(()string<modifier(r)delimiter(')content([^)content(\\\\)content(#)delimiter(')> operator(+) ident(lbrace) operator(+) ident(rbrace) operator(+) string<delimiter(')content(]+)delimiter(')>operator(,) ident(String)operator(.)ident(Other)operator(\))operator(,)
            operator(])
            ident(states)operator([)string<delimiter(')content(strings)delimiter(')>operator(])operator(.)ident(append)operator(()operator(()string<modifier(r)delimiter(')content(%[QWx]?)delimiter(')> operator(+) ident(lbrace)operator(,) ident(String)operator(.)ident(Other)operator(,)
                                      ident(name)operator(+)string<delimiter(')content(-intp-string)delimiter(')>operator(\))operator(\))
            ident(states)operator([)ident(name)operator(+)string<delimiter(')content(-string)delimiter(')>operator(]) operator(=) operator([)
                operator(()string<modifier(r)delimiter(')content(\\\\)content([)content(\\\\)delimiter(')> operator(+) ident(lbrace) operator(+) ident(rbrace) operator(+) string<delimiter(')content(])delimiter(')>operator(,) ident(String)operator(.)ident(Other)operator(\))operator(,)
                operator(()string<modifier(r)delimiter(')content((?<!)content(\\\\)content(\))delimiter(')> operator(+) ident(lbrace)operator(,) ident(String)operator(.)ident(Other)operator(,) string<delimiter(')content(#push)delimiter(')>operator(\))operator(,)
                operator(()string<modifier(r)delimiter(')content((?<!)content(\\\\)content(\))delimiter(')> operator(+) ident(rbrace)operator(,) ident(String)operator(.)ident(Other)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
                operator(()string<modifier(r)delimiter(')content([)content(\\\\)content(#)delimiter(')> operator(+) ident(lbrace) operator(+) ident(rbrace) operator(+) string<delimiter(')content(])delimiter(')>operator(,) ident(String)operator(.)ident(Other)operator(\))operator(,)
                operator(()string<modifier(r)delimiter(')content([^)content(\\\\)content(#)delimiter(')> operator(+) ident(lbrace) operator(+) ident(rbrace) operator(+) string<delimiter(')content(]+)delimiter(')>operator(,) ident(String)operator(.)ident(Other)operator(\))operator(,)
            operator(])
            ident(states)operator([)string<delimiter(')content(strings)delimiter(')>operator(])operator(.)ident(append)operator(()operator(()string<modifier(r)delimiter(')content(%[qsw])delimiter(')> operator(+) ident(lbrace)operator(,) ident(String)operator(.)ident(Other)operator(,)
                                      ident(name)operator(+)string<delimiter(')content(-string)delimiter(')>operator(\))operator(\))
            ident(states)operator([)ident(name)operator(+)string<delimiter(')content(-regex)delimiter(')>operator(]) operator(=) operator([)
                operator(()string<modifier(r)delimiter(')content(\\\\)content([)content(\\\\)delimiter(')> operator(+) ident(lbrace) operator(+) ident(rbrace) operator(+) string<delimiter(')content(])delimiter(')>operator(,) ident(String)operator(.)ident(Regex)operator(\))operator(,)
                operator(()string<modifier(r)delimiter(')content((?<!)content(\\\\)content(\))delimiter(')> operator(+) ident(lbrace)operator(,) ident(String)operator(.)ident(Regex)operator(,) string<delimiter(')content(#push)delimiter(')>operator(\))operator(,)
                operator(()string<modifier(r)delimiter(')content((?<!)content(\\\\)content(\))delimiter(')> operator(+) ident(rbrace) operator(+) string<delimiter(')content([mixounse]*)delimiter(')>operator(,) ident(String)operator(.)ident(Regex)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
                ident(include)operator(()string<delimiter(')content(string-intp)delimiter(')>operator(\))operator(,)
                operator(()string<modifier(r)delimiter(')content([)content(\\\\)content(#)delimiter(')> operator(+) ident(lbrace) operator(+) ident(rbrace) operator(+) string<delimiter(')content(])delimiter(')>operator(,) ident(String)operator(.)ident(Regex)operator(\))operator(,)
                operator(()string<modifier(r)delimiter(')content([^)content(\\\\)content(#)delimiter(')> operator(+) ident(lbrace) operator(+) ident(rbrace) operator(+) string<delimiter(')content(]+)delimiter(')>operator(,) ident(String)operator(.)ident(Regex)operator(\))operator(,)
            operator(])
            ident(states)operator([)string<delimiter(')content(strings)delimiter(')>operator(])operator(.)ident(append)operator(()operator(()string<modifier(r)delimiter(')content(%r)delimiter(')> operator(+) ident(lbrace)operator(,) ident(String)operator(.)ident(Regex)operator(,)
                                      ident(name)operator(+)string<delimiter(')content(-regex)delimiter(')>operator(\))operator(\))

        comment(# these must come after %<brace>!)
        ident(states)operator([)string<delimiter(')content(strings)delimiter(')>operator(]) operator(+=) operator([)
            comment(# %r regex)
            operator(()string<modifier(r)delimiter(')content((%r([^a-zA-Z0-9]\)\)([^)content(\\2)content(\\\\)content(]*(?:)content(\\\\)content(.[^)content(\\2)content(\\\\)content(]*\)*\)()content(\\2)content([mixounse]*\))delimiter(')>operator(,)
             ident(intp_regex_callback)operator(\))operator(,)
            comment(# regular fancy strings with qsw)
            operator(()string<modifier(r)delimiter(')content(%[qsw]([^a-zA-Z0-9]\)([^)content(\\1)content(\\\\)content(]*(?:)content(\\\\)content(.[^)content(\\1)content(\\\\)content(]*\)*\))content(\\1)delimiter(')>operator(,) ident(String)operator(.)ident(Other)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((%[QWx]([^a-zA-Z0-9]\)\)([^)content(\\2)content(\\\\)content(]*(?:)content(\\\\)content(.[^)content(\\2)content(\\\\)content(]*\)*\)()content(\\2)content(\))delimiter(')>operator(,)
             ident(intp_string_callback)operator(\))operator(,)
            comment(# special forms of fancy strings after operators or)
            comment(# in method calls with braces)
            operator(()string<modifier(r)delimiter(')content((?<=[-+/*%=<>&!^|~,(]\)()content(\\s)content(*\)(%([)content(\\t)content( ]\)(?:[^)content(\\3)content(\\\\)content(]*(?:)content(\\\\)content(.[^)content(\\3)content(\\\\)content(]*\)*\))content(\\3)content(\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Text)operator(,) ident(String)operator(.)ident(Other)operator(,) predefined_constant(None)operator(\))operator(\))operator(,)
            comment(# and because of fixed with lookbehinds the whole thing a)
            comment(# second time for line startings...)
            operator(()string<modifier(r)delimiter(')content(^()content(\\s)content(*\)(%([)content(\\t)content( ]\)(?:[^)content(\\3)content(\\\\)content(]*(?:)content(\\\\)content(.[^)content(\\3)content(\\\\)content(]*\)*\))content(\\3)content(\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Text)operator(,) ident(String)operator(.)ident(Other)operator(,) predefined_constant(None)operator(\))operator(\))operator(,)
            comment(# all regular fancy strings without qsw)
            operator(()string<modifier(r)delimiter(')content((%([^a-zA-Z0-9)content(\\s)content(]\)\)([^)content(\\2)content(\\\\)content(]*(?:)content(\\\\)content(.[^)content(\\2)content(\\\\)content(]*\)*\)()content(\\2)content(\))delimiter(')>operator(,)
             ident(intp_string_callback)operator(\))operator(,)
        operator(])

        keyword(return) ident(states)

    ident(tokens) operator(=) operator({)
        string<delimiter(')content(root)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(#.*?$)delimiter(')>operator(,) ident(Comment)operator(.)ident(Single)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(=begin)content(\\s)content(.*?)content(\\n)content(=end)delimiter(')>operator(,) ident(Comment)operator(.)ident(Multiline)operator(\))operator(,)
            comment(# keywords)
            operator(()string<modifier(r)delimiter(')content((BEGIN|END|alias|begin|break|case|defined)content(\\?)content(|)delimiter(')>
             string<modifier(r)delimiter(')content(do|else|elsif|end|ensure|for|if|in|next|redo|)delimiter(')>
             string<modifier(r)delimiter(')content(rescue|raise|retry|return|super|then|undef|unless|until|when|)delimiter(')>
             string<modifier(r)delimiter(')content(while|yield\))content(\\b)delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
            comment(# start of function, class and module names)
            operator(()string<modifier(r)delimiter(')content((module\)()content(\\s)content(+\)([a-zA-Z_][a-zA-Z0-9_]*(::[a-zA-Z_][a-zA-Z0-9_]*\)*\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Keyword)operator(,) ident(Text)operator(,) ident(Name)operator(.)ident(Namespace)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((def\)()content(\\s)content(+\))delimiter(')>operator(,) ident(bygroups)operator(()ident(Keyword)operator(,) ident(Text)operator(\))operator(,) string<delimiter(')content(funcname)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(def(?=[*%&^`~+-/)content(\\[)content(<>=]\))delimiter(')>operator(,) ident(Keyword)operator(,) string<delimiter(')content(funcname)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((class\)()content(\\s)content(+\))delimiter(')>operator(,) ident(bygroups)operator(()ident(Keyword)operator(,) ident(Text)operator(\))operator(,) string<delimiter(')content(classname)delimiter(')>operator(\))operator(,)
            comment(# special methods)
            operator(()string<modifier(r)delimiter(')content((initialize|new|loop|include|extend|raise|attr_reader|)delimiter(')>
             string<modifier(r)delimiter(')content(attr_writer|attr_accessor|attr|catch|throw|private|)delimiter(')>
             string<modifier(r)delimiter(')content(module_function|public|protected|true|false|nil\))content(\\b)delimiter(')>operator(,) ident(Keyword)operator(.)ident(Pseudo)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((not|and|or\))content(\\b)delimiter(')>operator(,) ident(Operator)operator(.)ident(Word)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((autoload|block_given|const_defined|eql|equal|frozen|include|)delimiter(')>
             string<modifier(r)delimiter(')content(instance_of|is_a|iterator|kind_of|method_defined|nil|)delimiter(')>
             string<modifier(r)delimiter(')content(private_method_defined|protected_method_defined|)delimiter(')>
             string<modifier(r)delimiter(')content(public_method_defined|respond_to|tainted\))content(\\?)delimiter(')>operator(,) ident(Name)operator(.)ident(Builtin)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((chomp|chop|exit|gsub|sub\)!)delimiter(')>operator(,) ident(Name)operator(.)ident(Builtin)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((?<!)content(\\.)content(\)(Array|Float|Integer|String|__id__|__send__|abort|ancestors|)delimiter(')>
             string<modifier(r)delimiter(')content(at_exit|autoload|binding|callcc|caller|)delimiter(')>
             string<modifier(r)delimiter(')content(catch|chomp|chop|class_eval|class_variables|)delimiter(')>
             string<modifier(r)delimiter(')content(clone|const_defined)content(\\?)content(|const_get|const_missing|const_set|constants|)delimiter(')>
             string<modifier(r)delimiter(')content(display|dup|eval|exec|exit|extend|fail|fork|)delimiter(')>
             string<modifier(r)delimiter(')content(format|freeze|getc|gets|global_variables|gsub|)delimiter(')>
             string<modifier(r)delimiter(')content(hash|id|included_modules|inspect|instance_eval|)delimiter(')>
             string<modifier(r)delimiter(')content(instance_method|instance_methods|)delimiter(')>
             string<modifier(r)delimiter(')content(instance_variable_get|instance_variable_set|instance_variables|)delimiter(')>
             string<modifier(r)delimiter(')content(lambda|load|local_variables|loop|)delimiter(')>
             string<modifier(r)delimiter(')content(method|method_missing|methods|module_eval|name|)delimiter(')>
             string<modifier(r)delimiter(')content(object_id|open|p|print|printf|private_class_method|)delimiter(')>
             string<modifier(r)delimiter(')content(private_instance_methods|)delimiter(')>
             string<modifier(r)delimiter(')content(private_methods|proc|protected_instance_methods|)delimiter(')>
             string<modifier(r)delimiter(')content(protected_methods|public_class_method|)delimiter(')>
             string<modifier(r)delimiter(')content(public_instance_methods|public_methods|)delimiter(')>
             string<modifier(r)delimiter(')content(putc|puts|raise|rand|readline|readlines|require|)delimiter(')>
             string<modifier(r)delimiter(')content(scan|select|self|send|set_trace_func|singleton_methods|sleep|)delimiter(')>
             string<modifier(r)delimiter(')content(split|sprintf|srand|sub|syscall|system|taint|)delimiter(')>
             string<modifier(r)delimiter(')content(test|throw|to_a|to_s|trace_var|trap|type|untaint|untrace_var|)delimiter(')>
             string<modifier(r)delimiter(')content(warn\))content(\\b)delimiter(')>operator(,) ident(Name)operator(.)ident(Builtin)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(__(FILE|LINE\)__)content(\\b)delimiter(')>operator(,) ident(Name)operator(.)ident(Builtin)operator(.)ident(Pseudo)operator(\))operator(,)
            comment(# normal heredocs)
            operator(()string<modifier(r)delimiter(')content((?<!)content(\\w)content(\)(<<-?\)(["`)content(\\')content(]?\)([a-zA-Z_])content(\\w)content(*\)()content(\\2)content(\)(.*?)content(\\n)content(\))delimiter(')>operator(,) ident(heredoc_callback)operator(\))operator(,)
            comment(# empty string heredocs)
            operator(()string<modifier(r)delimiter(')content((<<-?\)("|)content(\\')content(\)(\)()content(\\2)content(\)(.*?)content(\\n)content(\))delimiter(')>operator(,) ident(heredoc_callback)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(__END__)delimiter(')>operator(,) ident(Comment)operator(.)ident(Preproc)operator(,) string<delimiter(')content(end-part)delimiter(')>operator(\))operator(,)
            comment(# multiline regex (after keywords or assignemnts\))
            operator(()string<modifier(r)delimiter(')content((?:^|(?<=[=<>~!]\)|)delimiter(')>
                 string<modifier(r)delimiter(')content((?<=(?:)content(\\s)content(|;\)when)content(\\s)content(\)|)delimiter(')>
                 string<modifier(r)delimiter(')content((?<=(?:)content(\\s)content(|;\)or)content(\\s)content(\)|)delimiter(')>
                 string<modifier(r)delimiter(')content((?<=(?:)content(\\s)content(|;\)and)content(\\s)content(\)|)delimiter(')>
                 string<modifier(r)delimiter(')content((?<=(?:)content(\\s)content(|;|)content(\\.)content(\)index)content(\\s)content(\)|)delimiter(')>
                 string<modifier(r)delimiter(')content((?<=(?:)content(\\s)content(|;|)content(\\.)content(\)scan)content(\\s)content(\)|)delimiter(')>
                 string<modifier(r)delimiter(')content((?<=(?:)content(\\s)content(|;|)content(\\.)content(\)sub)content(\\s)content(\)|)delimiter(')>
                 string<modifier(r)delimiter(')content((?<=(?:)content(\\s)content(|;|)content(\\.)content(\)sub!)content(\\s)content(\)|)delimiter(')>
                 string<modifier(r)delimiter(')content((?<=(?:)content(\\s)content(|;|)content(\\.)content(\)gsub)content(\\s)content(\)|)delimiter(')>
                 string<modifier(r)delimiter(')content((?<=(?:)content(\\s)content(|;|)content(\\.)content(\)gsub!)content(\\s)content(\)|)delimiter(')>
                 string<modifier(r)delimiter(')content((?<=(?:)content(\\s)content(|;|)content(\\.)content(\)match)content(\\s)content(\)|)delimiter(')>
                 string<modifier(r)delimiter(')content((?<=(?:)content(\\s)content(|;\)if)content(\\s)content(\)|)delimiter(')>
                 string<modifier(r)delimiter(')content((?<=(?:)content(\\s)content(|;\)elsif)content(\\s)content(\)|)delimiter(')>
                 string<modifier(r)delimiter(')content((?<=^when)content(\\s)content(\)|)delimiter(')>
                 string<modifier(r)delimiter(')content((?<=^index)content(\\s)content(\)|)delimiter(')>
                 string<modifier(r)delimiter(')content((?<=^scan)content(\\s)content(\)|)delimiter(')>
                 string<modifier(r)delimiter(')content((?<=^sub)content(\\s)content(\)|)delimiter(')>
                 string<modifier(r)delimiter(')content((?<=^gsub)content(\\s)content(\)|)delimiter(')>
                 string<modifier(r)delimiter(')content((?<=^sub!)content(\\s)content(\)|)delimiter(')>
                 string<modifier(r)delimiter(')content((?<=^gsub!)content(\\s)content(\)|)delimiter(')>
                 string<modifier(r)delimiter(')content((?<=^match)content(\\s)content(\)|)delimiter(')>
                 string<modifier(r)delimiter(')content((?<=^if)content(\\s)content(\)|)delimiter(')>
                 string<modifier(r)delimiter(')content((?<=^elsif)content(\\s)content(\))delimiter(')>
             string<modifier(r)delimiter(')content(\)()content(\\s)content(*\)(/\)(?!=\))delimiter(')>operator(,) ident(bygroups)operator(()ident(Text)operator(,) ident(String)operator(.)ident(Regex)operator(\))operator(,) string<delimiter(')content(multiline-regex)delimiter(')>operator(\))operator(,)
            comment(# multiline regex (in method calls\))
            operator(()string<modifier(r)delimiter(')content((?<=)content(\\()content(|,\)/)delimiter(')>operator(,) ident(String)operator(.)ident(Regex)operator(,) string<delimiter(')content(multiline-regex)delimiter(')>operator(\))operator(,)
            comment(# multiline regex (this time the funny no whitespace rule\))
            operator(()string<modifier(r)delimiter(')content(()content(\\s)content(+\)(/[^)content(\\s)content(=]\))delimiter(')>operator(,) ident(String)operator(.)ident(Regex)operator(,) string<delimiter(')content(multiline-regex)delimiter(')>operator(\))operator(,)
            comment(# lex numbers and ignore following regular expressions which)
            comment(# are division operators in fact (grrrr. i hate that. any)
            comment(# better ideas?\))
            comment(# since pygments 0.7 we also eat a "?" operator after numbers)
            comment(# so that the char operator does not work. Chars are not allowed)
            comment(# there so that you can use the terner operator.)
            comment(# stupid example:)
            comment(#   x>=0?n[x]:"")
            operator(()string<modifier(r)delimiter(')content((0_?[0-7]+(?:_[0-7]+\)*\)()content(\\s)content(*\)([/?]\)?)delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Number)operator(.)ident(Oct)operator(,) ident(Text)operator(,) ident(Operator)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((0x[0-9A-Fa-f]+(?:_[0-9A-Fa-f]+\)*\)()content(\\s)content(*\)([/?]\)?)delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Number)operator(.)ident(Hex)operator(,) ident(Text)operator(,) ident(Operator)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((0b[01]+(?:_[01]+\)*\)()content(\\s)content(*\)([/?]\)?)delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Number)operator(.)ident(Bin)operator(,) ident(Text)operator(,) ident(Operator)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(([)content(\\d)content(]+(?:_)content(\\d)content(+\)*\)()content(\\s)content(*\)([/?]\)?)delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Number)operator(.)ident(Integer)operator(,) ident(Text)operator(,) ident(Operator)operator(\))operator(\))operator(,)
            comment(# Names)
            operator(()string<modifier(r)delimiter(')content(@@[a-zA-Z_][a-zA-Z0-9_]*)delimiter(')>operator(,) ident(Name)operator(.)ident(Variable)operator(.)ident(Class)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(@[a-zA-Z_][a-zA-Z0-9_]*)delimiter(')>operator(,) ident(Name)operator(.)ident(Variable)operator(.)ident(Instance)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\$)content([a-zA-Z0-9_]+)delimiter(')>operator(,) ident(Name)operator(.)ident(Variable)operator(.)ident(Global)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\$)content([!@&`)content(\\')content(+~=/)content(\\\\)content(,;.<>_*$?:"])delimiter(')>operator(,) ident(Name)operator(.)ident(Variable)operator(.)ident(Global)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\$)content(-[0adFiIlpvw])delimiter(')>operator(,) ident(Name)operator(.)ident(Variable)operator(.)ident(Global)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(::)delimiter(')>operator(,) ident(Operator)operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(strings)delimiter(')>operator(\))operator(,)
            comment(# chars)
            operator(()string<modifier(r)delimiter(')content(\\?)content(()content(\\\\)content([MC]-\)*)delimiter(')> comment(# modifiers)
             string<modifier(r)delimiter(')content(()content(\\\\)content(([)content(\\\\)content(abefnrstv#")content(\\')content(]|x[a-fA-F0-9]{1,2}|[0-7]{1,3}\)|)content(\\S)content(\))delimiter(')>
             string<modifier(r)delimiter(')content((?!)content(\\w)content(\))delimiter(')>operator(,)
             ident(String)operator(.)ident(Char)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([A-Z][a-zA-Z0-9_]+)delimiter(')>operator(,) ident(Name)operator(.)ident(Constant)operator(\))operator(,)
            comment(# this is needed because ruby attributes can look)
            comment(# like keywords (class\) or like this: ` ?!?)
            operator(()string<modifier(r)delimiter(')content(()content(\\.)content(|::\)([a-zA-Z_])content(\\w)content(*[)content(\\!)content(\\?)content(]?|[*%&^`~+-/)content(\\[)content(<>=]\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Operator)operator(,) ident(Name)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([a-zA-Z_][)content(\\w)content(_]*[)content(\\!)content(\\?)content(]?)delimiter(')>operator(,) ident(Name)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(()content(\\[)content(|)content(\\])content(|)content(\\*)content(\\*)content(|<<?|>>?|>=|<=|<=>|=~|={3}|)delimiter(')>
             string<modifier(r)delimiter(')content(!~|&&?|)content(\\|)content(\\|)content(|)content(\\.)content({1,3}\))delimiter(')>operator(,) ident(Operator)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([-+/*%=<>&!^|~]=?)delimiter(')>operator(,) ident(Operator)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([(\){};,/?:)content(\\\\)content(])delimiter(')>operator(,) ident(Punctuation)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\s)content(+)delimiter(')>operator(,) ident(Text)operator(\))
        operator(])operator(,)
        string<delimiter(')content(funcname)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\()delimiter(')>operator(,) ident(Punctuation)operator(,) string<delimiter(')content(defexpr)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((?:([a-zA-Z_][a-zA-Z0-9_]*\)()content(\\.)content(\)\)?)delimiter(')>
             string<modifier(r)delimiter(')content(([a-zA-Z_][)content(\\w)content(_]*[)content(\\!)content(\\?)content(]?|)content(\\*)content(\\*)content(?|[-+]@?|)delimiter(')>
             string<modifier(r)delimiter(')content([/%&|^`~]|)content(\\[)content(\\])content(=?|<<|>>|<=?>|>=?|===?\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Name)operator(.)ident(Class)operator(,) ident(Operator)operator(,) ident(Name)operator(.)ident(Function)operator(\))operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')delimiter(')>operator(,) ident(Text)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))
        operator(])operator(,)
        string<delimiter(')content(classname)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\()delimiter(')>operator(,) ident(Punctuation)operator(,) string<delimiter(')content(defexpr)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(<<)delimiter(')>operator(,) ident(Operator)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([A-Z_][)content(\\w)content(_]*)delimiter(')>operator(,) ident(Name)operator(.)ident(Class)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')delimiter(')>operator(,) ident(Text)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))
        operator(])operator(,)
        string<delimiter(')content(defexpr)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(()content(\\\))content(\)()content(\\.)content(|::\)?)delimiter(')>operator(,) ident(bygroups)operator(()ident(Punctuation)operator(,) ident(Operator)operator(\))operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\()delimiter(')>operator(,) ident(Operator)operator(,) string<delimiter(')content(#push)delimiter(')>operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(root)delimiter(')>operator(\))
        operator(])operator(,)
        string<delimiter(')content(in-intp)delimiter(')>operator(:) operator([)
            operator(()string<delimiter(')content(})delimiter(')>operator(,) ident(String)operator(.)ident(Interpol)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(root)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(string-intp)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(#{)delimiter(')>operator(,) ident(String)operator(.)ident(Interpol)operator(,) string<delimiter(')content(in-intp)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(#@@?[a-zA-Z_][a-zA-Z0-9_]*)delimiter(')>operator(,) ident(String)operator(.)ident(Interpol)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(#)content(\\$)content([a-zA-Z_][a-zA-Z0-9_]*)delimiter(')>operator(,) ident(String)operator(.)ident(Interpol)operator(\))
        operator(])operator(,)
        string<delimiter(')content(string-intp-escaped)delimiter(')>operator(:) operator([)
            ident(include)operator(()string<delimiter(')content(string-intp)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\\\)content(([)content(\\\\)content(abefnrstv#")content(\\')content(]|x[a-fA-F0-9]{1,2}|[0-7]{1,3}\))delimiter(')>operator(,) ident(String)operator(.)ident(Escape)operator(\))
        operator(])operator(,)
        string<delimiter(')content(interpolated-regex)delimiter(')>operator(:) operator([)
            ident(include)operator(()string<delimiter(')content(string-intp)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([)content(\\\\)content(#])delimiter(')>operator(,) ident(String)operator(.)ident(Regex)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([^)content(\\\\)content(#]+)delimiter(')>operator(,) ident(String)operator(.)ident(Regex)operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(interpolated-string)delimiter(')>operator(:) operator([)
            ident(include)operator(()string<delimiter(')content(string-intp)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([)content(\\\\)content(#])delimiter(')>operator(,) ident(String)operator(.)ident(Other)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([^)content(\\\\)content(#]+)delimiter(')>operator(,) ident(String)operator(.)ident(Other)operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(multiline-regex)delimiter(')>operator(:) operator([)
            ident(include)operator(()string<delimiter(')content(string-intp)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\\\)content(/)delimiter(')>operator(,) ident(String)operator(.)ident(Regex)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([)content(\\\\)content(#])delimiter(')>operator(,) ident(String)operator(.)ident(Regex)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([^)content(\\\\)content(/#]+)delimiter(')>operator(,) ident(String)operator(.)ident(Regex)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(/[mixounse]*)delimiter(')>operator(,) ident(String)operator(.)ident(Regex)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(end-part)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(.+)delimiter(')>operator(,) ident(Comment)operator(.)ident(Preproc)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))
        operator(])
    operator(})
    ident(tokens)operator(.)ident(update)operator(()ident(gen_rubystrings_rules)operator(()operator(\))operator(\))

    keyword(def) method(analyse_text)operator(()ident(text)operator(\))operator(:)
        keyword(return) ident(shebang_matches)operator(()ident(text)operator(,) string<modifier(r)delimiter(')content(ruby(1)content(\\.)content(\\d)content(\)?)delimiter(')>operator(\))


keyword(class) class(RubyConsoleLexer)operator(()ident(Lexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    For Ruby interactive console (**irb**\) output like:)content(
)content(
)content(    .. sourcecode:: rbcon)content(
)content(
)content(        irb(main\):001:0> a = 1)content(
)content(        => 1)content(
)content(        irb(main\):002:0> puts a)content(
)content(        1)content(
)content(        => nil)content(
)content(    )delimiter(""")>
    ident(name) operator(=) string<delimiter(')content(Ruby irb session)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(rbcon)delimiter(')>operator(,) string<delimiter(')content(irb)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(text/x-ruby-shellsession)delimiter(')>operator(])

    ident(_prompt_re) operator(=) ident(re)operator(.)ident(compile)operator(()string<delimiter(')content(irb)content(\\()content([a-zA-Z_][a-zA-Z0-9_]*)content(\\\))content(:)content(\\d)content({3}:)content(\\d)content(+[>*")char(\\')content(] )delimiter(')>
                            string<delimiter(')content(|>> |)content(\\?)content(> )delimiter(')>operator(\))

    keyword(def) method(get_tokens_unprocessed)operator(()predefined_constant(self)operator(,) ident(text)operator(\))operator(:)
        ident(rblexer) operator(=) ident(RubyLexer)operator(()operator(**)predefined_constant(self)operator(.)ident(options)operator(\))

        ident(curcode) operator(=) string<delimiter(')delimiter(')>
        ident(insertions) operator(=) operator([)operator(])
        keyword(for) ident(match) keyword(in) ident(line_re)operator(.)ident(finditer)operator(()ident(text)operator(\))operator(:)
            ident(line) operator(=) ident(match)operator(.)ident(group)operator(()operator(\))
            ident(m) operator(=) predefined_constant(self)operator(.)ident(_prompt_re)operator(.)ident(match)operator(()ident(line)operator(\))
            keyword(if) ident(m) keyword(is) keyword(not) predefined_constant(None)operator(:)
                ident(end) operator(=) ident(m)operator(.)ident(end)operator(()operator(\))
                ident(insertions)operator(.)ident(append)operator(()operator(()predefined(len)operator(()ident(curcode)operator(\))operator(,)
                                   operator([)operator(()integer(0)operator(,) ident(Generic)operator(.)ident(Prompt)operator(,) ident(line)operator([)operator(:)ident(end)operator(])operator(\))operator(])operator(\))operator(\))
                ident(curcode) operator(+=) ident(line)operator([)ident(end)operator(:)operator(])
            keyword(else)operator(:)
                keyword(if) ident(curcode)operator(:)
                    keyword(for) ident(item) keyword(in) ident(do_insertions)operator(()ident(insertions)operator(,)
                                    ident(rblexer)operator(.)ident(get_tokens_unprocessed)operator(()ident(curcode)operator(\))operator(\))operator(:)
                        keyword(yield) ident(item)
                    ident(curcode) operator(=) string<delimiter(')delimiter(')>
                    ident(insertions) operator(=) operator([)operator(])
                keyword(yield) ident(match)operator(.)ident(start)operator(()operator(\))operator(,) ident(Generic)operator(.)ident(Output)operator(,) ident(line)
        keyword(if) ident(curcode)operator(:)
            keyword(for) ident(item) keyword(in) ident(do_insertions)operator(()ident(insertions)operator(,)
                                      ident(rblexer)operator(.)ident(get_tokens_unprocessed)operator(()ident(curcode)operator(\))operator(\))operator(:)
                keyword(yield) ident(item)


keyword(class) class(PerlLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    For `Perl <http://www.perl.org>`_ source code.)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(Perl)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(perl)delimiter(')>operator(,) string<delimiter(')content(pl)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.pl)delimiter(')>operator(,) string<delimiter(')content(*.pm)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(text/x-perl)delimiter(')>operator(,) string<delimiter(')content(application/x-perl)delimiter(')>operator(])

    ident(flags) operator(=) ident(re)operator(.)ident(DOTALL) operator(|) ident(re)operator(.)ident(MULTILINE)
    comment(# TODO: give this a perl guy who knows how to parse perl...)
    ident(tokens) operator(=) operator({)
        string<delimiter(')content(balanced-regex)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(/()content(\\\\)content(\\\\)content(|)content(\\\\)content(/|[^/]\)*/[egimosx]*)delimiter(')>operator(,) ident(String)operator(.)ident(Regex)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(!()content(\\\\)content(\\\\)content(|)content(\\\\)content(!|[^!]\)*![egimosx]*)delimiter(')>operator(,) ident(String)operator(.)ident(Regex)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\\\)content(()content(\\\\)content(\\\\)content(|[^)content(\\\\)content(]\)*)content(\\\\)content([egimosx]*)delimiter(')>operator(,) ident(String)operator(.)ident(Regex)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content({()content(\\\\)content(\\\\)content(|)content(\\\\)content(}|[^}]\)*}[egimosx]*)delimiter(')>operator(,) ident(String)operator(.)ident(Regex)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(<()content(\\\\)content(\\\\)content(|)content(\\\\)content(>|[^>]\)*>[egimosx]*)delimiter(')>operator(,) ident(String)operator(.)ident(Regex)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\[)content(()content(\\\\)content(\\\\)content(|)content(\\\\)content(\\])content(|[^)content(\\])content(]\)*)content(\\])content([egimosx]*)delimiter(')>operator(,) ident(String)operator(.)ident(Regex)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\()content(()content(\\\\)content(\\\\)content(|)content(\\\\)content(\\\))content(|[^)content(\\\))content(]\)*)content(\\\))content([egimosx]*)delimiter(')>operator(,) ident(String)operator(.)ident(Regex)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(@()content(\\\\)content(\\\\)content(|)content(\\\\)content(\\@)content(|[^)content(\\@)content(]\)*@[egimosx]*)delimiter(')>operator(,) ident(String)operator(.)ident(Regex)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(%()content(\\\\)content(\\\\)content(|)content(\\\\)content(\\%)content(|[^)content(\\%)content(]\)*%[egimosx]*)delimiter(')>operator(,) ident(String)operator(.)ident(Regex)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\$)content(()content(\\\\)content(\\\\)content(|)content(\\\\)content(\\$)content(|[^)content(\\$)content(]\)*)content(\\$)content([egimosx]*)delimiter(')>operator(,) ident(String)operator(.)ident(Regex)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(!()content(\\\\)content(\\\\)content(|)content(\\\\)content(!|[^!]\)*![egimosx]*)delimiter(')>operator(,) ident(String)operator(.)ident(Regex)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(root)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\#)content(.*?$)delimiter(')>operator(,) ident(Comment)operator(.)ident(Single)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(^=[a-zA-Z0-9]+)content(\\s)content(+.*?)content(\\n)content(=cut)delimiter(')>operator(,) ident(Comment)operator(.)ident(Multiline)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((case|continue|do|else|elsif|for|foreach|if|last|my|)delimiter(')>
             string<modifier(r)delimiter(')content(next|our|redo|reset|then|unless|until|while|use|)delimiter(')>
             string<modifier(r)delimiter(')content(print|new|BEGIN|END|return\))content(\\b)delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((format\)()content(\\s)content(+\)([a-zA-Z0-9_]+\)()content(\\s)content(*\)(=\)()content(\\s)content(*)content(\\n)content(\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Keyword)operator(,) ident(Text)operator(,) ident(Name)operator(,) ident(Text)operator(,) ident(Punctuation)operator(,) ident(Text)operator(\))operator(,) string<delimiter(')content(format)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((eq|lt|gt|le|ge|ne|not|and|or|cmp\))content(\\b)delimiter(')>operator(,) ident(Operator)operator(.)ident(Word)operator(\))operator(,)
            comment(# common delimiters)
            operator(()string<modifier(r)delimiter(')content(s/()content(\\\\)content(\\\\)content(|)content(\\\\)content(/|[^/]\)*/()content(\\\\)content(\\\\)content(|)content(\\\\)content(/|[^/]\)*/[egimosx]*)delimiter(')>operator(,) ident(String)operator(.)ident(Regex)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(s!()content(\\\\)content(\\\\)content(|)content(\\\\)content(!|[^!]\)*!()content(\\\\)content(\\\\)content(|)content(\\\\)content(!|[^!]\)*![egimosx]*)delimiter(')>operator(,) ident(String)operator(.)ident(Regex)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(s)content(\\\\)content(()content(\\\\)content(\\\\)content(|[^)content(\\\\)content(]\)*)content(\\\\)content(()content(\\\\)content(\\\\)content(|[^)content(\\\\)content(]\)*)content(\\\\)content([egimosx]*)delimiter(')>operator(,) ident(String)operator(.)ident(Regex)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(s@()content(\\\\)content(\\\\)content(|)content(\\\\)content(@|[^@]\)*@()content(\\\\)content(\\\\)content(|)content(\\\\)content(@|[^@]\)*@[egimosx]*)delimiter(')>operator(,) ident(String)operator(.)ident(Regex)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(s%()content(\\\\)content(\\\\)content(|)content(\\\\)content(%|[^%]\)*%()content(\\\\)content(\\\\)content(|)content(\\\\)content(%|[^%]\)*%[egimosx]*)delimiter(')>operator(,) ident(String)operator(.)ident(Regex)operator(\))operator(,)
            comment(# balanced delimiters)
            operator(()string<modifier(r)delimiter(')content(s{()content(\\\\)content(\\\\)content(|)content(\\\\)content(}|[^}]\)*})content(\\s)content(*)delimiter(')>operator(,) ident(String)operator(.)ident(Regex)operator(,) string<delimiter(')content(balanced-regex)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(s<()content(\\\\)content(\\\\)content(|)content(\\\\)content(>|[^>]\)*>)content(\\s)content(*)delimiter(')>operator(,) ident(String)operator(.)ident(Regex)operator(,) string<delimiter(')content(balanced-regex)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(s)content(\\[)content(()content(\\\\)content(\\\\)content(|)content(\\\\)content(\\])content(|[^)content(\\])content(]\)*)content(\\])content(\\s)content(*)delimiter(')>operator(,) ident(String)operator(.)ident(Regex)operator(,) string<delimiter(')content(balanced-regex)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(s)content(\\()content(()content(\\\\)content(\\\\)content(|)content(\\\\)content(\\\))content(|[^)content(\\\))content(]\)*)content(\\\))content(\\s)content(*)delimiter(')>operator(,) ident(String)operator(.)ident(Regex)operator(,) string<delimiter(')content(balanced-regex)delimiter(')>operator(\))operator(,)

            operator(()string<modifier(r)delimiter(')content(m?/()content(\\\\)content(\\\\)content(|)content(\\\\)content(/|[^/)content(\\n)content(]\)*/[gcimosx]*)delimiter(')>operator(,) ident(String)operator(.)ident(Regex)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(((?<==~\)|(?<=)content(\\()content(\)\))content(\\s)content(*/()content(\\\\)content(\\\\)content(|)content(\\\\)content(/|[^/]\)*/[gcimosx]*)delimiter(')>operator(,) ident(String)operator(.)ident(Regex)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\s)content(+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((abs|accept|alarm|atan2|bind|binmode|bless|caller|chdir|)delimiter(')>
             string<modifier(r)delimiter(')content(chmod|chomp|chop|chown|chr|chroot|close|closedir|connect|)delimiter(')>
             string<modifier(r)delimiter(')content(continue|cos|crypt|dbmclose|dbmopen|defined|delete|die|)delimiter(')>
             string<modifier(r)delimiter(')content(dump|each|endgrent|endhostent|endnetent|endprotoent|)delimiter(')>
             string<modifier(r)delimiter(')content(endpwent|endservent|eof|eval|exec|exists|exit|exp|fcntl|)delimiter(')>
             string<modifier(r)delimiter(')content(fileno|flock|fork|format|formline|getc|getgrent|getgrgid|)delimiter(')>
             string<modifier(r)delimiter(')content(getgrnam|gethostbyaddr|gethostbyname|gethostent|getlogin|)delimiter(')>
             string<modifier(r)delimiter(')content(getnetbyaddr|getnetbyname|getnetent|getpeername|getpgrp|)delimiter(')>
             string<modifier(r)delimiter(')content(getppid|getpriority|getprotobyname|getprotobynumber|)delimiter(')>
             string<modifier(r)delimiter(')content(getprotoent|getpwent|getpwnam|getpwuid|getservbyname|)delimiter(')>
             string<modifier(r)delimiter(')content(getservbyport|getservent|getsockname|getsockopt|glob|gmtime|)delimiter(')>
             string<modifier(r)delimiter(')content(goto|grep|hex|import|index|int|ioctl|join|keys|kill|last|)delimiter(')>
             string<modifier(r)delimiter(')content(lc|lcfirst|length|link|listen|local|localtime|log|lstat|)delimiter(')>
             string<modifier(r)delimiter(')content(map|mkdir|msgctl|msgget|msgrcv|msgsnd|my|next|no|oct|open|)delimiter(')>
             string<modifier(r)delimiter(')content(opendir|ord|our|pack|package|pipe|pop|pos|printf|)delimiter(')>
             string<modifier(r)delimiter(')content(prototype|push|quotemeta|rand|read|readdir|)delimiter(')>
             string<modifier(r)delimiter(')content(readline|readlink|readpipe|recv|redo|ref|rename|require|)delimiter(')>
             string<modifier(r)delimiter(')content(reverse|rewinddir|rindex|rmdir|scalar|seek|seekdir|)delimiter(')>
             string<modifier(r)delimiter(')content(select|semctl|semget|semop|send|setgrent|sethostent|setnetent|)delimiter(')>
             string<modifier(r)delimiter(')content(setpgrp|setpriority|setprotoent|setpwent|setservent|)delimiter(')>
             string<modifier(r)delimiter(')content(setsockopt|shift|shmctl|shmget|shmread|shmwrite|shutdown|)delimiter(')>
             string<modifier(r)delimiter(')content(sin|sleep|socket|socketpair|sort|splice|split|sprintf|sqrt|)delimiter(')>
             string<modifier(r)delimiter(')content(srand|stat|study|substr|symlink|syscall|sysopen|sysread|)delimiter(')>
             string<modifier(r)delimiter(')content(sysseek|system|syswrite|tell|telldir|tie|tied|time|times|tr|)delimiter(')>
             string<modifier(r)delimiter(')content(truncate|uc|ucfirst|umask|undef|unlink|unpack|unshift|untie|)delimiter(')>
             string<modifier(r)delimiter(')content(utime|values|vec|wait|waitpid|wantarray|warn|write)delimiter(')>
             string<modifier(r)delimiter(')content(\))content(\\b)delimiter(')>operator(,) ident(Name)operator(.)ident(Builtin)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(((__(DATA|DIE|WARN\)__\)|(STD(IN|OUT|ERR\)\)\))content(\\b)delimiter(')>operator(,) ident(Name)operator(.)ident(Builtin)operator(.)ident(Pseudo)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(<<([a-zA-Z_][a-zA-Z0-9_]*\);?)content(\\n)content(.*?)content(\\n)content(\\1)content(\\n)delimiter(')>operator(,) ident(String)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(__END__)delimiter(')>operator(,) ident(Comment)operator(.)ident(Preproc)operator(,) string<delimiter(')content(end-part)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\$)content(\\^)content([ADEFHILMOPSTWX])delimiter(')>operator(,) ident(Name)operator(.)ident(Variable)operator(.)ident(Global)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(")content(\\$)content([)content(\\\\)content(\\")content(\\[)content(\\])content('&`+*.,;=%~?@$!<>(^|/-](?!)content(\\w)content(\))delimiter(")>operator(,) ident(Name)operator(.)ident(Variable)operator(.)ident(Global)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([$@%#]+)delimiter(')>operator(,) ident(Name)operator(.)ident(Variable)operator(,) string<delimiter(')content(varname)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(0_?[0-7]+(_[0-7]+\)*)delimiter(')>operator(,) ident(Number)operator(.)ident(Oct)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(0x[0-9A-Fa-f]+(_[0-9A-Fa-f]+\)*)delimiter(')>operator(,) ident(Number)operator(.)ident(Hex)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(0b[01]+(_[01]+\)*)delimiter(')>operator(,) ident(Number)operator(.)ident(Bin)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\d)content(+)delimiter(')>operator(,) ident(Number)operator(.)ident(Integer)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(")content('()content(\\\\)content(\\\\)content(|)content(\\\\)content('|[^']\)*')delimiter(")>operator(,) ident(String)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content("()content(\\\\)content(\\\\)content(|)content(\\\\)content("|[^"]\)*")delimiter(')>operator(,) ident(String)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(`()content(\\\\)content(\\\\)content(|)content(\\\\)content(`|[^`]\)*`)delimiter(')>operator(,) ident(String)operator(.)ident(Backtick)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(<([^)content(\\s)content(>]+\)>)delimiter(')>operator(,) ident(String)operator(.)ident(Regexp)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((q|qq|qw|qr|qx\))content(\\{)delimiter(')>operator(,) ident(String)operator(.)ident(Other)operator(,) string<delimiter(')content(cb-string)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((q|qq|qw|qr|qx\))content(\\()delimiter(')>operator(,) ident(String)operator(.)ident(Other)operator(,) string<delimiter(')content(rb-string)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((q|qq|qw|qr|qx\))content(\\[)delimiter(')>operator(,) ident(String)operator(.)ident(Other)operator(,) string<delimiter(')content(sb-string)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((q|qq|qw|qr|qx\))content(\\<)delimiter(')>operator(,) ident(String)operator(.)ident(Other)operator(,) string<delimiter(')content(lt-string)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((q|qq|qw|qr|qx\)(.\)[.)content(\\n)content(]*?)content(\\1)delimiter(')>operator(,) ident(String)operator(.)ident(Other)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(package)content(\\s)content(+)delimiter(')>operator(,) ident(Keyword)operator(,) string<delimiter(')content(modulename)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(sub)content(\\s)content(+)delimiter(')>operator(,) ident(Keyword)operator(,) string<delimiter(')content(funcname)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(()content(\\[)content(\\])content(|)content(\\*)content(\\*)content(|::|<<|>>|>=|<=|<=>|={3}|!=|=~|)delimiter(')>
             string<modifier(r)delimiter(')content(!~|&&?|)content(\\|)content(\\|)content(|)content(\\.)content({1,3}\))delimiter(')>operator(,) ident(Operator)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([-+/*%=<>&^|!)content(\\\\)content(~]=?)delimiter(')>operator(,) ident(Operator)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([)content(\\()content(\\\))content(\\[)content(\\])content(:;,<>/)content(\\?)content(\\{)content(\\})content(])delimiter(')>operator(,) ident(Punctuation)operator(\))operator(,) comment(# yes, there's no shortage)
                                                      comment(# of punctuation in Perl!)
            operator(()string<modifier(r)delimiter(')content((?=)content(\\w)content(\))delimiter(')>operator(,) ident(Name)operator(,) string<delimiter(')content(name)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(format)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\.)content(\\n)delimiter(')>operator(,) ident(String)operator(.)ident(Interpol)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([^)content(\\n)content(]*)content(\\n)delimiter(')>operator(,) ident(String)operator(.)ident(Interpol)operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(varname)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\s)content(+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\{)delimiter(')>operator(,) ident(Punctuation)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,) comment(# hash syntax?)
            operator(()string<modifier(r)delimiter(')content(\\\))content(|,)delimiter(')>operator(,) ident(Punctuation)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,) comment(# argument specifier)
            operator(()string<modifier(r)delimiter(')content([a-zA-Z0-9_]+::)delimiter(')>operator(,) ident(Name)operator(.)ident(Namespace)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([a-zA-Z0-9_:]+)delimiter(')>operator(,) ident(Name)operator(.)ident(Variable)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(name)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content([a-zA-Z0-9_]+::)delimiter(')>operator(,) ident(Name)operator(.)ident(Namespace)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([a-zA-Z0-9_:]+)delimiter(')>operator(,) ident(Name)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([A-Z_]+(?=[^a-zA-Z0-9_]\))delimiter(')>operator(,) ident(Name)operator(.)ident(Constant)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((?=[^a-zA-Z0-9_]\))delimiter(')>operator(,) ident(Text)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(modulename)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content([a-zA-Z_][)content(\\w)content(_]*)delimiter(')>operator(,) ident(Name)operator(.)ident(Namespace)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))
        operator(])operator(,)
        string<delimiter(')content(funcname)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content([a-zA-Z_][)content(\\w)content(_]*[)content(\\!)content(\\?)content(]?)delimiter(')>operator(,) ident(Name)operator(.)ident(Function)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\s)content(+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            comment(# argument declaration)
            operator(()string<modifier(r)delimiter(')content(()content(\\()content([$@%]*)content(\\\))content(\)()content(\\s)content(*\))delimiter(')>operator(,) ident(bygroups)operator(()ident(Punctuation)operator(,) ident(Text)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(.*?{)delimiter(')>operator(,) ident(Punctuation)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(;)delimiter(')>operator(,) ident(Punctuation)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(cb-string)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\\\)content([)content(\\{)content(\\})content(\\\\)content(])delimiter(')>operator(,) ident(String)operator(.)ident(Other)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\\\)delimiter(')>operator(,) ident(String)operator(.)ident(Other)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\{)delimiter(')>operator(,) ident(String)operator(.)ident(Other)operator(,) string<delimiter(')content(cb-string)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\})delimiter(')>operator(,) ident(String)operator(.)ident(Other)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([^)content(\\{)content(\\})content(\\\\)content(]+)delimiter(')>operator(,) ident(String)operator(.)ident(Other)operator(\))
        operator(])operator(,)
        string<delimiter(')content(rb-string)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\\\)content([)content(\\()content(\\\))content(\\\\)content(])delimiter(')>operator(,) ident(String)operator(.)ident(Other)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\\\)delimiter(')>operator(,) ident(String)operator(.)ident(Other)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\()delimiter(')>operator(,) ident(String)operator(.)ident(Other)operator(,) string<delimiter(')content(rb-string)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\\))delimiter(')>operator(,) ident(String)operator(.)ident(Other)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([^)content(\\()content(\\\))content(]+)delimiter(')>operator(,) ident(String)operator(.)ident(Other)operator(\))
        operator(])operator(,)
        string<delimiter(')content(sb-string)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\\\)content([)content(\\[)content(\\])content(\\\\)content(])delimiter(')>operator(,) ident(String)operator(.)ident(Other)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\\\)delimiter(')>operator(,) ident(String)operator(.)ident(Other)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\[)delimiter(')>operator(,) ident(String)operator(.)ident(Other)operator(,) string<delimiter(')content(sb-string)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\])delimiter(')>operator(,) ident(String)operator(.)ident(Other)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([^)content(\\[)content(\\])content(]+)delimiter(')>operator(,) ident(String)operator(.)ident(Other)operator(\))
        operator(])operator(,)
        string<delimiter(')content(lt-string)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\\\)content([)content(\\<)content(\\>)content(\\\\)content(])delimiter(')>operator(,) ident(String)operator(.)ident(Other)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\\\)delimiter(')>operator(,) ident(String)operator(.)ident(Other)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\<)delimiter(')>operator(,) ident(String)operator(.)ident(Other)operator(,) string<delimiter(')content(lt-string)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\>)delimiter(')>operator(,) ident(String)operator(.)ident(Other)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([^)content(\\<)content(\\>)content(]]+)delimiter(')>operator(,) ident(String)operator(.)ident(Other)operator(\))
        operator(])operator(,)
        string<delimiter(')content(end-part)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(.+)delimiter(')>operator(,) ident(Comment)operator(.)ident(Preproc)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))
        operator(])
    operator(})

    keyword(def) method(analyse_text)operator(()ident(text)operator(\))operator(:)
        keyword(if) ident(shebang_matches)operator(()ident(text)operator(,) string<modifier(r)delimiter(')content(perl()content(\\d)content(\\.)content(\\d)content(\\.)content(\\d)content(\)?)delimiter(')>operator(\))operator(:)
            keyword(return) predefined_constant(True)
        keyword(if) string<delimiter(')content(my $)delimiter(')> keyword(in) ident(text)operator(:)
            keyword(return) float(0.9)
        keyword(return) float(0.1) comment(# who knows, might still be perl!)


keyword(class) class(LuaLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    For `Lua <http://www.lua.org>`_ source code.)content(
)content(
)content(    Additional options accepted:)content(
)content(
)content(    `func_name_highlighting`)content(
)content(        If given and ``True``, highlight builtin function names)content(
)content(        (default: ``True``\).)content(
)content(    `disabled_modules`)content(
)content(        If given, must be a list of module names whose function names)content(
)content(        should not be highlighted. By default all modules are highlighted.)content(
)content(
)content(        To get a list of allowed modules have a look into the)content(
)content(        `_luabuiltins` module:)content(
)content(
)content(        .. sourcecode:: pycon)content(
)content(
)content(            >>> from pygments.lexers._luabuiltins import MODULES)content(
)content(            >>> MODULES.keys(\))content(
)content(            ['string', 'coroutine', 'modules', 'io', 'basic', ...])content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(Lua)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(lua)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.lua)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(text/x-lua)delimiter(')>operator(,) string<delimiter(')content(application/x-lua)delimiter(')>operator(])

    ident(tokens) operator(=) operator({)
        string<delimiter(')content(root)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content((?s\)--)content(\\[)content((=*\))content(\\[)content(.*?)content(\\])content(\\1)content(\\])delimiter(')>operator(,) ident(Comment)operator(.)ident(Multiline)operator(\))operator(,)
            operator(()string<delimiter(')content(--.*$)delimiter(')>operator(,) ident(Comment)operator(.)ident(Single)operator(\))operator(,)

            operator(()string<modifier(r)delimiter(')content((?i\)()content(\\d)content(*)content(\\.)content(\\d)content(+|)content(\\d)content(+)content(\\.)content(\\d)content(*\)(e[+-]?)content(\\d)content(+\)?)delimiter(')>operator(,) ident(Number)operator(.)ident(Float)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((?i\))content(\\d)content(+e[+-]?)content(\\d)content(+)delimiter(')>operator(,) ident(Number)operator(.)ident(Float)operator(\))operator(,)
            operator(()string<delimiter(')content((?i\)0x[0-9a-f]*)delimiter(')>operator(,) ident(Number)operator(.)ident(Hex)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\d)content(+)delimiter(')>operator(,) ident(Number)operator(.)ident(Integer)operator(\))operator(,)

            operator(()string<modifier(r)delimiter(')content(\\n)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([^)content(\\S)content(\\n)content(])delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((?s\))content(\\[)content((=*\))content(\\[)content(.*?)content(\\])content(\\1)content(\\])delimiter(')>operator(,) ident(String)operator(.)ident(Multiline)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([)content(\\[)content(\\])content(\\{)content(\\})content(\\()content(\\\))content(\\.)content(,:;])delimiter(')>operator(,) ident(Punctuation)operator(\))operator(,)

            operator(()string<modifier(r)delimiter(')content((==|~=|<=|>=|)content(\\.)content(\\.)content(|)content(\\.)content(\\.)content(\\.)content(|[=+)content(\\-)content(*/%^<>#]\))delimiter(')>operator(,) ident(Operator)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((and|or|not\))content(\\b)delimiter(')>operator(,) ident(Operator)operator(.)ident(Word)operator(\))operator(,)

            operator(()string<delimiter(')content((break|do|else|elseif|end|for|if|in|repeat|return|then|until|)delimiter(')>
             string<modifier(r)delimiter(')content(while\))content(\\b)delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((local\))content(\\b)delimiter(')>operator(,) ident(Keyword)operator(.)ident(Declaration)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((true|false|nil\))content(\\b)delimiter(')>operator(,) ident(Keyword)operator(.)ident(Constant)operator(\))operator(,)

            operator(()string<modifier(r)delimiter(')content((function\)()content(\\s)content(+\))delimiter(')>operator(,) ident(bygroups)operator(()ident(Keyword)operator(,) ident(Text)operator(\))operator(,) string<delimiter(')content(funcname)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((class\)()content(\\s)content(+\))delimiter(')>operator(,) ident(bygroups)operator(()ident(Keyword)operator(,) ident(Text)operator(\))operator(,) string<delimiter(')content(classname)delimiter(')>operator(\))operator(,)

            operator(()string<modifier(r)delimiter(')content([A-Za-z_][A-Za-z0-9_]*()content(\\.)content([A-Za-z_][A-Za-z0-9_]*\)?)delimiter(')>operator(,) ident(Name)operator(\))operator(,)

            comment(# multiline strings)
            operator(()string<modifier(r)delimiter(')content((?s\))content(\\[)content((=*\))content(\\[)content((.*?\))content(\\])content(\\1)content(\\])delimiter(')>operator(,) ident(String)operator(\))operator(,)
            operator(()string<delimiter(")content(')delimiter(")>operator(,) ident(String)operator(.)ident(Single)operator(,) ident(combined)operator(()string<delimiter(')content(stringescape)delimiter(')>operator(,) string<delimiter(')content(sqs)delimiter(')>operator(\))operator(\))operator(,)
            operator(()string<delimiter(')content(")delimiter(')>operator(,) ident(String)operator(.)ident(Double)operator(,) ident(combined)operator(()string<delimiter(')content(stringescape)delimiter(')>operator(,) string<delimiter(')content(dqs)delimiter(')>operator(\))operator(\))
        operator(])operator(,)

        string<delimiter(')content(funcname)delimiter(')>operator(:) operator([)
            operator(()string<delimiter(')content([A-Za-z_][A-Za-z0-9_]*)delimiter(')>operator(,) ident(Name)operator(.)ident(Function)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            comment(# inline function)
            operator(()string<delimiter(')content(\\()delimiter(')>operator(,) ident(Punctuation)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
        operator(])operator(,)

        string<delimiter(')content(classname)delimiter(')>operator(:) operator([)
            operator(()string<delimiter(')content([A-Za-z_][A-Za-z0-9_]*)delimiter(')>operator(,) ident(Name)operator(.)ident(Class)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))
        operator(])operator(,)

        comment(# if I understand correctly, every character is valid in a lua string,)
        comment(# so this state is only for later corrections)
        string<delimiter(')content(string)delimiter(')>operator(:) operator([)
            operator(()string<delimiter(')content(.)delimiter(')>operator(,) ident(String)operator(\))
        operator(])operator(,)

        string<delimiter(')content(stringescape)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(''')content(\\\\)content(([abfnrtv)content(\\\\)content("']|)content(\\d)content({1,3}\))delimiter(''')>operator(,) ident(String)operator(.)ident(Escape)operator(\))
        operator(])operator(,)

        string<delimiter(')content(sqs)delimiter(')>operator(:) operator([)
            operator(()string<delimiter(")content(')delimiter(")>operator(,) ident(String)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(string)delimiter(')>operator(\))
        operator(])operator(,)

        string<delimiter(')content(dqs)delimiter(')>operator(:) operator([)
            operator(()string<delimiter(')content(")delimiter(')>operator(,) ident(String)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(string)delimiter(')>operator(\))
        operator(])
    operator(})

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))operator(:)
        predefined_constant(self)operator(.)ident(func_name_highlighting) operator(=) ident(get_bool_opt)operator(()
            ident(options)operator(,) string<delimiter(')content(func_name_highlighting)delimiter(')>operator(,) predefined_constant(True)operator(\))
        predefined_constant(self)operator(.)ident(disabled_modules) operator(=) ident(get_list_opt)operator(()ident(options)operator(,) string<delimiter(')content(disabled_modules)delimiter(')>operator(,) operator([)operator(])operator(\))

        predefined_constant(self)operator(.)ident(_functions) operator(=) predefined(set)operator(()operator(\))
        keyword(if) predefined_constant(self)operator(.)ident(func_name_highlighting)operator(:)
            keyword(from) include(pygments.lexers._luabuiltins) keyword(import) include(MODULES)
            keyword(for) ident(mod)operator(,) ident(func) keyword(in) ident(MODULES)operator(.)ident(iteritems)operator(()operator(\))operator(:)
                keyword(if) ident(mod) keyword(not) keyword(in) predefined_constant(self)operator(.)ident(disabled_modules)operator(:)
                    predefined_constant(self)operator(.)ident(_functions)operator(.)ident(update)operator(()ident(func)operator(\))
        ident(RegexLexer)operator(.)ident(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))

    keyword(def) method(get_tokens_unprocessed)operator(()predefined_constant(self)operator(,) ident(text)operator(\))operator(:)
        keyword(for) ident(index)operator(,) ident(token)operator(,) ident(value) keyword(in) \
            ident(RegexLexer)operator(.)ident(get_tokens_unprocessed)operator(()predefined_constant(self)operator(,) ident(text)operator(\))operator(:)
            keyword(if) ident(token) keyword(is) ident(Name)operator(:)
                keyword(if) ident(value) keyword(in) predefined_constant(self)operator(.)ident(_functions)operator(:)
                    keyword(yield) ident(index)operator(,) ident(Name)operator(.)ident(Builtin)operator(,) ident(value)
                    keyword(continue)
                keyword(elif) string<delimiter(')content(.)delimiter(')> ident(in) ident(value)operator(:)
                    ident(a)operator(,) ident(b) operator(=) ident(value)operator(.)ident(split)operator(()string<delimiter(')content(.)delimiter(')>operator(\))
                    keyword(yield) ident(index)operator(,) ident(Name)operator(,) ident(a)
                    keyword(yield) ident(index) operator(+) predefined(len)operator(()ident(a)operator(\))operator(,) ident(Punctuation)operator(,) string<modifier(u)delimiter(')content(.)delimiter(')>
                    ident(yield) ident(index) operator(+) predefined(len)operator(()ident(a)operator(\)) operator(+) integer(1)operator(,) ident(Name)operator(,) ident(b)
                    keyword(continue)
            keyword(yield) ident(index)operator(,) ident(token)operator(,) ident(value)


keyword(class) class(MiniDLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    For `MiniD <http://www.dsource.org/projects/minid>`_ (a D-like scripting)content(
)content(    language\) source.)content(
)content(    )delimiter(""")>
    ident(name) operator(=) string<delimiter(')content(MiniD)delimiter(')>
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.md)delimiter(')>operator(])
    ident(aliases) operator(=) operator([)string<delimiter(')content(minid)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(text/x-minidsrc)delimiter(')>operator(])

    ident(tokens) operator(=) operator({)
        string<delimiter(')content(root)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\n)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\s)content(+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            comment(# Comments)
            operator(()string<modifier(r)delimiter(')content(//(.*?\))content(\\n)delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(/()content(\\\\)content(\\n)content(\)?[*](.|)content(\\n)content(\)*?[*]()content(\\\\)content(\\n)content(\)?/)delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(/)content(\\+)delimiter(')>operator(,) ident(Comment)operator(,) string<delimiter(')content(nestedcomment)delimiter(')>operator(\))operator(,)
            comment(# Keywords)
            operator(()string<modifier(r)delimiter(')content((as|assert|break|case|catch|class|continue|coroutine|default)delimiter(')>
             string<modifier(r)delimiter(')content(|do|else|finally|for|foreach|function|global|namespace)delimiter(')>
             string<modifier(r)delimiter(')content(|if|import|in|is|local|module|return|super|switch)delimiter(')>
             string<modifier(r)delimiter(')content(|this|throw|try|vararg|while|with|yield\))content(\\b)delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((false|true|null\))content(\\b)delimiter(')>operator(,) ident(Keyword)operator(.)ident(Constant)operator(\))operator(,)
            comment(# FloatLiteral)
            operator(()string<modifier(r)delimiter(')content(([0-9][0-9_]*\)?)content(\\.)content([0-9_]+([eE][+)content(\\-)content(]?[0-9_]+\)?)delimiter(')>operator(,) ident(Number)operator(.)ident(Float)operator(\))operator(,)
            comment(# IntegerLiteral)
            comment(# -- Binary)
            operator(()string<modifier(r)delimiter(')content(0[Bb][01_]+)delimiter(')>operator(,) ident(Number)operator(\))operator(,)
            comment(# -- Octal)
            operator(()string<modifier(r)delimiter(')content(0[Cc][0-7_]+)delimiter(')>operator(,) ident(Number)operator(.)ident(Oct)operator(\))operator(,)
            comment(# -- Hexadecimal)
            operator(()string<modifier(r)delimiter(')content(0[xX][0-9a-fA-F_]+)delimiter(')>operator(,) ident(Number)operator(.)ident(Hex)operator(\))operator(,)
            comment(# -- Decimal)
            operator(()string<modifier(r)delimiter(')content((0|[1-9][0-9_]*\))delimiter(')>operator(,) ident(Number)operator(.)ident(Integer)operator(\))operator(,)
            comment(# CharacterLiteral)
            operator(()string<modifier(r)delimiter(""")content('()content(\\\\)content(['"?)content(\\\\)content(abfnrtv]|)content(\\\\)content(x[0-9a-fA-F]{2}|)content(\\\\)content([0-9]{1,3})delimiter(""")>
             docstring<modifier(r)delimiter(""")content(|)content(\\\\)content(u[0-9a-fA-F]{4}|)content(\\\\)content(U[0-9a-fA-F]{8}|.\)')delimiter(""")>operator(,)
             ident(String)operator(.)ident(Char)
            operator(\))operator(,)
            comment(# StringLiteral)
            comment(# -- WysiwygString)
            operator(()string<modifier(r)delimiter(')content(@"(""|.\)*")delimiter(')>operator(,) ident(String)operator(\))operator(,)
            comment(# -- AlternateWysiwygString)
            operator(()string<modifier(r)delimiter(')content(`(``|.\)*`)delimiter(')>operator(,) ident(String)operator(\))operator(,)
            comment(# -- DoubleQuotedString)
            operator(()string<modifier(r)delimiter(')content("()content(\\\\)content(\\\\)content(|)content(\\\\)content("|[^"]\)*")delimiter(')>operator(,) ident(String)operator(\))operator(,)
            comment(# Tokens)
            operator(()
             string<modifier(r)delimiter(')content((~=|)content(\\^)content(=|%=|)content(\\*)content(=|==|!=|>>>=|>>>|>>=|>>|>=|<=>|)content(\\?)content(=|-)content(\\>)delimiter(')>
             string<modifier(r)delimiter(')content(|<<=|<<|<=|)content(\\+)content(\\+)content(|)content(\\+)content(=|--|-=|)content(\\|)content(\\|)content(|)content(\\|)content(=|&&|&=|)content(\\.)content(\\.)content(|/=\))delimiter(')>
             string<modifier(r)delimiter(')content(|[-/.&$@|)content(\\+)content(<>!(\))content(\\[)content(\\])content({}?,;:=*%^~#)content(\\\\)content(])delimiter(')>operator(,) ident(Punctuation)
            operator(\))operator(,)
            comment(# Identifier)
            operator(()string<modifier(r)delimiter(')content([a-zA-Z_])content(\\w)content(*)delimiter(')>operator(,) ident(Name)operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(nestedcomment)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content([^+/]+)delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(/)content(\\+)delimiter(')>operator(,) ident(Comment)operator(,) string<delimiter(')content(#push)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\+)content(/)delimiter(')>operator(,) ident(Comment)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([+/])delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
        operator(])operator(,)
    operator(})


keyword(class) class(IoLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    For `Io <http://iolanguage.com/>`_ (a small, prototype-based)content(
)content(    programming language\) source.)content(
)content(
)content(    *New in Pygments 0.10.*)content(
)content(    )delimiter(""")>
    ident(name) operator(=) string<delimiter(')content(Io)delimiter(')>
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.io)delimiter(')>operator(])
    ident(aliases) operator(=) operator([)string<delimiter(')content(io)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(text/x-iosrc)delimiter(')>operator(])
    ident(tokens) operator(=) operator({)
        string<delimiter(')content(root)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\n)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\s)content(+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            comment(# Comments)
            operator(()string<modifier(r)delimiter(')content(//(.*?\))content(\\n)delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(#(.*?\))content(\\n)delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(/()content(\\\\)content(\\n)content(\)?[*](.|)content(\\n)content(\)*?[*]()content(\\\\)content(\\n)content(\)?/)delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(/)content(\\+)delimiter(')>operator(,) ident(Comment)operator(,) string<delimiter(')content(nestedcomment)delimiter(')>operator(\))operator(,)
            comment(# DoubleQuotedString)
            operator(()string<modifier(r)delimiter(')content("()content(\\\\)content(\\\\)content(|)content(\\\\)content("|[^"]\)*")delimiter(')>operator(,) ident(String)operator(\))operator(,)
            comment(# Operators)
            operator(()string<modifier(r)delimiter(')content(::=|:=|=|)content(\\()content(|)content(\\\))content(|;|,|)content(\\*)content(|-|)content(\\+)content(|>|<|@|!|/|)content(\\|)content(|)content(\\^)content(|)content(\\.)content(|%|&|)content(\\[)content(|)content(\\])content(|)content(\\{)content(|)content(\\})delimiter(')>operator(,)
             ident(Operator)operator(\))operator(,)
            comment(# keywords)
            operator(()string<modifier(r)delimiter(')content((clone|do|doFile|doString|method|for|if|else|elseif|then\))content(\\b)delimiter(')>operator(,)
             ident(Keyword)operator(\))operator(,)
            comment(# constants)
            operator(()string<modifier(r)delimiter(')content((nil|false|true\))content(\\b)delimiter(')>operator(,) ident(Name)operator(.)ident(Constant)operator(\))operator(,)
            comment(# names)
            operator(()string<delimiter(')content((Object|list|List|Map|args|Sequence|Coroutine|File\))char(\\b)delimiter(')>operator(,)
             ident(Name)operator(.)ident(Builtin)operator(\))operator(,)
            operator(()string<delimiter(')content([a-zA-Z_][a-zA-Z0-9_]*)delimiter(')>operator(,) ident(Name)operator(\))operator(,)
            comment(# numbers)
            operator(()string<modifier(r)delimiter(')content(()content(\\d)content(+)content(\\.)content(?)content(\\d)content(*|)content(\\d)content(*)content(\\.)content(\\d)content(+\)([eE][+-]?[0-9]+\)?)delimiter(')>operator(,) ident(Number)operator(.)ident(Float)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\d)content(+)delimiter(')>operator(,) ident(Number)operator(.)ident(Integer)operator(\))
        operator(])operator(,)
        string<delimiter(')content(nestedcomment)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content([^+/]+)delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(/)content(\\+)delimiter(')>operator(,) ident(Comment)operator(,) string<delimiter(')content(#push)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\+)content(/)delimiter(')>operator(,) ident(Comment)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([+/])delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
        operator(])
    operator(})


keyword(class) class(TclLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    For Tcl source code.)content(
)content(
)content(    *New in Pygments 0.10.*)content(
)content(    )delimiter(""")>

    ident(keyword_cmds_re) operator(=) operator(()
        string<modifier(r)delimiter(')content(\\b)content((after|apply|array|break|catch|continue|elseif|else|error|)delimiter(')>
        string<modifier(r)delimiter(')content(eval|expr|for|foreach|global|if|namespace|proc|rename|return|)delimiter(')>
        string<modifier(r)delimiter(')content(set|switch|then|trace|unset|update|uplevel|upvar|variable|)delimiter(')>
        string<modifier(r)delimiter(')content(vwait|while\))content(\\b)delimiter(')>
        operator(\))

    ident(builtin_cmds_re) operator(=) operator(()
        string<modifier(r)delimiter(')content(\\b)content((append|bgerror|binary|cd|chan|clock|close|concat|dde|dict|)delimiter(')>
        string<modifier(r)delimiter(')content(encoding|eof|exec|exit|fblocked|fconfigure|fcopy|file|)delimiter(')>
        string<modifier(r)delimiter(')content(fileevent|flush|format|gets|glob|history|http|incr|info|interp|)delimiter(')>
        string<modifier(r)delimiter(')content(join|lappend|lassign|lindex|linsert|list|llength|load|loadTk|)delimiter(')>
        string<modifier(r)delimiter(')content(lrange|lrepeat|lreplace|lreverse|lsearch|lset|lsort|mathfunc|)delimiter(')>
        string<modifier(r)delimiter(')content(mathop|memory|msgcat|open|package|pid|pkg::create|pkg_mkIndex|)delimiter(')>
        string<modifier(r)delimiter(')content(platform|platform::shell|puts|pwd|re_syntax|read|refchan|)delimiter(')>
        string<modifier(r)delimiter(')content(regexp|registry|regsub|scan|seek|socket|source|split|string|)delimiter(')>
        string<modifier(r)delimiter(')content(subst|tell|time|tm|unknown|unload\))content(\\b)delimiter(')>
        operator(\))

    ident(name) operator(=) string<delimiter(')content(Tcl)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(tcl)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.tcl)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(text/x-tcl)delimiter(')>operator(,) string<delimiter(')content(text/x-script.tcl)delimiter(')>operator(,) string<delimiter(')content(application/x-tcl)delimiter(')>operator(])

    keyword(def) method(_gen_command_rules)operator(()ident(keyword_cmds_re)operator(,) ident(builtin_cmds_re)operator(,) ident(context)operator(=)string<delimiter(")delimiter(")>operator(\))operator(:)
        keyword(return) operator([)
            operator(()ident(keyword_cmds_re)operator(,) ident(Keyword)operator(,) string<delimiter(')content(params)delimiter(')> operator(+) ident(context)operator(\))operator(,)
            operator(()ident(builtin_cmds_re)operator(,) ident(Name)operator(.)ident(Builtin)operator(,) string<delimiter(')content(params)delimiter(')> operator(+) ident(context)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(([)content(\\w)content(\\.)content(\\-)content(]+\))delimiter(')>operator(,) ident(Name)operator(.)ident(Variable)operator(,) string<delimiter(')content(params)delimiter(')> operator(+) ident(context)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(#)delimiter(')>operator(,) ident(Comment)operator(,) string<delimiter(')content(comment)delimiter(')>operator(\))operator(,)
        operator(])

    ident(tokens) operator(=) operator({)
        string<delimiter(')content(root)delimiter(')>operator(:) operator([)
            ident(include)operator(()string<delimiter(')content(command)delimiter(')>operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(basic)delimiter(')>operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(data)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(command)delimiter(')>operator(:) ident(_gen_command_rules)operator(()ident(keyword_cmds_re)operator(,) ident(builtin_cmds_re)operator(\))operator(,)
        string<delimiter(')content(command-in-brace)delimiter(')>operator(:) ident(_gen_command_rules)operator(()ident(keyword_cmds_re)operator(,)
                                               ident(builtin_cmds_re)operator(,)
                                               string<delimiter(")content(-in-brace)delimiter(")>operator(\))operator(,)
        string<delimiter(')content(command-in-bracket)delimiter(')>operator(:) ident(_gen_command_rules)operator(()ident(keyword_cmds_re)operator(,)
                                                 ident(builtin_cmds_re)operator(,)
                                                 string<delimiter(")content(-in-bracket)delimiter(")>operator(\))operator(,)
        string<delimiter(')content(command-in-paren)delimiter(')>operator(:) ident(_gen_command_rules)operator(()ident(keyword_cmds_re)operator(,)
                                               ident(builtin_cmds_re)operator(,)
                                               string<delimiter(")content(-in-paren)delimiter(")>operator(\))operator(,)
        string<delimiter(')content(basic)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\()delimiter(')>operator(,) ident(Keyword)operator(,) string<delimiter(')content(paren)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\[)delimiter(')>operator(,) ident(Keyword)operator(,) string<delimiter(')content(bracket)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\{)delimiter(')>operator(,) ident(Keyword)operator(,) string<delimiter(')content(brace)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(")delimiter(')>operator(,) ident(String)operator(.)ident(Double)operator(,) string<delimiter(')content(string)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((eq|ne|in|ni\))content(\\b)delimiter(')>operator(,) ident(Operator)operator(.)ident(Word)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(!=|==|<<|>>|<=|>=|&&|)content(\\|)content(\\|)content(|)content(\\*)content(\\*)content(|[-+~!*/%<>&^|?:])delimiter(')>operator(,) ident(Operator)operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(data)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\s)content(+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(0x[a-fA-F0-9]+)delimiter(')>operator(,) ident(Number)operator(.)ident(Hex)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(0[0-7]+)delimiter(')>operator(,) ident(Number)operator(.)ident(Oct)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\d)content(+)content(\\.)content(\\d)content(+)delimiter(')>operator(,) ident(Number)operator(.)ident(Float)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\d)content(+)delimiter(')>operator(,) ident(Number)operator(.)ident(Integer)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\$)content(([)content(\\w)content(\\.)content(\\-)content(\\:)content(]+\))delimiter(')>operator(,) ident(Name)operator(.)ident(Variable)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(([)content(\\w)content(\\.)content(\\-)content(\\:)content(]+\))delimiter(')>operator(,) ident(Text)operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(params)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(;)delimiter(')>operator(,) ident(Keyword)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\n)delimiter(')>operator(,) ident(Text)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((else|elseif|then\))delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(basic)delimiter(')>operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(data)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(params-in-brace)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(})delimiter(')>operator(,) ident(Keyword)operator(,) operator(()string<delimiter(')content(#pop)delimiter(')>operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(params)delimiter(')>operator(\))
        operator(])operator(,)
        string<delimiter(')content(params-in-paren)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\\))delimiter(')>operator(,) ident(Keyword)operator(,) operator(()string<delimiter(')content(#pop)delimiter(')>operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(params)delimiter(')>operator(\))
        operator(])operator(,)
        string<delimiter(')content(params-in-bracket)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\])delimiter(')>operator(,) ident(Keyword)operator(,) operator(()string<delimiter(')content(#pop)delimiter(')>operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(params)delimiter(')>operator(\))
        operator(])operator(,)
        string<delimiter(')content(string)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\[)delimiter(')>operator(,) ident(String)operator(.)ident(Double)operator(,) string<delimiter(')content(string-square)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(()content(\\\\)content(\\\\)content(|)content(\\\\)content([0-7]+|)content(\\\\)content(.|[^"]\))delimiter(')>operator(,) ident(String)operator(.)ident(Double)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(")delimiter(')>operator(,) ident(String)operator(.)ident(Double)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))
        operator(])operator(,)
        string<delimiter(')content(string-square)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\[)delimiter(')>operator(,) ident(String)operator(.)ident(Double)operator(,) string<delimiter(')content(string-square)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(()content(\\\\)content(\\\\)content(|)content(\\\\)content([0-7]+|)content(\\\\)content(.|[^)content(\\])content(]\))delimiter(')>operator(,) ident(String)operator(.)ident(Double)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\])delimiter(')>operator(,) ident(String)operator(.)ident(Double)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))
        operator(])operator(,)
        string<delimiter(')content(brace)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(})delimiter(')>operator(,) ident(Keyword)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(command-in-brace)delimiter(')>operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(basic)delimiter(')>operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(data)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(paren)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\\))delimiter(')>operator(,) ident(Keyword)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(command-in-paren)delimiter(')>operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(basic)delimiter(')>operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(data)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(bracket)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\])delimiter(')>operator(,) ident(Keyword)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(command-in-bracket)delimiter(')>operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(basic)delimiter(')>operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(data)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(comment)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(.*[^)content(\\\\)content(])content(\\n)delimiter(')>operator(,) ident(Comment)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(.*)content(\\\\)content(\\n)delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
        operator(])operator(,)
    operator(})

    keyword(def) method(analyse_text)operator(()ident(text)operator(\))operator(:)
        keyword(return) ident(shebang_matches)operator(()ident(text)operator(,) string<modifier(r)delimiter(')content((tcl\))delimiter(')>operator(\))


keyword(class) class(ClojureLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Lexer for `Clojure <http://clojure.org/>`_ source code.)content(
)content(
)content(    *New in Pygments 0.11.*)content(
)content(    )delimiter(""")>
    ident(name) operator(=) string<delimiter(')content(Clojure)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(clojure)delimiter(')>operator(,) string<delimiter(')content(clj)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.clj)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(text/x-clojure)delimiter(')>operator(,) string<delimiter(')content(application/x-clojure)delimiter(')>operator(])

    ident(keywords) operator(=) operator([)
        string<delimiter(')content(fn)delimiter(')>operator(,) string<delimiter(')content(def)delimiter(')>operator(,) string<delimiter(')content(defn)delimiter(')>operator(,) string<delimiter(')content(defmacro)delimiter(')>operator(,) string<delimiter(')content(defmethod)delimiter(')>operator(,) string<delimiter(')content(defmulti)delimiter(')>operator(,) string<delimiter(')content(defn-)delimiter(')>operator(,)
        string<delimiter(')content(defstruct)delimiter(')>operator(,)
        string<delimiter(')content(if)delimiter(')>operator(,) string<delimiter(')content(cond)delimiter(')>operator(,)
        string<delimiter(')content(let)delimiter(')>operator(,) string<delimiter(')content(for)delimiter(')>
    operator(])
    ident(builtins) operator(=) operator([)
        string<delimiter(')content(.)delimiter(')>operator(,) string<delimiter(')content(..)delimiter(')>operator(,)
        string<delimiter(')content(*)delimiter(')>operator(,) string<delimiter(')content(+)delimiter(')>operator(,) string<delimiter(')content(-)delimiter(')>operator(,) string<delimiter(')content(->)delimiter(')>operator(,) string<delimiter(')content(..)delimiter(')>operator(,) string<delimiter(')content(/)delimiter(')>operator(,) string<delimiter(')content(<)delimiter(')>operator(,) string<delimiter(')content(<=)delimiter(')>operator(,) string<delimiter(')content(=)delimiter(')>operator(,) string<delimiter(')content(==)delimiter(')>operator(,) string<delimiter(')content(>)delimiter(')>operator(,) string<delimiter(')content(>=)delimiter(')>operator(,)
        string<delimiter(')content(accessor)delimiter(')>operator(,) string<delimiter(')content(agent)delimiter(')>operator(,) string<delimiter(')content(agent-errors)delimiter(')>operator(,) string<delimiter(')content(aget)delimiter(')>operator(,) string<delimiter(')content(alength)delimiter(')>operator(,) string<delimiter(')content(all-ns)delimiter(')>operator(,)
        string<delimiter(')content(alter)delimiter(')>operator(,) string<delimiter(')content(and)delimiter(')>operator(,) string<delimiter(')content(append-child)delimiter(')>operator(,) string<delimiter(')content(apply)delimiter(')>operator(,) string<delimiter(')content(array-map)delimiter(')>operator(,) string<delimiter(')content(aset)delimiter(')>operator(,)
        string<delimiter(')content(aset-boolean)delimiter(')>operator(,) string<delimiter(')content(aset-byte)delimiter(')>operator(,) string<delimiter(')content(aset-char)delimiter(')>operator(,) string<delimiter(')content(aset-double)delimiter(')>operator(,) string<delimiter(')content(aset-float)delimiter(')>operator(,)
        string<delimiter(')content(aset-int)delimiter(')>operator(,) string<delimiter(')content(aset-long)delimiter(')>operator(,) string<delimiter(')content(aset-short)delimiter(')>operator(,) string<delimiter(')content(assert)delimiter(')>operator(,) string<delimiter(')content(assoc)delimiter(')>operator(,) string<delimiter(')content(await)delimiter(')>operator(,)
        string<delimiter(')content(await-for)delimiter(')>operator(,) string<delimiter(')content(bean)delimiter(')>operator(,) string<delimiter(')content(binding)delimiter(')>operator(,) string<delimiter(')content(bit-and)delimiter(')>operator(,) string<delimiter(')content(bit-not)delimiter(')>operator(,) string<delimiter(')content(bit-or)delimiter(')>operator(,)
        string<delimiter(')content(bit-shift-left)delimiter(')>operator(,) string<delimiter(')content(bit-shift-right)delimiter(')>operator(,) string<delimiter(')content(bit-xor)delimiter(')>operator(,) string<delimiter(')content(boolean)delimiter(')>operator(,) string<delimiter(')content(branch?)delimiter(')>operator(,)
        string<delimiter(')content(butlast)delimiter(')>operator(,) string<delimiter(')content(byte)delimiter(')>operator(,) string<delimiter(')content(cast)delimiter(')>operator(,) string<delimiter(')content(char)delimiter(')>operator(,) string<delimiter(')content(children)delimiter(')>operator(,) string<delimiter(')content(class)delimiter(')>operator(,)
        string<delimiter(')content(clear-agent-errors)delimiter(')>operator(,) string<delimiter(')content(comment)delimiter(')>operator(,) string<delimiter(')content(commute)delimiter(')>operator(,) string<delimiter(')content(comp)delimiter(')>operator(,) string<delimiter(')content(comparator)delimiter(')>operator(,)
        string<delimiter(')content(complement)delimiter(')>operator(,) string<delimiter(')content(concat)delimiter(')>operator(,) string<delimiter(')content(conj)delimiter(')>operator(,) string<delimiter(')content(cons)delimiter(')>operator(,) string<delimiter(')content(constantly)delimiter(')>operator(,)
        string<delimiter(')content(construct-proxy)delimiter(')>operator(,) string<delimiter(')content(contains?)delimiter(')>operator(,) string<delimiter(')content(count)delimiter(')>operator(,) string<delimiter(')content(create-ns)delimiter(')>operator(,) string<delimiter(')content(create-struct)delimiter(')>operator(,)
        string<delimiter(')content(cycle)delimiter(')>operator(,) string<delimiter(')content(dec)delimiter(')>operator(,)  string<delimiter(')content(deref)delimiter(')>operator(,) string<delimiter(')content(difference)delimiter(')>operator(,) string<delimiter(')content(disj)delimiter(')>operator(,) string<delimiter(')content(dissoc)delimiter(')>operator(,) string<delimiter(')content(distinct)delimiter(')>operator(,)
        string<delimiter(')content(doall)delimiter(')>operator(,) string<delimiter(')content(doc)delimiter(')>operator(,) string<delimiter(')content(dorun)delimiter(')>operator(,) string<delimiter(')content(doseq)delimiter(')>operator(,) string<delimiter(')content(dosync)delimiter(')>operator(,) string<delimiter(')content(dotimes)delimiter(')>operator(,) string<delimiter(')content(doto)delimiter(')>operator(,)
        string<delimiter(')content(double)delimiter(')>operator(,) string<delimiter(')content(down)delimiter(')>operator(,) string<delimiter(')content(drop)delimiter(')>operator(,) string<delimiter(')content(drop-while)delimiter(')>operator(,) string<delimiter(')content(edit)delimiter(')>operator(,) string<delimiter(')content(end?)delimiter(')>operator(,) string<delimiter(')content(ensure)delimiter(')>operator(,)
        string<delimiter(')content(eval)delimiter(')>operator(,) string<delimiter(')content(every?)delimiter(')>operator(,) string<delimiter(')content(false?)delimiter(')>operator(,) string<delimiter(')content(ffirst)delimiter(')>operator(,) string<delimiter(')content(file-seq)delimiter(')>operator(,) string<delimiter(')content(filter)delimiter(')>operator(,) string<delimiter(')content(find)delimiter(')>operator(,)
        string<delimiter(')content(find-doc)delimiter(')>operator(,) string<delimiter(')content(find-ns)delimiter(')>operator(,) string<delimiter(')content(find-var)delimiter(')>operator(,) string<delimiter(')content(first)delimiter(')>operator(,) string<delimiter(')content(float)delimiter(')>operator(,) string<delimiter(')content(flush)delimiter(')>operator(,)
        string<delimiter(')content(fnseq)delimiter(')>operator(,) string<delimiter(')content(frest)delimiter(')>operator(,) string<delimiter(')content(gensym)delimiter(')>operator(,) string<delimiter(')content(get)delimiter(')>operator(,) string<delimiter(')content(get-proxy-class)delimiter(')>operator(,)
        string<delimiter(')content(hash-map)delimiter(')>operator(,) string<delimiter(')content(hash-set)delimiter(')>operator(,) string<delimiter(')content(identical?)delimiter(')>operator(,) string<delimiter(')content(identity)delimiter(')>operator(,) string<delimiter(')content(if-let)delimiter(')>operator(,) string<delimiter(')content(import)delimiter(')>operator(,)
        string<delimiter(')content(in-ns)delimiter(')>operator(,) string<delimiter(')content(inc)delimiter(')>operator(,) string<delimiter(')content(index)delimiter(')>operator(,) string<delimiter(')content(insert-child)delimiter(')>operator(,) string<delimiter(')content(insert-left)delimiter(')>operator(,) string<delimiter(')content(insert-right)delimiter(')>operator(,)
        string<delimiter(')content(inspect-table)delimiter(')>operator(,) string<delimiter(')content(inspect-tree)delimiter(')>operator(,) string<delimiter(')content(instance?)delimiter(')>operator(,) string<delimiter(')content(int)delimiter(')>operator(,) string<delimiter(')content(interleave)delimiter(')>operator(,)
        string<delimiter(')content(intersection)delimiter(')>operator(,) string<delimiter(')content(into)delimiter(')>operator(,) string<delimiter(')content(into-array)delimiter(')>operator(,) string<delimiter(')content(iterate)delimiter(')>operator(,) string<delimiter(')content(join)delimiter(')>operator(,) string<delimiter(')content(key)delimiter(')>operator(,) string<delimiter(')content(keys)delimiter(')>operator(,)
        string<delimiter(')content(keyword)delimiter(')>operator(,) string<delimiter(')content(keyword?)delimiter(')>operator(,) string<delimiter(')content(last)delimiter(')>operator(,) string<delimiter(')content(lazy-cat)delimiter(')>operator(,) string<delimiter(')content(lazy-cons)delimiter(')>operator(,) string<delimiter(')content(left)delimiter(')>operator(,)
        string<delimiter(')content(lefts)delimiter(')>operator(,) string<delimiter(')content(line-seq)delimiter(')>operator(,) string<delimiter(')content(list)delimiter(')>operator(,) string<delimiter(')content(list*)delimiter(')>operator(,) string<delimiter(')content(load)delimiter(')>operator(,) string<delimiter(')content(load-file)delimiter(')>operator(,)
        string<delimiter(')content(locking)delimiter(')>operator(,) string<delimiter(')content(long)delimiter(')>operator(,) string<delimiter(')content(loop)delimiter(')>operator(,) string<delimiter(')content(macroexpand)delimiter(')>operator(,) string<delimiter(')content(macroexpand-1)delimiter(')>operator(,)
        string<delimiter(')content(make-array)delimiter(')>operator(,) string<delimiter(')content(make-node)delimiter(')>operator(,) string<delimiter(')content(map)delimiter(')>operator(,) string<delimiter(')content(map-invert)delimiter(')>operator(,) string<delimiter(')content(map?)delimiter(')>operator(,) string<delimiter(')content(mapcat)delimiter(')>operator(,)
        string<delimiter(')content(max)delimiter(')>operator(,) string<delimiter(')content(max-key)delimiter(')>operator(,) string<delimiter(')content(memfn)delimiter(')>operator(,) string<delimiter(')content(merge)delimiter(')>operator(,) string<delimiter(')content(merge-with)delimiter(')>operator(,) string<delimiter(')content(meta)delimiter(')>operator(,) string<delimiter(')content(min)delimiter(')>operator(,)
        string<delimiter(')content(min-key)delimiter(')>operator(,) string<delimiter(')content(name)delimiter(')>operator(,) string<delimiter(')content(namespace)delimiter(')>operator(,) string<delimiter(')content(neg?)delimiter(')>operator(,) string<delimiter(')content(new)delimiter(')>operator(,) string<delimiter(')content(newline)delimiter(')>operator(,) string<delimiter(')content(next)delimiter(')>operator(,)
        string<delimiter(')content(nil?)delimiter(')>operator(,) string<delimiter(')content(node)delimiter(')>operator(,) string<delimiter(')content(not)delimiter(')>operator(,) string<delimiter(')content(not-any?)delimiter(')>operator(,) string<delimiter(')content(not-every?)delimiter(')>operator(,) string<delimiter(')content(not=)delimiter(')>operator(,) string<delimiter(')content(ns-imports)delimiter(')>operator(,)
        string<delimiter(')content(ns-interns)delimiter(')>operator(,) string<delimiter(')content(ns-map)delimiter(')>operator(,) string<delimiter(')content(ns-name)delimiter(')>operator(,) string<delimiter(')content(ns-publics)delimiter(')>operator(,) string<delimiter(')content(ns-refers)delimiter(')>operator(,)
        string<delimiter(')content(ns-resolve)delimiter(')>operator(,) string<delimiter(')content(ns-unmap)delimiter(')>operator(,) string<delimiter(')content(nth)delimiter(')>operator(,) string<delimiter(')content(nthrest)delimiter(')>operator(,) string<delimiter(')content(or)delimiter(')>operator(,) string<delimiter(')content(parse)delimiter(')>operator(,) string<delimiter(')content(partial)delimiter(')>operator(,)
        string<delimiter(')content(path)delimiter(')>operator(,) string<delimiter(')content(peek)delimiter(')>operator(,) string<delimiter(')content(pop)delimiter(')>operator(,) string<delimiter(')content(pos?)delimiter(')>operator(,) string<delimiter(')content(pr)delimiter(')>operator(,) string<delimiter(')content(pr-str)delimiter(')>operator(,) string<delimiter(')content(print)delimiter(')>operator(,) string<delimiter(')content(print-str)delimiter(')>operator(,)
        string<delimiter(')content(println)delimiter(')>operator(,) string<delimiter(')content(println-str)delimiter(')>operator(,) string<delimiter(')content(prn)delimiter(')>operator(,) string<delimiter(')content(prn-str)delimiter(')>operator(,) string<delimiter(')content(project)delimiter(')>operator(,) string<delimiter(')content(proxy)delimiter(')>operator(,)
        string<delimiter(')content(proxy-mappings)delimiter(')>operator(,) string<delimiter(')content(quot)delimiter(')>operator(,) string<delimiter(')content(rand)delimiter(')>operator(,) string<delimiter(')content(rand-int)delimiter(')>operator(,) string<delimiter(')content(range)delimiter(')>operator(,) string<delimiter(')content(re-find)delimiter(')>operator(,)
        string<delimiter(')content(re-groups)delimiter(')>operator(,) string<delimiter(')content(re-matcher)delimiter(')>operator(,) string<delimiter(')content(re-matches)delimiter(')>operator(,) string<delimiter(')content(re-pattern)delimiter(')>operator(,) string<delimiter(')content(re-seq)delimiter(')>operator(,)
        string<delimiter(')content(read)delimiter(')>operator(,) string<delimiter(')content(read-line)delimiter(')>operator(,) string<delimiter(')content(reduce)delimiter(')>operator(,) string<delimiter(')content(ref)delimiter(')>operator(,) string<delimiter(')content(ref-set)delimiter(')>operator(,) string<delimiter(')content(refer)delimiter(')>operator(,) string<delimiter(')content(rem)delimiter(')>operator(,)
        string<delimiter(')content(remove)delimiter(')>operator(,) string<delimiter(')content(remove-method)delimiter(')>operator(,) string<delimiter(')content(remove-ns)delimiter(')>operator(,) string<delimiter(')content(rename)delimiter(')>operator(,) string<delimiter(')content(rename-keys)delimiter(')>operator(,)
        string<delimiter(')content(repeat)delimiter(')>operator(,) string<delimiter(')content(replace)delimiter(')>operator(,) string<delimiter(')content(replicate)delimiter(')>operator(,) string<delimiter(')content(resolve)delimiter(')>operator(,) string<delimiter(')content(rest)delimiter(')>operator(,) string<delimiter(')content(resultset-seq)delimiter(')>operator(,)
        string<delimiter(')content(reverse)delimiter(')>operator(,) string<delimiter(')content(rfirst)delimiter(')>operator(,) string<delimiter(')content(right)delimiter(')>operator(,) string<delimiter(')content(rights)delimiter(')>operator(,) string<delimiter(')content(root)delimiter(')>operator(,) string<delimiter(')content(rrest)delimiter(')>operator(,) string<delimiter(')content(rseq)delimiter(')>operator(,)
        string<delimiter(')content(second)delimiter(')>operator(,) string<delimiter(')content(select)delimiter(')>operator(,) string<delimiter(')content(select-keys)delimiter(')>operator(,) string<delimiter(')content(send)delimiter(')>operator(,) string<delimiter(')content(send-off)delimiter(')>operator(,) string<delimiter(')content(seq)delimiter(')>operator(,)
        string<delimiter(')content(seq-zip)delimiter(')>operator(,) string<delimiter(')content(seq?)delimiter(')>operator(,) string<delimiter(')content(set)delimiter(')>operator(,) string<delimiter(')content(short)delimiter(')>operator(,) string<delimiter(')content(slurp)delimiter(')>operator(,) string<delimiter(')content(some)delimiter(')>operator(,) string<delimiter(')content(sort)delimiter(')>operator(,)
        string<delimiter(')content(sort-by)delimiter(')>operator(,) string<delimiter(')content(sorted-map)delimiter(')>operator(,) string<delimiter(')content(sorted-map-by)delimiter(')>operator(,) string<delimiter(')content(sorted-set)delimiter(')>operator(,)
        string<delimiter(')content(special-symbol?)delimiter(')>operator(,) string<delimiter(')content(split-at)delimiter(')>operator(,) string<delimiter(')content(split-with)delimiter(')>operator(,) string<delimiter(')content(str)delimiter(')>operator(,) string<delimiter(')content(string?)delimiter(')>operator(,)
        string<delimiter(')content(struct)delimiter(')>operator(,) string<delimiter(')content(struct-map)delimiter(')>operator(,) string<delimiter(')content(subs)delimiter(')>operator(,) string<delimiter(')content(subvec)delimiter(')>operator(,) string<delimiter(')content(symbol)delimiter(')>operator(,) string<delimiter(')content(symbol?)delimiter(')>operator(,)
        string<delimiter(')content(sync)delimiter(')>operator(,) string<delimiter(')content(take)delimiter(')>operator(,) string<delimiter(')content(take-nth)delimiter(')>operator(,) string<delimiter(')content(take-while)delimiter(')>operator(,) string<delimiter(')content(test)delimiter(')>operator(,) string<delimiter(')content(time)delimiter(')>operator(,) string<delimiter(')content(to-array)delimiter(')>operator(,)
        string<delimiter(')content(to-array-2d)delimiter(')>operator(,) string<delimiter(')content(tree-seq)delimiter(')>operator(,) string<delimiter(')content(true?)delimiter(')>operator(,) string<delimiter(')content(union)delimiter(')>operator(,) string<delimiter(')content(up)delimiter(')>operator(,) string<delimiter(')content(update-proxy)delimiter(')>operator(,)
        string<delimiter(')content(val)delimiter(')>operator(,) string<delimiter(')content(vals)delimiter(')>operator(,) string<delimiter(')content(var-get)delimiter(')>operator(,) string<delimiter(')content(var-set)delimiter(')>operator(,) string<delimiter(')content(var?)delimiter(')>operator(,) string<delimiter(')content(vector)delimiter(')>operator(,) string<delimiter(')content(vector-zip)delimiter(')>operator(,)
        string<delimiter(')content(vector?)delimiter(')>operator(,) string<delimiter(')content(when)delimiter(')>operator(,) string<delimiter(')content(when-first)delimiter(')>operator(,) string<delimiter(')content(when-let)delimiter(')>operator(,) string<delimiter(')content(when-not)delimiter(')>operator(,)
        string<delimiter(')content(with-local-vars)delimiter(')>operator(,) string<delimiter(')content(with-meta)delimiter(')>operator(,) string<delimiter(')content(with-open)delimiter(')>operator(,) string<delimiter(')content(with-out-str)delimiter(')>operator(,)
        string<delimiter(')content(xml-seq)delimiter(')>operator(,) string<delimiter(')content(xml-zip)delimiter(')>operator(,) string<delimiter(')content(zero?)delimiter(')>operator(,) string<delimiter(')content(zipmap)delimiter(')>operator(,) string<delimiter(')content(zipper)delimiter(')>operator(])

    comment(# valid names for identifiers)
    comment(# well, names can only not consist fully of numbers)
    comment(# but this should be good enough for now)
    ident(valid_name) operator(=) string<modifier(r)delimiter(')content([a-zA-Z0-9!$%&*+,/:<=>?@^_~-]+)delimiter(')>

    ident(tokens) operator(=) operator({)
        string<delimiter(')content(root)delimiter(')> operator(:) operator([)
            comment(# the comments - always starting with semicolon)
            comment(# and going to the end of the line)
            operator(()string<modifier(r)delimiter(')content(;.*$)delimiter(')>operator(,) ident(Comment)operator(.)ident(Single)operator(\))operator(,)

            comment(# whitespaces - usually not relevant)
            operator(()string<modifier(r)delimiter(')content(\\s)content(+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)

            comment(# numbers)
            operator(()string<modifier(r)delimiter(')content(-?)content(\\d)content(+)content(\\.)content(\\d)content(+)delimiter(')>operator(,) ident(Number)operator(.)ident(Float)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(-?)content(\\d)content(+)delimiter(')>operator(,) ident(Number)operator(.)ident(Integer)operator(\))operator(,)
            comment(# support for uncommon kinds of numbers -)
            comment(# have to figure out what the characters mean)
            comment(#(r'(#e|#i|#b|#o|#d|#x\)[\\d.]+', Number\),)

            comment(# strings, symbols and characters)
            operator(()string<modifier(r)delimiter(')content("()content(\\\\)content(\\\\)content(|)content(\\\\)content("|[^"]\)*")delimiter(')>operator(,) ident(String)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(")content(')delimiter(")> operator(+) ident(valid_name)operator(,) ident(String)operator(.)ident(Symbol)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(")content(\\\\)content(([(\)/')content(\\")content(.'_!Â§$%& ?;=+-]{1}|[a-zA-Z0-9]+\))delimiter(")>operator(,) ident(String)operator(.)ident(Char)operator(\))operator(,)

            comment(# constants)
            operator(()string<modifier(r)delimiter(')content((#t|#f\))delimiter(')>operator(,) ident(Name)operator(.)ident(Constant)operator(\))operator(,)

            comment(# special operators)
            operator(()string<modifier(r)delimiter(")content(('|#|`|,@|,|)content(\\.)content(\))delimiter(")>operator(,) ident(Operator)operator(\))operator(,)

            comment(# highlight the keywords)
            operator(()string<delimiter(')content((%s\))delimiter(')> operator(%) string<delimiter(')content(|)delimiter(')>operator(.)ident(join)operator(()operator([)
                ident(re)operator(.)ident(escape)operator(()ident(entry)operator(\)) operator(+) string<delimiter(')content( )delimiter(')> keyword(for) ident(entry) keyword(in) ident(keywords)operator(])operator(\))operator(,)
                ident(Keyword)
            operator(\))operator(,)

            comment(# first variable in a quoted string like)
            comment(# '(this is syntactic sugar\))
            operator(()string<modifier(r)delimiter(")content((?<=')content(\\()content(\))delimiter(")> operator(+) ident(valid_name)operator(,) ident(Name)operator(.)ident(Variable)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(")content((?<=#)content(\\()content(\))delimiter(")> operator(+) ident(valid_name)operator(,) ident(Name)operator(.)ident(Variable)operator(\))operator(,)

            comment(# highlight the builtins)
            operator(()string<delimiter(")content((?<=)content(\\()content(\)(%s\))delimiter(")> operator(%) string<delimiter(')content(|)delimiter(')>operator(.)ident(join)operator(()operator([)
                ident(re)operator(.)ident(escape)operator(()ident(entry)operator(\)) operator(+) string<delimiter(')content( )delimiter(')> keyword(for) ident(entry) keyword(in) ident(builtins)operator(])operator(\))operator(,)
                ident(Name)operator(.)ident(Builtin)
            operator(\))operator(,)

            comment(# the remaining functions)
            operator(()string<modifier(r)delimiter(')content((?<=)content(\\()content(\))delimiter(')> operator(+) ident(valid_name)operator(,) ident(Name)operator(.)ident(Function)operator(\))operator(,)
            comment(# find the remaining variables)
            operator(()ident(valid_name)operator(,) ident(Name)operator(.)ident(Variable)operator(\))operator(,)

            comment(# Clojure accepts vector notation)
            operator(()string<modifier(r)delimiter(')content(()content(\\[)content(|)content(\\])content(\))delimiter(')>operator(,) ident(Punctuation)operator(\))operator(,)

            comment(# Clojure accepts map notation)
            operator(()string<modifier(r)delimiter(')content(()content(\\{)content(|)content(\\})content(\))delimiter(')>operator(,) ident(Punctuation)operator(\))operator(,)

            comment(# the famous parentheses!)
            operator(()string<modifier(r)delimiter(')content(()content(\\()content(|)content(\\\))content(\))delimiter(')>operator(,) ident(Punctuation)operator(\))operator(,)
        operator(])operator(,)
    operator(})
comment(# -*- coding: utf-8 -*-)
docstring<delimiter(""")content(
)content(    pygments.lexers.asm)content(
)content(    ~~~~~~~~~~~~~~~~~~~)content(
)content(
)content(    Lexers for assembly languages.)content(
)content(
)content(    :copyright: Copyright 2006-2009 by the Pygments team, see AUTHORS.)content(
)content(    :license: BSD, see LICENSE for details.)content(
)delimiter(""")>

keyword(import) include(re)
keyword(try)operator(:)
    predefined(set)
keyword(except) exception(NameError)operator(:)
    keyword(from) include(sets) keyword(import) include(Set) keyword(as) ident(set)

keyword(from) include(pygments.lexer) keyword(import) include(RegexLexer)operator(,) include(include)operator(,) include(bygroups)operator(,) include(using)operator(,) include(DelegatingLexer)
keyword(from) include(pygments.lexers.compiled) keyword(import) include(DLexer)operator(,) include(CppLexer)operator(,) include(CLexer)
keyword(from) include(pygments.token) keyword(import) include(*)

ident(__all__) operator(=) operator([)string<delimiter(')content(GasLexer)delimiter(')>operator(,) string<delimiter(')content(ObjdumpLexer)delimiter(')>operator(,)string<delimiter(')content(DObjdumpLexer)delimiter(')>operator(,) string<delimiter(')content(CppObjdumpLexer)delimiter(')>operator(,)
           string<delimiter(')content(CObjdumpLexer)delimiter(')>operator(,) string<delimiter(')content(LlvmLexer)delimiter(')>operator(,) string<delimiter(')content(NasmLexer)delimiter(')>operator(])


keyword(class) class(GasLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    For Gas (AT&T\) assembly code.)content(
)content(    )delimiter(""")>
    ident(name) operator(=) string<delimiter(')content(GAS)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(gas)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.s)delimiter(')>operator(,) string<delimiter(')content(*.S)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(text/x-gas)delimiter(')>operator(])

    comment(#: optional Comment or Whitespace)
    ident(string) operator(=) string<modifier(r)delimiter(')content("()content(\\\\)content("|[^"]\)*")delimiter(')>
    ident(char) operator(=) string<modifier(r)delimiter(')content([a-zA-Z$._0-9@])delimiter(')>
    ident(identifier) operator(=) string<modifier(r)delimiter(')content((?:[a-zA-Z$_])delimiter(')> operator(+) ident(char) operator(+) string<delimiter(')content(*|)content(\\.)delimiter(')> operator(+) ident(char) operator(+) string<delimiter(')content(+\))delimiter(')>
    ident(number) operator(=) string<modifier(r)delimiter(')content((?:0[xX][a-zA-Z0-9]+|)content(\\d)content(+\))delimiter(')>

    ident(tokens) operator(=) operator({)
        string<delimiter(')content(root)delimiter(')>operator(:) operator([)
            ident(include)operator(()string<delimiter(')content(whitespace)delimiter(')>operator(\))operator(,)
            operator(()ident(identifier) operator(+) string<delimiter(')content(:)delimiter(')>operator(,) ident(Name)operator(.)ident(Label)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\.)delimiter(')> operator(+) ident(identifier)operator(,) ident(Name)operator(.)ident(Attribute)operator(,) string<delimiter(')content(directive-args)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(lock|rep(n?z\)?|data)content(\\d)content(+)delimiter(')>operator(,) ident(Name)operator(.)ident(Attribute)operator(\))operator(,)
            operator(()ident(identifier)operator(,) ident(Name)operator(.)ident(Function)operator(,) string<delimiter(')content(instruction-args)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([)content(\\r)content(\\n)content(]+)delimiter(')>operator(,) ident(Text)operator(\))
        operator(])operator(,)
        string<delimiter(')content(directive-args)delimiter(')>operator(:) operator([)
            operator(()ident(identifier)operator(,) ident(Name)operator(.)ident(Constant)operator(\))operator(,)
            operator(()ident(string)operator(,) ident(String)operator(\))operator(,)
            operator(()string<delimiter(')content(@)delimiter(')> operator(+) ident(identifier)operator(,) ident(Name)operator(.)ident(Attribute)operator(\))operator(,)
            operator(()ident(number)operator(,) ident(Number)operator(.)ident(Integer)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([)content(\\r)content(\\n)content(]+)delimiter(')>operator(,) ident(Text)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)

            operator(()string<modifier(r)delimiter(')content(#.*?$)delimiter(')>operator(,) ident(Comment)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)

            ident(include)operator(()string<delimiter(')content(punctuation)delimiter(')>operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(whitespace)delimiter(')>operator(\))
        operator(])operator(,)
        string<delimiter(')content(instruction-args)delimiter(')>operator(:) operator([)
            comment(# For objdump-disassembled code, shouldn't occur in)
            comment(# actual assembler input)
            operator(()string<delimiter(')content(([a-z0-9]+\)( \)(<\)()delimiter(')>operator(+)ident(identifier)operator(+)string<delimiter(')content(\)(>\))delimiter(')>operator(,)
                ident(bygroups)operator(()ident(Number)operator(.)ident(Hex)operator(,) ident(Text)operator(,) ident(Punctuation)operator(,) ident(Name)operator(.)ident(Constant)operator(,)
                         ident(Punctuation)operator(\))operator(\))operator(,)
            operator(()string<delimiter(')content(([a-z0-9]+\)( \)(<\)()delimiter(')>operator(+)ident(identifier)operator(+)string<delimiter(')content(\)([-+]\)()delimiter(')>operator(+)ident(number)operator(+)string<delimiter(')content(\)(>\))delimiter(')>operator(,)
                ident(bygroups)operator(()ident(Number)operator(.)ident(Hex)operator(,) ident(Text)operator(,) ident(Punctuation)operator(,) ident(Name)operator(.)ident(Constant)operator(,)
                         ident(Punctuation)operator(,) ident(Number)operator(.)ident(Integer)operator(,) ident(Punctuation)operator(\))operator(\))operator(,)

            comment(# Address constants)
            operator(()ident(identifier)operator(,) ident(Name)operator(.)ident(Constant)operator(\))operator(,)
            operator(()ident(number)operator(,) ident(Number)operator(.)ident(Integer)operator(\))operator(,)
            comment(# Registers)
            operator(()string<delimiter(')content(%)delimiter(')> operator(+) ident(identifier)operator(,) ident(Name)operator(.)ident(Variable)operator(\))operator(,)
            comment(# Numeric constants)
            operator(()string<delimiter(')content($)delimiter(')>operator(+)ident(number)operator(,) ident(Number)operator(.)ident(Integer)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([)content(\\r)content(\\n)content(]+)delimiter(')>operator(,) ident(Text)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(#.*?$)delimiter(')>operator(,) ident(Comment)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(punctuation)delimiter(')>operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(whitespace)delimiter(')>operator(\))
        operator(])operator(,)
        string<delimiter(')content(whitespace)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\n)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\s)content(+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(#.*?)content(\\n)delimiter(')>operator(,) ident(Comment)operator(\))
        operator(])operator(,)
        string<delimiter(')content(punctuation)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content([-*,.(\):]+)delimiter(')>operator(,) ident(Punctuation)operator(\))
        operator(])
    operator(})

    keyword(def) method(analyse_text)operator(()ident(text)operator(\))operator(:)
        keyword(return) ident(re)operator(.)ident(match)operator(()string<modifier(r)delimiter(')content(^)content(\\.)content(\\w)content(+)delimiter(')>operator(,) ident(text)operator(,) ident(re)operator(.)ident(M)operator(\))

keyword(class) class(ObjdumpLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    For the output of 'objdump -dr')content(
)content(    )delimiter(""")>
    ident(name) operator(=) string<delimiter(')content(objdump)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(objdump)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.objdump)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(text/x-objdump)delimiter(')>operator(])

    ident(hex) operator(=) string<modifier(r)delimiter(')content([0-9A-Za-z])delimiter(')>

    ident(tokens) operator(=) operator({)
        string<delimiter(')content(root)delimiter(')>operator(:) operator([)
            comment(# File name & format:)
            operator(()string<delimiter(')content((.*?\)(:\)( +file format \)(.*?\)$)delimiter(')>operator(,)
                ident(bygroups)operator(()ident(Name)operator(.)ident(Label)operator(,) ident(Punctuation)operator(,) ident(Text)operator(,) ident(String)operator(\))operator(\))operator(,)
            comment(# Section header)
            operator(()string<delimiter(')content((Disassembly of section \)(.*?\)(:\)$)delimiter(')>operator(,)
                ident(bygroups)operator(()ident(Text)operator(,) ident(Name)operator(.)ident(Label)operator(,) ident(Punctuation)operator(\))operator(\))operator(,)
            comment(# Function labels)
            comment(# (With offset\))
            operator(()string<delimiter(')content(()delimiter(')>operator(+)predefined(hex)operator(+)string<delimiter(')content(+\)( \)(<\)(.*?\)([-+]\)(0[xX][A-Za-z0-9]+\)(>:\)$)delimiter(')>operator(,)
                ident(bygroups)operator(()ident(Number)operator(.)ident(Hex)operator(,) ident(Text)operator(,) ident(Punctuation)operator(,) ident(Name)operator(.)ident(Function)operator(,)
                         ident(Punctuation)operator(,) ident(Number)operator(.)ident(Hex)operator(,) ident(Punctuation)operator(\))operator(\))operator(,)
            comment(# (Without offset\))
            operator(()string<delimiter(')content(()delimiter(')>operator(+)predefined(hex)operator(+)string<delimiter(')content(+\)( \)(<\)(.*?\)(>:\)$)delimiter(')>operator(,)
                ident(bygroups)operator(()ident(Number)operator(.)ident(Hex)operator(,) ident(Text)operator(,) ident(Punctuation)operator(,) ident(Name)operator(.)ident(Function)operator(,)
                         ident(Punctuation)operator(\))operator(\))operator(,)
            comment(# Code line with disassembled instructions)
            operator(()string<delimiter(')content(( *\)()delimiter(')>operator(+)predefined(hex)operator(+)string<modifier(r)delimiter(')content(+:\)()content(\\t)content(\)((?:)delimiter(')>operator(+)predefined(hex)operator(+)predefined(hex)operator(+)string<delimiter(')content( \)+\)( *)char(\\t)content(\)([a-zA-Z].*?\)$)delimiter(')>operator(,)
                ident(bygroups)operator(()ident(Text)operator(,) ident(Name)operator(.)ident(Label)operator(,) ident(Text)operator(,) ident(Number)operator(.)ident(Hex)operator(,) ident(Text)operator(,)
                         ident(using)operator(()ident(GasLexer)operator(\))operator(\))operator(\))operator(,)
            comment(# Code line with ascii)
            operator(()string<delimiter(')content(( *\)()delimiter(')>operator(+)predefined(hex)operator(+)string<modifier(r)delimiter(')content(+:\)()content(\\t)content(\)((?:)delimiter(')>operator(+)predefined(hex)operator(+)predefined(hex)operator(+)string<delimiter(')content( \)+\)( *\)(.*?\)$)delimiter(')>operator(,)
                ident(bygroups)operator(()ident(Text)operator(,) ident(Name)operator(.)ident(Label)operator(,) ident(Text)operator(,) ident(Number)operator(.)ident(Hex)operator(,) ident(Text)operator(,) ident(String)operator(\))operator(\))operator(,)
            comment(# Continued code line, only raw opcodes without disassembled)
            comment(# instruction)
            operator(()string<delimiter(')content(( *\)()delimiter(')>operator(+)predefined(hex)operator(+)string<modifier(r)delimiter(')content(+:\)()content(\\t)content(\)((?:)delimiter(')>operator(+)predefined(hex)operator(+)predefined(hex)operator(+)string<delimiter(')content( \)+\)$)delimiter(')>operator(,)
                ident(bygroups)operator(()ident(Text)operator(,) ident(Name)operator(.)ident(Label)operator(,) ident(Text)operator(,) ident(Number)operator(.)ident(Hex)operator(\))operator(\))operator(,)
            comment(# Skipped a few bytes)
            operator(()string<delimiter(')char(\\t)content(\\.)content(\\.)content(\\.)content($)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            comment(# Relocation line)
            comment(# (With offset\))
            operator(()string<delimiter(')content(()char(\\t)char(\\t)char(\\t)content(\)()delimiter(')>operator(+)predefined(hex)operator(+)string<delimiter(')content(+:\)( \)([^)char(\\t)content(]+\)()char(\\t)content(\)(.*?\)([-+]\)(0x)delimiter(')> operator(+) predefined(hex) operator(+) string<delimiter(')content(+\)$)delimiter(')>operator(,)
                ident(bygroups)operator(()ident(Text)operator(,) ident(Name)operator(.)ident(Label)operator(,) ident(Text)operator(,) ident(Name)operator(.)ident(Property)operator(,) ident(Text)operator(,)
                         ident(Name)operator(.)ident(Constant)operator(,) ident(Punctuation)operator(,) ident(Number)operator(.)ident(Hex)operator(\))operator(\))operator(,)
            comment(# (Without offset\))
            operator(()string<delimiter(')content(()char(\\t)char(\\t)char(\\t)content(\)()delimiter(')>operator(+)predefined(hex)operator(+)string<delimiter(')content(+:\)( \)([^)char(\\t)content(]+\)()char(\\t)content(\)(.*?\)$)delimiter(')>operator(,)
                ident(bygroups)operator(()ident(Text)operator(,) ident(Name)operator(.)ident(Label)operator(,) ident(Text)operator(,) ident(Name)operator(.)ident(Property)operator(,) ident(Text)operator(,)
                         ident(Name)operator(.)ident(Constant)operator(\))operator(\))operator(,)
            operator(()string<delimiter(')content([^)char(\\n)content(]+)char(\\n)delimiter(')>operator(,) ident(Other)operator(\))
        operator(])
    operator(})


keyword(class) class(DObjdumpLexer)operator(()ident(DelegatingLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    For the output of 'objdump -Sr on compiled D files')content(
)content(    )delimiter(""")>
    ident(name) operator(=) string<delimiter(')content(d-objdump)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(d-objdump)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.d-objdump)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(text/x-d-objdump)delimiter(')>operator(])

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))operator(:)
        predefined(super)operator(()ident(DObjdumpLexer)operator(,) predefined_constant(self)operator(\))operator(.)ident(__init__)operator(()ident(DLexer)operator(,) ident(ObjdumpLexer)operator(,) operator(**)ident(options)operator(\))


keyword(class) class(CppObjdumpLexer)operator(()ident(DelegatingLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    For the output of 'objdump -Sr on compiled C++ files')content(
)content(    )delimiter(""")>
    ident(name) operator(=) string<delimiter(')content(cpp-objdump)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(cpp-objdump)delimiter(')>operator(,) string<delimiter(')content(c++-objdumb)delimiter(')>operator(,) string<delimiter(')content(cxx-objdump)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.cpp-objdump)delimiter(')>operator(,) string<delimiter(')content(*.c++-objdump)delimiter(')>operator(,) string<delimiter(')content(*.cxx-objdump)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(text/x-cpp-objdump)delimiter(')>operator(])

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))operator(:)
        predefined(super)operator(()ident(CppObjdumpLexer)operator(,) predefined_constant(self)operator(\))operator(.)ident(__init__)operator(()ident(CppLexer)operator(,) ident(ObjdumpLexer)operator(,) operator(**)ident(options)operator(\))


keyword(class) class(CObjdumpLexer)operator(()ident(DelegatingLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    For the output of 'objdump -Sr on compiled C files')content(
)content(    )delimiter(""")>
    ident(name) operator(=) string<delimiter(')content(c-objdump)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(c-objdump)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.c-objdump)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(text/x-c-objdump)delimiter(')>operator(])

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))operator(:)
        predefined(super)operator(()ident(CObjdumpLexer)operator(,) predefined_constant(self)operator(\))operator(.)ident(__init__)operator(()ident(CLexer)operator(,) ident(ObjdumpLexer)operator(,) operator(**)ident(options)operator(\))


keyword(class) class(LlvmLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    For LLVM assembly code.)content(
)content(    )delimiter(""")>
    ident(name) operator(=) string<delimiter(')content(LLVM)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(llvm)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.ll)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(text/x-llvm)delimiter(')>operator(])

    comment(#: optional Comment or Whitespace)
    ident(string) operator(=) string<modifier(r)delimiter(')content("[^"]*?")delimiter(')>
    ident(identifier) operator(=) string<modifier(r)delimiter(')content(([a-zA-Z$._][a-zA-Z$._0-9]*|)delimiter(')> operator(+) ident(string) operator(+) string<delimiter(')content(\))delimiter(')>

    ident(tokens) operator(=) operator({)
        string<delimiter(')content(root)delimiter(')>operator(:) operator([)
            ident(include)operator(()string<delimiter(')content(whitespace)delimiter(')>operator(\))operator(,)

            comment(# Before keywords, because keywords are valid label names :(...)
            operator(()string<modifier(r)delimiter(')content(^)content(\\s)content(*)delimiter(')> operator(+) ident(identifier) operator(+) string<delimiter(')content(\\s)content(*:)delimiter(')>operator(,) ident(Name)operator(.)ident(Label)operator(\))operator(,)

            ident(include)operator(()string<delimiter(')content(keyword)delimiter(')>operator(\))operator(,)

            operator(()string<modifier(r)delimiter(')content(%)delimiter(')> operator(+) ident(identifier)operator(,) ident(Name)operator(.)ident(Variable)operator(\))operator(,)comment(#Name.Identifier.Local\),)
            operator(()string<modifier(r)delimiter(')content(@)delimiter(')> operator(+) ident(identifier)operator(,) ident(Name)operator(.)ident(Constant)operator(\))operator(,)comment(#Name.Identifier.Global\),)
            operator(()string<modifier(r)delimiter(')content(%)content(\\d)content(+)delimiter(')>operator(,) ident(Name)operator(.)ident(Variable)operator(.)ident(Anonymous)operator(\))operator(,)comment(#Name.Identifier.Anonymous\),)
            operator(()string<modifier(r)delimiter(')content(c?)delimiter(')> operator(+) ident(string)operator(,) ident(String)operator(\))operator(,)

            operator(()string<modifier(r)delimiter(')content(0[xX][a-fA-F0-9]+)delimiter(')>operator(,) ident(Number)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(-?)content(\\d)content(+(?:[.])content(\\d)content(+\)?(?:[eE][-+]?)content(\\d)content(+(?:[.])content(\\d)content(+\)?\)?)delimiter(')>operator(,) ident(Number)operator(\))operator(,)

            operator(()string<modifier(r)delimiter(')content([=<>{})content(\\[)content(\\])content((\)*.,]|x)content(\\b)delimiter(')>operator(,) ident(Punctuation)operator(\))
        operator(])operator(,)
        string<delimiter(')content(whitespace)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(()content(\\n)content(|)content(\\s)content(\)+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(;.*?)content(\\n)delimiter(')>operator(,) ident(Comment)operator(\))
        operator(])operator(,)
        string<delimiter(')content(keyword)delimiter(')>operator(:) operator([)
            comment(# Regular keywords)
            operator(()string<modifier(r)delimiter(')content((void|label|float|double|opaque)delimiter(')>
             string<modifier(r)delimiter(')content(|to)delimiter(')>
             string<modifier(r)delimiter(')content(|alias|type)delimiter(')>
             string<modifier(r)delimiter(')content(|zeroext|signext|inreg|sret|noalias|noreturn|nounwind|nest)delimiter(')>
             string<modifier(r)delimiter(')content(|module|asm|target|datalayout|triple)delimiter(')>
             string<modifier(r)delimiter(')content(|true|false|null|zeroinitializer|undef)delimiter(')>
             string<modifier(r)delimiter(')content(|global|internal|external|linkonce|weak|appending|extern_weak)delimiter(')>
             string<modifier(r)delimiter(')content(|dllimport|dllexport)delimiter(')>
             string<modifier(r)delimiter(')content(|ccc|fastcc|coldcc|cc|tail)delimiter(')>
             string<modifier(r)delimiter(')content(|default|hidden|protected)delimiter(')>
             string<modifier(r)delimiter(')content(|thread_local|constant|align|section)delimiter(')>
             string<modifier(r)delimiter(')content(|define|declare)delimiter(')>

             comment(# Statements & expressions)
             string<modifier(r)delimiter(')content(|trunc|zext|sext|fptrunc|fpext|fptoui|fptosi|uitofp|sitofp)delimiter(')>
             string<modifier(r)delimiter(')content(|ptrtoint|inttoptr|bitcast|getelementptr|select|icmp|fcmp)delimiter(')>
             string<modifier(r)delimiter(')content(|extractelement|insertelement|shufflevector)delimiter(')>
             string<modifier(r)delimiter(')content(|sideeffect|volatile)delimiter(')>
             string<modifier(r)delimiter(')content(|ret|br|switch|invoke|unwind|unreachable)delimiter(')>
             string<modifier(r)delimiter(')content(|add|sub|mul|udiv|sdiv|fdiv|urem|srem|frem)delimiter(')>
             string<modifier(r)delimiter(')content(|shl|lshr|ashr|and|or|xor)delimiter(')>
             string<modifier(r)delimiter(')content(|malloc|free|alloca|load|store)delimiter(')>
             string<modifier(r)delimiter(')content(|phi|call|va_arg|va_list)delimiter(')>

             comment(# Comparison condition codes for icmp)
             string<modifier(r)delimiter(')content(|eq|ne|ugt|uge|ult|ule|sgt|sge|slt|sle)delimiter(')>
             comment(# Ditto for fcmp: (minus keywords mentioned in other contexts\))
             string<modifier(r)delimiter(')content(|oeq|ogt|oge|olt|ole|one|ord|ueq|ugt|uge|une|uno)delimiter(')>

             string<modifier(r)delimiter(')content(\))content(\\b)delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
            comment(# Integer types)
            operator(()string<modifier(r)delimiter(')content(i[1-9])content(\\d)content(*)delimiter(')>operator(,) ident(Keyword)operator(\))
        operator(])
    operator(})


keyword(class) class(NasmLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    For Nasm (Intel\) assembly code.)content(
)content(    )delimiter(""")>
    ident(name) operator(=) string<delimiter(')content(NASM)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(nasm)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.asm)delimiter(')>operator(,) string<delimiter(')content(*.ASM)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(text/x-nasm)delimiter(')>operator(])

    ident(identifier) operator(=) string<modifier(r)delimiter(')content([a-zA-Z$._?][a-zA-Z0-9$._?#@~]*)delimiter(')>
    ident(hexn) operator(=) string<modifier(r)delimiter(')content((?:0[xX][0-9a-fA-F]+|$0[0-9a-fA-F]*|[0-9a-fA-F]+h\))delimiter(')>
    ident(octn) operator(=) string<modifier(r)delimiter(')content([0-7]+q)delimiter(')>
    ident(binn) operator(=) string<modifier(r)delimiter(')content([01]+b)delimiter(')>
    ident(decn) operator(=) string<modifier(r)delimiter(')content([0-9]+)delimiter(')>
    ident(floatn) operator(=) ident(decn) operator(+) string<modifier(r)delimiter(')content(\\.)content(e?)delimiter(')> operator(+) ident(decn)
    ident(string) operator(=) string<modifier(r)delimiter(')content("()content(\\\\)content("|[^"]\)*"|)delimiter(')> operator(+) string<modifier(r)delimiter(")content('()content(\\\\)content('|[^']\)*')delimiter(")>
    ident(declkw) operator(=) string<modifier(r)delimiter(')content((?:res|d\)[bwdqt]|times)delimiter(')>
    ident(register) operator(=) operator(()string<modifier(r)delimiter(')content([a-d][lh]|e?[a-d]x|e?[sb]p|e?[sd]i|[c-gs]s|st[0-7]|)delimiter(')>
                string<modifier(r)delimiter(')content(mm[0-7]|cr[0-4]|dr[0-367]|tr[3-7])delimiter(')>operator(\))
    ident(wordop) operator(=) string<modifier(r)delimiter(')content(seg|wrt|strict)delimiter(')>
    ident(type) operator(=) string<modifier(r)delimiter(')content(byte|[dq]?word)delimiter(')>
    ident(directives) operator(=) operator(()string<modifier(r)delimiter(')content(BITS|USE16|USE32|SECTION|SEGMENT|ABSOLUTE|EXTERN|GLOBAL|)delimiter(')>
                  string<modifier(r)delimiter(')content(COMMON|CPU|GROUP|UPPERCASE|IMPORT|EXPORT|LIBRARY|MODULE)delimiter(')>operator(\))

    ident(flags) operator(=) ident(re)operator(.)ident(IGNORECASE) operator(|) ident(re)operator(.)ident(MULTILINE)
    ident(tokens) operator(=) operator({)
        string<delimiter(')content(root)delimiter(')>operator(:) operator([)
            ident(include)operator(()string<delimiter(')content(whitespace)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(^)content(\\s)content(*%)delimiter(')>operator(,) ident(Comment)operator(.)ident(Preproc)operator(,) string<delimiter(')content(preproc)delimiter(')>operator(\))operator(,)
            operator(()ident(identifier) operator(+) string<delimiter(')content(:)delimiter(')>operator(,) ident(Name)operator(.)ident(Label)operator(\))operator(,)
            operator(()ident(directives)operator(,) ident(Keyword)operator(,) string<delimiter(')content(instruction-args)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((%s\))content(\\s)content(+(equ\))delimiter(')> operator(%) ident(identifier)operator(,)
                ident(bygroups)operator(()ident(Name)operator(.)ident(Constant)operator(,) ident(Keyword)operator(.)ident(Declaration)operator(\))operator(,)
                string<delimiter(')content(instruction-args)delimiter(')>operator(\))operator(,)
            operator(()ident(declkw)operator(,) ident(Keyword)operator(.)ident(Declaration)operator(,) string<delimiter(')content(instruction-args)delimiter(')>operator(\))operator(,)
            operator(()ident(identifier)operator(,) ident(Name)operator(.)ident(Function)operator(,) string<delimiter(')content(instruction-args)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([)content(\\r)content(\\n)content(]+)delimiter(')>operator(,) ident(Text)operator(\))
        operator(])operator(,)
        string<delimiter(')content(instruction-args)delimiter(')>operator(:) operator([)
            operator(()ident(string)operator(,) ident(String)operator(\))operator(,)
            operator(()ident(hexn)operator(,) ident(Number)operator(.)ident(Hex)operator(\))operator(,)
            operator(()ident(octn)operator(,) ident(Number)operator(.)ident(Oct)operator(\))operator(,)
            operator(()ident(binn)operator(,) ident(Number)operator(\))operator(,)
            operator(()ident(floatn)operator(,) ident(Number)operator(.)ident(Float)operator(\))operator(,)
            operator(()ident(decn)operator(,) ident(Number)operator(.)ident(Integer)operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(punctuation)delimiter(')>operator(\))operator(,)
            operator(()ident(register)operator(,) ident(Name)operator(.)ident(Builtin)operator(\))operator(,)
            operator(()ident(identifier)operator(,) ident(Name)operator(.)ident(Variable)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([)content(\\r)content(\\n)content(]+)delimiter(')>operator(,) ident(Text)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(whitespace)delimiter(')>operator(\))
        operator(])operator(,)
        string<delimiter(')content(preproc)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content([^;)content(\\n)content(]+)delimiter(')>operator(,) ident(Comment)operator(.)ident(Preproc)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(;.*?)content(\\n)delimiter(')>operator(,) ident(Comment)operator(.)ident(Single)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\n)delimiter(')>operator(,) ident(Comment)operator(.)ident(Preproc)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(whitespace)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\n)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([ )content(\\t)content(]+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(;.*)delimiter(')>operator(,) ident(Comment)operator(.)ident(Single)operator(\))
        operator(])operator(,)
        string<delimiter(')content(punctuation)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content([,(\):)content(\\[)content(\\])content(]+)delimiter(')>operator(,) ident(Punctuation)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([&|^<>+*/%~-]+)delimiter(')>operator(,) ident(Operator)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([$]+)delimiter(')>operator(,) ident(Keyword)operator(.)ident(Constant)operator(\))operator(,)
            operator(()ident(wordop)operator(,) ident(Operator)operator(.)ident(Word)operator(\))operator(,)
            operator(()predefined(type)operator(,) ident(Keyword)operator(.)ident(Type)operator(\))
        operator(])operator(,)
    operator(})
comment(# -*- coding: utf-8 -*-)
docstring<delimiter(""")content(
)content(    pygments.lexers.compiled)content(
)content(    ~~~~~~~~~~~~~~~~~~~~~~~~)content(
)content(
)content(    Lexers for compiled languages.)content(
)content(
)content(    :copyright: Copyright 2006-2009 by the Pygments team, see AUTHORS.)content(
)content(    :license: BSD, see LICENSE for details.)content(
)delimiter(""")>

keyword(import) include(re)
keyword(try)operator(:)
    predefined(set)
keyword(except) exception(NameError)operator(:)
    keyword(from) include(sets) keyword(import) include(Set) keyword(as) ident(set)

keyword(from) include(pygments.scanner) keyword(import) include(Scanner)
keyword(from) include(pygments.lexer) keyword(import) include(Lexer)operator(,) include(RegexLexer)operator(,) include(include)operator(,) include(bygroups)operator(,) include(using)operator(,) \
                           include(this)operator(,) include(combined)
keyword(from) include(pygments.util) keyword(import) include(get_bool_opt)operator(,) include(get_list_opt)
keyword(from) include(pygments.token) keyword(import) \
     include(Text)operator(,) include(Comment)operator(,) include(Operator)operator(,) include(Keyword)operator(,) include(Name)operator(,) include(String)operator(,) include(Number)operator(,) include(Punctuation)operator(,) \
     include(Error)

comment(# backwards compatibility)
keyword(from) include(pygments.lexers.functional) keyword(import) include(OcamlLexer)

ident(__all__) operator(=) operator([)string<delimiter(')content(CLexer)delimiter(')>operator(,) string<delimiter(')content(CppLexer)delimiter(')>operator(,) string<delimiter(')content(DLexer)delimiter(')>operator(,) string<delimiter(')content(DelphiLexer)delimiter(')>operator(,) string<delimiter(')content(JavaLexer)delimiter(')>operator(,) string<delimiter(')content(ScalaLexer)delimiter(')>operator(,)
           string<delimiter(')content(DylanLexer)delimiter(')>operator(,) string<delimiter(')content(OcamlLexer)delimiter(')>operator(,) string<delimiter(')content(ObjectiveCLexer)delimiter(')>operator(,) string<delimiter(')content(FortranLexer)delimiter(')>operator(,)
           string<delimiter(')content(GLShaderLexer)delimiter(')>operator(,) string<delimiter(')content(PrologLexer)delimiter(')>operator(,) string<delimiter(')content(CythonLexer)delimiter(')>operator(])


keyword(class) class(CLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    For C source code with preprocessor directives.)content(
)content(    )delimiter(""")>
    ident(name) operator(=) string<delimiter(')content(C)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(c)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.c)delimiter(')>operator(,) string<delimiter(')content(*.h)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(text/x-chdr)delimiter(')>operator(,) string<delimiter(')content(text/x-csrc)delimiter(')>operator(])

    comment(#: optional Comment or Whitespace)
    ident(_ws) operator(=) string<modifier(r)delimiter(')content((?:)content(\\s)content(|//.*?)content(\\n)content(|/[*].*?[*]/\)+)delimiter(')>

    ident(tokens) operator(=) operator({)
        string<delimiter(')content(whitespace)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(^)content(\\s)content(*#if)content(\\s)content(+0)delimiter(')>operator(,) ident(Comment)operator(.)ident(Preproc)operator(,) string<delimiter(')content(if0)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(^)content(\\s)content(*#)delimiter(')>operator(,) ident(Comment)operator(.)ident(Preproc)operator(,) string<delimiter(')content(macro)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\n)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\s)content(+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\\\)content(\\n)delimiter(')>operator(,) ident(Text)operator(\))operator(,) comment(# line continuation)
            operator(()string<modifier(r)delimiter(')content(//()content(\\n)content(|(.|)content(\\n)content(\)*?[^)content(\\\\)content(])content(\\n)content(\))delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(/()content(\\\\)content(\\n)content(\)?[*](.|)content(\\n)content(\)*?[*]()content(\\\\)content(\\n)content(\)?/)delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(statements)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(L?")delimiter(')>operator(,) ident(String)operator(,) string<delimiter(')content(string)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(")content(L?'()content(\\\\)content(.|)content(\\\\)content([0-7]{1,3}|)content(\\\\)content(x[a-fA-F0-9]{1,2}|[^)content(\\\\)content(\\')content(\\n)content(]\)')delimiter(")>operator(,) ident(String)operator(.)ident(Char)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(()content(\\d)content(+)content(\\.)content(\\d)content(*|)content(\\.)content(\\d)content(+|)content(\\d)content(+\)[eE][+-]?)content(\\d)content(+[lL]?)delimiter(')>operator(,) ident(Number)operator(.)ident(Float)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(()content(\\d)content(+)content(\\.)content(\\d)content(*|)content(\\.)content(\\d)content(+|)content(\\d)content(+[fF]\)[fF]?)delimiter(')>operator(,) ident(Number)operator(.)ident(Float)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(0x[0-9a-fA-F]+[Ll]?)delimiter(')>operator(,) ident(Number)operator(.)ident(Hex)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(0[0-7]+[Ll]?)delimiter(')>operator(,) ident(Number)operator(.)ident(Oct)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\d)content(+[Ll]?)delimiter(')>operator(,) ident(Number)operator(.)ident(Integer)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([~!%^&*+=|?:<>/-])delimiter(')>operator(,) ident(Operator)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([(\))content(\\[)content(\\])content(,.])delimiter(')>operator(,) ident(Punctuation)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\b)content((case\)(.+?\)(:\))delimiter(')>operator(,) ident(bygroups)operator(()ident(Keyword)operator(,) ident(using)operator(()ident(this)operator(\))operator(,) ident(Text)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((auto|break|case|const|continue|default|do|else|enum|extern|)delimiter(')>
             string<modifier(r)delimiter(')content(for|goto|if|register|restricted|return|sizeof|static|struct|)delimiter(')>
             string<modifier(r)delimiter(')content(switch|typedef|union|volatile|virtual|while\))content(\\b)delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((int|long|float|short|double|char|unsigned|signed|void\))content(\\b)delimiter(')>operator(,)
             ident(Keyword)operator(.)ident(Type)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((_{0,2}inline|naked|restrict|thread|typename\))content(\\b)delimiter(')>operator(,) ident(Keyword)operator(.)ident(Reserved)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(__(asm|int8|based|except|int16|stdcall|cdecl|fastcall|int32|)delimiter(')>
             string<modifier(r)delimiter(')content(declspec|finally|int64|try|leave\))content(\\b)delimiter(')>operator(,) ident(Keyword)operator(.)ident(Reserved)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((true|false|NULL\))content(\\b)delimiter(')>operator(,) ident(Name)operator(.)ident(Builtin)operator(\))operator(,)
            operator(()string<delimiter(')content([a-zA-Z_][a-zA-Z0-9_]*:(?!:\))delimiter(')>operator(,) ident(Name)operator(.)ident(Label)operator(\))operator(,)
            operator(()string<delimiter(')content([a-zA-Z_][a-zA-Z0-9_]*)delimiter(')>operator(,) ident(Name)operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(root)delimiter(')>operator(:) operator([)
            ident(include)operator(()string<delimiter(')content(whitespace)delimiter(')>operator(\))operator(,)
            comment(# functions)
            operator(()string<modifier(r)delimiter(')content(((?:[a-zA-Z0-9_*)content(\\s)content(]\)+?(?:)content(\\s)content(|[*]\)\))delimiter(')>    comment(# return arguments)
             string<modifier(r)delimiter(')content(([a-zA-Z_][a-zA-Z0-9_]*\))delimiter(')>             comment(# method name)
             string<modifier(r)delimiter(')content(()content(\\s)content(*)content(\\()content([^;]*?)content(\\\))content(\))delimiter(')>                      comment(# signature)
             string<modifier(r)delimiter(')content(()delimiter(')> operator(+) ident(_ws) operator(+) string<modifier(r)delimiter(')content(\)({\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(using)operator(()ident(this)operator(\))operator(,) ident(Name)operator(.)ident(Function)operator(,) ident(using)operator(()ident(this)operator(\))operator(,) ident(using)operator(()ident(this)operator(\))operator(,)
                      ident(Punctuation)operator(\))operator(,)
             string<delimiter(')content(function)delimiter(')>operator(\))operator(,)
            comment(# function declarations)
            operator(()string<modifier(r)delimiter(')content(((?:[a-zA-Z0-9_*)content(\\s)content(]\)+?(?:)content(\\s)content(|[*]\)\))delimiter(')>    comment(# return arguments)
             string<modifier(r)delimiter(')content(([a-zA-Z_][a-zA-Z0-9_]*\))delimiter(')>             comment(# method name)
             string<modifier(r)delimiter(')content(()content(\\s)content(*)content(\\()content([^;]*?)content(\\\))content(\))delimiter(')>                      comment(# signature)
             string<modifier(r)delimiter(')content(()delimiter(')> operator(+) ident(_ws) operator(+) string<modifier(r)delimiter(')content(\)(;\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(using)operator(()ident(this)operator(\))operator(,) ident(Name)operator(.)ident(Function)operator(,) ident(using)operator(()ident(this)operator(\))operator(,) ident(using)operator(()ident(this)operator(\))operator(,)
                      ident(Punctuation)operator(\))operator(\))operator(,)
            operator(()string<delimiter(')delimiter(')>operator(,) ident(Text)operator(,) string<delimiter(')content(statement)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(statement)delimiter(')> operator(:) operator([)
            ident(include)operator(()string<delimiter(')content(whitespace)delimiter(')>operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(statements)delimiter(')>operator(\))operator(,)
            operator(()string<delimiter(')content([{}])delimiter(')>operator(,) ident(Punctuation)operator(\))operator(,)
            operator(()string<delimiter(')content(;)delimiter(')>operator(,) ident(Punctuation)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(function)delimiter(')>operator(:) operator([)
            ident(include)operator(()string<delimiter(')content(whitespace)delimiter(')>operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(statements)delimiter(')>operator(\))operator(,)
            operator(()string<delimiter(')content(;)delimiter(')>operator(,) ident(Punctuation)operator(\))operator(,)
            operator(()string<delimiter(')content({)delimiter(')>operator(,) ident(Punctuation)operator(,) string<delimiter(')content(#push)delimiter(')>operator(\))operator(,)
            operator(()string<delimiter(')content(})delimiter(')>operator(,) ident(Punctuation)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(string)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(")delimiter(')>operator(,) ident(String)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\\\)content(([)content(\\\\)content(abfnrtv")content(\\')content(]|x[a-fA-F0-9]{2,4}|[0-7]{1,3}\))delimiter(')>operator(,) ident(String)operator(.)ident(Escape)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([^)content(\\\\)content(")content(\\n)content(]+)delimiter(')>operator(,) ident(String)operator(\))operator(,) comment(# all other characters)
            operator(()string<modifier(r)delimiter(')content(\\\\)content(\\n)delimiter(')>operator(,) ident(String)operator(\))operator(,) comment(# line continuation)
            operator(()string<modifier(r)delimiter(')content(\\\\)delimiter(')>operator(,) ident(String)operator(\))operator(,) comment(# stray backslash)
        operator(])operator(,)
        string<delimiter(')content(macro)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content([^/)content(\\n)content(]+)delimiter(')>operator(,) ident(Comment)operator(.)ident(Preproc)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(/[*](.|)content(\\n)content(\)*?[*]/)delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(//.*?)content(\\n)delimiter(')>operator(,) ident(Comment)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(/)delimiter(')>operator(,) ident(Comment)operator(.)ident(Preproc)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((?<=)content(\\\\)content(\))content(\\n)delimiter(')>operator(,) ident(Comment)operator(.)ident(Preproc)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\n)delimiter(')>operator(,) ident(Comment)operator(.)ident(Preproc)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(if0)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(^)content(\\s)content(*#if.*?(?<!)content(\\\\)content(\))content(\\n)delimiter(')>operator(,) ident(Comment)operator(,) string<delimiter(')content(#push)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(^)content(\\s)content(*#el(?:se|if\).*)content(\\n)delimiter(')>operator(,) ident(Comment)operator(.)ident(Preproc)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(^)content(\\s)content(*#endif.*?(?<!)content(\\\\)content(\))content(\\n)delimiter(')>operator(,) ident(Comment)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(.*?)content(\\n)delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
        operator(])
    operator(})

    ident(stdlib_types) operator(=) operator([)string<delimiter(')content(size_t)delimiter(')>operator(,) string<delimiter(')content(ssize_t)delimiter(')>operator(,) string<delimiter(')content(off_t)delimiter(')>operator(,) string<delimiter(')content(wchar_t)delimiter(')>operator(,) string<delimiter(')content(ptrdiff_t)delimiter(')>operator(,)
            string<delimiter(')content(sig_atomic_t)delimiter(')>operator(,) string<delimiter(')content(fpos_t)delimiter(')>operator(,) string<delimiter(')content(clock_t)delimiter(')>operator(,) string<delimiter(')content(time_t)delimiter(')>operator(,) string<delimiter(')content(va_list)delimiter(')>operator(,)
            string<delimiter(')content(jmp_buf)delimiter(')>operator(,) string<delimiter(')content(FILE)delimiter(')>operator(,) string<delimiter(')content(DIR)delimiter(')>operator(,) string<delimiter(')content(div_t)delimiter(')>operator(,) string<delimiter(')content(ldiv_t)delimiter(')>operator(,) string<delimiter(')content(mbstate_t)delimiter(')>operator(,)
            string<delimiter(')content(wctrans_t)delimiter(')>operator(,) string<delimiter(')content(wint_t)delimiter(')>operator(,) string<delimiter(')content(wctype_t)delimiter(')>operator(])
    ident(c99_types) operator(=) operator([)string<delimiter(')content(_Bool)delimiter(')>operator(,) string<delimiter(')content(_Complex)delimiter(')>operator(,) string<delimiter(')content(int8_t)delimiter(')>operator(,) string<delimiter(')content(int16_t)delimiter(')>operator(,) string<delimiter(')content(int32_t)delimiter(')>operator(,) string<delimiter(')content(int64_t)delimiter(')>operator(,)
            string<delimiter(')content(uint8_t)delimiter(')>operator(,) string<delimiter(')content(uint16_t)delimiter(')>operator(,) string<delimiter(')content(uint32_t)delimiter(')>operator(,) string<delimiter(')content(uint64_t)delimiter(')>operator(,) string<delimiter(')content(int_least8_t)delimiter(')>operator(,)
            string<delimiter(')content(int_least16_t)delimiter(')>operator(,) string<delimiter(')content(int_least32_t)delimiter(')>operator(,) string<delimiter(')content(int_least64_t)delimiter(')>operator(,)
            string<delimiter(')content(uint_least8_t)delimiter(')>operator(,) string<delimiter(')content(uint_least16_t)delimiter(')>operator(,) string<delimiter(')content(uint_least32_t)delimiter(')>operator(,)
            string<delimiter(')content(uint_least64_t)delimiter(')>operator(,) string<delimiter(')content(int_fast8_t)delimiter(')>operator(,) string<delimiter(')content(int_fast16_t)delimiter(')>operator(,) string<delimiter(')content(int_fast32_t)delimiter(')>operator(,)
            string<delimiter(')content(int_fast64_t)delimiter(')>operator(,) string<delimiter(')content(uint_fast8_t)delimiter(')>operator(,) string<delimiter(')content(uint_fast16_t)delimiter(')>operator(,) string<delimiter(')content(uint_fast32_t)delimiter(')>operator(,)
            string<delimiter(')content(uint_fast64_t)delimiter(')>operator(,) string<delimiter(')content(intptr_t)delimiter(')>operator(,) string<delimiter(')content(uintptr_t)delimiter(')>operator(,) string<delimiter(')content(intmax_t)delimiter(')>operator(,) string<delimiter(')content(uintmax_t)delimiter(')>operator(])

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))operator(:)
        predefined_constant(self)operator(.)ident(stdlibhighlighting) operator(=) ident(get_bool_opt)operator(()ident(options)operator(,)
                string<delimiter(')content(stdlibhighlighting)delimiter(')>operator(,) predefined_constant(True)operator(\))
        predefined_constant(self)operator(.)ident(c99highlighting) operator(=) ident(get_bool_opt)operator(()ident(options)operator(,)
                string<delimiter(')content(c99highlighting)delimiter(')>operator(,) predefined_constant(True)operator(\))
        ident(RegexLexer)operator(.)ident(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))

    keyword(def) method(get_tokens_unprocessed)operator(()predefined_constant(self)operator(,) ident(text)operator(\))operator(:)
        keyword(for) ident(index)operator(,) ident(token)operator(,) ident(value) keyword(in) \
            ident(RegexLexer)operator(.)ident(get_tokens_unprocessed)operator(()predefined_constant(self)operator(,) ident(text)operator(\))operator(:)
            keyword(if) ident(token) keyword(is) ident(Name)operator(:)
                keyword(if) predefined_constant(self)operator(.)ident(stdlibhighlighting) keyword(and) ident(value) keyword(in) predefined_constant(self)operator(.)ident(stdlib_types)operator(:)
                    ident(token) operator(=) ident(Keyword)operator(.)ident(Type)
                keyword(elif) predefined_constant(self)operator(.)ident(c99highlighting) keyword(and) ident(value) keyword(in) predefined_constant(self)operator(.)ident(c99_types)operator(:)
                    ident(token) operator(=) ident(Keyword)operator(.)ident(Type)
            keyword(yield) ident(index)operator(,) ident(token)operator(,) ident(value)

keyword(class) class(CppLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    For C++ source code with preprocessor directives.)content(
)content(    )delimiter(""")>
    ident(name) operator(=) string<delimiter(')content(C++)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(cpp)delimiter(')>operator(,) string<delimiter(')content(c++)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.cpp)delimiter(')>operator(,) string<delimiter(')content(*.hpp)delimiter(')>operator(,) string<delimiter(')content(*.c++)delimiter(')>operator(,) string<delimiter(')content(*.h++)delimiter(')>operator(,) string<delimiter(')content(*.cc)delimiter(')>operator(,) string<delimiter(')content(*.hh)delimiter(')>operator(,) string<delimiter(')content(*.cxx)delimiter(')>operator(,) string<delimiter(')content(*.hxx)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(text/x-c++hdr)delimiter(')>operator(,) string<delimiter(')content(text/x-c++src)delimiter(')>operator(])

    ident(tokens) operator(=) operator({)
        string<delimiter(')content(root)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(^)content(\\s)content(*#if)content(\\s)content(+0)delimiter(')>operator(,) ident(Comment)operator(.)ident(Preproc)operator(,) string<delimiter(')content(if0)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(^)content(\\s)content(*#)delimiter(')>operator(,) ident(Comment)operator(.)ident(Preproc)operator(,) string<delimiter(')content(macro)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\n)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\s)content(+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\\\)content(\\n)delimiter(')>operator(,) ident(Text)operator(\))operator(,) comment(# line continuation)
            operator(()string<modifier(r)delimiter(')content(/()content(\\\\)content(\\n)content(\)?/()content(\\n)content(|(.|)content(\\n)content(\)*?[^)content(\\\\)content(])content(\\n)content(\))delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(/()content(\\\\)content(\\n)content(\)?[*](.|)content(\\n)content(\)*?[*]()content(\\\\)content(\\n)content(\)?/)delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([{}])delimiter(')>operator(,) ident(Punctuation)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(L?")delimiter(')>operator(,) ident(String)operator(,) string<delimiter(')content(string)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(")content(L?'()content(\\\\)content(.|)content(\\\\)content([0-7]{1,3}|)content(\\\\)content(x[a-fA-F0-9]{1,2}|[^)content(\\\\)content(\\')content(\\n)content(]\)')delimiter(")>operator(,) ident(String)operator(.)ident(Char)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(()content(\\d)content(+)content(\\.)content(\\d)content(*|)content(\\.)content(\\d)content(+|)content(\\d)content(+\)[eE][+-]?)content(\\d)content(+[lL]?)delimiter(')>operator(,) ident(Number)operator(.)ident(Float)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(()content(\\d)content(+)content(\\.)content(\\d)content(*|)content(\\.)content(\\d)content(+|)content(\\d)content(+[fF]\)[fF]?)delimiter(')>operator(,) ident(Number)operator(.)ident(Float)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(0x[0-9a-fA-F]+[Ll]?)delimiter(')>operator(,) ident(Number)operator(.)ident(Hex)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(0[0-7]+[Ll]?)delimiter(')>operator(,) ident(Number)operator(.)ident(Oct)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\d)content(+[Ll]?)delimiter(')>operator(,) ident(Number)operator(.)ident(Integer)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([~!%^&*+=|?:<>/-])delimiter(')>operator(,) ident(Operator)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([(\))content(\\[)content(\\])content(,.;])delimiter(')>operator(,) ident(Punctuation)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((asm|auto|break|case|catch|const|const_cast|continue|)delimiter(')>
             string<modifier(r)delimiter(')content(default|delete|do|dynamic_cast|else|enum|explicit|export|)delimiter(')>
             string<modifier(r)delimiter(')content(extern|for|friend|goto|if|mutable|namespace|new|operator|)delimiter(')>
             string<modifier(r)delimiter(')content(private|protected|public|register|reinterpret_cast|return|)delimiter(')>
             string<modifier(r)delimiter(')content(restrict|sizeof|static|static_cast|struct|switch|template|)delimiter(')>
             string<modifier(r)delimiter(')content(this|throw|throws|try|typedef|typeid|typename|union|using|)delimiter(')>
             string<modifier(r)delimiter(')content(volatile|virtual|while\))content(\\b)delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((class\)()content(\\s)content(+\))delimiter(')>operator(,) ident(bygroups)operator(()ident(Keyword)operator(,) ident(Text)operator(\))operator(,) string<delimiter(')content(classname)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((bool|int|long|float|short|double|char|unsigned|signed|)delimiter(')>
             string<modifier(r)delimiter(')content(void|wchar_t\))content(\\b)delimiter(')>operator(,) ident(Keyword)operator(.)ident(Type)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((_{0,2}inline|naked|thread\))content(\\b)delimiter(')>operator(,) ident(Keyword)operator(.)ident(Reserved)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(__(asm|int8|based|except|int16|stdcall|cdecl|fastcall|int32|)delimiter(')>
             string<modifier(r)delimiter(')content(declspec|finally|int64|try|leave|wchar_t|w64|virtual_inheritance|)delimiter(')>
             string<modifier(r)delimiter(')content(uuidof|unaligned|super|single_inheritance|raise|noop|)delimiter(')>
             string<modifier(r)delimiter(')content(multiple_inheritance|m128i|m128d|m128|m64|interface|)delimiter(')>
             string<modifier(r)delimiter(')content(identifier|forceinline|event|assume\))content(\\b)delimiter(')>operator(,) ident(Keyword)operator(.)ident(Reserved)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((true|false\))content(\\b)delimiter(')>operator(,) ident(Keyword)operator(.)ident(Constant)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(NULL)content(\\b)delimiter(')>operator(,) ident(Name)operator(.)ident(Builtin)operator(\))operator(,)
            operator(()string<delimiter(')content([a-zA-Z_][a-zA-Z0-9_]*:(?!:\))delimiter(')>operator(,) ident(Name)operator(.)ident(Label)operator(\))operator(,)
            operator(()string<delimiter(')content([a-zA-Z_][a-zA-Z0-9_]*)delimiter(')>operator(,) ident(Name)operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(classname)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content([a-zA-Z_][a-zA-Z0-9_]*)delimiter(')>operator(,) ident(Name)operator(.)ident(Class)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            comment(# template specification)
            operator(()string<modifier(r)delimiter(')content(\\s)content(*(?=>\))delimiter(')>operator(,) ident(Text)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(string)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(")delimiter(')>operator(,) ident(String)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\\\)content(([)content(\\\\)content(abfnrtv")content(\\')content(]|x[a-fA-F0-9]{2,4}|[0-7]{1,3}\))delimiter(')>operator(,) ident(String)operator(.)ident(Escape)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([^)content(\\\\)content(")content(\\n)content(]+)delimiter(')>operator(,) ident(String)operator(\))operator(,) comment(# all other characters)
            operator(()string<modifier(r)delimiter(')content(\\\\)content(\\n)delimiter(')>operator(,) ident(String)operator(\))operator(,) comment(# line continuation)
            operator(()string<modifier(r)delimiter(')content(\\\\)delimiter(')>operator(,) ident(String)operator(\))operator(,) comment(# stray backslash)
        operator(])operator(,)
        string<delimiter(')content(macro)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content([^/)content(\\n)content(]+)delimiter(')>operator(,) ident(Comment)operator(.)ident(Preproc)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(/[*](.|)content(\\n)content(\)*?[*]/)delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(//.*?)content(\\n)delimiter(')>operator(,) ident(Comment)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(/)delimiter(')>operator(,) ident(Comment)operator(.)ident(Preproc)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((?<=)content(\\\\)content(\))content(\\n)delimiter(')>operator(,) ident(Comment)operator(.)ident(Preproc)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\n)delimiter(')>operator(,) ident(Comment)operator(.)ident(Preproc)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(if0)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(^)content(\\s)content(*#if.*?(?<!)content(\\\\)content(\))content(\\n)delimiter(')>operator(,) ident(Comment)operator(,) string<delimiter(')content(#push)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(^)content(\\s)content(*#endif.*?(?<!)content(\\\\)content(\))content(\\n)delimiter(')>operator(,) ident(Comment)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(.*?)content(\\n)delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
        operator(])
    operator(})


keyword(class) class(DLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    For D source.)content(
)content(    )delimiter(""")>
    ident(name) operator(=) string<delimiter(')content(D)delimiter(')>
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.d)delimiter(')>operator(,) string<delimiter(')content(*.di)delimiter(')>operator(])
    ident(aliases) operator(=) operator([)string<delimiter(')content(d)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(text/x-dsrc)delimiter(')>operator(])

    ident(tokens) operator(=) operator({)
        string<delimiter(')content(root)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\n)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\s)content(+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            comment(#(r'\\\\\\n', Text\), # line continuations)
            comment(# Comments)
            operator(()string<modifier(r)delimiter(')content(//(.*?\))content(\\n)delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(/()content(\\\\)content(\\n)content(\)?[*](.|)content(\\n)content(\)*?[*]()content(\\\\)content(\\n)content(\)?/)delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(/)content(\\+)delimiter(')>operator(,) ident(Comment)operator(,) string<delimiter(')content(nested_comment)delimiter(')>operator(\))operator(,)
            comment(# Keywords)
            operator(()string<modifier(r)delimiter(')content((abstract|alias|align|asm|assert|auto|body|break|case|cast)delimiter(')>
             string<modifier(r)delimiter(')content(|catch|class|const|continue|debug|default|delegate|delete)delimiter(')>
             string<modifier(r)delimiter(')content(|deprecated|do|else|enum|export|extern|finally|final)delimiter(')>
             string<modifier(r)delimiter(')content(|foreach_reverse|foreach|for|function|goto|if|import|inout)delimiter(')>
             string<modifier(r)delimiter(')content(|interface|invariant|in|is|lazy|mixin|module|new|nothrow|out)delimiter(')>
             string<modifier(r)delimiter(')content(|override|package|pragma|private|protected|public|pure|ref|return)delimiter(')>
             string<modifier(r)delimiter(')content(|scope|static|struct|super|switch|synchronized|template|this)delimiter(')>
             string<modifier(r)delimiter(')content(|throw|try|typedef|typeid|typeof|union|unittest|version|volatile)delimiter(')>
             string<modifier(r)delimiter(')content(|while|with|__traits\))content(\\b)delimiter(')>operator(,) ident(Keyword)
            operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((bool|byte|cdouble|cent|cfloat|char|creal|dchar|double|float)delimiter(')>
             string<modifier(r)delimiter(')content(|idouble|ifloat|int|ireal|long|real|short|ubyte|ucent|uint|ulong)delimiter(')>
             string<modifier(r)delimiter(')content(|ushort|void|wchar\))content(\\b)delimiter(')>operator(,) ident(Keyword)operator(.)ident(Type)
            operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((false|true|null\))content(\\b)delimiter(')>operator(,) ident(Keyword)operator(.)ident(Constant)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(macro)content(\\b)delimiter(')>operator(,) ident(Keyword)operator(.)ident(Reserved)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((string|wstring|dstring\))content(\\b)delimiter(')>operator(,) ident(Name)operator(.)ident(Builtin)operator(\))operator(,)
            comment(# FloatLiteral)
            comment(# -- HexFloat)
            operator(()string<modifier(r)delimiter(')content(0[xX]([0-9a-fA-F_]*)content(\\.)content([0-9a-fA-F_]+|[0-9a-fA-F_]+\))delimiter(')>
             string<modifier(r)delimiter(')content([pP][+)content(\\-)content(]?[0-9_]+[fFL]?[i]?)delimiter(')>operator(,) ident(Number)operator(.)ident(Float)operator(\))operator(,)
            comment(# -- DecimalFloat)
            operator(()string<modifier(r)delimiter(')content([0-9_]+()content(\\.)content([0-9_]+[eE][+)content(\\-)content(]?[0-9_]+|)delimiter(')>
             string<modifier(r)delimiter(')content(\\.)content([0-9_]*|[eE][+)content(\\-)content(]?[0-9_]+\)[fFL]?[i]?)delimiter(')>operator(,) ident(Number)operator(.)ident(Float)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\.)content((0|[1-9][0-9_]*\)([eE][+)content(\\-)content(]?[0-9_]+\)?[fFL]?[i]?)delimiter(')>operator(,) ident(Number)operator(.)ident(Float)operator(\))operator(,)
            comment(# IntegerLiteral)
            comment(# -- Binary)
            operator(()string<modifier(r)delimiter(')content(0[Bb][01_]+)delimiter(')>operator(,) ident(Number)operator(\))operator(,)
            comment(# -- Octal)
            operator(()string<modifier(r)delimiter(')content(0[0-7_]+)delimiter(')>operator(,) ident(Number)operator(.)ident(Oct)operator(\))operator(,)
            comment(# -- Hexadecimal)
            operator(()string<modifier(r)delimiter(')content(0[xX][0-9a-fA-F_]+)delimiter(')>operator(,) ident(Number)operator(.)ident(Hex)operator(\))operator(,)
            comment(# -- Decimal)
            operator(()string<modifier(r)delimiter(')content((0|[1-9][0-9_]*\)([LUu]|Lu|LU|uL|UL\)?)delimiter(')>operator(,) ident(Number)operator(.)ident(Integer)operator(\))operator(,)
            comment(# CharacterLiteral)
            operator(()string<modifier(r)delimiter(""")content('()content(\\\\)content(['"?)content(\\\\)content(abfnrtv]|)content(\\\\)content(x[0-9a-fA-F]{2}|)content(\\\\)content([0-7]{1,3})delimiter(""")>
             docstring<modifier(r)delimiter(""")content(|)content(\\\\)content(u[0-9a-fA-F]{4}|)content(\\\\)content(U[0-9a-fA-F]{8}|)content(\\\\)content(&)content(\\w)content(+;|.\)')delimiter(""")>operator(,)
             ident(String)operator(.)ident(Char)
            operator(\))operator(,)
            comment(# StringLiteral)
            comment(# -- WysiwygString)
            operator(()string<modifier(r)delimiter(')content(r"[^"]*"[cwd]?)delimiter(')>operator(,) ident(String)operator(\))operator(,)
            comment(# -- AlternateWysiwygString)
            operator(()string<modifier(r)delimiter(')content(`[^`]*`[cwd]?)delimiter(')>operator(,) ident(String)operator(\))operator(,)
            comment(# -- DoubleQuotedString)
            operator(()string<modifier(r)delimiter(')content("()content(\\\\)content(\\\\)content(|)content(\\\\)content("|[^"]\)*"[cwd]?)delimiter(')>operator(,) ident(String)operator(\))operator(,)
            comment(# -- EscapeSequence)
            operator(()string<modifier(r)delimiter(""")content(\\\\)content((['"?)content(\\\\)content(abfnrtv]|x[0-9a-fA-F]{2}|[0-7]{1,3})delimiter(""")>
             docstring<modifier(r)delimiter(""")content(|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8}|&)content(\\w)content(+;\))delimiter(""")>operator(,)
             ident(String)
            operator(\))operator(,)
            comment(# -- HexString)
            operator(()string<modifier(r)delimiter(')content(x"[0-9a-fA-F_)content(\\s)content(]*"[cwd]?)delimiter(')>operator(,) ident(String)operator(\))operator(,)
            comment(# -- DelimitedString)
            operator(()string<modifier(r)delimiter(')content(q")content(\\[)delimiter(')>operator(,) ident(String)operator(,) string<delimiter(')content(delimited_bracket)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(q")content(\\()delimiter(')>operator(,) ident(String)operator(,) string<delimiter(')content(delimited_parenthesis)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(q"<)delimiter(')>operator(,) ident(String)operator(,) string<delimiter(')content(delimited_angle)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(q"{)delimiter(')>operator(,) ident(String)operator(,) string<delimiter(')content(delimited_curly)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(q"([a-zA-Z_])content(\\w)content(*\))content(\\n)content(.*?)content(\\n)content(\\1)content(")delimiter(')>operator(,) ident(String)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(q"(.\).*?)content(\\1)content(")delimiter(')>operator(,) ident(String)operator(\))operator(,)
            comment(# -- TokenString)
            operator(()string<modifier(r)delimiter(')content(q{)delimiter(')>operator(,) ident(String)operator(,) string<delimiter(')content(token_string)delimiter(')>operator(\))operator(,)
            comment(# Tokens)
            operator(()string<modifier(r)delimiter(')content((~=|)content(\\^)content(=|%=|)content(\\*)content(=|==|!>=|!<=|!<>=|!<>|!<|!>|!=|>>>=|>>>|>>=|>>|>=)delimiter(')>
             string<modifier(r)delimiter(')content(|<>=|<>|<<=|<<|<=|)content(\\+)content(\\+)content(|)content(\\+)content(=|--|-=|)content(\\|)content(\\|)content(|)content(\\|)content(=|&&|&=|)content(\\.)content(\\.)content(\\.)content(|)content(\\.)content(\\.)content(|/=\))delimiter(')>
             string<modifier(r)delimiter(')content(|[/.&|)content(\\-)content(+<>!(\))content(\\[)content(\\])content({}?,;:$=*%^~])delimiter(')>operator(,) ident(Punctuation)
            operator(\))operator(,)
            comment(# Identifier)
            operator(()string<modifier(r)delimiter(')content([a-zA-Z_])content(\\w)content(*)delimiter(')>operator(,) ident(Name)operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(nested_comment)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content([^+/]+)delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(/)content(\\+)delimiter(')>operator(,) ident(Comment)operator(,) string<delimiter(')content(#push)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\+)content(/)delimiter(')>operator(,) ident(Comment)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([+/])delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(token_string)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content({)delimiter(')>operator(,) ident(Punctuation)operator(,) string<delimiter(')content(token_string_nest)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(})delimiter(')>operator(,) ident(String)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(root)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(token_string_nest)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content({)delimiter(')>operator(,) ident(Punctuation)operator(,) string<delimiter(')content(#push)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(})delimiter(')>operator(,) ident(Punctuation)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(root)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(delimited_bracket)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content([^)content(\\[)content(\\])content(]+)delimiter(')>operator(,) ident(String)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\[)delimiter(')>operator(,) ident(String)operator(,) string<delimiter(')content(delimited_inside_bracket)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\])content(")delimiter(')>operator(,) ident(String)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(delimited_inside_bracket)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content([^)content(\\[)content(\\])content(]+)delimiter(')>operator(,) ident(String)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\[)delimiter(')>operator(,) ident(String)operator(,) string<delimiter(')content(#push)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\])delimiter(')>operator(,) ident(String)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(delimited_parenthesis)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content([^)content(\\()content(\\\))content(]+)delimiter(')>operator(,) ident(String)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\()delimiter(')>operator(,) ident(String)operator(,) string<delimiter(')content(delimited_inside_parenthesis)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\\))content(")delimiter(')>operator(,) ident(String)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(delimited_inside_parenthesis)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content([^)content(\\()content(\\\))content(]+)delimiter(')>operator(,) ident(String)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\()delimiter(')>operator(,) ident(String)operator(,) string<delimiter(')content(#push)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\\))delimiter(')>operator(,) ident(String)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(delimited_angle)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content([^<>]+)delimiter(')>operator(,) ident(String)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(<)delimiter(')>operator(,) ident(String)operator(,) string<delimiter(')content(delimited_inside_angle)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(>")delimiter(')>operator(,) ident(String)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(delimited_inside_angle)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content([^<>]+)delimiter(')>operator(,) ident(String)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(<)delimiter(')>operator(,) ident(String)operator(,) string<delimiter(')content(#push)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(>)delimiter(')>operator(,) ident(String)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(delimited_curly)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content([^{}]+)delimiter(')>operator(,) ident(String)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content({)delimiter(')>operator(,) ident(String)operator(,) string<delimiter(')content(delimited_inside_curly)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(}")delimiter(')>operator(,) ident(String)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(delimited_inside_curly)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content([^{}]+)delimiter(')>operator(,) ident(String)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content({)delimiter(')>operator(,) ident(String)operator(,) string<delimiter(')content(#push)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(})delimiter(')>operator(,) ident(String)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
    operator(})


keyword(class) class(DelphiLexer)operator(()ident(Lexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    For `Delphi <http://www.borland.com/delphi/>`_ (Borland Object Pascal\),)content(
)content(    Turbo Pascal and Free Pascal source code.)content(
)content(
)content(    Additional options accepted:)content(
)content(
)content(    `turbopascal`)content(
)content(        Highlight Turbo Pascal specific keywords (default: ``True``\).)content(
)content(    `delphi`)content(
)content(        Highlight Borland Delphi specific keywords (default: ``True``\).)content(
)content(    `freepascal`)content(
)content(        Highlight Free Pascal specific keywords (default: ``True``\).)content(
)content(    `units`)content(
)content(        A list of units that should be considered builtin, supported are)content(
)content(        ``System``, ``SysUtils``, ``Classes`` and ``Math``.)content(
)content(        Default is to consider all of them builtin.)content(
)content(    )delimiter(""")>
    ident(name) operator(=) string<delimiter(')content(Delphi)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(delphi)delimiter(')>operator(,) string<delimiter(')content(pas)delimiter(')>operator(,) string<delimiter(')content(pascal)delimiter(')>operator(,) string<delimiter(')content(objectpascal)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.pas)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(text/x-pascal)delimiter(')>operator(])

    ident(TURBO_PASCAL_KEYWORDS) operator(=) operator([)
        string<delimiter(')content(absolute)delimiter(')>operator(,) string<delimiter(')content(and)delimiter(')>operator(,) string<delimiter(')content(array)delimiter(')>operator(,) string<delimiter(')content(asm)delimiter(')>operator(,) string<delimiter(')content(begin)delimiter(')>operator(,) string<delimiter(')content(break)delimiter(')>operator(,) string<delimiter(')content(case)delimiter(')>operator(,)
        string<delimiter(')content(const)delimiter(')>operator(,) string<delimiter(')content(constructor)delimiter(')>operator(,) string<delimiter(')content(continue)delimiter(')>operator(,) string<delimiter(')content(destructor)delimiter(')>operator(,) string<delimiter(')content(div)delimiter(')>operator(,) string<delimiter(')content(do)delimiter(')>operator(,)
        string<delimiter(')content(downto)delimiter(')>operator(,) string<delimiter(')content(else)delimiter(')>operator(,) string<delimiter(')content(end)delimiter(')>operator(,) string<delimiter(')content(file)delimiter(')>operator(,) string<delimiter(')content(for)delimiter(')>operator(,) string<delimiter(')content(function)delimiter(')>operator(,) string<delimiter(')content(goto)delimiter(')>operator(,)
        string<delimiter(')content(if)delimiter(')>operator(,) string<delimiter(')content(implementation)delimiter(')>operator(,) string<delimiter(')content(in)delimiter(')>operator(,) string<delimiter(')content(inherited)delimiter(')>operator(,) string<delimiter(')content(inline)delimiter(')>operator(,) string<delimiter(')content(interface)delimiter(')>operator(,)
        string<delimiter(')content(label)delimiter(')>operator(,) string<delimiter(')content(mod)delimiter(')>operator(,) string<delimiter(')content(nil)delimiter(')>operator(,) string<delimiter(')content(not)delimiter(')>operator(,) string<delimiter(')content(object)delimiter(')>operator(,) string<delimiter(')content(of)delimiter(')>operator(,) string<delimiter(')content(on)delimiter(')>operator(,) string<delimiter(')content(operator)delimiter(')>operator(,)
        string<delimiter(')content(or)delimiter(')>operator(,) string<delimiter(')content(packed)delimiter(')>operator(,) string<delimiter(')content(procedure)delimiter(')>operator(,) string<delimiter(')content(program)delimiter(')>operator(,) string<delimiter(')content(record)delimiter(')>operator(,) string<delimiter(')content(reintroduce)delimiter(')>operator(,)
        string<delimiter(')content(repeat)delimiter(')>operator(,) string<delimiter(')content(self)delimiter(')>operator(,) string<delimiter(')content(set)delimiter(')>operator(,) string<delimiter(')content(shl)delimiter(')>operator(,) string<delimiter(')content(shr)delimiter(')>operator(,) string<delimiter(')content(string)delimiter(')>operator(,) string<delimiter(')content(then)delimiter(')>operator(,) string<delimiter(')content(to)delimiter(')>operator(,)
        string<delimiter(')content(type)delimiter(')>operator(,) string<delimiter(')content(unit)delimiter(')>operator(,) string<delimiter(')content(until)delimiter(')>operator(,) string<delimiter(')content(uses)delimiter(')>operator(,) string<delimiter(')content(var)delimiter(')>operator(,) string<delimiter(')content(while)delimiter(')>operator(,) string<delimiter(')content(with)delimiter(')>operator(,) string<delimiter(')content(xor)delimiter(')>
    operator(])

    ident(DELPHI_KEYWORDS) operator(=) operator([)
        string<delimiter(')content(as)delimiter(')>operator(,) string<delimiter(')content(class)delimiter(')>operator(,) string<delimiter(')content(except)delimiter(')>operator(,) string<delimiter(')content(exports)delimiter(')>operator(,) string<delimiter(')content(finalization)delimiter(')>operator(,) string<delimiter(')content(finally)delimiter(')>operator(,)
        string<delimiter(')content(initialization)delimiter(')>operator(,) string<delimiter(')content(is)delimiter(')>operator(,) string<delimiter(')content(library)delimiter(')>operator(,) string<delimiter(')content(on)delimiter(')>operator(,) string<delimiter(')content(property)delimiter(')>operator(,) string<delimiter(')content(raise)delimiter(')>operator(,)
        string<delimiter(')content(threadvar)delimiter(')>operator(,) string<delimiter(')content(try)delimiter(')>
    operator(])

    ident(FREE_PASCAL_KEYWORDS) operator(=) operator([)
        string<delimiter(')content(dispose)delimiter(')>operator(,) string<delimiter(')content(exit)delimiter(')>operator(,) string<delimiter(')content(false)delimiter(')>operator(,) string<delimiter(')content(new)delimiter(')>operator(,) string<delimiter(')content(true)delimiter(')>
    operator(])

    ident(BLOCK_KEYWORDS) operator(=) predefined(set)operator(()operator([)
        string<delimiter(')content(begin)delimiter(')>operator(,) string<delimiter(')content(class)delimiter(')>operator(,) string<delimiter(')content(const)delimiter(')>operator(,) string<delimiter(')content(constructor)delimiter(')>operator(,) string<delimiter(')content(destructor)delimiter(')>operator(,) string<delimiter(')content(end)delimiter(')>operator(,)
        string<delimiter(')content(finalization)delimiter(')>operator(,) string<delimiter(')content(function)delimiter(')>operator(,) string<delimiter(')content(implementation)delimiter(')>operator(,) string<delimiter(')content(initialization)delimiter(')>operator(,)
        string<delimiter(')content(label)delimiter(')>operator(,) string<delimiter(')content(library)delimiter(')>operator(,) string<delimiter(')content(operator)delimiter(')>operator(,) string<delimiter(')content(procedure)delimiter(')>operator(,) string<delimiter(')content(program)delimiter(')>operator(,) string<delimiter(')content(property)delimiter(')>operator(,)
        string<delimiter(')content(record)delimiter(')>operator(,) string<delimiter(')content(threadvar)delimiter(')>operator(,) string<delimiter(')content(type)delimiter(')>operator(,) string<delimiter(')content(unit)delimiter(')>operator(,) string<delimiter(')content(uses)delimiter(')>operator(,) string<delimiter(')content(var)delimiter(')>
    operator(])operator(\))

    ident(FUNCTION_MODIFIERS) operator(=) predefined(set)operator(()operator([)
        string<delimiter(')content(alias)delimiter(')>operator(,) string<delimiter(')content(cdecl)delimiter(')>operator(,) string<delimiter(')content(export)delimiter(')>operator(,) string<delimiter(')content(inline)delimiter(')>operator(,) string<delimiter(')content(interrupt)delimiter(')>operator(,) string<delimiter(')content(nostackframe)delimiter(')>operator(,)
        string<delimiter(')content(pascal)delimiter(')>operator(,) string<delimiter(')content(register)delimiter(')>operator(,) string<delimiter(')content(safecall)delimiter(')>operator(,) string<delimiter(')content(softfloat)delimiter(')>operator(,) string<delimiter(')content(stdcall)delimiter(')>operator(,)
        string<delimiter(')content(varargs)delimiter(')>operator(,) string<delimiter(')content(name)delimiter(')>operator(,) string<delimiter(')content(dynamic)delimiter(')>operator(,) string<delimiter(')content(near)delimiter(')>operator(,) string<delimiter(')content(virtual)delimiter(')>operator(,) string<delimiter(')content(external)delimiter(')>operator(,)
        string<delimiter(')content(override)delimiter(')>operator(,) string<delimiter(')content(assembler)delimiter(')>
    operator(])operator(\))

    comment(# XXX: those aren't global. but currently we know no way for defining)
    comment(#      them just for the type context.)
    ident(DIRECTIVES) operator(=) predefined(set)operator(()operator([)
        string<delimiter(')content(absolute)delimiter(')>operator(,) string<delimiter(')content(abstract)delimiter(')>operator(,) string<delimiter(')content(assembler)delimiter(')>operator(,) string<delimiter(')content(cppdecl)delimiter(')>operator(,) string<delimiter(')content(default)delimiter(')>operator(,) string<delimiter(')content(far)delimiter(')>operator(,)
        string<delimiter(')content(far16)delimiter(')>operator(,) string<delimiter(')content(forward)delimiter(')>operator(,) string<delimiter(')content(index)delimiter(')>operator(,) string<delimiter(')content(oldfpccall)delimiter(')>operator(,) string<delimiter(')content(private)delimiter(')>operator(,) string<delimiter(')content(protected)delimiter(')>operator(,)
        string<delimiter(')content(published)delimiter(')>operator(,) string<delimiter(')content(public)delimiter(')>
    operator(])operator(\))

    ident(BUILTIN_TYPES) operator(=) predefined(set)operator(()operator([)
        string<delimiter(')content(ansichar)delimiter(')>operator(,) string<delimiter(')content(ansistring)delimiter(')>operator(,) string<delimiter(')content(bool)delimiter(')>operator(,) string<delimiter(')content(boolean)delimiter(')>operator(,) string<delimiter(')content(byte)delimiter(')>operator(,) string<delimiter(')content(bytebool)delimiter(')>operator(,)
        string<delimiter(')content(cardinal)delimiter(')>operator(,) string<delimiter(')content(char)delimiter(')>operator(,) string<delimiter(')content(comp)delimiter(')>operator(,) string<delimiter(')content(currency)delimiter(')>operator(,) string<delimiter(')content(double)delimiter(')>operator(,) string<delimiter(')content(dword)delimiter(')>operator(,)
        string<delimiter(')content(extended)delimiter(')>operator(,) string<delimiter(')content(int64)delimiter(')>operator(,) string<delimiter(')content(integer)delimiter(')>operator(,) string<delimiter(')content(iunknown)delimiter(')>operator(,) string<delimiter(')content(longbool)delimiter(')>operator(,) string<delimiter(')content(longint)delimiter(')>operator(,)
        string<delimiter(')content(longword)delimiter(')>operator(,) string<delimiter(')content(pansichar)delimiter(')>operator(,) string<delimiter(')content(pansistring)delimiter(')>operator(,) string<delimiter(')content(pbool)delimiter(')>operator(,) string<delimiter(')content(pboolean)delimiter(')>operator(,)
        string<delimiter(')content(pbyte)delimiter(')>operator(,) string<delimiter(')content(pbytearray)delimiter(')>operator(,) string<delimiter(')content(pcardinal)delimiter(')>operator(,) string<delimiter(')content(pchar)delimiter(')>operator(,) string<delimiter(')content(pcomp)delimiter(')>operator(,) string<delimiter(')content(pcurrency)delimiter(')>operator(,)
        string<delimiter(')content(pdate)delimiter(')>operator(,) string<delimiter(')content(pdatetime)delimiter(')>operator(,) string<delimiter(')content(pdouble)delimiter(')>operator(,) string<delimiter(')content(pdword)delimiter(')>operator(,) string<delimiter(')content(pextended)delimiter(')>operator(,) string<delimiter(')content(phandle)delimiter(')>operator(,)
        string<delimiter(')content(pint64)delimiter(')>operator(,) string<delimiter(')content(pinteger)delimiter(')>operator(,) string<delimiter(')content(plongint)delimiter(')>operator(,) string<delimiter(')content(plongword)delimiter(')>operator(,) string<delimiter(')content(pointer)delimiter(')>operator(,)
        string<delimiter(')content(ppointer)delimiter(')>operator(,) string<delimiter(')content(pshortint)delimiter(')>operator(,) string<delimiter(')content(pshortstring)delimiter(')>operator(,) string<delimiter(')content(psingle)delimiter(')>operator(,) string<delimiter(')content(psmallint)delimiter(')>operator(,)
        string<delimiter(')content(pstring)delimiter(')>operator(,) string<delimiter(')content(pvariant)delimiter(')>operator(,) string<delimiter(')content(pwidechar)delimiter(')>operator(,) string<delimiter(')content(pwidestring)delimiter(')>operator(,) string<delimiter(')content(pword)delimiter(')>operator(,)
        string<delimiter(')content(pwordarray)delimiter(')>operator(,) string<delimiter(')content(pwordbool)delimiter(')>operator(,) string<delimiter(')content(real)delimiter(')>operator(,) string<delimiter(')content(real48)delimiter(')>operator(,) string<delimiter(')content(shortint)delimiter(')>operator(,)
        string<delimiter(')content(shortstring)delimiter(')>operator(,) string<delimiter(')content(single)delimiter(')>operator(,) string<delimiter(')content(smallint)delimiter(')>operator(,) string<delimiter(')content(string)delimiter(')>operator(,) string<delimiter(')content(tclass)delimiter(')>operator(,) string<delimiter(')content(tdate)delimiter(')>operator(,)
        string<delimiter(')content(tdatetime)delimiter(')>operator(,) string<delimiter(')content(textfile)delimiter(')>operator(,) string<delimiter(')content(thandle)delimiter(')>operator(,) string<delimiter(')content(tobject)delimiter(')>operator(,) string<delimiter(')content(ttime)delimiter(')>operator(,) string<delimiter(')content(variant)delimiter(')>operator(,)
        string<delimiter(')content(widechar)delimiter(')>operator(,) string<delimiter(')content(widestring)delimiter(')>operator(,) string<delimiter(')content(word)delimiter(')>operator(,) string<delimiter(')content(wordbool)delimiter(')>
    operator(])operator(\))

    ident(BUILTIN_UNITS) operator(=) operator({)
        string<delimiter(')content(System)delimiter(')>operator(:) operator([)
            string<delimiter(')content(abs)delimiter(')>operator(,) string<delimiter(')content(acquireexceptionobject)delimiter(')>operator(,) string<delimiter(')content(addr)delimiter(')>operator(,) string<delimiter(')content(ansitoutf8)delimiter(')>operator(,)
            string<delimiter(')content(append)delimiter(')>operator(,) string<delimiter(')content(arctan)delimiter(')>operator(,) string<delimiter(')content(assert)delimiter(')>operator(,) string<delimiter(')content(assigned)delimiter(')>operator(,) string<delimiter(')content(assignfile)delimiter(')>operator(,)
            string<delimiter(')content(beginthread)delimiter(')>operator(,) string<delimiter(')content(blockread)delimiter(')>operator(,) string<delimiter(')content(blockwrite)delimiter(')>operator(,) string<delimiter(')content(break)delimiter(')>operator(,) string<delimiter(')content(chdir)delimiter(')>operator(,)
            string<delimiter(')content(chr)delimiter(')>operator(,) string<delimiter(')content(close)delimiter(')>operator(,) string<delimiter(')content(closefile)delimiter(')>operator(,) string<delimiter(')content(comptocurrency)delimiter(')>operator(,) string<delimiter(')content(comptodouble)delimiter(')>operator(,)
            string<delimiter(')content(concat)delimiter(')>operator(,) string<delimiter(')content(continue)delimiter(')>operator(,) string<delimiter(')content(copy)delimiter(')>operator(,) string<delimiter(')content(cos)delimiter(')>operator(,) string<delimiter(')content(dec)delimiter(')>operator(,) string<delimiter(')content(delete)delimiter(')>operator(,)
            string<delimiter(')content(dispose)delimiter(')>operator(,) string<delimiter(')content(doubletocomp)delimiter(')>operator(,) string<delimiter(')content(endthread)delimiter(')>operator(,) string<delimiter(')content(enummodules)delimiter(')>operator(,)
            string<delimiter(')content(enumresourcemodules)delimiter(')>operator(,) string<delimiter(')content(eof)delimiter(')>operator(,) string<delimiter(')content(eoln)delimiter(')>operator(,) string<delimiter(')content(erase)delimiter(')>operator(,) string<delimiter(')content(exceptaddr)delimiter(')>operator(,)
            string<delimiter(')content(exceptobject)delimiter(')>operator(,) string<delimiter(')content(exclude)delimiter(')>operator(,) string<delimiter(')content(exit)delimiter(')>operator(,) string<delimiter(')content(exp)delimiter(')>operator(,) string<delimiter(')content(filepos)delimiter(')>operator(,) string<delimiter(')content(filesize)delimiter(')>operator(,)
            string<delimiter(')content(fillchar)delimiter(')>operator(,) string<delimiter(')content(finalize)delimiter(')>operator(,) string<delimiter(')content(findclasshinstance)delimiter(')>operator(,) string<delimiter(')content(findhinstance)delimiter(')>operator(,)
            string<delimiter(')content(findresourcehinstance)delimiter(')>operator(,) string<delimiter(')content(flush)delimiter(')>operator(,) string<delimiter(')content(frac)delimiter(')>operator(,) string<delimiter(')content(freemem)delimiter(')>operator(,)
            string<delimiter(')content(get8087cw)delimiter(')>operator(,) string<delimiter(')content(getdir)delimiter(')>operator(,) string<delimiter(')content(getlasterror)delimiter(')>operator(,) string<delimiter(')content(getmem)delimiter(')>operator(,)
            string<delimiter(')content(getmemorymanager)delimiter(')>operator(,) string<delimiter(')content(getmodulefilename)delimiter(')>operator(,) string<delimiter(')content(getvariantmanager)delimiter(')>operator(,)
            string<delimiter(')content(halt)delimiter(')>operator(,) string<delimiter(')content(hi)delimiter(')>operator(,) string<delimiter(')content(high)delimiter(')>operator(,) string<delimiter(')content(inc)delimiter(')>operator(,) string<delimiter(')content(include)delimiter(')>operator(,) string<delimiter(')content(initialize)delimiter(')>operator(,) string<delimiter(')content(insert)delimiter(')>operator(,)
            string<delimiter(')content(int)delimiter(')>operator(,) string<delimiter(')content(ioresult)delimiter(')>operator(,) string<delimiter(')content(ismemorymanagerset)delimiter(')>operator(,) string<delimiter(')content(isvariantmanagerset)delimiter(')>operator(,)
            string<delimiter(')content(length)delimiter(')>operator(,) string<delimiter(')content(ln)delimiter(')>operator(,) string<delimiter(')content(lo)delimiter(')>operator(,) string<delimiter(')content(low)delimiter(')>operator(,) string<delimiter(')content(mkdir)delimiter(')>operator(,) string<delimiter(')content(move)delimiter(')>operator(,) string<delimiter(')content(new)delimiter(')>operator(,) string<delimiter(')content(odd)delimiter(')>operator(,)
            string<delimiter(')content(olestrtostring)delimiter(')>operator(,) string<delimiter(')content(olestrtostrvar)delimiter(')>operator(,) string<delimiter(')content(ord)delimiter(')>operator(,) string<delimiter(')content(paramcount)delimiter(')>operator(,)
            string<delimiter(')content(paramstr)delimiter(')>operator(,) string<delimiter(')content(pi)delimiter(')>operator(,) string<delimiter(')content(pos)delimiter(')>operator(,) string<delimiter(')content(pred)delimiter(')>operator(,) string<delimiter(')content(ptr)delimiter(')>operator(,) string<delimiter(')content(pucs4chars)delimiter(')>operator(,) string<delimiter(')content(random)delimiter(')>operator(,)
            string<delimiter(')content(randomize)delimiter(')>operator(,) string<delimiter(')content(read)delimiter(')>operator(,) string<delimiter(')content(readln)delimiter(')>operator(,) string<delimiter(')content(reallocmem)delimiter(')>operator(,)
            string<delimiter(')content(releaseexceptionobject)delimiter(')>operator(,) string<delimiter(')content(rename)delimiter(')>operator(,) string<delimiter(')content(reset)delimiter(')>operator(,) string<delimiter(')content(rewrite)delimiter(')>operator(,) string<delimiter(')content(rmdir)delimiter(')>operator(,)
            string<delimiter(')content(round)delimiter(')>operator(,) string<delimiter(')content(runerror)delimiter(')>operator(,) string<delimiter(')content(seek)delimiter(')>operator(,) string<delimiter(')content(seekeof)delimiter(')>operator(,) string<delimiter(')content(seekeoln)delimiter(')>operator(,)
            string<delimiter(')content(set8087cw)delimiter(')>operator(,) string<delimiter(')content(setlength)delimiter(')>operator(,) string<delimiter(')content(setlinebreakstyle)delimiter(')>operator(,)
            string<delimiter(')content(setmemorymanager)delimiter(')>operator(,) string<delimiter(')content(setstring)delimiter(')>operator(,) string<delimiter(')content(settextbuf)delimiter(')>operator(,)
            string<delimiter(')content(setvariantmanager)delimiter(')>operator(,) string<delimiter(')content(sin)delimiter(')>operator(,) string<delimiter(')content(sizeof)delimiter(')>operator(,) string<delimiter(')content(slice)delimiter(')>operator(,) string<delimiter(')content(sqr)delimiter(')>operator(,) string<delimiter(')content(sqrt)delimiter(')>operator(,)
            string<delimiter(')content(str)delimiter(')>operator(,) string<delimiter(')content(stringofchar)delimiter(')>operator(,) string<delimiter(')content(stringtoolestr)delimiter(')>operator(,) string<delimiter(')content(stringtowidechar)delimiter(')>operator(,)
            string<delimiter(')content(succ)delimiter(')>operator(,) string<delimiter(')content(swap)delimiter(')>operator(,) string<delimiter(')content(trunc)delimiter(')>operator(,) string<delimiter(')content(truncate)delimiter(')>operator(,) string<delimiter(')content(typeinfo)delimiter(')>operator(,)
            string<delimiter(')content(ucs4stringtowidestring)delimiter(')>operator(,) string<delimiter(')content(unicodetoutf8)delimiter(')>operator(,) string<delimiter(')content(uniquestring)delimiter(')>operator(,)
            string<delimiter(')content(upcase)delimiter(')>operator(,) string<delimiter(')content(utf8decode)delimiter(')>operator(,) string<delimiter(')content(utf8encode)delimiter(')>operator(,) string<delimiter(')content(utf8toansi)delimiter(')>operator(,)
            string<delimiter(')content(utf8tounicode)delimiter(')>operator(,) string<delimiter(')content(val)delimiter(')>operator(,) string<delimiter(')content(vararrayredim)delimiter(')>operator(,) string<delimiter(')content(varclear)delimiter(')>operator(,)
            string<delimiter(')content(widecharlentostring)delimiter(')>operator(,) string<delimiter(')content(widecharlentostrvar)delimiter(')>operator(,)
            string<delimiter(')content(widechartostring)delimiter(')>operator(,) string<delimiter(')content(widechartostrvar)delimiter(')>operator(,)
            string<delimiter(')content(widestringtoucs4string)delimiter(')>operator(,) string<delimiter(')content(write)delimiter(')>operator(,) string<delimiter(')content(writeln)delimiter(')>
        operator(])operator(,)
        string<delimiter(')content(SysUtils)delimiter(')>operator(:) operator([)
            string<delimiter(')content(abort)delimiter(')>operator(,) string<delimiter(')content(addexitproc)delimiter(')>operator(,) string<delimiter(')content(addterminateproc)delimiter(')>operator(,) string<delimiter(')content(adjustlinebreaks)delimiter(')>operator(,)
            string<delimiter(')content(allocmem)delimiter(')>operator(,) string<delimiter(')content(ansicomparefilename)delimiter(')>operator(,) string<delimiter(')content(ansicomparestr)delimiter(')>operator(,)
            string<delimiter(')content(ansicomparetext)delimiter(')>operator(,) string<delimiter(')content(ansidequotedstr)delimiter(')>operator(,) string<delimiter(')content(ansiextractquotedstr)delimiter(')>operator(,)
            string<delimiter(')content(ansilastchar)delimiter(')>operator(,) string<delimiter(')content(ansilowercase)delimiter(')>operator(,) string<delimiter(')content(ansilowercasefilename)delimiter(')>operator(,)
            string<delimiter(')content(ansipos)delimiter(')>operator(,) string<delimiter(')content(ansiquotedstr)delimiter(')>operator(,) string<delimiter(')content(ansisamestr)delimiter(')>operator(,) string<delimiter(')content(ansisametext)delimiter(')>operator(,)
            string<delimiter(')content(ansistrcomp)delimiter(')>operator(,) string<delimiter(')content(ansistricomp)delimiter(')>operator(,) string<delimiter(')content(ansistrlastchar)delimiter(')>operator(,) string<delimiter(')content(ansistrlcomp)delimiter(')>operator(,)
            string<delimiter(')content(ansistrlicomp)delimiter(')>operator(,) string<delimiter(')content(ansistrlower)delimiter(')>operator(,) string<delimiter(')content(ansistrpos)delimiter(')>operator(,) string<delimiter(')content(ansistrrscan)delimiter(')>operator(,)
            string<delimiter(')content(ansistrscan)delimiter(')>operator(,) string<delimiter(')content(ansistrupper)delimiter(')>operator(,) string<delimiter(')content(ansiuppercase)delimiter(')>operator(,)
            string<delimiter(')content(ansiuppercasefilename)delimiter(')>operator(,) string<delimiter(')content(appendstr)delimiter(')>operator(,) string<delimiter(')content(assignstr)delimiter(')>operator(,) string<delimiter(')content(beep)delimiter(')>operator(,)
            string<delimiter(')content(booltostr)delimiter(')>operator(,) string<delimiter(')content(bytetocharindex)delimiter(')>operator(,) string<delimiter(')content(bytetocharlen)delimiter(')>operator(,) string<delimiter(')content(bytetype)delimiter(')>operator(,)
            string<delimiter(')content(callterminateprocs)delimiter(')>operator(,) string<delimiter(')content(changefileext)delimiter(')>operator(,) string<delimiter(')content(charlength)delimiter(')>operator(,)
            string<delimiter(')content(chartobyteindex)delimiter(')>operator(,) string<delimiter(')content(chartobytelen)delimiter(')>operator(,) string<delimiter(')content(comparemem)delimiter(')>operator(,) string<delimiter(')content(comparestr)delimiter(')>operator(,)
            string<delimiter(')content(comparetext)delimiter(')>operator(,) string<delimiter(')content(createdir)delimiter(')>operator(,) string<delimiter(')content(createguid)delimiter(')>operator(,) string<delimiter(')content(currentyear)delimiter(')>operator(,)
            string<delimiter(')content(currtostr)delimiter(')>operator(,) string<delimiter(')content(currtostrf)delimiter(')>operator(,) string<delimiter(')content(date)delimiter(')>operator(,) string<delimiter(')content(datetimetofiledate)delimiter(')>operator(,)
            string<delimiter(')content(datetimetostr)delimiter(')>operator(,) string<delimiter(')content(datetimetostring)delimiter(')>operator(,) string<delimiter(')content(datetimetosystemtime)delimiter(')>operator(,)
            string<delimiter(')content(datetimetotimestamp)delimiter(')>operator(,) string<delimiter(')content(datetostr)delimiter(')>operator(,) string<delimiter(')content(dayofweek)delimiter(')>operator(,) string<delimiter(')content(decodedate)delimiter(')>operator(,)
            string<delimiter(')content(decodedatefully)delimiter(')>operator(,) string<delimiter(')content(decodetime)delimiter(')>operator(,) string<delimiter(')content(deletefile)delimiter(')>operator(,) string<delimiter(')content(directoryexists)delimiter(')>operator(,)
            string<delimiter(')content(diskfree)delimiter(')>operator(,) string<delimiter(')content(disksize)delimiter(')>operator(,) string<delimiter(')content(disposestr)delimiter(')>operator(,) string<delimiter(')content(encodedate)delimiter(')>operator(,) string<delimiter(')content(encodetime)delimiter(')>operator(,)
            string<delimiter(')content(exceptionerrormessage)delimiter(')>operator(,) string<delimiter(')content(excludetrailingbackslash)delimiter(')>operator(,)
            string<delimiter(')content(excludetrailingpathdelimiter)delimiter(')>operator(,) string<delimiter(')content(expandfilename)delimiter(')>operator(,)
            string<delimiter(')content(expandfilenamecase)delimiter(')>operator(,) string<delimiter(')content(expanduncfilename)delimiter(')>operator(,) string<delimiter(')content(extractfiledir)delimiter(')>operator(,)
            string<delimiter(')content(extractfiledrive)delimiter(')>operator(,) string<delimiter(')content(extractfileext)delimiter(')>operator(,) string<delimiter(')content(extractfilename)delimiter(')>operator(,)
            string<delimiter(')content(extractfilepath)delimiter(')>operator(,) string<delimiter(')content(extractrelativepath)delimiter(')>operator(,) string<delimiter(')content(extractshortpathname)delimiter(')>operator(,)
            string<delimiter(')content(fileage)delimiter(')>operator(,) string<delimiter(')content(fileclose)delimiter(')>operator(,) string<delimiter(')content(filecreate)delimiter(')>operator(,) string<delimiter(')content(filedatetodatetime)delimiter(')>operator(,)
            string<delimiter(')content(fileexists)delimiter(')>operator(,) string<delimiter(')content(filegetattr)delimiter(')>operator(,) string<delimiter(')content(filegetdate)delimiter(')>operator(,) string<delimiter(')content(fileisreadonly)delimiter(')>operator(,)
            string<delimiter(')content(fileopen)delimiter(')>operator(,) string<delimiter(')content(fileread)delimiter(')>operator(,) string<delimiter(')content(filesearch)delimiter(')>operator(,) string<delimiter(')content(fileseek)delimiter(')>operator(,) string<delimiter(')content(filesetattr)delimiter(')>operator(,)
            string<delimiter(')content(filesetdate)delimiter(')>operator(,) string<delimiter(')content(filesetreadonly)delimiter(')>operator(,) string<delimiter(')content(filewrite)delimiter(')>operator(,) string<delimiter(')content(finalizepackage)delimiter(')>operator(,)
            string<delimiter(')content(findclose)delimiter(')>operator(,) string<delimiter(')content(findcmdlineswitch)delimiter(')>operator(,) string<delimiter(')content(findfirst)delimiter(')>operator(,) string<delimiter(')content(findnext)delimiter(')>operator(,)
            string<delimiter(')content(floattocurr)delimiter(')>operator(,) string<delimiter(')content(floattodatetime)delimiter(')>operator(,) string<delimiter(')content(floattodecimal)delimiter(')>operator(,) string<delimiter(')content(floattostr)delimiter(')>operator(,)
            string<delimiter(')content(floattostrf)delimiter(')>operator(,) string<delimiter(')content(floattotext)delimiter(')>operator(,) string<delimiter(')content(floattotextfmt)delimiter(')>operator(,) string<delimiter(')content(fmtloadstr)delimiter(')>operator(,)
            string<delimiter(')content(fmtstr)delimiter(')>operator(,) string<delimiter(')content(forcedirectories)delimiter(')>operator(,) string<delimiter(')content(format)delimiter(')>operator(,) string<delimiter(')content(formatbuf)delimiter(')>operator(,) string<delimiter(')content(formatcurr)delimiter(')>operator(,)
            string<delimiter(')content(formatdatetime)delimiter(')>operator(,) string<delimiter(')content(formatfloat)delimiter(')>operator(,) string<delimiter(')content(freeandnil)delimiter(')>operator(,) string<delimiter(')content(getcurrentdir)delimiter(')>operator(,)
            string<delimiter(')content(getenvironmentvariable)delimiter(')>operator(,) string<delimiter(')content(getfileversion)delimiter(')>operator(,) string<delimiter(')content(getformatsettings)delimiter(')>operator(,)
            string<delimiter(')content(getlocaleformatsettings)delimiter(')>operator(,) string<delimiter(')content(getmodulename)delimiter(')>operator(,) string<delimiter(')content(getpackagedescription)delimiter(')>operator(,)
            string<delimiter(')content(getpackageinfo)delimiter(')>operator(,) string<delimiter(')content(gettime)delimiter(')>operator(,) string<delimiter(')content(guidtostring)delimiter(')>operator(,) string<delimiter(')content(incamonth)delimiter(')>operator(,)
            string<delimiter(')content(includetrailingbackslash)delimiter(')>operator(,) string<delimiter(')content(includetrailingpathdelimiter)delimiter(')>operator(,)
            string<delimiter(')content(incmonth)delimiter(')>operator(,) string<delimiter(')content(initializepackage)delimiter(')>operator(,) string<delimiter(')content(interlockeddecrement)delimiter(')>operator(,)
            string<delimiter(')content(interlockedexchange)delimiter(')>operator(,) string<delimiter(')content(interlockedexchangeadd)delimiter(')>operator(,)
            string<delimiter(')content(interlockedincrement)delimiter(')>operator(,) string<delimiter(')content(inttohex)delimiter(')>operator(,) string<delimiter(')content(inttostr)delimiter(')>operator(,) string<delimiter(')content(isdelimiter)delimiter(')>operator(,)
            string<delimiter(')content(isequalguid)delimiter(')>operator(,) string<delimiter(')content(isleapyear)delimiter(')>operator(,) string<delimiter(')content(ispathdelimiter)delimiter(')>operator(,) string<delimiter(')content(isvalidident)delimiter(')>operator(,)
            string<delimiter(')content(languages)delimiter(')>operator(,) string<delimiter(')content(lastdelimiter)delimiter(')>operator(,) string<delimiter(')content(loadpackage)delimiter(')>operator(,) string<delimiter(')content(loadstr)delimiter(')>operator(,)
            string<delimiter(')content(lowercase)delimiter(')>operator(,) string<delimiter(')content(msecstotimestamp)delimiter(')>operator(,) string<delimiter(')content(newstr)delimiter(')>operator(,) string<delimiter(')content(nextcharindex)delimiter(')>operator(,) string<delimiter(')content(now)delimiter(')>operator(,)
            string<delimiter(')content(outofmemoryerror)delimiter(')>operator(,) string<delimiter(')content(quotedstr)delimiter(')>operator(,) string<delimiter(')content(raiselastoserror)delimiter(')>operator(,)
            string<delimiter(')content(raiselastwin32error)delimiter(')>operator(,) string<delimiter(')content(removedir)delimiter(')>operator(,) string<delimiter(')content(renamefile)delimiter(')>operator(,) string<delimiter(')content(replacedate)delimiter(')>operator(,)
            string<delimiter(')content(replacetime)delimiter(')>operator(,) string<delimiter(')content(safeloadlibrary)delimiter(')>operator(,) string<delimiter(')content(samefilename)delimiter(')>operator(,) string<delimiter(')content(sametext)delimiter(')>operator(,)
            string<delimiter(')content(setcurrentdir)delimiter(')>operator(,) string<delimiter(')content(showexception)delimiter(')>operator(,) string<delimiter(')content(sleep)delimiter(')>operator(,) string<delimiter(')content(stralloc)delimiter(')>operator(,) string<delimiter(')content(strbufsize)delimiter(')>operator(,)
            string<delimiter(')content(strbytetype)delimiter(')>operator(,) string<delimiter(')content(strcat)delimiter(')>operator(,) string<delimiter(')content(strcharlength)delimiter(')>operator(,) string<delimiter(')content(strcomp)delimiter(')>operator(,) string<delimiter(')content(strcopy)delimiter(')>operator(,)
            string<delimiter(')content(strdispose)delimiter(')>operator(,) string<delimiter(')content(strecopy)delimiter(')>operator(,) string<delimiter(')content(strend)delimiter(')>operator(,) string<delimiter(')content(strfmt)delimiter(')>operator(,) string<delimiter(')content(stricomp)delimiter(')>operator(,)
            string<delimiter(')content(stringreplace)delimiter(')>operator(,) string<delimiter(')content(stringtoguid)delimiter(')>operator(,) string<delimiter(')content(strlcat)delimiter(')>operator(,) string<delimiter(')content(strlcomp)delimiter(')>operator(,) string<delimiter(')content(strlcopy)delimiter(')>operator(,)
            string<delimiter(')content(strlen)delimiter(')>operator(,) string<delimiter(')content(strlfmt)delimiter(')>operator(,) string<delimiter(')content(strlicomp)delimiter(')>operator(,) string<delimiter(')content(strlower)delimiter(')>operator(,) string<delimiter(')content(strmove)delimiter(')>operator(,) string<delimiter(')content(strnew)delimiter(')>operator(,)
            string<delimiter(')content(strnextchar)delimiter(')>operator(,) string<delimiter(')content(strpas)delimiter(')>operator(,) string<delimiter(')content(strpcopy)delimiter(')>operator(,) string<delimiter(')content(strplcopy)delimiter(')>operator(,) string<delimiter(')content(strpos)delimiter(')>operator(,)
            string<delimiter(')content(strrscan)delimiter(')>operator(,) string<delimiter(')content(strscan)delimiter(')>operator(,) string<delimiter(')content(strtobool)delimiter(')>operator(,) string<delimiter(')content(strtobooldef)delimiter(')>operator(,) string<delimiter(')content(strtocurr)delimiter(')>operator(,)
            string<delimiter(')content(strtocurrdef)delimiter(')>operator(,) string<delimiter(')content(strtodate)delimiter(')>operator(,) string<delimiter(')content(strtodatedef)delimiter(')>operator(,) string<delimiter(')content(strtodatetime)delimiter(')>operator(,)
            string<delimiter(')content(strtodatetimedef)delimiter(')>operator(,) string<delimiter(')content(strtofloat)delimiter(')>operator(,) string<delimiter(')content(strtofloatdef)delimiter(')>operator(,) string<delimiter(')content(strtoint)delimiter(')>operator(,)
            string<delimiter(')content(strtoint64)delimiter(')>operator(,) string<delimiter(')content(strtoint64def)delimiter(')>operator(,) string<delimiter(')content(strtointdef)delimiter(')>operator(,) string<delimiter(')content(strtotime)delimiter(')>operator(,)
            string<delimiter(')content(strtotimedef)delimiter(')>operator(,) string<delimiter(')content(strupper)delimiter(')>operator(,) string<delimiter(')content(supports)delimiter(')>operator(,) string<delimiter(')content(syserrormessage)delimiter(')>operator(,)
            string<delimiter(')content(systemtimetodatetime)delimiter(')>operator(,) string<delimiter(')content(texttofloat)delimiter(')>operator(,) string<delimiter(')content(time)delimiter(')>operator(,) string<delimiter(')content(timestamptodatetime)delimiter(')>operator(,)
            string<delimiter(')content(timestamptomsecs)delimiter(')>operator(,) string<delimiter(')content(timetostr)delimiter(')>operator(,) string<delimiter(')content(trim)delimiter(')>operator(,) string<delimiter(')content(trimleft)delimiter(')>operator(,) string<delimiter(')content(trimright)delimiter(')>operator(,)
            string<delimiter(')content(tryencodedate)delimiter(')>operator(,) string<delimiter(')content(tryencodetime)delimiter(')>operator(,) string<delimiter(')content(tryfloattocurr)delimiter(')>operator(,) string<delimiter(')content(tryfloattodatetime)delimiter(')>operator(,)
            string<delimiter(')content(trystrtobool)delimiter(')>operator(,) string<delimiter(')content(trystrtocurr)delimiter(')>operator(,) string<delimiter(')content(trystrtodate)delimiter(')>operator(,) string<delimiter(')content(trystrtodatetime)delimiter(')>operator(,)
            string<delimiter(')content(trystrtofloat)delimiter(')>operator(,) string<delimiter(')content(trystrtoint)delimiter(')>operator(,) string<delimiter(')content(trystrtoint64)delimiter(')>operator(,) string<delimiter(')content(trystrtotime)delimiter(')>operator(,)
            string<delimiter(')content(unloadpackage)delimiter(')>operator(,) string<delimiter(')content(uppercase)delimiter(')>operator(,) string<delimiter(')content(widecomparestr)delimiter(')>operator(,) string<delimiter(')content(widecomparetext)delimiter(')>operator(,)
            string<delimiter(')content(widefmtstr)delimiter(')>operator(,) string<delimiter(')content(wideformat)delimiter(')>operator(,) string<delimiter(')content(wideformatbuf)delimiter(')>operator(,) string<delimiter(')content(widelowercase)delimiter(')>operator(,)
            string<delimiter(')content(widesamestr)delimiter(')>operator(,) string<delimiter(')content(widesametext)delimiter(')>operator(,) string<delimiter(')content(wideuppercase)delimiter(')>operator(,) string<delimiter(')content(win32check)delimiter(')>operator(,)
            string<delimiter(')content(wraptext)delimiter(')>
        operator(])operator(,)
        string<delimiter(')content(Classes)delimiter(')>operator(:) operator([)
            string<delimiter(')content(activateclassgroup)delimiter(')>operator(,) string<delimiter(')content(allocatehwnd)delimiter(')>operator(,) string<delimiter(')content(bintohex)delimiter(')>operator(,) string<delimiter(')content(checksynchronize)delimiter(')>operator(,)
            string<delimiter(')content(collectionsequal)delimiter(')>operator(,) string<delimiter(')content(countgenerations)delimiter(')>operator(,) string<delimiter(')content(deallocatehwnd)delimiter(')>operator(,) string<delimiter(')content(equalrect)delimiter(')>operator(,)
            string<delimiter(')content(extractstrings)delimiter(')>operator(,) string<delimiter(')content(findclass)delimiter(')>operator(,) string<delimiter(')content(findglobalcomponent)delimiter(')>operator(,) string<delimiter(')content(getclass)delimiter(')>operator(,)
            string<delimiter(')content(groupdescendantswith)delimiter(')>operator(,) string<delimiter(')content(hextobin)delimiter(')>operator(,) string<delimiter(')content(identtoint)delimiter(')>operator(,)
            string<delimiter(')content(initinheritedcomponent)delimiter(')>operator(,) string<delimiter(')content(inttoident)delimiter(')>operator(,) string<delimiter(')content(invalidpoint)delimiter(')>operator(,)
            string<delimiter(')content(isuniqueglobalcomponentname)delimiter(')>operator(,) string<delimiter(')content(linestart)delimiter(')>operator(,) string<delimiter(')content(objectbinarytotext)delimiter(')>operator(,)
            string<delimiter(')content(objectresourcetotext)delimiter(')>operator(,) string<delimiter(')content(objecttexttobinary)delimiter(')>operator(,) string<delimiter(')content(objecttexttoresource)delimiter(')>operator(,)
            string<delimiter(')content(pointsequal)delimiter(')>operator(,) string<delimiter(')content(readcomponentres)delimiter(')>operator(,) string<delimiter(')content(readcomponentresex)delimiter(')>operator(,)
            string<delimiter(')content(readcomponentresfile)delimiter(')>operator(,) string<delimiter(')content(rect)delimiter(')>operator(,) string<delimiter(')content(registerclass)delimiter(')>operator(,) string<delimiter(')content(registerclassalias)delimiter(')>operator(,)
            string<delimiter(')content(registerclasses)delimiter(')>operator(,) string<delimiter(')content(registercomponents)delimiter(')>operator(,) string<delimiter(')content(registerintegerconsts)delimiter(')>operator(,)
            string<delimiter(')content(registernoicon)delimiter(')>operator(,) string<delimiter(')content(registernonactivex)delimiter(')>operator(,) string<delimiter(')content(smallpoint)delimiter(')>operator(,) string<delimiter(')content(startclassgroup)delimiter(')>operator(,)
            string<delimiter(')content(teststreamformat)delimiter(')>operator(,) string<delimiter(')content(unregisterclass)delimiter(')>operator(,) string<delimiter(')content(unregisterclasses)delimiter(')>operator(,)
            string<delimiter(')content(unregisterintegerconsts)delimiter(')>operator(,) string<delimiter(')content(unregistermoduleclasses)delimiter(')>operator(,)
            string<delimiter(')content(writecomponentresfile)delimiter(')>
        operator(])operator(,)
        string<delimiter(')content(Math)delimiter(')>operator(:) operator([)
            string<delimiter(')content(arccos)delimiter(')>operator(,) string<delimiter(')content(arccosh)delimiter(')>operator(,) string<delimiter(')content(arccot)delimiter(')>operator(,) string<delimiter(')content(arccoth)delimiter(')>operator(,) string<delimiter(')content(arccsc)delimiter(')>operator(,) string<delimiter(')content(arccsch)delimiter(')>operator(,) string<delimiter(')content(arcsec)delimiter(')>operator(,)
            string<delimiter(')content(arcsech)delimiter(')>operator(,) string<delimiter(')content(arcsin)delimiter(')>operator(,) string<delimiter(')content(arcsinh)delimiter(')>operator(,) string<delimiter(')content(arctan2)delimiter(')>operator(,) string<delimiter(')content(arctanh)delimiter(')>operator(,) string<delimiter(')content(ceil)delimiter(')>operator(,)
            string<delimiter(')content(comparevalue)delimiter(')>operator(,) string<delimiter(')content(cosecant)delimiter(')>operator(,) string<delimiter(')content(cosh)delimiter(')>operator(,) string<delimiter(')content(cot)delimiter(')>operator(,) string<delimiter(')content(cotan)delimiter(')>operator(,) string<delimiter(')content(coth)delimiter(')>operator(,) string<delimiter(')content(csc)delimiter(')>operator(,)
            string<delimiter(')content(csch)delimiter(')>operator(,) string<delimiter(')content(cycletodeg)delimiter(')>operator(,) string<delimiter(')content(cycletograd)delimiter(')>operator(,) string<delimiter(')content(cycletorad)delimiter(')>operator(,) string<delimiter(')content(degtocycle)delimiter(')>operator(,)
            string<delimiter(')content(degtograd)delimiter(')>operator(,) string<delimiter(')content(degtorad)delimiter(')>operator(,) string<delimiter(')content(divmod)delimiter(')>operator(,) string<delimiter(')content(doubledecliningbalance)delimiter(')>operator(,)
            string<delimiter(')content(ensurerange)delimiter(')>operator(,) string<delimiter(')content(floor)delimiter(')>operator(,) string<delimiter(')content(frexp)delimiter(')>operator(,) string<delimiter(')content(futurevalue)delimiter(')>operator(,) string<delimiter(')content(getexceptionmask)delimiter(')>operator(,)
            string<delimiter(')content(getprecisionmode)delimiter(')>operator(,) string<delimiter(')content(getroundmode)delimiter(')>operator(,) string<delimiter(')content(gradtocycle)delimiter(')>operator(,) string<delimiter(')content(gradtodeg)delimiter(')>operator(,)
            string<delimiter(')content(gradtorad)delimiter(')>operator(,) string<delimiter(')content(hypot)delimiter(')>operator(,) string<delimiter(')content(inrange)delimiter(')>operator(,) string<delimiter(')content(interestpayment)delimiter(')>operator(,) string<delimiter(')content(interestrate)delimiter(')>operator(,)
            string<delimiter(')content(internalrateofreturn)delimiter(')>operator(,) string<delimiter(')content(intpower)delimiter(')>operator(,) string<delimiter(')content(isinfinite)delimiter(')>operator(,) string<delimiter(')content(isnan)delimiter(')>operator(,) string<delimiter(')content(iszero)delimiter(')>operator(,)
            string<delimiter(')content(ldexp)delimiter(')>operator(,) string<delimiter(')content(lnxp1)delimiter(')>operator(,) string<delimiter(')content(log10)delimiter(')>operator(,) string<delimiter(')content(log2)delimiter(')>operator(,) string<delimiter(')content(logn)delimiter(')>operator(,) string<delimiter(')content(max)delimiter(')>operator(,) string<delimiter(')content(maxintvalue)delimiter(')>operator(,)
            string<delimiter(')content(maxvalue)delimiter(')>operator(,) string<delimiter(')content(mean)delimiter(')>operator(,) string<delimiter(')content(meanandstddev)delimiter(')>operator(,) string<delimiter(')content(min)delimiter(')>operator(,) string<delimiter(')content(minintvalue)delimiter(')>operator(,) string<delimiter(')content(minvalue)delimiter(')>operator(,)
            string<delimiter(')content(momentskewkurtosis)delimiter(')>operator(,) string<delimiter(')content(netpresentvalue)delimiter(')>operator(,) string<delimiter(')content(norm)delimiter(')>operator(,) string<delimiter(')content(numberofperiods)delimiter(')>operator(,)
            string<delimiter(')content(payment)delimiter(')>operator(,) string<delimiter(')content(periodpayment)delimiter(')>operator(,) string<delimiter(')content(poly)delimiter(')>operator(,) string<delimiter(')content(popnstddev)delimiter(')>operator(,) string<delimiter(')content(popnvariance)delimiter(')>operator(,)
            string<delimiter(')content(power)delimiter(')>operator(,) string<delimiter(')content(presentvalue)delimiter(')>operator(,) string<delimiter(')content(radtocycle)delimiter(')>operator(,) string<delimiter(')content(radtodeg)delimiter(')>operator(,) string<delimiter(')content(radtograd)delimiter(')>operator(,)
            string<delimiter(')content(randg)delimiter(')>operator(,) string<delimiter(')content(randomrange)delimiter(')>operator(,) string<delimiter(')content(roundto)delimiter(')>operator(,) string<delimiter(')content(samevalue)delimiter(')>operator(,) string<delimiter(')content(sec)delimiter(')>operator(,) string<delimiter(')content(secant)delimiter(')>operator(,)
            string<delimiter(')content(sech)delimiter(')>operator(,) string<delimiter(')content(setexceptionmask)delimiter(')>operator(,) string<delimiter(')content(setprecisionmode)delimiter(')>operator(,) string<delimiter(')content(setroundmode)delimiter(')>operator(,)
            string<delimiter(')content(sign)delimiter(')>operator(,) string<delimiter(')content(simpleroundto)delimiter(')>operator(,) string<delimiter(')content(sincos)delimiter(')>operator(,) string<delimiter(')content(sinh)delimiter(')>operator(,) string<delimiter(')content(slndepreciation)delimiter(')>operator(,) string<delimiter(')content(stddev)delimiter(')>operator(,)
            string<delimiter(')content(sum)delimiter(')>operator(,) string<delimiter(')content(sumint)delimiter(')>operator(,) string<delimiter(')content(sumofsquares)delimiter(')>operator(,) string<delimiter(')content(sumsandsquares)delimiter(')>operator(,) string<delimiter(')content(syddepreciation)delimiter(')>operator(,)
            string<delimiter(')content(tan)delimiter(')>operator(,) string<delimiter(')content(tanh)delimiter(')>operator(,) string<delimiter(')content(totalvariance)delimiter(')>operator(,) string<delimiter(')content(variance)delimiter(')>
        operator(])
    operator(})

    ident(ASM_REGISTERS) operator(=) predefined(set)operator(()operator([)
        string<delimiter(')content(ah)delimiter(')>operator(,) string<delimiter(')content(al)delimiter(')>operator(,) string<delimiter(')content(ax)delimiter(')>operator(,) string<delimiter(')content(bh)delimiter(')>operator(,) string<delimiter(')content(bl)delimiter(')>operator(,) string<delimiter(')content(bp)delimiter(')>operator(,) string<delimiter(')content(bx)delimiter(')>operator(,) string<delimiter(')content(ch)delimiter(')>operator(,) string<delimiter(')content(cl)delimiter(')>operator(,) string<delimiter(')content(cr0)delimiter(')>operator(,)
        string<delimiter(')content(cr1)delimiter(')>operator(,) string<delimiter(')content(cr2)delimiter(')>operator(,) string<delimiter(')content(cr3)delimiter(')>operator(,) string<delimiter(')content(cr4)delimiter(')>operator(,) string<delimiter(')content(cs)delimiter(')>operator(,) string<delimiter(')content(cx)delimiter(')>operator(,) string<delimiter(')content(dh)delimiter(')>operator(,) string<delimiter(')content(di)delimiter(')>operator(,) string<delimiter(')content(dl)delimiter(')>operator(,) string<delimiter(')content(dr0)delimiter(')>operator(,)
        string<delimiter(')content(dr1)delimiter(')>operator(,) string<delimiter(')content(dr2)delimiter(')>operator(,) string<delimiter(')content(dr3)delimiter(')>operator(,) string<delimiter(')content(dr4)delimiter(')>operator(,) string<delimiter(')content(dr5)delimiter(')>operator(,) string<delimiter(')content(dr6)delimiter(')>operator(,) string<delimiter(')content(dr7)delimiter(')>operator(,) string<delimiter(')content(ds)delimiter(')>operator(,) string<delimiter(')content(dx)delimiter(')>operator(,)
        string<delimiter(')content(eax)delimiter(')>operator(,) string<delimiter(')content(ebp)delimiter(')>operator(,) string<delimiter(')content(ebx)delimiter(')>operator(,) string<delimiter(')content(ecx)delimiter(')>operator(,) string<delimiter(')content(edi)delimiter(')>operator(,) string<delimiter(')content(edx)delimiter(')>operator(,) string<delimiter(')content(es)delimiter(')>operator(,) string<delimiter(')content(esi)delimiter(')>operator(,) string<delimiter(')content(esp)delimiter(')>operator(,)
        string<delimiter(')content(fs)delimiter(')>operator(,) string<delimiter(')content(gs)delimiter(')>operator(,) string<delimiter(')content(mm0)delimiter(')>operator(,) string<delimiter(')content(mm1)delimiter(')>operator(,) string<delimiter(')content(mm2)delimiter(')>operator(,) string<delimiter(')content(mm3)delimiter(')>operator(,) string<delimiter(')content(mm4)delimiter(')>operator(,) string<delimiter(')content(mm5)delimiter(')>operator(,) string<delimiter(')content(mm6)delimiter(')>operator(,)
        string<delimiter(')content(mm7)delimiter(')>operator(,) string<delimiter(')content(si)delimiter(')>operator(,) string<delimiter(')content(sp)delimiter(')>operator(,) string<delimiter(')content(ss)delimiter(')>operator(,) string<delimiter(')content(st0)delimiter(')>operator(,) string<delimiter(')content(st1)delimiter(')>operator(,) string<delimiter(')content(st2)delimiter(')>operator(,) string<delimiter(')content(st3)delimiter(')>operator(,) string<delimiter(')content(st4)delimiter(')>operator(,) string<delimiter(')content(st5)delimiter(')>operator(,)
        string<delimiter(')content(st6)delimiter(')>operator(,) string<delimiter(')content(st7)delimiter(')>operator(,) string<delimiter(')content(xmm0)delimiter(')>operator(,) string<delimiter(')content(xmm1)delimiter(')>operator(,) string<delimiter(')content(xmm2)delimiter(')>operator(,) string<delimiter(')content(xmm3)delimiter(')>operator(,) string<delimiter(')content(xmm4)delimiter(')>operator(,) string<delimiter(')content(xmm5)delimiter(')>operator(,)
        string<delimiter(')content(xmm6)delimiter(')>operator(,) string<delimiter(')content(xmm7)delimiter(')>
    operator(])operator(\))

    ident(ASM_INSTRUCTIONS) operator(=) predefined(set)operator(()operator([)
        string<delimiter(')content(aaa)delimiter(')>operator(,) string<delimiter(')content(aad)delimiter(')>operator(,) string<delimiter(')content(aam)delimiter(')>operator(,) string<delimiter(')content(aas)delimiter(')>operator(,) string<delimiter(')content(adc)delimiter(')>operator(,) string<delimiter(')content(add)delimiter(')>operator(,) string<delimiter(')content(and)delimiter(')>operator(,) string<delimiter(')content(arpl)delimiter(')>operator(,) string<delimiter(')content(bound)delimiter(')>operator(,)
        string<delimiter(')content(bsf)delimiter(')>operator(,) string<delimiter(')content(bsr)delimiter(')>operator(,) string<delimiter(')content(bswap)delimiter(')>operator(,) string<delimiter(')content(bt)delimiter(')>operator(,) string<delimiter(')content(btc)delimiter(')>operator(,) string<delimiter(')content(btr)delimiter(')>operator(,) string<delimiter(')content(bts)delimiter(')>operator(,) string<delimiter(')content(call)delimiter(')>operator(,) string<delimiter(')content(cbw)delimiter(')>operator(,)
        string<delimiter(')content(cdq)delimiter(')>operator(,) string<delimiter(')content(clc)delimiter(')>operator(,) string<delimiter(')content(cld)delimiter(')>operator(,) string<delimiter(')content(cli)delimiter(')>operator(,) string<delimiter(')content(clts)delimiter(')>operator(,) string<delimiter(')content(cmc)delimiter(')>operator(,) string<delimiter(')content(cmova)delimiter(')>operator(,) string<delimiter(')content(cmovae)delimiter(')>operator(,)
        string<delimiter(')content(cmovb)delimiter(')>operator(,) string<delimiter(')content(cmovbe)delimiter(')>operator(,) string<delimiter(')content(cmovc)delimiter(')>operator(,) string<delimiter(')content(cmovcxz)delimiter(')>operator(,) string<delimiter(')content(cmove)delimiter(')>operator(,) string<delimiter(')content(cmovg)delimiter(')>operator(,)
        string<delimiter(')content(cmovge)delimiter(')>operator(,) string<delimiter(')content(cmovl)delimiter(')>operator(,) string<delimiter(')content(cmovle)delimiter(')>operator(,) string<delimiter(')content(cmovna)delimiter(')>operator(,) string<delimiter(')content(cmovnae)delimiter(')>operator(,) string<delimiter(')content(cmovnb)delimiter(')>operator(,)
        string<delimiter(')content(cmovnbe)delimiter(')>operator(,) string<delimiter(')content(cmovnc)delimiter(')>operator(,) string<delimiter(')content(cmovne)delimiter(')>operator(,) string<delimiter(')content(cmovng)delimiter(')>operator(,) string<delimiter(')content(cmovnge)delimiter(')>operator(,) string<delimiter(')content(cmovnl)delimiter(')>operator(,)
        string<delimiter(')content(cmovnle)delimiter(')>operator(,) string<delimiter(')content(cmovno)delimiter(')>operator(,) string<delimiter(')content(cmovnp)delimiter(')>operator(,) string<delimiter(')content(cmovns)delimiter(')>operator(,) string<delimiter(')content(cmovnz)delimiter(')>operator(,) string<delimiter(')content(cmovo)delimiter(')>operator(,)
        string<delimiter(')content(cmovp)delimiter(')>operator(,) string<delimiter(')content(cmovpe)delimiter(')>operator(,) string<delimiter(')content(cmovpo)delimiter(')>operator(,) string<delimiter(')content(cmovs)delimiter(')>operator(,) string<delimiter(')content(cmovz)delimiter(')>operator(,) string<delimiter(')content(cmp)delimiter(')>operator(,) string<delimiter(')content(cmpsb)delimiter(')>operator(,)
        string<delimiter(')content(cmpsd)delimiter(')>operator(,) string<delimiter(')content(cmpsw)delimiter(')>operator(,) string<delimiter(')content(cmpxchg)delimiter(')>operator(,) string<delimiter(')content(cmpxchg486)delimiter(')>operator(,) string<delimiter(')content(cmpxchg8b)delimiter(')>operator(,) string<delimiter(')content(cpuid)delimiter(')>operator(,)
        string<delimiter(')content(cwd)delimiter(')>operator(,) string<delimiter(')content(cwde)delimiter(')>operator(,) string<delimiter(')content(daa)delimiter(')>operator(,) string<delimiter(')content(das)delimiter(')>operator(,) string<delimiter(')content(dec)delimiter(')>operator(,) string<delimiter(')content(div)delimiter(')>operator(,) string<delimiter(')content(emms)delimiter(')>operator(,) string<delimiter(')content(enter)delimiter(')>operator(,) string<delimiter(')content(hlt)delimiter(')>operator(,)
        string<delimiter(')content(ibts)delimiter(')>operator(,) string<delimiter(')content(icebp)delimiter(')>operator(,) string<delimiter(')content(idiv)delimiter(')>operator(,) string<delimiter(')content(imul)delimiter(')>operator(,) string<delimiter(')content(in)delimiter(')>operator(,) string<delimiter(')content(inc)delimiter(')>operator(,) string<delimiter(')content(insb)delimiter(')>operator(,) string<delimiter(')content(insd)delimiter(')>operator(,)
        string<delimiter(')content(insw)delimiter(')>operator(,) string<delimiter(')content(int)delimiter(')>operator(,) string<delimiter(')content(int01)delimiter(')>operator(,) string<delimiter(')content(int03)delimiter(')>operator(,) string<delimiter(')content(int1)delimiter(')>operator(,) string<delimiter(')content(int3)delimiter(')>operator(,) string<delimiter(')content(into)delimiter(')>operator(,) string<delimiter(')content(invd)delimiter(')>operator(,)
        string<delimiter(')content(invlpg)delimiter(')>operator(,) string<delimiter(')content(iret)delimiter(')>operator(,) string<delimiter(')content(iretd)delimiter(')>operator(,) string<delimiter(')content(iretw)delimiter(')>operator(,) string<delimiter(')content(ja)delimiter(')>operator(,) string<delimiter(')content(jae)delimiter(')>operator(,) string<delimiter(')content(jb)delimiter(')>operator(,) string<delimiter(')content(jbe)delimiter(')>operator(,)
        string<delimiter(')content(jc)delimiter(')>operator(,) string<delimiter(')content(jcxz)delimiter(')>operator(,) string<delimiter(')content(jcxz)delimiter(')>operator(,) string<delimiter(')content(je)delimiter(')>operator(,) string<delimiter(')content(jecxz)delimiter(')>operator(,) string<delimiter(')content(jg)delimiter(')>operator(,) string<delimiter(')content(jge)delimiter(')>operator(,) string<delimiter(')content(jl)delimiter(')>operator(,) string<delimiter(')content(jle)delimiter(')>operator(,)
        string<delimiter(')content(jmp)delimiter(')>operator(,) string<delimiter(')content(jna)delimiter(')>operator(,) string<delimiter(')content(jnae)delimiter(')>operator(,) string<delimiter(')content(jnb)delimiter(')>operator(,) string<delimiter(')content(jnbe)delimiter(')>operator(,) string<delimiter(')content(jnc)delimiter(')>operator(,) string<delimiter(')content(jne)delimiter(')>operator(,) string<delimiter(')content(jng)delimiter(')>operator(,) string<delimiter(')content(jnge)delimiter(')>operator(,)
        string<delimiter(')content(jnl)delimiter(')>operator(,) string<delimiter(')content(jnle)delimiter(')>operator(,) string<delimiter(')content(jno)delimiter(')>operator(,) string<delimiter(')content(jnp)delimiter(')>operator(,) string<delimiter(')content(jns)delimiter(')>operator(,) string<delimiter(')content(jnz)delimiter(')>operator(,) string<delimiter(')content(jo)delimiter(')>operator(,) string<delimiter(')content(jp)delimiter(')>operator(,) string<delimiter(')content(jpe)delimiter(')>operator(,)
        string<delimiter(')content(jpo)delimiter(')>operator(,) string<delimiter(')content(js)delimiter(')>operator(,) string<delimiter(')content(jz)delimiter(')>operator(,) string<delimiter(')content(lahf)delimiter(')>operator(,) string<delimiter(')content(lar)delimiter(')>operator(,) string<delimiter(')content(lcall)delimiter(')>operator(,) string<delimiter(')content(lds)delimiter(')>operator(,) string<delimiter(')content(lea)delimiter(')>operator(,) string<delimiter(')content(leave)delimiter(')>operator(,)
        string<delimiter(')content(les)delimiter(')>operator(,) string<delimiter(')content(lfs)delimiter(')>operator(,) string<delimiter(')content(lgdt)delimiter(')>operator(,) string<delimiter(')content(lgs)delimiter(')>operator(,) string<delimiter(')content(lidt)delimiter(')>operator(,) string<delimiter(')content(ljmp)delimiter(')>operator(,) string<delimiter(')content(lldt)delimiter(')>operator(,) string<delimiter(')content(lmsw)delimiter(')>operator(,)
        string<delimiter(')content(loadall)delimiter(')>operator(,) string<delimiter(')content(loadall286)delimiter(')>operator(,) string<delimiter(')content(lock)delimiter(')>operator(,) string<delimiter(')content(lodsb)delimiter(')>operator(,) string<delimiter(')content(lodsd)delimiter(')>operator(,) string<delimiter(')content(lodsw)delimiter(')>operator(,)
        string<delimiter(')content(loop)delimiter(')>operator(,) string<delimiter(')content(loope)delimiter(')>operator(,) string<delimiter(')content(loopne)delimiter(')>operator(,) string<delimiter(')content(loopnz)delimiter(')>operator(,) string<delimiter(')content(loopz)delimiter(')>operator(,) string<delimiter(')content(lsl)delimiter(')>operator(,) string<delimiter(')content(lss)delimiter(')>operator(,) string<delimiter(')content(ltr)delimiter(')>operator(,)
        string<delimiter(')content(mov)delimiter(')>operator(,) string<delimiter(')content(movd)delimiter(')>operator(,) string<delimiter(')content(movq)delimiter(')>operator(,) string<delimiter(')content(movsb)delimiter(')>operator(,) string<delimiter(')content(movsd)delimiter(')>operator(,) string<delimiter(')content(movsw)delimiter(')>operator(,) string<delimiter(')content(movsx)delimiter(')>operator(,)
        string<delimiter(')content(movzx)delimiter(')>operator(,) string<delimiter(')content(mul)delimiter(')>operator(,) string<delimiter(')content(neg)delimiter(')>operator(,) string<delimiter(')content(nop)delimiter(')>operator(,) string<delimiter(')content(not)delimiter(')>operator(,) string<delimiter(')content(or)delimiter(')>operator(,) string<delimiter(')content(out)delimiter(')>operator(,) string<delimiter(')content(outsb)delimiter(')>operator(,) string<delimiter(')content(outsd)delimiter(')>operator(,)
        string<delimiter(')content(outsw)delimiter(')>operator(,) string<delimiter(')content(pop)delimiter(')>operator(,) string<delimiter(')content(popa)delimiter(')>operator(,) string<delimiter(')content(popad)delimiter(')>operator(,) string<delimiter(')content(popaw)delimiter(')>operator(,) string<delimiter(')content(popf)delimiter(')>operator(,) string<delimiter(')content(popfd)delimiter(')>operator(,) string<delimiter(')content(popfw)delimiter(')>operator(,)
        string<delimiter(')content(push)delimiter(')>operator(,) string<delimiter(')content(pusha)delimiter(')>operator(,) string<delimiter(')content(pushad)delimiter(')>operator(,) string<delimiter(')content(pushaw)delimiter(')>operator(,) string<delimiter(')content(pushf)delimiter(')>operator(,) string<delimiter(')content(pushfd)delimiter(')>operator(,) string<delimiter(')content(pushfw)delimiter(')>operator(,)
        string<delimiter(')content(rcl)delimiter(')>operator(,) string<delimiter(')content(rcr)delimiter(')>operator(,) string<delimiter(')content(rdmsr)delimiter(')>operator(,) string<delimiter(')content(rdpmc)delimiter(')>operator(,) string<delimiter(')content(rdshr)delimiter(')>operator(,) string<delimiter(')content(rdtsc)delimiter(')>operator(,) string<delimiter(')content(rep)delimiter(')>operator(,) string<delimiter(')content(repe)delimiter(')>operator(,)
        string<delimiter(')content(repne)delimiter(')>operator(,) string<delimiter(')content(repnz)delimiter(')>operator(,) string<delimiter(')content(repz)delimiter(')>operator(,) string<delimiter(')content(ret)delimiter(')>operator(,) string<delimiter(')content(retf)delimiter(')>operator(,) string<delimiter(')content(retn)delimiter(')>operator(,) string<delimiter(')content(rol)delimiter(')>operator(,) string<delimiter(')content(ror)delimiter(')>operator(,)
        string<delimiter(')content(rsdc)delimiter(')>operator(,) string<delimiter(')content(rsldt)delimiter(')>operator(,) string<delimiter(')content(rsm)delimiter(')>operator(,) string<delimiter(')content(sahf)delimiter(')>operator(,) string<delimiter(')content(sal)delimiter(')>operator(,) string<delimiter(')content(salc)delimiter(')>operator(,) string<delimiter(')content(sar)delimiter(')>operator(,) string<delimiter(')content(sbb)delimiter(')>operator(,)
        string<delimiter(')content(scasb)delimiter(')>operator(,) string<delimiter(')content(scasd)delimiter(')>operator(,) string<delimiter(')content(scasw)delimiter(')>operator(,) string<delimiter(')content(seta)delimiter(')>operator(,) string<delimiter(')content(setae)delimiter(')>operator(,) string<delimiter(')content(setb)delimiter(')>operator(,) string<delimiter(')content(setbe)delimiter(')>operator(,)
        string<delimiter(')content(setc)delimiter(')>operator(,) string<delimiter(')content(setcxz)delimiter(')>operator(,) string<delimiter(')content(sete)delimiter(')>operator(,) string<delimiter(')content(setg)delimiter(')>operator(,) string<delimiter(')content(setge)delimiter(')>operator(,) string<delimiter(')content(setl)delimiter(')>operator(,) string<delimiter(')content(setle)delimiter(')>operator(,)
        string<delimiter(')content(setna)delimiter(')>operator(,) string<delimiter(')content(setnae)delimiter(')>operator(,) string<delimiter(')content(setnb)delimiter(')>operator(,) string<delimiter(')content(setnbe)delimiter(')>operator(,) string<delimiter(')content(setnc)delimiter(')>operator(,) string<delimiter(')content(setne)delimiter(')>operator(,) string<delimiter(')content(setng)delimiter(')>operator(,)
        string<delimiter(')content(setnge)delimiter(')>operator(,) string<delimiter(')content(setnl)delimiter(')>operator(,) string<delimiter(')content(setnle)delimiter(')>operator(,) string<delimiter(')content(setno)delimiter(')>operator(,) string<delimiter(')content(setnp)delimiter(')>operator(,) string<delimiter(')content(setns)delimiter(')>operator(,) string<delimiter(')content(setnz)delimiter(')>operator(,)
        string<delimiter(')content(seto)delimiter(')>operator(,) string<delimiter(')content(setp)delimiter(')>operator(,) string<delimiter(')content(setpe)delimiter(')>operator(,) string<delimiter(')content(setpo)delimiter(')>operator(,) string<delimiter(')content(sets)delimiter(')>operator(,) string<delimiter(')content(setz)delimiter(')>operator(,) string<delimiter(')content(sgdt)delimiter(')>operator(,) string<delimiter(')content(shl)delimiter(')>operator(,)
        string<delimiter(')content(shld)delimiter(')>operator(,) string<delimiter(')content(shr)delimiter(')>operator(,) string<delimiter(')content(shrd)delimiter(')>operator(,) string<delimiter(')content(sidt)delimiter(')>operator(,) string<delimiter(')content(sldt)delimiter(')>operator(,) string<delimiter(')content(smi)delimiter(')>operator(,) string<delimiter(')content(smint)delimiter(')>operator(,) string<delimiter(')content(smintold)delimiter(')>operator(,)
        string<delimiter(')content(smsw)delimiter(')>operator(,) string<delimiter(')content(stc)delimiter(')>operator(,) string<delimiter(')content(std)delimiter(')>operator(,) string<delimiter(')content(sti)delimiter(')>operator(,) string<delimiter(')content(stosb)delimiter(')>operator(,) string<delimiter(')content(stosd)delimiter(')>operator(,) string<delimiter(')content(stosw)delimiter(')>operator(,) string<delimiter(')content(str)delimiter(')>operator(,)
        string<delimiter(')content(sub)delimiter(')>operator(,) string<delimiter(')content(svdc)delimiter(')>operator(,) string<delimiter(')content(svldt)delimiter(')>operator(,) string<delimiter(')content(svts)delimiter(')>operator(,) string<delimiter(')content(syscall)delimiter(')>operator(,) string<delimiter(')content(sysenter)delimiter(')>operator(,) string<delimiter(')content(sysexit)delimiter(')>operator(,)
        string<delimiter(')content(sysret)delimiter(')>operator(,) string<delimiter(')content(test)delimiter(')>operator(,) string<delimiter(')content(ud1)delimiter(')>operator(,) string<delimiter(')content(ud2)delimiter(')>operator(,) string<delimiter(')content(umov)delimiter(')>operator(,) string<delimiter(')content(verr)delimiter(')>operator(,) string<delimiter(')content(verw)delimiter(')>operator(,) string<delimiter(')content(wait)delimiter(')>operator(,)
        string<delimiter(')content(wbinvd)delimiter(')>operator(,) string<delimiter(')content(wrmsr)delimiter(')>operator(,) string<delimiter(')content(wrshr)delimiter(')>operator(,) string<delimiter(')content(xadd)delimiter(')>operator(,) string<delimiter(')content(xbts)delimiter(')>operator(,) string<delimiter(')content(xchg)delimiter(')>operator(,) string<delimiter(')content(xlat)delimiter(')>operator(,)
        string<delimiter(')content(xlatb)delimiter(')>operator(,) string<delimiter(')content(xor)delimiter(')>
    operator(])operator(\))

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))operator(:)
        ident(Lexer)operator(.)ident(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))
        predefined_constant(self)operator(.)ident(keywords) operator(=) predefined(set)operator(()operator(\))
        keyword(if) ident(get_bool_opt)operator(()ident(options)operator(,) string<delimiter(')content(turbopascal)delimiter(')>operator(,) predefined_constant(True)operator(\))operator(:)
            predefined_constant(self)operator(.)ident(keywords)operator(.)ident(update)operator(()predefined_constant(self)operator(.)ident(TURBO_PASCAL_KEYWORDS)operator(\))
        keyword(if) ident(get_bool_opt)operator(()ident(options)operator(,) string<delimiter(')content(delphi)delimiter(')>operator(,) predefined_constant(True)operator(\))operator(:)
            predefined_constant(self)operator(.)ident(keywords)operator(.)ident(update)operator(()predefined_constant(self)operator(.)ident(DELPHI_KEYWORDS)operator(\))
        keyword(if) ident(get_bool_opt)operator(()ident(options)operator(,) string<delimiter(')content(freepascal)delimiter(')>operator(,) predefined_constant(True)operator(\))operator(:)
            predefined_constant(self)operator(.)ident(keywords)operator(.)ident(update)operator(()predefined_constant(self)operator(.)ident(FREE_PASCAL_KEYWORDS)operator(\))
        predefined_constant(self)operator(.)ident(builtins) operator(=) predefined(set)operator(()operator(\))
        keyword(for) ident(unit) keyword(in) ident(get_list_opt)operator(()ident(options)operator(,) string<delimiter(')content(units)delimiter(')>operator(,) predefined_constant(self)operator(.)ident(BUILTIN_UNITS)operator(.)ident(keys)operator(()operator(\))operator(\))operator(:)
            predefined_constant(self)operator(.)ident(builtins)operator(.)ident(update)operator(()predefined_constant(self)operator(.)ident(BUILTIN_UNITS)operator([)ident(unit)operator(])operator(\))

    keyword(def) method(get_tokens_unprocessed)operator(()predefined_constant(self)operator(,) ident(text)operator(\))operator(:)
        ident(scanner) operator(=) ident(Scanner)operator(()ident(text)operator(,) ident(re)operator(.)ident(DOTALL) operator(|) ident(re)operator(.)ident(MULTILINE) operator(|) ident(re)operator(.)ident(IGNORECASE)operator(\))
        ident(stack) operator(=) operator([)string<delimiter(')content(initial)delimiter(')>operator(])
        ident(in_function_block) operator(=) predefined_constant(False)
        ident(in_property_block) operator(=) predefined_constant(False)
        ident(was_dot) operator(=) predefined_constant(False)
        ident(next_token_is_function) operator(=) predefined_constant(False)
        ident(next_token_is_property) operator(=) predefined_constant(False)
        ident(collect_labels) operator(=) predefined_constant(False)
        ident(block_labels) operator(=) predefined(set)operator(()operator(\))
        ident(brace_balance) operator(=) operator([)integer(0)operator(,) integer(0)operator(])

        keyword(while) keyword(not) ident(scanner)operator(.)ident(eos)operator(:)
            ident(token) operator(=) ident(Error)

            keyword(if) ident(stack)operator([)operator(-)integer(1)operator(]) operator(==) string<delimiter(')content(initial)delimiter(')>operator(:)
                keyword(if) ident(scanner)operator(.)ident(scan)operator(()string<modifier(r)delimiter(')content(\\s)content(+)delimiter(')>operator(\))operator(:)
                    ident(token) operator(=) ident(Text)
                keyword(elif) ident(scanner)operator(.)ident(scan)operator(()string<modifier(r)delimiter(')content(\\{)content(.*?)content(\\})content(|)content(\\()content(\\*)content(.*?)content(\\*)content(\\\))delimiter(')>operator(\))operator(:)
                    keyword(if) ident(scanner)operator(.)ident(match)operator(.)ident(startswith)operator(()string<delimiter(')content($)delimiter(')>operator(\))operator(:)
                        ident(token) operator(=) ident(Comment)operator(.)ident(Preproc)
                    keyword(else)operator(:)
                        ident(token) operator(=) ident(Comment)operator(.)ident(Multiline)
                keyword(elif) ident(scanner)operator(.)ident(scan)operator(()string<modifier(r)delimiter(')content(//.*?$)delimiter(')>operator(\))operator(:)
                    ident(token) operator(=) ident(Comment)operator(.)ident(Single)
                keyword(elif) ident(scanner)operator(.)ident(scan)operator(()string<modifier(r)delimiter(')content([-+*)content(\\/)content(=<>:;,.@)content(\\^)content(])delimiter(')>operator(\))operator(:)
                    ident(token) operator(=) ident(Operator)
                    comment(# stop label highlighting on next ";")
                    keyword(if) ident(collect_labels) keyword(and) ident(scanner)operator(.)ident(match) operator(==) string<delimiter(')content(;)delimiter(')>operator(:)
                        ident(collect_labels) operator(=) predefined_constant(False)
                keyword(elif) ident(scanner)operator(.)ident(scan)operator(()string<modifier(r)delimiter(')content([)content(\\()content(\\\))content(\\[)content(\\])content(]+)delimiter(')>operator(\))operator(:)
                    ident(token) operator(=) ident(Punctuation)
                    comment(# abort function naming ``foo = Function(...\)``)
                    ident(next_token_is_function) operator(=) predefined_constant(False)
                    comment(# if we are in a function block we count the open)
                    comment(# braces because ootherwise it's impossible to)
                    comment(# determine the end of the modifier context)
                    keyword(if) ident(in_function_block) keyword(or) ident(in_property_block)operator(:)
                        keyword(if) ident(scanner)operator(.)ident(match) operator(==) string<delimiter(')content(()delimiter(')>operator(:)
                            ident(brace_balance)operator([)integer(0)operator(]) operator(+=) integer(1)
                        keyword(elif) ident(scanner)operator(.)ident(match) operator(==) string<delimiter(')content(\))delimiter(')>operator(:)
                            ident(brace_balance)operator([)integer(0)operator(]) operator(-=) integer(1)
                        keyword(elif) ident(scanner)operator(.)ident(match) operator(==) string<delimiter(')content([)delimiter(')>operator(:)
                            ident(brace_balance)operator([)integer(1)operator(]) operator(+=) integer(1)
                        keyword(elif) ident(scanner)operator(.)ident(match) operator(==) string<delimiter(')content(])delimiter(')>operator(:)
                            ident(brace_balance)operator([)integer(1)operator(]) operator(-=) integer(1)
                keyword(elif) ident(scanner)operator(.)ident(scan)operator(()string<modifier(r)delimiter(')content([A-Za-z_][A-Za-z_0-9]*)delimiter(')>operator(\))operator(:)
                    ident(lowercase_name) operator(=) ident(scanner)operator(.)ident(match)operator(.)ident(lower)operator(()operator(\))
                    keyword(if) ident(lowercase_name) operator(==) string<delimiter(')content(result)delimiter(')>operator(:)
                        ident(token) operator(=) ident(Name)operator(.)ident(Builtin)operator(.)ident(Pseudo)
                    keyword(elif) ident(lowercase_name) keyword(in) predefined_constant(self)operator(.)ident(keywords)operator(:)
                        ident(token) operator(=) ident(Keyword)
                        comment(# if we are in a special block and a)
                        comment(# block ending keyword occours (and the parenthesis)
                        comment(# is balanced\) we end the current block context)
                        keyword(if) operator(()ident(in_function_block) keyword(or) ident(in_property_block)operator(\)) keyword(and) \
                           ident(lowercase_name) keyword(in) predefined_constant(self)operator(.)ident(BLOCK_KEYWORDS) keyword(and) \
                           ident(brace_balance)operator([)integer(0)operator(]) operator(<=) integer(0) keyword(and) \
                           ident(brace_balance)operator([)integer(1)operator(]) operator(<=) integer(0)operator(:)
                            ident(in_function_block) operator(=) predefined_constant(False)
                            ident(in_property_block) operator(=) predefined_constant(False)
                            ident(brace_balance) operator(=) operator([)integer(0)operator(,) integer(0)operator(])
                            ident(block_labels) operator(=) predefined(set)operator(()operator(\))
                        keyword(if) ident(lowercase_name) keyword(in) operator(()string<delimiter(')content(label)delimiter(')>operator(,) string<delimiter(')content(goto)delimiter(')>operator(\))operator(:)
                            ident(collect_labels) operator(=) predefined_constant(True)
                        keyword(elif) ident(lowercase_name) operator(==) string<delimiter(')content(asm)delimiter(')>operator(:)
                            ident(stack)operator(.)ident(append)operator(()string<delimiter(')content(asm)delimiter(')>operator(\))
                        keyword(elif) ident(lowercase_name) operator(==) string<delimiter(')content(property)delimiter(')>operator(:)
                            ident(in_property_block) operator(=) predefined_constant(True)
                            ident(next_token_is_property) operator(=) predefined_constant(True)
                        keyword(elif) ident(lowercase_name) keyword(in) operator(()string<delimiter(')content(procedure)delimiter(')>operator(,) string<delimiter(')content(operator)delimiter(')>operator(,)
                                                string<delimiter(')content(function)delimiter(')>operator(,) string<delimiter(')content(constructor)delimiter(')>operator(,)
                                                string<delimiter(')content(destructor)delimiter(')>operator(\))operator(:)
                            ident(in_function_block) operator(=) predefined_constant(True)
                            ident(next_token_is_function) operator(=) predefined_constant(True)
                    comment(# we are in a function block and the current name)
                    comment(# is in the set of registered modifiers. highlight)
                    comment(# it as pseudo keyword)
                    keyword(elif) ident(in_function_block) keyword(and) \
                         ident(lowercase_name) keyword(in) predefined_constant(self)operator(.)ident(FUNCTION_MODIFIERS)operator(:)
                        ident(token) operator(=) ident(Keyword)operator(.)ident(Pseudo)
                    comment(# if we are in a property highlight some more)
                    comment(# modifiers)
                    keyword(elif) ident(in_property_block) keyword(and) \
                         ident(lowercase_name) keyword(in) operator(()string<delimiter(')content(read)delimiter(')>operator(,) string<delimiter(')content(write)delimiter(')>operator(\))operator(:)
                        ident(token) operator(=) ident(Keyword)operator(.)ident(Pseudo)
                        ident(next_token_is_function) operator(=) predefined_constant(True)
                    comment(# if the last iteration set next_token_is_function)
                    comment(# to true we now want this name highlighted as)
                    comment(# function. so do that and reset the state)
                    keyword(elif) ident(next_token_is_function)operator(:)
                        comment(# Look if the next token is a dot. If yes it's)
                        comment(# not a function, but a class name and the)
                        comment(# part after the dot a function name)
                        keyword(if) ident(scanner)operator(.)ident(test)operator(()string<modifier(r)delimiter(')content(\\s)content(*)content(\\.)content(\\s)content(*)delimiter(')>operator(\))operator(:)
                            ident(token) operator(=) ident(Name)operator(.)ident(Class)
                        comment(# it's not a dot, our job is done)
                        keyword(else)operator(:)
                            ident(token) operator(=) ident(Name)operator(.)ident(Function)
                            ident(next_token_is_function) operator(=) predefined_constant(False)
                    comment(# same for properties)
                    keyword(elif) ident(next_token_is_property)operator(:)
                        ident(token) operator(=) ident(Name)operator(.)ident(Property)
                        ident(next_token_is_property) operator(=) predefined_constant(False)
                    comment(# Highlight this token as label and add it)
                    comment(# to the list of known labels)
                    keyword(elif) ident(collect_labels)operator(:)
                        ident(token) operator(=) ident(Name)operator(.)ident(Label)
                        ident(block_labels)operator(.)ident(add)operator(()ident(scanner)operator(.)ident(match)operator(.)ident(lower)operator(()operator(\))operator(\))
                    comment(# name is in list of known labels)
                    keyword(elif) ident(lowercase_name) keyword(in) ident(block_labels)operator(:)
                        ident(token) operator(=) ident(Name)operator(.)ident(Label)
                    keyword(elif) ident(lowercase_name) keyword(in) predefined_constant(self)operator(.)ident(BUILTIN_TYPES)operator(:)
                        ident(token) operator(=) ident(Keyword)operator(.)ident(Type)
                    keyword(elif) ident(lowercase_name) keyword(in) predefined_constant(self)operator(.)ident(DIRECTIVES)operator(:)
                        ident(token) operator(=) ident(Keyword)operator(.)ident(Pseudo)
                    comment(# builtins are just builtins if the token)
                    comment(# before isn't a dot)
                    keyword(elif) keyword(not) ident(was_dot) keyword(and) ident(lowercase_name) keyword(in) predefined_constant(self)operator(.)ident(builtins)operator(:)
                        ident(token) operator(=) ident(Name)operator(.)ident(Builtin)
                    keyword(else)operator(:)
                        ident(token) operator(=) ident(Name)
                keyword(elif) ident(scanner)operator(.)ident(scan)operator(()string<modifier(r)delimiter(")content(')delimiter(")>operator(\))operator(:)
                    ident(token) operator(=) ident(String)
                    ident(stack)operator(.)ident(append)operator(()string<delimiter(')content(string)delimiter(')>operator(\))
                keyword(elif) ident(scanner)operator(.)ident(scan)operator(()string<modifier(r)delimiter(')content(\\#)content(()content(\\d)content(+|)content(\\$)content([0-9A-Fa-f]+\))delimiter(')>operator(\))operator(:)
                    ident(token) operator(=) ident(String)operator(.)ident(Char)
                keyword(elif) ident(scanner)operator(.)ident(scan)operator(()string<modifier(r)delimiter(')content(\\$)content([0-9A-Fa-f]+)delimiter(')>operator(\))operator(:)
                    ident(token) operator(=) ident(Number)operator(.)ident(Hex)
                keyword(elif) ident(scanner)operator(.)ident(scan)operator(()string<modifier(r)delimiter(')content(\\d)content(+(?![eE]|)content(\\.)content([^.]\))delimiter(')>operator(\))operator(:)
                    ident(token) operator(=) ident(Number)operator(.)ident(Integer)
                keyword(elif) ident(scanner)operator(.)ident(scan)operator(()string<modifier(r)delimiter(')content(\\d)content(+()content(\\.)content(\\d)content(+([eE][+-]?)content(\\d)content(+\)?|[eE][+-]?)content(\\d)content(+\))delimiter(')>operator(\))operator(:)
                    ident(token) operator(=) ident(Number)operator(.)ident(Float)
                keyword(else)operator(:)
                    comment(# if the stack depth is deeper than once, pop)
                    keyword(if) predefined(len)operator(()ident(stack)operator(\)) operator(>) integer(1)operator(:)
                        ident(stack)operator(.)ident(pop)operator(()operator(\))
                    ident(scanner)operator(.)ident(get_char)operator(()operator(\))

            keyword(elif) ident(stack)operator([)operator(-)integer(1)operator(]) operator(==) string<delimiter(')content(string)delimiter(')>operator(:)
                keyword(if) ident(scanner)operator(.)ident(scan)operator(()string<modifier(r)delimiter(")content('')delimiter(")>operator(\))operator(:)
                    ident(token) operator(=) ident(String)operator(.)ident(Escape)
                keyword(elif) ident(scanner)operator(.)ident(scan)operator(()string<modifier(r)delimiter(")content(')delimiter(")>operator(\))operator(:)
                    ident(token) operator(=) ident(String)
                    ident(stack)operator(.)ident(pop)operator(()operator(\))
                keyword(elif) ident(scanner)operator(.)ident(scan)operator(()string<modifier(r)delimiter(")content([^']*)delimiter(")>operator(\))operator(:)
                    ident(token) operator(=) ident(String)
                keyword(else)operator(:)
                    ident(scanner)operator(.)ident(get_char)operator(()operator(\))
                    ident(stack)operator(.)ident(pop)operator(()operator(\))

            keyword(elif) ident(stack)operator([)operator(-)integer(1)operator(]) operator(==) string<delimiter(')content(asm)delimiter(')>operator(:)
                keyword(if) ident(scanner)operator(.)ident(scan)operator(()string<modifier(r)delimiter(')content(\\s)content(+)delimiter(')>operator(\))operator(:)
                    ident(token) operator(=) ident(Text)
                keyword(elif) ident(scanner)operator(.)ident(scan)operator(()string<modifier(r)delimiter(')content(end)delimiter(')>operator(\))operator(:)
                    ident(token) operator(=) ident(Keyword)
                    ident(stack)operator(.)ident(pop)operator(()operator(\))
                keyword(elif) ident(scanner)operator(.)ident(scan)operator(()string<modifier(r)delimiter(')content(\\{)content(.*?)content(\\})content(|)content(\\()content(\\*)content(.*?)content(\\*)content(\\\))delimiter(')>operator(\))operator(:)
                    keyword(if) ident(scanner)operator(.)ident(match)operator(.)ident(startswith)operator(()string<delimiter(')content($)delimiter(')>operator(\))operator(:)
                        ident(token) operator(=) ident(Comment)operator(.)ident(Preproc)
                    keyword(else)operator(:)
                        ident(token) operator(=) ident(Comment)operator(.)ident(Multiline)
                keyword(elif) ident(scanner)operator(.)ident(scan)operator(()string<modifier(r)delimiter(')content(//.*?$)delimiter(')>operator(\))operator(:)
                    ident(token) operator(=) ident(Comment)operator(.)ident(Single)
                keyword(elif) ident(scanner)operator(.)ident(scan)operator(()string<modifier(r)delimiter(")content(')delimiter(")>operator(\))operator(:)
                    ident(token) operator(=) ident(String)
                    ident(stack)operator(.)ident(append)operator(()string<delimiter(')content(string)delimiter(')>operator(\))
                keyword(elif) ident(scanner)operator(.)ident(scan)operator(()string<modifier(r)delimiter(')content(@@[A-Za-z_][A-Za-z_0-9]*)delimiter(')>operator(\))operator(:)
                    ident(token) operator(=) ident(Name)operator(.)ident(Label)
                keyword(elif) ident(scanner)operator(.)ident(scan)operator(()string<modifier(r)delimiter(')content([A-Za-z_][A-Za-z_0-9]*)delimiter(')>operator(\))operator(:)
                    ident(lowercase_name) operator(=) ident(scanner)operator(.)ident(match)operator(.)ident(lower)operator(()operator(\))
                    keyword(if) ident(lowercase_name) keyword(in) predefined_constant(self)operator(.)ident(ASM_INSTRUCTIONS)operator(:)
                        ident(token) operator(=) ident(Keyword)
                    keyword(elif) ident(lowercase_name) keyword(in) predefined_constant(self)operator(.)ident(ASM_REGISTERS)operator(:)
                        ident(token) operator(=) ident(Name)operator(.)ident(Builtin)
                    keyword(else)operator(:)
                        ident(token) operator(=) ident(Name)
                keyword(elif) ident(scanner)operator(.)ident(scan)operator(()string<modifier(r)delimiter(')content([-+*)content(\\/)content(=<>:;,.@)content(\\^)content(]+)delimiter(')>operator(\))operator(:)
                    ident(token) operator(=) ident(Operator)
                keyword(elif) ident(scanner)operator(.)ident(scan)operator(()string<modifier(r)delimiter(')content([)content(\\()content(\\\))content(\\[)content(\\])content(]+)delimiter(')>operator(\))operator(:)
                    ident(token) operator(=) ident(Punctuation)
                keyword(elif) ident(scanner)operator(.)ident(scan)operator(()string<modifier(r)delimiter(')content(\\$)content([0-9A-Fa-f]+)delimiter(')>operator(\))operator(:)
                    ident(token) operator(=) ident(Number)operator(.)ident(Hex)
                keyword(elif) ident(scanner)operator(.)ident(scan)operator(()string<modifier(r)delimiter(')content(\\d)content(+(?![eE]|)content(\\.)content([^.]\))delimiter(')>operator(\))operator(:)
                    ident(token) operator(=) ident(Number)operator(.)ident(Integer)
                keyword(elif) ident(scanner)operator(.)ident(scan)operator(()string<modifier(r)delimiter(')content(\\d)content(+()content(\\.)content(\\d)content(+([eE][+-]?)content(\\d)content(+\)?|[eE][+-]?)content(\\d)content(+\))delimiter(')>operator(\))operator(:)
                    ident(token) operator(=) ident(Number)operator(.)ident(Float)
                keyword(else)operator(:)
                    ident(scanner)operator(.)ident(get_char)operator(()operator(\))
                    ident(stack)operator(.)ident(pop)operator(()operator(\))

            comment(# save the dot!!!11)
            keyword(if) ident(scanner)operator(.)ident(match)operator(.)ident(strip)operator(()operator(\))operator(:)
                ident(was_dot) operator(=) ident(scanner)operator(.)ident(match) operator(==) string<delimiter(')content(.)delimiter(')>
            ident(yield) ident(scanner)operator(.)ident(start_pos)operator(,) ident(token)operator(,) ident(scanner)operator(.)ident(match) keyword(or) string<delimiter(')delimiter(')>


keyword(class) class(JavaLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    For `Java <http://www.sun.com/java/>`_ source code.)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(Java)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(java)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.java)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(text/x-java)delimiter(')>operator(])

    ident(flags) operator(=) ident(re)operator(.)ident(MULTILINE) operator(|) ident(re)operator(.)ident(DOTALL)

    comment(#: optional Comment or Whitespace)
    ident(_ws) operator(=) string<modifier(r)delimiter(')content((?:)content(\\s)content(|//.*?)content(\\n)content(|/[*].*?[*]/\)+)delimiter(')>

    ident(tokens) operator(=) operator({)
        string<delimiter(')content(root)delimiter(')>operator(:) operator([)
            comment(# method names)
            operator(()string<modifier(r)delimiter(')content(^()content(\\s)content(*(?:[a-zA-Z_][a-zA-Z0-9_)content(\\.)content(\\[)content(\\])content(]*)content(\\s)content(+\)+?\))delimiter(')> comment(# return arguments)
             string<modifier(r)delimiter(')content(([a-zA-Z_][a-zA-Z0-9_]*\))delimiter(')>                    comment(# method name)
             string<modifier(r)delimiter(')content(()content(\\s)content(*\)()content(\\()content(\))delimiter(')>operator(,)                                  comment(# signature start)
             ident(bygroups)operator(()ident(using)operator(()ident(this)operator(\))operator(,) ident(Name)operator(.)ident(Function)operator(,) ident(Text)operator(,) ident(Operator)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([^)content(\\S)content(\\n)content(]+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(//.*?)content(\\n)delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(/)content(\\*)content(.*?)content(\\*)content(/)delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(@[a-zA-Z_][a-zA-Z0-9_)content(\\.)content(]*)delimiter(')>operator(,) ident(Name)operator(.)ident(Decorator)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((assert|break|case|catch|continue|default|do|else|finally|for|)delimiter(')>
             string<modifier(r)delimiter(')content(if|goto|instanceof|new|return|switch|this|throw|try|while\))content(\\b)delimiter(')>operator(,)
             ident(Keyword)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((abstract|const|enum|extends|final|implements|native|private|)delimiter(')>
             string<modifier(r)delimiter(')content(protected|public|static|strictfp|super|synchronized|throws|)delimiter(')>
             string<modifier(r)delimiter(')content(transient|volatile\))content(\\b)delimiter(')>operator(,) ident(Keyword)operator(.)ident(Declaration)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((boolean|byte|char|double|float|int|long|short|void\))content(\\b)delimiter(')>operator(,)
             ident(Keyword)operator(.)ident(Type)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((package\)()content(\\s)content(+\))delimiter(')>operator(,) ident(bygroups)operator(()ident(Keyword)operator(.)ident(Namespace)operator(,) ident(Text)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((true|false|null\))content(\\b)delimiter(')>operator(,) ident(Keyword)operator(.)ident(Constant)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((class|interface\)()content(\\s)content(+\))delimiter(')>operator(,) ident(bygroups)operator(()ident(Keyword)operator(.)ident(Declaration)operator(,) ident(Text)operator(\))operator(,) string<delimiter(')content(class)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((import\)()content(\\s)content(+\))delimiter(')>operator(,) ident(bygroups)operator(()ident(Keyword)operator(.)ident(Namespace)operator(,) ident(Text)operator(\))operator(,) string<delimiter(')content(import)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content("()content(\\\\)content(\\\\)content(|)content(\\\\)content("|[^"]\)*")delimiter(')>operator(,) ident(String)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(")content(')content(\\\\)content(.'|'[^)content(\\\\)content(]'|')content(\\\\)content(u[0-9a-f]{4}')delimiter(")>operator(,) ident(String)operator(.)ident(Char)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(()content(\\.)content(\)([a-zA-Z_][a-zA-Z0-9_]*\))delimiter(')>operator(,) ident(bygroups)operator(()ident(Operator)operator(,) ident(Name)operator(.)ident(Attribute)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([a-zA-Z_][a-zA-Z0-9_]*:)delimiter(')>operator(,) ident(Name)operator(.)ident(Label)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([a-zA-Z_)content(\\$)content(][a-zA-Z0-9_]*)delimiter(')>operator(,) ident(Name)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([~)content(\\^)content(\\*)content(!%&)content(\\[)content(\\])content(\\()content(\\\))content(\\{)content(\\})content(<>)content(\\|)content(+=:;,./?-])delimiter(')>operator(,) ident(Operator)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([0-9][0-9]*)content(\\.)content([0-9]+([eE][0-9]+\)?[fd]?)delimiter(')>operator(,) ident(Number)operator(.)ident(Float)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(0x[0-9a-f]+)delimiter(')>operator(,) ident(Number)operator(.)ident(Hex)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([0-9]+L?)delimiter(')>operator(,) ident(Number)operator(.)ident(Integer)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\n)delimiter(')>operator(,) ident(Text)operator(\))
        operator(])operator(,)
        string<delimiter(')content(class)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content([a-zA-Z_][a-zA-Z0-9_]*)delimiter(')>operator(,) ident(Name)operator(.)ident(Class)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))
        operator(])operator(,)
        string<delimiter(')content(import)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content([a-zA-Z0-9_.]+)content(\\*)content(?)delimiter(')>operator(,) ident(Name)operator(.)ident(Namespace)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))
        operator(])operator(,)
    operator(})

keyword(class) class(ScalaLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    For `Scala <http://www.scala-lang.org>`_ source code.)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(Scala)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(scala)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.scala)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(text/x-scala)delimiter(')>operator(])

    ident(flags) operator(=) ident(re)operator(.)ident(MULTILINE) operator(|) ident(re)operator(.)ident(DOTALL)

    comment(#: optional Comment or Whitespace)
    ident(_ws) operator(=) string<modifier(r)delimiter(')content((?:)content(\\s)content(|//.*?)content(\\n)content(|/[*].*?[*]/\)+)delimiter(')>

    comment(# don't use raw unicode strings!)
    ident(op) operator(=) string<modifier(u)delimiter(')content([-~)char(\\\\)content(^)char(\\\\)content(*!%&)char(\\\\)char(\\\\)content(<>)char(\\\\)content(|+=:/?@)char(\\u00a6)content(-)char(\\u00a7)char(\\u00a9)char(\\u00ac)char(\\u00ae)char(\\u00b0)content(-)char(\\u00b1)char(\\u00b6)char(\\u00d7)char(\\u00f7)char(\\u03f6)char(\\u0482)char(\\u0606)content(-)char(\\u0608)char(\\u060e)content(-)char(\\u060f)char(\\u06e9)char(\\u06fd)content(-)char(\\u06fe)char(\\u07f6)char(\\u09fa)char(\\u0b70)char(\\u0bf3)content(-)char(\\u0bf8)char(\\u0bfa)char(\\u0c7f)char(\\u0cf1)content(-)char(\\u0cf2)char(\\u0d79)char(\\u0f01)content(-)char(\\u0f03)char(\\u0f13)content(-)char(\\u0f17)char(\\u0f1a)content(-)char(\\u0f1f)char(\\u0f34)char(\\u0f36)char(\\u0f38)char(\\u0fbe)content(-)char(\\u0fc5)char(\\u0fc7)content(-)char(\\u0fcf)char(\\u109e)content(-)char(\\u109f)char(\\u1360)char(\\u1390)content(-)char(\\u1399)char(\\u1940)char(\\u19e0)content(-)char(\\u19ff)char(\\u1b61)content(-)char(\\u1b6a)char(\\u1b74)content(-)char(\\u1b7c)char(\\u2044)char(\\u2052)char(\\u207a)content(-)char(\\u207c)char(\\u208a)content(-)char(\\u208c)char(\\u2100)content(-)char(\\u2101)char(\\u2103)content(-)char(\\u2106)char(\\u2108)content(-)char(\\u2109)char(\\u2114)char(\\u2116)content(-)char(\\u2118)char(\\u211e)content(-)char(\\u2123)char(\\u2125)char(\\u2127)char(\\u2129)char(\\u212e)char(\\u213a)content(-)char(\\u213b)char(\\u2140)content(-)char(\\u2144)char(\\u214a)content(-)char(\\u214d)char(\\u214f)char(\\u2190)content(-)char(\\u2328)char(\\u232b)content(-)char(\\u244a)char(\\u249c)content(-)char(\\u24e9)char(\\u2500)content(-)char(\\u2767)char(\\u2794)content(-)char(\\u27c4)char(\\u27c7)content(-)char(\\u27e5)char(\\u27f0)content(-)char(\\u2982)char(\\u2999)content(-)char(\\u29d7)char(\\u29dc)content(-)char(\\u29fb)char(\\u29fe)content(-)char(\\u2b54)char(\\u2ce5)content(-)char(\\u2cea)char(\\u2e80)content(-)char(\\u2ffb)char(\\u3004)char(\\u3012)content(-)char(\\u3013)char(\\u3020)char(\\u3036)content(-)char(\\u3037)char(\\u303e)content(-)char(\\u303f)char(\\u3190)content(-)char(\\u3191)char(\\u3196)content(-)char(\\u319f)char(\\u31c0)content(-)char(\\u31e3)char(\\u3200)content(-)char(\\u321e)char(\\u322a)content(-)char(\\u3250)char(\\u3260)content(-)char(\\u327f)char(\\u328a)content(-)char(\\u32b0)char(\\u32c0)content(-)char(\\u33ff)char(\\u4dc0)content(-)char(\\u4dff)char(\\ua490)content(-)char(\\ua4c6)char(\\ua828)content(-)char(\\ua82b)char(\\ufb29)char(\\ufdfd)char(\\ufe62)char(\\ufe64)content(-)char(\\ufe66)char(\\uff0b)char(\\uff1c)content(-)char(\\uff1e)char(\\uff5c)char(\\uff5e)char(\\uffe2)char(\\uffe4)char(\\uffe8)content(-)char(\\uffee)char(\\ufffc)content(-)char(\\ufffd)content(]+)delimiter(')>

    ident(letter) operator(=) string<modifier(u)delimiter(')content([a-zA-Z)char(\\\\)content($_)char(\\u00aa)char(\\u00b5)char(\\u00ba)char(\\u00c0)content(-)char(\\u00d6)char(\\u00d8)content(-)char(\\u00f6)char(\\u00f8)content(-)char(\\u02af)char(\\u0370)content(-)char(\\u0373)char(\\u0376)content(-)char(\\u0377)char(\\u037b)content(-)char(\\u037d)char(\\u0386)char(\\u0388)content(-)char(\\u03f5)char(\\u03f7)content(-)char(\\u0481)char(\\u048a)content(-)char(\\u0556)char(\\u0561)content(-)char(\\u0587)char(\\u05d0)content(-)char(\\u05f2)char(\\u0621)content(-)char(\\u063f)char(\\u0641)content(-)char(\\u064a)char(\\u066e)content(-)char(\\u066f)char(\\u0671)content(-)char(\\u06d3)char(\\u06d5)char(\\u06ee)content(-)char(\\u06ef)char(\\u06fa)content(-)char(\\u06fc)char(\\u06ff)char(\\u0710)char(\\u0712)content(-)char(\\u072f)char(\\u074d)content(-)char(\\u07a5)char(\\u07b1)char(\\u07ca)content(-)char(\\u07ea)char(\\u0904)content(-)char(\\u0939)char(\\u093d)char(\\u0950)char(\\u0958)content(-)char(\\u0961)char(\\u0972)content(-)char(\\u097f)char(\\u0985)content(-)char(\\u09b9)char(\\u09bd)char(\\u09ce)char(\\u09dc)content(-)char(\\u09e1)char(\\u09f0)content(-)char(\\u09f1)char(\\u0a05)content(-)char(\\u0a39)char(\\u0a59)content(-)char(\\u0a5e)char(\\u0a72)content(-)char(\\u0a74)char(\\u0a85)content(-)char(\\u0ab9)char(\\u0abd)char(\\u0ad0)content(-)char(\\u0ae1)char(\\u0b05)content(-)char(\\u0b39)char(\\u0b3d)char(\\u0b5c)content(-)char(\\u0b61)char(\\u0b71)char(\\u0b83)content(-)char(\\u0bb9)char(\\u0bd0)char(\\u0c05)content(-)char(\\u0c3d)char(\\u0c58)content(-)char(\\u0c61)char(\\u0c85)content(-)char(\\u0cb9)char(\\u0cbd)char(\\u0cde)content(-)char(\\u0ce1)char(\\u0d05)content(-)char(\\u0d3d)char(\\u0d60)content(-)char(\\u0d61)char(\\u0d7a)content(-)char(\\u0d7f)char(\\u0d85)content(-)char(\\u0dc6)char(\\u0e01)content(-)char(\\u0e30)char(\\u0e32)content(-)char(\\u0e33)char(\\u0e40)content(-)char(\\u0e45)char(\\u0e81)content(-)char(\\u0eb0)char(\\u0eb2)content(-)char(\\u0eb3)char(\\u0ebd)content(-)char(\\u0ec4)char(\\u0edc)content(-)char(\\u0f00)char(\\u0f40)content(-)char(\\u0f6c)char(\\u0f88)content(-)char(\\u0f8b)char(\\u1000)content(-)char(\\u102a)char(\\u103f)char(\\u1050)content(-)char(\\u1055)char(\\u105a)content(-)char(\\u105d)char(\\u1061)char(\\u1065)content(-)char(\\u1066)char(\\u106e)content(-)char(\\u1070)char(\\u1075)content(-)char(\\u1081)char(\\u108e)char(\\u10a0)content(-)char(\\u10fa)char(\\u1100)content(-)char(\\u135a)char(\\u1380)content(-)char(\\u138f)char(\\u13a0)content(-)char(\\u166c)char(\\u166f)content(-)char(\\u1676)char(\\u1681)content(-)char(\\u169a)char(\\u16a0)content(-)char(\\u16ea)char(\\u16ee)content(-)char(\\u1711)char(\\u1720)content(-)char(\\u1731)char(\\u1740)content(-)char(\\u1751)char(\\u1760)content(-)char(\\u1770)char(\\u1780)content(-)char(\\u17b3)char(\\u17dc)char(\\u1820)content(-)char(\\u1842)char(\\u1844)content(-)char(\\u18a8)char(\\u18aa)content(-)char(\\u191c)char(\\u1950)content(-)char(\\u19a9)char(\\u19c1)content(-)char(\\u19c7)char(\\u1a00)content(-)char(\\u1a16)char(\\u1b05)content(-)char(\\u1b33)char(\\u1b45)content(-)char(\\u1b4b)char(\\u1b83)content(-)char(\\u1ba0)char(\\u1bae)content(-)char(\\u1baf)char(\\u1c00)content(-)char(\\u1c23)char(\\u1c4d)content(-)char(\\u1c4f)char(\\u1c5a)content(-)char(\\u1c77)char(\\u1d00)content(-)char(\\u1d2b)char(\\u1d62)content(-)char(\\u1d77)char(\\u1d79)content(-)char(\\u1d9a)char(\\u1e00)content(-)char(\\u1fbc)char(\\u1fbe)char(\\u1fc2)content(-)char(\\u1fcc)char(\\u1fd0)content(-)char(\\u1fdb)char(\\u1fe0)content(-)char(\\u1fec)char(\\u1ff2)content(-)char(\\u1ffc)char(\\u2071)char(\\u207f)char(\\u2102)char(\\u2107)char(\\u210a)content(-)char(\\u2113)char(\\u2115)char(\\u2119)content(-)char(\\u211d)char(\\u2124)char(\\u2126)char(\\u2128)char(\\u212a)content(-)char(\\u212d)char(\\u212f)content(-)char(\\u2139)char(\\u213c)content(-)char(\\u213f)char(\\u2145)content(-)char(\\u2149)char(\\u214e)char(\\u2160)content(-)char(\\u2188)char(\\u2c00)content(-)char(\\u2c7c)char(\\u2c80)content(-)char(\\u2ce4)char(\\u2d00)content(-)char(\\u2d65)char(\\u2d80)content(-)char(\\u2dde)char(\\u3006)content(-)char(\\u3007)char(\\u3021)content(-)char(\\u3029)char(\\u3038)content(-)char(\\u303a)char(\\u303c)char(\\u3041)content(-)char(\\u3096)char(\\u309f)char(\\u30a1)content(-)char(\\u30fa)char(\\u30ff)content(-)char(\\u318e)char(\\u31a0)content(-)char(\\u31b7)char(\\u31f0)content(-)char(\\u31ff)char(\\u3400)content(-)char(\\u4db5)char(\\u4e00)content(-)char(\\ua014)char(\\ua016)content(-)char(\\ua48c)char(\\ua500)content(-)char(\\ua60b)char(\\ua610)content(-)char(\\ua61f)char(\\ua62a)content(-)char(\\ua66e)char(\\ua680)content(-)char(\\ua697)char(\\ua722)content(-)char(\\ua76f)char(\\ua771)content(-)char(\\ua787)char(\\ua78b)content(-)char(\\ua801)char(\\ua803)content(-)char(\\ua805)char(\\ua807)content(-)char(\\ua80a)char(\\ua80c)content(-)char(\\ua822)char(\\ua840)content(-)char(\\ua873)char(\\ua882)content(-)char(\\ua8b3)char(\\ua90a)content(-)char(\\ua925)char(\\ua930)content(-)char(\\ua946)char(\\uaa00)content(-)char(\\uaa28)char(\\uaa40)content(-)char(\\uaa42)char(\\uaa44)content(-)char(\\uaa4b)char(\\uac00)content(-)char(\\ud7a3)char(\\uf900)content(-)char(\\ufb1d)char(\\ufb1f)content(-)char(\\ufb28)char(\\ufb2a)content(-)char(\\ufd3d)char(\\ufd50)content(-)char(\\ufdfb)char(\\ufe70)content(-)char(\\ufefc)char(\\uff21)content(-)char(\\uff3a)char(\\uff41)content(-)char(\\uff5a)char(\\uff66)content(-)char(\\uff6f)char(\\uff71)content(-)char(\\uff9d)char(\\uffa0)content(-)char(\\uffdc)content(])delimiter(')>

    ident(upper) operator(=) string<modifier(u)delimiter(')content([A-Z)char(\\\\)content($_)char(\\u00c0)content(-)char(\\u00d6)char(\\u00d8)content(-)char(\\u00de)char(\\u0100)char(\\u0102)char(\\u0104)char(\\u0106)char(\\u0108)char(\\u010a)char(\\u010c)char(\\u010e)char(\\u0110)char(\\u0112)char(\\u0114)char(\\u0116)char(\\u0118)char(\\u011a)char(\\u011c)char(\\u011e)char(\\u0120)char(\\u0122)char(\\u0124)char(\\u0126)char(\\u0128)char(\\u012a)char(\\u012c)char(\\u012e)char(\\u0130)char(\\u0132)char(\\u0134)char(\\u0136)char(\\u0139)char(\\u013b)char(\\u013d)char(\\u013f)char(\\u0141)char(\\u0143)char(\\u0145)char(\\u0147)char(\\u014a)char(\\u014c)char(\\u014e)char(\\u0150)char(\\u0152)char(\\u0154)char(\\u0156)char(\\u0158)char(\\u015a)char(\\u015c)char(\\u015e)char(\\u0160)char(\\u0162)char(\\u0164)char(\\u0166)char(\\u0168)char(\\u016a)char(\\u016c)char(\\u016e)char(\\u0170)char(\\u0172)char(\\u0174)char(\\u0176)char(\\u0178)content(-)char(\\u0179)char(\\u017b)char(\\u017d)char(\\u0181)content(-)char(\\u0182)char(\\u0184)char(\\u0186)content(-)char(\\u0187)char(\\u0189)content(-)char(\\u018b)char(\\u018e)content(-)char(\\u0191)char(\\u0193)content(-)char(\\u0194)char(\\u0196)content(-)char(\\u0198)char(\\u019c)content(-)char(\\u019d)char(\\u019f)content(-)char(\\u01a0)char(\\u01a2)char(\\u01a4)char(\\u01a6)content(-)char(\\u01a7)char(\\u01a9)char(\\u01ac)char(\\u01ae)content(-)char(\\u01af)char(\\u01b1)content(-)char(\\u01b3)char(\\u01b5)char(\\u01b7)content(-)char(\\u01b8)char(\\u01bc)char(\\u01c4)char(\\u01c7)char(\\u01ca)char(\\u01cd)char(\\u01cf)char(\\u01d1)char(\\u01d3)char(\\u01d5)char(\\u01d7)char(\\u01d9)char(\\u01db)char(\\u01de)char(\\u01e0)char(\\u01e2)char(\\u01e4)char(\\u01e6)char(\\u01e8)char(\\u01ea)char(\\u01ec)char(\\u01ee)char(\\u01f1)char(\\u01f4)char(\\u01f6)content(-)char(\\u01f8)char(\\u01fa)char(\\u01fc)char(\\u01fe)char(\\u0200)char(\\u0202)char(\\u0204)char(\\u0206)char(\\u0208)char(\\u020a)char(\\u020c)char(\\u020e)char(\\u0210)char(\\u0212)char(\\u0214)char(\\u0216)char(\\u0218)char(\\u021a)char(\\u021c)char(\\u021e)char(\\u0220)char(\\u0222)char(\\u0224)char(\\u0226)char(\\u0228)char(\\u022a)char(\\u022c)char(\\u022e)char(\\u0230)char(\\u0232)char(\\u023a)content(-)char(\\u023b)char(\\u023d)content(-)char(\\u023e)char(\\u0241)char(\\u0243)content(-)char(\\u0246)char(\\u0248)char(\\u024a)char(\\u024c)char(\\u024e)char(\\u0370)char(\\u0372)char(\\u0376)char(\\u0386)char(\\u0388)content(-)char(\\u038f)char(\\u0391)content(-)char(\\u03ab)char(\\u03cf)char(\\u03d2)content(-)char(\\u03d4)char(\\u03d8)char(\\u03da)char(\\u03dc)char(\\u03de)char(\\u03e0)char(\\u03e2)char(\\u03e4)char(\\u03e6)char(\\u03e8)char(\\u03ea)char(\\u03ec)char(\\u03ee)char(\\u03f4)char(\\u03f7)char(\\u03f9)content(-)char(\\u03fa)char(\\u03fd)content(-)char(\\u042f)char(\\u0460)char(\\u0462)char(\\u0464)char(\\u0466)char(\\u0468)char(\\u046a)char(\\u046c)char(\\u046e)char(\\u0470)char(\\u0472)char(\\u0474)char(\\u0476)char(\\u0478)char(\\u047a)char(\\u047c)char(\\u047e)char(\\u0480)char(\\u048a)char(\\u048c)char(\\u048e)char(\\u0490)char(\\u0492)char(\\u0494)char(\\u0496)char(\\u0498)char(\\u049a)char(\\u049c)char(\\u049e)char(\\u04a0)char(\\u04a2)char(\\u04a4)char(\\u04a6)char(\\u04a8)char(\\u04aa)char(\\u04ac)char(\\u04ae)char(\\u04b0)char(\\u04b2)char(\\u04b4)char(\\u04b6)char(\\u04b8)char(\\u04ba)char(\\u04bc)char(\\u04be)char(\\u04c0)content(-)char(\\u04c1)char(\\u04c3)char(\\u04c5)char(\\u04c7)char(\\u04c9)char(\\u04cb)char(\\u04cd)char(\\u04d0)char(\\u04d2)char(\\u04d4)char(\\u04d6)char(\\u04d8)char(\\u04da)char(\\u04dc)char(\\u04de)char(\\u04e0)char(\\u04e2)char(\\u04e4)char(\\u04e6)char(\\u04e8)char(\\u04ea)char(\\u04ec)char(\\u04ee)char(\\u04f0)char(\\u04f2)char(\\u04f4)char(\\u04f6)char(\\u04f8)char(\\u04fa)char(\\u04fc)char(\\u04fe)char(\\u0500)char(\\u0502)char(\\u0504)char(\\u0506)char(\\u0508)char(\\u050a)char(\\u050c)char(\\u050e)char(\\u0510)char(\\u0512)char(\\u0514)char(\\u0516)char(\\u0518)char(\\u051a)char(\\u051c)char(\\u051e)char(\\u0520)char(\\u0522)char(\\u0531)content(-)char(\\u0556)char(\\u10a0)content(-)char(\\u10c5)char(\\u1e00)char(\\u1e02)char(\\u1e04)char(\\u1e06)char(\\u1e08)char(\\u1e0a)char(\\u1e0c)char(\\u1e0e)char(\\u1e10)char(\\u1e12)char(\\u1e14)char(\\u1e16)char(\\u1e18)char(\\u1e1a)char(\\u1e1c)char(\\u1e1e)char(\\u1e20)char(\\u1e22)char(\\u1e24)char(\\u1e26)char(\\u1e28)char(\\u1e2a)char(\\u1e2c)char(\\u1e2e)char(\\u1e30)char(\\u1e32)char(\\u1e34)char(\\u1e36)char(\\u1e38)char(\\u1e3a)char(\\u1e3c)char(\\u1e3e)char(\\u1e40)char(\\u1e42)char(\\u1e44)char(\\u1e46)char(\\u1e48)char(\\u1e4a)char(\\u1e4c)char(\\u1e4e)char(\\u1e50)char(\\u1e52)char(\\u1e54)char(\\u1e56)char(\\u1e58)char(\\u1e5a)char(\\u1e5c)char(\\u1e5e)char(\\u1e60)char(\\u1e62)char(\\u1e64)char(\\u1e66)char(\\u1e68)char(\\u1e6a)char(\\u1e6c)char(\\u1e6e)char(\\u1e70)char(\\u1e72)char(\\u1e74)char(\\u1e76)char(\\u1e78)char(\\u1e7a)char(\\u1e7c)char(\\u1e7e)char(\\u1e80)char(\\u1e82)char(\\u1e84)char(\\u1e86)char(\\u1e88)char(\\u1e8a)char(\\u1e8c)char(\\u1e8e)char(\\u1e90)char(\\u1e92)char(\\u1e94)char(\\u1e9e)char(\\u1ea0)char(\\u1ea2)char(\\u1ea4)char(\\u1ea6)char(\\u1ea8)char(\\u1eaa)char(\\u1eac)char(\\u1eae)char(\\u1eb0)char(\\u1eb2)char(\\u1eb4)char(\\u1eb6)char(\\u1eb8)char(\\u1eba)char(\\u1ebc)char(\\u1ebe)char(\\u1ec0)char(\\u1ec2)char(\\u1ec4)char(\\u1ec6)char(\\u1ec8)char(\\u1eca)char(\\u1ecc)char(\\u1ece)char(\\u1ed0)char(\\u1ed2)char(\\u1ed4)char(\\u1ed6)char(\\u1ed8)char(\\u1eda)char(\\u1edc)char(\\u1ede)char(\\u1ee0)char(\\u1ee2)char(\\u1ee4)char(\\u1ee6)char(\\u1ee8)char(\\u1eea)char(\\u1eec)char(\\u1eee)char(\\u1ef0)char(\\u1ef2)char(\\u1ef4)char(\\u1ef6)char(\\u1ef8)char(\\u1efa)char(\\u1efc)char(\\u1efe)char(\\u1f08)content(-)char(\\u1f0f)char(\\u1f18)content(-)char(\\u1f1d)char(\\u1f28)content(-)char(\\u1f2f)char(\\u1f38)content(-)char(\\u1f3f)char(\\u1f48)content(-)char(\\u1f4d)char(\\u1f59)content(-)char(\\u1f5f)char(\\u1f68)content(-)char(\\u1f6f)char(\\u1fb8)content(-)char(\\u1fbb)char(\\u1fc8)content(-)char(\\u1fcb)char(\\u1fd8)content(-)char(\\u1fdb)char(\\u1fe8)content(-)char(\\u1fec)char(\\u1ff8)content(-)char(\\u1ffb)char(\\u2102)char(\\u2107)char(\\u210b)content(-)char(\\u210d)char(\\u2110)content(-)char(\\u2112)char(\\u2115)char(\\u2119)content(-)char(\\u211d)char(\\u2124)char(\\u2126)char(\\u2128)char(\\u212a)content(-)char(\\u212d)char(\\u2130)content(-)char(\\u2133)char(\\u213e)content(-)char(\\u213f)char(\\u2145)char(\\u2183)char(\\u2c00)content(-)char(\\u2c2e)char(\\u2c60)char(\\u2c62)content(-)char(\\u2c64)char(\\u2c67)char(\\u2c69)char(\\u2c6b)char(\\u2c6d)content(-)char(\\u2c6f)char(\\u2c72)char(\\u2c75)char(\\u2c80)char(\\u2c82)char(\\u2c84)char(\\u2c86)char(\\u2c88)char(\\u2c8a)char(\\u2c8c)char(\\u2c8e)char(\\u2c90)char(\\u2c92)char(\\u2c94)char(\\u2c96)char(\\u2c98)char(\\u2c9a)char(\\u2c9c)char(\\u2c9e)char(\\u2ca0)char(\\u2ca2)char(\\u2ca4)char(\\u2ca6)char(\\u2ca8)char(\\u2caa)char(\\u2cac)char(\\u2cae)char(\\u2cb0)char(\\u2cb2)char(\\u2cb4)char(\\u2cb6)char(\\u2cb8)char(\\u2cba)char(\\u2cbc)char(\\u2cbe)char(\\u2cc0)char(\\u2cc2)char(\\u2cc4)char(\\u2cc6)char(\\u2cc8)char(\\u2cca)char(\\u2ccc)char(\\u2cce)char(\\u2cd0)char(\\u2cd2)char(\\u2cd4)char(\\u2cd6)char(\\u2cd8)char(\\u2cda)char(\\u2cdc)char(\\u2cde)char(\\u2ce0)char(\\u2ce2)char(\\ua640)char(\\ua642)char(\\ua644)char(\\ua646)char(\\ua648)char(\\ua64a)char(\\ua64c)char(\\ua64e)char(\\ua650)char(\\ua652)char(\\ua654)char(\\ua656)char(\\ua658)char(\\ua65a)char(\\ua65c)char(\\ua65e)char(\\ua662)char(\\ua664)char(\\ua666)char(\\ua668)char(\\ua66a)char(\\ua66c)char(\\ua680)char(\\ua682)char(\\ua684)char(\\ua686)char(\\ua688)char(\\ua68a)char(\\ua68c)char(\\ua68e)char(\\ua690)char(\\ua692)char(\\ua694)char(\\ua696)char(\\ua722)char(\\ua724)char(\\ua726)char(\\ua728)char(\\ua72a)char(\\ua72c)char(\\ua72e)char(\\ua732)char(\\ua734)char(\\ua736)char(\\ua738)char(\\ua73a)char(\\ua73c)char(\\ua73e)char(\\ua740)char(\\ua742)char(\\ua744)char(\\ua746)char(\\ua748)char(\\ua74a)char(\\ua74c)char(\\ua74e)char(\\ua750)char(\\ua752)char(\\ua754)char(\\ua756)char(\\ua758)char(\\ua75a)char(\\ua75c)char(\\ua75e)char(\\ua760)char(\\ua762)char(\\ua764)char(\\ua766)char(\\ua768)char(\\ua76a)char(\\ua76c)char(\\ua76e)char(\\ua779)char(\\ua77b)char(\\ua77d)content(-)char(\\ua77e)char(\\ua780)char(\\ua782)char(\\ua784)char(\\ua786)char(\\ua78b)char(\\uff21)content(-)char(\\uff3a)content(])delimiter(')>

    ident(idrest) operator(=) string<modifier(ur)delimiter(')content(%s(?:%s|[0-9]\)*(?:(?<=_\)%s\)?)delimiter(')> operator(%) operator(()ident(letter)operator(,) ident(letter)operator(,) ident(op)operator(\))

    ident(tokens) operator(=) operator({)
        string<delimiter(')content(root)delimiter(')>operator(:) operator([)
            comment(# method names)
            operator(()string<modifier(r)delimiter(')content((class|trait|object\)()content(\\s)content(+\))delimiter(')>operator(,) ident(bygroups)operator(()ident(Keyword)operator(,) ident(Text)operator(\))operator(,) string<delimiter(')content(class)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(ur)delimiter(")content('%s)delimiter(")> operator(%) ident(idrest)operator(,) ident(Text)operator(.)ident(Symbol)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([^)content(\\S)content(\\n)content(]+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(//.*?)content(\\n)delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(/)content(\\*)delimiter(')>operator(,) ident(Comment)operator(.)ident(Multiline)operator(,) string<delimiter(')content(comment)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(ur)delimiter(')content(@%s)delimiter(')> operator(%) ident(idrest)operator(,) ident(Name)operator(.)ident(Decorator)operator(\))operator(,)
            operator(()string<modifier(ur)delimiter(')content((abstract|ca(?:se|tch\)|d(?:ef|o\)|e(?:lse|xtends\)|)delimiter(')>
             string<modifier(ur)delimiter(')content(f(?:inal(?:ly\)?|or(?:Some\)?\)|i(?:f|mplicit\)|)delimiter(')>
             string<modifier(ur)delimiter(')content(lazy|match|new|override|pr(?:ivate|otected\))delimiter(')>
             string<modifier(ur)delimiter(')content(|re(?:quires|turn\)|s(?:ealed|uper\)|)delimiter(')>
             string<modifier(ur)delimiter(')content(t(?:h(?:is|row\)|ry\)|va[lr]|w(?:hile|ith\)|yield\))content(\\b)content(|)delimiter(')>
             string<modifier(u)delimiter(')content((<[%:-]|=>|>:|[#=@_)char(\\u21D2)char(\\u2190)content(]\)()char(\\b)content(|(?=)char(\\\\)content(s\)|$\))delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
            operator(()string<modifier(ur)delimiter(')content(:(?!%s\))delimiter(')> operator(%) ident(op)operator(,) ident(Keyword)operator(,) string<delimiter(')content(type)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(ur)delimiter(')content(%s%s)content(\\b)delimiter(')> operator(%) operator(()ident(upper)operator(,) ident(idrest)operator(\))operator(,) ident(Name)operator(.)ident(Class)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((true|false|null\))content(\\b)delimiter(')>operator(,) ident(Keyword)operator(.)ident(Constant)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((import|package\)()content(\\s)content(+\))delimiter(')>operator(,) ident(bygroups)operator(()ident(Keyword)operator(,) ident(Text)operator(\))operator(,) string<delimiter(')content(import)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((type\)()content(\\s)content(+\))delimiter(')>operator(,) ident(bygroups)operator(()ident(Keyword)operator(,) ident(Text)operator(\))operator(,) string<delimiter(')content(type)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content("""(?:.|)content(\\n)content(\)*?""")delimiter(')>operator(,) ident(String)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content("()content(\\\\)content(\\\\)content(|)content(\\\\)content("|[^"]\)*")delimiter(')>operator(,) ident(String)operator(\))operator(,)
            operator(()string<modifier(ur)delimiter(")content(')content(\\\\)content(.'|'[^)content(\\\\)content(]'|')content(\\\\)content(u[0-9a-f]{4}')delimiter(")>operator(,) ident(String)operator(.)ident(Char)operator(\))operator(,)
comment(#            (ur'(\\.\)(%s|%s|`[^`]+`\)' % (idrest, op\), bygroups(Operator,)
comment(#             Name.Attribute\)\),)
            operator(()ident(idrest)operator(,) ident(Name)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(`[^`]+`)delimiter(')>operator(,) ident(Name)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\[)delimiter(')>operator(,) ident(Operator)operator(,) string<delimiter(')content(typeparam)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([)content(\\()content(\\\))content(\\{)content(\\})content(;,.])delimiter(')>operator(,) ident(Operator)operator(\))operator(,)
            operator(()ident(op)operator(,) ident(Operator)operator(\))operator(,)
            operator(()string<modifier(ur)delimiter(')content(([0-9][0-9]*)content(\\.)content([0-9]*|)content(\\.)content([0-9]+\)([eE][+-]?[0-9]+\)?[fFdD]?)delimiter(')>operator(,)
             ident(Number)operator(.)ident(Float)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(0x[0-9a-f]+)delimiter(')>operator(,) ident(Number)operator(.)ident(Hex)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([0-9]+L?)delimiter(')>operator(,) ident(Number)operator(.)ident(Integer)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\n)delimiter(')>operator(,) ident(Text)operator(\))
        operator(])operator(,)
        string<delimiter(')content(class)delimiter(')>operator(:) operator([)
            operator(()string<modifier(ur)delimiter(')content((%s|%s|`[^`]+`\)()content(\\s)content(*\)()content(\\[)content(\))delimiter(')> operator(%) operator(()ident(idrest)operator(,) ident(op)operator(\))operator(,)
             ident(bygroups)operator(()ident(Name)operator(.)ident(Class)operator(,) ident(Text)operator(,) ident(Operator)operator(\))operator(,) string<delimiter(')content(typeparam)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([)content(\\s)content(\\n)content(]+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content({)delimiter(')>operator(,) ident(Operator)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\()delimiter(')>operator(,) ident(Operator)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(ur)delimiter(')content(%s|%s|`[^`]+`)delimiter(')> operator(%) operator(()ident(idrest)operator(,) ident(op)operator(\))operator(,) ident(Name)operator(.)ident(Class)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(type)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\s)content(+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(u)delimiter(')content(<[%:]|>:|[#_)char(\\u21D2)content(]|forSome|type)delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(([,)content(\\\))content(;}]|=>|=\)([)content(\\s)content(\\n)content(]*\))delimiter(')>operator(,) ident(bygroups)operator(()ident(Operator)operator(,) ident(Text)operator(\))operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([)content(\\()content(\\{)content(])delimiter(')>operator(,) ident(Operator)operator(,) string<delimiter(')content(#push)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(ur)delimiter(')content(((?:%s|%s|`[^`]+`\)(?:)content(\\.)content((?:%s|%s|`[^`]+`\)\)*\)()content(\\s)content(*\)()content(\\[)content(\))delimiter(')> operator(%)
             operator(()ident(idrest)operator(,) ident(op)operator(,) ident(idrest)operator(,) ident(op)operator(\))operator(,)
             ident(bygroups)operator(()ident(Keyword)operator(.)ident(Type)operator(,) ident(Text)operator(,) ident(Operator)operator(\))operator(,) operator(()string<delimiter(')content(#pop)delimiter(')>operator(,) string<delimiter(')content(typeparam)delimiter(')>operator(\))operator(\))operator(,)
            operator(()string<modifier(ur)delimiter(')content(((?:%s|%s|`[^`]+`\)(?:)content(\\.)content((?:%s|%s|`[^`]+`\)\)*\)()content(\\s)content(*\)$)delimiter(')> operator(%)
             operator(()ident(idrest)operator(,) ident(op)operator(,) ident(idrest)operator(,) ident(op)operator(\))operator(,)
             ident(bygroups)operator(()ident(Keyword)operator(.)ident(Type)operator(,) ident(Text)operator(\))operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(ur)delimiter(')content(\\.)content(|%s|%s|`[^`]+`)delimiter(')> operator(%) operator(()ident(idrest)operator(,) ident(op)operator(\))operator(,) ident(Keyword)operator(.)ident(Type)operator(\))
        operator(])operator(,)
        string<delimiter(')content(typeparam)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content([)content(\\s)content(\\n)content(,]+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(u)delimiter(')content(<[%:]|=>|>:|[#_)char(\\u21D2)content(]|forSome|type)delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(([)content(\\])content(\\\))content(\\})content(]\))delimiter(')>operator(,) ident(Operator)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([)content(\\()content(\\[)content(\\{)content(])delimiter(')>operator(,) ident(Operator)operator(,) string<delimiter(')content(#push)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(ur)delimiter(')content(\\.)content(|%s|%s|`[^`]+`)delimiter(')> operator(%) operator(()ident(idrest)operator(,) ident(op)operator(\))operator(,) ident(Keyword)operator(.)ident(Type)operator(\))
        operator(])operator(,)
        string<delimiter(')content(comment)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content([^/)content(\\*)content(]+)delimiter(')>operator(,) ident(Comment)operator(.)ident(Multiline)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(/)content(\\*)delimiter(')>operator(,) ident(Comment)operator(.)ident(Multiline)operator(,) string<delimiter(')content(#push)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\*)content(/)delimiter(')>operator(,) ident(Comment)operator(.)ident(Multiline)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([*/])delimiter(')>operator(,) ident(Comment)operator(.)ident(Multiline)operator(\))
        operator(])operator(,)
        string<delimiter(')content(import)delimiter(')>operator(:) operator([)
            operator(()string<modifier(ur)delimiter(')content((%s|)content(\\.)content(\)+)delimiter(')> operator(%) ident(idrest)operator(,) ident(Name)operator(.)ident(Namespace)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))
        operator(])operator(,)
    operator(})


keyword(class) class(DylanLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    For the `Dylan <http://www.opendylan.org/>`_ language.)content(
)content(
)content(    *New in Pygments 0.7.*)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(Dylan)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(dylan)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.dylan)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(text/x-dylan)delimiter(')>operator(])

    ident(flags) operator(=) ident(re)operator(.)ident(DOTALL)

    ident(tokens) operator(=) operator({)
        string<delimiter(')content(root)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\b)content((subclass|abstract|block|c(on(crete|stant\)|lass\)|domain)delimiter(')>
             string<modifier(r)delimiter(')content(|ex(c(eption|lude\)|port\)|f(unction(|al\)\)|generic|handler)delimiter(')>
             string<modifier(r)delimiter(')content(|i(n(herited|line|stance|terface\)|mport\)|library|m(acro|ethod\))delimiter(')>
             string<modifier(r)delimiter(')content(|open|primary|sealed|si(deways|ngleton\)|slot)delimiter(')>
             string<modifier(r)delimiter(')content(|v(ariable|irtual\)\))content(\\b)delimiter(')>operator(,) ident(Name)operator(.)ident(Builtin)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(<)content(\\w)content(+>)delimiter(')>operator(,) ident(Keyword)operator(.)ident(Type)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(#?"(?:)content(\\\\)content(.|[^"]\)+?")delimiter(')>operator(,) ident(String)operator(.)ident(Double)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(//.*?)content(\\n)delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(/)content(\\*)content([)content(\\w)content(\\W)content(]*?)content(\\*)content(/)delimiter(')>operator(,) ident(Comment)operator(.)ident(Multiline)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\')content(.*?)content(\\')delimiter(')>operator(,) ident(String)operator(.)ident(Single)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(=>|)content(\\b)content((a(bove|fterwards\)|b(e(gin|low\)|y\)|c(ase|leanup|reate\))delimiter(')>
             string<modifier(r)delimiter(')content(|define|else(|if\)|end|f(inally|or|rom\)|i[fn]|l(et|ocal\)|otherwise)delimiter(')>
             string<modifier(r)delimiter(')content(|rename|s(elect|ignal\)|t(hen|o\)|u(n(less|til\)|se\)|wh(en|ile\)\))content(\\b)delimiter(')>operator(,)
             ident(Keyword)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(([ )content(\\t)content(]\)([!)content(\\$)content(%&)content(\\*)content(\\/)content(:<=>)content(\\?)content(~_^a-zA-Z0-9.+)content(\\-)content(]*:\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Text)operator(,) ident(Name)operator(.)ident(Variable)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(([ )content(\\t)content(]*\)()content(\\S)content(+[^:]\)([ )content(\\t)content(]*\)()content(\\()content(\)([ )content(\\t)content(]*\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Text)operator(,) ident(Name)operator(.)ident(Function)operator(,) ident(Text)operator(,) ident(Punctuation)operator(,) ident(Text)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(-?[0-9.]+)delimiter(')>operator(,) ident(Number)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([(\),;])delimiter(')>operator(,) ident(Punctuation)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\$)content([a-zA-Z0-9-]+)delimiter(')>operator(,) ident(Name)operator(.)ident(Constant)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([!$%&*/:<>=?~^.+)content(\\[)content(\\])content({}-]+)delimiter(')>operator(,) ident(Operator)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\s)content(+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(#[a-zA-Z0-9-]+)delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([a-zA-Z0-9-]+)delimiter(')>operator(,) ident(Name)operator(.)ident(Variable)operator(\))operator(,)
        operator(])operator(,)
    operator(})


keyword(class) class(ObjectiveCLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    For Objective-C source code with preprocessor directives.)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(Objective-C)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(objective-c)delimiter(')>operator(,) string<delimiter(')content(objectivec)delimiter(')>operator(,) string<delimiter(')content(obj-c)delimiter(')>operator(,) string<delimiter(')content(objc)delimiter(')>operator(])
    comment(#XXX: objc has .h files too :-/)
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.m)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(text/x-objective-c)delimiter(')>operator(])

    comment(#: optional Comment or Whitespace)
    ident(_ws) operator(=) string<modifier(r)delimiter(')content((?:)content(\\s)content(|//.*?)content(\\n)content(|/[*].*?[*]/\)+)delimiter(')>

    ident(tokens) operator(=) operator({)
        string<delimiter(')content(whitespace)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(^()content(\\s)content(*\)(#if)content(\\s)content(+0\))delimiter(')>operator(,) ident(bygroups)operator(()ident(Text)operator(,) ident(Comment)operator(.)ident(Preproc)operator(\))operator(,) string<delimiter(')content(if0)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(^()content(\\s)content(*\)(#\))delimiter(')>operator(,) ident(bygroups)operator(()ident(Text)operator(,) ident(Comment)operator(.)ident(Preproc)operator(\))operator(,) string<delimiter(')content(macro)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\n)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\s)content(+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\\\)content(\\n)delimiter(')>operator(,) ident(Text)operator(\))operator(,) comment(# line continuation)
            operator(()string<modifier(r)delimiter(')content(//()content(\\n)content(|(.|)content(\\n)content(\)*?[^)content(\\\\)content(])content(\\n)content(\))delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(/()content(\\\\)content(\\n)content(\)?[*](.|)content(\\n)content(\)*?[*]()content(\\\\)content(\\n)content(\)?/)delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(statements)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content((L|@\)?")delimiter(')>operator(,) ident(String)operator(,) string<delimiter(')content(string)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(")content((L|@\)?'()content(\\\\)content(.|)content(\\\\)content([0-7]{1,3}|)content(\\\\)content(x[a-fA-F0-9]{1,2}|[^)content(\\\\)content(\\')content(\\n)content(]\)')delimiter(")>operator(,)
             ident(String)operator(.)ident(Char)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(()content(\\d)content(+)content(\\.)content(\\d)content(*|)content(\\.)content(\\d)content(+|)content(\\d)content(+\)[eE][+-]?)content(\\d)content(+[lL]?)delimiter(')>operator(,) ident(Number)operator(.)ident(Float)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(()content(\\d)content(+)content(\\.)content(\\d)content(*|)content(\\.)content(\\d)content(+|)content(\\d)content(+[fF]\)[fF]?)delimiter(')>operator(,) ident(Number)operator(.)ident(Float)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(0x[0-9a-fA-F]+[Ll]?)delimiter(')>operator(,) ident(Number)operator(.)ident(Hex)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(0[0-7]+[Ll]?)delimiter(')>operator(,) ident(Number)operator(.)ident(Oct)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\d)content(+[Ll]?)delimiter(')>operator(,) ident(Number)operator(.)ident(Integer)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([~!%^&*+=|?:<>/-])delimiter(')>operator(,) ident(Operator)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([(\))content(\\[)content(\\])content(,.])delimiter(')>operator(,) ident(Punctuation)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((auto|break|case|const|continue|default|do|else|enum|extern|)delimiter(')>
             string<modifier(r)delimiter(')content(for|goto|if|register|restricted|return|sizeof|static|struct|)delimiter(')>
             string<modifier(r)delimiter(')content(switch|typedef|union|volatile|virtual|while|in|@selector|)delimiter(')>
             string<modifier(r)delimiter(')content(@private|@protected|@public|@encode|)delimiter(')>
             string<modifier(r)delimiter(')content(@synchronized|@try|@throw|@catch|@finally|@end|@property|)delimiter(')>
             string<modifier(r)delimiter(')content(@synthesize|@dynamic\))content(\\b)delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((int|long|float|short|double|char|unsigned|signed|void|)delimiter(')>
             string<modifier(r)delimiter(')content(id|BOOL|IBOutlet|IBAction|SEL\))content(\\b)delimiter(')>operator(,) ident(Keyword)operator(.)ident(Type)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((_{0,2}inline|naked|restrict|thread|typename\))content(\\b)delimiter(')>operator(,)
             ident(Keyword)operator(.)ident(Reserved)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(__(asm|int8|based|except|int16|stdcall|cdecl|fastcall|int32|)delimiter(')>
             string<modifier(r)delimiter(')content(declspec|finally|int64|try|leave\))content(\\b)delimiter(')>operator(,) ident(Keyword)operator(.)ident(Reserved)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((TRUE|FALSE|nil|NULL\))content(\\b)delimiter(')>operator(,) ident(Name)operator(.)ident(Builtin)operator(\))operator(,)
            operator(()string<delimiter(')content([a-zA-Z_][a-zA-Z0-9_]*:(?!:\))delimiter(')>operator(,) ident(Name)operator(.)ident(Label)operator(\))operator(,)
            operator(()string<delimiter(')content([a-zA-Z_][a-zA-Z0-9_]*)delimiter(')>operator(,) ident(Name)operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(root)delimiter(')>operator(:) operator([)
            ident(include)operator(()string<delimiter(')content(whitespace)delimiter(')>operator(\))operator(,)
            comment(# functions)
            operator(()string<modifier(r)delimiter(')content(((?:[a-zA-Z0-9_*)content(\\s)content(]\)+?(?:)content(\\s)content(|[*]\)\))delimiter(')>    comment(# return arguments)
             string<modifier(r)delimiter(')content(([a-zA-Z_][a-zA-Z0-9_]*\))delimiter(')>             comment(# method name)
             string<modifier(r)delimiter(')content(()content(\\s)content(*)content(\\()content([^;]*?)content(\\\))content(\))delimiter(')>                      comment(# signature)
             string<modifier(r)delimiter(')content(()delimiter(')> operator(+) ident(_ws) operator(+) string<modifier(r)delimiter(')content(\)({\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(using)operator(()ident(this)operator(\))operator(,) ident(Name)operator(.)ident(Function)operator(,)
                      ident(using)operator(()ident(this)operator(\))operator(,) ident(Text)operator(,) ident(Punctuation)operator(\))operator(,)
             string<delimiter(')content(function)delimiter(')>operator(\))operator(,)
            comment(# function declarations)
            operator(()string<modifier(r)delimiter(')content(((?:[a-zA-Z0-9_*)content(\\s)content(]\)+?(?:)content(\\s)content(|[*]\)\))delimiter(')>    comment(# return arguments)
             string<modifier(r)delimiter(')content(([a-zA-Z_][a-zA-Z0-9_]*\))delimiter(')>             comment(# method name)
             string<modifier(r)delimiter(')content(()content(\\s)content(*)content(\\()content([^;]*?)content(\\\))content(\))delimiter(')>                      comment(# signature)
             string<modifier(r)delimiter(')content(()delimiter(')> operator(+) ident(_ws) operator(+) string<modifier(r)delimiter(')content(\)(;\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(using)operator(()ident(this)operator(\))operator(,) ident(Name)operator(.)ident(Function)operator(,)
                      ident(using)operator(()ident(this)operator(\))operator(,) ident(Text)operator(,) ident(Punctuation)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((@interface|@implementation\)()content(\\s)content(+\))delimiter(')>operator(,) ident(bygroups)operator(()ident(Keyword)operator(,) ident(Text)operator(\))operator(,)
             string<delimiter(')content(classname)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((@class|@protocol\)()content(\\s)content(+\))delimiter(')>operator(,) ident(bygroups)operator(()ident(Keyword)operator(,) ident(Text)operator(\))operator(,)
             string<delimiter(')content(forward_classname)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(()content(\\s)content(*\)(@end\)()content(\\s)content(*\))delimiter(')>operator(,) ident(bygroups)operator(()ident(Text)operator(,) ident(Keyword)operator(,) ident(Text)operator(\))operator(\))operator(,)
            operator(()string<delimiter(')delimiter(')>operator(,) ident(Text)operator(,) string<delimiter(')content(statement)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(classname)delimiter(')> operator(:) operator([)
            comment(# interface definition that inherits)
            operator(()string<delimiter(')content(([a-zA-Z_][a-zA-Z0-9_]*\)()content(\\s)content(*:)content(\\s)content(*\)([a-zA-Z_][a-zA-Z0-9_]*\)?)delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Name)operator(.)ident(Class)operator(,) ident(Text)operator(,) ident(Name)operator(.)ident(Class)operator(\))operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            comment(# interface definition for a category)
            operator(()string<delimiter(')content(([a-zA-Z_][a-zA-Z0-9_]*\)()content(\\s)content(*\)()content(\\()content([a-zA-Z_][a-zA-Z0-9_]*)content(\\\))content(\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Name)operator(.)ident(Class)operator(,) ident(Text)operator(,) ident(Name)operator(.)ident(Label)operator(\))operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            comment(# simple interface / implementation)
            operator(()string<delimiter(')content(([a-zA-Z_][a-zA-Z0-9_]*\))delimiter(')>operator(,) ident(Name)operator(.)ident(Class)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))
        operator(])operator(,)
        string<delimiter(')content(forward_classname)delimiter(')> operator(:) operator([)
          operator(()string<delimiter(')content(([a-zA-Z_][a-zA-Z0-9_]*\)()content(\\s)content(*,)content(\\s)content(*\))delimiter(')>operator(,)
           ident(bygroups)operator(()ident(Name)operator(.)ident(Class)operator(,) ident(Text)operator(\))operator(,) string<delimiter(')content(forward_classname)delimiter(')>operator(\))operator(,)
          operator(()string<delimiter(')content(([a-zA-Z_][a-zA-Z0-9_]*\)()content(\\s)content(*;?\))delimiter(')>operator(,)
           ident(bygroups)operator(()ident(Name)operator(.)ident(Class)operator(,) ident(Text)operator(\))operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))
        operator(])operator(,)
        string<delimiter(')content(statement)delimiter(')> operator(:) operator([)
            ident(include)operator(()string<delimiter(')content(whitespace)delimiter(')>operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(statements)delimiter(')>operator(\))operator(,)
            operator(()string<delimiter(')content([{}])delimiter(')>operator(,) ident(Punctuation)operator(\))operator(,)
            operator(()string<delimiter(')content(;)delimiter(')>operator(,) ident(Punctuation)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(function)delimiter(')>operator(:) operator([)
            ident(include)operator(()string<delimiter(')content(whitespace)delimiter(')>operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(statements)delimiter(')>operator(\))operator(,)
            operator(()string<delimiter(')content(;)delimiter(')>operator(,) ident(Punctuation)operator(\))operator(,)
            operator(()string<delimiter(')content({)delimiter(')>operator(,) ident(Punctuation)operator(,) string<delimiter(')content(#push)delimiter(')>operator(\))operator(,)
            operator(()string<delimiter(')content(})delimiter(')>operator(,) ident(Punctuation)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(string)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(")delimiter(')>operator(,) ident(String)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\\\)content(([)content(\\\\)content(abfnrtv")content(\\')content(]|x[a-fA-F0-9]{2,4}|[0-7]{1,3}\))delimiter(')>operator(,) ident(String)operator(.)ident(Escape)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([^)content(\\\\)content(")content(\\n)content(]+)delimiter(')>operator(,) ident(String)operator(\))operator(,) comment(# all other characters)
            operator(()string<modifier(r)delimiter(')content(\\\\)content(\\n)delimiter(')>operator(,) ident(String)operator(\))operator(,) comment(# line continuation)
            operator(()string<modifier(r)delimiter(')content(\\\\)delimiter(')>operator(,) ident(String)operator(\))operator(,) comment(# stray backslash)
        operator(])operator(,)
        string<delimiter(')content(macro)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content([^/)content(\\n)content(]+)delimiter(')>operator(,) ident(Comment)operator(.)ident(Preproc)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(/[*](.|)content(\\n)content(\)*?[*]/)delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(//.*?)content(\\n)delimiter(')>operator(,) ident(Comment)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(/)delimiter(')>operator(,) ident(Comment)operator(.)ident(Preproc)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((?<=)content(\\\\)content(\))content(\\n)delimiter(')>operator(,) ident(Comment)operator(.)ident(Preproc)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\n)delimiter(')>operator(,) ident(Comment)operator(.)ident(Preproc)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(if0)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(^)content(\\s)content(*#if.*?(?<!)content(\\\\)content(\))content(\\n)delimiter(')>operator(,) ident(Comment)operator(,) string<delimiter(')content(#push)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(^)content(\\s)content(*#endif.*?(?<!)content(\\\\)content(\))content(\\n)delimiter(')>operator(,) ident(Comment)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(.*?)content(\\n)delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
        operator(])
    operator(})

    keyword(def) method(analyse_text)operator(()ident(text)operator(\))operator(:)
        keyword(if) string<delimiter(')content(@")delimiter(')> keyword(in) ident(text)operator(:) comment(# strings)
            keyword(return) predefined_constant(True)
        keyword(if) ident(re)operator(.)ident(match)operator(()string<modifier(r)delimiter(')content(\\[)content([a-zA-Z0-9.]:)delimiter(')>operator(,) ident(text)operator(\))operator(:) comment(# message)
            keyword(return) predefined_constant(True)
        keyword(return) predefined_constant(False)

keyword(class) class(FortranLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(''')content(
)content(    Lexer for FORTRAN 90 code.)content(
)content(
)content(    *New in Pygments 0.10.*)content(
)content(    )delimiter(''')>
    ident(name) operator(=) string<delimiter(')content(Fortran)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(fortran)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.f)delimiter(')>operator(,) string<delimiter(')content(*.f90)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(text/x-fortran)delimiter(')>operator(])
    ident(flags) operator(=) ident(re)operator(.)ident(IGNORECASE)

    comment(# Data Types: INTEGER, REAL, COMPLEX, LOGICAL, CHARACTER and DOUBLE PRECISION)
    comment(# Operators: **, *, +, -, /, <, >, <=, >=, ==, /=)
    comment(# Logical (?\): NOT, AND, OR, EQV, NEQV)

    comment(# Builtins:)
    comment(# http://gcc.gnu.org/onlinedocs/gcc-3.4.6/g77/Table-of-Intrinsic-Functions.html)

    ident(tokens) operator(=) operator({)
        string<delimiter(')content(root)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(!.*)content(\\n)delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(strings)delimiter(')>operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(core)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([a-z][a-z0-9_]*)delimiter(')>operator(,) ident(Name)operator(.)ident(Variable)operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(nums)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([)content(\\s)content(]+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(core)delimiter(')>operator(:) operator([)
            comment(# Statements)
            operator(()string<modifier(r)delimiter(')content(\\b)content((ACCEPT|ALLOCATABLE|ALLOCATE|ARRAY|ASSIGN|BACKSPACE|BLOCK DATA|)delimiter(')>
             string<modifier(r)delimiter(')content(BYTE|CALL|CASE|CLOSE|COMMON|CONTAINS|CONTINUE|CYCLE|DATA|)delimiter(')>
             string<modifier(r)delimiter(')content(DEALLOCATE|DECODE|DIMENSION|DO|ENCODE|END FILE|ENDIF|END|ENTRY|)delimiter(')>
             string<modifier(r)delimiter(')content(EQUIVALENCE|EXIT|EXTERNAL|EXTRINSIC|FORALL|FORMAT|FUNCTION|GOTO|)delimiter(')>
             string<modifier(r)delimiter(')content(IF|IMPLICIT|INCLUDE|INQUIRE|INTENT|INTERFACE|INTRINSIC|MODULE|)delimiter(')>
             string<modifier(r)delimiter(')content(NAMELIST|NULLIFY|NONE|OPEN|OPTIONAL|OPTIONS|PARAMETER|PAUSE|)delimiter(')>
             string<modifier(r)delimiter(')content(POINTER|PRINT|PRIVATE|PROGRAM|PUBLIC|PURE|READ|RECURSIVE|RETURN|)delimiter(')>
             string<modifier(r)delimiter(')content(REWIND|SAVE|SELECT|SEQUENCE|STOP|SUBROUTINE|TARGET|TYPE|USE|)delimiter(')>
             string<modifier(r)delimiter(')content(VOLATILE|WHERE|WRITE|WHILE|THEN|ELSE|ENDIF\))content(\\s)content(*)content(\\b)delimiter(')>operator(,)
             ident(Keyword)operator(\))operator(,)

            comment(# Data Types)
            operator(()string<modifier(r)delimiter(')content(\\b)content((CHARACTER|COMPLEX|DOUBLE PRECISION|DOUBLE COMPLEX|INTEGER|)delimiter(')>
             string<modifier(r)delimiter(')content(LOGICAL|REAL\))content(\\s)content(*)content(\\b)delimiter(')>operator(,)
             ident(Keyword)operator(.)ident(Type)operator(\))operator(,)

            comment(# Operators)
            operator(()string<modifier(r)delimiter(')content(()content(\\*)content(\\*)content(|)content(\\*)content(|)content(\\+)content(|-|)content(\\/)content(|<|>|<=|>=|==|)content(\\/)content(=|=\))delimiter(')>operator(,) ident(Operator)operator(\))operator(,)

            operator(()string<modifier(r)delimiter(')content((::\))delimiter(')>operator(,) ident(Keyword)operator(.)ident(Declaration)operator(\))operator(,)

            operator(()string<modifier(r)delimiter(')content([(\),:&%])delimiter(')>operator(,) ident(Punctuation)operator(\))operator(,)

            comment(# Intrinsics)
            operator(()string<modifier(r)delimiter(')content(\\b)content((Abort|Abs|Access|AChar|ACos|AdjustL|AdjustR|AImag|AInt|Alarm|)delimiter(')>
             string<modifier(r)delimiter(')content(All|Allocated|ALog|AMax|AMin|AMod|And|ANInt|Any|)delimiter(')>
             string<modifier(r)delimiter(')content(ASin|Associated|ATan|BesJ|BesJN|BesY|BesYN|)delimiter(')>
             string<modifier(r)delimiter(')content(Bit_Size|BTest|CAbs|CCos|Ceiling|CExp|Char|ChDir|ChMod|CLog|)delimiter(')>
             string<modifier(r)delimiter(')content(Cmplx|Complex|Conjg|Cos|CosH|Count|CPU_Time|CShift|CSin|CSqRt|)delimiter(')>
             string<modifier(r)delimiter(')content(CTime|DAbs|DACos|DASin|DATan|Date_and_Time|DbesJ|)delimiter(')>
             string<modifier(r)delimiter(')content(DbesJ|DbesJN|DbesY|DbesY|DbesYN|Dble|DCos|DCosH|DDiM|DErF|DErFC|)delimiter(')>
             string<modifier(r)delimiter(')content(DExp|Digits|DiM|DInt|DLog|DLog|DMax|DMin|DMod|DNInt|Dot_Product|)delimiter(')>
             string<modifier(r)delimiter(')content(DProd|DSign|DSinH|DSin|DSqRt|DTanH|DTan|DTime|EOShift|Epsilon|)delimiter(')>
             string<modifier(r)delimiter(')content(ErF|ErFC|ETime|Exit|Exp|Exponent|FDate|FGet|FGetC|Float|)delimiter(')>
             string<modifier(r)delimiter(')content(Floor|Flush|FNum|FPutC|FPut|Fraction|FSeek|FStat|FTell|)delimiter(')>
             string<modifier(r)delimiter(')content(GError|GetArg|GetCWD|GetEnv|GetGId|GetLog|GetPId|GetUId|)delimiter(')>
             string<modifier(r)delimiter(')content(GMTime|HostNm|Huge|IAbs|IAChar|IAnd|IArgC|IBClr|IBits|)delimiter(')>
             string<modifier(r)delimiter(')content(IBSet|IChar|IDate|IDiM|IDInt|IDNInt|IEOr|IErrNo|IFix|Imag|)delimiter(')>
             string<modifier(r)delimiter(')content(ImagPart|Index|Int|IOr|IRand|IsaTty|IShft|IShftC|ISign|)delimiter(')>
             string<modifier(r)delimiter(')content(ITime|Kill|Kind|LBound|Len|Len_Trim|LGe|LGt|Link|LLe|LLt|LnBlnk|)delimiter(')>
             string<modifier(r)delimiter(')content(Loc|Log|Log|Logical|Long|LShift|LStat|LTime|MatMul|Max|)delimiter(')>
             string<modifier(r)delimiter(')content(MaxExponent|MaxLoc|MaxVal|MClock|Merge|Min|MinExponent|MinLoc|)delimiter(')>
             string<modifier(r)delimiter(')content(MinVal|Mod|Modulo|MvBits|Nearest|NInt|Not|Or|Pack|PError|)delimiter(')>
             string<modifier(r)delimiter(')content(Precision|Present|Product|Radix|Rand|Random_Number|Random_Seed|)delimiter(')>
             string<modifier(r)delimiter(')content(Range|Real|RealPart|Rename|Repeat|Reshape|RRSpacing|RShift|Scale|)delimiter(')>
             string<modifier(r)delimiter(')content(Scan|Second|Selected_Int_Kind|Selected_Real_Kind|Set_Exponent|)delimiter(')>
             string<modifier(r)delimiter(')content(Shape|Short|Sign|Signal|SinH|Sin|Sleep|Sngl|Spacing|Spread|SqRt|)delimiter(')>
             string<modifier(r)delimiter(')content(SRand|Stat|Sum|SymLnk|System|System_Clock|Tan|TanH|Time|)delimiter(')>
             string<modifier(r)delimiter(')content(Tiny|Transfer|Transpose|Trim|TtyNam|UBound|UMask|Unlink|Unpack|)delimiter(')>
             string<modifier(r)delimiter(')content(Verify|XOr|ZAbs|ZCos|ZExp|ZLog|ZSin|ZSqRt\))content(\\s)content(*)content(\\b)delimiter(')>operator(,)
             ident(Name)operator(.)ident(Builtin)operator(\))operator(,)

            comment(# Booleans)
            operator(()string<modifier(r)delimiter(')content(\\.)content((true|false\))content(\\.)delimiter(')>operator(,) ident(Name)operator(.)ident(Builtin)operator(\))operator(,)
            comment(# Comparing Operators)
            operator(()string<modifier(r)delimiter(')content(\\.)content((eq|ne|lt|le|gt|ge|not|and|or|eqv|neqv\))content(\\.)delimiter(')>operator(,) ident(Operator)operator(.)ident(Word)operator(\))operator(,)
        operator(])operator(,)

        string<delimiter(')content(strings)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content("()content(\\\\)content(\\\\)content(|)content(\\\\)content([0-7]+|)content(\\\\)content(.|[^"]\)*")delimiter(')>operator(,) ident(String)operator(.)ident(Double)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(")content('()content(\\\\)content(\\\\)content(|)content(\\\\)content([0-7]+|)content(\\\\)content(.|[^']\)*')delimiter(")>operator(,) ident(String)operator(.)ident(Single)operator(\))operator(,)
        operator(])operator(,)

        string<delimiter(')content(nums)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\d)content(+(?![.Ee]\))delimiter(')>operator(,) ident(Number)operator(.)ident(Integer)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([+-]?)content(\\d)content(*)content(\\.)content(\\d)content(+([eE][-+]?)content(\\d)content(+\)?)delimiter(')>operator(,) ident(Number)operator(.)ident(Float)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([+-]?)content(\\d)content(+)content(\\.)content(\\d)content(*([eE][-+]?)content(\\d)content(+\)?)delimiter(')>operator(,) ident(Number)operator(.)ident(Float)operator(\))operator(,)
        operator(])operator(,)
    operator(})


keyword(class) class(GLShaderLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    GLSL (OpenGL Shader\) lexer.)content(
)content(
)content(    *New in Pygments 1.1.*)content(
)content(    )delimiter(""")>
    ident(name) operator(=) string<delimiter(')content(GLSL)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(glsl)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.vert)delimiter(')>operator(,) string<delimiter(')content(*.frag)delimiter(')>operator(,) string<delimiter(')content(*.geo)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(text/x-glslsrc)delimiter(')>operator(])

    ident(tokens) operator(=) operator({)
        string<delimiter(')content(root)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(^#.*)delimiter(')>operator(,) ident(Comment)operator(.)ident(Preproc)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(//.*)delimiter(')>operator(,) ident(Comment)operator(.)ident(Single)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(/)content(\\*)content([)content(\\w)content(\\W)content(]*)content(\\*)content(/)delimiter(')>operator(,) ident(Comment)operator(.)ident(Multiline)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\+)content(|-|~|!=?|)content(\\*)content(|/|%|<<|>>|<=?|>=?|==?|&&?|)content(\\^)content(|)content(\\|)content(\\|)content(?)delimiter(')>operator(,)
             ident(Operator)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([?:])delimiter(')>operator(,) ident(Operator)operator(\))operator(,) comment(# quick hack for ternary)
            operator(()string<modifier(r)delimiter(')content(\\b)content(defined)content(\\b)delimiter(')>operator(,) ident(Operator)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([;{}(\),)content(\\[)content(\\])content(])delimiter(')>operator(,) ident(Punctuation)operator(\))operator(,)
            comment(#FIXME when e is present, no decimal point needed)
            operator(()string<modifier(r)delimiter(')content([+-]?)content(\\d)content(*)content(\\.)content(\\d)content(+([eE][-+]?)content(\\d)content(+\)?)delimiter(')>operator(,) ident(Number)operator(.)ident(Float)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([+-]?)content(\\d)content(+)content(\\.)content(\\d)content(*([eE][-+]?)content(\\d)content(+\)?)delimiter(')>operator(,) ident(Number)operator(.)ident(Float)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(0[xX][0-9a-fA-F]*)delimiter(')>operator(,) ident(Number)operator(.)ident(Hex)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(0[0-7]*)delimiter(')>operator(,) ident(Number)operator(.)ident(Octal)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([1-9][0-9]*)delimiter(')>operator(,) ident(Number)operator(.)ident(Integer)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\b)content((attribute|const|uniform|varying|centroid|break|continue|)delimiter(')>
             string<modifier(r)delimiter(')content(do|for|while|if|else|in|out|inout|float|int|void|bool|true|)delimiter(')>
             string<modifier(r)delimiter(')content(false|invariant|discard|return|mat[234]|mat[234]x[234]|)delimiter(')>
             string<modifier(r)delimiter(')content(vec[234]|[ib]vec[234]|sampler[123]D|samplerCube|)delimiter(')>
             string<modifier(r)delimiter(')content(sampler[12]DShadow|struct\))content(\\b)delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\b)content((asm|class|union|enum|typedef|template|this|packed|goto|)delimiter(')>
             string<modifier(r)delimiter(')content(switch|default|inline|noinline|volatile|public|static|extern|)delimiter(')>
             string<modifier(r)delimiter(')content(external|interface|long|short|double|half|fixed|unsigned|)delimiter(')>
             string<modifier(r)delimiter(')content(lowp|mediump|highp|precision|input|output|hvec[234]|)delimiter(')>
             string<modifier(r)delimiter(')content([df]vec[234]|sampler[23]DRect|sampler2DRectShadow|sizeof|)delimiter(')>
             string<modifier(r)delimiter(')content(cast|namespace|using\))content(\\b)delimiter(')>operator(,) ident(Keyword)operator(\))operator(,) comment(#future use)
            operator(()string<modifier(r)delimiter(')content([a-zA-Z_][a-zA-Z_0-9]*)delimiter(')>operator(,) ident(Name)operator(.)ident(Variable)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\.)delimiter(')>operator(,) ident(Punctuation)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\s)content(+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
        operator(])operator(,)
    operator(})

keyword(class) class(PrologLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Lexer for Prolog files.)content(
)content(    )delimiter(""")>
    ident(name) operator(=) string<delimiter(')content(Prolog)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(prolog)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.prolog)delimiter(')>operator(,) string<delimiter(')content(*.pro)delimiter(')>operator(,) string<delimiter(')content(*.pl)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(text/x-prolog)delimiter(')>operator(])

    ident(flags) operator(=) ident(re)operator(.)ident(UNICODE)

    ident(tokens) operator(=) operator({)
        string<delimiter(')content(root)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(^#.*)delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(/)content(\\*)delimiter(')>operator(,) ident(Comment)operator(,) string<delimiter(')content(nested-comment)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(%.*)delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([0-9]+)delimiter(')>operator(,) ident(Number)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([)content(\\[)content(\\])content((\){}|.,;!])delimiter(')>operator(,) ident(Punctuation)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(:-|-->)delimiter(')>operator(,) ident(Punctuation)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content("(?:)content(\\\\)content(x[0-9a-fA-F]+)content(\\\\)content(|)content(\\\\)content(u[0-9a-fA-F]{4}|)content(\\U)content([0-9a-fA-F]{8}|)delimiter(')>
             string<modifier(r)delimiter(')content(\\\\)content([0-7]+)content(\\\\)content(|)content(\\\\)content([)content(\\w)content(\\W)content(]|[^"]\)*")delimiter(')>operator(,) ident(String)operator(.)ident(Double)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(")content('(?:''|[^']\)*')delimiter(")>operator(,) ident(String)operator(.)ident(Atom)operator(\))operator(,) comment(# quoted atom)
            comment(# Needs to not be followed by an atom.)
            comment(#(r'=(?=\\s|[a-zA-Z\\[]\)', Operator\),)
            operator(()string<modifier(r)delimiter(')content((is|<|>|=<|>=|==|=:=|=|/|//|)content(\\*)content(|)content(\\+)content(|-\)(?=)content(\\s)content(|[a-zA-Z0-9)content(\\[)content(]\))delimiter(')>operator(,)
             ident(Operator)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((mod|div|not\))content(\\b)delimiter(')>operator(,) ident(Operator)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(_)delimiter(')>operator(,) ident(Keyword)operator(\))operator(,) comment(# The don't-care variable)
            operator(()string<modifier(r)delimiter(')content(([a-z]+\)(:\))delimiter(')>operator(,) ident(bygroups)operator(()ident(Name)operator(.)ident(Namespace)operator(,) ident(Punctuation)operator(\))operator(\))operator(,)
            operator(()string<modifier(u)delimiter(')content(([a-z)char(\\u00c0)content(-)char(\\u1fff)char(\\u3040)content(-)char(\\ud7ff)char(\\ue000)content(-)char(\\uffef)content(])delimiter(')>
             string<modifier(u)delimiter(')content([a-zA-Z0-9_$)char(\\u00c0)content(-)char(\\u1fff)char(\\u3040)content(-)char(\\ud7ff)char(\\ue000)content(-)char(\\uffef)content(]*\))delimiter(')>
             string<modifier(u)delimiter(')content(()char(\\\\)content(s*\)(:-|-->\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Name)operator(.)ident(Function)operator(,) ident(Text)operator(,) ident(Operator)operator(\))operator(\))operator(,) comment(# function defn)
            operator(()string<modifier(u)delimiter(')content(([a-z)char(\\u00c0)content(-)char(\\u1fff)char(\\u3040)content(-)char(\\ud7ff)char(\\ue000)content(-)char(\\uffef)content(])delimiter(')>
             string<modifier(u)delimiter(')content([a-zA-Z0-9_$)char(\\u00c0)content(-)char(\\u1fff)char(\\u3040)content(-)char(\\ud7ff)char(\\ue000)content(-)char(\\uffef)content(]*\))delimiter(')>
             string<modifier(u)delimiter(')content(()char(\\\\)content(s*\)()char(\\\\)content((\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Name)operator(.)ident(Function)operator(,) ident(Text)operator(,) ident(Punctuation)operator(\))operator(\))operator(,)
            operator(()string<modifier(u)delimiter(')content([a-z)char(\\u00c0)content(-)char(\\u1fff)char(\\u3040)content(-)char(\\ud7ff)char(\\ue000)content(-)char(\\uffef)content(])delimiter(')>
             string<modifier(u)delimiter(')content([a-zA-Z0-9_$)char(\\u00c0)content(-)char(\\u1fff)char(\\u3040)content(-)char(\\ud7ff)char(\\ue000)content(-)char(\\uffef)content(]*)delimiter(')>operator(,)
             ident(String)operator(.)ident(Atom)operator(\))operator(,) comment(# atom, characters)
            comment(# This one includes !)
            operator(()string<modifier(u)delimiter(')content([#&*+)char(\\\\)content(-./:<=>?@)char(\\\\)char(\\\\)content(^~)char(\\u00a1)content(-)char(\\u00bf)char(\\u2010)content(-)char(\\u303f)content(]+)delimiter(')>operator(,)
             ident(String)operator(.)ident(Atom)operator(\))operator(,) comment(# atom, graphics)
            operator(()string<modifier(r)delimiter(')content([A-Z_][A-Za-z0-9_]*)delimiter(')>operator(,) ident(Name)operator(.)ident(Variable)operator(\))operator(,)
            operator(()string<modifier(u)delimiter(')char(\\\\)content(s+|[)char(\\u2000)content(-)char(\\u200f)char(\\ufff0)content(-)char(\\ufffe)char(\\uffef)content(])delimiter(')>operator(,) ident(Text)operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(nested-comment)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\*)content(/)delimiter(')>operator(,) ident(Comment)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(/)content(\\*)delimiter(')>operator(,) ident(Comment)operator(,) string<delimiter(')content(#push)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([^*/]+)delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([*/])delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
        operator(])operator(,)
    operator(})

    keyword(def) method(analyse_text)operator(()ident(text)operator(\))operator(:)
        keyword(return) string<delimiter(')content(:-)delimiter(')> keyword(in) ident(text)


keyword(class) class(CythonLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    For Pyrex and `Cython <http://cython.org>`_ source code.)content(
)content(
)content(    *New in Pygments 1.1.*)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(Cython)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(cython)delimiter(')>operator(,) string<delimiter(')content(pyx)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.pyx)delimiter(')>operator(,) string<delimiter(')content(*.pxd)delimiter(')>operator(,) string<delimiter(')content(*.pxi)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(text/x-cython)delimiter(')>operator(,) string<delimiter(')content(application/x-cython)delimiter(')>operator(])

    ident(tokens) operator(=) operator({)
        string<delimiter(')content(root)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\n)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(^()content(\\s)content(*\)("""(?:.|)content(\\n)content(\)*?"""\))delimiter(')>operator(,) ident(bygroups)operator(()ident(Text)operator(,) ident(String)operator(.)ident(Doc)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(")content(^()content(\\s)content(*\)('''(?:.|)content(\\n)content(\)*?'''\))delimiter(")>operator(,) ident(bygroups)operator(()ident(Text)operator(,) ident(String)operator(.)ident(Doc)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([^)content(\\S)content(\\n)content(]+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(#.*$)delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([]{}:(\),;[])delimiter(')>operator(,) ident(Punctuation)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\\\)content(\\n)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\\\)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((in|is|and|or|not\))content(\\b)delimiter(')>operator(,) ident(Operator)operator(.)ident(Word)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((<\)([a-zA-Z0-9.?]+\)(>\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Punctuation)operator(,) ident(Keyword)operator(.)ident(Type)operator(,) ident(Punctuation)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(!=|==|<<|>>|[-~+/*%=<>&^|.?])delimiter(')>operator(,) ident(Operator)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((from\)()content(\\d)content(+\)(<=\)()content(\\s)content(+\)(<\)()content(\\d)content(+\)(:\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Keyword)operator(,) ident(Number)operator(.)ident(Integer)operator(,) ident(Operator)operator(,) ident(Name)operator(,) ident(Operator)operator(,)
                      ident(Name)operator(,) ident(Punctuation)operator(\))operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(keywords)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((def|property\)()content(\\s)content(+\))delimiter(')>operator(,) ident(bygroups)operator(()ident(Keyword)operator(,) ident(Text)operator(\))operator(,) string<delimiter(')content(funcname)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((cp?def\)()content(\\s)content(+\))delimiter(')>operator(,) ident(bygroups)operator(()ident(Keyword)operator(,) ident(Text)operator(\))operator(,) string<delimiter(')content(cdef)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((class|struct\)()content(\\s)content(+\))delimiter(')>operator(,) ident(bygroups)operator(()ident(Keyword)operator(,) ident(Text)operator(\))operator(,) string<delimiter(')content(classname)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((from\)()content(\\s)content(+\))delimiter(')>operator(,) ident(bygroups)operator(()ident(Keyword)operator(,) ident(Text)operator(\))operator(,) string<delimiter(')content(fromimport)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((c?import\)()content(\\s)content(+\))delimiter(')>operator(,) ident(bygroups)operator(()ident(Keyword)operator(,) ident(Text)operator(\))operator(,) string<delimiter(')content(import)delimiter(')>operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(builtins)delimiter(')>operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(backtick)delimiter(')>operator(\))operator(,)
            operator(()string<delimiter(')content((?:[rR]|[uU][rR]|[rR][uU]\)""")delimiter(')>operator(,) ident(String)operator(,) string<delimiter(')content(tdqs)delimiter(')>operator(\))operator(,)
            operator(()string<delimiter(")content((?:[rR]|[uU][rR]|[rR][uU]\)''')delimiter(")>operator(,) ident(String)operator(,) string<delimiter(')content(tsqs)delimiter(')>operator(\))operator(,)
            operator(()string<delimiter(')content((?:[rR]|[uU][rR]|[rR][uU]\)")delimiter(')>operator(,) ident(String)operator(,) string<delimiter(')content(dqs)delimiter(')>operator(\))operator(,)
            operator(()string<delimiter(")content((?:[rR]|[uU][rR]|[rR][uU]\)')delimiter(")>operator(,) ident(String)operator(,) string<delimiter(')content(sqs)delimiter(')>operator(\))operator(,)
            operator(()string<delimiter(')content([uU]?""")delimiter(')>operator(,) ident(String)operator(,) ident(combined)operator(()string<delimiter(')content(stringescape)delimiter(')>operator(,) string<delimiter(')content(tdqs)delimiter(')>operator(\))operator(\))operator(,)
            operator(()string<delimiter(")content([uU]?''')delimiter(")>operator(,) ident(String)operator(,) ident(combined)operator(()string<delimiter(')content(stringescape)delimiter(')>operator(,) string<delimiter(')content(tsqs)delimiter(')>operator(\))operator(\))operator(,)
            operator(()string<delimiter(')content([uU]?")delimiter(')>operator(,) ident(String)operator(,) ident(combined)operator(()string<delimiter(')content(stringescape)delimiter(')>operator(,) string<delimiter(')content(dqs)delimiter(')>operator(\))operator(\))operator(,)
            operator(()string<delimiter(")content([uU]?')delimiter(")>operator(,) ident(String)operator(,) ident(combined)operator(()string<delimiter(')content(stringescape)delimiter(')>operator(,) string<delimiter(')content(sqs)delimiter(')>operator(\))operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(name)delimiter(')>operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(numbers)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(keywords)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content((assert|break|by|continue|ctypedef|del|elif|else|except)content(\\?)content(?|exec|)delimiter(')>
             string<modifier(r)delimiter(')content(finally|for|gil|global|if|include|lambda|nogil|pass|print|raise|)delimiter(')>
             string<modifier(r)delimiter(')content(return|try|while|yield|as|with\))content(\\b)delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((DEF|IF|ELIF|ELSE\))content(\\b)delimiter(')>operator(,) ident(Comment)operator(.)ident(Preproc)operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(builtins)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content((?<!)content(\\.)content(\)(__import__|abs|all|any|apply|basestring|bin|bool|buffer|)delimiter(')>
             string<modifier(r)delimiter(')content(bytearray|bytes|callable|chr|classmethod|cmp|coerce|compile|)delimiter(')>
             string<modifier(r)delimiter(')content(complex|delattr|dict|dir|divmod|enumerate|eval|execfile|exit|)delimiter(')>
             string<modifier(r)delimiter(')content(file|filter|float|frozenset|getattr|globals|hasattr|hash|hex|id|)delimiter(')>
             string<modifier(r)delimiter(')content(input|int|intern|isinstance|issubclass|iter|len|list|locals|)delimiter(')>
             string<modifier(r)delimiter(')content(long|map|max|min|next|object|oct|open|ord|pow|property|range|)delimiter(')>
             string<modifier(r)delimiter(')content(raw_input|reduce|reload|repr|reversed|round|set|setattr|slice|)delimiter(')>
             string<modifier(r)delimiter(')content(sorted|staticmethod|str|sum|super|tuple|type|unichr|unicode|)delimiter(')>
             string<modifier(r)delimiter(')content(vars|xrange|zip\))content(\\b)delimiter(')>operator(,) ident(Name)operator(.)ident(Builtin)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((?<!)content(\\.)content(\)(self|None|Ellipsis|NotImplemented|False|True|NULL)delimiter(')>
             string<modifier(r)delimiter(')content(\))content(\\b)delimiter(')>operator(,) ident(Name)operator(.)ident(Builtin)operator(.)ident(Pseudo)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((?<!)content(\\.)content(\)(ArithmeticError|AssertionError|AttributeError|)delimiter(')>
             string<modifier(r)delimiter(')content(BaseException|DeprecationWarning|EOFError|EnvironmentError|)delimiter(')>
             string<modifier(r)delimiter(')content(Exception|FloatingPointError|FutureWarning|GeneratorExit|IOError|)delimiter(')>
             string<modifier(r)delimiter(')content(ImportError|ImportWarning|IndentationError|IndexError|KeyError|)delimiter(')>
             string<modifier(r)delimiter(')content(KeyboardInterrupt|LookupError|MemoryError|NameError|)delimiter(')>
             string<modifier(r)delimiter(')content(NotImplemented|NotImplementedError|OSError|OverflowError|)delimiter(')>
             string<modifier(r)delimiter(')content(OverflowWarning|PendingDeprecationWarning|ReferenceError|)delimiter(')>
             string<modifier(r)delimiter(')content(RuntimeError|RuntimeWarning|StandardError|StopIteration|)delimiter(')>
             string<modifier(r)delimiter(')content(SyntaxError|SyntaxWarning|SystemError|SystemExit|TabError|)delimiter(')>
             string<modifier(r)delimiter(')content(TypeError|UnboundLocalError|UnicodeDecodeError|)delimiter(')>
             string<modifier(r)delimiter(')content(UnicodeEncodeError|UnicodeError|UnicodeTranslateError|)delimiter(')>
             string<modifier(r)delimiter(')content(UnicodeWarning|UserWarning|ValueError|Warning|ZeroDivisionError)delimiter(')>
             string<modifier(r)delimiter(')content(\))content(\\b)delimiter(')>operator(,) ident(Name)operator(.)ident(Exception)operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(numbers)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(()content(\\d)content(+)content(\\.)content(?)content(\\d)content(*|)content(\\d)content(*)content(\\.)content(\\d)content(+\)([eE][+-]?[0-9]+\)?)delimiter(')>operator(,) ident(Number)operator(.)ident(Float)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(0)content(\\d)content(+)delimiter(')>operator(,) ident(Number)operator(.)ident(Oct)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(0[xX][a-fA-F0-9]+)delimiter(')>operator(,) ident(Number)operator(.)ident(Hex)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\d)content(+L)delimiter(')>operator(,) ident(Number)operator(.)ident(Integer)operator(.)ident(Long)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\d)content(+)delimiter(')>operator(,) ident(Number)operator(.)ident(Integer)operator(\))
        operator(])operator(,)
        string<delimiter(')content(backtick)delimiter(')>operator(:) operator([)
            operator(()string<delimiter(')content(`.*?`)delimiter(')>operator(,) ident(String)operator(.)ident(Backtick)operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(name)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(@[a-zA-Z0-9_]+)delimiter(')>operator(,) ident(Name)operator(.)ident(Decorator)operator(\))operator(,)
            operator(()string<delimiter(')content([a-zA-Z_][a-zA-Z0-9_]*)delimiter(')>operator(,) ident(Name)operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(funcname)delimiter(')>operator(:) operator([)
            operator(()string<delimiter(')content([a-zA-Z_][a-zA-Z0-9_]*)delimiter(')>operator(,) ident(Name)operator(.)ident(Function)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))
        operator(])operator(,)
        string<delimiter(')content(cdef)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content((public|readonly|extern|api|inline\))content(\\b)delimiter(')>operator(,) ident(Keyword)operator(.)ident(Reserved)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((struct|enum|union|class\))content(\\b)delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(([a-zA-Z_][a-zA-Z0-9_]*\)()content(\\s)content(*\)(?=[(:#=]|$\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Name)operator(.)ident(Function)operator(,) ident(Text)operator(\))operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(([a-zA-Z_][a-zA-Z0-9_]*\)()content(\\s)content(*\)(,\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Name)operator(.)ident(Function)operator(,) ident(Text)operator(,) ident(Punctuation)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(from)content(\\b)delimiter(')>operator(,) ident(Keyword)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(as)content(\\b)delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(:)delimiter(')>operator(,) ident(Punctuation)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((?=[")content(\\')content(]\))delimiter(')>operator(,) ident(Text)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([a-zA-Z_][a-zA-Z0-9_]*)delimiter(')>operator(,) ident(Keyword)operator(.)ident(Type)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(.)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(classname)delimiter(')>operator(:) operator([)
            operator(()string<delimiter(')content([a-zA-Z_][a-zA-Z0-9_]*)delimiter(')>operator(,) ident(Name)operator(.)ident(Class)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))
        operator(])operator(,)
        string<delimiter(')content(import)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(()content(\\s)content(+\)(as\)()content(\\s)content(+\))delimiter(')>operator(,) ident(bygroups)operator(()ident(Text)operator(,) ident(Keyword)operator(,) ident(Text)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([a-zA-Z_][a-zA-Z0-9_.]*)delimiter(')>operator(,) ident(Name)operator(.)ident(Namespace)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(()content(\\s)content(*\)(,\)()content(\\s)content(*\))delimiter(')>operator(,) ident(bygroups)operator(()ident(Text)operator(,) ident(Operator)operator(,) ident(Text)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')delimiter(')>operator(,) ident(Text)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\)) comment(# all else: go back)
        operator(])operator(,)
        string<delimiter(')content(fromimport)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(()content(\\s)content(+\)(c?import\))content(\\b)delimiter(')>operator(,) ident(bygroups)operator(()ident(Text)operator(,) ident(Keyword)operator(\))operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([a-zA-Z_.][a-zA-Z0-9_.]*)delimiter(')>operator(,) ident(Name)operator(.)ident(Namespace)operator(\))operator(,)
            comment(# ``cdef foo from "header"``, or ``for foo from 0 < i < 10``)
            operator(()string<modifier(r)delimiter(')delimiter(')>operator(,) ident(Text)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(stringescape)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\\\)content(([)content(\\\\)content(abfnrtv")content(\\')content(]|)content(\\n)content(|N{.*?}|u[a-fA-F0-9]{4}|)delimiter(')>
             string<modifier(r)delimiter(')content(U[a-fA-F0-9]{8}|x[a-fA-F0-9]{2}|[0-7]{1,3}\))delimiter(')>operator(,) ident(String)operator(.)ident(Escape)operator(\))
        operator(])operator(,)
        string<delimiter(')content(strings)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(%()content(\\()content([a-zA-Z0-9]+)content(\\\))content(\)?[-#0 +]*([0-9]+|[*]\)?()content(\\.)content(([0-9]+|[*]\)\)?)delimiter(')>
             string<delimiter(')content([hlL]?[diouxXeEfFgGcrs%])delimiter(')>operator(,) ident(String)operator(.)ident(Interpol)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([^)content(\\\\)content(\\')content("%)content(\\n)content(]+)delimiter(')>operator(,) ident(String)operator(\))operator(,)
            comment(# quotes, percents and backslashes must be parsed one at a time)
            operator(()string<modifier(r)delimiter(')content([)content(\\')content(")content(\\\\)content(])delimiter(')>operator(,) ident(String)operator(\))operator(,)
            comment(# unhandled string formatting sign)
            operator(()string<modifier(r)delimiter(')content(%)delimiter(')>operator(,) ident(String)operator(\))
            comment(# newlines are an error (use "nl" state\))
        operator(])operator(,)
        string<delimiter(')content(nl)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\n)delimiter(')>operator(,) ident(String)operator(\))
        operator(])operator(,)
        string<delimiter(')content(dqs)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(")delimiter(')>operator(,) ident(String)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\\\)content(\\\\)content(|)content(\\\\)content("|)content(\\\\)content(\\n)delimiter(')>operator(,) ident(String)operator(.)ident(Escape)operator(\))operator(,) comment(# included here again for raw strings)
            ident(include)operator(()string<delimiter(')content(strings)delimiter(')>operator(\))
        operator(])operator(,)
        string<delimiter(')content(sqs)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(")content(')delimiter(")>operator(,) ident(String)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(")content(\\\\)content(\\\\)content(|)content(\\\\)content('|)content(\\\\)content(\\n)delimiter(")>operator(,) ident(String)operator(.)ident(Escape)operator(\))operator(,) comment(# included here again for raw strings)
            ident(include)operator(()string<delimiter(')content(strings)delimiter(')>operator(\))
        operator(])operator(,)
        string<delimiter(')content(tdqs)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(""")delimiter(')>operator(,) ident(String)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(strings)delimiter(')>operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(nl)delimiter(')>operator(\))
        operator(])operator(,)
        string<delimiter(')content(tsqs)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(")content(''')delimiter(")>operator(,) ident(String)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(strings)delimiter(')>operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(nl)delimiter(')>operator(\))
        operator(])operator(,)
    operator(})
comment(# -*- coding: utf-8 -*-)
docstring<delimiter(""")content(
)content(    pygments.lexers.dotnet)content(
)content(    ~~~~~~~~~~~~~~~~~~~~~~)content(
)content(
)content(    Lexers for .net languages.)content(
)content(
)content(    :copyright: Copyright 2006-2009 by the Pygments team, see AUTHORS.)content(
)content(    :license: BSD, see LICENSE for details.)content(
)delimiter(""")>
keyword(import) include(re)

keyword(from) include(pygments.lexer) keyword(import) include(RegexLexer)operator(,) include(DelegatingLexer)operator(,) include(bygroups)operator(,) include(using)operator(,) include(this)
keyword(from) include(pygments.token) keyword(import) include(Punctuation)operator(,) \
     include(Text)operator(,) include(Comment)operator(,) include(Operator)operator(,) include(Keyword)operator(,) include(Name)operator(,) include(String)operator(,) include(Number)operator(,) include(Literal)operator(,) include(Other)
keyword(from) include(pygments.util) keyword(import) include(get_choice_opt)
keyword(from) include(pygments) keyword(import) include(unistring) keyword(as) ident(uni)

keyword(from) include(pygments.lexers.web) keyword(import) include(XmlLexer)

ident(__all__) operator(=) operator([)string<delimiter(')content(CSharpLexer)delimiter(')>operator(,) string<delimiter(')content(BooLexer)delimiter(')>operator(,) string<delimiter(')content(VbNetLexer)delimiter(')>operator(,) string<delimiter(')content(CSharpAspxLexer)delimiter(')>operator(,)
           string<delimiter(')content(VbNetAspxLexer)delimiter(')>operator(])


keyword(def) method(_escape)operator(()ident(st)operator(\))operator(:)
    keyword(return) ident(st)operator(.)ident(replace)operator(()string<modifier(u)delimiter(')char(\\\\)delimiter(')>operator(,) string<modifier(ur)delimiter(')content(\\\\)delimiter(')>operator(\))operator(.)ident(replace)operator(()string<modifier(u)delimiter(')content(-)delimiter(')>operator(,) string<modifier(ur)delimiter(')content(\\-)delimiter(')>operator(\))operator(.)\
           ident(replace)operator(()string<modifier(u)delimiter(')content([)delimiter(')>operator(,) string<modifier(ur)delimiter(')content(\\[)delimiter(')>operator(\))operator(.)ident(replace)operator(()string<modifier(u)delimiter(')content(])delimiter(')>operator(,) string<modifier(ur)delimiter(')content(\\])delimiter(')>operator(\))

keyword(class) class(CSharpLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    For `C# <http://msdn2.microsoft.com/en-us/vcsharp/default.aspx>`_)content(
)content(    source code.)content(
)content(
)content(    Additional options accepted:)content(
)content(
)content(    `unicodelevel`)content(
)content(      Determines which Unicode characters this lexer allows for identifiers.)content(
)content(      The possible values are:)content(
)content(
)content(      * ``none`` -- only the ASCII letters and numbers are allowed. This)content(
)content(        is the fastest selection.)content(
)content(      * ``basic`` -- all Unicode characters from the specification except)content(
)content(        category ``Lo`` are allowed.)content(
)content(      * ``full`` -- all Unicode characters as specified in the C# specs)content(
)content(        are allowed.  Note that this means a considerable slowdown since the)content(
)content(        ``Lo`` category has more than 40,000 characters in it!)content(
)content(
)content(      The default value is ``basic``.)content(
)content(
)content(      *New in Pygments 0.8.*)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(C#)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(csharp)delimiter(')>operator(,) string<delimiter(')content(c#)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.cs)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(text/x-csharp)delimiter(')>operator(]) comment(# inferred)

    ident(flags) operator(=) ident(re)operator(.)ident(MULTILINE) operator(|) ident(re)operator(.)ident(DOTALL) operator(|) ident(re)operator(.)ident(UNICODE)

    comment(# for the range of allowed unicode characters in identifiers,)
    comment(# see http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-334.pdf)

    ident(levels) operator(=) operator({)
        string<delimiter(')content(none)delimiter(')>operator(:) string<delimiter(')content(@?[_a-zA-Z][a-zA-Z0-9_]*)delimiter(')>operator(,)
        string<delimiter(')content(basic)delimiter(')>operator(:) operator(()string<delimiter(')content(@?[_)delimiter(')> operator(+) ident(uni)operator(.)ident(Lu) operator(+) ident(uni)operator(.)ident(Ll) operator(+) ident(uni)operator(.)ident(Lt) operator(+) ident(uni)operator(.)ident(Lm) operator(+) ident(uni)operator(.)ident(Nl) operator(+) string<delimiter(')content(])delimiter(')> operator(+)
                  string<delimiter(')content([)delimiter(')> operator(+) ident(uni)operator(.)ident(Lu) operator(+) ident(uni)operator(.)ident(Ll) operator(+) ident(uni)operator(.)ident(Lt) operator(+) ident(uni)operator(.)ident(Lm) operator(+) ident(uni)operator(.)ident(Nl) operator(+)
                  ident(uni)operator(.)ident(Nd) operator(+) ident(uni)operator(.)ident(Pc) operator(+) ident(uni)operator(.)ident(Cf) operator(+) ident(uni)operator(.)ident(Mn) operator(+) ident(uni)operator(.)ident(Mc) operator(+) string<delimiter(')content(]*)delimiter(')>operator(\))operator(,)
        string<delimiter(')content(full)delimiter(')>operator(:) operator(()string<delimiter(')content(@?(?:_|[^)delimiter(')> operator(+)
                 ident(_escape)operator(()ident(uni)operator(.)ident(allexcept)operator(()string<delimiter(')content(Lu)delimiter(')>operator(,) string<delimiter(')content(Ll)delimiter(')>operator(,) string<delimiter(')content(Lt)delimiter(')>operator(,) string<delimiter(')content(Lm)delimiter(')>operator(,) string<delimiter(')content(Lo)delimiter(')>operator(,) string<delimiter(')content(Nl)delimiter(')>operator(\))operator(\)) operator(+) string<delimiter(')content(]\))delimiter(')>
                 operator(+) string<delimiter(')content([^)delimiter(')> operator(+) ident(_escape)operator(()ident(uni)operator(.)ident(allexcept)operator(()string<delimiter(')content(Lu)delimiter(')>operator(,) string<delimiter(')content(Ll)delimiter(')>operator(,) string<delimiter(')content(Lt)delimiter(')>operator(,) string<delimiter(')content(Lm)delimiter(')>operator(,) string<delimiter(')content(Lo)delimiter(')>operator(,)
                                                string<delimiter(')content(Nl)delimiter(')>operator(,) string<delimiter(')content(Nd)delimiter(')>operator(,) string<delimiter(')content(Pc)delimiter(')>operator(,) string<delimiter(')content(Cf)delimiter(')>operator(,) string<delimiter(')content(Mn)delimiter(')>operator(,)
                                                string<delimiter(')content(Mc)delimiter(')>operator(\))operator(\)) operator(+) string<delimiter(')content(]*)delimiter(')>operator(\))operator(,)
    operator(})

    ident(tokens) operator(=) operator({)operator(})
    ident(token_variants) operator(=) predefined_constant(True)

    keyword(for) ident(levelname)operator(,) ident(cs_ident) keyword(in) ident(levels)operator(.)ident(items)operator(()operator(\))operator(:)
        ident(tokens)operator([)ident(levelname)operator(]) operator(=) operator({)
            string<delimiter(')content(root)delimiter(')>operator(:) operator([)
                comment(# method names)
                operator(()string<modifier(r)delimiter(')content(^([ )content(\\t)content(]*(?:)delimiter(')> operator(+) ident(cs_ident) operator(+) string<modifier(r)delimiter(')content((?:)content(\\[)content(\\])content(\)?)content(\\s)content(+\)+?\))delimiter(')> comment(# return type)
                 string<modifier(r)delimiter(')content(()delimiter(')> operator(+) ident(cs_ident) operator(+) string<delimiter(')content(\))delimiter(')>                           comment(# method name)
                 string<modifier(r)delimiter(')content(()content(\\s)content(*\)()content(\\()content(\))delimiter(')>operator(,)                               comment(# signature start)
                 ident(bygroups)operator(()ident(using)operator(()ident(this)operator(\))operator(,) ident(Name)operator(.)ident(Function)operator(,) ident(Text)operator(,) ident(Punctuation)operator(\))operator(\))operator(,)
                operator(()string<modifier(r)delimiter(')content(^)content(\\s)content(*)content(\\[)content(.*?)content(\\])delimiter(')>operator(,) ident(Name)operator(.)ident(Attribute)operator(\))operator(,)
                operator(()string<modifier(r)delimiter(')content([^)content(\\S)content(\\n)content(]+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
                operator(()string<modifier(r)delimiter(')content(\\\\)content(\\n)delimiter(')>operator(,) ident(Text)operator(\))operator(,) comment(# line continuation)
                operator(()string<modifier(r)delimiter(')content(//.*?)content(\\n)delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
                operator(()string<modifier(r)delimiter(')content(/[*](.|)content(\\n)content(\)*?[*]/)delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
                operator(()string<modifier(r)delimiter(')content(\\n)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
                operator(()string<modifier(r)delimiter(')content([~!%^&*(\)+=|)content(\\[)content(\\])content(:;,.<>/?-])delimiter(')>operator(,) ident(Punctuation)operator(\))operator(,)
                operator(()string<modifier(r)delimiter(')content([{}])delimiter(')>operator(,) ident(Punctuation)operator(\))operator(,)
                operator(()string<modifier(r)delimiter(')content(@"()content(\\\\)content(\\\\)content(|)content(\\\\)content("|[^"]\)*")delimiter(')>operator(,) ident(String)operator(\))operator(,)
                operator(()string<modifier(r)delimiter(')content("()content(\\\\)content(\\\\)content(|)content(\\\\)content("|[^")content(\\n)content(]\)*[")content(\\n)content(])delimiter(')>operator(,) ident(String)operator(\))operator(,)
                operator(()string<modifier(r)delimiter(")content(')content(\\\\)content(.'|'[^)content(\\\\)content(]')delimiter(")>operator(,) ident(String)operator(.)ident(Char)operator(\))operator(,)
                operator(()string<modifier(r)delimiter(")content([0-9]()content(\\.)content([0-9]*\)?([eE][+-][0-9]+\)?)delimiter(")>
                 string<modifier(r)delimiter(")content([flFLdD]?|0[xX][0-9a-fA-F]+[Ll]?)delimiter(")>operator(,) ident(Number)operator(\))operator(,)
                operator(()string<modifier(r)delimiter(')content(#[ )content(\\t)content(]*(if|endif|else|elif|define|undef|)delimiter(')>
                 string<modifier(r)delimiter(')content(line|error|warning|region|endregion|pragma\))content(\\b)content(.*?)content(\\n)delimiter(')>operator(,)
                 ident(Comment)operator(.)ident(Preproc)operator(\))operator(,)
                operator(()string<modifier(r)delimiter(')content(\\b)content((extern\)()content(\\s)content(+\)(alias\))content(\\b)delimiter(')>operator(,) ident(bygroups)operator(()ident(Keyword)operator(,) ident(Text)operator(,)
                 ident(Keyword)operator(\))operator(\))operator(,)
                operator(()string<modifier(r)delimiter(')content((abstract|as|base|break|case|catch|)delimiter(')>
                 string<modifier(r)delimiter(')content(checked|const|continue|default|delegate|)delimiter(')>
                 string<modifier(r)delimiter(')content(do|else|enum|event|explicit|extern|false|finally|)delimiter(')>
                 string<modifier(r)delimiter(')content(fixed|for|foreach|goto|if|implicit|in|interface|)delimiter(')>
                 string<modifier(r)delimiter(')content(internal|is|lock|new|null|operator|)delimiter(')>
                 string<modifier(r)delimiter(')content(out|override|params|private|protected|public|readonly|)delimiter(')>
                 string<modifier(r)delimiter(')content(ref|return|sealed|sizeof|stackalloc|static|)delimiter(')>
                 string<modifier(r)delimiter(')content(switch|this|throw|true|try|typeof|)delimiter(')>
                 string<modifier(r)delimiter(')content(unchecked|unsafe|virtual|void|while|)delimiter(')>
                 string<modifier(r)delimiter(')content(get|set|new|partial|yield|add|remove|value\))content(\\b)delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
                operator(()string<modifier(r)delimiter(')content((global\)(::\))delimiter(')>operator(,) ident(bygroups)operator(()ident(Keyword)operator(,) ident(Punctuation)operator(\))operator(\))operator(,)
                operator(()string<modifier(r)delimiter(')content((bool|byte|char|decimal|double|float|int|long|object|sbyte|)delimiter(')>
                 string<modifier(r)delimiter(')content(short|string|uint|ulong|ushort\))content(\\b)content(\\?)content(?)delimiter(')>operator(,) ident(Keyword)operator(.)ident(Type)operator(\))operator(,)
                operator(()string<modifier(r)delimiter(')content((class|struct\)()content(\\s)content(+\))delimiter(')>operator(,) ident(bygroups)operator(()ident(Keyword)operator(,) ident(Text)operator(\))operator(,) string<delimiter(')content(class)delimiter(')>operator(\))operator(,)
                operator(()string<modifier(r)delimiter(')content((namespace|using\)()content(\\s)content(+\))delimiter(')>operator(,) ident(bygroups)operator(()ident(Keyword)operator(,) ident(Text)operator(\))operator(,) string<delimiter(')content(namespace)delimiter(')>operator(\))operator(,)
                operator(()ident(cs_ident)operator(,) ident(Name)operator(\))operator(,)
            operator(])operator(,)
            string<delimiter(')content(class)delimiter(')>operator(:) operator([)
                operator(()ident(cs_ident)operator(,) ident(Name)operator(.)ident(Class)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))
            operator(])operator(,)
            string<delimiter(')content(namespace)delimiter(')>operator(:) operator([)
                operator(()string<modifier(r)delimiter(')content((?=)content(\\()content(\))delimiter(')>operator(,) ident(Text)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,) comment(# using (resource\))
                operator(()string<delimiter(')content(()delimiter(')> operator(+) ident(cs_ident) operator(+) string<modifier(r)delimiter(')content(|)content(\\.)content(\)+)delimiter(')>operator(,) ident(Name)operator(.)ident(Namespace)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))
            operator(])
        operator(})

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))operator(:)
        ident(level) operator(=) ident(get_choice_opt)operator(()ident(options)operator(,) string<delimiter(')content(unicodelevel)delimiter(')>operator(,) predefined_constant(self)operator(.)ident(tokens)operator(.)ident(keys)operator(()operator(\))operator(,) string<delimiter(')content(basic)delimiter(')>operator(\))
        keyword(if) ident(level) keyword(not) keyword(in) predefined_constant(self)operator(.)ident(_all_tokens)operator(:)
            comment(# compile the regexes now)
            predefined_constant(self)operator(.)ident(_tokens) operator(=) predefined_constant(self)operator(.)ident(__class__)operator(.)ident(process_tokendef)operator(()ident(level)operator(\))
        keyword(else)operator(:)
            predefined_constant(self)operator(.)ident(_tokens) operator(=) predefined_constant(self)operator(.)ident(_all_tokens)operator([)ident(level)operator(])

        ident(RegexLexer)operator(.)ident(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))


keyword(class) class(BooLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    For `Boo <http://boo.codehaus.org/>`_ source code.)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(Boo)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(boo)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.boo)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(text/x-boo)delimiter(')>operator(])

    ident(tokens) operator(=) operator({)
        string<delimiter(')content(root)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\s)content(+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((#|//\).*$)delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(/[*])delimiter(')>operator(,) ident(Comment)operator(,) string<delimiter(')content(comment)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([]{}:(\),.;[])delimiter(')>operator(,) ident(Punctuation)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\\\)content(\\n)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\\\)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((in|is|and|or|not\))content(\\b)delimiter(')>operator(,) ident(Operator)operator(.)ident(Word)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(/()content(\\\\)content(\\\\)content(|)content(\\\\)content(/|[^/)content(\\s)content(]\)/)delimiter(')>operator(,) ident(String)operator(.)ident(Regex)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(@/()content(\\\\)content(\\\\)content(|)content(\\\\)content(/|[^/]\)*/)delimiter(')>operator(,) ident(String)operator(.)ident(Regex)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(=~|!=|==|<<|>>|[-+/*%=<>&^|])delimiter(')>operator(,) ident(Operator)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((as|abstract|callable|constructor|destructor|do|import|)delimiter(')>
             string<modifier(r)delimiter(')content(enum|event|final|get|interface|internal|of|override|)delimiter(')>
             string<modifier(r)delimiter(')content(partial|private|protected|public|return|set|static|)delimiter(')>
             string<modifier(r)delimiter(')content(struct|transient|virtual|yield|super|and|break|cast|)delimiter(')>
             string<modifier(r)delimiter(')content(continue|elif|else|ensure|except|for|given|goto|if|in|)delimiter(')>
             string<modifier(r)delimiter(')content(is|isa|not|or|otherwise|pass|raise|ref|try|unless|when|)delimiter(')>
             string<modifier(r)delimiter(')content(while|from|as\))content(\\b)delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(def(?=)content(\\s)content(+)content(\\()content(.*?)content(\\\))content(\))delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((def\)()content(\\s)content(+\))delimiter(')>operator(,) ident(bygroups)operator(()ident(Keyword)operator(,) ident(Text)operator(\))operator(,) string<delimiter(')content(funcname)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((class\)()content(\\s)content(+\))delimiter(')>operator(,) ident(bygroups)operator(()ident(Keyword)operator(,) ident(Text)operator(\))operator(,) string<delimiter(')content(classname)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((namespace\)()content(\\s)content(+\))delimiter(')>operator(,) ident(bygroups)operator(()ident(Keyword)operator(,) ident(Text)operator(\))operator(,) string<delimiter(')content(namespace)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((?<!)content(\\.)content(\)(true|false|null|self|__eval__|__switch__|array|)delimiter(')>
             string<modifier(r)delimiter(')content(assert|checked|enumerate|filter|getter|len|lock|map|)delimiter(')>
             string<modifier(r)delimiter(')content(matrix|max|min|normalArrayIndexing|print|property|range|)delimiter(')>
             string<modifier(r)delimiter(')content(rawArrayIndexing|required|typeof|unchecked|using|)delimiter(')>
             string<modifier(r)delimiter(')content(yieldAll|zip\))content(\\b)delimiter(')>operator(,) ident(Name)operator(.)ident(Builtin)operator(\))operator(,)
            operator(()string<delimiter(')content("""()char(\\\\)char(\\\\)content(|)char(\\\\)content("|.*?\)""")delimiter(')>operator(,) ident(String)operator(.)ident(Double)operator(\))operator(,)
            operator(()string<delimiter(')content("()char(\\\\)char(\\\\)content(|)char(\\\\)content("|[^"]*?\)")delimiter(')>operator(,) ident(String)operator(.)ident(Double)operator(\))operator(,)
            operator(()string<delimiter(")content('()char(\\\\)char(\\\\)content(|)char(\\\\)content('|[^']*?\)')delimiter(")>operator(,) ident(String)operator(.)ident(Single)operator(\))operator(,)
            operator(()string<delimiter(')content([a-zA-Z_][a-zA-Z0-9_]*)delimiter(')>operator(,) ident(Name)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(()content(\\d)content(+)content(\\.)content(\\d)content(*|)content(\\d)content(*)content(\\.)content(\\d)content(+\)([fF][+-]?[0-9]+\)?)delimiter(')>operator(,) ident(Number)operator(.)ident(Float)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([0-9][0-9)content(\\.)content(]*(m|ms|d|h|s\))delimiter(')>operator(,) ident(Number)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(0)content(\\d)content(+)delimiter(')>operator(,) ident(Number)operator(.)ident(Oct)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(0x[a-fA-F0-9]+)delimiter(')>operator(,) ident(Number)operator(.)ident(Hex)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\d)content(+L)delimiter(')>operator(,) ident(Number)operator(.)ident(Integer)operator(.)ident(Long)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\d)content(+)delimiter(')>operator(,) ident(Number)operator(.)ident(Integer)operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(comment)delimiter(')>operator(:) operator([)
            operator(()string<delimiter(')content(/[*])delimiter(')>operator(,) ident(Comment)operator(.)ident(Multiline)operator(,) string<delimiter(')content(#push)delimiter(')>operator(\))operator(,)
            operator(()string<delimiter(')content([*]/)delimiter(')>operator(,) ident(Comment)operator(.)ident(Multiline)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<delimiter(')content([^/*])delimiter(')>operator(,) ident(Comment)operator(.)ident(Multiline)operator(\))operator(,)
            operator(()string<delimiter(')content([*/])delimiter(')>operator(,) ident(Comment)operator(.)ident(Multiline)operator(\))
        operator(])operator(,)
        string<delimiter(')content(funcname)delimiter(')>operator(:) operator([)
            operator(()string<delimiter(')content([a-zA-Z_][a-zA-Z0-9_]*)delimiter(')>operator(,) ident(Name)operator(.)ident(Function)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))
        operator(])operator(,)
        string<delimiter(')content(classname)delimiter(')>operator(:) operator([)
            operator(()string<delimiter(')content([a-zA-Z_][a-zA-Z0-9_]*)delimiter(')>operator(,) ident(Name)operator(.)ident(Class)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))
        operator(])operator(,)
        string<delimiter(')content(namespace)delimiter(')>operator(:) operator([)
            operator(()string<delimiter(')content([a-zA-Z_][a-zA-Z0-9_.]*)delimiter(')>operator(,) ident(Name)operator(.)ident(Namespace)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))
        operator(])
    operator(})


keyword(class) class(VbNetLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    For)content(
)content(    `Visual Basic.NET <http://msdn2.microsoft.com/en-us/vbasic/default.aspx>`_)content(
)content(    source code.)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(VB.net)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(vb.net)delimiter(')>operator(,) string<delimiter(')content(vbnet)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.vb)delimiter(')>operator(,) string<delimiter(')content(*.bas)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(text/x-vbnet)delimiter(')>operator(,) string<delimiter(')content(text/x-vba)delimiter(')>operator(]) comment(# (?\))

    ident(flags) operator(=) ident(re)operator(.)ident(MULTILINE) operator(|) ident(re)operator(.)ident(IGNORECASE)
    ident(tokens) operator(=) operator({)
        string<delimiter(')content(root)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(^)content(\\s)content(*<.*?>)delimiter(')>operator(,) ident(Name)operator(.)ident(Attribute)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\s)content(+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\n)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(rem)content(\\b)content(.*?)content(\\n)delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(")content('.*?)content(\\n)delimiter(")>operator(,) ident(Comment)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(#If)content(\\s)content(.*?)content(\\s)content(Then|#ElseIf)content(\\s)content(.*?)content(\\s)content(Then|#End)content(\\s)content(+If|#Const|)delimiter(')>
             string<modifier(r)delimiter(')content(#ExternalSource.*?)content(\\n)content(|#End)content(\\s)content(+ExternalSource|)delimiter(')>
             string<modifier(r)delimiter(')content(#Region.*?)content(\\n)content(|#End)content(\\s)content(+Region|#ExternalChecksum)delimiter(')>operator(,)
             ident(Comment)operator(.)ident(Preproc)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([)content(\\()content(\\\))content({}!#,.:])delimiter(')>operator(,) ident(Punctuation)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(Option)content(\\s)content(+(Strict|Explicit|Compare\))content(\\s)content(+)delimiter(')>
             string<modifier(r)delimiter(')content((On|Off|Binary|Text\))delimiter(')>operator(,) ident(Keyword)operator(.)ident(Declaration)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((?<!)content(\\.)content(\)(AddHandler|Alias|)delimiter(')>
             string<modifier(r)delimiter(')content(ByRef|ByVal|Call|Case|Catch|CBool|CByte|CChar|CDate|)delimiter(')>
             string<modifier(r)delimiter(')content(CDec|CDbl|CInt|CLng|CObj|Const|Continue|CSByte|CShort|)delimiter(')>
             string<modifier(r)delimiter(')content(CSng|CStr|CType|CUInt|CULng|CUShort|Declare|)delimiter(')>
             string<modifier(r)delimiter(')content(Default|Delegate|Dim|DirectCast|Do|Each|Else|ElseIf|)delimiter(')>
             string<modifier(r)delimiter(')content(End|EndIf|Enum|Erase|Error|Event|Exit|False|Finally|For|)delimiter(')>
             string<modifier(r)delimiter(')content(Friend|Function|Get|Global|GoSub|GoTo|Handles|If|)delimiter(')>
             string<modifier(r)delimiter(')content(Implements|Imports|Inherits|Interface|)delimiter(')>
             string<modifier(r)delimiter(')content(Let|Lib|Loop|Me|Module|MustInherit|)delimiter(')>
             string<modifier(r)delimiter(')content(MustOverride|MyBase|MyClass|Namespace|Narrowing|New|Next|)delimiter(')>
             string<modifier(r)delimiter(')content(Not|Nothing|NotInheritable|NotOverridable|Of|On|)delimiter(')>
             string<modifier(r)delimiter(')content(Operator|Option|Optional|Overloads|Overridable|)delimiter(')>
             string<modifier(r)delimiter(')content(Overrides|ParamArray|Partial|Private|Property|Protected|)delimiter(')>
             string<modifier(r)delimiter(')content(Public|RaiseEvent|ReadOnly|ReDim|RemoveHandler|Resume|)delimiter(')>
             string<modifier(r)delimiter(')content(Return|Select|Set|Shadows|Shared|Single|)delimiter(')>
             string<modifier(r)delimiter(')content(Static|Step|Stop|Structure|Sub|SyncLock|Then|)delimiter(')>
             string<modifier(r)delimiter(')content(Throw|To|True|Try|TryCast|Wend|)delimiter(')>
             string<modifier(r)delimiter(')content(Using|When|While|Widening|With|WithEvents|)delimiter(')>
             string<modifier(r)delimiter(')content(WriteOnly\))content(\\b)delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((?<!)content(\\.)content(\)(Function|Sub|Property\)()content(\\s)content(+\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Keyword)operator(,) ident(Text)operator(\))operator(,) string<delimiter(')content(funcname)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((?<!)content(\\.)content(\)(Class|Structure|Enum\)()content(\\s)content(+\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Keyword)operator(,) ident(Text)operator(\))operator(,) string<delimiter(')content(classname)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((?<!)content(\\.)content(\)(Namespace|Imports\)()content(\\s)content(+\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Keyword)operator(,) ident(Text)operator(\))operator(,) string<delimiter(')content(namespace)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((?<!)content(\\.)content(\)(Boolean|Byte|Char|Date|Decimal|Double|Integer|Long|)delimiter(')>
             string<modifier(r)delimiter(')content(Object|SByte|Short|Single|String|Variant|UInteger|ULong|)delimiter(')>
             string<modifier(r)delimiter(')content(UShort\))content(\\b)delimiter(')>operator(,) ident(Keyword)operator(.)ident(Type)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((?<!)content(\\.)content(\)(AddressOf|And|AndAlso|As|GetType|In|Is|IsNot|Like|Mod|)delimiter(')>
             string<modifier(r)delimiter(')content(Or|OrElse|TypeOf|Xor\))content(\\b)delimiter(')>operator(,) ident(Operator)operator(.)ident(Word)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(&=|[*]=|/=|)content(\\\\)content(=|)content(\\^)content(=|)content(\\+)content(=|-=|<<=|>>=|<<|>>|:=|)delimiter(')>
             string<modifier(r)delimiter(')content(<=|>=|<>|[-&*/)content(\\\\)content(^+=<>])delimiter(')>operator(,)
             ident(Operator)operator(\))operator(,)
            operator(()string<delimiter(')content(")delimiter(')>operator(,) ident(String)operator(,) string<delimiter(')content(string)delimiter(')>operator(\))operator(,)
            operator(()string<delimiter(')content([a-zA-Z_][a-zA-Z0-9_]*[%&@!#$]?)delimiter(')>operator(,) ident(Name)operator(\))operator(,)
            operator(()string<delimiter(')content(#.*?#)delimiter(')>operator(,) ident(Literal)operator(.)ident(Date)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(()content(\\d)content(+)content(\\.)content(\\d)content(*|)content(\\d)content(*)content(\\.)content(\\d)content(+\)([fF][+-]?[0-9]+\)?)delimiter(')>operator(,) ident(Number)operator(.)ident(Float)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\d)content(+([SILDFR]|US|UI|UL\)?)delimiter(')>operator(,) ident(Number)operator(.)ident(Integer)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(&H[0-9a-f]+([SILDFR]|US|UI|UL\)?)delimiter(')>operator(,) ident(Number)operator(.)ident(Integer)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(&O[0-7]+([SILDFR]|US|UI|UL\)?)delimiter(')>operator(,) ident(Number)operator(.)ident(Integer)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(_)content(\\n)delimiter(')>operator(,) ident(Text)operator(\))operator(,) comment(# Line continuation)
        operator(])operator(,)
        string<delimiter(')content(string)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content("")delimiter(')>operator(,) ident(String)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content("C?)delimiter(')>operator(,) ident(String)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([^"]+)delimiter(')>operator(,) ident(String)operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(funcname)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content([a-z_][a-z0-9_]*)delimiter(')>operator(,) ident(Name)operator(.)ident(Function)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))
        operator(])operator(,)
        string<delimiter(')content(classname)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content([a-z_][a-z0-9_]*)delimiter(')>operator(,) ident(Name)operator(.)ident(Class)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))
        operator(])operator(,)
        string<delimiter(')content(namespace)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content([a-z_][a-z0-9_.]*)delimiter(')>operator(,) ident(Name)operator(.)ident(Namespace)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))
        operator(])operator(,)
    operator(})

keyword(class) class(GenericAspxLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Lexer for ASP.NET pages.)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(aspx-gen)delimiter(')>
    ident(filenames) operator(=) operator([)operator(])
    ident(mimetypes) operator(=) operator([)operator(])

    ident(flags) operator(=) ident(re)operator(.)ident(DOTALL)

    ident(tokens) operator(=) operator({)
        string<delimiter(')content(root)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content((<%[@=#]?\)(.*?\)(%>\))delimiter(')>operator(,) ident(bygroups)operator(()ident(Name)operator(.)ident(Tag)operator(,) ident(Other)operator(,) ident(Name)operator(.)ident(Tag)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((<script.*?>\)(.*?\)(</script>\))delimiter(')>operator(,) ident(bygroups)operator(()ident(using)operator(()ident(XmlLexer)operator(\))operator(,)
                                                        ident(Other)operator(,)
                                                        ident(using)operator(()ident(XmlLexer)operator(\))operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((.+?\)(?=<\))delimiter(')>operator(,) ident(using)operator(()ident(XmlLexer)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(.+)delimiter(')>operator(,) ident(using)operator(()ident(XmlLexer)operator(\))operator(\))operator(,)
        operator(])operator(,)
    operator(})

comment(#TODO support multiple languages within the same source file)
keyword(class) class(CSharpAspxLexer)operator(()ident(DelegatingLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Lexer for highligting C# within ASP.NET pages.)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(aspx-cs)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(aspx-cs)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.aspx)delimiter(')>operator(,) string<delimiter(')content(*.asax)delimiter(')>operator(,) string<delimiter(')content(*.ascx)delimiter(')>operator(,) string<delimiter(')content(*.ashx)delimiter(')>operator(,) string<delimiter(')content(*.asmx)delimiter(')>operator(,) string<delimiter(')content(*.axd)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)operator(])

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))operator(:)
        predefined(super)operator(()ident(CSharpAspxLexer)operator(,) predefined_constant(self)operator(\))operator(.)ident(__init__)operator(()ident(CSharpLexer)operator(,)ident(GenericAspxLexer)operator(,)
                                              operator(**)ident(options)operator(\))

    keyword(def) method(analyse_text)operator(()ident(text)operator(\))operator(:)
        keyword(if) ident(re)operator(.)ident(search)operator(()string<modifier(r)delimiter(')content(Page)content(\\s)content(*Language="C#")delimiter(')>operator(,) ident(text)operator(,) ident(re)operator(.)ident(I)operator(\)) keyword(is) keyword(not) predefined_constant(None)operator(:)
            keyword(return) float(0.2)
        keyword(elif) ident(re)operator(.)ident(search)operator(()string<modifier(r)delimiter(')content(script[^>]+language=[")content(\\')content(]C#)delimiter(')>operator(,) ident(text)operator(,) ident(re)operator(.)ident(I)operator(\)) keyword(is) keyword(not) predefined_constant(None)operator(:)
            keyword(return) float(0.15)
        keyword(return) float(0.001) comment(# TODO really only for when filename matched...)

keyword(class) class(VbNetAspxLexer)operator(()ident(DelegatingLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Lexer for highligting Visual Basic.net within ASP.NET pages.)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(aspx-vb)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(aspx-vb)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.aspx)delimiter(')>operator(,) string<delimiter(')content(*.asax)delimiter(')>operator(,) string<delimiter(')content(*.ascx)delimiter(')>operator(,) string<delimiter(')content(*.ashx)delimiter(')>operator(,) string<delimiter(')content(*.asmx)delimiter(')>operator(,) string<delimiter(')content(*.axd)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)operator(])

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))operator(:)
        predefined(super)operator(()ident(VbNetAspxLexer)operator(,) predefined_constant(self)operator(\))operator(.)ident(__init__)operator(()ident(VbNetLexer)operator(,)ident(GenericAspxLexer)operator(,)
                                              operator(**)ident(options)operator(\))

    keyword(def) method(analyse_text)operator(()ident(text)operator(\))operator(:)
        keyword(if) ident(re)operator(.)ident(search)operator(()string<modifier(r)delimiter(')content(Page)content(\\s)content(*Language="Vb")delimiter(')>operator(,) ident(text)operator(,) ident(re)operator(.)ident(I)operator(\)) keyword(is) keyword(not) predefined_constant(None)operator(:)
            keyword(return) float(0.2)
        keyword(elif) ident(re)operator(.)ident(search)operator(()string<modifier(r)delimiter(')content(script[^>]+language=[")content(\\')content(]vb)delimiter(')>operator(,) ident(text)operator(,) ident(re)operator(.)ident(I)operator(\)) keyword(is) keyword(not) predefined_constant(None)operator(:)
            keyword(return) float(0.15)
comment(# -*- coding: utf-8 -*-)
docstring<delimiter(""")content(
)content(    pygments.lexers.functional)content(
)content(    ~~~~~~~~~~~~~~~~~~~~~~~~~~)content(
)content(
)content(    Lexers for functional languages.)content(
)content(
)content(    :copyright: Copyright 2006-2009 by the Pygments team, see AUTHORS.)content(
)content(    :license: BSD, see LICENSE for details.)content(
)delimiter(""")>

keyword(import) include(re)
keyword(try)operator(:)
    predefined(set)
keyword(except) exception(NameError)operator(:)
    keyword(from) include(sets) keyword(import) include(Set) keyword(as) ident(set)

keyword(from) include(pygments.lexer) keyword(import) include(Lexer)operator(,) include(RegexLexer)operator(,) include(bygroups)operator(,) include(include)operator(,) include(do_insertions)
keyword(from) include(pygments.token) keyword(import) include(Text)operator(,) include(Comment)operator(,) include(Operator)operator(,) include(Keyword)operator(,) include(Name)operator(,) \
     include(String)operator(,) include(Number)operator(,) include(Punctuation)operator(,) include(Literal)operator(,) include(Generic)


ident(__all__) operator(=) operator([)string<delimiter(')content(SchemeLexer)delimiter(')>operator(,) string<delimiter(')content(CommonLispLexer)delimiter(')>operator(,) string<delimiter(')content(HaskellLexer)delimiter(')>operator(,) string<delimiter(')content(LiterateHaskellLexer)delimiter(')>operator(,)
           string<delimiter(')content(OcamlLexer)delimiter(')>operator(,) string<delimiter(')content(ErlangLexer)delimiter(')>operator(,) string<delimiter(')content(ErlangShellLexer)delimiter(')>operator(])


keyword(class) class(SchemeLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    A Scheme lexer, parsing a stream and outputting the tokens)content(
)content(    needed to highlight scheme code.)content(
)content(    This lexer could be most probably easily subclassed to parse)content(
)content(    other LISP-Dialects like Common Lisp, Emacs Lisp or AutoLisp.)content(
)content(
)content(    This parser is checked with pastes from the LISP pastebin)content(
)content(    at http://paste.lisp.org/ to cover as much syntax as possible.)content(
)content(
)content(    It supports the full Scheme syntax as defined in R5RS.)content(
)content(
)content(    *New in Pygments 0.6.*)content(
)content(    )delimiter(""")>
    ident(name) operator(=) string<delimiter(')content(Scheme)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(scheme)delimiter(')>operator(,) string<delimiter(')content(scm)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.scm)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(text/x-scheme)delimiter(')>operator(,) string<delimiter(')content(application/x-scheme)delimiter(')>operator(])

    comment(# list of known keywords and builtins taken form vim 6.4 scheme.vim)
    comment(# syntax file.)
    ident(keywords) operator(=) operator([)
        string<delimiter(')content(lambda)delimiter(')>operator(,) string<delimiter(')content(define)delimiter(')>operator(,) string<delimiter(')content(if)delimiter(')>operator(,) string<delimiter(')content(else)delimiter(')>operator(,) string<delimiter(')content(cond)delimiter(')>operator(,) string<delimiter(')content(and)delimiter(')>operator(,) string<delimiter(')content(or)delimiter(')>operator(,) string<delimiter(')content(case)delimiter(')>operator(,) string<delimiter(')content(let)delimiter(')>operator(,)
        string<delimiter(')content(let*)delimiter(')>operator(,) string<delimiter(')content(letrec)delimiter(')>operator(,) string<delimiter(')content(begin)delimiter(')>operator(,) string<delimiter(')content(do)delimiter(')>operator(,) string<delimiter(')content(delay)delimiter(')>operator(,) string<delimiter(')content(set!)delimiter(')>operator(,) string<delimiter(')content(=>)delimiter(')>operator(,) string<delimiter(')content(quote)delimiter(')>operator(,)
        string<delimiter(')content(quasiquote)delimiter(')>operator(,) string<delimiter(')content(unquote)delimiter(')>operator(,) string<delimiter(')content(unquote-splicing)delimiter(')>operator(,) string<delimiter(')content(define-syntax)delimiter(')>operator(,)
        string<delimiter(')content(let-syntax)delimiter(')>operator(,) string<delimiter(')content(letrec-syntax)delimiter(')>operator(,) string<delimiter(')content(syntax-rules)delimiter(')>
    operator(])
    ident(builtins) operator(=) operator([)
        string<delimiter(')content(*)delimiter(')>operator(,) string<delimiter(')content(+)delimiter(')>operator(,) string<delimiter(')content(-)delimiter(')>operator(,) string<delimiter(')content(/)delimiter(')>operator(,) string<delimiter(')content(<)delimiter(')>operator(,) string<delimiter(')content(<=)delimiter(')>operator(,) string<delimiter(')content(=)delimiter(')>operator(,) string<delimiter(')content(>)delimiter(')>operator(,) string<delimiter(')content(>=)delimiter(')>operator(,) string<delimiter(')content(abs)delimiter(')>operator(,) string<delimiter(')content(acos)delimiter(')>operator(,) string<delimiter(')content(angle)delimiter(')>operator(,)
        string<delimiter(')content(append)delimiter(')>operator(,) string<delimiter(')content(apply)delimiter(')>operator(,) string<delimiter(')content(asin)delimiter(')>operator(,) string<delimiter(')content(assoc)delimiter(')>operator(,) string<delimiter(')content(assq)delimiter(')>operator(,) string<delimiter(')content(assv)delimiter(')>operator(,) string<delimiter(')content(atan)delimiter(')>operator(,)
        string<delimiter(')content(boolean?)delimiter(')>operator(,) string<delimiter(')content(caaaar)delimiter(')>operator(,) string<delimiter(')content(caaadr)delimiter(')>operator(,) string<delimiter(')content(caaar)delimiter(')>operator(,) string<delimiter(')content(caadar)delimiter(')>operator(,) string<delimiter(')content(caaddr)delimiter(')>operator(,) string<delimiter(')content(caadr)delimiter(')>operator(,)
        string<delimiter(')content(caar)delimiter(')>operator(,) string<delimiter(')content(cadaar)delimiter(')>operator(,) string<delimiter(')content(cadadr)delimiter(')>operator(,) string<delimiter(')content(cadar)delimiter(')>operator(,) string<delimiter(')content(caddar)delimiter(')>operator(,) string<delimiter(')content(cadddr)delimiter(')>operator(,) string<delimiter(')content(caddr)delimiter(')>operator(,)
        string<delimiter(')content(cadr)delimiter(')>operator(,) string<delimiter(')content(call-with-current-continuation)delimiter(')>operator(,) string<delimiter(')content(call-with-input-file)delimiter(')>operator(,)
        string<delimiter(')content(call-with-output-file)delimiter(')>operator(,) string<delimiter(')content(call-with-values)delimiter(')>operator(,) string<delimiter(')content(call/cc)delimiter(')>operator(,) string<delimiter(')content(car)delimiter(')>operator(,)
        string<delimiter(')content(cdaaar)delimiter(')>operator(,) string<delimiter(')content(cdaadr)delimiter(')>operator(,) string<delimiter(')content(cdaar)delimiter(')>operator(,) string<delimiter(')content(cdadar)delimiter(')>operator(,) string<delimiter(')content(cdaddr)delimiter(')>operator(,) string<delimiter(')content(cdadr)delimiter(')>operator(,) string<delimiter(')content(cdar)delimiter(')>operator(,)
        string<delimiter(')content(cddaar)delimiter(')>operator(,) string<delimiter(')content(cddadr)delimiter(')>operator(,) string<delimiter(')content(cddar)delimiter(')>operator(,) string<delimiter(')content(cdddar)delimiter(')>operator(,) string<delimiter(')content(cddddr)delimiter(')>operator(,) string<delimiter(')content(cdddr)delimiter(')>operator(,) string<delimiter(')content(cddr)delimiter(')>operator(,)
        string<delimiter(')content(cdr)delimiter(')>operator(,) string<delimiter(')content(ceiling)delimiter(')>operator(,) string<delimiter(')content(char->integer)delimiter(')>operator(,) string<delimiter(')content(char-alphabetic?)delimiter(')>operator(,) string<delimiter(')content(char-ci<=?)delimiter(')>operator(,)
        string<delimiter(')content(char-ci<?)delimiter(')>operator(,) string<delimiter(')content(char-ci=?)delimiter(')>operator(,) string<delimiter(')content(char-ci>=?)delimiter(')>operator(,) string<delimiter(')content(char-ci>?)delimiter(')>operator(,) string<delimiter(')content(char-downcase)delimiter(')>operator(,)
        string<delimiter(')content(char-lower-case?)delimiter(')>operator(,) string<delimiter(')content(char-numeric?)delimiter(')>operator(,) string<delimiter(')content(char-ready?)delimiter(')>operator(,) string<delimiter(')content(char-upcase)delimiter(')>operator(,)
        string<delimiter(')content(char-upper-case?)delimiter(')>operator(,) string<delimiter(')content(char-whitespace?)delimiter(')>operator(,) string<delimiter(')content(char<=?)delimiter(')>operator(,) string<delimiter(')content(char<?)delimiter(')>operator(,) string<delimiter(')content(char=?)delimiter(')>operator(,)
        string<delimiter(')content(char>=?)delimiter(')>operator(,) string<delimiter(')content(char>?)delimiter(')>operator(,) string<delimiter(')content(char?)delimiter(')>operator(,) string<delimiter(')content(close-input-port)delimiter(')>operator(,) string<delimiter(')content(close-output-port)delimiter(')>operator(,)
        string<delimiter(')content(complex?)delimiter(')>operator(,) string<delimiter(')content(cons)delimiter(')>operator(,) string<delimiter(')content(cos)delimiter(')>operator(,) string<delimiter(')content(current-input-port)delimiter(')>operator(,) string<delimiter(')content(current-output-port)delimiter(')>operator(,)
        string<delimiter(')content(denominator)delimiter(')>operator(,) string<delimiter(')content(display)delimiter(')>operator(,) string<delimiter(')content(dynamic-wind)delimiter(')>operator(,) string<delimiter(')content(eof-object?)delimiter(')>operator(,) string<delimiter(')content(eq?)delimiter(')>operator(,)
        string<delimiter(')content(equal?)delimiter(')>operator(,) string<delimiter(')content(eqv?)delimiter(')>operator(,) string<delimiter(')content(eval)delimiter(')>operator(,) string<delimiter(')content(even?)delimiter(')>operator(,) string<delimiter(')content(exact->inexact)delimiter(')>operator(,) string<delimiter(')content(exact?)delimiter(')>operator(,) string<delimiter(')content(exp)delimiter(')>operator(,)
        string<delimiter(')content(expt)delimiter(')>operator(,) string<delimiter(')content(floor)delimiter(')>operator(,) string<delimiter(')content(for-each)delimiter(')>operator(,) string<delimiter(')content(force)delimiter(')>operator(,) string<delimiter(')content(gcd)delimiter(')>operator(,) string<delimiter(')content(imag-part)delimiter(')>operator(,)
        string<delimiter(')content(inexact->exact)delimiter(')>operator(,) string<delimiter(')content(inexact?)delimiter(')>operator(,) string<delimiter(')content(input-port?)delimiter(')>operator(,) string<delimiter(')content(integer->char)delimiter(')>operator(,)
        string<delimiter(')content(integer?)delimiter(')>operator(,) string<delimiter(')content(interaction-environment)delimiter(')>operator(,) string<delimiter(')content(lcm)delimiter(')>operator(,) string<delimiter(')content(length)delimiter(')>operator(,) string<delimiter(')content(list)delimiter(')>operator(,)
        string<delimiter(')content(list->string)delimiter(')>operator(,) string<delimiter(')content(list->vector)delimiter(')>operator(,) string<delimiter(')content(list-ref)delimiter(')>operator(,) string<delimiter(')content(list-tail)delimiter(')>operator(,) string<delimiter(')content(list?)delimiter(')>operator(,)
        string<delimiter(')content(load)delimiter(')>operator(,) string<delimiter(')content(log)delimiter(')>operator(,) string<delimiter(')content(magnitude)delimiter(')>operator(,) string<delimiter(')content(make-polar)delimiter(')>operator(,) string<delimiter(')content(make-rectangular)delimiter(')>operator(,)
        string<delimiter(')content(make-string)delimiter(')>operator(,) string<delimiter(')content(make-vector)delimiter(')>operator(,) string<delimiter(')content(map)delimiter(')>operator(,) string<delimiter(')content(max)delimiter(')>operator(,) string<delimiter(')content(member)delimiter(')>operator(,) string<delimiter(')content(memq)delimiter(')>operator(,) string<delimiter(')content(memv)delimiter(')>operator(,)
        string<delimiter(')content(min)delimiter(')>operator(,) string<delimiter(')content(modulo)delimiter(')>operator(,) string<delimiter(')content(negative?)delimiter(')>operator(,) string<delimiter(')content(newline)delimiter(')>operator(,) string<delimiter(')content(not)delimiter(')>operator(,) string<delimiter(')content(null-environment)delimiter(')>operator(,)
        string<delimiter(')content(null?)delimiter(')>operator(,) string<delimiter(')content(number->string)delimiter(')>operator(,) string<delimiter(')content(number?)delimiter(')>operator(,) string<delimiter(')content(numerator)delimiter(')>operator(,) string<delimiter(')content(odd?)delimiter(')>operator(,)
        string<delimiter(')content(open-input-file)delimiter(')>operator(,) string<delimiter(')content(open-output-file)delimiter(')>operator(,) string<delimiter(')content(output-port?)delimiter(')>operator(,) string<delimiter(')content(pair?)delimiter(')>operator(,)
        string<delimiter(')content(peek-char)delimiter(')>operator(,) string<delimiter(')content(port?)delimiter(')>operator(,) string<delimiter(')content(positive?)delimiter(')>operator(,) string<delimiter(')content(procedure?)delimiter(')>operator(,) string<delimiter(')content(quotient)delimiter(')>operator(,)
        string<delimiter(')content(rational?)delimiter(')>operator(,) string<delimiter(')content(rationalize)delimiter(')>operator(,) string<delimiter(')content(read)delimiter(')>operator(,) string<delimiter(')content(read-char)delimiter(')>operator(,) string<delimiter(')content(real-part)delimiter(')>operator(,) string<delimiter(')content(real?)delimiter(')>operator(,)
        string<delimiter(')content(remainder)delimiter(')>operator(,) string<delimiter(')content(reverse)delimiter(')>operator(,) string<delimiter(')content(round)delimiter(')>operator(,) string<delimiter(')content(scheme-report-environment)delimiter(')>operator(,)
        string<delimiter(')content(set-car!)delimiter(')>operator(,) string<delimiter(')content(set-cdr!)delimiter(')>operator(,) string<delimiter(')content(sin)delimiter(')>operator(,) string<delimiter(')content(sqrt)delimiter(')>operator(,) string<delimiter(')content(string)delimiter(')>operator(,) string<delimiter(')content(string->list)delimiter(')>operator(,)
        string<delimiter(')content(string->number)delimiter(')>operator(,) string<delimiter(')content(string->symbol)delimiter(')>operator(,) string<delimiter(')content(string-append)delimiter(')>operator(,) string<delimiter(')content(string-ci<=?)delimiter(')>operator(,)
        string<delimiter(')content(string-ci<?)delimiter(')>operator(,) string<delimiter(')content(string-ci=?)delimiter(')>operator(,) string<delimiter(')content(string-ci>=?)delimiter(')>operator(,) string<delimiter(')content(string-ci>?)delimiter(')>operator(,)
        string<delimiter(')content(string-copy)delimiter(')>operator(,) string<delimiter(')content(string-fill!)delimiter(')>operator(,) string<delimiter(')content(string-length)delimiter(')>operator(,) string<delimiter(')content(string-ref)delimiter(')>operator(,)
        string<delimiter(')content(string-set!)delimiter(')>operator(,) string<delimiter(')content(string<=?)delimiter(')>operator(,) string<delimiter(')content(string<?)delimiter(')>operator(,) string<delimiter(')content(string=?)delimiter(')>operator(,) string<delimiter(')content(string>=?)delimiter(')>operator(,)
        string<delimiter(')content(string>?)delimiter(')>operator(,) string<delimiter(')content(string?)delimiter(')>operator(,) string<delimiter(')content(substring)delimiter(')>operator(,) string<delimiter(')content(symbol->string)delimiter(')>operator(,) string<delimiter(')content(symbol?)delimiter(')>operator(,)
        string<delimiter(')content(tan)delimiter(')>operator(,) string<delimiter(')content(transcript-off)delimiter(')>operator(,) string<delimiter(')content(transcript-on)delimiter(')>operator(,) string<delimiter(')content(truncate)delimiter(')>operator(,) string<delimiter(')content(values)delimiter(')>operator(,)
        string<delimiter(')content(vector)delimiter(')>operator(,) string<delimiter(')content(vector->list)delimiter(')>operator(,) string<delimiter(')content(vector-fill!)delimiter(')>operator(,) string<delimiter(')content(vector-length)delimiter(')>operator(,)
        string<delimiter(')content(vector-ref)delimiter(')>operator(,) string<delimiter(')content(vector-set!)delimiter(')>operator(,) string<delimiter(')content(vector?)delimiter(')>operator(,) string<delimiter(')content(with-input-from-file)delimiter(')>operator(,)
        string<delimiter(')content(with-output-to-file)delimiter(')>operator(,) string<delimiter(')content(write)delimiter(')>operator(,) string<delimiter(')content(write-char)delimiter(')>operator(,) string<delimiter(')content(zero?)delimiter(')>
    operator(])

    comment(# valid names for identifiers)
    comment(# well, names can only not consist fully of numbers)
    comment(# but this should be good enough for now)
    ident(valid_name) operator(=) string<modifier(r)delimiter(')content([a-zA-Z0-9!$%&*+,/:<=>?@^_~|-]+)delimiter(')>

    ident(tokens) operator(=) operator({)
        string<delimiter(')content(root)delimiter(')> operator(:) operator([)
            comment(# the comments - always starting with semicolon)
            comment(# and going to the end of the line)
            operator(()string<modifier(r)delimiter(')content(;.*$)delimiter(')>operator(,) ident(Comment)operator(.)ident(Single)operator(\))operator(,)

            comment(# whitespaces - usually not relevant)
            operator(()string<modifier(r)delimiter(')content(\\s)content(+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)

            comment(# numbers)
            operator(()string<modifier(r)delimiter(')content(-?)content(\\d)content(+)content(\\.)content(\\d)content(+)delimiter(')>operator(,) ident(Number)operator(.)ident(Float)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(-?)content(\\d)content(+)delimiter(')>operator(,) ident(Number)operator(.)ident(Integer)operator(\))operator(,)
            comment(# support for uncommon kinds of numbers -)
            comment(# have to figure out what the characters mean)
            comment(#(r'(#e|#i|#b|#o|#d|#x\)[\\d.]+', Number\),)

            comment(# strings, symbols and characters)
            operator(()string<modifier(r)delimiter(')content("()content(\\\\)content(\\\\)content(|)content(\\\\)content("|[^"]\)*")delimiter(')>operator(,) ident(String)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(")content(')delimiter(")> operator(+) ident(valid_name)operator(,) ident(String)operator(.)ident(Symbol)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(")content(#)content(\\\\)content(([(\)/')content(\\")content(.'_!§$%& ?=+-]{1}|[a-zA-Z0-9]+\))delimiter(")>operator(,) ident(String)operator(.)ident(Char)operator(\))operator(,)

            comment(# constants)
            operator(()string<modifier(r)delimiter(')content((#t|#f\))delimiter(')>operator(,) ident(Name)operator(.)ident(Constant)operator(\))operator(,)

            comment(# special operators)
            operator(()string<modifier(r)delimiter(")content(('|#|`|,@|,|)content(\\.)content(\))delimiter(")>operator(,) ident(Operator)operator(\))operator(,)

            comment(# highlight the keywords)
            operator(()string<delimiter(')content((%s\))delimiter(')> operator(%) string<delimiter(')content(|)delimiter(')>operator(.)ident(join)operator(()operator([)
                ident(re)operator(.)ident(escape)operator(()ident(entry)operator(\)) operator(+) string<delimiter(')content( )delimiter(')> keyword(for) ident(entry) keyword(in) ident(keywords)operator(])operator(\))operator(,)
                ident(Keyword)
            operator(\))operator(,)

            comment(# first variable in a quoted string like)
            comment(# '(this is syntactic sugar\))
            operator(()string<modifier(r)delimiter(")content((?<=')content(\\()content(\))delimiter(")> operator(+) ident(valid_name)operator(,) ident(Name)operator(.)ident(Variable)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(")content((?<=#)content(\\()content(\))delimiter(")> operator(+) ident(valid_name)operator(,) ident(Name)operator(.)ident(Variable)operator(\))operator(,)

            comment(# highlight the builtins)
            operator(()string<delimiter(")content((?<=)content(\\()content(\)(%s\))delimiter(")> operator(%) string<delimiter(')content(|)delimiter(')>operator(.)ident(join)operator(()operator([)
                ident(re)operator(.)ident(escape)operator(()ident(entry)operator(\)) operator(+) string<delimiter(')content( )delimiter(')> keyword(for) ident(entry) keyword(in) ident(builtins)operator(])operator(\))operator(,)
                ident(Name)operator(.)ident(Builtin)
            operator(\))operator(,)

            comment(# the remaining functions)
            operator(()string<modifier(r)delimiter(')content((?<=)content(\\()content(\))delimiter(')> operator(+) ident(valid_name)operator(,) ident(Name)operator(.)ident(Function)operator(\))operator(,)
            comment(# find the remaining variables)
            operator(()ident(valid_name)operator(,) ident(Name)operator(.)ident(Variable)operator(\))operator(,)

            comment(# the famous parentheses!)
            operator(()string<modifier(r)delimiter(')content(()content(\\()content(|)content(\\\))content(\))delimiter(')>operator(,) ident(Punctuation)operator(\))operator(,)
        operator(])operator(,)
    operator(})


keyword(class) class(CommonLispLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    A Common Lisp lexer.)content(
)content(
)content(    *New in Pygments 0.9.*)content(
)content(    )delimiter(""")>
    ident(name) operator(=) string<delimiter(')content(Common Lisp)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(common-lisp)delimiter(')>operator(,) string<delimiter(')content(cl)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.cl)delimiter(')>operator(,) string<delimiter(')content(*.lisp)delimiter(')>operator(,) string<delimiter(')content(*.el)delimiter(')>operator(])  comment(# use for Elisp too)
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(text/x-common-lisp)delimiter(')>operator(])

    ident(flags) operator(=) ident(re)operator(.)ident(IGNORECASE) operator(|) ident(re)operator(.)ident(MULTILINE)

    comment(### couple of useful regexes)

    comment(# characters that are not macro-characters and can be used to begin a symbol)
    ident(nonmacro) operator(=) string<modifier(r)delimiter(')content(\\\\)content(.|[a-zA-Z0-9!$%&*+-/<=>?@)content(\\[)content(\\])content(^_{}~])delimiter(')>
    ident(constituent) operator(=) ident(nonmacro) operator(+) string<delimiter(')content(|[#.:])delimiter(')>
    ident(terminated) operator(=) string<modifier(r)delimiter(')content((?=[ "(\))content(\\')content(\\n)content(,;`]\))delimiter(')> comment(# whitespace or terminating macro characters)

    comment(### symbol token, reverse-engineered from hyperspec)
    comment(# Take a deep breath...)
    ident(symbol) operator(=) string<modifier(r)delimiter(')content(()content(\\|)content([^|]+)content(\\|)content(|(?:%s\)(?:%s\)*\))delimiter(')> operator(%) operator(()ident(nonmacro)operator(,) ident(constituent)operator(\))

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))operator(:)
        keyword(from) include(pygments.lexers._clbuiltins) keyword(import) include(BUILTIN_FUNCTIONS)operator(,) \
            include(SPECIAL_FORMS)operator(,) include(MACROS)operator(,) include(LAMBDA_LIST_KEYWORDS)operator(,) include(DECLARATIONS)operator(,) \
            include(BUILTIN_TYPES)operator(,) include(BUILTIN_CLASSES)
        predefined_constant(self)operator(.)ident(builtin_function) operator(=) ident(BUILTIN_FUNCTIONS)
        predefined_constant(self)operator(.)ident(special_forms) operator(=) ident(SPECIAL_FORMS)
        predefined_constant(self)operator(.)ident(macros) operator(=) ident(MACROS)
        predefined_constant(self)operator(.)ident(lambda_list_keywords) operator(=) ident(LAMBDA_LIST_KEYWORDS)
        predefined_constant(self)operator(.)ident(declarations) operator(=) ident(DECLARATIONS)
        predefined_constant(self)operator(.)ident(builtin_types) operator(=) ident(BUILTIN_TYPES)
        predefined_constant(self)operator(.)ident(builtin_classes) operator(=) ident(BUILTIN_CLASSES)
        ident(RegexLexer)operator(.)ident(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))

    keyword(def) method(get_tokens_unprocessed)operator(()predefined_constant(self)operator(,) ident(text)operator(\))operator(:)
        ident(stack) operator(=) operator([)string<delimiter(')content(root)delimiter(')>operator(])
        keyword(for) ident(index)operator(,) ident(token)operator(,) ident(value) keyword(in) ident(RegexLexer)operator(.)ident(get_tokens_unprocessed)operator(()predefined_constant(self)operator(,) ident(text)operator(,) ident(stack)operator(\))operator(:)
            keyword(if) ident(token) keyword(is) ident(Name)operator(.)ident(Variable)operator(:)
                keyword(if) ident(value) keyword(in) predefined_constant(self)operator(.)ident(builtin_function)operator(:)
                    keyword(yield) ident(index)operator(,) ident(Name)operator(.)ident(Builtin)operator(,) ident(value)
                    keyword(continue)
                keyword(if) ident(value) keyword(in) predefined_constant(self)operator(.)ident(special_forms)operator(:)
                    keyword(yield) ident(index)operator(,) ident(Keyword)operator(,) ident(value)
                    keyword(continue)
                keyword(if) ident(value) keyword(in) predefined_constant(self)operator(.)ident(macros)operator(:)
                    keyword(yield) ident(index)operator(,) ident(Name)operator(.)ident(Builtin)operator(,) ident(value)
                    keyword(continue)
                keyword(if) ident(value) keyword(in) predefined_constant(self)operator(.)ident(lambda_list_keywords)operator(:)
                    keyword(yield) ident(index)operator(,) ident(Keyword)operator(,) ident(value)
                    keyword(continue)
                keyword(if) ident(value) keyword(in) predefined_constant(self)operator(.)ident(declarations)operator(:)
                    keyword(yield) ident(index)operator(,) ident(Keyword)operator(,) ident(value)
                    keyword(continue)
                keyword(if) ident(value) keyword(in) predefined_constant(self)operator(.)ident(builtin_types)operator(:)
                    keyword(yield) ident(index)operator(,) ident(Keyword)operator(.)ident(Type)operator(,) ident(value)
                    keyword(continue)
                keyword(if) ident(value) keyword(in) predefined_constant(self)operator(.)ident(builtin_classes)operator(:)
                    keyword(yield) ident(index)operator(,) ident(Name)operator(.)ident(Class)operator(,) ident(value)
                    keyword(continue)
            keyword(yield) ident(index)operator(,) ident(token)operator(,) ident(value)

    ident(tokens) operator(=) operator({)
        string<delimiter(')content(root)delimiter(')> operator(:) operator([)
            operator(()string<delimiter(')delimiter(')>operator(,) ident(Text)operator(,) string<delimiter(')content(body)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(multiline-comment)delimiter(')> operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(#)content(\\|)delimiter(')>operator(,) ident(Comment)operator(.)ident(Multiline)operator(,) string<delimiter(')content(#push)delimiter(')>operator(\))operator(,) comment(# (cf. Hyperspec 2.4.8.19\))
            operator(()string<modifier(r)delimiter(')content(\\|)content(#)delimiter(')>operator(,) ident(Comment)operator(.)ident(Multiline)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([^|#]+)delimiter(')>operator(,) ident(Comment)operator(.)ident(Multiline)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([|#])delimiter(')>operator(,) ident(Comment)operator(.)ident(Multiline)operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(commented-form)delimiter(')> operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\()delimiter(')>operator(,) ident(Comment)operator(.)ident(Preproc)operator(,) string<delimiter(')content(#push)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\\))delimiter(')>operator(,) ident(Comment)operator(.)ident(Preproc)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([^(\)]+)delimiter(')>operator(,) ident(Comment)operator(.)ident(Preproc)operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(body)delimiter(')> operator(:) operator([)
            comment(# whitespace)
            operator(()string<modifier(r)delimiter(')content(\\s)content(+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)

            comment(# single-line comment)
            operator(()string<modifier(r)delimiter(')content(;.*$)delimiter(')>operator(,) ident(Comment)operator(.)ident(Single)operator(\))operator(,)

            comment(# multi-line comment)
            operator(()string<modifier(r)delimiter(')content(#)content(\\|)delimiter(')>operator(,) ident(Comment)operator(.)ident(Multiline)operator(,) string<delimiter(')content(multiline-comment)delimiter(')>operator(\))operator(,)

            comment(# encoding comment (?\))
            operator(()string<modifier(r)delimiter(')content(#)content(\\d)content(*Y.*$)delimiter(')>operator(,) ident(Comment)operator(.)ident(Special)operator(\))operator(,)

            comment(# strings and characters)
            operator(()string<modifier(r)delimiter(')content("()content(\\\\)content(.|[^"]\)*")delimiter(')>operator(,) ident(String)operator(\))operator(,)
            comment(# quoting)
            operator(()string<modifier(r)delimiter(")content(:)delimiter(")> operator(+) ident(symbol)operator(,) ident(String)operator(.)ident(Symbol)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(")content(')delimiter(")> operator(+) ident(symbol)operator(,) ident(String)operator(.)ident(Symbol)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(")content(')delimiter(")>operator(,) ident(Operator)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(")content(`)delimiter(")>operator(,) ident(Operator)operator(\))operator(,)

            comment(# decimal numbers)
            operator(()string<modifier(r)delimiter(')content([-+]?)content(\\d)content(+)content(\\.)content(?)delimiter(')> operator(+) ident(terminated)operator(,) ident(Number)operator(.)ident(Integer)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([-+]?)content(\\d)content(+/)content(\\d)content(+)delimiter(')> operator(+) ident(terminated)operator(,) ident(Number)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([-+]?()content(\\d)content(*)content(\\.)content(\\d)content(+([defls][-+]?)content(\\d)content(+\)?|)content(\\d)content(+()content(\\.)content(\\d)content(*\)?[defls][-+]?)content(\\d)content(+\))delimiter(')> \
                operator(+) ident(terminated)operator(,) ident(Number)operator(.)ident(Float)operator(\))operator(,)

            comment(# sharpsign strings and characters)
            operator(()string<modifier(r)delimiter(")content(#)content(\\\\)content(.)delimiter(")> operator(+) ident(terminated)operator(,) ident(String)operator(.)ident(Char)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(")content(#)content(\\\\)delimiter(")> operator(+) ident(symbol)operator(,) ident(String)operator(.)ident(Char)operator(\))operator(,)

            comment(# vector)
            operator(()string<modifier(r)delimiter(')content(#)content(\\()delimiter(')>operator(,) ident(Operator)operator(,) string<delimiter(')content(body)delimiter(')>operator(\))operator(,)

            comment(# bitstring)
            operator(()string<modifier(r)delimiter(')content(#)content(\\d)content(*)content(\\*)content([01]*)delimiter(')>operator(,) ident(Literal)operator(.)ident(Other)operator(\))operator(,)

            comment(# uninterned symbol)
            operator(()string<modifier(r)delimiter(')content(#:)delimiter(')> operator(+) ident(symbol)operator(,) ident(String)operator(.)ident(Symbol)operator(\))operator(,)

            comment(# read-time and load-time evaluation)
            operator(()string<modifier(r)delimiter(')content(#[.,])delimiter(')>operator(,) ident(Operator)operator(\))operator(,)

            comment(# function shorthand)
            operator(()string<modifier(r)delimiter(')content(#)content(\\')delimiter(')>operator(,) ident(Name)operator(.)ident(Function)operator(\))operator(,)

            comment(# binary rational)
            operator(()string<modifier(r)delimiter(')content(#[bB][+-]?[01]+(/[01]+\)?)delimiter(')>operator(,) ident(Number)operator(\))operator(,)

            comment(# octal rational)
            operator(()string<modifier(r)delimiter(')content(#[oO][+-]?[0-7]+(/[0-7]+\)?)delimiter(')>operator(,) ident(Number)operator(.)ident(Oct)operator(\))operator(,)

            comment(# hex rational)
            operator(()string<modifier(r)delimiter(')content(#[xX][+-]?[0-9a-fA-F]+(/[0-9a-fA-F]+\)?)delimiter(')>operator(,) ident(Number)operator(.)ident(Hex)operator(\))operator(,)

            comment(# radix rational)
            operator(()string<modifier(r)delimiter(')content(#)content(\\d)content(+[rR][+-]?[0-9a-zA-Z]+(/[0-9a-zA-Z]+\)?)delimiter(')>operator(,) ident(Number)operator(\))operator(,)

            comment(# complex)
            operator(()string<modifier(r)delimiter(')content((#[cC]\)()content(\\()content(\))delimiter(')>operator(,) ident(bygroups)operator(()ident(Number)operator(,) ident(Punctuation)operator(\))operator(,) string<delimiter(')content(body)delimiter(')>operator(\))operator(,)

            comment(# array)
            operator(()string<modifier(r)delimiter(')content((#)content(\\d)content(+[aA]\)()content(\\()content(\))delimiter(')>operator(,) ident(bygroups)operator(()ident(Literal)operator(.)ident(Other)operator(,) ident(Punctuation)operator(\))operator(,) string<delimiter(')content(body)delimiter(')>operator(\))operator(,)

            comment(# structure)
            operator(()string<modifier(r)delimiter(')content((#[sS]\)()content(\\()content(\))delimiter(')>operator(,) ident(bygroups)operator(()ident(Literal)operator(.)ident(Other)operator(,) ident(Punctuation)operator(\))operator(,) string<delimiter(')content(body)delimiter(')>operator(\))operator(,)

            comment(# path)
            operator(()string<modifier(r)delimiter(')content(#[pP]?"()content(\\\\)content(.|[^"]\)*")delimiter(')>operator(,) ident(Literal)operator(.)ident(Other)operator(\))operator(,)

            comment(# reference)
            operator(()string<modifier(r)delimiter(')content(#)content(\\d)content(+=)delimiter(')>operator(,) ident(Operator)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(#)content(\\d)content(+#)delimiter(')>operator(,) ident(Operator)operator(\))operator(,)

            comment(# read-time comment)
            operator(()string<modifier(r)delimiter(')content(#+nil)delimiter(')> operator(+) ident(terminated) operator(+) string<delimiter(')content(\\s)content(*)content(\\()delimiter(')>operator(,) ident(Comment)operator(.)ident(Preproc)operator(,) string<delimiter(')content(commented-form)delimiter(')>operator(\))operator(,)

            comment(# read-time conditional)
            operator(()string<modifier(r)delimiter(')content(#[+-])delimiter(')>operator(,) ident(Operator)operator(\))operator(,)

            comment(# special operators that should have been parsed already)
            operator(()string<modifier(r)delimiter(')content((,@|,|)content(\\.)content(\))delimiter(')>operator(,) ident(Operator)operator(\))operator(,)

            comment(# special constants)
            operator(()string<modifier(r)delimiter(')content((t|nil\))delimiter(')> operator(+) ident(terminated)operator(,) ident(Name)operator(.)ident(Constant)operator(\))operator(,)

            comment(# functions and variables)
            operator(()string<modifier(r)delimiter(')content(\\*)delimiter(')> operator(+) ident(symbol) operator(+) string<delimiter(')content(\\*)delimiter(')>operator(,) ident(Name)operator(.)ident(Variable)operator(.)ident(Global)operator(\))operator(,)
            operator(()ident(symbol)operator(,) ident(Name)operator(.)ident(Variable)operator(\))operator(,)

            comment(# parentheses)
            operator(()string<modifier(r)delimiter(')content(\\()delimiter(')>operator(,) ident(Punctuation)operator(,) string<delimiter(')content(body)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\\))delimiter(')>operator(,) ident(Punctuation)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
    operator(})


keyword(class) class(HaskellLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    A Haskell lexer based on the lexemes defined in the Haskell 98 Report.)content(
)content(
)content(    *New in Pygments 0.8.*)content(
)content(    )delimiter(""")>
    ident(name) operator(=) string<delimiter(')content(Haskell)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(haskell)delimiter(')>operator(,) string<delimiter(')content(hs)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.hs)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(text/x-haskell)delimiter(')>operator(])

    ident(reserved) operator(=) operator([)string<delimiter(')content(case)delimiter(')>operator(,)string<delimiter(')content(class)delimiter(')>operator(,)string<delimiter(')content(data)delimiter(')>operator(,)string<delimiter(')content(default)delimiter(')>operator(,)string<delimiter(')content(deriving)delimiter(')>operator(,)string<delimiter(')content(do)delimiter(')>operator(,)string<delimiter(')content(else)delimiter(')>operator(,)
                string<delimiter(')content(if)delimiter(')>operator(,)string<delimiter(')content(in)delimiter(')>operator(,)string<delimiter(')content(infix[lr]?)delimiter(')>operator(,)string<delimiter(')content(instance)delimiter(')>operator(,)
                string<delimiter(')content(let)delimiter(')>operator(,)string<delimiter(')content(newtype)delimiter(')>operator(,)string<delimiter(')content(of)delimiter(')>operator(,)string<delimiter(')content(then)delimiter(')>operator(,)string<delimiter(')content(type)delimiter(')>operator(,)string<delimiter(')content(where)delimiter(')>operator(,)string<delimiter(')content(_)delimiter(')>operator(])
    ident(ascii) operator(=) operator([)string<delimiter(')content(NUL)delimiter(')>operator(,)string<delimiter(')content(SOH)delimiter(')>operator(,)string<delimiter(')content([SE]TX)delimiter(')>operator(,)string<delimiter(')content(EOT)delimiter(')>operator(,)string<delimiter(')content(ENQ)delimiter(')>operator(,)string<delimiter(')content(ACK)delimiter(')>operator(,)
             string<delimiter(')content(BEL)delimiter(')>operator(,)string<delimiter(')content(BS)delimiter(')>operator(,)string<delimiter(')content(HT)delimiter(')>operator(,)string<delimiter(')content(LF)delimiter(')>operator(,)string<delimiter(')content(VT)delimiter(')>operator(,)string<delimiter(')content(FF)delimiter(')>operator(,)string<delimiter(')content(CR)delimiter(')>operator(,)string<delimiter(')content(S[OI])delimiter(')>operator(,)string<delimiter(')content(DLE)delimiter(')>operator(,)
             string<delimiter(')content(DC[1-4])delimiter(')>operator(,)string<delimiter(')content(NAK)delimiter(')>operator(,)string<delimiter(')content(SYN)delimiter(')>operator(,)string<delimiter(')content(ETB)delimiter(')>operator(,)string<delimiter(')content(CAN)delimiter(')>operator(,)
             string<delimiter(')content(EM)delimiter(')>operator(,)string<delimiter(')content(SUB)delimiter(')>operator(,)string<delimiter(')content(ESC)delimiter(')>operator(,)string<delimiter(')content([FGRU]S)delimiter(')>operator(,)string<delimiter(')content(SP)delimiter(')>operator(,)string<delimiter(')content(DEL)delimiter(')>operator(])

    ident(tokens) operator(=) operator({)
        string<delimiter(')content(root)delimiter(')>operator(:) operator([)
            comment(# Whitespace:)
            operator(()string<modifier(r)delimiter(')content(\\s)content(+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            comment(#(r'--\\s*|.*$', Comment.Doc\),)
            operator(()string<modifier(r)delimiter(')content(--.*$)delimiter(')>operator(,) ident(Comment)operator(.)ident(Single)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content({-)delimiter(')>operator(,) ident(Comment)operator(.)ident(Multiline)operator(,) string<delimiter(')content(comment)delimiter(')>operator(\))operator(,)
            comment(# Lexemes:)
            comment(#  Identifiers)
            operator(()string<modifier(r)delimiter(')content(\\b)content(import)content(\\b)delimiter(')>operator(,) ident(Keyword)operator(.)ident(Reserved)operator(,) string<delimiter(')content(import)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\b)content(module)content(\\b)delimiter(')>operator(,) ident(Keyword)operator(.)ident(Reserved)operator(,) string<delimiter(')content(module)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\b)content(error)content(\\b)delimiter(')>operator(,) ident(Name)operator(.)ident(Exception)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\b)content((%s\)(?!)content(\\')content(\))content(\\b)delimiter(')> operator(%) string<delimiter(')content(|)delimiter(')>operator(.)ident(join)operator(()ident(reserved)operator(\))operator(,) ident(Keyword)operator(.)ident(Reserved)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(^[_a-z][)content(\\w)content(\\')content(]*)delimiter(')>operator(,) ident(Name)operator(.)ident(Function)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([_a-z][)content(\\w)content(\\')content(]*)delimiter(')>operator(,) ident(Name)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([A-Z][)content(\\w)content(\\')content(]*)delimiter(')>operator(,) ident(Keyword)operator(.)ident(Type)operator(\))operator(,)
            comment(#  Operators)
            operator(()string<modifier(r)delimiter(')content(\\\\)content((?![:!#$%&*+.)content(\\\\)content(/<=>?@^|~-]+\))delimiter(')>operator(,) ident(Name)operator(.)ident(Function)operator(\))operator(,) comment(# lambda operator)
            operator(()string<modifier(r)delimiter(')content((<-|::|->|=>|=\)(?![:!#$%&*+.)content(\\\\)content(/<=>?@^|~-]+\))delimiter(')>operator(,) ident(Operator)operator(.)ident(Word)operator(\))operator(,) comment(# specials)
            operator(()string<modifier(r)delimiter(')content(:[:!#$%&*+.)content(\\\\)content(/<=>?@^|~-]*)delimiter(')>operator(,) ident(Keyword)operator(.)ident(Type)operator(\))operator(,) comment(# Constructor operators)
            operator(()string<modifier(r)delimiter(')content([:!#$%&*+.)content(\\\\)content(/<=>?@^|~-]+)delimiter(')>operator(,) ident(Operator)operator(\))operator(,) comment(# Other operators)
            comment(#  Numbers)
            operator(()string<modifier(r)delimiter(')content(\\d)content(+[eE][+-]?)content(\\d)content(+)delimiter(')>operator(,) ident(Number)operator(.)ident(Float)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\d)content(+)content(\\.)content(\\d)content(+([eE][+-]?)content(\\d)content(+\)?)delimiter(')>operator(,) ident(Number)operator(.)ident(Float)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(0[oO][0-7]+)delimiter(')>operator(,) ident(Number)operator(.)ident(Oct)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(0[xX][)content(\\d)content(a-fA-F]+)delimiter(')>operator(,) ident(Number)operator(.)ident(Hex)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\d)content(+)delimiter(')>operator(,) ident(Number)operator(.)ident(Integer)operator(\))operator(,)
            comment(#  Character/String Literals)
            operator(()string<modifier(r)delimiter(")content(')delimiter(")>operator(,) ident(String)operator(.)ident(Char)operator(,) string<delimiter(')content(character)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(")delimiter(')>operator(,) ident(String)operator(,) string<delimiter(')content(string)delimiter(')>operator(\))operator(,)
            comment(#  Special)
            operator(()string<modifier(r)delimiter(')content(\\[)content(\\])delimiter(')>operator(,) ident(Keyword)operator(.)ident(Type)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\()content(\\\))delimiter(')>operator(,) ident(Name)operator(.)ident(Builtin)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([][(\),;`{}])delimiter(')>operator(,) ident(Punctuation)operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(import)delimiter(')>operator(:) operator([)
            comment(# Import statements)
            operator(()string<modifier(r)delimiter(')content(\\s)content(+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            comment(# after "funclist" state)
            operator(()string<modifier(r)delimiter(')content(\\\))delimiter(')>operator(,) ident(Punctuation)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(qualified)content(\\b)delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
            comment(# import X as Y)
            operator(()string<modifier(r)delimiter(')content(([A-Z][a-zA-Z0-9_.]*\)()content(\\s)content(+\)(as\)()content(\\s)content(+\)([A-Z][a-zA-Z0-9_.]*\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Name)operator(.)ident(Namespace)operator(,) ident(Text)operator(,) ident(Keyword)operator(,) ident(Text)operator(,) ident(Name)operator(\))operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            comment(# import X hiding (functions\))
            operator(()string<modifier(r)delimiter(')content(([A-Z][a-zA-Z0-9_.]*\)()content(\\s)content(+\)(hiding\)()content(\\s)content(+\)()content(\\()content(\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Name)operator(.)ident(Namespace)operator(,) ident(Text)operator(,) ident(Keyword)operator(,) ident(Text)operator(,) ident(Punctuation)operator(\))operator(,) string<delimiter(')content(funclist)delimiter(')>operator(\))operator(,)
            comment(# import X (functions\))
            operator(()string<modifier(r)delimiter(')content(([A-Z][a-zA-Z0-9_.]*\)()content(\\s)content(+\)()content(\\()content(\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Name)operator(.)ident(Namespace)operator(,) ident(Text)operator(,) ident(Punctuation)operator(\))operator(,) string<delimiter(')content(funclist)delimiter(')>operator(\))operator(,)
            comment(# import X)
            operator(()string<modifier(r)delimiter(')content([a-zA-Z0-9_.]+)delimiter(')>operator(,) ident(Name)operator(.)ident(Namespace)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(module)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\s)content(+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(([A-Z][a-zA-Z0-9_.]*\)()content(\\s)content(+\)()content(\\()content(\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Name)operator(.)ident(Namespace)operator(,) ident(Text)operator(,) ident(Punctuation)operator(\))operator(,) string<delimiter(')content(funclist)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([A-Z][a-zA-Z0-9_.]*)delimiter(')>operator(,) ident(Name)operator(.)ident(Namespace)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(funclist)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\s)content(+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([A-Z][a-zA-Z0-9_]*)delimiter(')>operator(,) ident(Keyword)operator(.)ident(Type)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([_a-z][)content(\\w)content(\\')content(]+)delimiter(')>operator(,) ident(Name)operator(.)ident(Function)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(--.*$)delimiter(')>operator(,) ident(Comment)operator(.)ident(Single)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content({-)delimiter(')>operator(,) ident(Comment)operator(.)ident(Multiline)operator(,) string<delimiter(')content(comment)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(,)delimiter(')>operator(,) ident(Punctuation)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([:!#$%&*+.)content(\\\\)content(/<=>?@^|~-]+)delimiter(')>operator(,) ident(Operator)operator(\))operator(,)
            comment(# (HACK, but it makes sense to push two instances, believe me\))
            operator(()string<modifier(r)delimiter(')content(\\()delimiter(')>operator(,) ident(Punctuation)operator(,) operator(()string<delimiter(')content(funclist)delimiter(')>operator(,) string<delimiter(')content(funclist)delimiter(')>operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\\))delimiter(')>operator(,) ident(Punctuation)operator(,) string<delimiter(')content(#pop:2)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(comment)delimiter(')>operator(:) operator([)
            comment(# Multiline Comments)
            operator(()string<modifier(r)delimiter(')content([^-{}]+)delimiter(')>operator(,) ident(Comment)operator(.)ident(Multiline)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content({-)delimiter(')>operator(,) ident(Comment)operator(.)ident(Multiline)operator(,) string<delimiter(')content(#push)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(-})delimiter(')>operator(,) ident(Comment)operator(.)ident(Multiline)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([-{}])delimiter(')>operator(,) ident(Comment)operator(.)ident(Multiline)operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(character)delimiter(')>operator(:) operator([)
            comment(# Allows multi-chars, incorrectly.)
            operator(()string<modifier(r)delimiter(")content([^)content(\\\\)content('])delimiter(")>operator(,) ident(String)operator(.)ident(Char)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(")content(\\\\)delimiter(")>operator(,) ident(String)operator(.)ident(Escape)operator(,) string<delimiter(')content(escape)delimiter(')>operator(\))operator(,)
            operator(()string<delimiter(")content(')delimiter(")>operator(,) ident(String)operator(.)ident(Char)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(string)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content([^)content(\\\\)content("]+)delimiter(')>operator(,) ident(String)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(")content(\\\\)delimiter(")>operator(,) ident(String)operator(.)ident(Escape)operator(,) string<delimiter(')content(escape)delimiter(')>operator(\))operator(,)
            operator(()string<delimiter(')content(")delimiter(')>operator(,) ident(String)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(escape)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content([abfnrtv")content(\\')content(&)content(\\\\)content(])delimiter(')>operator(,) ident(String)operator(.)ident(Escape)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\^)content([][A-Z@)content(\\^)content(_])delimiter(')>operator(,) ident(String)operator(.)ident(Escape)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<delimiter(')content(|)delimiter(')>operator(.)ident(join)operator(()ident(ascii)operator(\))operator(,) ident(String)operator(.)ident(Escape)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(o[0-7]+)delimiter(')>operator(,) ident(String)operator(.)ident(Escape)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(x[)content(\\d)content(a-fA-F]+)delimiter(')>operator(,) ident(String)operator(.)ident(Escape)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\d)content(+)delimiter(')>operator(,) ident(String)operator(.)ident(Escape)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\n)content(\\s)content(+)content(\\\\)delimiter(')>operator(,) ident(String)operator(.)ident(Escape)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
    operator(})


ident(line_re) operator(=) ident(re)operator(.)ident(compile)operator(()string<delimiter(')content(.*?)char(\\n)delimiter(')>operator(\))
ident(bird_re) operator(=) ident(re)operator(.)ident(compile)operator(()string<modifier(r)delimiter(')content((>[ )content(\\t)content(]*\)(.*)content(\\n)content(\))delimiter(')>operator(\))

keyword(class) class(LiterateHaskellLexer)operator(()ident(Lexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    For Literate Haskell (Bird-style or LaTeX\) source.)content(
)content(
)content(    Additional options accepted:)content(
)content(
)content(    `litstyle`)content(
)content(        If given, must be ``"bird"`` or ``"latex"``.  If not given, the style)content(
)content(        is autodetected: if the first non-whitespace character in the source)content(
)content(        is a backslash or percent character, LaTeX is assumed, else Bird.)content(
)content(
)content(    *New in Pygments 0.9.*)content(
)content(    )delimiter(""")>
    ident(name) operator(=) string<delimiter(')content(Literate Haskell)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(lhs)delimiter(')>operator(,) string<delimiter(')content(literate-haskell)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.lhs)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(text/x-literate-haskell)delimiter(')>operator(])

    keyword(def) method(get_tokens_unprocessed)operator(()predefined_constant(self)operator(,) ident(text)operator(\))operator(:)
        ident(hslexer) operator(=) ident(HaskellLexer)operator(()operator(**)predefined_constant(self)operator(.)ident(options)operator(\))

        ident(style) operator(=) predefined_constant(self)operator(.)ident(options)operator(.)ident(get)operator(()string<delimiter(')content(litstyle)delimiter(')>operator(\))
        keyword(if) ident(style) keyword(is) predefined_constant(None)operator(:)
            ident(style) operator(=) operator(()ident(text)operator(.)ident(lstrip)operator(()operator(\))operator([)integer(0)operator(]) keyword(in) string<delimiter(')content(%)char(\\\\)delimiter(')>operator(\)) keyword(and) string<delimiter(')content(latex)delimiter(')> keyword(or) string<delimiter(')content(bird)delimiter(')>

        ident(code) operator(=) string<delimiter(')delimiter(')>
        ident(insertions) operator(=) operator([)operator(])
        keyword(if) ident(style) operator(==) string<delimiter(')content(bird)delimiter(')>operator(:)
            comment(# bird-style)
            keyword(for) ident(match) keyword(in) ident(line_re)operator(.)ident(finditer)operator(()ident(text)operator(\))operator(:)
                ident(line) operator(=) ident(match)operator(.)ident(group)operator(()operator(\))
                ident(m) operator(=) ident(bird_re)operator(.)ident(match)operator(()ident(line)operator(\))
                keyword(if) ident(m)operator(:)
                    ident(insertions)operator(.)ident(append)operator(()operator(()predefined(len)operator(()ident(code)operator(\))operator(,) operator([)operator(()integer(0)operator(,) ident(Comment)operator(.)ident(Special)operator(,) ident(m)operator(.)ident(group)operator(()integer(1)operator(\))operator(\))operator(])operator(\))operator(\))
                    ident(code) operator(+=) ident(m)operator(.)ident(group)operator(()integer(2)operator(\))
                keyword(else)operator(:)
                    ident(insertions)operator(.)ident(append)operator(()operator(()predefined(len)operator(()ident(code)operator(\))operator(,) operator([)operator(()integer(0)operator(,) ident(Text)operator(,) ident(line)operator(\))operator(])operator(\))operator(\))
        keyword(else)operator(:)
            comment(# latex-style)
            keyword(from) include(pygments.lexers.text) keyword(import) include(TexLexer)
            ident(lxlexer) operator(=) ident(TexLexer)operator(()operator(**)predefined_constant(self)operator(.)ident(options)operator(\))

            ident(codelines) operator(=) integer(0)
            ident(latex) operator(=) string<delimiter(')delimiter(')>
            keyword(for) ident(match) keyword(in) ident(line_re)operator(.)ident(finditer)operator(()ident(text)operator(\))operator(:)
                ident(line) operator(=) ident(match)operator(.)ident(group)operator(()operator(\))
                keyword(if) ident(codelines)operator(:)
                    keyword(if) ident(line)operator(.)ident(lstrip)operator(()operator(\))operator(.)ident(startswith)operator(()string<delimiter(')char(\\\\)content(end{code})delimiter(')>operator(\))operator(:)
                        ident(codelines) operator(=) integer(0)
                        ident(latex) operator(+=) ident(line)
                    keyword(else)operator(:)
                        ident(code) operator(+=) ident(line)
                keyword(elif) ident(line)operator(.)ident(lstrip)operator(()operator(\))operator(.)ident(startswith)operator(()string<delimiter(')char(\\\\)content(begin{code})delimiter(')>operator(\))operator(:)
                    ident(codelines) operator(=) integer(1)
                    ident(latex) operator(+=) ident(line)
                    ident(insertions)operator(.)ident(append)operator(()operator(()predefined(len)operator(()ident(code)operator(\))operator(,)
                                       predefined(list)operator(()ident(lxlexer)operator(.)ident(get_tokens_unprocessed)operator(()ident(latex)operator(\))operator(\))operator(\))operator(\))
                    ident(latex) operator(=) string<delimiter(')delimiter(')>
                keyword(else)operator(:)
                    ident(latex) operator(+=) ident(line)
            ident(insertions)operator(.)ident(append)operator(()operator(()predefined(len)operator(()ident(code)operator(\))operator(,)
                               predefined(list)operator(()ident(lxlexer)operator(.)ident(get_tokens_unprocessed)operator(()ident(latex)operator(\))operator(\))operator(\))operator(\))
        keyword(for) ident(item) keyword(in) ident(do_insertions)operator(()ident(insertions)operator(,) ident(hslexer)operator(.)ident(get_tokens_unprocessed)operator(()ident(code)operator(\))operator(\))operator(:)
            keyword(yield) ident(item)


keyword(class) class(OcamlLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    For the OCaml language.)content(
)content(
)content(    *New in Pygments 0.7.*)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(OCaml)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(ocaml)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.ml)delimiter(')>operator(,) string<delimiter(')content(*.mli)delimiter(')>operator(,) string<delimiter(')content(*.mll)delimiter(')>operator(,) string<delimiter(')content(*.mly)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(text/x-ocaml)delimiter(')>operator(])

    ident(keywords) operator(=) operator([)
      string<delimiter(')content(as)delimiter(')>operator(,) string<delimiter(')content(assert)delimiter(')>operator(,) string<delimiter(')content(begin)delimiter(')>operator(,) string<delimiter(')content(class)delimiter(')>operator(,) string<delimiter(')content(constraint)delimiter(')>operator(,) string<delimiter(')content(do)delimiter(')>operator(,) string<delimiter(')content(done)delimiter(')>operator(,)
      string<delimiter(')content(downto)delimiter(')>operator(,) string<delimiter(')content(else)delimiter(')>operator(,) string<delimiter(')content(end)delimiter(')>operator(,) string<delimiter(')content(exception)delimiter(')>operator(,) string<delimiter(')content(external)delimiter(')>operator(,) string<delimiter(')content(false)delimiter(')>operator(,)
      string<delimiter(')content(for)delimiter(')>operator(,) string<delimiter(')content(fun)delimiter(')>operator(,) string<delimiter(')content(function)delimiter(')>operator(,) string<delimiter(')content(functor)delimiter(')>operator(,) string<delimiter(')content(if)delimiter(')>operator(,) string<delimiter(')content(in)delimiter(')>operator(,) string<delimiter(')content(include)delimiter(')>operator(,)
      string<delimiter(')content(inherit)delimiter(')>operator(,) string<delimiter(')content(initializer)delimiter(')>operator(,) string<delimiter(')content(lazy)delimiter(')>operator(,) string<delimiter(')content(let)delimiter(')>operator(,) string<delimiter(')content(match)delimiter(')>operator(,) string<delimiter(')content(method)delimiter(')>operator(,)
      string<delimiter(')content(module)delimiter(')>operator(,) string<delimiter(')content(mutable)delimiter(')>operator(,) string<delimiter(')content(new)delimiter(')>operator(,) string<delimiter(')content(object)delimiter(')>operator(,) string<delimiter(')content(of)delimiter(')>operator(,) string<delimiter(')content(open)delimiter(')>operator(,) string<delimiter(')content(private)delimiter(')>operator(,)
      string<delimiter(')content(raise)delimiter(')>operator(,) string<delimiter(')content(rec)delimiter(')>operator(,) string<delimiter(')content(sig)delimiter(')>operator(,) string<delimiter(')content(struct)delimiter(')>operator(,) string<delimiter(')content(then)delimiter(')>operator(,) string<delimiter(')content(to)delimiter(')>operator(,) string<delimiter(')content(true)delimiter(')>operator(,) string<delimiter(')content(try)delimiter(')>operator(,)
      string<delimiter(')content(type)delimiter(')>operator(,) string<delimiter(')content(val)delimiter(')>operator(,) string<delimiter(')content(virtual)delimiter(')>operator(,) string<delimiter(')content(when)delimiter(')>operator(,) string<delimiter(')content(while)delimiter(')>operator(,) string<delimiter(')content(with)delimiter(')>
    operator(])
    ident(keyopts) operator(=) operator([)
      string<delimiter(')content(!=)delimiter(')>operator(,)string<delimiter(')content(#)delimiter(')>operator(,)string<delimiter(')content(&)delimiter(')>operator(,)string<delimiter(')content(&&)delimiter(')>operator(,)string<delimiter(')content(\\()delimiter(')>operator(,)string<delimiter(')content(\\\))delimiter(')>operator(,)string<delimiter(')content(\\*)delimiter(')>operator(,)string<delimiter(')content(\\+)delimiter(')>operator(,)string<delimiter(')content(,)delimiter(')>operator(,)string<delimiter(')content(-)delimiter(')>operator(,)
      string<delimiter(')content(-)content(\\.)delimiter(')>operator(,)string<delimiter(')content(->)delimiter(')>operator(,)string<delimiter(')content(\\.)delimiter(')>operator(,)string<delimiter(')content(\\.)content(\\.)delimiter(')>operator(,)string<delimiter(')content(:)delimiter(')>operator(,)string<delimiter(')content(::)delimiter(')>operator(,)string<delimiter(')content(:=)delimiter(')>operator(,)string<delimiter(')content(:>)delimiter(')>operator(,)string<delimiter(')content(;)delimiter(')>operator(,)string<delimiter(')content(;;)delimiter(')>operator(,)string<delimiter(')content(<)delimiter(')>operator(,)
      string<delimiter(')content(<-)delimiter(')>operator(,)string<delimiter(')content(=)delimiter(')>operator(,)string<delimiter(')content(>)delimiter(')>operator(,)string<delimiter(')content(>])delimiter(')>operator(,)string<delimiter(')content(>})delimiter(')>operator(,)string<delimiter(')content(\\?)delimiter(')>operator(,)string<delimiter(')content(\\?)content(\\?)delimiter(')>operator(,)string<delimiter(')content(\\[)delimiter(')>operator(,)string<delimiter(')content(\\[)content(<)delimiter(')>operator(,)string<delimiter(')content(\\[)content(>)delimiter(')>operator(,)string<delimiter(')content(\\[)content(\\|)delimiter(')>operator(,)
      string<delimiter(')content(])delimiter(')>operator(,)string<delimiter(')content(_)delimiter(')>operator(,)string<delimiter(')content(`)delimiter(')>operator(,)string<delimiter(')content({)delimiter(')>operator(,)string<delimiter(')content({<)delimiter(')>operator(,)string<delimiter(')content(\\|)delimiter(')>operator(,)string<delimiter(')content(\\|)content(])delimiter(')>operator(,)string<delimiter(')content(})delimiter(')>operator(,)string<delimiter(')content(~)delimiter(')>
    operator(])

    ident(operators) operator(=) string<modifier(r)delimiter(')content([!$%&*+)content(\\.)content(/:<=>?@^|~-])delimiter(')>
    ident(word_operators) operator(=) operator([)string<delimiter(')content(and)delimiter(')>operator(,) string<delimiter(')content(asr)delimiter(')>operator(,) string<delimiter(')content(land)delimiter(')>operator(,) string<delimiter(')content(lor)delimiter(')>operator(,) string<delimiter(')content(lsl)delimiter(')>operator(,) string<delimiter(')content(lxor)delimiter(')>operator(,) string<delimiter(')content(mod)delimiter(')>operator(,) string<delimiter(')content(or)delimiter(')>operator(])
    ident(prefix_syms) operator(=) string<modifier(r)delimiter(')content([!?~])delimiter(')>
    ident(infix_syms) operator(=) string<modifier(r)delimiter(')content([=<>@^|&+)content(\\*)content(/$%-])delimiter(')>
    ident(primitives) operator(=) operator([)string<delimiter(')content(unit)delimiter(')>operator(,) string<delimiter(')content(int)delimiter(')>operator(,) string<delimiter(')content(float)delimiter(')>operator(,) string<delimiter(')content(bool)delimiter(')>operator(,) string<delimiter(')content(string)delimiter(')>operator(,) string<delimiter(')content(char)delimiter(')>operator(,) string<delimiter(')content(list)delimiter(')>operator(,) string<delimiter(')content(array)delimiter(')>operator(])

    ident(tokens) operator(=) operator({)
        string<delimiter(')content(escape-sequence)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\\\)content([)content(\\")content(\\')content(ntbr])delimiter(')>operator(,) ident(String)operator(.)ident(Escape)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\\\)content([0-9]{3})delimiter(')>operator(,) ident(String)operator(.)ident(Escape)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\\\)content(x[0-9a-fA-F]{2})delimiter(')>operator(,) ident(String)operator(.)ident(Escape)operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(root)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\s)content(+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(false|true|)content(\\()content(\\\))content(|)content(\\[)content(\\])delimiter(')>operator(,) ident(Name)operator(.)ident(Builtin)operator(.)ident(Pseudo)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\b)content(([A-Z][A-Za-z0-9_)content(\\')content(]*\)(?=)content(\\s)content(*)content(\\.)content(\))delimiter(')>operator(,)
             ident(Name)operator(.)ident(Namespace)operator(,) string<delimiter(')content(dotted)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\b)content(([A-Z][A-Za-z0-9_)content(\\')content(]*\))delimiter(')>operator(,) ident(Name)operator(.)ident(Class)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\()content(\\*)delimiter(')>operator(,) ident(Comment)operator(,) string<delimiter(')content(comment)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\b)content((%s\))content(\\b)delimiter(')> operator(%) string<delimiter(')content(|)delimiter(')>operator(.)ident(join)operator(()ident(keywords)operator(\))operator(,) ident(Keyword)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((%s\))delimiter(')> operator(%) string<delimiter(')content(|)delimiter(')>operator(.)ident(join)operator(()ident(keyopts)operator(\))operator(,) ident(Operator)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((%s|%s\)?%s)delimiter(')> operator(%) operator(()ident(infix_syms)operator(,) ident(prefix_syms)operator(,) ident(operators)operator(\))operator(,) ident(Operator)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\b)content((%s\))content(\\b)delimiter(')> operator(%) string<delimiter(')content(|)delimiter(')>operator(.)ident(join)operator(()ident(word_operators)operator(\))operator(,) ident(Operator)operator(.)ident(Word)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\b)content((%s\))content(\\b)delimiter(')> operator(%) string<delimiter(')content(|)delimiter(')>operator(.)ident(join)operator(()ident(primitives)operator(\))operator(,) ident(Keyword)operator(.)ident(Type)operator(\))operator(,)

            operator(()string<modifier(r)delimiter(")content([^)content(\\W)content(\\d)content(][)content(\\w)content(']*)delimiter(")>operator(,) ident(Name)operator(\))operator(,)

            operator(()string<modifier(r)delimiter(')content(\\d)content([)content(\\d)content(_]*)delimiter(')>operator(,) ident(Number)operator(.)ident(Integer)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(0[xX][)content(\\d)content(a-fA-F][)content(\\d)content(a-fA-F_]*)delimiter(')>operator(,) ident(Number)operator(.)ident(Hex)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(0[oO][0-7][0-7_]*)delimiter(')>operator(,) ident(Number)operator(.)ident(Oct)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(0[bB][01][01_]*)delimiter(')>operator(,) ident(Number)operator(.)ident(Binary)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(-?)content(\\d)content([)content(\\d)content(_]*(.[)content(\\d)content(_]*\)?([eE][+)content(\\-)content(]?)content(\\d)content([)content(\\d)content(_]*\))delimiter(')>operator(,) ident(Number)operator(.)ident(Float)operator(\))operator(,)

            operator(()string<modifier(r)delimiter(")content('(?:()content(\\\\)content([)content(\\\\)content(\\")content('ntbr ]\)|()content(\\\\)content([0-9]{3}\)|()content(\\\\)content(x[0-9a-fA-F]{2}\)\)')delimiter(")>operator(,)
             ident(String)operator(.)ident(Char)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(")content('.')delimiter(")>operator(,) ident(String)operator(.)ident(Char)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(")content(')delimiter(")>operator(,) ident(Keyword)operator(\))operator(,) comment(# a stray quote is another syntax element)

            operator(()string<modifier(r)delimiter(')content(")delimiter(')>operator(,) ident(String)operator(.)ident(Double)operator(,) string<delimiter(')content(string)delimiter(')>operator(\))operator(,)

            operator(()string<modifier(r)delimiter(')content([~?][a-z][)content(\\w)content(\\')content(]*:)delimiter(')>operator(,) ident(Name)operator(.)ident(Variable)operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(comment)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content([^(*\)]+)delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\()content(\\*)delimiter(')>operator(,) ident(Comment)operator(,) string<delimiter(')content(#push)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\*)content(\\\))delimiter(')>operator(,) ident(Comment)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([(*\)])delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(string)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content([^)content(\\\\)content("]+)delimiter(')>operator(,) ident(String)operator(.)ident(Double)operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(escape-sequence)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\\\)content(\\n)delimiter(')>operator(,) ident(String)operator(.)ident(Double)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(")delimiter(')>operator(,) ident(String)operator(.)ident(Double)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(dotted)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\s)content(+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\.)delimiter(')>operator(,) ident(Punctuation)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([A-Z][A-Za-z0-9_)content(\\')content(]*(?=)content(\\s)content(*)content(\\.)content(\))delimiter(')>operator(,) ident(Name)operator(.)ident(Namespace)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([A-Z][A-Za-z0-9_)content(\\')content(]*)delimiter(')>operator(,) ident(Name)operator(.)ident(Class)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([a-z][a-z0-9_)content(\\')content(]*)delimiter(')>operator(,) ident(Name)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
    operator(})


keyword(class) class(ErlangLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    For the Erlang functional programming language.)content(
)content(
)content(    Blame Jeremy Thurgood (http://jerith.za.net/\).)content(
)content(
)content(    *New in Pygments 0.9.*)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(Erlang)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(erlang)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.erl)delimiter(')>operator(,) string<delimiter(')content(*.hrl)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(text/x-erlang)delimiter(')>operator(])

    ident(keywords) operator(=) operator([)
        string<delimiter(')content(after)delimiter(')>operator(,) string<delimiter(')content(begin)delimiter(')>operator(,) string<delimiter(')content(case)delimiter(')>operator(,) string<delimiter(')content(catch)delimiter(')>operator(,) string<delimiter(')content(cond)delimiter(')>operator(,) string<delimiter(')content(end)delimiter(')>operator(,) string<delimiter(')content(fun)delimiter(')>operator(,) string<delimiter(')content(if)delimiter(')>operator(,)
        string<delimiter(')content(let)delimiter(')>operator(,) string<delimiter(')content(of)delimiter(')>operator(,) string<delimiter(')content(query)delimiter(')>operator(,) string<delimiter(')content(receive)delimiter(')>operator(,) string<delimiter(')content(try)delimiter(')>operator(,) string<delimiter(')content(when)delimiter(')>operator(,)
        operator(])

    ident(builtins) operator(=) operator([) comment(# See erlang(3\) man page)
        string<delimiter(')content(abs)delimiter(')>operator(,) string<delimiter(')content(append_element)delimiter(')>operator(,) string<delimiter(')content(apply)delimiter(')>operator(,) string<delimiter(')content(atom_to_list)delimiter(')>operator(,) string<delimiter(')content(binary_to_list)delimiter(')>operator(,)
        string<delimiter(')content(bitstring_to_list)delimiter(')>operator(,) string<delimiter(')content(binary_to_term)delimiter(')>operator(,) string<delimiter(')content(bit_size)delimiter(')>operator(,) string<delimiter(')content(bump_reductions)delimiter(')>operator(,)
        string<delimiter(')content(byte_size)delimiter(')>operator(,) string<delimiter(')content(cancel_timer)delimiter(')>operator(,) string<delimiter(')content(check_process_code)delimiter(')>operator(,) string<delimiter(')content(delete_module)delimiter(')>operator(,)
        string<delimiter(')content(demonitor)delimiter(')>operator(,) string<delimiter(')content(disconnect_node)delimiter(')>operator(,) string<delimiter(')content(display)delimiter(')>operator(,) string<delimiter(')content(element)delimiter(')>operator(,) string<delimiter(')content(erase)delimiter(')>operator(,) string<delimiter(')content(exit)delimiter(')>operator(,)
        string<delimiter(')content(float)delimiter(')>operator(,) string<delimiter(')content(float_to_list)delimiter(')>operator(,) string<delimiter(')content(fun_info)delimiter(')>operator(,) string<delimiter(')content(fun_to_list)delimiter(')>operator(,)
        string<delimiter(')content(function_exported)delimiter(')>operator(,) string<delimiter(')content(garbage_collect)delimiter(')>operator(,) string<delimiter(')content(get)delimiter(')>operator(,) string<delimiter(')content(get_keys)delimiter(')>operator(,)
        string<delimiter(')content(group_leader)delimiter(')>operator(,) string<delimiter(')content(hash)delimiter(')>operator(,) string<delimiter(')content(hd)delimiter(')>operator(,) string<delimiter(')content(integer_to_list)delimiter(')>operator(,) string<delimiter(')content(iolist_to_binary)delimiter(')>operator(,)
        string<delimiter(')content(iolist_size)delimiter(')>operator(,) string<delimiter(')content(is_atom)delimiter(')>operator(,) string<delimiter(')content(is_binary)delimiter(')>operator(,) string<delimiter(')content(is_bitstring)delimiter(')>operator(,) string<delimiter(')content(is_boolean)delimiter(')>operator(,)
        string<delimiter(')content(is_builtin)delimiter(')>operator(,) string<delimiter(')content(is_float)delimiter(')>operator(,) string<delimiter(')content(is_function)delimiter(')>operator(,) string<delimiter(')content(is_integer)delimiter(')>operator(,) string<delimiter(')content(is_list)delimiter(')>operator(,)
        string<delimiter(')content(is_number)delimiter(')>operator(,) string<delimiter(')content(is_pid)delimiter(')>operator(,) string<delimiter(')content(is_port)delimiter(')>operator(,) string<delimiter(')content(is_process_alive)delimiter(')>operator(,) string<delimiter(')content(is_record)delimiter(')>operator(,)
        string<delimiter(')content(is_reference)delimiter(')>operator(,) string<delimiter(')content(is_tuple)delimiter(')>operator(,) string<delimiter(')content(length)delimiter(')>operator(,) string<delimiter(')content(link)delimiter(')>operator(,) string<delimiter(')content(list_to_atom)delimiter(')>operator(,)
        string<delimiter(')content(list_to_binary)delimiter(')>operator(,) string<delimiter(')content(list_to_bitstring)delimiter(')>operator(,) string<delimiter(')content(list_to_existing_atom)delimiter(')>operator(,)
        string<delimiter(')content(list_to_float)delimiter(')>operator(,) string<delimiter(')content(list_to_integer)delimiter(')>operator(,) string<delimiter(')content(list_to_pid)delimiter(')>operator(,) string<delimiter(')content(list_to_tuple)delimiter(')>operator(,)
        string<delimiter(')content(load_module)delimiter(')>operator(,) string<delimiter(')content(localtime_to_universaltime)delimiter(')>operator(,) string<delimiter(')content(make_tuple)delimiter(')>operator(,) string<delimiter(')content(md5)delimiter(')>operator(,)
        string<delimiter(')content(md5_final)delimiter(')>operator(,) string<delimiter(')content(md5_update)delimiter(')>operator(,) string<delimiter(')content(memory)delimiter(')>operator(,) string<delimiter(')content(module_loaded)delimiter(')>operator(,) string<delimiter(')content(monitor)delimiter(')>operator(,)
        string<delimiter(')content(monitor_node)delimiter(')>operator(,) string<delimiter(')content(node)delimiter(')>operator(,) string<delimiter(')content(nodes)delimiter(')>operator(,) string<delimiter(')content(open_port)delimiter(')>operator(,) string<delimiter(')content(phash)delimiter(')>operator(,) string<delimiter(')content(phash2)delimiter(')>operator(,)
        string<delimiter(')content(pid_to_list)delimiter(')>operator(,) string<delimiter(')content(port_close)delimiter(')>operator(,) string<delimiter(')content(port_command)delimiter(')>operator(,) string<delimiter(')content(port_connect)delimiter(')>operator(,)
        string<delimiter(')content(port_control)delimiter(')>operator(,) string<delimiter(')content(port_call)delimiter(')>operator(,) string<delimiter(')content(port_info)delimiter(')>operator(,) string<delimiter(')content(port_to_list)delimiter(')>operator(,)
        string<delimiter(')content(process_display)delimiter(')>operator(,) string<delimiter(')content(process_flag)delimiter(')>operator(,) string<delimiter(')content(process_info)delimiter(')>operator(,) string<delimiter(')content(purge_module)delimiter(')>operator(,)
        string<delimiter(')content(put)delimiter(')>operator(,) string<delimiter(')content(read_timer)delimiter(')>operator(,) string<delimiter(')content(ref_to_list)delimiter(')>operator(,) string<delimiter(')content(register)delimiter(')>operator(,) string<delimiter(')content(resume_process)delimiter(')>operator(,)
        string<delimiter(')content(round)delimiter(')>operator(,) string<delimiter(')content(send)delimiter(')>operator(,) string<delimiter(')content(send_after)delimiter(')>operator(,) string<delimiter(')content(send_nosuspend)delimiter(')>operator(,) string<delimiter(')content(set_cookie)delimiter(')>operator(,)
        string<delimiter(')content(setelement)delimiter(')>operator(,) string<delimiter(')content(size)delimiter(')>operator(,) string<delimiter(')content(spawn)delimiter(')>operator(,) string<delimiter(')content(spawn_link)delimiter(')>operator(,) string<delimiter(')content(spawn_monitor)delimiter(')>operator(,)
        string<delimiter(')content(spawn_opt)delimiter(')>operator(,) string<delimiter(')content(split_binary)delimiter(')>operator(,) string<delimiter(')content(start_timer)delimiter(')>operator(,) string<delimiter(')content(statistics)delimiter(')>operator(,)
        string<delimiter(')content(suspend_process)delimiter(')>operator(,) string<delimiter(')content(system_flag)delimiter(')>operator(,) string<delimiter(')content(system_info)delimiter(')>operator(,) string<delimiter(')content(system_monitor)delimiter(')>operator(,)
        string<delimiter(')content(system_profile)delimiter(')>operator(,) string<delimiter(')content(term_to_binary)delimiter(')>operator(,) string<delimiter(')content(tl)delimiter(')>operator(,) string<delimiter(')content(trace)delimiter(')>operator(,) string<delimiter(')content(trace_delivered)delimiter(')>operator(,)
        string<delimiter(')content(trace_info)delimiter(')>operator(,) string<delimiter(')content(trace_pattern)delimiter(')>operator(,) string<delimiter(')content(trunc)delimiter(')>operator(,) string<delimiter(')content(tuple_size)delimiter(')>operator(,) string<delimiter(')content(tuple_to_list)delimiter(')>operator(,)
        string<delimiter(')content(universaltime_to_localtime)delimiter(')>operator(,) string<delimiter(')content(unlink)delimiter(')>operator(,) string<delimiter(')content(unregister)delimiter(')>operator(,) string<delimiter(')content(whereis)delimiter(')>
        operator(])

    ident(operators) operator(=) string<modifier(r)delimiter(')content(()content(\\+)content(|-|)content(\\*)content(|/|<|>|=|==|/=|=:=|=/=|=<|>=|)content(\\+)content(\\+)content(|--|<-|!\))delimiter(')>
    ident(word_operators) operator(=) operator([)
        string<delimiter(')content(and)delimiter(')>operator(,) string<delimiter(')content(andalso)delimiter(')>operator(,) string<delimiter(')content(band)delimiter(')>operator(,) string<delimiter(')content(bnot)delimiter(')>operator(,) string<delimiter(')content(bor)delimiter(')>operator(,) string<delimiter(')content(bsl)delimiter(')>operator(,) string<delimiter(')content(bsr)delimiter(')>operator(,) string<delimiter(')content(bxor)delimiter(')>operator(,)
        string<delimiter(')content(div)delimiter(')>operator(,) string<delimiter(')content(not)delimiter(')>operator(,) string<delimiter(')content(or)delimiter(')>operator(,) string<delimiter(')content(orelse)delimiter(')>operator(,) string<delimiter(')content(rem)delimiter(')>operator(,) string<delimiter(')content(xor)delimiter(')>
        operator(])

    ident(atom_re) operator(=) string<modifier(r)delimiter(")content((?:[a-z][a-zA-Z0-9_]*|'[^)content(\\n)content(']*[^)content(\\\\)content(]'\))delimiter(")>

    ident(variable_re) operator(=) string<modifier(r)delimiter(')content((?:[A-Z_][a-zA-Z0-9_]*\))delimiter(')>

    ident(escape_re) operator(=) string<modifier(r)delimiter(')content((?:)content(\\\\)content((?:[bdefnrstv)content(\\')content(")content(\\\\)content(/]|[0-7][0-7]?[0-7]?|)content(\\^)content([a-zA-Z]\)\))delimiter(')>

    ident(macro_re) operator(=) string<modifier(r)delimiter(')content((?:)delimiter(')>operator(+)ident(variable_re)operator(+)string<modifier(r)delimiter(')content(|)delimiter(')>operator(+)ident(atom_re)operator(+)string<modifier(r)delimiter(')content(\))delimiter(')>

    ident(base_re) operator(=) string<modifier(r)delimiter(')content((?:[2-9]|[12][0-9]|3[0-6]\))delimiter(')>

    ident(tokens) operator(=) operator({)
        string<delimiter(')content(root)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\s)content(+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(%.*)content(\\n)delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
            operator(()string<delimiter(')content(()delimiter(')> operator(+) string<delimiter(')content(|)delimiter(')>operator(.)ident(join)operator(()ident(keywords)operator(\)) operator(+) string<modifier(r)delimiter(')content(\))content(\\b)delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
            operator(()string<delimiter(')content(()delimiter(')> operator(+) string<delimiter(')content(|)delimiter(')>operator(.)ident(join)operator(()ident(builtins)operator(\)) operator(+) string<modifier(r)delimiter(')content(\))content(\\b)delimiter(')>operator(,) ident(Name)operator(.)ident(Builtin)operator(\))operator(,)
            operator(()string<delimiter(')content(()delimiter(')> operator(+) string<delimiter(')content(|)delimiter(')>operator(.)ident(join)operator(()ident(word_operators)operator(\)) operator(+) string<modifier(r)delimiter(')content(\))content(\\b)delimiter(')>operator(,) ident(Operator)operator(.)ident(Word)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(^-)delimiter(')>operator(,) ident(Punctuation)operator(,) string<delimiter(')content(directive)delimiter(')>operator(\))operator(,)
            operator(()ident(operators)operator(,) ident(Operator)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(")delimiter(')>operator(,) ident(String)operator(,) string<delimiter(')content(string)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(<<)delimiter(')>operator(,) ident(Name)operator(.)ident(Label)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(>>)delimiter(')>operator(,) ident(Name)operator(.)ident(Label)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(()delimiter(')>operator(+)ident(atom_re)operator(+)string<delimiter(')content(\)(:\))delimiter(')>operator(,) ident(bygroups)operator(()ident(Name)operator(.)ident(Namespace)operator(,) ident(Punctuation)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(^()delimiter(')>operator(+)ident(atom_re)operator(+)string<modifier(r)delimiter(')content(\)()content(\\s)content(*\)()content(\\()content(\))delimiter(')>operator(,) ident(bygroups)operator(()ident(Name)operator(.)ident(Function)operator(,) ident(Text)operator(,) ident(Punctuation)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([+-]?)delimiter(')>operator(+)ident(base_re)operator(+)string<modifier(r)delimiter(')content(#[0-9a-zA-Z]+)delimiter(')>operator(,) ident(Number)operator(.)ident(Integer)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([+-]?)content(\\d)content(+)delimiter(')>operator(,) ident(Number)operator(.)ident(Integer)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([+-]?)content(\\d)content(+.)content(\\d)content(+)delimiter(')>operator(,) ident(Number)operator(.)ident(Float)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([][:_@)content(\\")content(.{}(\)|;,])delimiter(')>operator(,) ident(Punctuation)operator(\))operator(,)
            operator(()ident(variable_re)operator(,) ident(Name)operator(.)ident(Variable)operator(\))operator(,)
            operator(()ident(atom_re)operator(,) ident(Name)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\?)delimiter(')>operator(+)ident(macro_re)operator(,) ident(Name)operator(.)ident(Constant)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\$)content((?:)delimiter(')>operator(+)ident(escape_re)operator(+)string<modifier(r)delimiter(')content(|)content(\\\\)content([ %]|[^)content(\\\\)content(]\))delimiter(')>operator(,) ident(String)operator(.)ident(Char)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(#)delimiter(')>operator(+)ident(atom_re)operator(+)string<modifier(r)delimiter(')content((:?)content(\\.)delimiter(')>operator(+)ident(atom_re)operator(+)string<modifier(r)delimiter(')content(\)?)delimiter(')>operator(,) ident(Name)operator(.)ident(Label)operator(\))operator(,)
            operator(])operator(,)
        string<delimiter(')content(string)delimiter(')>operator(:) operator([)
            operator(()ident(escape_re)operator(,) ident(String)operator(.)ident(Escape)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(")delimiter(')>operator(,) ident(String)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(~[0-9.*]*[~#+bBcdefginpPswWxX])delimiter(')>operator(,) ident(String)operator(.)ident(Interpol)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([^")content(\\\\)content(~]+)delimiter(')>operator(,) ident(String)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(~)delimiter(')>operator(,) ident(String)operator(\))operator(,)
            operator(])operator(,)
        string<delimiter(')content(directive)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content((define\)()content(\\s)content(*\)()content(\\()content(\)()delimiter(')>operator(+)ident(macro_re)operator(+)string<modifier(r)delimiter(')content(\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Name)operator(.)ident(Entity)operator(,) ident(Text)operator(,) ident(Punctuation)operator(,) ident(Name)operator(.)ident(Constant)operator(\))operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((record\)()content(\\s)content(*\)()content(\\()content(\)()delimiter(')>operator(+)ident(macro_re)operator(+)string<modifier(r)delimiter(')content(\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Name)operator(.)ident(Entity)operator(,) ident(Text)operator(,) ident(Punctuation)operator(,) ident(Name)operator(.)ident(Label)operator(\))operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()ident(atom_re)operator(,) ident(Name)operator(.)ident(Entity)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(])operator(,)
        operator(})


keyword(class) class(ErlangShellLexer)operator(()ident(Lexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Shell sessions in erl (for Erlang code\).)content(
)content(
)content(    *New in Pygments 1.1.*)content(
)content(    )delimiter(""")>
    ident(name) operator(=) string<delimiter(')content(Erlang erl session)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(erl)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.erl-sh)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(text/x-erl-shellsession)delimiter(')>operator(])

    ident(_prompt_re) operator(=) ident(re)operator(.)ident(compile)operator(()string<modifier(r)delimiter(')content(\\d)content(+>(?=)content(\\s)content(|)content(\\Z)content(\))delimiter(')>operator(\))

    keyword(def) method(get_tokens_unprocessed)operator(()predefined_constant(self)operator(,) ident(text)operator(\))operator(:)
        ident(erlexer) operator(=) ident(ErlangLexer)operator(()operator(**)predefined_constant(self)operator(.)ident(options)operator(\))

        ident(curcode) operator(=) string<delimiter(')delimiter(')>
        ident(insertions) operator(=) operator([)operator(])
        keyword(for) ident(match) keyword(in) ident(line_re)operator(.)ident(finditer)operator(()ident(text)operator(\))operator(:)
            ident(line) operator(=) ident(match)operator(.)ident(group)operator(()operator(\))
            ident(m) operator(=) predefined_constant(self)operator(.)ident(_prompt_re)operator(.)ident(match)operator(()ident(line)operator(\))
            keyword(if) ident(m) keyword(is) keyword(not) predefined_constant(None)operator(:)
                ident(end) operator(=) ident(m)operator(.)ident(end)operator(()operator(\))
                ident(insertions)operator(.)ident(append)operator(()operator(()predefined(len)operator(()ident(curcode)operator(\))operator(,)
                                   operator([)operator(()integer(0)operator(,) ident(Generic)operator(.)ident(Prompt)operator(,) ident(line)operator([)operator(:)ident(end)operator(])operator(\))operator(])operator(\))operator(\))
                ident(curcode) operator(+=) ident(line)operator([)ident(end)operator(:)operator(])
            keyword(else)operator(:)
                keyword(if) ident(curcode)operator(:)
                    keyword(for) ident(item) keyword(in) ident(do_insertions)operator(()ident(insertions)operator(,)
                                    ident(erlexer)operator(.)ident(get_tokens_unprocessed)operator(()ident(curcode)operator(\))operator(\))operator(:)
                        keyword(yield) ident(item)
                    ident(curcode) operator(=) string<delimiter(')delimiter(')>
                    ident(insertions) operator(=) operator([)operator(])
                keyword(if) ident(line)operator(.)ident(startswith)operator(()string<delimiter(')content(*)delimiter(')>operator(\))operator(:)
                    keyword(yield) ident(match)operator(.)ident(start)operator(()operator(\))operator(,) ident(Generic)operator(.)ident(Traceback)operator(,) ident(line)
                keyword(else)operator(:)
                    keyword(yield) ident(match)operator(.)ident(start)operator(()operator(\))operator(,) ident(Generic)operator(.)ident(Output)operator(,) ident(line)
        keyword(if) ident(curcode)operator(:)
            keyword(for) ident(item) keyword(in) ident(do_insertions)operator(()ident(insertions)operator(,)
                                      ident(erlexer)operator(.)ident(get_tokens_unprocessed)operator(()ident(curcode)operator(\))operator(\))operator(:)
                keyword(yield) ident(item)

comment(# -*- coding: utf-8 -*-)
docstring<delimiter(""")content(
)content(    pygments.lexers.math)content(
)content(    ~~~~~~~~~~~~~~~~~~~~)content(
)content(
)content(    Lexers for math languages.)content(
)content(
)content(    :copyright: Copyright 2006-2009 by the Pygments team, see AUTHORS.)content(
)content(    :license: BSD, see LICENSE for details.)content(
)delimiter(""")>

keyword(import) include(re)
keyword(try)operator(:)
    predefined(set)
keyword(except) exception(NameError)operator(:)
    keyword(from) include(sets) keyword(import) include(Set) keyword(as) ident(set)

keyword(from) include(pygments.lexer) keyword(import) include(Lexer)operator(,) include(RegexLexer)operator(,) include(bygroups)operator(,) include(include)operator(,) include(do_insertions)
keyword(from) include(pygments.token) keyword(import) include(Comment)operator(,) include(String)operator(,) include(Punctuation)operator(,) include(Keyword)operator(,) include(Name)operator(,) \
    include(Operator)operator(,) include(Number)operator(,) include(Text)operator(,) include(Generic)

keyword(from) include(pygments.lexers.agile) keyword(import) include(PythonLexer)

ident(__all__) operator(=) operator([)string<delimiter(')content(MuPADLexer)delimiter(')>operator(,) string<delimiter(')content(MatlabLexer)delimiter(')>operator(,) string<delimiter(')content(MatlabSessionLexer)delimiter(')>operator(,) string<delimiter(')content(NumPyLexer)delimiter(')>operator(,)
           string<delimiter(')content(SLexer)delimiter(')>operator(])


keyword(class) class(MuPADLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    A `MuPAD <http://www.mupad.com>`_ lexer.)content(
)content(    Contributed by Christopher Creutzig <christopher@creutzig.de>.)content(
)content(
)content(    *New in Pygments 0.8.*)content(
)content(    )delimiter(""")>
    ident(name) operator(=) string<delimiter(')content(MuPAD)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(mupad)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.mu)delimiter(')>operator(])

    ident(tokens) operator(=) operator({)
      string<delimiter(')content(root)delimiter(')> operator(:) operator([)
        operator(()string<modifier(r)delimiter(')content(//.*?$)delimiter(')>operator(,) ident(Comment)operator(.)ident(Single)operator(\))operator(,)
        operator(()string<modifier(r)delimiter(')content(/)content(\\*)delimiter(')>operator(,) ident(Comment)operator(.)ident(Multiline)operator(,) string<delimiter(')content(comment)delimiter(')>operator(\))operator(,)
        operator(()string<modifier(r)delimiter(')content("(?:[^")content(\\\\)content(]|)content(\\\\)content(.\)*")delimiter(')>operator(,) ident(String)operator(\))operator(,)
        operator(()string<modifier(r)delimiter(')content(\\()content(|)content(\\\))content(|)content(\\[)content(|)content(\\])content(|)content(\\{)content(|)content(\\})delimiter(')>operator(,) ident(Punctuation)operator(\))operator(,)
        operator(()string<modifier(r)delimiter(''')content((?x\))content(\\b)content((?:)content(
)content(            next|break|end|)content(
)content(            axiom|end_axiom|category|end_category|domain|end_domain|inherits|)content(
)content(            if|%if|then|elif|else|end_if|)content(
)content(            case|of|do|otherwise|end_case|)content(
)content(            while|end_while|)content(
)content(            repeat|until|end_repeat|)content(
)content(            for|from|to|downto|step|end_for|)content(
)content(            proc|local|option|save|begin|end_proc|)content(
)content(            delete|frame)content(
)content(          \))content(\\b)delimiter(''')>operator(,) ident(Keyword)operator(\))operator(,)
        operator(()string<modifier(r)delimiter(''')content((?x\))content(\\b)content((?:)content(
)content(            DOM_ARRAY|DOM_BOOL|DOM_COMPLEX|DOM_DOMAIN|DOM_EXEC|DOM_EXPR|)content(
)content(            DOM_FAIL|DOM_FLOAT|DOM_FRAME|DOM_FUNC_ENV|DOM_HFARRAY|DOM_IDENT|)content(
)content(            DOM_INT|DOM_INTERVAL|DOM_LIST|DOM_NIL|DOM_NULL|DOM_POLY|DOM_PROC|)content(
)content(            DOM_PROC_ENV|DOM_RAT|DOM_SET|DOM_STRING|DOM_TABLE|DOM_VAR)content(
)content(          \))content(\\b)delimiter(''')>operator(,) ident(Name)operator(.)ident(Class)operator(\))operator(,)
        operator(()string<modifier(r)delimiter(''')content((?x\))content(\\b)content((?:)content(
)content(            PI|EULER|E|CATALAN|)content(
)content(            NIL|FAIL|undefined|infinity|)content(
)content(            TRUE|FALSE|UNKNOWN)content(
)content(          \))content(\\b)delimiter(''')>operator(,)
          ident(Name)operator(.)ident(Constant)operator(\))operator(,)
        operator(()string<modifier(r)delimiter(')content(\\b)content((?:dom|procname\))content(\\b)delimiter(')>operator(,) ident(Name)operator(.)ident(Builtin)operator(.)ident(Pseudo)operator(\))operator(,)
        operator(()string<modifier(r)delimiter(')content(\\.)content(|,|:|;|=|)content(\\+)content(|-|)content(\\*)content(|/|)content(\\^)content(|@|>|<|)content(\\$)content(|)content(\\|)content(|!|)content(\\')content(|%|~=)delimiter(')>operator(,) ident(Operator)operator(\))operator(,)
        operator(()string<modifier(r)delimiter(''')content((?x\))content(\\b)content((?:)content(
)content(            and|or|not|xor|)content(
)content(            assuming|)content(
)content(            div|mod|)content(
)content(            union|minus|intersect|in|subset)content(
)content(          \))content(\\b)delimiter(''')>operator(,)
          ident(Operator)operator(.)ident(Word)operator(\))operator(,)
        operator(()string<modifier(r)delimiter(')content(\\b)content((?:I|RDN_INF|RD_NINF|RD_NAN\))content(\\b)delimiter(')>operator(,) ident(Number)operator(\))operator(,)
        comment(#(r'\\b(?:adt|linalg|newDomain|hold\)\\b', Name.Builtin\),)
        operator(()string<modifier(r)delimiter(''')content((?x\))content(
)content(          ((?:[a-zA-Z_#][a-zA-Z_#0-9]*|`[^`]*`\))content(
)content(          (?:::[a-zA-Z_#][a-zA-Z_#0-9]*|`[^`]*`\)*\))content(\\s)content(*([(]\))delimiter(''')>operator(,)
          ident(bygroups)operator(()ident(Name)operator(.)ident(Function)operator(,) ident(Punctuation)operator(\))operator(\))operator(,)
        operator(()string<modifier(r)delimiter(''')content((?x\))content(
)content(          (?:[a-zA-Z_#][a-zA-Z_#0-9]*|`[^`]*`\))content(
)content(          (?:::[a-zA-Z_#][a-zA-Z_#0-9]*|`[^`]*`\)*)delimiter(''')>operator(,) ident(Name)operator(.)ident(Variable)operator(\))operator(,)
        operator(()string<modifier(r)delimiter(')content([0-9]+(?:)content(\\.)content([0-9]*\)?(?:e[0-9]+\)?)delimiter(')>operator(,) ident(Number)operator(\))operator(,)
        operator(()string<modifier(r)delimiter(')content(\\.)content([0-9]+(?:e[0-9]+\)?)delimiter(')>operator(,) ident(Number)operator(\))operator(,)
        operator(()string<modifier(r)delimiter(')content(.)delimiter(')>operator(,) ident(Text)operator(\))
      operator(])operator(,)
      string<delimiter(')content(comment)delimiter(')> operator(:) operator([)
        operator(()string<modifier(r)delimiter(')content([^*/])delimiter(')>operator(,) ident(Comment)operator(.)ident(Multiline)operator(\))operator(,)
        operator(()string<modifier(r)delimiter(')content(/)content(\\*)delimiter(')>operator(,) ident(Comment)operator(.)ident(Multiline)operator(,) string<delimiter(')content(#push)delimiter(')>operator(\))operator(,)
        operator(()string<modifier(r)delimiter(')content(\\*)content(/)delimiter(')>operator(,) ident(Comment)operator(.)ident(Multiline)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
        operator(()string<modifier(r)delimiter(')content([*/])delimiter(')>operator(,) ident(Comment)operator(.)ident(Multiline)operator(\))
      operator(])
    operator(})


keyword(class) class(MatlabLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    For Matlab (or GNU Octave\) source code.)content(
)content(    Contributed by Ken Schutte <kschutte@csail.mit.edu>.)content(
)content(
)content(    *New in Pygments 0.10.*)content(
)content(    )delimiter(""")>
    ident(name) operator(=) string<delimiter(')content(Matlab)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(matlab)delimiter(')>operator(,) string<delimiter(')content(octave)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.m)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(text/matlab)delimiter(')>operator(])

    comment(#)
    comment(# These lists are generated automatically.)
    comment(# Run the following in bash shell:)
    comment(#)
    comment(# for f in elfun specfun elmat; do)
    comment(#   echo -n "$f = ")
    comment(#   matlab -nojvm -r "help $f;exit;" | perl -ne \\)
    comment(#   'push(@c,$1\) if /^    (\\w+\)\\s+-/; END {print q{["}.join(q{","},@c\).qq{"]\\n};}')
    comment(# done)
    comment(#)
    comment(# elfun: Elementary math functions)
    comment(# specfun: Special Math functions)
    comment(# elmat: Elementary matrices and matrix manipulation)
    comment(#)
    comment(# taken from Matlab version 7.4.0.336 (R2007a\))
    comment(#)
    ident(elfun) operator(=) operator([)string<delimiter(")content(sin)delimiter(")>operator(,)string<delimiter(")content(sind)delimiter(")>operator(,)string<delimiter(")content(sinh)delimiter(")>operator(,)string<delimiter(")content(asin)delimiter(")>operator(,)string<delimiter(")content(asind)delimiter(")>operator(,)string<delimiter(")content(asinh)delimiter(")>operator(,)string<delimiter(")content(cos)delimiter(")>operator(,)string<delimiter(")content(cosd)delimiter(")>operator(,)string<delimiter(")content(cosh)delimiter(")>operator(,)
             string<delimiter(")content(acos)delimiter(")>operator(,)string<delimiter(")content(acosd)delimiter(")>operator(,)string<delimiter(")content(acosh)delimiter(")>operator(,)string<delimiter(")content(tan)delimiter(")>operator(,)string<delimiter(")content(tand)delimiter(")>operator(,)string<delimiter(")content(tanh)delimiter(")>operator(,)string<delimiter(")content(atan)delimiter(")>operator(,)string<delimiter(")content(atand)delimiter(")>operator(,)string<delimiter(")content(atan2)delimiter(")>operator(,)
             string<delimiter(")content(atanh)delimiter(")>operator(,)string<delimiter(")content(sec)delimiter(")>operator(,)string<delimiter(")content(secd)delimiter(")>operator(,)string<delimiter(")content(sech)delimiter(")>operator(,)string<delimiter(")content(asec)delimiter(")>operator(,)string<delimiter(")content(asecd)delimiter(")>operator(,)string<delimiter(")content(asech)delimiter(")>operator(,)string<delimiter(")content(csc)delimiter(")>operator(,)string<delimiter(")content(cscd)delimiter(")>operator(,)
             string<delimiter(")content(csch)delimiter(")>operator(,)string<delimiter(")content(acsc)delimiter(")>operator(,)string<delimiter(")content(acscd)delimiter(")>operator(,)string<delimiter(")content(acsch)delimiter(")>operator(,)string<delimiter(")content(cot)delimiter(")>operator(,)string<delimiter(")content(cotd)delimiter(")>operator(,)string<delimiter(")content(coth)delimiter(")>operator(,)string<delimiter(")content(acot)delimiter(")>operator(,)string<delimiter(")content(acotd)delimiter(")>operator(,)
             string<delimiter(")content(acoth)delimiter(")>operator(,)string<delimiter(")content(hypot)delimiter(")>operator(,)string<delimiter(")content(exp)delimiter(")>operator(,)string<delimiter(")content(expm1)delimiter(")>operator(,)string<delimiter(")content(log)delimiter(")>operator(,)string<delimiter(")content(log1p)delimiter(")>operator(,)string<delimiter(")content(log10)delimiter(")>operator(,)string<delimiter(")content(log2)delimiter(")>operator(,)string<delimiter(")content(pow2)delimiter(")>operator(,)
             string<delimiter(")content(realpow)delimiter(")>operator(,)string<delimiter(")content(reallog)delimiter(")>operator(,)string<delimiter(")content(realsqrt)delimiter(")>operator(,)string<delimiter(")content(sqrt)delimiter(")>operator(,)string<delimiter(")content(nthroot)delimiter(")>operator(,)string<delimiter(")content(nextpow2)delimiter(")>operator(,)string<delimiter(")content(abs)delimiter(")>operator(,)
             string<delimiter(")content(angle)delimiter(")>operator(,)string<delimiter(")content(complex)delimiter(")>operator(,)string<delimiter(")content(conj)delimiter(")>operator(,)string<delimiter(")content(imag)delimiter(")>operator(,)string<delimiter(")content(real)delimiter(")>operator(,)string<delimiter(")content(unwrap)delimiter(")>operator(,)string<delimiter(")content(isreal)delimiter(")>operator(,)string<delimiter(")content(cplxpair)delimiter(")>operator(,)
             string<delimiter(")content(fix)delimiter(")>operator(,)string<delimiter(")content(floor)delimiter(")>operator(,)string<delimiter(")content(ceil)delimiter(")>operator(,)string<delimiter(")content(round)delimiter(")>operator(,)string<delimiter(")content(mod)delimiter(")>operator(,)string<delimiter(")content(rem)delimiter(")>operator(,)string<delimiter(")content(sign)delimiter(")>operator(])
    ident(specfun) operator(=) operator([)string<delimiter(")content(airy)delimiter(")>operator(,)string<delimiter(")content(besselj)delimiter(")>operator(,)string<delimiter(")content(bessely)delimiter(")>operator(,)string<delimiter(")content(besselh)delimiter(")>operator(,)string<delimiter(")content(besseli)delimiter(")>operator(,)string<delimiter(")content(besselk)delimiter(")>operator(,)string<delimiter(")content(beta)delimiter(")>operator(,)
               string<delimiter(")content(betainc)delimiter(")>operator(,)string<delimiter(")content(betaln)delimiter(")>operator(,)string<delimiter(")content(ellipj)delimiter(")>operator(,)string<delimiter(")content(ellipke)delimiter(")>operator(,)string<delimiter(")content(erf)delimiter(")>operator(,)string<delimiter(")content(erfc)delimiter(")>operator(,)string<delimiter(")content(erfcx)delimiter(")>operator(,)
               string<delimiter(")content(erfinv)delimiter(")>operator(,)string<delimiter(")content(expint)delimiter(")>operator(,)string<delimiter(")content(gamma)delimiter(")>operator(,)string<delimiter(")content(gammainc)delimiter(")>operator(,)string<delimiter(")content(gammaln)delimiter(")>operator(,)string<delimiter(")content(psi)delimiter(")>operator(,)string<delimiter(")content(legendre)delimiter(")>operator(,)
               string<delimiter(")content(cross)delimiter(")>operator(,)string<delimiter(")content(dot)delimiter(")>operator(,)string<delimiter(")content(factor)delimiter(")>operator(,)string<delimiter(")content(isprime)delimiter(")>operator(,)string<delimiter(")content(primes)delimiter(")>operator(,)string<delimiter(")content(gcd)delimiter(")>operator(,)string<delimiter(")content(lcm)delimiter(")>operator(,)string<delimiter(")content(rat)delimiter(")>operator(,)
               string<delimiter(")content(rats)delimiter(")>operator(,)string<delimiter(")content(perms)delimiter(")>operator(,)string<delimiter(")content(nchoosek)delimiter(")>operator(,)string<delimiter(")content(factorial)delimiter(")>operator(,)string<delimiter(")content(cart2sph)delimiter(")>operator(,)string<delimiter(")content(cart2pol)delimiter(")>operator(,)
               string<delimiter(")content(pol2cart)delimiter(")>operator(,)string<delimiter(")content(sph2cart)delimiter(")>operator(,)string<delimiter(")content(hsv2rgb)delimiter(")>operator(,)string<delimiter(")content(rgb2hsv)delimiter(")>operator(])
    ident(elmat) operator(=) operator([)string<delimiter(")content(zeros)delimiter(")>operator(,)string<delimiter(")content(ones)delimiter(")>operator(,)string<delimiter(")content(eye)delimiter(")>operator(,)string<delimiter(")content(repmat)delimiter(")>operator(,)string<delimiter(")content(rand)delimiter(")>operator(,)string<delimiter(")content(randn)delimiter(")>operator(,)string<delimiter(")content(linspace)delimiter(")>operator(,)string<delimiter(")content(logspace)delimiter(")>operator(,)
             string<delimiter(")content(freqspace)delimiter(")>operator(,)string<delimiter(")content(meshgrid)delimiter(")>operator(,)string<delimiter(")content(accumarray)delimiter(")>operator(,)string<delimiter(")content(size)delimiter(")>operator(,)string<delimiter(")content(length)delimiter(")>operator(,)string<delimiter(")content(ndims)delimiter(")>operator(,)string<delimiter(")content(numel)delimiter(")>operator(,)
             string<delimiter(")content(disp)delimiter(")>operator(,)string<delimiter(")content(isempty)delimiter(")>operator(,)string<delimiter(")content(isequal)delimiter(")>operator(,)string<delimiter(")content(isequalwithequalnans)delimiter(")>operator(,)string<delimiter(")content(cat)delimiter(")>operator(,)string<delimiter(")content(reshape)delimiter(")>operator(,)
             string<delimiter(")content(diag)delimiter(")>operator(,)string<delimiter(")content(blkdiag)delimiter(")>operator(,)string<delimiter(")content(tril)delimiter(")>operator(,)string<delimiter(")content(triu)delimiter(")>operator(,)string<delimiter(")content(fliplr)delimiter(")>operator(,)string<delimiter(")content(flipud)delimiter(")>operator(,)string<delimiter(")content(flipdim)delimiter(")>operator(,)string<delimiter(")content(rot90)delimiter(")>operator(,)
             string<delimiter(")content(find)delimiter(")>operator(,)string<delimiter(")content(end)delimiter(")>operator(,)string<delimiter(")content(sub2ind)delimiter(")>operator(,)string<delimiter(")content(ind2sub)delimiter(")>operator(,)string<delimiter(")content(bsxfun)delimiter(")>operator(,)string<delimiter(")content(ndgrid)delimiter(")>operator(,)string<delimiter(")content(permute)delimiter(")>operator(,)
             string<delimiter(")content(ipermute)delimiter(")>operator(,)string<delimiter(")content(shiftdim)delimiter(")>operator(,)string<delimiter(")content(circshift)delimiter(")>operator(,)string<delimiter(")content(squeeze)delimiter(")>operator(,)string<delimiter(")content(isscalar)delimiter(")>operator(,)string<delimiter(")content(isvector)delimiter(")>operator(,)
             string<delimiter(")content(ans)delimiter(")>operator(,)string<delimiter(")content(eps)delimiter(")>operator(,)string<delimiter(")content(realmax)delimiter(")>operator(,)string<delimiter(")content(realmin)delimiter(")>operator(,)string<delimiter(")content(pi)delimiter(")>operator(,)string<delimiter(")content(i)delimiter(")>operator(,)string<delimiter(")content(inf)delimiter(")>operator(,)string<delimiter(")content(nan)delimiter(")>operator(,)string<delimiter(")content(isnan)delimiter(")>operator(,)
             string<delimiter(")content(isinf)delimiter(")>operator(,)string<delimiter(")content(isfinite)delimiter(")>operator(,)string<delimiter(")content(j)delimiter(")>operator(,)string<delimiter(")content(why)delimiter(")>operator(,)string<delimiter(")content(compan)delimiter(")>operator(,)string<delimiter(")content(gallery)delimiter(")>operator(,)string<delimiter(")content(hadamard)delimiter(")>operator(,)string<delimiter(")content(hankel)delimiter(")>operator(,)
             string<delimiter(")content(hilb)delimiter(")>operator(,)string<delimiter(")content(invhilb)delimiter(")>operator(,)string<delimiter(")content(magic)delimiter(")>operator(,)string<delimiter(")content(pascal)delimiter(")>operator(,)string<delimiter(")content(rosser)delimiter(")>operator(,)string<delimiter(")content(toeplitz)delimiter(")>operator(,)string<delimiter(")content(vander)delimiter(")>operator(,)
             string<delimiter(")content(wilkinson)delimiter(")>operator(])

    ident(tokens) operator(=) operator({)
        string<delimiter(')content(root)delimiter(')>operator(:) operator([)
            comment(# line starting with '!' is sent as a system command.  not sure what)
            comment(# label to use...)
            operator(()string<modifier(r)delimiter(')content(^!.*)delimiter(')>operator(,) ident(String)operator(.)ident(Other)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(%.*$)delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(^)content(\\s)content(*function)delimiter(')>operator(,) ident(Keyword)operator(,) string<delimiter(')content(deffunc)delimiter(')>operator(\))operator(,)

            comment(# from 'iskeyword' on version 7.4.0.336 (R2007a\):)
            operator(()string<modifier(r)delimiter(')content((break|case|catch|classdef|continue|else|elseif|end|for|function|)delimiter(')>
             string<modifier(r)delimiter(')content(global|if|otherwise|parfor|persistent|return|switch|try|while\))content(\\b)delimiter(')>operator(,)
             ident(Keyword)operator(\))operator(,)

            operator(()string<delimiter(")content(()delimiter(")> operator(+) string<delimiter(")content(|)delimiter(")>operator(.)ident(join)operator(()ident(elfun)operator(+)ident(specfun)operator(+)ident(elmat)operator(\)) operator(+) string<modifier(r)delimiter(')content(\))content(\\b)delimiter(')>operator(,)  ident(Name)operator(.)ident(Builtin)operator(\))operator(,)

            comment(# operators:)
            operator(()string<modifier(r)delimiter(')content(-|==|~=|<|>|<=|>=|&&|&|~)delimiter(')>operator(,) ident(Operator)operator(\))operator(,)
            comment(# operators requiring escape for re:)
            operator(()string<modifier(r)delimiter(')content(\\.)content(\\*)content(|)content(\\*)content(|)content(\\+)content(|)content(\\.)content(\\^)content(|)content(\\.)content(\\\\)content(|)content(\\.)content(\\/)content(|)content(\\/)content(|)content(\\\\)delimiter(')>operator(,) ident(Operator)operator(\))operator(,)

            comment(# punctuation:)
            operator(()string<modifier(r)delimiter(')content(\\[)content(|)content(\\])content(|)content(\\()content(|)content(\\\))content(|)content(\\{)content(|)content(\\})content(|:|@|)content(\\.)content(|,)delimiter(')>operator(,) ident(Punctuation)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(=|:|;)delimiter(')>operator(,) ident(Punctuation)operator(\))operator(,)

            comment(# quote can be transpose, instead of string:)
            comment(# (not great, but handles common cases...\))
            operator(()string<modifier(r)delimiter(')content(([)content(\\w)content(\\\))content(\\])content(]+\)()content(\\')content(\))delimiter(')>operator(,) ident(bygroups)operator(()ident(Text)operator(,) ident(Operator)operator(\))operator(\))operator(,)

            operator(()string<modifier(r)delimiter(')content(\\')delimiter(')>operator(,) ident(String)operator(,) string<delimiter(')content(string)delimiter(')>operator(\))operator(,)
            operator(()string<delimiter(')content([a-zA-Z_][a-zA-Z0-9_]*)delimiter(')>operator(,) ident(Name)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(.)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(string)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content([^)content(\\')content(]*)content(\\')delimiter(')>operator(,) ident(String)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))
        operator(])operator(,)
        string<delimiter(')content(deffunc)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(()content(\\s)content(*\)(.+\)()content(\\s)content(*\)(=\)()content(\\s)content(*\)(.+\)()content(\\()content(\)(.*\)()content(\\\))content(\)()content(\\s)content(*\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Text)operator(.)ident(Whitespace)operator(,) ident(Text)operator(,) ident(Text)operator(.)ident(Whitespace)operator(,) ident(Punctuation)operator(,)
                      ident(Text)operator(.)ident(Whitespace)operator(,) ident(Name)operator(.)ident(Function)operator(,) ident(Punctuation)operator(,) ident(Text)operator(,)
                      ident(Punctuation)operator(,) ident(Text)operator(.)ident(Whitespace)operator(\))operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
    operator(})

    keyword(def) method(analyse_text)operator(()ident(text)operator(\))operator(:)
        keyword(if) ident(re)operator(.)ident(match)operator(()string<delimiter(')content(^)content(\\s)content(*%)delimiter(')>operator(,) ident(text)operator(,) ident(re)operator(.)ident(M)operator(\))operator(:) comment(# comment)
            keyword(return) float(0.9)
        keyword(elif) ident(re)operator(.)ident(match)operator(()string<delimiter(')content(^!)content(\\w)content(+)delimiter(')>operator(,) ident(text)operator(,) ident(re)operator(.)ident(M)operator(\))operator(:) comment(# system cmd)
            keyword(return) float(0.9)
        keyword(return) float(0.1)

ident(line_re)  operator(=) ident(re)operator(.)ident(compile)operator(()string<delimiter(')content(.*?)char(\\n)delimiter(')>operator(\))

keyword(class) class(MatlabSessionLexer)operator(()ident(Lexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    For Matlab (or GNU Octave\) sessions.  Modeled after PythonConsoleLexer.)content(
)content(    Contributed by Ken Schutte <kschutte@csail.mit.edu>.)content(
)content(
)content(    *New in Pygments 0.10.*)content(
)content(    )delimiter(""")>
    ident(name) operator(=) string<delimiter(')content(Matlab session)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(matlabsession)delimiter(')>operator(])

    keyword(def) method(get_tokens_unprocessed)operator(()predefined_constant(self)operator(,) ident(text)operator(\))operator(:)
        ident(mlexer) operator(=) ident(MatlabLexer)operator(()operator(**)predefined_constant(self)operator(.)ident(options)operator(\))

        ident(curcode) operator(=) string<delimiter(')delimiter(')>
        ident(insertions) operator(=) operator([)operator(])

        keyword(for) ident(match) keyword(in) ident(line_re)operator(.)ident(finditer)operator(()ident(text)operator(\))operator(:)
            ident(line) operator(=) ident(match)operator(.)ident(group)operator(()operator(\))

            keyword(if) ident(line)operator(.)ident(startswith)operator(()string<delimiter(')content(>>)delimiter(')>operator(\))operator(:)
                ident(insertions)operator(.)ident(append)operator(()operator(()predefined(len)operator(()ident(curcode)operator(\))operator(,)
                                   operator([)operator(()integer(0)operator(,) ident(Generic)operator(.)ident(Prompt)operator(,) ident(line)operator([)operator(:)integer(3)operator(])operator(\))operator(])operator(\))operator(\))
                ident(curcode) operator(+=) ident(line)operator([)integer(3)operator(:)operator(])

            keyword(elif) ident(line)operator(.)ident(startswith)operator(()string<delimiter(')content(???)delimiter(')>operator(\))operator(:)

                ident(idx) operator(=) predefined(len)operator(()ident(curcode)operator(\))

                comment(# without is showing error on same line as before...?)
                ident(line) operator(=) string<delimiter(")char(\\n)delimiter(")> operator(+) ident(line)
                ident(token) operator(=) operator(()integer(0)operator(,) ident(Generic)operator(.)ident(Traceback)operator(,) ident(line)operator(\))
                ident(insertions)operator(.)ident(append)operator(()  operator(()ident(idx)operator(,) operator([)ident(token)operator(,)operator(])operator(\)) operator(\))

            keyword(else)operator(:)
                keyword(if) ident(curcode)operator(:)
                    keyword(for) ident(item) keyword(in) ident(do_insertions)operator(()
                        ident(insertions)operator(,) ident(mlexer)operator(.)ident(get_tokens_unprocessed)operator(()ident(curcode)operator(\))operator(\))operator(:)
                        keyword(yield) ident(item)
                    ident(curcode) operator(=) string<delimiter(')delimiter(')>
                    ident(insertions) operator(=) operator([)operator(])

                keyword(yield) ident(match)operator(.)ident(start)operator(()operator(\))operator(,) ident(Generic)operator(.)ident(Output)operator(,) ident(line)

        keyword(if) ident(curcode)operator(:) comment(# or item:)
            keyword(for) ident(item) keyword(in) ident(do_insertions)operator(()
                ident(insertions)operator(,) ident(mlexer)operator(.)ident(get_tokens_unprocessed)operator(()ident(curcode)operator(\))operator(\))operator(:)
                keyword(yield) ident(item)


keyword(class) class(NumPyLexer)operator(()ident(PythonLexer)operator(\))operator(:)
    docstring<delimiter(''')content(
)content(    A Python lexer recognizing Numerical Python builtins.)content(
)content(
)content(    *New in Pygments 0.10.*)content(
)content(    )delimiter(''')>

    ident(name) operator(=) string<delimiter(')content(NumPy)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(numpy)delimiter(')>operator(])

    comment(# override the mimetypes to not inherit them from python)
    ident(mimetypes) operator(=) operator([)operator(])
    ident(filenames) operator(=) operator([)operator(])

    ident(EXTRA_KEYWORDS) operator(=) predefined(set)operator(()operator([)
        string<delimiter(')content(abs)delimiter(')>operator(,) string<delimiter(')content(absolute)delimiter(')>operator(,) string<delimiter(')content(accumulate)delimiter(')>operator(,) string<delimiter(')content(add)delimiter(')>operator(,) string<delimiter(')content(alen)delimiter(')>operator(,) string<delimiter(')content(all)delimiter(')>operator(,) string<delimiter(')content(allclose)delimiter(')>operator(,)
        string<delimiter(')content(alltrue)delimiter(')>operator(,) string<delimiter(')content(alterdot)delimiter(')>operator(,) string<delimiter(')content(amax)delimiter(')>operator(,) string<delimiter(')content(amin)delimiter(')>operator(,) string<delimiter(')content(angle)delimiter(')>operator(,) string<delimiter(')content(any)delimiter(')>operator(,) string<delimiter(')content(append)delimiter(')>operator(,)
        string<delimiter(')content(apply_along_axis)delimiter(')>operator(,) string<delimiter(')content(apply_over_axes)delimiter(')>operator(,) string<delimiter(')content(arange)delimiter(')>operator(,) string<delimiter(')content(arccos)delimiter(')>operator(,) string<delimiter(')content(arccosh)delimiter(')>operator(,)
        string<delimiter(')content(arcsin)delimiter(')>operator(,) string<delimiter(')content(arcsinh)delimiter(')>operator(,) string<delimiter(')content(arctan)delimiter(')>operator(,) string<delimiter(')content(arctan2)delimiter(')>operator(,) string<delimiter(')content(arctanh)delimiter(')>operator(,) string<delimiter(')content(argmax)delimiter(')>operator(,) string<delimiter(')content(argmin)delimiter(')>operator(,)
        string<delimiter(')content(argsort)delimiter(')>operator(,) string<delimiter(')content(argwhere)delimiter(')>operator(,) string<delimiter(')content(around)delimiter(')>operator(,) string<delimiter(')content(array)delimiter(')>operator(,) string<delimiter(')content(array2string)delimiter(')>operator(,) string<delimiter(')content(array_equal)delimiter(')>operator(,)
        string<delimiter(')content(array_equiv)delimiter(')>operator(,) string<delimiter(')content(array_repr)delimiter(')>operator(,) string<delimiter(')content(array_split)delimiter(')>operator(,) string<delimiter(')content(array_str)delimiter(')>operator(,) string<delimiter(')content(arrayrange)delimiter(')>operator(,)
        string<delimiter(')content(asanyarray)delimiter(')>operator(,) string<delimiter(')content(asarray)delimiter(')>operator(,) string<delimiter(')content(asarray_chkfinite)delimiter(')>operator(,) string<delimiter(')content(ascontiguousarray)delimiter(')>operator(,)
        string<delimiter(')content(asfarray)delimiter(')>operator(,) string<delimiter(')content(asfortranarray)delimiter(')>operator(,) string<delimiter(')content(asmatrix)delimiter(')>operator(,) string<delimiter(')content(asscalar)delimiter(')>operator(,) string<delimiter(')content(astype)delimiter(')>operator(,)
        string<delimiter(')content(atleast_1d)delimiter(')>operator(,) string<delimiter(')content(atleast_2d)delimiter(')>operator(,) string<delimiter(')content(atleast_3d)delimiter(')>operator(,) string<delimiter(')content(average)delimiter(')>operator(,) string<delimiter(')content(bartlett)delimiter(')>operator(,)
        string<delimiter(')content(base_repr)delimiter(')>operator(,) string<delimiter(')content(beta)delimiter(')>operator(,) string<delimiter(')content(binary_repr)delimiter(')>operator(,) string<delimiter(')content(bincount)delimiter(')>operator(,) string<delimiter(')content(binomial)delimiter(')>operator(,)
        string<delimiter(')content(bitwise_and)delimiter(')>operator(,) string<delimiter(')content(bitwise_not)delimiter(')>operator(,) string<delimiter(')content(bitwise_or)delimiter(')>operator(,) string<delimiter(')content(bitwise_xor)delimiter(')>operator(,) string<delimiter(')content(blackman)delimiter(')>operator(,)
        string<delimiter(')content(bmat)delimiter(')>operator(,) string<delimiter(')content(broadcast)delimiter(')>operator(,) string<delimiter(')content(byte_bounds)delimiter(')>operator(,) string<delimiter(')content(bytes)delimiter(')>operator(,) string<delimiter(')content(byteswap)delimiter(')>operator(,) string<delimiter(')content(c_)delimiter(')>operator(,)
        string<delimiter(')content(can_cast)delimiter(')>operator(,) string<delimiter(')content(ceil)delimiter(')>operator(,) string<delimiter(')content(choose)delimiter(')>operator(,) string<delimiter(')content(clip)delimiter(')>operator(,) string<delimiter(')content(column_stack)delimiter(')>operator(,) string<delimiter(')content(common_type)delimiter(')>operator(,)
        string<delimiter(')content(compare_chararrays)delimiter(')>operator(,) string<delimiter(')content(compress)delimiter(')>operator(,) string<delimiter(')content(concatenate)delimiter(')>operator(,) string<delimiter(')content(conj)delimiter(')>operator(,) string<delimiter(')content(conjugate)delimiter(')>operator(,)
        string<delimiter(')content(convolve)delimiter(')>operator(,) string<delimiter(')content(copy)delimiter(')>operator(,) string<delimiter(')content(corrcoef)delimiter(')>operator(,) string<delimiter(')content(correlate)delimiter(')>operator(,) string<delimiter(')content(cos)delimiter(')>operator(,) string<delimiter(')content(cosh)delimiter(')>operator(,) string<delimiter(')content(cov)delimiter(')>operator(,)
        string<delimiter(')content(cross)delimiter(')>operator(,) string<delimiter(')content(cumprod)delimiter(')>operator(,) string<delimiter(')content(cumproduct)delimiter(')>operator(,) string<delimiter(')content(cumsum)delimiter(')>operator(,) string<delimiter(')content(delete)delimiter(')>operator(,) string<delimiter(')content(deprecate)delimiter(')>operator(,)
        string<delimiter(')content(diag)delimiter(')>operator(,) string<delimiter(')content(diagflat)delimiter(')>operator(,) string<delimiter(')content(diagonal)delimiter(')>operator(,) string<delimiter(')content(diff)delimiter(')>operator(,) string<delimiter(')content(digitize)delimiter(')>operator(,) string<delimiter(')content(disp)delimiter(')>operator(,) string<delimiter(')content(divide)delimiter(')>operator(,)
        string<delimiter(')content(dot)delimiter(')>operator(,) string<delimiter(')content(dsplit)delimiter(')>operator(,) string<delimiter(')content(dstack)delimiter(')>operator(,) string<delimiter(')content(dtype)delimiter(')>operator(,) string<delimiter(')content(dump)delimiter(')>operator(,) string<delimiter(')content(dumps)delimiter(')>operator(,) string<delimiter(')content(ediff1d)delimiter(')>operator(,) string<delimiter(')content(empty)delimiter(')>operator(,)
        string<delimiter(')content(empty_like)delimiter(')>operator(,) string<delimiter(')content(equal)delimiter(')>operator(,) string<delimiter(')content(exp)delimiter(')>operator(,) string<delimiter(')content(expand_dims)delimiter(')>operator(,) string<delimiter(')content(expm1)delimiter(')>operator(,) string<delimiter(')content(extract)delimiter(')>operator(,) string<delimiter(')content(eye)delimiter(')>operator(,)
        string<delimiter(')content(fabs)delimiter(')>operator(,) string<delimiter(')content(fastCopyAndTranspose)delimiter(')>operator(,) string<delimiter(')content(fft)delimiter(')>operator(,) string<delimiter(')content(fftfreq)delimiter(')>operator(,) string<delimiter(')content(fftshift)delimiter(')>operator(,) string<delimiter(')content(fill)delimiter(')>operator(,)
        string<delimiter(')content(finfo)delimiter(')>operator(,) string<delimiter(')content(fix)delimiter(')>operator(,) string<delimiter(')content(flat)delimiter(')>operator(,) string<delimiter(')content(flatnonzero)delimiter(')>operator(,) string<delimiter(')content(flatten)delimiter(')>operator(,) string<delimiter(')content(fliplr)delimiter(')>operator(,) string<delimiter(')content(flipud)delimiter(')>operator(,)
        string<delimiter(')content(floor)delimiter(')>operator(,) string<delimiter(')content(floor_divide)delimiter(')>operator(,) string<delimiter(')content(fmod)delimiter(')>operator(,) string<delimiter(')content(frexp)delimiter(')>operator(,) string<delimiter(')content(fromarrays)delimiter(')>operator(,) string<delimiter(')content(frombuffer)delimiter(')>operator(,)
        string<delimiter(')content(fromfile)delimiter(')>operator(,) string<delimiter(')content(fromfunction)delimiter(')>operator(,) string<delimiter(')content(fromiter)delimiter(')>operator(,) string<delimiter(')content(frompyfunc)delimiter(')>operator(,) string<delimiter(')content(fromstring)delimiter(')>operator(,)
        string<delimiter(')content(generic)delimiter(')>operator(,) string<delimiter(')content(get_array_wrap)delimiter(')>operator(,) string<delimiter(')content(get_include)delimiter(')>operator(,) string<delimiter(')content(get_numarray_include)delimiter(')>operator(,)
        string<delimiter(')content(get_numpy_include)delimiter(')>operator(,) string<delimiter(')content(get_printoptions)delimiter(')>operator(,) string<delimiter(')content(getbuffer)delimiter(')>operator(,) string<delimiter(')content(getbufsize)delimiter(')>operator(,)
        string<delimiter(')content(geterr)delimiter(')>operator(,) string<delimiter(')content(geterrcall)delimiter(')>operator(,) string<delimiter(')content(geterrobj)delimiter(')>operator(,) string<delimiter(')content(getfield)delimiter(')>operator(,) string<delimiter(')content(gradient)delimiter(')>operator(,) string<delimiter(')content(greater)delimiter(')>operator(,)
        string<delimiter(')content(greater_equal)delimiter(')>operator(,) string<delimiter(')content(gumbel)delimiter(')>operator(,) string<delimiter(')content(hamming)delimiter(')>operator(,) string<delimiter(')content(hanning)delimiter(')>operator(,) string<delimiter(')content(histogram)delimiter(')>operator(,)
        string<delimiter(')content(histogram2d)delimiter(')>operator(,) string<delimiter(')content(histogramdd)delimiter(')>operator(,) string<delimiter(')content(hsplit)delimiter(')>operator(,) string<delimiter(')content(hstack)delimiter(')>operator(,) string<delimiter(')content(hypot)delimiter(')>operator(,) string<delimiter(')content(i0)delimiter(')>operator(,)
        string<delimiter(')content(identity)delimiter(')>operator(,) string<delimiter(')content(ifft)delimiter(')>operator(,) string<delimiter(')content(imag)delimiter(')>operator(,) string<delimiter(')content(index_exp)delimiter(')>operator(,) string<delimiter(')content(indices)delimiter(')>operator(,) string<delimiter(')content(inf)delimiter(')>operator(,) string<delimiter(')content(info)delimiter(')>operator(,)
        string<delimiter(')content(inner)delimiter(')>operator(,) string<delimiter(')content(insert)delimiter(')>operator(,) string<delimiter(')content(int_asbuffer)delimiter(')>operator(,) string<delimiter(')content(interp)delimiter(')>operator(,) string<delimiter(')content(intersect1d)delimiter(')>operator(,)
        string<delimiter(')content(intersect1d_nu)delimiter(')>operator(,) string<delimiter(')content(inv)delimiter(')>operator(,) string<delimiter(')content(invert)delimiter(')>operator(,) string<delimiter(')content(iscomplex)delimiter(')>operator(,) string<delimiter(')content(iscomplexobj)delimiter(')>operator(,)
        string<delimiter(')content(isfinite)delimiter(')>operator(,) string<delimiter(')content(isfortran)delimiter(')>operator(,) string<delimiter(')content(isinf)delimiter(')>operator(,) string<delimiter(')content(isnan)delimiter(')>operator(,) string<delimiter(')content(isneginf)delimiter(')>operator(,) string<delimiter(')content(isposinf)delimiter(')>operator(,)
        string<delimiter(')content(isreal)delimiter(')>operator(,) string<delimiter(')content(isrealobj)delimiter(')>operator(,) string<delimiter(')content(isscalar)delimiter(')>operator(,) string<delimiter(')content(issctype)delimiter(')>operator(,) string<delimiter(')content(issubclass_)delimiter(')>operator(,)
        string<delimiter(')content(issubdtype)delimiter(')>operator(,) string<delimiter(')content(issubsctype)delimiter(')>operator(,) string<delimiter(')content(item)delimiter(')>operator(,) string<delimiter(')content(itemset)delimiter(')>operator(,) string<delimiter(')content(iterable)delimiter(')>operator(,) string<delimiter(')content(ix_)delimiter(')>operator(,)
        string<delimiter(')content(kaiser)delimiter(')>operator(,) string<delimiter(')content(kron)delimiter(')>operator(,) string<delimiter(')content(ldexp)delimiter(')>operator(,) string<delimiter(')content(left_shift)delimiter(')>operator(,) string<delimiter(')content(less)delimiter(')>operator(,) string<delimiter(')content(less_equal)delimiter(')>operator(,) string<delimiter(')content(lexsort)delimiter(')>operator(,)
        string<delimiter(')content(linspace)delimiter(')>operator(,) string<delimiter(')content(load)delimiter(')>operator(,) string<delimiter(')content(loads)delimiter(')>operator(,) string<delimiter(')content(loadtxt)delimiter(')>operator(,) string<delimiter(')content(log)delimiter(')>operator(,) string<delimiter(')content(log10)delimiter(')>operator(,) string<delimiter(')content(log1p)delimiter(')>operator(,) string<delimiter(')content(log2)delimiter(')>operator(,)
        string<delimiter(')content(logical_and)delimiter(')>operator(,) string<delimiter(')content(logical_not)delimiter(')>operator(,) string<delimiter(')content(logical_or)delimiter(')>operator(,) string<delimiter(')content(logical_xor)delimiter(')>operator(,) string<delimiter(')content(logspace)delimiter(')>operator(,)
        string<delimiter(')content(lstsq)delimiter(')>operator(,) string<delimiter(')content(mat)delimiter(')>operator(,) string<delimiter(')content(matrix)delimiter(')>operator(,) string<delimiter(')content(max)delimiter(')>operator(,) string<delimiter(')content(maximum)delimiter(')>operator(,) string<delimiter(')content(maximum_sctype)delimiter(')>operator(,)
        string<delimiter(')content(may_share_memory)delimiter(')>operator(,) string<delimiter(')content(mean)delimiter(')>operator(,) string<delimiter(')content(median)delimiter(')>operator(,) string<delimiter(')content(meshgrid)delimiter(')>operator(,) string<delimiter(')content(mgrid)delimiter(')>operator(,) string<delimiter(')content(min)delimiter(')>operator(,)
        string<delimiter(')content(minimum)delimiter(')>operator(,) string<delimiter(')content(mintypecode)delimiter(')>operator(,) string<delimiter(')content(mod)delimiter(')>operator(,) string<delimiter(')content(modf)delimiter(')>operator(,) string<delimiter(')content(msort)delimiter(')>operator(,) string<delimiter(')content(multiply)delimiter(')>operator(,) string<delimiter(')content(nan)delimiter(')>operator(,)
        string<delimiter(')content(nan_to_num)delimiter(')>operator(,) string<delimiter(')content(nanargmax)delimiter(')>operator(,) string<delimiter(')content(nanargmin)delimiter(')>operator(,) string<delimiter(')content(nanmax)delimiter(')>operator(,) string<delimiter(')content(nanmin)delimiter(')>operator(,) string<delimiter(')content(nansum)delimiter(')>operator(,)
        string<delimiter(')content(ndenumerate)delimiter(')>operator(,) string<delimiter(')content(ndim)delimiter(')>operator(,) string<delimiter(')content(ndindex)delimiter(')>operator(,) string<delimiter(')content(negative)delimiter(')>operator(,) string<delimiter(')content(newaxis)delimiter(')>operator(,) string<delimiter(')content(newbuffer)delimiter(')>operator(,)
        string<delimiter(')content(newbyteorder)delimiter(')>operator(,) string<delimiter(')content(nonzero)delimiter(')>operator(,) string<delimiter(')content(not_equal)delimiter(')>operator(,) string<delimiter(')content(obj2sctype)delimiter(')>operator(,) string<delimiter(')content(ogrid)delimiter(')>operator(,) string<delimiter(')content(ones)delimiter(')>operator(,)
        string<delimiter(')content(ones_like)delimiter(')>operator(,) string<delimiter(')content(outer)delimiter(')>operator(,) string<delimiter(')content(permutation)delimiter(')>operator(,) string<delimiter(')content(piecewise)delimiter(')>operator(,) string<delimiter(')content(pinv)delimiter(')>operator(,) string<delimiter(')content(pkgload)delimiter(')>operator(,)
        string<delimiter(')content(place)delimiter(')>operator(,) string<delimiter(')content(poisson)delimiter(')>operator(,) string<delimiter(')content(poly)delimiter(')>operator(,) string<delimiter(')content(poly1d)delimiter(')>operator(,) string<delimiter(')content(polyadd)delimiter(')>operator(,) string<delimiter(')content(polyder)delimiter(')>operator(,) string<delimiter(')content(polydiv)delimiter(')>operator(,)
        string<delimiter(')content(polyfit)delimiter(')>operator(,) string<delimiter(')content(polyint)delimiter(')>operator(,) string<delimiter(')content(polymul)delimiter(')>operator(,) string<delimiter(')content(polysub)delimiter(')>operator(,) string<delimiter(')content(polyval)delimiter(')>operator(,) string<delimiter(')content(power)delimiter(')>operator(,) string<delimiter(')content(prod)delimiter(')>operator(,)
        string<delimiter(')content(product)delimiter(')>operator(,) string<delimiter(')content(ptp)delimiter(')>operator(,) string<delimiter(')content(put)delimiter(')>operator(,) string<delimiter(')content(putmask)delimiter(')>operator(,) string<delimiter(')content(r_)delimiter(')>operator(,) string<delimiter(')content(randint)delimiter(')>operator(,) string<delimiter(')content(random_integers)delimiter(')>operator(,)
        string<delimiter(')content(random_sample)delimiter(')>operator(,) string<delimiter(')content(ranf)delimiter(')>operator(,) string<delimiter(')content(rank)delimiter(')>operator(,) string<delimiter(')content(ravel)delimiter(')>operator(,) string<delimiter(')content(real)delimiter(')>operator(,) string<delimiter(')content(real_if_close)delimiter(')>operator(,)
        string<delimiter(')content(recarray)delimiter(')>operator(,) string<delimiter(')content(reciprocal)delimiter(')>operator(,) string<delimiter(')content(reduce)delimiter(')>operator(,) string<delimiter(')content(remainder)delimiter(')>operator(,) string<delimiter(')content(repeat)delimiter(')>operator(,) string<delimiter(')content(require)delimiter(')>operator(,)
        string<delimiter(')content(reshape)delimiter(')>operator(,) string<delimiter(')content(resize)delimiter(')>operator(,) string<delimiter(')content(restoredot)delimiter(')>operator(,) string<delimiter(')content(right_shift)delimiter(')>operator(,) string<delimiter(')content(rint)delimiter(')>operator(,) string<delimiter(')content(roll)delimiter(')>operator(,)
        string<delimiter(')content(rollaxis)delimiter(')>operator(,) string<delimiter(')content(roots)delimiter(')>operator(,) string<delimiter(')content(rot90)delimiter(')>operator(,) string<delimiter(')content(round)delimiter(')>operator(,) string<delimiter(')content(round_)delimiter(')>operator(,) string<delimiter(')content(row_stack)delimiter(')>operator(,) string<delimiter(')content(s_)delimiter(')>operator(,)
        string<delimiter(')content(sample)delimiter(')>operator(,) string<delimiter(')content(savetxt)delimiter(')>operator(,) string<delimiter(')content(sctype2char)delimiter(')>operator(,) string<delimiter(')content(searchsorted)delimiter(')>operator(,) string<delimiter(')content(seed)delimiter(')>operator(,) string<delimiter(')content(select)delimiter(')>operator(,)
        string<delimiter(')content(set_numeric_ops)delimiter(')>operator(,) string<delimiter(')content(set_printoptions)delimiter(')>operator(,) string<delimiter(')content(set_string_function)delimiter(')>operator(,)
        string<delimiter(')content(setbufsize)delimiter(')>operator(,) string<delimiter(')content(setdiff1d)delimiter(')>operator(,) string<delimiter(')content(seterr)delimiter(')>operator(,) string<delimiter(')content(seterrcall)delimiter(')>operator(,) string<delimiter(')content(seterrobj)delimiter(')>operator(,)
        string<delimiter(')content(setfield)delimiter(')>operator(,) string<delimiter(')content(setflags)delimiter(')>operator(,) string<delimiter(')content(setmember1d)delimiter(')>operator(,) string<delimiter(')content(setxor1d)delimiter(')>operator(,) string<delimiter(')content(shape)delimiter(')>operator(,)
        string<delimiter(')content(show_config)delimiter(')>operator(,) string<delimiter(')content(shuffle)delimiter(')>operator(,) string<delimiter(')content(sign)delimiter(')>operator(,) string<delimiter(')content(signbit)delimiter(')>operator(,) string<delimiter(')content(sin)delimiter(')>operator(,) string<delimiter(')content(sinc)delimiter(')>operator(,) string<delimiter(')content(sinh)delimiter(')>operator(,)
        string<delimiter(')content(size)delimiter(')>operator(,) string<delimiter(')content(slice)delimiter(')>operator(,) string<delimiter(')content(solve)delimiter(')>operator(,) string<delimiter(')content(sometrue)delimiter(')>operator(,) string<delimiter(')content(sort)delimiter(')>operator(,) string<delimiter(')content(sort_complex)delimiter(')>operator(,) string<delimiter(')content(source)delimiter(')>operator(,)
        string<delimiter(')content(split)delimiter(')>operator(,) string<delimiter(')content(sqrt)delimiter(')>operator(,) string<delimiter(')content(square)delimiter(')>operator(,) string<delimiter(')content(squeeze)delimiter(')>operator(,) string<delimiter(')content(standard_normal)delimiter(')>operator(,) string<delimiter(')content(std)delimiter(')>operator(,)
        string<delimiter(')content(subtract)delimiter(')>operator(,) string<delimiter(')content(sum)delimiter(')>operator(,) string<delimiter(')content(svd)delimiter(')>operator(,) string<delimiter(')content(swapaxes)delimiter(')>operator(,) string<delimiter(')content(take)delimiter(')>operator(,) string<delimiter(')content(tan)delimiter(')>operator(,) string<delimiter(')content(tanh)delimiter(')>operator(,) string<delimiter(')content(tensordot)delimiter(')>operator(,)
        string<delimiter(')content(test)delimiter(')>operator(,) string<delimiter(')content(tile)delimiter(')>operator(,) string<delimiter(')content(tofile)delimiter(')>operator(,) string<delimiter(')content(tolist)delimiter(')>operator(,) string<delimiter(')content(tostring)delimiter(')>operator(,) string<delimiter(')content(trace)delimiter(')>operator(,) string<delimiter(')content(transpose)delimiter(')>operator(,)
        string<delimiter(')content(trapz)delimiter(')>operator(,) string<delimiter(')content(tri)delimiter(')>operator(,) string<delimiter(')content(tril)delimiter(')>operator(,) string<delimiter(')content(trim_zeros)delimiter(')>operator(,) string<delimiter(')content(triu)delimiter(')>operator(,) string<delimiter(')content(true_divide)delimiter(')>operator(,) string<delimiter(')content(typeDict)delimiter(')>operator(,)
        string<delimiter(')content(typename)delimiter(')>operator(,) string<delimiter(')content(uniform)delimiter(')>operator(,) string<delimiter(')content(union1d)delimiter(')>operator(,) string<delimiter(')content(unique)delimiter(')>operator(,) string<delimiter(')content(unique1d)delimiter(')>operator(,) string<delimiter(')content(unravel_index)delimiter(')>operator(,)
        string<delimiter(')content(unwrap)delimiter(')>operator(,) string<delimiter(')content(vander)delimiter(')>operator(,) string<delimiter(')content(var)delimiter(')>operator(,) string<delimiter(')content(vdot)delimiter(')>operator(,) string<delimiter(')content(vectorize)delimiter(')>operator(,) string<delimiter(')content(view)delimiter(')>operator(,) string<delimiter(')content(vonmises)delimiter(')>operator(,)
        string<delimiter(')content(vsplit)delimiter(')>operator(,) string<delimiter(')content(vstack)delimiter(')>operator(,) string<delimiter(')content(weibull)delimiter(')>operator(,) string<delimiter(')content(where)delimiter(')>operator(,) string<delimiter(')content(who)delimiter(')>operator(,) string<delimiter(')content(zeros)delimiter(')>operator(,) string<delimiter(')content(zeros_like)delimiter(')>
    operator(])operator(\))

    keyword(def) method(get_tokens_unprocessed)operator(()predefined_constant(self)operator(,) ident(text)operator(\))operator(:)
        keyword(for) ident(index)operator(,) ident(token)operator(,) ident(value) keyword(in) \
                ident(PythonLexer)operator(.)ident(get_tokens_unprocessed)operator(()predefined_constant(self)operator(,) ident(text)operator(\))operator(:)
            keyword(if) ident(token) keyword(is) ident(Name) keyword(and) ident(value) keyword(in) predefined_constant(self)operator(.)ident(EXTRA_KEYWORDS)operator(:)
                keyword(yield) ident(index)operator(,) ident(Keyword)operator(.)ident(Pseudo)operator(,) ident(value)
            keyword(else)operator(:)
                keyword(yield) ident(index)operator(,) ident(token)operator(,) ident(value)


keyword(class) class(SLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    For S, S-plus, and R source code.)content(
)content(
)content(    *New in Pygments 0.10.*)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(S)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(splus)delimiter(')>operator(,) string<delimiter(')content(s)delimiter(')>operator(,) string<delimiter(')content(r)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.S)delimiter(')>operator(,) string<delimiter(')content(*.R)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(text/S-plus)delimiter(')>operator(,) string<delimiter(')content(text/S)delimiter(')>operator(,) string<delimiter(')content(text/R)delimiter(')>operator(])

    ident(tokens) operator(=) operator({)
        string<delimiter(')content(comments)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(#.*$)delimiter(')>operator(,) ident(Comment)operator(.)ident(Single)operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(valid_name)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content([a-zA-Z][0-9a-zA-Z)content(\\.)content(_]+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(`.+`)delimiter(')>operator(,) ident(String)operator(.)ident(Backtick)operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(punctuation)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\[)content(|)content(\\])content(|)content(\\[)content(\\[)content(|)content(\\])content(\\])content(|)content(\\$)content(|)content(\\()content(|)content(\\\))content(|@|:::?|;|,)delimiter(')>operator(,) ident(Punctuation)operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(keywords)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(for(?=)content(\\s)content(*)content(\\()content(\)|while(?=)content(\\s)content(*)content(\\()content(\)|if(?=)content(\\s)content(*)content(\\()content(\)|(?<=)content(\\s)content(\)else|)delimiter(')>
             string<modifier(r)delimiter(')content((?<=)content(\\s)content(\)break(?=;|$\)|return(?=)content(\\s)content(*)content(\\()content(\)|function(?=)content(\\s)content(*)content(\\()content(\))delimiter(')>operator(,)
             ident(Keyword)operator(.)ident(Reserved)operator(\))
        operator(])operator(,)
        string<delimiter(')content(operators)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(<-|-|==|<=|>=|<|>|&&|&|!=)delimiter(')>operator(,) ident(Operator)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\*)content(|)content(\\+)content(|)content(\\^)content(|/|%%|%/%|=)delimiter(')>operator(,) ident(Operator)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(%in%|%*%)delimiter(')>operator(,) ident(Operator)operator(\))
        operator(])operator(,)
        string<delimiter(')content(builtin_symbols)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(NULL|NA|TRUE|FALSE)delimiter(')>operator(,) ident(Keyword)operator(.)ident(Constant)operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(numbers)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content((?<![0-9a-zA-Z)content(\\\))content(\\})content(\\])content(`)content(\\")content(]\)(?=)content(\\s)content(*\)[-)content(\\+)content(]?[0-9]+)delimiter(')>
             string<modifier(r)delimiter(')content(()content(\\.)content([0-9]*\)?(E[0-9][-)content(\\+)content(]?()content(\\.)content([0-9]*\)?\)?)delimiter(')>operator(,) ident(Number)operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(statements)delimiter(')>operator(:) operator([)
            ident(include)operator(()string<delimiter(')content(comments)delimiter(')>operator(\))operator(,)
            comment(# whitespaces)
            operator(()string<modifier(r)delimiter(')content(\\s)content(+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\")delimiter(')>operator(,) ident(String)operator(,) string<delimiter(')content(string_dquote)delimiter(')>operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(builtin_symbols)delimiter(')>operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(numbers)delimiter(')>operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(keywords)delimiter(')>operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(punctuation)delimiter(')>operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(operators)delimiter(')>operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(valid_name)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(root)delimiter(')>operator(:) operator([)
            ident(include)operator(()string<delimiter(')content(statements)delimiter(')>operator(\))operator(,)
            comment(# blocks:)
            operator(()string<modifier(r)delimiter(')content(\\{)content(|)content(\\})delimiter(')>operator(,) ident(Punctuation)operator(\))operator(,)
            comment(#(r'\\{', Punctuation, 'block'\),)
            operator(()string<modifier(r)delimiter(')content(.)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
        operator(])operator(,)
        comment(#'block': [)
        comment(#    include('statements'\),)
        comment(#    ('\\{', Punctuation, '#push'\),)
        comment(#    ('\\}', Punctuation, '#pop'\))
        comment(#],)
        string<delimiter(')content(string_dquote)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content([^)content(\\")content(]*)content(\\")delimiter(')>operator(,) ident(String)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
    operator(})

    keyword(def) method(analyse_text)operator(()ident(text)operator(\))operator(:)
        keyword(return) string<delimiter(')content(<-)delimiter(')> keyword(in) ident(text)
comment(# -*- coding: utf-8 -*-)
docstring<delimiter(""")content(
)content(    pygments.lexers.other)content(
)content(    ~~~~~~~~~~~~~~~~~~~~~)content(
)content(
)content(    Lexers for other languages.)content(
)content(
)content(    :copyright: Copyright 2006-2009 by the Pygments team, see AUTHORS.)content(
)content(    :license: BSD, see LICENSE for details.)content(
)delimiter(""")>

keyword(import) include(re)

keyword(from) include(pygments.lexer) keyword(import) include(Lexer)operator(,) include(RegexLexer)operator(,) include(include)operator(,) include(bygroups)operator(,) include(using)operator(,) \
     include(this)operator(,) include(do_insertions)
keyword(from) include(pygments.token) keyword(import) include(Error)operator(,) include(Punctuation)operator(,) \
     include(Text)operator(,) include(Comment)operator(,) include(Operator)operator(,) include(Keyword)operator(,) include(Name)operator(,) include(String)operator(,) include(Number)operator(,) include(Generic)
keyword(from) include(pygments.util) keyword(import) include(shebang_matches)
keyword(from) include(pygments.lexers.web) keyword(import) include(HtmlLexer)


ident(__all__) operator(=) operator([)string<delimiter(')content(SqlLexer)delimiter(')>operator(,) string<delimiter(')content(MySqlLexer)delimiter(')>operator(,) string<delimiter(')content(SqliteConsoleLexer)delimiter(')>operator(,) string<delimiter(')content(BrainfuckLexer)delimiter(')>operator(,)
           string<delimiter(')content(BashLexer)delimiter(')>operator(,) string<delimiter(')content(BatchLexer)delimiter(')>operator(,) string<delimiter(')content(BefungeLexer)delimiter(')>operator(,) string<delimiter(')content(RedcodeLexer)delimiter(')>operator(,)
           string<delimiter(')content(MOOCodeLexer)delimiter(')>operator(,) string<delimiter(')content(SmalltalkLexer)delimiter(')>operator(,) string<delimiter(')content(TcshLexer)delimiter(')>operator(,) string<delimiter(')content(LogtalkLexer)delimiter(')>operator(,)
           string<delimiter(')content(GnuplotLexer)delimiter(')>operator(,) string<delimiter(')content(PovrayLexer)delimiter(')>operator(,) string<delimiter(')content(AppleScriptLexer)delimiter(')>operator(,)
           string<delimiter(')content(BashSessionLexer)delimiter(')>operator(,) string<delimiter(')content(ModelicaLexer)delimiter(')>operator(,) string<delimiter(')content(RebolLexer)delimiter(')>operator(,) string<delimiter(')content(ABAPLexer)delimiter(')>operator(])

ident(line_re)  operator(=) ident(re)operator(.)ident(compile)operator(()string<delimiter(')content(.*?)char(\\n)delimiter(')>operator(\))


keyword(class) class(SqlLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Lexer for Structured Query Language. Currently, this lexer does)content(
)content(    not recognize any special syntax except ANSI SQL.)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(SQL)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(sql)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.sql)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(text/x-sql)delimiter(')>operator(])

    ident(flags) operator(=) ident(re)operator(.)ident(IGNORECASE)
    ident(tokens) operator(=) operator({)
        string<delimiter(')content(root)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\s)content(+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(--.*?)content(\\n)delimiter(')>operator(,) ident(Comment)operator(.)ident(Single)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(/)content(\\*)delimiter(')>operator(,) ident(Comment)operator(.)ident(Multiline)operator(,) string<delimiter(')content(multiline-comments)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((ABORT|ABS|ABSOLUTE|ACCESS|ADA|ADD|ADMIN|AFTER|AGGREGATE|)delimiter(')>
             string<modifier(r)delimiter(')content(ALIAS|ALL|ALLOCATE|ALTER|ANALYSE|ANALYZE|AND|ANY|ARE|AS|)delimiter(')>
             string<modifier(r)delimiter(')content(ASC|ASENSITIVE|ASSERTION|ASSIGNMENT|ASYMMETRIC|AT|ATOMIC|)delimiter(')>
             string<modifier(r)delimiter(')content(AUTHORIZATION|AVG|BACKWARD|BEFORE|BEGIN|BETWEEN|BITVAR|)delimiter(')>
             string<modifier(r)delimiter(')content(BIT_LENGTH|BOTH|BREADTH|BY|C|CACHE|CALL|CALLED|CARDINALITY|)delimiter(')>
             string<modifier(r)delimiter(')content(CASCADE|CASCADED|CASE|CAST|CATALOG|CATALOG_NAME|CHAIN|)delimiter(')>
             string<modifier(r)delimiter(')content(CHARACTERISTICS|CHARACTER_LENGTH|CHARACTER_SET_CATALOG|)delimiter(')>
             string<modifier(r)delimiter(')content(CHARACTER_SET_NAME|CHARACTER_SET_SCHEMA|CHAR_LENGTH|CHECK|)delimiter(')>
             string<modifier(r)delimiter(')content(CHECKED|CHECKPOINT|CLASS|CLASS_ORIGIN|CLOB|CLOSE|CLUSTER|)delimiter(')>
             string<modifier(r)delimiter(')content(COALSECE|COBOL|COLLATE|COLLATION|COLLATION_CATALOG|)delimiter(')>
             string<modifier(r)delimiter(')content(COLLATION_NAME|COLLATION_SCHEMA|COLUMN|COLUMN_NAME|)delimiter(')>
             string<modifier(r)delimiter(')content(COMMAND_FUNCTION|COMMAND_FUNCTION_CODE|COMMENT|COMMIT|)delimiter(')>
             string<modifier(r)delimiter(')content(COMMITTED|COMPLETION|CONDITION_NUMBER|CONNECT|CONNECTION|)delimiter(')>
             string<modifier(r)delimiter(')content(CONNECTION_NAME|CONSTRAINT|CONSTRAINTS|CONSTRAINT_CATALOG|)delimiter(')>
             string<modifier(r)delimiter(')content(CONSTRAINT_NAME|CONSTRAINT_SCHEMA|CONSTRUCTOR|CONTAINS|)delimiter(')>
             string<modifier(r)delimiter(')content(CONTINUE|CONVERSION|CONVERT|COPY|CORRESPONTING|COUNT|)delimiter(')>
             string<modifier(r)delimiter(')content(CREATE|CREATEDB|CREATEUSER|CROSS|CUBE|CURRENT|CURRENT_DATE|)delimiter(')>
             string<modifier(r)delimiter(')content(CURRENT_PATH|CURRENT_ROLE|CURRENT_TIME|CURRENT_TIMESTAMP|)delimiter(')>
             string<modifier(r)delimiter(')content(CURRENT_USER|CURSOR|CURSOR_NAME|CYCLE|DATA|DATABASE|)delimiter(')>
             string<modifier(r)delimiter(')content(DATETIME_INTERVAL_CODE|DATETIME_INTERVAL_PRECISION|DAY|)delimiter(')>
             string<modifier(r)delimiter(')content(DEALLOCATE|DECLARE|DEFAULT|DEFAULTS|DEFERRABLE|DEFERRED|)delimiter(')>
             string<modifier(r)delimiter(')content(DEFINED|DEFINER|DELETE|DELIMITER|DELIMITERS|DEREF|DESC|)delimiter(')>
             string<modifier(r)delimiter(')content(DESCRIBE|DESCRIPTOR|DESTROY|DESTRUCTOR|DETERMINISTIC|)delimiter(')>
             string<modifier(r)delimiter(')content(DIAGNOSTICS|DICTIONARY|DISCONNECT|DISPATCH|DISTINCT|DO|)delimiter(')>
             string<modifier(r)delimiter(')content(DOMAIN|DROP|DYNAMIC|DYNAMIC_FUNCTION|DYNAMIC_FUNCTION_CODE|)delimiter(')>
             string<modifier(r)delimiter(')content(EACH|ELSE|ENCODING|ENCRYPTED|END|END-EXEC|EQUALS|ESCAPE|EVERY|)delimiter(')>
             string<modifier(r)delimiter(')content(EXCEPT|ESCEPTION|EXCLUDING|EXCLUSIVE|EXEC|EXECUTE|EXISTING|)delimiter(')>
             string<modifier(r)delimiter(')content(EXISTS|EXPLAIN|EXTERNAL|EXTRACT|FALSE|FETCH|FINAL|FIRST|FOR|)delimiter(')>
             string<modifier(r)delimiter(')content(FORCE|FOREIGN|FORTRAN|FORWARD|FOUND|FREE|FREEZE|FROM|FULL|)delimiter(')>
             string<modifier(r)delimiter(')content(FUNCTION|G|GENERAL|GENERATED|GET|GLOBAL|GO|GOTO|GRANT|GRANTED|)delimiter(')>
             string<modifier(r)delimiter(')content(GROUP|GROUPING|HANDLER|HAVING|HIERARCHY|HOLD|HOST|IDENTITY|)delimiter(')>
             string<modifier(r)delimiter(')content(IGNORE|ILIKE|IMMEDIATE|IMMUTABLE|IMPLEMENTATION|IMPLICIT|IN|)delimiter(')>
             string<modifier(r)delimiter(')content(INCLUDING|INCREMENT|INDEX|INDITCATOR|INFIX|INHERITS|INITIALIZE|)delimiter(')>
             string<modifier(r)delimiter(')content(INITIALLY|INNER|INOUT|INPUT|INSENSITIVE|INSERT|INSTANTIABLE|)delimiter(')>
             string<modifier(r)delimiter(')content(INSTEAD|INTERSECT|INTO|INVOKER|IS|ISNULL|ISOLATION|ITERATE|JOIN|)delimiter(')>
             string<modifier(r)delimiter(')content(K|KEY|KEY_MEMBER|KEY_TYPE|LANCOMPILER|LANGUAGE|LARGE|LAST|)delimiter(')>
             string<modifier(r)delimiter(')content(LATERAL|LEADING|LEFT|LENGTH|LESS|LEVEL|LIKE|LILMIT|LISTEN|LOAD|)delimiter(')>
             string<modifier(r)delimiter(')content(LOCAL|LOCALTIME|LOCALTIMESTAMP|LOCATION|LOCATOR|LOCK|LOWER|M|)delimiter(')>
             string<modifier(r)delimiter(')content(MAP|MATCH|MAX|MAXVALUE|MESSAGE_LENGTH|MESSAGE_OCTET_LENGTH|)delimiter(')>
             string<modifier(r)delimiter(')content(MESSAGE_TEXT|METHOD|MIN|MINUTE|MINVALUE|MOD|MODE|MODIFIES|)delimiter(')>
             string<modifier(r)delimiter(')content(MODIFY|MONTH|MORE|MOVE|MUMPS|NAMES|NATIONAL|NATURAL|NCHAR|)delimiter(')>
             string<modifier(r)delimiter(')content(NCLOB|NEW|NEXT|NO|NOCREATEDB|NOCREATEUSER|NONE|NOT|NOTHING|)delimiter(')>
             string<modifier(r)delimiter(')content(NOTIFY|NOTNULL|NULL|NULLABLE|NULLIF|OBJECT|OCTET_LENGTH|OF|OFF|)delimiter(')>
             string<modifier(r)delimiter(')content(OFFSET|OIDS|OLD|ON|ONLY|OPEN|OPERATION|OPERATOR|OPTION|OPTIONS|)delimiter(')>
             string<modifier(r)delimiter(')content(OR|ORDER|ORDINALITY|OUT|OUTER|OUTPUT|OVERLAPS|OVERLAY|OVERRIDING|)delimiter(')>
             string<modifier(r)delimiter(')content(OWNER|PAD|PARAMETER|PARAMETERS|PARAMETER_MODE|PARAMATER_NAME|)delimiter(')>
             string<modifier(r)delimiter(')content(PARAMATER_ORDINAL_POSITION|PARAMETER_SPECIFIC_CATALOG|)delimiter(')>
             string<modifier(r)delimiter(')content(PARAMETER_SPECIFIC_NAME|PARAMATER_SPECIFIC_SCHEMA|PARTIAL|)delimiter(')>
             string<modifier(r)delimiter(')content(PASCAL|PENDANT|PLACING|PLI|POSITION|POSTFIX|PRECISION|PREFIX|)delimiter(')>
             string<modifier(r)delimiter(')content(PREORDER|PREPARE|PRESERVE|PRIMARY|PRIOR|PRIVILEGES|PROCEDURAL|)delimiter(')>
             string<modifier(r)delimiter(')content(PROCEDURE|PUBLIC|READ|READS|RECHECK|RECURSIVE|REF|REFERENCES|)delimiter(')>
             string<modifier(r)delimiter(')content(REFERENCING|REINDEX|RELATIVE|RENAME|REPEATABLE|REPLACE|RESET|)delimiter(')>
             string<modifier(r)delimiter(')content(RESTART|RESTRICT|RESULT|RETURN|RETURNED_LENGTH|)delimiter(')>
             string<modifier(r)delimiter(')content(RETURNED_OCTET_LENGTH|RETURNED_SQLSTATE|RETURNS|REVOKE|RIGHT|)delimiter(')>
             string<modifier(r)delimiter(')content(ROLE|ROLLBACK|ROLLUP|ROUTINE|ROUTINE_CATALOG|ROUTINE_NAME|)delimiter(')>
             string<modifier(r)delimiter(')content(ROUTINE_SCHEMA|ROW|ROWS|ROW_COUNT|RULE|SAVE_POINT|SCALE|SCHEMA|)delimiter(')>
             string<modifier(r)delimiter(')content(SCHEMA_NAME|SCOPE|SCROLL|SEARCH|SECOND|SECURITY|SELECT|SELF|)delimiter(')>
             string<modifier(r)delimiter(')content(SENSITIVE|SERIALIZABLE|SERVER_NAME|SESSION|SESSION_USER|SET|)delimiter(')>
             string<modifier(r)delimiter(')content(SETOF|SETS|SHARE|SHOW|SIMILAR|SIMPLE|SIZE|SOME|SOURCE|SPACE|)delimiter(')>
             string<modifier(r)delimiter(')content(SPECIFIC|SPECIFICTYPE|SPECIFIC_NAME|SQL|SQLCODE|SQLERROR|)delimiter(')>
             string<modifier(r)delimiter(')content(SQLEXCEPTION|SQLSTATE|SQLWARNINIG|STABLE|START|STATE|STATEMENT|)delimiter(')>
             string<modifier(r)delimiter(')content(STATIC|STATISTICS|STDIN|STDOUT|STORAGE|STRICT|STRUCTURE|STYPE|)delimiter(')>
             string<modifier(r)delimiter(')content(SUBCLASS_ORIGIN|SUBLIST|SUBSTRING|SUM|SYMMETRIC|SYSID|SYSTEM|)delimiter(')>
             string<modifier(r)delimiter(')content(SYSTEM_USER|TABLE|TABLE_NAME| TEMP|TEMPLATE|TEMPORARY|TERMINATE|)delimiter(')>
             string<modifier(r)delimiter(')content(THAN|THEN|TIMESTAMP|TIMEZONE_HOUR|TIMEZONE_MINUTE|TO|TOAST|)delimiter(')>
             string<modifier(r)delimiter(')content(TRAILING|TRANSATION|TRANSACTIONS_COMMITTED|)delimiter(')>
             string<modifier(r)delimiter(')content(TRANSACTIONS_ROLLED_BACK|TRANSATION_ACTIVE|TRANSFORM|)delimiter(')>
             string<modifier(r)delimiter(')content(TRANSFORMS|TRANSLATE|TRANSLATION|TREAT|TRIGGER|TRIGGER_CATALOG|)delimiter(')>
             string<modifier(r)delimiter(')content(TRIGGER_NAME|TRIGGER_SCHEMA|TRIM|TRUE|TRUNCATE|TRUSTED|TYPE|)delimiter(')>
             string<modifier(r)delimiter(')content(UNCOMMITTED|UNDER|UNENCRYPTED|UNION|UNIQUE|UNKNOWN|UNLISTEN|)delimiter(')>
             string<modifier(r)delimiter(')content(UNNAMED|UNNEST|UNTIL|UPDATE|UPPER|USAGE|USER|)delimiter(')>
             string<modifier(r)delimiter(')content(USER_DEFINED_TYPE_CATALOG|USER_DEFINED_TYPE_NAME|)delimiter(')>
             string<modifier(r)delimiter(')content(USER_DEFINED_TYPE_SCHEMA|USING|VACUUM|VALID|VALIDATOR|VALUES|)delimiter(')>
             string<modifier(r)delimiter(')content(VARIABLE|VERBOSE|VERSION|VIEW|VOLATILE|WHEN|WHENEVER|WHERE|)delimiter(')>
             string<modifier(r)delimiter(')content(WITH|WITHOUT|WORK|WRITE|YEAR|ZONE\))content(\\b)delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((ARRAY|BIGINT|BINARY|BIT|BLOB|BOOLEAN|CHAR|CHARACTER|DATE|)delimiter(')>
             string<modifier(r)delimiter(')content(DEC|DECIMAL|FLOAT|INT|INTEGER|INTERVAL|NUMBER|NUMERIC|REAL|)delimiter(')>
             string<modifier(r)delimiter(')content(SERIAL|SMALLINT|VARCHAR|VARYING|INT8|SERIAL8|TEXT\))content(\\b)delimiter(')>operator(,)
             ident(Name)operator(.)ident(Builtin)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([+*/<>=~!@#%^&|`?^-])delimiter(')>operator(,) ident(Operator)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([0-9]+)delimiter(')>operator(,) ident(Number)operator(.)ident(Integer)operator(\))operator(,)
            comment(# TODO: Backslash escapes?)
            operator(()string<modifier(r)delimiter(")content('(''|[^']\)*')delimiter(")>operator(,) ident(String)operator(.)ident(Single)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content("(""|[^"]\)*")delimiter(')>operator(,) ident(String)operator(.)ident(Symbol)operator(\))operator(,) comment(# not a real string literal in ANSI SQL)
            operator(()string<modifier(r)delimiter(')content([a-zA-Z_][a-zA-Z0-9_]*)delimiter(')>operator(,) ident(Name)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([;:(\))content(\\[)content(\\])content(,)content(\\.)content(])delimiter(')>operator(,) ident(Punctuation)operator(\))
        operator(])operator(,)
        string<delimiter(')content(multiline-comments)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(/)content(\\*)delimiter(')>operator(,) ident(Comment)operator(.)ident(Multiline)operator(,) string<delimiter(')content(multiline-comments)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\*)content(/)delimiter(')>operator(,) ident(Comment)operator(.)ident(Multiline)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([^/)content(\\*)content(]+)delimiter(')>operator(,) ident(Comment)operator(.)ident(Multiline)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([/*])delimiter(')>operator(,) ident(Comment)operator(.)ident(Multiline)operator(\))
        operator(])
    operator(})


keyword(class) class(MySqlLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Special lexer for MySQL.)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(MySQL)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(mysql)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(text/x-mysql)delimiter(')>operator(])

    ident(flags) operator(=) ident(re)operator(.)ident(IGNORECASE)
    ident(tokens) operator(=) operator({)
        string<delimiter(')content(root)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\s)content(+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((#|--)content(\\s)content(+\).*?)content(\\n)delimiter(')>operator(,) ident(Comment)operator(.)ident(Single)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(/)content(\\*)delimiter(')>operator(,) ident(Comment)operator(.)ident(Multiline)operator(,) string<delimiter(')content(multiline-comments)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([0-9]+)delimiter(')>operator(,) ident(Number)operator(.)ident(Integer)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([0-9]*)content(\\.)content([0-9]+(e[+-][0-9]+\))delimiter(')>operator(,) ident(Number)operator(.)ident(Float)operator(\))operator(,)
            comment(# TODO: add backslash escapes)
            operator(()string<modifier(r)delimiter(")content('(''|[^']\)*')delimiter(")>operator(,) ident(String)operator(.)ident(Single)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content("(""|[^"]\)*")delimiter(')>operator(,) ident(String)operator(.)ident(Double)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(")content(`(``|[^`]\)*`)delimiter(")>operator(,) ident(String)operator(.)ident(Symbol)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([+*/<>=~!@#%^&|`?^-])delimiter(')>operator(,) ident(Operator)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\b)content((tinyint|smallint|mediumint|int|integer|bigint|date|)delimiter(')>
             string<modifier(r)delimiter(')content(datetime|time|bit|bool|tinytext|mediumtext|longtext|text|)delimiter(')>
             string<modifier(r)delimiter(')content(tinyblob|mediumblob|longblob|blob|float|double|double)content(\\s)content(+)delimiter(')>
             string<modifier(r)delimiter(')content(precision|real|numeric|dec|decimal|timestamp|year|char|)delimiter(')>
             string<modifier(r)delimiter(')content(varchar|varbinary|varcharacter|enum|set\)()content(\\b)content(\\s)content(*\)()content(\\()content(\)?)delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Keyword)operator(.)ident(Type)operator(,) ident(Text)operator(,) ident(Punctuation)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\b)content((add|all|alter|analyze|and|as|asc|asensitive|before|between|)delimiter(')>
             string<modifier(r)delimiter(')content(bigint|binary|blob|both|by|call|cascade|case|change|char|)delimiter(')>
             string<modifier(r)delimiter(')content(character|check|collate|column|condition|constraint|continue|)delimiter(')>
             string<modifier(r)delimiter(')content(convert|create|cross|current_date|current_time|)delimiter(')>
             string<modifier(r)delimiter(')content(current_timestamp|current_user|cursor|database|databases|)delimiter(')>
             string<modifier(r)delimiter(')content(day_hour|day_microsecond|day_minute|day_second|dec|decimal|)delimiter(')>
             string<modifier(r)delimiter(')content(declare|default|delayed|delete|desc|describe|deterministic|)delimiter(')>
             string<modifier(r)delimiter(')content(distinct|distinctrow|div|double|drop|dual|each|else|elseif|)delimiter(')>
             string<modifier(r)delimiter(')content(enclosed|escaped|exists|exit|explain|fetch|float|float4|float8)delimiter(')>
             string<modifier(r)delimiter(')content(|for|force|foreign|from|fulltext|grant|group|having|)delimiter(')>
             string<modifier(r)delimiter(')content(high_priority|hour_microsecond|hour_minute|hour_second|if|)delimiter(')>
             string<modifier(r)delimiter(')content(ignore|in|index|infile|inner|inout|insensitive|insert|int|)delimiter(')>
             string<modifier(r)delimiter(')content(int1|int2|int3|int4|int8|integer|interval|into|is|iterate|)delimiter(')>
             string<modifier(r)delimiter(')content(join|key|keys|kill|leading|leave|left|like|limit|lines|load|)delimiter(')>
             string<modifier(r)delimiter(')content(localtime|localtimestamp|lock|long|loop|low_priority|match|)delimiter(')>
             string<modifier(r)delimiter(')content(minute_microsecond|minute_second|mod|modifies|natural|)delimiter(')>
             string<modifier(r)delimiter(')content(no_write_to_binlog|not|numeric|on|optimize|option|optionally|)delimiter(')>
             string<modifier(r)delimiter(')content(or|order|out|outer|outfile|precision|primary|procedure|purge|)delimiter(')>
             string<modifier(r)delimiter(')content(raid0|read|reads|real|references|regexp|release|rename|repeat|)delimiter(')>
             string<modifier(r)delimiter(')content(replace|require|restrict|return|revoke|right|rlike|schema|)delimiter(')>
             string<modifier(r)delimiter(')content(schemas|second_microsecond|select|sensitive|separator|set|)delimiter(')>
             string<modifier(r)delimiter(')content(show|smallint|soname|spatial|specific|sql|sql_big_result|)delimiter(')>
             string<modifier(r)delimiter(')content(sql_calc_found_rows|sql_small_result|sqlexception|sqlstate|)delimiter(')>
             string<modifier(r)delimiter(')content(sqlwarning|ssl|starting|straight_join|table|terminated|then|)delimiter(')>
             string<modifier(r)delimiter(')content(to|trailing|trigger|undo|union|unique|unlock|unsigned|update|)delimiter(')>
             string<modifier(r)delimiter(')content(usage|use|using|utc_date|utc_time|utc_timestamp|values|)delimiter(')>
             string<modifier(r)delimiter(')content(varying|when|where|while|with|write|x509|xor|year_month|)delimiter(')>
             string<modifier(r)delimiter(')content(zerofill\))content(\\b)delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
            comment(# TODO: this list is not complete)
            operator(()string<modifier(r)delimiter(')content(\\b)content((auto_increment|engine|charset|tables\))content(\\b)delimiter(')>operator(,) ident(Keyword)operator(.)ident(Pseudo)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((true|false|null\))delimiter(')>operator(,) ident(Name)operator(.)ident(Constant)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(([a-zA-Z_][a-zA-Z0-9_]*\)()content(\\s)content(*\)()content(\\()content(\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Name)operator(.)ident(Function)operator(,) ident(Text)operator(,) ident(Punctuation)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([a-zA-Z_][a-zA-Z0-9_]*)delimiter(')>operator(,) ident(Name)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(@[A-Za-z0-9]*[._]*[A-Za-z0-9]*)delimiter(')>operator(,) ident(Name)operator(.)ident(Variable)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([;:(\))content(\\[)content(\\])content(,)content(\\.)content(])delimiter(')>operator(,) ident(Punctuation)operator(\))
        operator(])operator(,)
        string<delimiter(')content(multiline-comments)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(/)content(\\*)delimiter(')>operator(,) ident(Comment)operator(.)ident(Multiline)operator(,) string<delimiter(')content(multiline-comments)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\*)content(/)delimiter(')>operator(,) ident(Comment)operator(.)ident(Multiline)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([^/)content(\\*)content(]+)delimiter(')>operator(,) ident(Comment)operator(.)ident(Multiline)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([/*])delimiter(')>operator(,) ident(Comment)operator(.)ident(Multiline)operator(\))
        operator(])
    operator(})


keyword(class) class(SqliteConsoleLexer)operator(()ident(Lexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Lexer for example sessions using sqlite3.)content(
)content(
)content(    *New in Pygments 0.11.*)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(sqlite3con)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(sqlite3)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.sqlite3-console)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(text/x-sqlite3-console)delimiter(')>operator(])

    keyword(def) method(get_tokens_unprocessed)operator(()predefined_constant(self)operator(,) ident(data)operator(\))operator(:)
        ident(sql) operator(=) ident(SqlLexer)operator(()operator(**)predefined_constant(self)operator(.)ident(options)operator(\))

        ident(curcode) operator(=) string<delimiter(')delimiter(')>
        ident(insertions) operator(=) operator([)operator(])
        keyword(for) ident(match) keyword(in) ident(line_re)operator(.)ident(finditer)operator(()ident(data)operator(\))operator(:)
            ident(line) operator(=) ident(match)operator(.)ident(group)operator(()operator(\))
            keyword(if) ident(line)operator(.)ident(startswith)operator(()string<delimiter(')content(sqlite> )delimiter(')>operator(\)) keyword(or) ident(line)operator(.)ident(startswith)operator(()string<delimiter(')content(   ...> )delimiter(')>operator(\))operator(:)
                ident(insertions)operator(.)ident(append)operator(()operator(()predefined(len)operator(()ident(curcode)operator(\))operator(,)
                                   operator([)operator(()integer(0)operator(,) ident(Generic)operator(.)ident(Prompt)operator(,) ident(line)operator([)operator(:)integer(8)operator(])operator(\))operator(])operator(\))operator(\))
                ident(curcode) operator(+=) ident(line)operator([)integer(8)operator(:)operator(])
            keyword(else)operator(:)
                keyword(if) ident(curcode)operator(:)
                    keyword(for) ident(item) keyword(in) ident(do_insertions)operator(()ident(insertions)operator(,)
                                              ident(sql)operator(.)ident(get_tokens_unprocessed)operator(()ident(curcode)operator(\))operator(\))operator(:)
                        keyword(yield) ident(item)
                    ident(curcode) operator(=) string<delimiter(')delimiter(')>
                    ident(insertions) operator(=) operator([)operator(])
                keyword(if) ident(line)operator(.)ident(startswith)operator(()string<delimiter(')content(SQL error: )delimiter(')>operator(\))operator(:)
                    keyword(yield) operator(()ident(match)operator(.)ident(start)operator(()operator(\))operator(,) ident(Generic)operator(.)ident(Traceback)operator(,) ident(line)operator(\))
                keyword(else)operator(:)
                    keyword(yield) operator(()ident(match)operator(.)ident(start)operator(()operator(\))operator(,) ident(Generic)operator(.)ident(Output)operator(,) ident(line)operator(\))
        keyword(if) ident(curcode)operator(:)
            keyword(for) ident(item) keyword(in) ident(do_insertions)operator(()ident(insertions)operator(,)
                                      ident(sql)operator(.)ident(get_tokens_unprocessed)operator(()ident(curcode)operator(\))operator(\))operator(:)
                keyword(yield) ident(item)


keyword(class) class(BrainfuckLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Lexer for the esoteric `BrainFuck <http://www.muppetlabs.com/~breadbox/bf/>`_)content(
)content(    language.)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(Brainfuck)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(brainfuck)delimiter(')>operator(,) string<delimiter(')content(bf)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.bf)delimiter(')>operator(,) string<delimiter(')content(*.b)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(application/x-brainfuck)delimiter(')>operator(])

    ident(tokens) operator(=) operator({)
        string<delimiter(')content(common)delimiter(')>operator(:) operator([)
            comment(# use different colors for different instruction types)
            operator(()string<modifier(r)delimiter(')content([.,]+)delimiter(')>operator(,) ident(Name)operator(.)ident(Tag)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([+-]+)delimiter(')>operator(,) ident(Name)operator(.)ident(Builtin)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([<>]+)delimiter(')>operator(,) ident(Name)operator(.)ident(Variable)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([^.,+)content(\\-)content(<>)content(\\[)content(\\])content(]+)delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(root)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\[)delimiter(')>operator(,) ident(Keyword)operator(,) string<delimiter(')content(loop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\])delimiter(')>operator(,) ident(Error)operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(common)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(loop)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\[)delimiter(')>operator(,) ident(Keyword)operator(,) string<delimiter(')content(#push)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\])delimiter(')>operator(,) ident(Keyword)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(common)delimiter(')>operator(\))operator(,)
        operator(])
    operator(})


keyword(class) class(BefungeLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Lexer for the esoteric `Befunge <http://en.wikipedia.org/wiki/Befunge>`_)content(
)content(    language.)content(
)content(
)content(    *New in Pygments 0.7.*)content(
)content(    )delimiter(""")>
    ident(name) operator(=) string<delimiter(')content(Befunge)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(befunge)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.befunge)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(application/x-befunge)delimiter(')>operator(])

    ident(tokens) operator(=) operator({)
        string<delimiter(')content(root)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content([0-9a-f])delimiter(')>operator(,) ident(Number)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([)content(\\+)content(\\*)content(/%!`-])delimiter(')>operator(,) ident(Operator)operator(\))operator(,) comment(# Traditional math)
            operator(()string<modifier(r)delimiter(')content([<>^v?)content(\\[)content(\\])content(rxjk])delimiter(')>operator(,) ident(Name)operator(.)ident(Variable)operator(\))operator(,) comment(# Move, imperatives)
            operator(()string<modifier(r)delimiter(')content([:)content(\\\\)content($.,n])delimiter(')>operator(,) ident(Name)operator(.)ident(Builtin)operator(\))operator(,) comment(# Stack ops, imperatives)
            operator(()string<modifier(r)delimiter(')content([|_mw])delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([{}])delimiter(')>operator(,) ident(Name)operator(.)ident(Tag)operator(\))operator(,) comment(# Befunge-98 stack ops)
            operator(()string<modifier(r)delimiter(')content(".*?")delimiter(')>operator(,) ident(String)operator(.)ident(Double)operator(\))operator(,) comment(# Strings don't appear to allow escapes)
            operator(()string<modifier(r)delimiter(')content(\\')content(.)delimiter(')>operator(,) ident(String)operator(.)ident(Single)operator(\))operator(,) comment(# Single character)
            operator(()string<modifier(r)delimiter(')content([#;])delimiter(')>operator(,) ident(Comment)operator(\))operator(,) comment(# Trampoline... depends on direction hit)
            operator(()string<modifier(r)delimiter(')content([pg&~=@iotsy])delimiter(')>operator(,) ident(Keyword)operator(\))operator(,) comment(# Misc)
            operator(()string<modifier(r)delimiter(')content([(\)A-Z])delimiter(')>operator(,) ident(Comment)operator(\))operator(,) comment(# Fingerprints)
            operator(()string<modifier(r)delimiter(')content(\\s)content(+)delimiter(')>operator(,) ident(Text)operator(\))operator(,) comment(# Whitespace doesn't matter)
        operator(])operator(,)
    operator(})



keyword(class) class(BashLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Lexer for (ba\)sh shell scripts.)content(
)content(
)content(    *New in Pygments 0.6.*)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(Bash)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(bash)delimiter(')>operator(,) string<delimiter(')content(sh)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.sh)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(application/x-sh)delimiter(')>operator(,) string<delimiter(')content(application/x-shellscript)delimiter(')>operator(])

    ident(tokens) operator(=) operator({)
        string<delimiter(')content(root)delimiter(')>operator(:) operator([)
            ident(include)operator(()string<delimiter(')content(basic)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\$)content(\\()content(\\()delimiter(')>operator(,) ident(Keyword)operator(,) string<delimiter(')content(math)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\$)content(\\()delimiter(')>operator(,) ident(Keyword)operator(,) string<delimiter(')content(paren)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\$)content({#?)delimiter(')>operator(,) ident(Keyword)operator(,) string<delimiter(')content(curly)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(`)delimiter(')>operator(,) ident(String)operator(.)ident(Backtick)operator(,) string<delimiter(')content(backticks)delimiter(')>operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(data)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(basic)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\b)content((if|fi|else|while|do|done|for|then|return|function|case|)delimiter(')>
             string<modifier(r)delimiter(')content(select|continue|until|esac|elif\))content(\\s)content(*)content(\\b)delimiter(')>operator(,)
             ident(Keyword)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\b)content((alias|bg|bind|break|builtin|caller|cd|command|compgen|)delimiter(')>
             string<modifier(r)delimiter(')content(complete|declare|dirs|disown|echo|enable|eval|exec|exit|)delimiter(')>
             string<modifier(r)delimiter(')content(export|false|fc|fg|getopts|hash|help|history|jobs|kill|let|)delimiter(')>
             string<modifier(r)delimiter(')content(local|logout|popd|printf|pushd|pwd|read|readonly|set|shift|)delimiter(')>
             string<modifier(r)delimiter(')content(shopt|source|suspend|test|time|times|trap|true|type|typeset|)delimiter(')>
             string<modifier(r)delimiter(')content(ulimit|umask|unalias|unset|wait\))content(\\s)content(*)content(\\b)content((?!)content(\\.)content(\))delimiter(')>operator(,)
             ident(Name)operator(.)ident(Builtin)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(#.*)content(\\n)delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\\\)content([)content(\\w)content(\\W)content(])delimiter(')>operator(,) ident(String)operator(.)ident(Escape)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(()content(\\b)content(\\w)content(+\)()content(\\s)content(*\)(=\))delimiter(')>operator(,) ident(bygroups)operator(()ident(Name)operator(.)ident(Variable)operator(,) ident(Text)operator(,) ident(Operator)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([)content(\\[)content(\\])content({}(\)=])delimiter(')>operator(,) ident(Operator)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(<<)content(\\s)content(*()content(\\')content(?\))content(\\\\)content(?()content(\\w)content(+\)[)content(\\w)content(\\W)content(]+?)content(\\2)delimiter(')>operator(,) ident(String)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(&&|)content(\\|)content(\\|)delimiter(')>operator(,) ident(Operator)operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(data)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\$)content(?"()content(\\\\)content(\\\\)content(|)content(\\\\)content([0-7]+|)content(\\\\)content(.|[^"]\)*")delimiter(')>operator(,) ident(String)operator(.)ident(Double)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(")content(\\$)content(?'()content(\\\\)content(\\\\)content(|)content(\\\\)content([0-7]+|)content(\\\\)content(.|[^']\)*')delimiter(")>operator(,) ident(String)operator(.)ident(Single)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(;)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\s)content(+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([^=)content(\\s)content(\\n)content(\\[)content(\\])content({}(\)$")content(\\')content(`)content(\\\\)content(<]+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\d)content(+(?= |)content(\\Z)content(\))delimiter(')>operator(,) ident(Number)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\$)content(#?()content(\\w)content(+|.\))delimiter(')>operator(,) ident(Name)operator(.)ident(Variable)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(<)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(curly)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(})delimiter(')>operator(,) ident(Keyword)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(:-)delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([a-zA-Z0-9_]+)delimiter(')>operator(,) ident(Name)operator(.)ident(Variable)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([^}:")content(\\')content(`$]+)delimiter(')>operator(,) ident(Punctuation)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(:)delimiter(')>operator(,) ident(Punctuation)operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(root)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(paren)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\\))delimiter(')>operator(,) ident(Keyword)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(root)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(math)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\\))content(\\\))delimiter(')>operator(,) ident(Keyword)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([-+*/%^|&]|)content(\\*)content(\\*)content(|)content(\\|)content(\\|)delimiter(')>operator(,) ident(Operator)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\d)content(+)delimiter(')>operator(,) ident(Number)operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(root)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(backticks)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(`)delimiter(')>operator(,) ident(String)operator(.)ident(Backtick)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(root)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
    operator(})

    keyword(def) method(analyse_text)operator(()ident(text)operator(\))operator(:)
        keyword(return) ident(shebang_matches)operator(()ident(text)operator(,) string<modifier(r)delimiter(')content((ba|z|\)sh)delimiter(')>operator(\))


keyword(class) class(BashSessionLexer)operator(()ident(Lexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Lexer for simplistic shell sessions.)content(
)content(
)content(    *New in Pygments 1.1.*)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(Bash Session)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(console)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.sh-session)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(application/x-shell-session)delimiter(')>operator(])

    keyword(def) method(get_tokens_unprocessed)operator(()predefined_constant(self)operator(,) ident(text)operator(\))operator(:)
        ident(bashlexer) operator(=) ident(BashLexer)operator(()operator(**)predefined_constant(self)operator(.)ident(options)operator(\))

        ident(pos) operator(=) integer(0)
        ident(curcode) operator(=) string<delimiter(')delimiter(')>
        ident(insertions) operator(=) operator([)operator(])

        keyword(for) ident(match) keyword(in) ident(line_re)operator(.)ident(finditer)operator(()ident(text)operator(\))operator(:)
            ident(line) operator(=) ident(match)operator(.)ident(group)operator(()operator(\))
            ident(m) operator(=) ident(re)operator(.)ident(match)operator(()string<modifier(r)delimiter(')content(^((?:|sh)content(\\S)content(*?|)content(\\w)content(+)content(\\S)content(+[@:])content(\\S)content(+(?:)content(\\s)content(+)content(\\S)content(+\)?|)content(\\[)content(\\S)content(+[@:])delimiter(')>
                         string<modifier(r)delimiter(')content([^)content(\\n)content(]+)content(\\])content(.+\)[$#%]\)(.*)content(\\n)content(?\))delimiter(')>operator(,) ident(line)operator(\))
            keyword(if) ident(m)operator(:)
                comment(# To support output lexers (say diff output\), the output)
                comment(# needs to be broken by prompts whenever the output lexer)
                comment(# changes.)
                keyword(if) keyword(not) ident(insertions)operator(:)
                    ident(pos) operator(=) ident(match)operator(.)ident(start)operator(()operator(\))

                ident(insertions)operator(.)ident(append)operator(()operator(()predefined(len)operator(()ident(curcode)operator(\))operator(,)
                                   operator([)operator(()integer(0)operator(,) ident(Generic)operator(.)ident(Prompt)operator(,) ident(m)operator(.)ident(group)operator(()integer(1)operator(\))operator(\))operator(])operator(\))operator(\))
                ident(curcode) operator(+=) ident(m)operator(.)ident(group)operator(()integer(2)operator(\))
            keyword(elif) ident(line)operator(.)ident(startswith)operator(()string<delimiter(')content(>)delimiter(')>operator(\))operator(:)
                ident(insertions)operator(.)ident(append)operator(()operator(()predefined(len)operator(()ident(curcode)operator(\))operator(,)
                                   operator([)operator(()integer(0)operator(,) ident(Generic)operator(.)ident(Prompt)operator(,) ident(line)operator([)operator(:)integer(1)operator(])operator(\))operator(])operator(\))operator(\))
                ident(curcode) operator(+=) ident(line)operator([)integer(1)operator(:)operator(])
            keyword(else)operator(:)
                keyword(if) ident(insertions)operator(:)
                    ident(toks) operator(=) ident(bashlexer)operator(.)ident(get_tokens_unprocessed)operator(()ident(curcode)operator(\))
                    keyword(for) ident(i)operator(,) ident(t)operator(,) ident(v) keyword(in) ident(do_insertions)operator(()ident(insertions)operator(,) ident(toks)operator(\))operator(:)
                        keyword(yield) ident(pos)operator(+)ident(i)operator(,) ident(t)operator(,) ident(v)
                keyword(yield) ident(match)operator(.)ident(start)operator(()operator(\))operator(,) ident(Generic)operator(.)ident(Output)operator(,) ident(line)
                ident(insertions) operator(=) operator([)operator(])
                ident(curcode) operator(=) string<delimiter(')delimiter(')>
        keyword(if) ident(insertions)operator(:)
            keyword(for) ident(i)operator(,) ident(t)operator(,) ident(v) keyword(in) ident(do_insertions)operator(()ident(insertions)operator(,)
                                         ident(bashlexer)operator(.)ident(get_tokens_unprocessed)operator(()ident(curcode)operator(\))operator(\))operator(:)
                keyword(yield) ident(pos)operator(+)ident(i)operator(,) ident(t)operator(,) ident(v)


keyword(class) class(BatchLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Lexer for the DOS/Windows Batch file format.)content(
)content(
)content(    *New in Pygments 0.7.*)content(
)content(    )delimiter(""")>
    ident(name) operator(=) string<delimiter(')content(Batchfile)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(bat)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.bat)delimiter(')>operator(,) string<delimiter(')content(*.cmd)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(application/x-dos-batch)delimiter(')>operator(])

    ident(flags) operator(=) ident(re)operator(.)ident(MULTILINE) operator(|) ident(re)operator(.)ident(IGNORECASE)

    ident(tokens) operator(=) operator({)
        string<delimiter(')content(root)delimiter(')>operator(:) operator([)
            comment(# Lines can start with @ to prevent echo)
            operator(()string<modifier(r)delimiter(')content(^)content(\\s)content(*@)delimiter(')>operator(,) ident(Punctuation)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(^()content(\\s)content(*\)(rem)content(\\s)content(.*\)$)delimiter(')>operator(,) ident(bygroups)operator(()ident(Text)operator(,) ident(Comment)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(".*?")delimiter(')>operator(,) ident(String)operator(.)ident(Double)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(")content('.*?')delimiter(")>operator(,) ident(String)operator(.)ident(Single)operator(\))operator(,)
            comment(# If made more specific, make sure you still allow expansions)
            comment(# like %~$VAR:zlt)
            operator(()string<modifier(r)delimiter(')content(%%?[~$:)content(\\w)content(]+%?)delimiter(')>operator(,) ident(Name)operator(.)ident(Variable)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(::.*)delimiter(')>operator(,) ident(Comment)operator(\))operator(,) comment(# Technically :: only works at BOL)
            operator(()string<modifier(r)delimiter(')content((set\)()content(\\s)content(+\)()content(\\w)content(+\))delimiter(')>operator(,) ident(bygroups)operator(()ident(Keyword)operator(,) ident(Text)operator(,) ident(Name)operator(.)ident(Variable)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((call\)()content(\\s)content(+\)(:)content(\\w)content(+\))delimiter(')>operator(,) ident(bygroups)operator(()ident(Keyword)operator(,) ident(Text)operator(,) ident(Name)operator(.)ident(Label)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((goto\)()content(\\s)content(+\)()content(\\w)content(+\))delimiter(')>operator(,) ident(bygroups)operator(()ident(Keyword)operator(,) ident(Text)operator(,) ident(Name)operator(.)ident(Label)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\b)content((set|call|echo|on|off|endlocal|for|do|goto|if|pause|)delimiter(')>
             string<modifier(r)delimiter(')content(setlocal|shift|errorlevel|exist|defined|cmdextversion|)delimiter(')>
             string<modifier(r)delimiter(')content(errorlevel|else|cd|md|del|deltree|cls|choice\))content(\\b)delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\b)content((equ|neq|lss|leq|gtr|geq\))content(\\b)delimiter(')>operator(,) ident(Operator)operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(basic)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(.)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(echo)delimiter(')>operator(:) operator([)
            comment(# Escapes only valid within echo args?)
            operator(()string<modifier(r)delimiter(')content(\\^)content(\\^)content(|)content(\\^)content(<|)content(\\^)content(>|)content(\\^)content(\\|)delimiter(')>operator(,) ident(String)operator(.)ident(Escape)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\n)delimiter(')>operator(,) ident(Text)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(basic)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([^)content(\\')content("^]+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(basic)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(".*?")delimiter(')>operator(,) ident(String)operator(.)ident(Double)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(")content('.*?')delimiter(")>operator(,) ident(String)operator(.)ident(Single)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(`.*?`)delimiter(')>operator(,) ident(String)operator(.)ident(Backtick)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(-?)content(\\d)content(+)delimiter(')>operator(,) ident(Number)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(,)delimiter(')>operator(,) ident(Punctuation)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(=)delimiter(')>operator(,) ident(Operator)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(/)content(\\S)content(+)delimiter(')>operator(,) ident(Name)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(:)content(\\w)content(+)delimiter(')>operator(,) ident(Name)operator(.)ident(Label)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\w)content(:)content(\\w)content(+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(([<>|]\)()content(\\s)content(*\)()content(\\w)content(+\))delimiter(')>operator(,) ident(bygroups)operator(()ident(Punctuation)operator(,) ident(Text)operator(,) ident(Name)operator(\))operator(\))operator(,)
        operator(])operator(,)
    operator(})


keyword(class) class(RedcodeLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    A simple Redcode lexer based on ICWS'94.)content(
)content(    Contributed by Adam Blinkinsop <blinks@acm.org>.)content(
)content(
)content(    *New in Pygments 0.8.*)content(
)content(    )delimiter(""")>
    ident(name) operator(=) string<delimiter(')content(Redcode)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(redcode)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.cw)delimiter(')>operator(])

    ident(opcodes) operator(=) operator([)string<delimiter(')content(DAT)delimiter(')>operator(,)string<delimiter(')content(MOV)delimiter(')>operator(,)string<delimiter(')content(ADD)delimiter(')>operator(,)string<delimiter(')content(SUB)delimiter(')>operator(,)string<delimiter(')content(MUL)delimiter(')>operator(,)string<delimiter(')content(DIV)delimiter(')>operator(,)string<delimiter(')content(MOD)delimiter(')>operator(,)
               string<delimiter(')content(JMP)delimiter(')>operator(,)string<delimiter(')content(JMZ)delimiter(')>operator(,)string<delimiter(')content(JMN)delimiter(')>operator(,)string<delimiter(')content(DJN)delimiter(')>operator(,)string<delimiter(')content(CMP)delimiter(')>operator(,)string<delimiter(')content(SLT)delimiter(')>operator(,)string<delimiter(')content(SPL)delimiter(')>operator(,)
               string<delimiter(')content(ORG)delimiter(')>operator(,)string<delimiter(')content(EQU)delimiter(')>operator(,)string<delimiter(')content(END)delimiter(')>operator(])
    ident(modifiers) operator(=) operator([)string<delimiter(')content(A)delimiter(')>operator(,)string<delimiter(')content(B)delimiter(')>operator(,)string<delimiter(')content(AB)delimiter(')>operator(,)string<delimiter(')content(BA)delimiter(')>operator(,)string<delimiter(')content(F)delimiter(')>operator(,)string<delimiter(')content(X)delimiter(')>operator(,)string<delimiter(')content(I)delimiter(')>operator(])

    ident(tokens) operator(=) operator({)
        string<delimiter(')content(root)delimiter(')>operator(:) operator([)
            comment(# Whitespace:)
            operator(()string<modifier(r)delimiter(')content(\\s)content(+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(;.*$)delimiter(')>operator(,) ident(Comment)operator(.)ident(Single)operator(\))operator(,)
            comment(# Lexemes:)
            comment(#  Identifiers)
            operator(()string<modifier(r)delimiter(')content(\\b)content((%s\))content(\\b)delimiter(')> operator(%) string<delimiter(')content(|)delimiter(')>operator(.)ident(join)operator(()ident(opcodes)operator(\))operator(,) ident(Name)operator(.)ident(Function)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\b)content((%s\))content(\\b)delimiter(')> operator(%) string<delimiter(')content(|)delimiter(')>operator(.)ident(join)operator(()ident(modifiers)operator(\))operator(,) ident(Name)operator(.)ident(Decorator)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([A-Za-z_][A-Za-z_0-9]+)delimiter(')>operator(,) ident(Name)operator(\))operator(,)
            comment(#  Operators)
            operator(()string<modifier(r)delimiter(')content([-+*/%])delimiter(')>operator(,) ident(Operator)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([#$@<>])delimiter(')>operator(,) ident(Operator)operator(\))operator(,) comment(# mode)
            operator(()string<modifier(r)delimiter(')content([.,])delimiter(')>operator(,) ident(Punctuation)operator(\))operator(,) comment(# mode)
            comment(#  Numbers)
            operator(()string<modifier(r)delimiter(')content([-+]?)content(\\d)content(+)delimiter(')>operator(,) ident(Number)operator(.)ident(Integer)operator(\))operator(,)
        operator(])operator(,)
    operator(})


keyword(class) class(MOOCodeLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    For `MOOCode <http://www.moo.mud.org/>`_ (the MOO scripting)content(
)content(    language\).)content(
)content(
)content(    *New in Pygments 0.9.*)content(
)content(    )delimiter(""")>
    ident(name) operator(=) string<delimiter(')content(MOOCode)delimiter(')>
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.moo)delimiter(')>operator(])
    ident(aliases) operator(=) operator([)string<delimiter(')content(moocode)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(text/x-moocode)delimiter(')>operator(])

    ident(tokens) operator(=) operator({)
        string<delimiter(')content(root)delimiter(')> operator(:) operator([)
            comment(# Numbers)
            operator(()string<modifier(r)delimiter(')content((0|[1-9][0-9_]*\))delimiter(')>operator(,) ident(Number)operator(.)ident(Integer)operator(\))operator(,)
            comment(# Strings)
            operator(()string<modifier(r)delimiter(')content("()content(\\\\)content(\\\\)content(|)content(\\\\)content("|[^"]\)*")delimiter(')>operator(,) ident(String)operator(\))operator(,)
            comment(# exceptions)
            operator(()string<modifier(r)delimiter(')content((E_PERM|E_DIV\))delimiter(')>operator(,) ident(Name)operator(.)ident(Exception)operator(\))operator(,)
            comment(# db-refs)
            operator(()string<modifier(r)delimiter(')content(((#[-0-9]+\)|()content(\\$)content([a-z_A-Z0-9]+\)\))delimiter(')>operator(,) ident(Name)operator(.)ident(Entity)operator(\))operator(,)
            comment(# Keywords)
            operator(()string<modifier(r)delimiter(')content(\\b)content((if|else|elseif|endif|for|endfor|fork|endfork|while)delimiter(')>
             string<modifier(r)delimiter(')content(|endwhile|break|continue|return|try)delimiter(')>
             string<modifier(r)delimiter(')content(|except|endtry|finally|in\))content(\\b)delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
            comment(# builtins)
            operator(()string<modifier(r)delimiter(')content((random|length\))delimiter(')>operator(,) ident(Name)operator(.)ident(Builtin)operator(\))operator(,)
            comment(# special variables)
            operator(()string<modifier(r)delimiter(')content((player|caller|this|args\))delimiter(')>operator(,) ident(Name)operator(.)ident(Variable)operator(.)ident(Instance)operator(\))operator(,)
            comment(# skip whitespace)
            operator(()string<modifier(r)delimiter(')content(\\s)content(+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\n)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            comment(# other operators)
            operator(()string<modifier(r)delimiter(')content(([!;=,{}&)content(\\|)content(:)content(\\.)content(\\[)content(\\])content(@)content(\\()content(\\\))content(\\<)content(\\>)content(\\?)content(]+\))delimiter(')>operator(,) ident(Operator)operator(\))operator(,)
            comment(# function call)
            operator(()string<modifier(r)delimiter(')content(([a-z_A-Z0-9]+\)()content(\\()content(\))delimiter(')>operator(,) ident(bygroups)operator(()ident(Name)operator(.)ident(Function)operator(,) ident(Operator)operator(\))operator(\))operator(,)
            comment(# variables)
            operator(()string<modifier(r)delimiter(')content(([a-zA-Z_0-9]+\))delimiter(')>operator(,) ident(Text)operator(\))operator(,)
        operator(])
    operator(})


keyword(class) class(SmalltalkLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    For `Smalltalk <http://www.smalltalk.org/>`_ syntax.)content(
)content(    Contributed by Stefan Matthias Aust.)content(
)content(    Rewritten by Nils Winter.)content(
)content(
)content(    *New in Pygments 0.10.*)content(
)content(    )delimiter(""")>
    ident(name) operator(=) string<delimiter(')content(Smalltalk)delimiter(')>
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.st)delimiter(')>operator(])
    ident(aliases) operator(=) operator([)string<delimiter(')content(smalltalk)delimiter(')>operator(,) string<delimiter(')content(squeak)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(text/x-smalltalk)delimiter(')>operator(])

    ident(tokens) operator(=) operator({)
        string<delimiter(')content(root)delimiter(')> operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content((<\)()content(\\w)content(+:\)(.*?\)(>\))delimiter(')>operator(,) ident(bygroups)operator(()ident(Text)operator(,) ident(Keyword)operator(,) ident(Text)operator(,) ident(Text)operator(\))operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(squeak fileout)delimiter(')>operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(whitespaces)delimiter(')>operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(method definition)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(()content(\\|)content(\)([)content(\\w)content(\\s)content(]*\)()content(\\|)content(\))delimiter(')>operator(,) ident(bygroups)operator(()ident(Operator)operator(,) ident(Name)operator(.)ident(Variable)operator(,) ident(Operator)operator(\))operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(objects)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\^)content(|)content(\\:)content(=|)content(\\_)delimiter(')>operator(,) ident(Operator)operator(\))operator(,)
            comment(# temporaries)
            operator(()string<modifier(r)delimiter(')content([)content(\\])content(({}.;!])delimiter(')>operator(,) ident(Text)operator(\))operator(,)

        operator(])operator(,)
        string<delimiter(')content(method definition)delimiter(')> operator(:) operator([)
            comment(# Not perfect can't allow whitespaces at the beginning and the)
            comment(# without breaking everything)
            operator(()string<modifier(r)delimiter(')content(([a-zA-Z]+)content(\\w)content(*:\)()content(\\s)content(*\)()content(\\w)content(+\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Name)operator(.)ident(Function)operator(,) ident(Text)operator(,) ident(Name)operator(.)ident(Variable)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(^()content(\\b)content([a-zA-Z]+)content(\\w)content(*)content(\\b)content(\)()content(\\s)content(*\)$)delimiter(')>operator(,) ident(bygroups)operator(()ident(Name)operator(.)ident(Function)operator(,) ident(Text)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(^([-+*/)content(\\\\)content(~<>=|&!?,@%]+\)()content(\\s)content(*\)()content(\\w)content(+\)()content(\\s)content(*\)$)delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Name)operator(.)ident(Function)operator(,) ident(Text)operator(,) ident(Name)operator(.)ident(Variable)operator(,) ident(Text)operator(\))operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(blockvariables)delimiter(')> operator(:) operator([)
            ident(include)operator(()string<delimiter(')content(whitespaces)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((:\)()content(\\s)content(*\)([A-Za-z)content(\\w)content(]+\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Operator)operator(,) ident(Text)operator(,) ident(Name)operator(.)ident(Variable)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\|)delimiter(')>operator(,) ident(Operator)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')delimiter(')>operator(,) ident(Text)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,) comment(# else pop)
        operator(])operator(,)
        string<delimiter(')content(literals)delimiter(')> operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\')content([^)content(\\')content(]*)content(\\')delimiter(')>operator(,) ident(String)operator(,) string<delimiter(')content(afterobject)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\$)content(.)delimiter(')>operator(,) ident(String)operator(.)ident(Char)operator(,) string<delimiter(')content(afterobject)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(#)content(\\()delimiter(')>operator(,) ident(String)operator(.)ident(Symbol)operator(,) string<delimiter(')content(parenth)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\\))delimiter(')>operator(,) ident(Text)operator(,) string<delimiter(')content(afterobject)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(()content(\\d)content(+r\)?-?)content(\\d)content(+()content(\\.)content(\\d)content(+\)?(e-?)content(\\d)content(+\)?)delimiter(')>operator(,) ident(Number)operator(,) string<delimiter(')content(afterobject)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(_parenth_helper)delimiter(')> operator(:) operator([)
            ident(include)operator(()string<delimiter(')content(whitespaces)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([-+*/)content(\\\\)content(~<>=|&#!?,@%)content(\\w)content(+:]+)delimiter(')>operator(,) ident(String)operator(.)ident(Symbol)operator(\))operator(,)
            comment(# literals)
            operator(()string<modifier(r)delimiter(')content(\\')content([^)content(\\')content(]*)content(\\')delimiter(')>operator(,) ident(String)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\$)content(.)delimiter(')>operator(,) ident(String)operator(.)ident(Char)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(()content(\\d)content(+r\)?-?)content(\\d)content(+()content(\\.)content(\\d)content(+\)?(e-?)content(\\d)content(+\)?)delimiter(')>operator(,) ident(Number)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(#*)content(\\()delimiter(')>operator(,) ident(String)operator(.)ident(Symbol)operator(,) string<delimiter(')content(inner_parenth)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(parenth)delimiter(')> operator(:) operator([)
            comment(# This state is a bit tricky since)
            comment(# we can't just pop this state)
            operator(()string<modifier(r)delimiter(')content(\\\))delimiter(')>operator(,) ident(String)operator(.)ident(Symbol)operator(,) operator(()string<delimiter(')content(root)delimiter(')>operator(,)string<delimiter(')content(afterobject)delimiter(')>operator(\))operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(_parenth_helper)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(inner_parenth)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\\))delimiter(')>operator(,) ident(String)operator(.)ident(Symbol)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(_parenth_helper)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(whitespaces)delimiter(')> operator(:) operator([)
            comment(# skip whitespace and comments)
            operator(()string<modifier(r)delimiter(')content(\\s)content(+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content("[^"]*")delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(objects)delimiter(')> operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\[)delimiter(')>operator(,) ident(Text)operator(,) string<delimiter(')content(blockvariables)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\])delimiter(')>operator(,) ident(Text)operator(,) string<delimiter(')content(afterobject)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\b)content((self|super|true|false|nil|thisContext\))content(\\b)delimiter(')>operator(,)
             ident(Name)operator(.)ident(Builtin)operator(.)ident(Pseudo)operator(,) string<delimiter(')content(afterobject)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\b)content([A-Z])content(\\w)content(*(?!:\))content(\\b)delimiter(')>operator(,) ident(Name)operator(.)ident(Class)operator(,) string<delimiter(')content(afterobject)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\b)content([a-z])content(\\w)content(*(?!:\))content(\\b)delimiter(')>operator(,) ident(Name)operator(.)ident(Variable)operator(,) string<delimiter(')content(afterobject)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(#("[^"]*"|[-+*/)content(\\\\)content(~<>=|&!?,@%]+|[)content(\\w)content(:]+\))delimiter(')>operator(,)
             ident(String)operator(.)ident(Symbol)operator(,) string<delimiter(')content(afterobject)delimiter(')>operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(literals)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(afterobject)delimiter(')> operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(! !$)delimiter(')>operator(,) ident(Keyword) operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,) comment(# squeak chunk delimeter)
            ident(include)operator(()string<delimiter(')content(whitespaces)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\b)content((ifTrue:|ifFalse:|whileTrue:|whileFalse:|timesRepeat:\))delimiter(')>operator(,)
             ident(Name)operator(.)ident(Builtin)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\b)content((new)content(\\b)content((?!:\)\))delimiter(')>operator(,) ident(Name)operator(.)ident(Builtin)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\:)content(=|)content(\\_)delimiter(')>operator(,) ident(Operator)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\b)content([a-zA-Z]+)content(\\w)content(*:)delimiter(')>operator(,) ident(Name)operator(.)ident(Function)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\b)content([a-zA-Z]+)content(\\w)content(*)delimiter(')>operator(,) ident(Name)operator(.)ident(Function)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\w)content(+:?|[-+*/)content(\\\\)content(~<>=|&!?,@%]+)delimiter(')>operator(,) ident(Name)operator(.)ident(Function)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\.)delimiter(')>operator(,) ident(Punctuation)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(;)delimiter(')>operator(,) ident(Punctuation)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([)content(\\])content(\)}])delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([)content(\\[)content(({])delimiter(')>operator(,) ident(Text)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(squeak fileout)delimiter(')> operator(:) operator([)
            comment(# Squeak fileout format (optional\))
            operator(()string<modifier(r)delimiter(')content(^"[^"]*"!)delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(")content(^'[^']*'!)delimiter(")>operator(,) ident(Keyword)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(^(!\)()content(\\w)content(+\)( commentStamp: \)(.*?\)( prior: .*?!)content(\\n)content(\)(.*?\)(!\))delimiter(')>operator(,)
                ident(bygroups)operator(()ident(Keyword)operator(,) ident(Name)operator(.)ident(Class)operator(,) ident(Keyword)operator(,) ident(String)operator(,) ident(Keyword)operator(,) ident(Text)operator(,) ident(Keyword)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(^(!\)()content(\\w)content(+(?: class\)?\)( methodsFor: \)()content(\\')content([^)content(\\')content(]*)content(\\')content(\)(.*?!\))delimiter(')>operator(,)
                ident(bygroups)operator(()ident(Keyword)operator(,) ident(Name)operator(.)ident(Class)operator(,) ident(Keyword)operator(,) ident(String)operator(,) ident(Keyword)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(^()content(\\w)content(+\)( subclass: \)(#)content(\\w)content(+\))delimiter(')>
             string<modifier(r)delimiter(')content(()content(\\s)content(+instanceVariableNames: \)(.*?\))delimiter(')>
             string<modifier(r)delimiter(')content(()content(\\s)content(+classVariableNames: \)(.*?\))delimiter(')>
             string<modifier(r)delimiter(')content(()content(\\s)content(+poolDictionaries: \)(.*?\))delimiter(')>
             string<modifier(r)delimiter(')content(()content(\\s)content(+category: \)(.*?\)(!\))delimiter(')>operator(,)
                ident(bygroups)operator(()ident(Name)operator(.)ident(Class)operator(,) ident(Keyword)operator(,) ident(String)operator(.)ident(Symbol)operator(,) ident(Keyword)operator(,) ident(String)operator(,) ident(Keyword)operator(,)
                         ident(String)operator(,) ident(Keyword)operator(,) ident(String)operator(,) ident(Keyword)operator(,) ident(String)operator(,) ident(Keyword)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(^()content(\\w)content(+(?: class\)?\)()content(\\s)content(+instanceVariableNames: \)(.*?\)(!\))delimiter(')>operator(,)
                ident(bygroups)operator(()ident(Name)operator(.)ident(Class)operator(,) ident(Keyword)operator(,) ident(String)operator(,) ident(Keyword)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((!)content(\\n)content(\)()content(\\])content(.*\)(! !\)$)delimiter(')>operator(,) ident(bygroups)operator(()ident(Keyword)operator(,) ident(Text)operator(,) ident(Keyword)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(! !$)delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
        operator(])operator(,)
    operator(})


keyword(class) class(TcshLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Lexer for tcsh scripts.)content(
)content(
)content(    *New in Pygments 0.10.*)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(Tcsh)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(tcsh)delimiter(')>operator(,) string<delimiter(')content(csh)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.tcsh)delimiter(')>operator(,) string<delimiter(')content(*.csh)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(application/x-csh)delimiter(')>operator(])

    ident(tokens) operator(=) operator({)
        string<delimiter(')content(root)delimiter(')>operator(:) operator([)
            ident(include)operator(()string<delimiter(')content(basic)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\$)content(\\()delimiter(')>operator(,) ident(Keyword)operator(,) string<delimiter(')content(paren)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\$)content({#?)delimiter(')>operator(,) ident(Keyword)operator(,) string<delimiter(')content(curly)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(`)delimiter(')>operator(,) ident(String)operator(.)ident(Backtick)operator(,) string<delimiter(')content(backticks)delimiter(')>operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(data)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(basic)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\b)content((if|endif|else|while|then|foreach|case|default|)delimiter(')>
             string<modifier(r)delimiter(')content(continue|goto|breaksw|end|switch|endsw\))content(\\s)content(*)content(\\b)delimiter(')>operator(,)
             ident(Keyword)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\b)content((alias|alloc|bg|bindkey|break|builtins|bye|caller|cd|chdir|)delimiter(')>
             string<modifier(r)delimiter(')content(complete|dirs|echo|echotc|eval|exec|exit|)delimiter(')>
             string<modifier(r)delimiter(')content(fg|filetest|getxvers|glob|getspath|hashstat|history|hup|inlib|jobs|kill|)delimiter(')>
             string<modifier(r)delimiter(')content(limit|log|login|logout|ls-F|migrate|newgrp|nice|nohup|notify|)delimiter(')>
             string<modifier(r)delimiter(')content(onintr|popd|printenv|pushd|rehash|repeat|rootnode|popd|pushd|set|shift|)delimiter(')>
             string<modifier(r)delimiter(')content(sched|setenv|setpath|settc|setty|setxvers|shift|source|stop|suspend|)delimiter(')>
             string<modifier(r)delimiter(')content(source|suspend|telltc|time|)delimiter(')>
             string<modifier(r)delimiter(')content(umask|unalias|uncomplete|unhash|universe|unlimit|unset|unsetenv|)delimiter(')>
             string<modifier(r)delimiter(')content(ver|wait|warp|watchlog|where|which\))content(\\s)content(*)content(\\b)delimiter(')>operator(,)
             ident(Name)operator(.)ident(Builtin)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(#.*)content(\\n)delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\\\)content([)content(\\w)content(\\W)content(])delimiter(')>operator(,) ident(String)operator(.)ident(Escape)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(()content(\\b)content(\\w)content(+\)()content(\\s)content(*\)(=\))delimiter(')>operator(,) ident(bygroups)operator(()ident(Name)operator(.)ident(Variable)operator(,) ident(Text)operator(,) ident(Operator)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([)content(\\[)content(\\])content({}(\)=]+)delimiter(')>operator(,) ident(Operator)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(<<)content(\\s)content(*()content(\\')content(?\))content(\\\\)content(?()content(\\w)content(+\)[)content(\\w)content(\\W)content(]+?)content(\\2)delimiter(')>operator(,) ident(String)operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(data)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content("()content(\\\\)content(\\\\)content(|)content(\\\\)content([0-7]+|)content(\\\\)content(.|[^"]\)*")delimiter(')>operator(,) ident(String)operator(.)ident(Double)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(")content('()content(\\\\)content(\\\\)content(|)content(\\\\)content([0-7]+|)content(\\\\)content(.|[^']\)*')delimiter(")>operator(,) ident(String)operator(.)ident(Single)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\s)content(+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([^=)content(\\s)content(\\n)content(\\[)content(\\])content({}(\)$")content(\\')content(`)content(\\\\)content(]+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\d)content(+(?= |)content(\\Z)content(\))delimiter(')>operator(,) ident(Number)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\$)content(#?()content(\\w)content(+|.\))delimiter(')>operator(,) ident(Name)operator(.)ident(Variable)operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(curly)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(})delimiter(')>operator(,) ident(Keyword)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(:-)delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([a-zA-Z0-9_]+)delimiter(')>operator(,) ident(Name)operator(.)ident(Variable)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([^}:")content(\\')content(`$]+)delimiter(')>operator(,) ident(Punctuation)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(:)delimiter(')>operator(,) ident(Punctuation)operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(root)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(paren)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\\))delimiter(')>operator(,) ident(Keyword)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(root)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(backticks)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(`)delimiter(')>operator(,) ident(String)operator(.)ident(Backtick)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(root)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
    operator(})


keyword(class) class(LogtalkLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    For `Logtalk <http://logtalk.org/>`_ source code.)content(
)content(
)content(    *New in Pygments 0.10.*)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(Logtalk)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(logtalk)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.lgt)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(text/x-logtalk)delimiter(')>operator(])

    ident(tokens) operator(=) operator({)
        string<delimiter(')content(root)delimiter(')>operator(:) operator([)
            comment(# Directives)
            operator(()string<modifier(r)delimiter(')content(^)content(\\s)content(*:-)content(\\s)delimiter(')>operator(,)ident(Punctuation)operator(,)string<delimiter(')content(directive)delimiter(')>operator(\))operator(,)
            comment(# Comments)
            operator(()string<modifier(r)delimiter(')content(%.*?)content(\\n)delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(/)content(\\*)content((.|)content(\\n)content(\)*?)content(\\*)content(/)delimiter(')>operator(,)ident(Comment)operator(\))operator(,)
            comment(# Whitespace)
            operator(()string<modifier(r)delimiter(')content(\\n)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\s)content(+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            comment(# Numbers)
            operator(()string<modifier(r)delimiter(")content(0'.)delimiter(")>operator(,) ident(Number)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(0b[01]+)delimiter(')>operator(,) ident(Number)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(0o[0-7]+)delimiter(')>operator(,) ident(Number)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(0x[0-9a-fA-F]+)delimiter(')>operator(,) ident(Number)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\d)content(+)content(\\.)content(?)content(\\d)content(*((e|E\)()content(\\+)content(|-\)?)content(\\d)content(+\)?)delimiter(')>operator(,) ident(Number)operator(\))operator(,)
            comment(# Variables)
            operator(()string<modifier(r)delimiter(')content(([A-Z_][a-zA-Z0-9_]*\))delimiter(')>operator(,) ident(Name)operator(.)ident(Variable)operator(\))operator(,)
            comment(# Event handlers)
            operator(()string<modifier(r)delimiter(')content((after|before\)(?=[(]\))delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
            comment(# Execution-context methods)
            operator(()string<modifier(r)delimiter(')content((parameter|this|se(lf|nder\)\)(?=[(]\))delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
            comment(# Reflection)
            operator(()string<modifier(r)delimiter(')content((current_predicate|predicate_property\)(?=[(]\))delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
            comment(# DCGs and term expansion)
            operator(()string<modifier(r)delimiter(')content((expand_term|(goal|term\)_expansion|phrase\)(?=[(]\))delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
            comment(# Entity)
            operator(()string<modifier(r)delimiter(')content((abolish|c(reate|urrent\)\)_(object|protocol|category\)(?=[(]\))delimiter(')>operator(,)
             ident(Keyword)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((object|protocol|category\)_property(?=[(]\))delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
            comment(# Entity relations)
            operator(()string<modifier(r)delimiter(')content(complements_object(?=[(]\))delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(extends_(object|protocol|category\)(?=[(]\))delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(imp(lements_protocol|orts_category\)(?=[(]\))delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((instantiat|specializ\)es_class(?=[(]\))delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
            comment(# Events)
            operator(()string<modifier(r)delimiter(')content((current_event|(abolish|define\)_events\)(?=[(]\))delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
            comment(# Flags)
            operator(()string<modifier(r)delimiter(')content((current|set\)_logtalk_flag(?=[(]\))delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
            comment(# Compiling, loading, and library paths)
            operator(()string<modifier(r)delimiter(')content(logtalk_(compile|l(ibrary_path|oad\)\)(?=[(]\))delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
            comment(# Database)
            operator(()string<modifier(r)delimiter(')content((clause|retract(all\)?\)(?=[(]\))delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(a(bolish|ssert(a|z\)\)(?=[(]\))delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
            comment(# Control)
            operator(()string<modifier(r)delimiter(')content((ca(ll|tch\)|throw\)(?=[(]\))delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((fail|true\))content(\\b)delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
            comment(# All solutions)
            operator(()string<modifier(r)delimiter(')content(((bag|set\)of|f(ind|or\)all\)(?=[(]\))delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
            comment(# Multi-threading meta-predicates)
            operator(()string<modifier(r)delimiter(')content(threaded(_(call|once|ignore|exit|peek|wait|notify\)\)?(?=[(]\))delimiter(')>operator(,)
             ident(Keyword)operator(\))operator(,)
            comment(# Term unification)
            operator(()string<modifier(r)delimiter(')content(unify_with_occurs_check(?=[(]\))delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
            comment(# Term creation and decomposition)
            operator(()string<modifier(r)delimiter(')content((functor|arg|copy_term\)(?=[(]\))delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
            comment(# Evaluable functors)
            operator(()string<modifier(r)delimiter(')content((rem|mod|abs|sign\)(?=[(]\))delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(float(_(integer|fractional\)_part\)?(?=[(]\))delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((floor|truncate|round|ceiling\)(?=[(]\))delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
            comment(# Other arithmetic functors)
            operator(()string<modifier(r)delimiter(')content((cos|atan|exp|log|s(in|qrt\)\)(?=[(]\))delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
            comment(# Term testing)
            operator(()string<modifier(r)delimiter(')content((var|atom(ic\)?|integer|float|compound|n(onvar|umber\)\)(?=[(]\))delimiter(')>operator(,)
             ident(Keyword)operator(\))operator(,)
            comment(# Stream selection and control)
            operator(()string<modifier(r)delimiter(')content((curren|se\)t_(in|out\)put(?=[(]\))delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((open|close\)(?=[(]\))delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(flush_output(?=[(]\))delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((at_end_of_stream|flush_output\))content(\\b)delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((stream_property|at_end_of_stream|set_stream_position\)(?=[(]\))delimiter(')>operator(,)
             ident(Keyword)operator(\))operator(,)
            comment(# Character and byte input/output)
            operator(()string<modifier(r)delimiter(')content((nl|(get|peek|put\)_(byte|c(har|ode\)\)\)(?=[(]\))delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\b)content(nl)content(\\b)delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
            comment(# Term input/output)
            operator(()string<modifier(r)delimiter(')content(read(_term\)?(?=[(]\))delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(write(q|_(canonical|term\)\)?(?=[(]\))delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((current_\)?op(?=[(]\))delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((current_\)?char_conversion(?=[(]\))delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
            comment(# Atomic term processing)
            operator(()string<modifier(r)delimiter(')content(atom_(length|c(hars|o(ncat|des\)\)\)(?=[(]\))delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((char_code|sub_atom\)(?=[(]\))delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(number_c(har|ode\)s(?=[(]\))delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
            comment(# Implementation defined hooks functions)
            operator(()string<modifier(r)delimiter(')content((se|curren\)t_prolog_flag(?=[(]\))delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\b)content(halt)content(\\b)delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(halt(?=[(]\))delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
            comment(# Message sending operators)
            operator(()string<modifier(r)delimiter(')content((::|:|)content(\\^)content(\\^)content(\))delimiter(')>operator(,) ident(Operator)operator(\))operator(,)
            comment(# External call)
            operator(()string<modifier(r)delimiter(')content([{}])delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
            comment(# Logic and control)
            operator(()string<modifier(r)delimiter(')content(\\b)content(once(?=[(]\))delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\b)content(repeat)content(\\b)delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
            comment(# Bitwise functors)
            operator(()string<modifier(r)delimiter(')content((>>|<<|/)content(\\\\)content(|)content(\\\\)content(\\\\)content(|)content(\\\\)content(\))delimiter(')>operator(,) ident(Operator)operator(\))operator(,)
            comment(# Arithemtic evaluation)
            operator(()string<modifier(r)delimiter(')content(\\b)content(is)content(\\b)delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
            comment(# Arithemtic comparison)
            operator(()string<modifier(r)delimiter(')content((=:=|=)content(\\\\)content(=|<|=<|>=|>\))delimiter(')>operator(,) ident(Operator)operator(\))operator(,)
            comment(# Term creation and decomposition)
            operator(()string<modifier(r)delimiter(')content(=)content(\\.)content(\\.)delimiter(')>operator(,) ident(Operator)operator(\))operator(,)
            comment(# Term unification)
            operator(()string<modifier(r)delimiter(')content((=|)content(\\\\)content(=\))delimiter(')>operator(,) ident(Operator)operator(\))operator(,)
            comment(# Term comparison)
            operator(()string<modifier(r)delimiter(')content((==|)content(\\\\)content(==|@=<|@<|@>=|@>\))delimiter(')>operator(,) ident(Operator)operator(\))operator(,)
            comment(# Evaluable functors)
            operator(()string<modifier(r)delimiter(')content((//|[-+*/]\))delimiter(')>operator(,) ident(Operator)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\b)content((mod|rem\))content(\\b)delimiter(')>operator(,) ident(Operator)operator(\))operator(,)
            comment(# Other arithemtic functors)
            operator(()string<modifier(r)delimiter(')content(\\b)content(\\*)content(\\*)content(\\b)delimiter(')>operator(,) ident(Operator)operator(\))operator(,)
            comment(# DCG rules)
            operator(()string<modifier(r)delimiter(')content(-->)delimiter(')>operator(,) ident(Operator)operator(\))operator(,)
            comment(# Control constructs)
            operator(()string<modifier(r)delimiter(')content(([!;]|->\))delimiter(')>operator(,) ident(Operator)operator(\))operator(,)
            comment(# Logic and control)
            operator(()string<modifier(r)delimiter(')content(\\\\)content(+)delimiter(')>operator(,) ident(Operator)operator(\))operator(,)
            comment(# Mode operators)
            operator(()string<modifier(r)delimiter(')content([?@])delimiter(')>operator(,) ident(Operator)operator(\))operator(,)
            comment(# Strings)
            operator(()string<modifier(r)delimiter(')content("()content(\\\\)content(\\\\)content(|)content(\\\\)content("|[^"]\)*")delimiter(')>operator(,) ident(String)operator(\))operator(,)
            comment(# Ponctuation)
            operator(()string<modifier(r)delimiter(')content([(\))content(\\[)content(\\])content(,.|])delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            comment(# Atoms)
            operator(()string<modifier(r)delimiter(")content([a-z][a-zA-Z0-9_]*)delimiter(")>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(")content(['])delimiter(")>operator(,) ident(String)operator(,) string<delimiter(')content(quoted_atom)delimiter(')>operator(\))operator(,)
        operator(])operator(,)

        string<delimiter(')content(quoted_atom)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(")content([']['])delimiter(")>operator(,) ident(String)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(")content(['])delimiter(")>operator(,) ident(String)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\\\)content(([)content(\\\\)content(abfnrtv")content(\\')content(]|(x[a-fA-F0-9]+|[0-7]+\))content(\\\\)content(\))delimiter(')>operator(,) ident(String)operator(.)ident(Escape)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(")content([^)content(\\\\)content(')content(\\n)content(]+)delimiter(")>operator(,) ident(String)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\\\)delimiter(')>operator(,) ident(String)operator(\))operator(,)
        operator(])operator(,)

        string<delimiter(')content(directive)delimiter(')>operator(:) operator([)
            comment(# Entity directives)
            operator(()string<modifier(r)delimiter(')content((category|object|protocol\)(?=[(]\))delimiter(')>operator(,) ident(Keyword)operator(,) string<delimiter(')content(entityrelations)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((end_(category|object|protocol\)\)[.])delimiter(')>operator(,)ident(Keyword)operator(,) string<delimiter(')content(root)delimiter(')>operator(\))operator(,)
            comment(# Predicate scope directives)
            operator(()string<modifier(r)delimiter(')content((public|protected|private\)(?=[(]\))delimiter(')>operator(,) ident(Keyword)operator(,) string<delimiter(')content(root)delimiter(')>operator(\))operator(,)
            comment(# Other directives)
            operator(()string<modifier(r)delimiter(')content(e(ncoding|xport\)(?=[(]\))delimiter(')>operator(,) ident(Keyword)operator(,) string<delimiter(')content(root)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(in(fo|itialization\)(?=[(]\))delimiter(')>operator(,) ident(Keyword)operator(,) string<delimiter(')content(root)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((dynamic|synchronized|threaded\)[.])delimiter(')>operator(,) ident(Keyword)operator(,) string<delimiter(')content(root)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((alias|d(ynamic|iscontiguous\)|m(eta_predicate|ode|ultifile\))delimiter(')>
             string<modifier(r)delimiter(')content(|synchronized\)(?=[(]\))delimiter(')>operator(,) ident(Keyword)operator(,) string<delimiter(')content(root)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(op(?=[(]\))delimiter(')>operator(,) ident(Keyword)operator(,) string<delimiter(')content(root)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((calls|use(s|_module\)\)(?=[(]\))delimiter(')>operator(,) ident(Keyword)operator(,) string<delimiter(')content(root)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([a-z][a-zA-Z0-9_]*(?=[(]\))delimiter(')>operator(,) ident(Text)operator(,) string<delimiter(')content(root)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([a-z][a-zA-Z0-9_]*[.])delimiter(')>operator(,) ident(Text)operator(,) string<delimiter(')content(root)delimiter(')>operator(\))operator(,)
        operator(])operator(,)

        string<delimiter(')content(entityrelations)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content((extends|i(nstantiates|mp(lements|orts\)\)|specializes\)(?=[(]\))delimiter(')>operator(,)
             ident(Keyword)operator(\))operator(,)
            comment(# Numbers)
            operator(()string<modifier(r)delimiter(")content(0'.)delimiter(")>operator(,) ident(Number)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(0b[01]+)delimiter(')>operator(,) ident(Number)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(0o[0-7]+)delimiter(')>operator(,) ident(Number)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(0x[0-9a-fA-F]+)delimiter(')>operator(,) ident(Number)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\d)content(+)content(\\.)content(?)content(\\d)content(*((e|E\)()content(\\+)content(|-\)?)content(\\d)content(+\)?)delimiter(')>operator(,) ident(Number)operator(\))operator(,)
            comment(# Variables)
            operator(()string<modifier(r)delimiter(')content(([A-Z_][a-zA-Z0-9_]*\))delimiter(')>operator(,) ident(Name)operator(.)ident(Variable)operator(\))operator(,)
            comment(# Atoms)
            operator(()string<modifier(r)delimiter(")content([a-z][a-zA-Z0-9_]*)delimiter(")>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(")content(['])delimiter(")>operator(,) ident(String)operator(,) string<delimiter(')content(quoted_atom)delimiter(')>operator(\))operator(,)
            comment(# Strings)
            operator(()string<modifier(r)delimiter(')content("()content(\\\\)content(\\\\)content(|)content(\\\\)content("|[^"]\)*")delimiter(')>operator(,) ident(String)operator(\))operator(,)
            comment(# End of entity-opening directive)
            operator(()string<modifier(r)delimiter(')content(([\)])content(\\.)content(\))delimiter(')>operator(,) ident(Text)operator(,) string<delimiter(')content(root)delimiter(')>operator(\))operator(,)
            comment(# Scope operator)
            operator(()string<modifier(r)delimiter(')content((::\))delimiter(')>operator(,) ident(Operator)operator(\))operator(,)
            comment(# Ponctuation)
            operator(()string<modifier(r)delimiter(')content([(\))content(\\[)content(\\])content(,.|])delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            comment(# Comments)
            operator(()string<modifier(r)delimiter(')content(%.*?)content(\\n)delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(/)content(\\*)content((.|)content(\\n)content(\)*?)content(\\*)content(/)delimiter(')>operator(,)ident(Comment)operator(\))operator(,)
            comment(# Whitespace)
            operator(()string<modifier(r)delimiter(')content(\\n)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\s)content(+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
        operator(])
    operator(})


keyword(def) method(_shortened)operator(()ident(word)operator(\))operator(:)
    ident(dpos) operator(=) ident(word)operator(.)ident(find)operator(()string<delimiter(')content($)delimiter(')>operator(\))
    keyword(return) string<delimiter(')content(|)delimiter(')>operator(.)ident(join)operator(()operator([)ident(word)operator([)operator(:)ident(dpos)operator(]) operator(+) ident(word)operator([)ident(dpos)operator(+)integer(1)operator(:)ident(i)operator(]) operator(+) string<modifier(r)delimiter(')content(\\b)delimiter(')>
                     keyword(for) ident(i) keyword(in) predefined(range)operator(()predefined(len)operator(()ident(word)operator(\))operator(,) ident(dpos)operator(,) operator(-)integer(1)operator(\))operator(])operator(\))
keyword(def) method(_shortened_many)operator(()operator(*)ident(words)operator(\))operator(:)
    keyword(return) string<delimiter(')content(|)delimiter(')>operator(.)ident(join)operator(()predefined(map)operator(()ident(_shortened)operator(,) ident(words)operator(\))operator(\))

keyword(class) class(GnuplotLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    For `Gnuplot <http://gnuplot.info/>`_ plotting scripts.)content(
)content(
)content(    *New in Pygments 0.11.*)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(Gnuplot)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(gnuplot)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.plot)delimiter(')>operator(,) string<delimiter(')content(*.plt)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(text/x-gnuplot)delimiter(')>operator(])

    ident(tokens) operator(=) operator({)
        string<delimiter(')content(root)delimiter(')>operator(:) operator([)
            ident(include)operator(()string<delimiter(')content(whitespace)delimiter(')>operator(\))operator(,)
            operator(()ident(_shortened)operator(()string<delimiter(')content(bi$nd)delimiter(')>operator(\))operator(,) ident(Keyword)operator(,) string<delimiter(')content(bind)delimiter(')>operator(\))operator(,)
            operator(()ident(_shortened_many)operator(()string<delimiter(')content(ex$it)delimiter(')>operator(,) string<delimiter(')content(q$uit)delimiter(')>operator(\))operator(,) ident(Keyword)operator(,) string<delimiter(')content(quit)delimiter(')>operator(\))operator(,)
            operator(()ident(_shortened)operator(()string<delimiter(')content(f$it)delimiter(')>operator(\))operator(,) ident(Keyword)operator(,) string<delimiter(')content(fit)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((if\)()content(\\s)content(*\)()content(\\()content(\))delimiter(')>operator(,) ident(bygroups)operator(()ident(Keyword)operator(,) ident(Text)operator(,) ident(Punctuation)operator(\))operator(,) string<delimiter(')content(if)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(else)content(\\b)delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
            operator(()ident(_shortened)operator(()string<delimiter(')content(pa$use)delimiter(')>operator(\))operator(,) ident(Keyword)operator(,) string<delimiter(')content(pause)delimiter(')>operator(\))operator(,)
            operator(()ident(_shortened_many)operator(()string<delimiter(')content(p$lot)delimiter(')>operator(,) string<delimiter(')content(rep$lot)delimiter(')>operator(,) string<delimiter(')content(sp$lot)delimiter(')>operator(\))operator(,) ident(Keyword)operator(,) string<delimiter(')content(plot)delimiter(')>operator(\))operator(,)
            operator(()ident(_shortened)operator(()string<delimiter(')content(sa$ve)delimiter(')>operator(\))operator(,) ident(Keyword)operator(,) string<delimiter(')content(save)delimiter(')>operator(\))operator(,)
            operator(()ident(_shortened)operator(()string<delimiter(')content(se$t)delimiter(')>operator(\))operator(,) ident(Keyword)operator(,) operator(()string<delimiter(')content(genericargs)delimiter(')>operator(,) string<delimiter(')content(optionarg)delimiter(')>operator(\))operator(\))operator(,)
            operator(()ident(_shortened_many)operator(()string<delimiter(')content(sh$ow)delimiter(')>operator(,) string<delimiter(')content(uns$et)delimiter(')>operator(\))operator(,)
             ident(Keyword)operator(,) operator(()string<delimiter(')content(noargs)delimiter(')>operator(,) string<delimiter(')content(optionarg)delimiter(')>operator(\))operator(\))operator(,)
            operator(()ident(_shortened_many)operator(()string<delimiter(')content(low$er)delimiter(')>operator(,) string<delimiter(')content(ra$ise)delimiter(')>operator(,) string<delimiter(')content(ca$ll)delimiter(')>operator(,) string<delimiter(')content(cd$)delimiter(')>operator(,) string<delimiter(')content(cl$ear)delimiter(')>operator(,)
                             string<delimiter(')content(h$elp)delimiter(')>operator(,) string<delimiter(')char(\\\\)content(?$)delimiter(')>operator(,) string<delimiter(')content(hi$story)delimiter(')>operator(,) string<delimiter(')content(l$oad)delimiter(')>operator(,) string<delimiter(')content(pr$int)delimiter(')>operator(,)
                             string<delimiter(')content(pwd$)delimiter(')>operator(,) string<delimiter(')content(re$read)delimiter(')>operator(,) string<delimiter(')content(res$et)delimiter(')>operator(,) string<delimiter(')content(scr$eendump)delimiter(')>operator(,)
                             string<delimiter(')content(she$ll)delimiter(')>operator(,) string<delimiter(')content(sy$stem)delimiter(')>operator(,) string<delimiter(')content(up$date)delimiter(')>operator(\))operator(,)
             ident(Keyword)operator(,) string<delimiter(')content(genericargs)delimiter(')>operator(\))operator(,)
            operator(()ident(_shortened_many)operator(()string<delimiter(')content(pwd$)delimiter(')>operator(,) string<delimiter(')content(re$read)delimiter(')>operator(,) string<delimiter(')content(res$et)delimiter(')>operator(,) string<delimiter(')content(scr$eendump)delimiter(')>operator(,)
                             string<delimiter(')content(she$ll)delimiter(')>operator(,) string<delimiter(')content(test$)delimiter(')>operator(\))operator(,)
             ident(Keyword)operator(,) string<delimiter(')content(noargs)delimiter(')>operator(\))operator(,)
            operator(()string<delimiter(')content(([a-zA-Z_][a-zA-Z0-9_]*\)()content(\\s)content(*\)(=\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Name)operator(.)ident(Variable)operator(,) ident(Text)operator(,) ident(Operator)operator(\))operator(,) string<delimiter(')content(genericargs)delimiter(')>operator(\))operator(,)
            operator(()string<delimiter(')content(([a-zA-Z_][a-zA-Z0-9_]*\)()content(\\s)content(*)content(\\()content(.*?)content(\\\))content(\\s)content(*\)(=\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Name)operator(.)ident(Function)operator(,) ident(Text)operator(,) ident(Operator)operator(\))operator(,) string<delimiter(')content(genericargs)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(@[a-zA-Z_][a-zA-Z0-9_]*)delimiter(')>operator(,) ident(Name)operator(.)ident(Constant)operator(\))operator(,) comment(# macros)
            operator(()string<modifier(r)delimiter(')content(;)delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(comment)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content([^)content(\\\\)content(\\n)content(])delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\\\)content(\\n)delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\\\)delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
            comment(# don't add the newline to the Comment token)
            operator(()string<delimiter(')delimiter(')>operator(,) ident(Comment)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(whitespace)delimiter(')>operator(:) operator([)
            operator(()string<delimiter(')content(#)delimiter(')>operator(,) ident(Comment)operator(,) string<delimiter(')content(comment)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([ )content(\\t)content(\\v)content(\\f)content(]+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(noargs)delimiter(')>operator(:) operator([)
            ident(include)operator(()string<delimiter(')content(whitespace)delimiter(')>operator(\))operator(,)
            comment(# semicolon and newline end the argument list)
            operator(()string<modifier(r)delimiter(')content(;)delimiter(')>operator(,) ident(Punctuation)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\n)delimiter(')>operator(,) ident(Text)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(dqstring)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(")delimiter(')>operator(,) ident(String)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\\\)content(([)content(\\\\)content(abfnrtv")content(\\')content(]|x[a-fA-F0-9]{2,4}|[0-7]{1,3}\))delimiter(')>operator(,) ident(String)operator(.)ident(Escape)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([^)content(\\\\)content(")content(\\n)content(]+)delimiter(')>operator(,) ident(String)operator(\))operator(,) comment(# all other characters)
            operator(()string<modifier(r)delimiter(')content(\\\\)content(\\n)delimiter(')>operator(,) ident(String)operator(\))operator(,) comment(# line continuation)
            operator(()string<modifier(r)delimiter(')content(\\\\)delimiter(')>operator(,) ident(String)operator(\))operator(,) comment(# stray backslash)
            operator(()string<modifier(r)delimiter(')content(\\n)delimiter(')>operator(,) ident(String)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,) comment(# newline ends the string too)
        operator(])operator(,)
        string<delimiter(')content(sqstring)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(")content('')delimiter(")>operator(,) ident(String)operator(\))operator(,) comment(# escaped single quote)
            operator(()string<modifier(r)delimiter(")content(')delimiter(")>operator(,) ident(String)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(")content([^)content(\\\\)content(')content(\\n)content(]+)delimiter(")>operator(,) ident(String)operator(\))operator(,) comment(# all other characters)
            operator(()string<modifier(r)delimiter(')content(\\\\)content(\\n)delimiter(')>operator(,) ident(String)operator(\))operator(,) comment(# line continuation)
            operator(()string<modifier(r)delimiter(')content(\\\\)delimiter(')>operator(,) ident(String)operator(\))operator(,) comment(# normal backslash)
            operator(()string<modifier(r)delimiter(')content(\\n)delimiter(')>operator(,) ident(String)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,) comment(# newline ends the string too)
        operator(])operator(,)
        string<delimiter(')content(genericargs)delimiter(')>operator(:) operator([)
            ident(include)operator(()string<delimiter(')content(noargs)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(")delimiter(')>operator(,) ident(String)operator(,) string<delimiter(')content(dqstring)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(")content(')delimiter(")>operator(,) ident(String)operator(,) string<delimiter(')content(sqstring)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(()content(\\d)content(+)content(\\.)content(\\d)content(*|)content(\\.)content(\\d)content(+|)content(\\d)content(+\)[eE][+-]?)content(\\d)content(+)delimiter(')>operator(,) ident(Number)operator(.)ident(Float)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(()content(\\d)content(+)content(\\.)content(\\d)content(*|)content(\\.)content(\\d)content(+\))delimiter(')>operator(,) ident(Number)operator(.)ident(Float)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(-?)content(\\d)content(+)delimiter(')>operator(,) ident(Number)operator(.)ident(Integer)operator(\))operator(,)
            operator(()string<delimiter(')content([,.~!%^&*+=|?:<>/-])delimiter(')>operator(,) ident(Operator)operator(\))operator(,)
            operator(()string<delimiter(')content([{}(\))content(\\[)content(\\])content(])delimiter(')>operator(,) ident(Punctuation)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((eq|ne\))content(\\b)delimiter(')>operator(,) ident(Operator)operator(.)ident(Word)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(([a-zA-Z_][a-zA-Z0-9_]*\)()content(\\s)content(*\)()content(\\()content(\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Name)operator(.)ident(Function)operator(,) ident(Text)operator(,) ident(Punctuation)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([a-zA-Z_][a-zA-Z0-9_]*)delimiter(')>operator(,) ident(Name)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(@[a-zA-Z_][a-zA-Z0-9_]*)delimiter(')>operator(,) ident(Name)operator(.)ident(Constant)operator(\))operator(,) comment(# macros)
            operator(()string<modifier(r)delimiter(')content(\\\\)content(\\n)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(optionarg)delimiter(')>operator(:) operator([)
            ident(include)operator(()string<delimiter(')content(whitespace)delimiter(')>operator(\))operator(,)
            operator(()ident(_shortened_many)operator(()
                string<delimiter(")content(a$ll)delimiter(")>operator(,)string<delimiter(")content(an$gles)delimiter(")>operator(,)string<delimiter(")content(ar$row)delimiter(")>operator(,)string<delimiter(")content(au$toscale)delimiter(")>operator(,)string<delimiter(")content(b$ars)delimiter(")>operator(,)string<delimiter(")content(bor$der)delimiter(")>operator(,)
                string<delimiter(")content(box$width)delimiter(")>operator(,)string<delimiter(")content(cl$abel)delimiter(")>operator(,)string<delimiter(")content(c$lip)delimiter(")>operator(,)string<delimiter(")content(cn$trparam)delimiter(")>operator(,)string<delimiter(")content(co$ntour)delimiter(")>operator(,)string<delimiter(")content(da$ta)delimiter(")>operator(,)
                string<delimiter(")content(data$file)delimiter(")>operator(,)string<delimiter(")content(dg$rid3d)delimiter(")>operator(,)string<delimiter(")content(du$mmy)delimiter(")>operator(,)string<delimiter(")content(enc$oding)delimiter(")>operator(,)string<delimiter(")content(dec$imalsign)delimiter(")>operator(,)
                string<delimiter(")content(fit$)delimiter(")>operator(,)string<delimiter(")content(font$path)delimiter(")>operator(,)string<delimiter(")content(fo$rmat)delimiter(")>operator(,)string<delimiter(")content(fu$nction)delimiter(")>operator(,)string<delimiter(")content(fu$nctions)delimiter(")>operator(,)string<delimiter(")content(g$rid)delimiter(")>operator(,)
                string<delimiter(")content(hid$den3d)delimiter(")>operator(,)string<delimiter(")content(his$torysize)delimiter(")>operator(,)string<delimiter(")content(is$osamples)delimiter(")>operator(,)string<delimiter(")content(k$ey)delimiter(")>operator(,)string<delimiter(")content(keyt$itle)delimiter(")>operator(,)
                string<delimiter(")content(la$bel)delimiter(")>operator(,)string<delimiter(")content(li$nestyle)delimiter(")>operator(,)string<delimiter(")content(ls$)delimiter(")>operator(,)string<delimiter(")content(loa$dpath)delimiter(")>operator(,)string<delimiter(")content(loc$ale)delimiter(")>operator(,)string<delimiter(")content(log$scale)delimiter(")>operator(,)
                string<delimiter(")content(mac$ros)delimiter(")>operator(,)string<delimiter(")content(map$ping)delimiter(")>operator(,)string<delimiter(")content(map$ping3d)delimiter(")>operator(,)string<delimiter(")content(mar$gin)delimiter(")>operator(,)string<delimiter(")content(lmar$gin)delimiter(")>operator(,)
                string<delimiter(")content(rmar$gin)delimiter(")>operator(,)string<delimiter(")content(tmar$gin)delimiter(")>operator(,)string<delimiter(")content(bmar$gin)delimiter(")>operator(,)string<delimiter(")content(mo$use)delimiter(")>operator(,)string<delimiter(")content(multi$plot)delimiter(")>operator(,)
                string<delimiter(")content(mxt$ics)delimiter(")>operator(,)string<delimiter(")content(nomxt$ics)delimiter(")>operator(,)string<delimiter(")content(mx2t$ics)delimiter(")>operator(,)string<delimiter(")content(nomx2t$ics)delimiter(")>operator(,)string<delimiter(")content(myt$ics)delimiter(")>operator(,)
                string<delimiter(")content(nomyt$ics)delimiter(")>operator(,)string<delimiter(")content(my2t$ics)delimiter(")>operator(,)string<delimiter(")content(nomy2t$ics)delimiter(")>operator(,)string<delimiter(")content(mzt$ics)delimiter(")>operator(,)string<delimiter(")content(nomzt$ics)delimiter(")>operator(,)
                string<delimiter(")content(mcbt$ics)delimiter(")>operator(,)string<delimiter(")content(nomcbt$ics)delimiter(")>operator(,)string<delimiter(")content(of$fsets)delimiter(")>operator(,)string<delimiter(")content(or$igin)delimiter(")>operator(,)string<delimiter(")content(o$utput)delimiter(")>operator(,)
                string<delimiter(")content(pa$rametric)delimiter(")>operator(,)string<delimiter(")content(pm$3d)delimiter(")>operator(,)string<delimiter(")content(pal$ette)delimiter(")>operator(,)string<delimiter(")content(colorb$ox)delimiter(")>operator(,)string<delimiter(")content(p$lot)delimiter(")>operator(,)
                string<delimiter(")content(poi$ntsize)delimiter(")>operator(,)string<delimiter(")content(pol$ar)delimiter(")>operator(,)string<delimiter(")content(pr$int)delimiter(")>operator(,)string<delimiter(")content(obj$ect)delimiter(")>operator(,)string<delimiter(")content(sa$mples)delimiter(")>operator(,)string<delimiter(")content(si$ze)delimiter(")>operator(,)
                string<delimiter(")content(st$yle)delimiter(")>operator(,)string<delimiter(")content(su$rface)delimiter(")>operator(,)string<delimiter(")content(table$)delimiter(")>operator(,)string<delimiter(")content(t$erminal)delimiter(")>operator(,)string<delimiter(")content(termo$ptions)delimiter(")>operator(,)string<delimiter(")content(ti$cs)delimiter(")>operator(,)
                string<delimiter(")content(ticsc$ale)delimiter(")>operator(,)string<delimiter(")content(ticsl$evel)delimiter(")>operator(,)string<delimiter(")content(timef$mt)delimiter(")>operator(,)string<delimiter(")content(tim$estamp)delimiter(")>operator(,)string<delimiter(")content(tit$le)delimiter(")>operator(,)
                string<delimiter(")content(v$ariables)delimiter(")>operator(,)string<delimiter(")content(ve$rsion)delimiter(")>operator(,)string<delimiter(")content(vi$ew)delimiter(")>operator(,)string<delimiter(")content(xyp$lane)delimiter(")>operator(,)string<delimiter(")content(xda$ta)delimiter(")>operator(,)string<delimiter(")content(x2da$ta)delimiter(")>operator(,)
                string<delimiter(")content(yda$ta)delimiter(")>operator(,)string<delimiter(")content(y2da$ta)delimiter(")>operator(,)string<delimiter(")content(zda$ta)delimiter(")>operator(,)string<delimiter(")content(cbda$ta)delimiter(")>operator(,)string<delimiter(")content(xl$abel)delimiter(")>operator(,)string<delimiter(")content(x2l$abel)delimiter(")>operator(,)
                string<delimiter(")content(yl$abel)delimiter(")>operator(,)string<delimiter(")content(y2l$abel)delimiter(")>operator(,)string<delimiter(")content(zl$abel)delimiter(")>operator(,)string<delimiter(")content(cbl$abel)delimiter(")>operator(,)string<delimiter(")content(xti$cs)delimiter(")>operator(,)string<delimiter(")content(noxti$cs)delimiter(")>operator(,)
                string<delimiter(")content(x2ti$cs)delimiter(")>operator(,)string<delimiter(")content(nox2ti$cs)delimiter(")>operator(,)string<delimiter(")content(yti$cs)delimiter(")>operator(,)string<delimiter(")content(noyti$cs)delimiter(")>operator(,)string<delimiter(")content(y2ti$cs)delimiter(")>operator(,)string<delimiter(")content(noy2ti$cs)delimiter(")>operator(,)
                string<delimiter(")content(zti$cs)delimiter(")>operator(,)string<delimiter(")content(nozti$cs)delimiter(")>operator(,)string<delimiter(")content(cbti$cs)delimiter(")>operator(,)string<delimiter(")content(nocbti$cs)delimiter(")>operator(,)string<delimiter(")content(xdti$cs)delimiter(")>operator(,)string<delimiter(")content(noxdti$cs)delimiter(")>operator(,)
                string<delimiter(")content(x2dti$cs)delimiter(")>operator(,)string<delimiter(")content(nox2dti$cs)delimiter(")>operator(,)string<delimiter(")content(ydti$cs)delimiter(")>operator(,)string<delimiter(")content(noydti$cs)delimiter(")>operator(,)string<delimiter(")content(y2dti$cs)delimiter(")>operator(,)
                string<delimiter(")content(noy2dti$cs)delimiter(")>operator(,)string<delimiter(")content(zdti$cs)delimiter(")>operator(,)string<delimiter(")content(nozdti$cs)delimiter(")>operator(,)string<delimiter(")content(cbdti$cs)delimiter(")>operator(,)string<delimiter(")content(nocbdti$cs)delimiter(")>operator(,)
                string<delimiter(")content(xmti$cs)delimiter(")>operator(,)string<delimiter(")content(noxmti$cs)delimiter(")>operator(,)string<delimiter(")content(x2mti$cs)delimiter(")>operator(,)string<delimiter(")content(nox2mti$cs)delimiter(")>operator(,)string<delimiter(")content(ymti$cs)delimiter(")>operator(,)
                string<delimiter(")content(noymti$cs)delimiter(")>operator(,)string<delimiter(")content(y2mti$cs)delimiter(")>operator(,)string<delimiter(")content(noy2mti$cs)delimiter(")>operator(,)string<delimiter(")content(zmti$cs)delimiter(")>operator(,)string<delimiter(")content(nozmti$cs)delimiter(")>operator(,)
                string<delimiter(")content(cbmti$cs)delimiter(")>operator(,)string<delimiter(")content(nocbmti$cs)delimiter(")>operator(,)string<delimiter(")content(xr$ange)delimiter(")>operator(,)string<delimiter(")content(x2r$ange)delimiter(")>operator(,)string<delimiter(")content(yr$ange)delimiter(")>operator(,)
                string<delimiter(")content(y2r$ange)delimiter(")>operator(,)string<delimiter(")content(zr$ange)delimiter(")>operator(,)string<delimiter(")content(cbr$ange)delimiter(")>operator(,)string<delimiter(")content(rr$ange)delimiter(")>operator(,)string<delimiter(")content(tr$ange)delimiter(")>operator(,)string<delimiter(")content(ur$ange)delimiter(")>operator(,)
                string<delimiter(")content(vr$ange)delimiter(")>operator(,)string<delimiter(")content(xzeroa$xis)delimiter(")>operator(,)string<delimiter(")content(x2zeroa$xis)delimiter(")>operator(,)string<delimiter(")content(yzeroa$xis)delimiter(")>operator(,)string<delimiter(")content(y2zeroa$xis)delimiter(")>operator(,)
                string<delimiter(")content(zzeroa$xis)delimiter(")>operator(,)string<delimiter(")content(zeroa$xis)delimiter(")>operator(,)string<delimiter(")content(z$ero)delimiter(")>operator(\))operator(,) ident(Name)operator(.)ident(Builtin)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(bind)delimiter(')>operator(:) operator([)
            operator(()string<delimiter(')content(!)delimiter(')>operator(,) ident(Keyword)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()ident(_shortened)operator(()string<delimiter(')content(all$windows)delimiter(')>operator(\))operator(,) ident(Name)operator(.)ident(Builtin)operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(genericargs)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(quit)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(gnuplot)content(\\b)delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(noargs)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(fit)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(via)content(\\b)delimiter(')>operator(,) ident(Name)operator(.)ident(Builtin)operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(plot)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(if)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\\))delimiter(')>operator(,) ident(Punctuation)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(genericargs)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(pause)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content((mouse|any|button1|button2|button3\))content(\\b)delimiter(')>operator(,) ident(Name)operator(.)ident(Builtin)operator(\))operator(,)
            operator(()ident(_shortened)operator(()string<delimiter(')content(key$press)delimiter(')>operator(\))operator(,) ident(Name)operator(.)ident(Builtin)operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(genericargs)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(plot)delimiter(')>operator(:) operator([)
            operator(()ident(_shortened_many)operator(()string<delimiter(')content(ax$es)delimiter(')>operator(,) string<delimiter(')content(axi$s)delimiter(')>operator(,) string<delimiter(')content(bin$ary)delimiter(')>operator(,) string<delimiter(')content(ev$ery)delimiter(')>operator(,) string<delimiter(')content(i$ndex)delimiter(')>operator(,)
                             string<delimiter(')content(mat$rix)delimiter(')>operator(,) string<delimiter(')content(s$mooth)delimiter(')>operator(,) string<delimiter(')content(thru$)delimiter(')>operator(,) string<delimiter(')content(t$itle)delimiter(')>operator(,)
                             string<delimiter(')content(not$itle)delimiter(')>operator(,) string<delimiter(')content(u$sing)delimiter(')>operator(,) string<delimiter(')content(w$ith)delimiter(')>operator(\))operator(,)
             ident(Name)operator(.)ident(Builtin)operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(genericargs)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(save)delimiter(')>operator(:) operator([)
            operator(()ident(_shortened_many)operator(()string<delimiter(')content(f$unctions)delimiter(')>operator(,) string<delimiter(')content(s$et)delimiter(')>operator(,) string<delimiter(')content(t$erminal)delimiter(')>operator(,) string<delimiter(')content(v$ariables)delimiter(')>operator(\))operator(,)
             ident(Name)operator(.)ident(Builtin)operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(genericargs)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
    operator(})


keyword(class) class(PovrayLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    For `Persistence of Vision Raytracer <http://www.povray.org/>`_ files.)content(
)content(
)content(    *New in Pygments 0.11.*)content(
)content(    )delimiter(""")>
    ident(name) operator(=) string<delimiter(')content(POVRay)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(pov)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.pov)delimiter(')>operator(,) string<delimiter(')content(*.inc)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(text/x-povray)delimiter(')>operator(])

    ident(tokens) operator(=) operator({)
        string<delimiter(')content(root)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(/)content(\\*)content([)content(\\w)content(\\W)content(]*?)content(\\*)content(/)delimiter(')>operator(,) ident(Comment)operator(.)ident(Multiline)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(//.*)content(\\n)delimiter(')>operator(,) ident(Comment)operator(.)ident(Single)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content("(?:)content(\\\\)content(.|[^"]\)+")delimiter(')>operator(,) ident(String)operator(.)ident(Double)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(#(debug|default|else|end|error|fclose|fopen|if|ifdef|ifndef|)delimiter(')>
             string<modifier(r)delimiter(')content(include|range|read|render|statistics|switch|undef|version|)delimiter(')>
             string<modifier(r)delimiter(')content(warning|while|write|define|macro|local|declare\))delimiter(')>operator(,)
             ident(Comment)operator(.)ident(Preproc)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\b)content((aa_level|aa_threshold|abs|acos|acosh|adaptive|adc_bailout|)delimiter(')>
             string<modifier(r)delimiter(')content(agate|agate_turb|all|alpha|ambient|ambient_light|angle|)delimiter(')>
             string<modifier(r)delimiter(')content(aperture|arc_angle|area_light|asc|asin|asinh|assumed_gamma|)delimiter(')>
             string<modifier(r)delimiter(')content(atan|atan2|atanh|atmosphere|atmospheric_attenuation|)delimiter(')>
             string<modifier(r)delimiter(')content(attenuating|average|background|black_hole|blue|blur_samples|)delimiter(')>
             string<modifier(r)delimiter(')content(bounded_by|box_mapping|bozo|break|brick|brick_size|)delimiter(')>
             string<modifier(r)delimiter(')content(brightness|brilliance|bumps|bumpy1|bumpy2|bumpy3|bump_map|)delimiter(')>
             string<modifier(r)delimiter(')content(bump_size|case|caustics|ceil|checker|chr|clipped_by|clock|)delimiter(')>
             string<modifier(r)delimiter(')content(color|color_map|colour|colour_map|component|composite|concat|)delimiter(')>
             string<modifier(r)delimiter(')content(confidence|conic_sweep|constant|control0|control1|cos|cosh|)delimiter(')>
             string<modifier(r)delimiter(')content(count|crackle|crand|cube|cubic_spline|cylindrical_mapping|)delimiter(')>
             string<modifier(r)delimiter(')content(debug|declare|default|degrees|dents|diffuse|direction|)delimiter(')>
             string<modifier(r)delimiter(')content(distance|distance_maximum|div|dust|dust_type|eccentricity|)delimiter(')>
             string<modifier(r)delimiter(')content(else|emitting|end|error|error_bound|exp|exponent|)delimiter(')>
             string<modifier(r)delimiter(')content(fade_distance|fade_power|falloff|falloff_angle|false|)delimiter(')>
             string<modifier(r)delimiter(')content(file_exists|filter|finish|fisheye|flatness|flip|floor|)delimiter(')>
             string<modifier(r)delimiter(')content(focal_point|fog|fog_alt|fog_offset|fog_type|frequency|gif|)delimiter(')>
             string<modifier(r)delimiter(')content(global_settings|glowing|gradient|granite|gray_threshold|)delimiter(')>
             string<modifier(r)delimiter(')content(green|halo|hexagon|hf_gray_16|hierarchy|hollow|hypercomplex|)delimiter(')>
             string<modifier(r)delimiter(')content(if|ifdef|iff|image_map|incidence|include|int|interpolate|)delimiter(')>
             string<modifier(r)delimiter(')content(inverse|ior|irid|irid_wavelength|jitter|lambda|leopard|)delimiter(')>
             string<modifier(r)delimiter(')content(linear|linear_spline|linear_sweep|location|log|looks_like|)delimiter(')>
             string<modifier(r)delimiter(')content(look_at|low_error_factor|mandel|map_type|marble|material_map|)delimiter(')>
             string<modifier(r)delimiter(')content(matrix|max|max_intersections|max_iteration|max_trace_level|)delimiter(')>
             string<modifier(r)delimiter(')content(max_value|metallic|min|minimum_reuse|mod|mortar|)delimiter(')>
             string<modifier(r)delimiter(')content(nearest_count|no|normal|normal_map|no_shadow|number_of_waves|)delimiter(')>
             string<modifier(r)delimiter(')content(octaves|off|offset|omega|omnimax|on|once|onion|open|)delimiter(')>
             string<modifier(r)delimiter(')content(orthographic|panoramic|pattern1|pattern2|pattern3|)delimiter(')>
             string<modifier(r)delimiter(')content(perspective|pgm|phase|phong|phong_size|pi|pigment|)delimiter(')>
             string<modifier(r)delimiter(')content(pigment_map|planar_mapping|png|point_at|pot|pow|ppm|)delimiter(')>
             string<modifier(r)delimiter(')content(precision|pwr|quadratic_spline|quaternion|quick_color|)delimiter(')>
             string<modifier(r)delimiter(')content(quick_colour|quilted|radial|radians|radiosity|radius|rainbow|)delimiter(')>
             string<modifier(r)delimiter(')content(ramp_wave|rand|range|reciprocal|recursion_limit|red|)delimiter(')>
             string<modifier(r)delimiter(')content(reflection|refraction|render|repeat|rgb|rgbf|rgbft|rgbt|)delimiter(')>
             string<modifier(r)delimiter(')content(right|ripples|rotate|roughness|samples|scale|scallop_wave|)delimiter(')>
             string<modifier(r)delimiter(')content(scattering|seed|shadowless|sin|sine_wave|sinh|sky|sky_sphere|)delimiter(')>
             string<modifier(r)delimiter(')content(slice|slope_map|smooth|specular|spherical_mapping|spiral|)delimiter(')>
             string<modifier(r)delimiter(')content(spiral1|spiral2|spotlight|spotted|sqr|sqrt|statistics|str|)delimiter(')>
             string<modifier(r)delimiter(')content(strcmp|strength|strlen|strlwr|strupr|sturm|substr|switch|sys|)delimiter(')>
             string<modifier(r)delimiter(')content(t|tan|tanh|test_camera_1|test_camera_2|test_camera_3|)delimiter(')>
             string<modifier(r)delimiter(')content(test_camera_4|texture|texture_map|tga|thickness|threshold|)delimiter(')>
             string<modifier(r)delimiter(')content(tightness|tile2|tiles|track|transform|translate|transmit|)delimiter(')>
             string<modifier(r)delimiter(')content(triangle_wave|true|ttf|turbulence|turb_depth|type|)delimiter(')>
             string<modifier(r)delimiter(')content(ultra_wide_angle|up|use_color|use_colour|use_index|u_steps|)delimiter(')>
             string<modifier(r)delimiter(')content(val|variance|vaxis_rotate|vcross|vdot|version|vlength|)delimiter(')>
             string<modifier(r)delimiter(')content(vnormalize|volume_object|volume_rendered|vol_with_light|)delimiter(')>
             string<modifier(r)delimiter(')content(vrotate|v_steps|warning|warp|water_level|waves|while|width|)delimiter(')>
             string<modifier(r)delimiter(')content(wood|wrinkles|yes\))content(\\b)delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(bicubic_patch|blob|box|camera|cone|cubic|cylinder|difference|)delimiter(')>
             string<modifier(r)delimiter(')content(disc|height_field|intersection|julia_fractal|lathe|)delimiter(')>
             string<modifier(r)delimiter(')content(light_source|merge|mesh|object|plane|poly|polygon|prism|)delimiter(')>
             string<modifier(r)delimiter(')content(quadric|quartic|smooth_triangle|sor|sphere|superellipsoid|)delimiter(')>
             string<modifier(r)delimiter(')content(text|torus|triangle|union)delimiter(')>operator(,) ident(Name)operator(.)ident(Builtin)operator(\))operator(,)
            comment(# TODO: <=, etc)
            operator(()string<modifier(r)delimiter(')content([)content(\\[)content(\\])content((\){}<>;,])delimiter(')>operator(,) ident(Punctuation)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([-+*/=])delimiter(')>operator(,) ident(Operator)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\b)content((x|y|z|u|v\))content(\\b)delimiter(')>operator(,) ident(Name)operator(.)ident(Builtin)operator(.)ident(Pseudo)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([a-zA-Z_][a-zA-Z_0-9]*)delimiter(')>operator(,) ident(Name)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([0-9]+)content(\\.)content([0-9]*)delimiter(')>operator(,) ident(Number)operator(.)ident(Float)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\.)content([0-9]+)delimiter(')>operator(,) ident(Number)operator(.)ident(Float)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([0-9]+)delimiter(')>operator(,) ident(Number)operator(.)ident(Integer)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\s)content(+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
        operator(])
    operator(})


keyword(class) class(AppleScriptLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    For `AppleScript source code)content(
)content(    <http://developer.apple.com/documentation/AppleScript/)content(
)content(    Conceptual/AppleScriptLangGuide>`_,)content(
)content(    including `AppleScript Studio)content(
)content(    <http://developer.apple.com/documentation/AppleScript/)content(
)content(    Reference/StudioReference>`_.)content(
)content(    Contributed by Andreas Amann <aamann@mac.com>.)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(AppleScript)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(applescript)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.applescript)delimiter(')>operator(])

    ident(flags) operator(=) ident(re)operator(.)ident(MULTILINE) operator(|) ident(re)operator(.)ident(DOTALL)

    ident(Identifiers) operator(=) string<modifier(r)delimiter(')content([a-zA-Z])content(\\w)content(*)delimiter(')>
    ident(Literals) operator(=) operator([)string<delimiter(')content(AppleScript)delimiter(')>operator(,) string<delimiter(')content(current application)delimiter(')>operator(,) string<delimiter(')content(false)delimiter(')>operator(,) string<delimiter(')content(linefeed)delimiter(')>operator(,)
                string<delimiter(')content(missing value)delimiter(')>operator(,) string<delimiter(')content(pi)delimiter(')>operator(,)string<delimiter(')content(quote)delimiter(')>operator(,) string<delimiter(')content(result)delimiter(')>operator(,) string<delimiter(')content(return)delimiter(')>operator(,) string<delimiter(')content(space)delimiter(')>operator(,)
                string<delimiter(')content(tab)delimiter(')>operator(,) string<delimiter(')content(text item delimiters)delimiter(')>operator(,) string<delimiter(')content(true)delimiter(')>operator(,) string<delimiter(')content(version)delimiter(')>operator(])
    ident(Classes) operator(=) operator([)string<delimiter(')content(alias )delimiter(')>operator(,) string<delimiter(')content(application )delimiter(')>operator(,) string<delimiter(')content(boolean )delimiter(')>operator(,) string<delimiter(')content(class )delimiter(')>operator(,) string<delimiter(')content(constant )delimiter(')>operator(,)
               string<delimiter(')content(date )delimiter(')>operator(,) string<delimiter(')content(file )delimiter(')>operator(,) string<delimiter(')content(integer )delimiter(')>operator(,) string<delimiter(')content(list )delimiter(')>operator(,) string<delimiter(')content(number )delimiter(')>operator(,) string<delimiter(')content(POSIX file )delimiter(')>operator(,)
               string<delimiter(')content(real )delimiter(')>operator(,) string<delimiter(')content(record )delimiter(')>operator(,) string<delimiter(')content(reference )delimiter(')>operator(,) string<delimiter(')content(RGB color )delimiter(')>operator(,) string<delimiter(')content(script )delimiter(')>operator(,)
               string<delimiter(')content(text )delimiter(')>operator(,) string<delimiter(')content(unit types)delimiter(')>operator(,) string<delimiter(')content((Unicode \)?text)delimiter(')>operator(,) string<delimiter(')content(string)delimiter(')>operator(])
    ident(BuiltIn) operator(=) operator([)string<delimiter(')content(attachment)delimiter(')>operator(,) string<delimiter(')content(attribute run)delimiter(')>operator(,) string<delimiter(')content(character)delimiter(')>operator(,) string<delimiter(')content(day)delimiter(')>operator(,) string<delimiter(')content(month)delimiter(')>operator(,)
               string<delimiter(')content(paragraph)delimiter(')>operator(,) string<delimiter(')content(word)delimiter(')>operator(,) string<delimiter(')content(year)delimiter(')>operator(])
    ident(HandlerParams) operator(=) operator([)string<delimiter(')content(about)delimiter(')>operator(,) string<delimiter(')content(above)delimiter(')>operator(,) string<delimiter(')content(against)delimiter(')>operator(,) string<delimiter(')content(apart from)delimiter(')>operator(,) string<delimiter(')content(around)delimiter(')>operator(,)
                     string<delimiter(')content(aside from)delimiter(')>operator(,) string<delimiter(')content(at)delimiter(')>operator(,) string<delimiter(')content(below)delimiter(')>operator(,) string<delimiter(')content(beneath)delimiter(')>operator(,) string<delimiter(')content(beside)delimiter(')>operator(,)
                     string<delimiter(')content(between)delimiter(')>operator(,) string<delimiter(')content(for)delimiter(')>operator(,) string<delimiter(')content(given)delimiter(')>operator(,) string<delimiter(')content(instead of)delimiter(')>operator(,) string<delimiter(')content(on)delimiter(')>operator(,) string<delimiter(')content(onto)delimiter(')>operator(,)
                     string<delimiter(')content(out of)delimiter(')>operator(,) string<delimiter(')content(over)delimiter(')>operator(,) string<delimiter(')content(since)delimiter(')>operator(])
    ident(Commands) operator(=) operator([)string<delimiter(')content(ASCII (character|number\))delimiter(')>operator(,) string<delimiter(')content(activate)delimiter(')>operator(,) string<delimiter(')content(beep)delimiter(')>operator(,) string<delimiter(')content(choose URL)delimiter(')>operator(,)
                string<delimiter(')content(choose application)delimiter(')>operator(,) string<delimiter(')content(choose color)delimiter(')>operator(,) string<delimiter(')content(choose file( name\)?)delimiter(')>operator(,)
                string<delimiter(')content(choose folder)delimiter(')>operator(,) string<delimiter(')content(choose from list)delimiter(')>operator(,)
                string<delimiter(')content(choose remote application)delimiter(')>operator(,) string<delimiter(')content(clipboard info)delimiter(')>operator(,)
                string<delimiter(')content(close( access\)?)delimiter(')>operator(,) string<delimiter(')content(copy)delimiter(')>operator(,) string<delimiter(')content(count)delimiter(')>operator(,) string<delimiter(')content(current date)delimiter(')>operator(,) string<delimiter(')content(delay)delimiter(')>operator(,)
                string<delimiter(')content(delete)delimiter(')>operator(,) string<delimiter(')content(display (alert|dialog\))delimiter(')>operator(,) string<delimiter(')content(do shell script)delimiter(')>operator(,)
                string<delimiter(')content(duplicate)delimiter(')>operator(,) string<delimiter(')content(exists)delimiter(')>operator(,) string<delimiter(')content(get eof)delimiter(')>operator(,) string<delimiter(')content(get volume settings)delimiter(')>operator(,)
                string<delimiter(')content(info for)delimiter(')>operator(,) string<delimiter(')content(launch)delimiter(')>operator(,) string<delimiter(')content(list (disks|folder\))delimiter(')>operator(,) string<delimiter(')content(load script)delimiter(')>operator(,)
                string<delimiter(')content(log)delimiter(')>operator(,) string<delimiter(')content(make)delimiter(')>operator(,) string<delimiter(')content(mount volume)delimiter(')>operator(,) string<delimiter(')content(new)delimiter(')>operator(,) string<delimiter(')content(offset)delimiter(')>operator(,)
                string<delimiter(')content(open( (for access|location\)\)?)delimiter(')>operator(,) string<delimiter(')content(path to)delimiter(')>operator(,) string<delimiter(')content(print)delimiter(')>operator(,) string<delimiter(')content(quit)delimiter(')>operator(,)
                string<delimiter(')content(random number)delimiter(')>operator(,) string<delimiter(')content(read)delimiter(')>operator(,) string<delimiter(')content(round)delimiter(')>operator(,) string<delimiter(')content(run( script\)?)delimiter(')>operator(,)
                string<delimiter(')content(say)delimiter(')>operator(,) string<delimiter(')content(scripting components)delimiter(')>operator(,)
                string<delimiter(')content(set (eof|the clipboard to|volume\))delimiter(')>operator(,) string<delimiter(')content(store script)delimiter(')>operator(,)
                string<delimiter(')content(summarize)delimiter(')>operator(,) string<delimiter(')content(system attribute)delimiter(')>operator(,) string<delimiter(')content(system info)delimiter(')>operator(,)
                string<delimiter(')content(the clipboard)delimiter(')>operator(,) string<delimiter(')content(time to GMT)delimiter(')>operator(,) string<delimiter(')content(write)delimiter(')>operator(,) string<delimiter(')content(quoted form)delimiter(')>operator(])
    ident(References) operator(=) operator([)string<delimiter(')content((in \)?back of)delimiter(')>operator(,) string<delimiter(')content((in \)?front of)delimiter(')>operator(,) string<delimiter(')content([0-9]+(st|nd|rd|th\))delimiter(')>operator(,)
                  string<delimiter(')content(first)delimiter(')>operator(,) string<delimiter(')content(second)delimiter(')>operator(,) string<delimiter(')content(third)delimiter(')>operator(,) string<delimiter(')content(fourth)delimiter(')>operator(,) string<delimiter(')content(fifth)delimiter(')>operator(,) string<delimiter(')content(sixth)delimiter(')>operator(,)
                  string<delimiter(')content(seventh)delimiter(')>operator(,) string<delimiter(')content(eighth)delimiter(')>operator(,) string<delimiter(')content(ninth)delimiter(')>operator(,) string<delimiter(')content(tenth)delimiter(')>operator(,) string<delimiter(')content(after)delimiter(')>operator(,) string<delimiter(')content(back)delimiter(')>operator(,)
                  string<delimiter(')content(before)delimiter(')>operator(,) string<delimiter(')content(behind)delimiter(')>operator(,) string<delimiter(')content(every)delimiter(')>operator(,) string<delimiter(')content(front)delimiter(')>operator(,) string<delimiter(')content(index)delimiter(')>operator(,) string<delimiter(')content(last)delimiter(')>operator(,)
                  string<delimiter(')content(middle)delimiter(')>operator(,) string<delimiter(')content(some)delimiter(')>operator(,) string<delimiter(')content(that)delimiter(')>operator(,) string<delimiter(')content(through)delimiter(')>operator(,) string<delimiter(')content(thru)delimiter(')>operator(,) string<delimiter(')content(where)delimiter(')>operator(,) string<delimiter(')content(whose)delimiter(')>operator(])
    ident(Operators) operator(=) operator([)string<delimiter(")content(and)delimiter(")>operator(,) string<delimiter(")content(or)delimiter(")>operator(,) string<delimiter(")content(is equal)delimiter(")>operator(,) string<delimiter(")content(equals)delimiter(")>operator(,) string<delimiter(")content((is \)?equal to)delimiter(")>operator(,) string<delimiter(")content(is not)delimiter(")>operator(,)
                 string<delimiter(")content(isn't)delimiter(")>operator(,) string<delimiter(")content(isn't equal( to\)?)delimiter(")>operator(,) string<delimiter(")content(is not equal( to\)?)delimiter(")>operator(,)
                 string<delimiter(")content(doesn't equal)delimiter(")>operator(,) string<delimiter(")content(does not equal)delimiter(")>operator(,) string<delimiter(")content((is \)?greater than)delimiter(")>operator(,)
                 string<delimiter(")content(comes after)delimiter(")>operator(,) string<delimiter(")content(is not less than or equal( to\)?)delimiter(")>operator(,)
                 string<delimiter(")content(isn't less than or equal( to\)?)delimiter(")>operator(,) string<delimiter(")content((is \)?less than)delimiter(")>operator(,)
                 string<delimiter(")content(comes before)delimiter(")>operator(,) string<delimiter(")content(is not greater than or equal( to\)?)delimiter(")>operator(,)
                 string<delimiter(")content(isn't greater than or equal( to\)?)delimiter(")>operator(,)
                 string<delimiter(")content((is  \)?greater than or equal( to\)?)delimiter(")>operator(,) string<delimiter(")content(is not less than)delimiter(")>operator(,)
                 string<delimiter(")content(isn't less than)delimiter(")>operator(,) string<delimiter(")content(does not come before)delimiter(")>operator(,)
                 string<delimiter(")content(doesn't come before)delimiter(")>operator(,) string<delimiter(")content((is \)?less than or equal( to\)?)delimiter(")>operator(,)
                 string<delimiter(")content(is not greater than)delimiter(")>operator(,) string<delimiter(")content(isn't greater than)delimiter(")>operator(,)
                 string<delimiter(")content(does not come after)delimiter(")>operator(,) string<delimiter(")content(doesn't come after)delimiter(")>operator(,) string<delimiter(")content(starts? with)delimiter(")>operator(,)
                 string<delimiter(")content(begins? with)delimiter(")>operator(,) string<delimiter(")content(ends? with)delimiter(")>operator(,) string<delimiter(")content(contains?)delimiter(")>operator(,) string<delimiter(")content(does not contain)delimiter(")>operator(,)
                 string<delimiter(")content(doesn't contain)delimiter(")>operator(,) string<delimiter(")content(is in)delimiter(")>operator(,) string<delimiter(")content(is contained by)delimiter(")>operator(,) string<delimiter(")content(is not in)delimiter(")>operator(,)
                 string<delimiter(")content(is not contained by)delimiter(")>operator(,) string<delimiter(")content(isn't contained by)delimiter(")>operator(,) string<delimiter(")content(div)delimiter(")>operator(,) string<delimiter(")content(mod)delimiter(")>operator(,)
                 string<delimiter(")content(not)delimiter(")>operator(,) string<delimiter(")content((a  \)?(ref( to\)?|reference to\))delimiter(")>operator(,) string<delimiter(")content(is)delimiter(")>operator(,) string<delimiter(")content(does)delimiter(")>operator(])
    ident(Control) operator(=) operator([)string<delimiter(')content(considering)delimiter(')>operator(,) string<delimiter(')content(else)delimiter(')>operator(,) string<delimiter(')content(error)delimiter(')>operator(,) string<delimiter(')content(exit)delimiter(')>operator(,) string<delimiter(')content(from)delimiter(')>operator(,) string<delimiter(')content(if)delimiter(')>operator(,)
               string<delimiter(')content(ignoring)delimiter(')>operator(,) string<delimiter(')content(in)delimiter(')>operator(,) string<delimiter(')content(repeat)delimiter(')>operator(,) string<delimiter(')content(tell)delimiter(')>operator(,) string<delimiter(')content(then)delimiter(')>operator(,) string<delimiter(')content(times)delimiter(')>operator(,) string<delimiter(')content(to)delimiter(')>operator(,)
               string<delimiter(')content(try)delimiter(')>operator(,) string<delimiter(')content(until)delimiter(')>operator(,) string<delimiter(')content(using terms from)delimiter(')>operator(,) string<delimiter(')content(while)delimiter(')>operator(,) string<delimiter(')content(whith)delimiter(')>operator(,)
               string<delimiter(')content(with timeout( of\)?)delimiter(')>operator(,) string<delimiter(')content(with transaction)delimiter(')>operator(,) string<delimiter(')content(by)delimiter(')>operator(,) string<delimiter(')content(continue)delimiter(')>operator(,)
               string<delimiter(')content(end)delimiter(')>operator(,) string<delimiter(')content(its?)delimiter(')>operator(,) string<delimiter(')content(me)delimiter(')>operator(,) string<delimiter(')content(my)delimiter(')>operator(,) string<delimiter(')content(return)delimiter(')>operator(,) string<delimiter(')content(of)delimiter(')> operator(,) string<delimiter(')content(as)delimiter(')>operator(])
    ident(Declarations) operator(=) operator([)string<delimiter(')content(global)delimiter(')>operator(,) string<delimiter(')content(local)delimiter(')>operator(,) string<delimiter(')content(prop(erty\)?)delimiter(')>operator(,) string<delimiter(')content(set)delimiter(')>operator(,) string<delimiter(')content(get)delimiter(')>operator(])
    ident(Reserved) operator(=) operator([)string<delimiter(')content(but)delimiter(')>operator(,) string<delimiter(')content(put)delimiter(')>operator(,) string<delimiter(')content(returning)delimiter(')>operator(,) string<delimiter(')content(the)delimiter(')>operator(])
    ident(StudioClasses) operator(=) operator([)string<delimiter(')content(action cell)delimiter(')>operator(,) string<delimiter(')content(alert reply)delimiter(')>operator(,) string<delimiter(')content(application)delimiter(')>operator(,) string<delimiter(')content(box)delimiter(')>operator(,)
                     string<delimiter(')content(browser( cell\)?)delimiter(')>operator(,) string<delimiter(')content(bundle)delimiter(')>operator(,) string<delimiter(')content(button( cell\)?)delimiter(')>operator(,) string<delimiter(')content(cell)delimiter(')>operator(,)
                     string<delimiter(')content(clip view)delimiter(')>operator(,) string<delimiter(')content(color well)delimiter(')>operator(,) string<delimiter(')content(color-panel)delimiter(')>operator(,)
                     string<delimiter(')content(combo box( item\)?)delimiter(')>operator(,) string<delimiter(')content(control)delimiter(')>operator(,)
                     string<delimiter(')content(data( (cell|column|item|row|source\)\)?)delimiter(')>operator(,) string<delimiter(')content(default entry)delimiter(')>operator(,)
                     string<delimiter(')content(dialog reply)delimiter(')>operator(,) string<delimiter(')content(document)delimiter(')>operator(,) string<delimiter(')content(drag info)delimiter(')>operator(,) string<delimiter(')content(drawer)delimiter(')>operator(,)
                     string<delimiter(')content(event)delimiter(')>operator(,) string<delimiter(')content(font(-panel\)?)delimiter(')>operator(,) string<delimiter(')content(formatter)delimiter(')>operator(,)
                     string<delimiter(')content(image( (cell|view\)\)?)delimiter(')>operator(,) string<delimiter(')content(matrix)delimiter(')>operator(,) string<delimiter(')content(menu( item\)?)delimiter(')>operator(,) string<delimiter(')content(item)delimiter(')>operator(,)
                     string<delimiter(')content(movie( view\)?)delimiter(')>operator(,) string<delimiter(')content(open-panel)delimiter(')>operator(,) string<delimiter(')content(outline view)delimiter(')>operator(,) string<delimiter(')content(panel)delimiter(')>operator(,)
                     string<delimiter(')content(pasteboard)delimiter(')>operator(,) string<delimiter(')content(plugin)delimiter(')>operator(,) string<delimiter(')content(popup button)delimiter(')>operator(,)
                     string<delimiter(')content(progress indicator)delimiter(')>operator(,) string<delimiter(')content(responder)delimiter(')>operator(,) string<delimiter(')content(save-panel)delimiter(')>operator(,)
                     string<delimiter(')content(scroll view)delimiter(')>operator(,) string<delimiter(')content(secure text field( cell\)?)delimiter(')>operator(,) string<delimiter(')content(slider)delimiter(')>operator(,)
                     string<delimiter(')content(sound)delimiter(')>operator(,) string<delimiter(')content(split view)delimiter(')>operator(,) string<delimiter(')content(stepper)delimiter(')>operator(,) string<delimiter(')content(tab view( item\)?)delimiter(')>operator(,)
                     string<delimiter(')content(table( (column|header cell|header view|view\)\))delimiter(')>operator(,)
                     string<delimiter(')content(text( (field( cell\)?|view\)\)?)delimiter(')>operator(,) string<delimiter(')content(toolbar( item\)?)delimiter(')>operator(,)
                     string<delimiter(')content(user-defaults)delimiter(')>operator(,) string<delimiter(')content(view)delimiter(')>operator(,) string<delimiter(')content(window)delimiter(')>operator(])
    ident(StudioEvents) operator(=) operator([)string<delimiter(')content(accept outline drop)delimiter(')>operator(,) string<delimiter(')content(accept table drop)delimiter(')>operator(,) string<delimiter(')content(action)delimiter(')>operator(,)
                    string<delimiter(')content(activated)delimiter(')>operator(,) string<delimiter(')content(alert ended)delimiter(')>operator(,) string<delimiter(')content(awake from nib)delimiter(')>operator(,) string<delimiter(')content(became key)delimiter(')>operator(,)
                    string<delimiter(')content(became main)delimiter(')>operator(,) string<delimiter(')content(begin editing)delimiter(')>operator(,) string<delimiter(')content(bounds changed)delimiter(')>operator(,)
                    string<delimiter(')content(cell value)delimiter(')>operator(,) string<delimiter(')content(cell value changed)delimiter(')>operator(,) string<delimiter(')content(change cell value)delimiter(')>operator(,)
                    string<delimiter(')content(change item value)delimiter(')>operator(,) string<delimiter(')content(changed)delimiter(')>operator(,) string<delimiter(')content(child of item)delimiter(')>operator(,)
                    string<delimiter(')content(choose menu item)delimiter(')>operator(,) string<delimiter(')content(clicked)delimiter(')>operator(,) string<delimiter(')content(clicked toolbar item)delimiter(')>operator(,)
                    string<delimiter(')content(closed)delimiter(')>operator(,) string<delimiter(')content(column clicked)delimiter(')>operator(,) string<delimiter(')content(column moved)delimiter(')>operator(,)
                    string<delimiter(')content(column resized)delimiter(')>operator(,) string<delimiter(')content(conclude drop)delimiter(')>operator(,) string<delimiter(')content(data representation)delimiter(')>operator(,)
                    string<delimiter(')content(deminiaturized)delimiter(')>operator(,) string<delimiter(')content(dialog ended)delimiter(')>operator(,) string<delimiter(')content(document nib name)delimiter(')>operator(,)
                    string<delimiter(')content(double clicked)delimiter(')>operator(,) string<delimiter(')content(drag( (entered|exited|updated\)\)?)delimiter(')>operator(,)
                    string<delimiter(')content(drop)delimiter(')>operator(,) string<delimiter(')content(end editing)delimiter(')>operator(,) string<delimiter(')content(exposed)delimiter(')>operator(,) string<delimiter(')content(idle)delimiter(')>operator(,) string<delimiter(')content(item expandable)delimiter(')>operator(,)
                    string<delimiter(')content(item value)delimiter(')>operator(,) string<delimiter(')content(item value changed)delimiter(')>operator(,) string<delimiter(')content(items changed)delimiter(')>operator(,)
                    string<delimiter(')content(keyboard down)delimiter(')>operator(,) string<delimiter(')content(keyboard up)delimiter(')>operator(,) string<delimiter(')content(launched)delimiter(')>operator(,)
                    string<delimiter(')content(load data representation)delimiter(')>operator(,) string<delimiter(')content(miniaturized)delimiter(')>operator(,) string<delimiter(')content(mouse down)delimiter(')>operator(,)
                    string<delimiter(')content(mouse dragged)delimiter(')>operator(,) string<delimiter(')content(mouse entered)delimiter(')>operator(,) string<delimiter(')content(mouse exited)delimiter(')>operator(,)
                    string<delimiter(')content(mouse moved)delimiter(')>operator(,) string<delimiter(')content(mouse up)delimiter(')>operator(,) string<delimiter(')content(moved)delimiter(')>operator(,)
                    string<delimiter(')content(number of browser rows)delimiter(')>operator(,) string<delimiter(')content(number of items)delimiter(')>operator(,)
                    string<delimiter(')content(number of rows)delimiter(')>operator(,) string<delimiter(')content(open untitled)delimiter(')>operator(,) string<delimiter(')content(opened)delimiter(')>operator(,) string<delimiter(')content(panel ended)delimiter(')>operator(,)
                    string<delimiter(')content(parameters updated)delimiter(')>operator(,) string<delimiter(')content(plugin loaded)delimiter(')>operator(,) string<delimiter(')content(prepare drop)delimiter(')>operator(,)
                    string<delimiter(')content(prepare outline drag)delimiter(')>operator(,) string<delimiter(')content(prepare outline drop)delimiter(')>operator(,)
                    string<delimiter(')content(prepare table drag)delimiter(')>operator(,) string<delimiter(')content(prepare table drop)delimiter(')>operator(,)
                    string<delimiter(')content(read from file)delimiter(')>operator(,) string<delimiter(')content(resigned active)delimiter(')>operator(,) string<delimiter(')content(resigned key)delimiter(')>operator(,)
                    string<delimiter(')content(resigned main)delimiter(')>operator(,) string<delimiter(')content(resized( sub views\)?)delimiter(')>operator(,)
                    string<delimiter(')content(right mouse down)delimiter(')>operator(,) string<delimiter(')content(right mouse dragged)delimiter(')>operator(,)
                    string<delimiter(')content(right mouse up)delimiter(')>operator(,) string<delimiter(')content(rows changed)delimiter(')>operator(,) string<delimiter(')content(scroll wheel)delimiter(')>operator(,)
                    string<delimiter(')content(selected tab view item)delimiter(')>operator(,) string<delimiter(')content(selection changed)delimiter(')>operator(,)
                    string<delimiter(')content(selection changing)delimiter(')>operator(,) string<delimiter(')content(should begin editing)delimiter(')>operator(,)
                    string<delimiter(')content(should close)delimiter(')>operator(,) string<delimiter(')content(should collapse item)delimiter(')>operator(,)
                    string<delimiter(')content(should end editing)delimiter(')>operator(,) string<delimiter(')content(should expand item)delimiter(')>operator(,)
                    string<delimiter(')content(should open( untitled\)?)delimiter(')>operator(,)
                    string<delimiter(')content(should quit( after last window closed\)?)delimiter(')>operator(,)
                    string<delimiter(')content(should select column)delimiter(')>operator(,) string<delimiter(')content(should select item)delimiter(')>operator(,)
                    string<delimiter(')content(should select row)delimiter(')>operator(,) string<delimiter(')content(should select tab view item)delimiter(')>operator(,)
                    string<delimiter(')content(should selection change)delimiter(')>operator(,) string<delimiter(')content(should zoom)delimiter(')>operator(,) string<delimiter(')content(shown)delimiter(')>operator(,)
                    string<delimiter(')content(update menu item)delimiter(')>operator(,) string<delimiter(')content(update parameters)delimiter(')>operator(,)
                    string<delimiter(')content(update toolbar item)delimiter(')>operator(,) string<delimiter(')content(was hidden)delimiter(')>operator(,) string<delimiter(')content(was miniaturized)delimiter(')>operator(,)
                    string<delimiter(')content(will become active)delimiter(')>operator(,) string<delimiter(')content(will close)delimiter(')>operator(,) string<delimiter(')content(will dismiss)delimiter(')>operator(,)
                    string<delimiter(')content(will display browser cell)delimiter(')>operator(,) string<delimiter(')content(will display cell)delimiter(')>operator(,)
                    string<delimiter(')content(will display item cell)delimiter(')>operator(,) string<delimiter(')content(will display outline cell)delimiter(')>operator(,)
                    string<delimiter(')content(will finish launching)delimiter(')>operator(,) string<delimiter(')content(will hide)delimiter(')>operator(,) string<delimiter(')content(will miniaturize)delimiter(')>operator(,)
                    string<delimiter(')content(will move)delimiter(')>operator(,) string<delimiter(')content(will open)delimiter(')>operator(,) string<delimiter(')content(will pop up)delimiter(')>operator(,) string<delimiter(')content(will quit)delimiter(')>operator(,)
                    string<delimiter(')content(will resign active)delimiter(')>operator(,) string<delimiter(')content(will resize( sub views\)?)delimiter(')>operator(,)
                    string<delimiter(')content(will select tab view item)delimiter(')>operator(,) string<delimiter(')content(will show)delimiter(')>operator(,) string<delimiter(')content(will zoom)delimiter(')>operator(,)
                    string<delimiter(')content(write to file)delimiter(')>operator(,) string<delimiter(')content(zoomed)delimiter(')>operator(])
    ident(StudioCommands) operator(=) operator([)string<delimiter(')content(animate)delimiter(')>operator(,) string<delimiter(')content(append)delimiter(')>operator(,) string<delimiter(')content(call method)delimiter(')>operator(,) string<delimiter(')content(center)delimiter(')>operator(,)
                      string<delimiter(')content(close drawer)delimiter(')>operator(,) string<delimiter(')content(close panel)delimiter(')>operator(,) string<delimiter(')content(display)delimiter(')>operator(,)
                      string<delimiter(')content(display alert)delimiter(')>operator(,) string<delimiter(')content(display dialog)delimiter(')>operator(,) string<delimiter(')content(display panel)delimiter(')>operator(,) string<delimiter(')content(go)delimiter(')>operator(,)
                      string<delimiter(')content(hide)delimiter(')>operator(,) string<delimiter(')content(highlight)delimiter(')>operator(,) string<delimiter(')content(increment)delimiter(')>operator(,) string<delimiter(')content(item for)delimiter(')>operator(,)
                      string<delimiter(')content(load image)delimiter(')>operator(,) string<delimiter(')content(load movie)delimiter(')>operator(,) string<delimiter(')content(load nib)delimiter(')>operator(,) string<delimiter(')content(load panel)delimiter(')>operator(,)
                      string<delimiter(')content(load sound)delimiter(')>operator(,) string<delimiter(')content(localized string)delimiter(')>operator(,) string<delimiter(')content(lock focus)delimiter(')>operator(,) string<delimiter(')content(log)delimiter(')>operator(,)
                      string<delimiter(')content(open drawer)delimiter(')>operator(,) string<delimiter(')content(path for)delimiter(')>operator(,) string<delimiter(')content(pause)delimiter(')>operator(,) string<delimiter(')content(perform action)delimiter(')>operator(,)
                      string<delimiter(')content(play)delimiter(')>operator(,) string<delimiter(')content(register)delimiter(')>operator(,) string<delimiter(')content(resume)delimiter(')>operator(,) string<delimiter(')content(scroll)delimiter(')>operator(,) string<delimiter(')content(select( all\)?)delimiter(')>operator(,)
                      string<delimiter(')content(show)delimiter(')>operator(,) string<delimiter(')content(size to fit)delimiter(')>operator(,) string<delimiter(')content(start)delimiter(')>operator(,) string<delimiter(')content(step back)delimiter(')>operator(,)
                      string<delimiter(')content(step forward)delimiter(')>operator(,) string<delimiter(')content(stop)delimiter(')>operator(,) string<delimiter(')content(synchronize)delimiter(')>operator(,) string<delimiter(')content(unlock focus)delimiter(')>operator(,)
                      string<delimiter(')content(update)delimiter(')>operator(])
    ident(StudioProperties) operator(=) operator([)string<delimiter(')content(accepts arrow key)delimiter(')>operator(,) string<delimiter(')content(action method)delimiter(')>operator(,) string<delimiter(')content(active)delimiter(')>operator(,)
                        string<delimiter(')content(alignment)delimiter(')>operator(,) string<delimiter(')content(allowed identifiers)delimiter(')>operator(,)
                        string<delimiter(')content(allows branch selection)delimiter(')>operator(,) string<delimiter(')content(allows column reordering)delimiter(')>operator(,)
                        string<delimiter(')content(allows column resizing)delimiter(')>operator(,) string<delimiter(')content(allows column selection)delimiter(')>operator(,)
                        string<delimiter(')content(allows customization)delimiter(')>operator(,)
                        string<delimiter(')content(allows editing text attributes)delimiter(')>operator(,)
                        string<delimiter(')content(allows empty selection)delimiter(')>operator(,) string<delimiter(')content(allows mixed state)delimiter(')>operator(,)
                        string<delimiter(')content(allows multiple selection)delimiter(')>operator(,) string<delimiter(')content(allows reordering)delimiter(')>operator(,)
                        string<delimiter(')content(allows undo)delimiter(')>operator(,) string<delimiter(')content(alpha( value\)?)delimiter(')>operator(,) string<delimiter(')content(alternate image)delimiter(')>operator(,)
                        string<delimiter(')content(alternate increment value)delimiter(')>operator(,) string<delimiter(')content(alternate title)delimiter(')>operator(,)
                        string<delimiter(')content(animation delay)delimiter(')>operator(,) string<delimiter(')content(associated file name)delimiter(')>operator(,)
                        string<delimiter(')content(associated object)delimiter(')>operator(,) string<delimiter(')content(auto completes)delimiter(')>operator(,) string<delimiter(')content(auto display)delimiter(')>operator(,)
                        string<delimiter(')content(auto enables items)delimiter(')>operator(,) string<delimiter(')content(auto repeat)delimiter(')>operator(,)
                        string<delimiter(')content(auto resizes( outline column\)?)delimiter(')>operator(,)
                        string<delimiter(')content(auto save expanded items)delimiter(')>operator(,) string<delimiter(')content(auto save name)delimiter(')>operator(,)
                        string<delimiter(')content(auto save table columns)delimiter(')>operator(,) string<delimiter(')content(auto saves configuration)delimiter(')>operator(,)
                        string<delimiter(')content(auto scroll)delimiter(')>operator(,) string<delimiter(')content(auto sizes all columns to fit)delimiter(')>operator(,)
                        string<delimiter(')content(auto sizes cells)delimiter(')>operator(,) string<delimiter(')content(background color)delimiter(')>operator(,) string<delimiter(')content(bezel state)delimiter(')>operator(,)
                        string<delimiter(')content(bezel style)delimiter(')>operator(,) string<delimiter(')content(bezeled)delimiter(')>operator(,) string<delimiter(')content(border rect)delimiter(')>operator(,) string<delimiter(')content(border type)delimiter(')>operator(,)
                        string<delimiter(')content(bordered)delimiter(')>operator(,) string<delimiter(')content(bounds( rotation\)?)delimiter(')>operator(,) string<delimiter(')content(box type)delimiter(')>operator(,)
                        string<delimiter(')content(button returned)delimiter(')>operator(,) string<delimiter(')content(button type)delimiter(')>operator(,)
                        string<delimiter(')content(can choose directories)delimiter(')>operator(,) string<delimiter(')content(can choose files)delimiter(')>operator(,)
                        string<delimiter(')content(can draw)delimiter(')>operator(,) string<delimiter(')content(can hide)delimiter(')>operator(,)
                        string<delimiter(')content(cell( (background color|size|type\)\)?)delimiter(')>operator(,) string<delimiter(')content(characters)delimiter(')>operator(,)
                        string<delimiter(')content(class)delimiter(')>operator(,) string<delimiter(')content(click count)delimiter(')>operator(,) string<delimiter(')content(clicked( data\)? column)delimiter(')>operator(,)
                        string<delimiter(')content(clicked data item)delimiter(')>operator(,) string<delimiter(')content(clicked( data\)? row)delimiter(')>operator(,)
                        string<delimiter(')content(closeable)delimiter(')>operator(,) string<delimiter(')content(collating)delimiter(')>operator(,) string<delimiter(')content(color( (mode|panel\)\))delimiter(')>operator(,)
                        string<delimiter(')content(command key down)delimiter(')>operator(,) string<delimiter(')content(configuration)delimiter(')>operator(,)
                        string<delimiter(')content(content(s| (size|view( margins\)?\)\)?)delimiter(')>operator(,) string<delimiter(')content(context)delimiter(')>operator(,)
                        string<delimiter(')content(continuous)delimiter(')>operator(,) string<delimiter(')content(control key down)delimiter(')>operator(,) string<delimiter(')content(control size)delimiter(')>operator(,)
                        string<delimiter(')content(control tint)delimiter(')>operator(,) string<delimiter(')content(control view)delimiter(')>operator(,)
                        string<delimiter(')content(controller visible)delimiter(')>operator(,) string<delimiter(')content(coordinate system)delimiter(')>operator(,)
                        string<delimiter(')content(copies( on scroll\)?)delimiter(')>operator(,) string<delimiter(')content(corner view)delimiter(')>operator(,) string<delimiter(')content(current cell)delimiter(')>operator(,)
                        string<delimiter(')content(current column)delimiter(')>operator(,) string<delimiter(')content(current( field\)?  editor)delimiter(')>operator(,)
                        string<delimiter(')content(current( menu\)? item)delimiter(')>operator(,) string<delimiter(')content(current row)delimiter(')>operator(,)
                        string<delimiter(')content(current tab view item)delimiter(')>operator(,) string<delimiter(')content(data source)delimiter(')>operator(,)
                        string<delimiter(')content(default identifiers)delimiter(')>operator(,) string<delimiter(')content(delta (x|y|z\))delimiter(')>operator(,)
                        string<delimiter(')content(destination window)delimiter(')>operator(,) string<delimiter(')content(directory)delimiter(')>operator(,) string<delimiter(')content(display mode)delimiter(')>operator(,)
                        string<delimiter(')content(displayed cell)delimiter(')>operator(,) string<delimiter(')content(document( (edited|rect|view\)\)?)delimiter(')>operator(,)
                        string<delimiter(')content(double value)delimiter(')>operator(,) string<delimiter(')content(dragged column)delimiter(')>operator(,) string<delimiter(')content(dragged distance)delimiter(')>operator(,)
                        string<delimiter(')content(dragged items)delimiter(')>operator(,) string<delimiter(')content(draws( cell\)? background)delimiter(')>operator(,)
                        string<delimiter(')content(draws grid)delimiter(')>operator(,) string<delimiter(')content(dynamically scrolls)delimiter(')>operator(,) string<delimiter(')content(echos bullets)delimiter(')>operator(,)
                        string<delimiter(')content(edge)delimiter(')>operator(,) string<delimiter(')content(editable)delimiter(')>operator(,) string<delimiter(')content(edited( data\)? column)delimiter(')>operator(,)
                        string<delimiter(')content(edited data item)delimiter(')>operator(,) string<delimiter(')content(edited( data\)? row)delimiter(')>operator(,) string<delimiter(')content(enabled)delimiter(')>operator(,)
                        string<delimiter(')content(enclosing scroll view)delimiter(')>operator(,) string<delimiter(')content(ending page)delimiter(')>operator(,)
                        string<delimiter(')content(error handling)delimiter(')>operator(,) string<delimiter(')content(event number)delimiter(')>operator(,) string<delimiter(')content(event type)delimiter(')>operator(,)
                        string<delimiter(')content(excluded from windows menu)delimiter(')>operator(,) string<delimiter(')content(executable path)delimiter(')>operator(,)
                        string<delimiter(')content(expanded)delimiter(')>operator(,) string<delimiter(')content(fax number)delimiter(')>operator(,) string<delimiter(')content(field editor)delimiter(')>operator(,) string<delimiter(')content(file kind)delimiter(')>operator(,)
                        string<delimiter(')content(file name)delimiter(')>operator(,) string<delimiter(')content(file type)delimiter(')>operator(,) string<delimiter(')content(first responder)delimiter(')>operator(,)
                        string<delimiter(')content(first visible column)delimiter(')>operator(,) string<delimiter(')content(flipped)delimiter(')>operator(,) string<delimiter(')content(floating)delimiter(')>operator(,)
                        string<delimiter(')content(font( panel\)?)delimiter(')>operator(,) string<delimiter(')content(formatter)delimiter(')>operator(,) string<delimiter(')content(frameworks path)delimiter(')>operator(,)
                        string<delimiter(')content(frontmost)delimiter(')>operator(,) string<delimiter(')content(gave up)delimiter(')>operator(,) string<delimiter(')content(grid color)delimiter(')>operator(,) string<delimiter(')content(has data items)delimiter(')>operator(,)
                        string<delimiter(')content(has horizontal ruler)delimiter(')>operator(,) string<delimiter(')content(has horizontal scroller)delimiter(')>operator(,)
                        string<delimiter(')content(has parent data item)delimiter(')>operator(,) string<delimiter(')content(has resize indicator)delimiter(')>operator(,)
                        string<delimiter(')content(has shadow)delimiter(')>operator(,) string<delimiter(')content(has sub menu)delimiter(')>operator(,) string<delimiter(')content(has vertical ruler)delimiter(')>operator(,)
                        string<delimiter(')content(has vertical scroller)delimiter(')>operator(,) string<delimiter(')content(header cell)delimiter(')>operator(,) string<delimiter(')content(header view)delimiter(')>operator(,)
                        string<delimiter(')content(hidden)delimiter(')>operator(,) string<delimiter(')content(hides when deactivated)delimiter(')>operator(,) string<delimiter(')content(highlights by)delimiter(')>operator(,)
                        string<delimiter(')content(horizontal line scroll)delimiter(')>operator(,) string<delimiter(')content(horizontal page scroll)delimiter(')>operator(,)
                        string<delimiter(')content(horizontal ruler view)delimiter(')>operator(,) string<delimiter(')content(horizontally resizable)delimiter(')>operator(,)
                        string<delimiter(')content(icon image)delimiter(')>operator(,) string<delimiter(')content(id)delimiter(')>operator(,) string<delimiter(')content(identifier)delimiter(')>operator(,)
                        string<delimiter(')content(ignores multiple clicks)delimiter(')>operator(,)
                        string<delimiter(')content(image( (alignment|dims when disabled|frame style|)delimiter(')>
                            string<delimiter(')content(scaling\)\)?)delimiter(')>operator(,)
                        string<delimiter(')content(imports graphics)delimiter(')>operator(,) string<delimiter(')content(increment value)delimiter(')>operator(,)
                        string<delimiter(')content(indentation per level)delimiter(')>operator(,) string<delimiter(')content(indeterminate)delimiter(')>operator(,) string<delimiter(')content(index)delimiter(')>operator(,)
                        string<delimiter(')content(integer value)delimiter(')>operator(,) string<delimiter(')content(intercell spacing)delimiter(')>operator(,) string<delimiter(')content(item height)delimiter(')>operator(,)
                        string<delimiter(')content(key( (code|equivalent( modifier\)?|window\)\)?)delimiter(')>operator(,)
                        string<delimiter(')content(knob thickness)delimiter(')>operator(,) string<delimiter(')content(label)delimiter(')>operator(,) string<delimiter(')content(last( visible\)? column)delimiter(')>operator(,)
                        string<delimiter(')content(leading offset)delimiter(')>operator(,) string<delimiter(')content(leaf)delimiter(')>operator(,) string<delimiter(')content(level)delimiter(')>operator(,) string<delimiter(')content(line scroll)delimiter(')>operator(,)
                        string<delimiter(')content(loaded)delimiter(')>operator(,) string<delimiter(')content(localized sort)delimiter(')>operator(,) string<delimiter(')content(location)delimiter(')>operator(,) string<delimiter(')content(loop mode)delimiter(')>operator(,)
                        string<delimiter(')content(main( (bunde|menu|window\)\)?)delimiter(')>operator(,) string<delimiter(')content(marker follows cell)delimiter(')>operator(,)
                        string<delimiter(')content(matrix mode)delimiter(')>operator(,) string<delimiter(')content(maximum( content\)? size)delimiter(')>operator(,)
                        string<delimiter(')content(maximum visible columns)delimiter(')>operator(,)
                        string<delimiter(')content(menu( form representation\)?)delimiter(')>operator(,) string<delimiter(')content(miniaturizable)delimiter(')>operator(,)
                        string<delimiter(')content(miniaturized)delimiter(')>operator(,) string<delimiter(')content(minimized image)delimiter(')>operator(,) string<delimiter(')content(minimized title)delimiter(')>operator(,)
                        string<delimiter(')content(minimum column width)delimiter(')>operator(,) string<delimiter(')content(minimum( content\)? size)delimiter(')>operator(,)
                        string<delimiter(')content(modal)delimiter(')>operator(,) string<delimiter(')content(modified)delimiter(')>operator(,) string<delimiter(')content(mouse down state)delimiter(')>operator(,)
                        string<delimiter(')content(movie( (controller|file|rect\)\)?)delimiter(')>operator(,) string<delimiter(')content(muted)delimiter(')>operator(,) string<delimiter(')content(name)delimiter(')>operator(,)
                        string<delimiter(')content(needs display)delimiter(')>operator(,) string<delimiter(')content(next state)delimiter(')>operator(,) string<delimiter(')content(next text)delimiter(')>operator(,)
                        string<delimiter(')content(number of tick marks)delimiter(')>operator(,) string<delimiter(')content(only tick mark values)delimiter(')>operator(,)
                        string<delimiter(')content(opaque)delimiter(')>operator(,) string<delimiter(')content(open panel)delimiter(')>operator(,) string<delimiter(')content(option key down)delimiter(')>operator(,)
                        string<delimiter(')content(outline table column)delimiter(')>operator(,) string<delimiter(')content(page scroll)delimiter(')>operator(,) string<delimiter(')content(pages across)delimiter(')>operator(,)
                        string<delimiter(')content(pages down)delimiter(')>operator(,) string<delimiter(')content(palette label)delimiter(')>operator(,) string<delimiter(')content(pane splitter)delimiter(')>operator(,)
                        string<delimiter(')content(parent data item)delimiter(')>operator(,) string<delimiter(')content(parent window)delimiter(')>operator(,) string<delimiter(')content(pasteboard)delimiter(')>operator(,)
                        string<delimiter(')content(path( (names|separator\)\)?)delimiter(')>operator(,) string<delimiter(')content(playing)delimiter(')>operator(,)
                        string<delimiter(')content(plays every frame)delimiter(')>operator(,) string<delimiter(')content(plays selection only)delimiter(')>operator(,) string<delimiter(')content(position)delimiter(')>operator(,)
                        string<delimiter(')content(preferred edge)delimiter(')>operator(,) string<delimiter(')content(preferred type)delimiter(')>operator(,) string<delimiter(')content(pressure)delimiter(')>operator(,)
                        string<delimiter(')content(previous text)delimiter(')>operator(,) string<delimiter(')content(prompt)delimiter(')>operator(,) string<delimiter(')content(properties)delimiter(')>operator(,)
                        string<delimiter(')content(prototype cell)delimiter(')>operator(,) string<delimiter(')content(pulls down)delimiter(')>operator(,) string<delimiter(')content(rate)delimiter(')>operator(,)
                        string<delimiter(')content(released when closed)delimiter(')>operator(,) string<delimiter(')content(repeated)delimiter(')>operator(,)
                        string<delimiter(')content(requested print time)delimiter(')>operator(,) string<delimiter(')content(required file type)delimiter(')>operator(,)
                        string<delimiter(')content(resizable)delimiter(')>operator(,) string<delimiter(')content(resized column)delimiter(')>operator(,) string<delimiter(')content(resource path)delimiter(')>operator(,)
                        string<delimiter(')content(returns records)delimiter(')>operator(,) string<delimiter(')content(reuses columns)delimiter(')>operator(,) string<delimiter(')content(rich text)delimiter(')>operator(,)
                        string<delimiter(')content(roll over)delimiter(')>operator(,) string<delimiter(')content(row height)delimiter(')>operator(,) string<delimiter(')content(rulers visible)delimiter(')>operator(,)
                        string<delimiter(')content(save panel)delimiter(')>operator(,) string<delimiter(')content(scripts path)delimiter(')>operator(,) string<delimiter(')content(scrollable)delimiter(')>operator(,)
                        string<delimiter(')content(selectable( identifiers\)?)delimiter(')>operator(,) string<delimiter(')content(selected cell)delimiter(')>operator(,)
                        string<delimiter(')content(selected( data\)? columns?)delimiter(')>operator(,) string<delimiter(')content(selected data items?)delimiter(')>operator(,)
                        string<delimiter(')content(selected( data\)? rows?)delimiter(')>operator(,) string<delimiter(')content(selected item identifier)delimiter(')>operator(,)
                        string<delimiter(')content(selection by rect)delimiter(')>operator(,) string<delimiter(')content(send action on arrow key)delimiter(')>operator(,)
                        string<delimiter(')content(sends action when done editing)delimiter(')>operator(,) string<delimiter(')content(separates columns)delimiter(')>operator(,)
                        string<delimiter(')content(separator item)delimiter(')>operator(,) string<delimiter(')content(sequence number)delimiter(')>operator(,) string<delimiter(')content(services menu)delimiter(')>operator(,)
                        string<delimiter(')content(shared frameworks path)delimiter(')>operator(,) string<delimiter(')content(shared support path)delimiter(')>operator(,)
                        string<delimiter(')content(sheet)delimiter(')>operator(,) string<delimiter(')content(shift key down)delimiter(')>operator(,) string<delimiter(')content(shows alpha)delimiter(')>operator(,)
                        string<delimiter(')content(shows state by)delimiter(')>operator(,) string<delimiter(')content(size( mode\)?)delimiter(')>operator(,)
                        string<delimiter(')content(smart insert delete enabled)delimiter(')>operator(,) string<delimiter(')content(sort case sensitivity)delimiter(')>operator(,)
                        string<delimiter(')content(sort column)delimiter(')>operator(,) string<delimiter(')content(sort order)delimiter(')>operator(,) string<delimiter(')content(sort type)delimiter(')>operator(,)
                        string<delimiter(')content(sorted( data rows\)?)delimiter(')>operator(,) string<delimiter(')content(sound)delimiter(')>operator(,) string<delimiter(')content(source( mask\)?)delimiter(')>operator(,)
                        string<delimiter(')content(spell checking enabled)delimiter(')>operator(,) string<delimiter(')content(starting page)delimiter(')>operator(,) string<delimiter(')content(state)delimiter(')>operator(,)
                        string<delimiter(')content(string value)delimiter(')>operator(,) string<delimiter(')content(sub menu)delimiter(')>operator(,) string<delimiter(')content(super menu)delimiter(')>operator(,) string<delimiter(')content(super view)delimiter(')>operator(,)
                        string<delimiter(')content(tab key traverses cells)delimiter(')>operator(,) string<delimiter(')content(tab state)delimiter(')>operator(,) string<delimiter(')content(tab type)delimiter(')>operator(,)
                        string<delimiter(')content(tab view)delimiter(')>operator(,) string<delimiter(')content(table view)delimiter(')>operator(,) string<delimiter(')content(tag)delimiter(')>operator(,) string<delimiter(')content(target( printer\)?)delimiter(')>operator(,)
                        string<delimiter(')content(text color)delimiter(')>operator(,) string<delimiter(')content(text container insert)delimiter(')>operator(,)
                        string<delimiter(')content(text container origin)delimiter(')>operator(,) string<delimiter(')content(text returned)delimiter(')>operator(,)
                        string<delimiter(')content(tick mark position)delimiter(')>operator(,) string<delimiter(')content(time stamp)delimiter(')>operator(,)
                        string<delimiter(')content(title(d| (cell|font|height|position|rect\)\)?)delimiter(')>operator(,)
                        string<delimiter(')content(tool tip)delimiter(')>operator(,) string<delimiter(')content(toolbar)delimiter(')>operator(,) string<delimiter(')content(trailing offset)delimiter(')>operator(,) string<delimiter(')content(transparent)delimiter(')>operator(,)
                        string<delimiter(')content(treat packages as directories)delimiter(')>operator(,) string<delimiter(')content(truncated labels)delimiter(')>operator(,)
                        string<delimiter(')content(types)delimiter(')>operator(,) string<delimiter(')content(unmodified characters)delimiter(')>operator(,) string<delimiter(')content(update views)delimiter(')>operator(,)
                        string<delimiter(')content(use sort indicator)delimiter(')>operator(,) string<delimiter(')content(user defaults)delimiter(')>operator(,)
                        string<delimiter(')content(uses data source)delimiter(')>operator(,) string<delimiter(')content(uses ruler)delimiter(')>operator(,)
                        string<delimiter(')content(uses threaded animation)delimiter(')>operator(,)
                        string<delimiter(')content(uses title from previous column)delimiter(')>operator(,) string<delimiter(')content(value wraps)delimiter(')>operator(,)
                        string<delimiter(')content(version)delimiter(')>operator(,)
                        string<delimiter(')content(vertical( (line scroll|page scroll|ruler view\)\)?)delimiter(')>operator(,)
                        string<delimiter(')content(vertically resizable)delimiter(')>operator(,) string<delimiter(')content(view)delimiter(')>operator(,)
                        string<delimiter(')content(visible( document rect\)?)delimiter(')>operator(,) string<delimiter(')content(volume)delimiter(')>operator(,) string<delimiter(')content(width)delimiter(')>operator(,) string<delimiter(')content(window)delimiter(')>operator(,)
                        string<delimiter(')content(windows menu)delimiter(')>operator(,) string<delimiter(')content(wraps)delimiter(')>operator(,) string<delimiter(')content(zoomable)delimiter(')>operator(,) string<delimiter(')content(zoomed)delimiter(')>operator(])

    ident(tokens) operator(=) operator({)
        string<delimiter(')content(root)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\s)content(+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(ur)delimiter(')content(¬)content(\\n)delimiter(')>operator(,) ident(String)operator(.)ident(Escape)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(")content('s)content(\\s)content(+)delimiter(")>operator(,) ident(Text)operator(\))operator(,) comment(# This is a possessive, consider moving)
            operator(()string<modifier(r)delimiter(')content((--|#\).*?$)delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\()content(\\*)delimiter(')>operator(,) ident(Comment)operator(.)ident(Multiline)operator(,) string<delimiter(')content(comment)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([)content(\\()content(\\\))content({}!,.:])delimiter(')>operator(,) ident(Punctuation)operator(\))operator(,)
            operator(()string<modifier(ur)delimiter(')content((«\)([^»]+\)(»\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Text)operator(,) ident(Name)operator(.)ident(Builtin)operator(,) ident(Text)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\b)content(((?:considering|ignoring\))content(\\s)content(*\))delimiter(')>
             string<modifier(r)delimiter(')content((application responses|case|diacriticals|hyphens|)delimiter(')>
             string<modifier(r)delimiter(')content(numeric strings|punctuation|white space\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Keyword)operator(,) ident(Name)operator(.)ident(Builtin)operator(\))operator(\))operator(,)
            operator(()string<modifier(ur)delimiter(')content((-|)content(\\*)content(|)content(\\+)content(|&|≠|>=?|<=?|=|≥|≤|/|÷|)content(\\^)content(\))delimiter(')>operator(,) ident(Operator)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(")content(\\b)content((%s\))content(\\b)delimiter(")> operator(%) string<delimiter(')content(|)delimiter(')>operator(.)ident(join)operator(()ident(Operators)operator(\))operator(,) ident(Operator)operator(.)ident(Word)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(^()content(\\s)content(*(?:on|end\))content(\\s)content(+\))delimiter(')>
             string<modifier(r)delimiter(')content((%s\))delimiter(')> operator(%) string<delimiter(')content(|)delimiter(')>operator(.)ident(join)operator(()ident(StudioEvents)operator(\))operator(,)
             ident(bygroups)operator(()ident(Keyword)operator(,) ident(Name)operator(.)ident(Function)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(^()content(\\s)content(*\)(in|on|script|to\)()content(\\s)content(+\))delimiter(')>operator(,) ident(bygroups)operator(()ident(Text)operator(,) ident(Keyword)operator(,) ident(Text)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\b)content((as \)(%s\))content(\\b)delimiter(')> operator(%) string<delimiter(')content(|)delimiter(')>operator(.)ident(join)operator(()ident(Classes)operator(\))operator(,)
             ident(bygroups)operator(()ident(Keyword)operator(,) ident(Name)operator(.)ident(Class)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\b)content((%s\))content(\\b)delimiter(')> operator(%) string<delimiter(')content(|)delimiter(')>operator(.)ident(join)operator(()ident(Literals)operator(\))operator(,) ident(Name)operator(.)ident(Constant)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\b)content((%s\))content(\\b)delimiter(')> operator(%) string<delimiter(')content(|)delimiter(')>operator(.)ident(join)operator(()ident(Commands)operator(\))operator(,) ident(Name)operator(.)ident(Builtin)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\b)content((%s\))content(\\b)delimiter(')> operator(%) string<delimiter(')content(|)delimiter(')>operator(.)ident(join)operator(()ident(Control)operator(\))operator(,) ident(Keyword)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\b)content((%s\))content(\\b)delimiter(')> operator(%) string<delimiter(')content(|)delimiter(')>operator(.)ident(join)operator(()ident(Declarations)operator(\))operator(,) ident(Keyword)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\b)content((%s\))content(\\b)delimiter(')> operator(%) string<delimiter(')content(|)delimiter(')>operator(.)ident(join)operator(()ident(Reserved)operator(\))operator(,) ident(Name)operator(.)ident(Builtin)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\b)content((%s\)s?)content(\\b)delimiter(')> operator(%) string<delimiter(')content(|)delimiter(')>operator(.)ident(join)operator(()ident(BuiltIn)operator(\))operator(,) ident(Name)operator(.)ident(Builtin)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\b)content((%s\))content(\\b)delimiter(')> operator(%) string<delimiter(')content(|)delimiter(')>operator(.)ident(join)operator(()ident(HandlerParams)operator(\))operator(,) ident(Name)operator(.)ident(Builtin)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\b)content((%s\))content(\\b)delimiter(')> operator(%) string<delimiter(')content(|)delimiter(')>operator(.)ident(join)operator(()ident(StudioProperties)operator(\))operator(,) ident(Name)operator(.)ident(Attribute)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\b)content((%s\)s?)content(\\b)delimiter(')> operator(%) string<delimiter(')content(|)delimiter(')>operator(.)ident(join)operator(()ident(StudioClasses)operator(\))operator(,) ident(Name)operator(.)ident(Builtin)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\b)content((%s\))content(\\b)delimiter(')> operator(%) string<delimiter(')content(|)delimiter(')>operator(.)ident(join)operator(()ident(StudioCommands)operator(\))operator(,) ident(Name)operator(.)ident(Builtin)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\b)content((%s\))content(\\b)delimiter(')> operator(%) string<delimiter(')content(|)delimiter(')>operator(.)ident(join)operator(()ident(References)operator(\))operator(,) ident(Name)operator(.)ident(Builtin)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content("()content(\\\\)content(\\\\)content(|)content(\\\\)content("|[^"]\)*")delimiter(')>operator(,) ident(String)operator(.)ident(Double)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\b)content((%s\))content(\\b)delimiter(')> operator(%) ident(Identifiers)operator(,) ident(Name)operator(.)ident(Variable)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([-+]?()content(\\d)content(+)content(\\.)content(\\d)content(*|)content(\\d)content(*)content(\\.)content(\\d)content(+\)(E[-+][0-9]+\)?)delimiter(')>operator(,) ident(Number)operator(.)ident(Float)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([-+]?)content(\\d)content(+)delimiter(')>operator(,) ident(Number)operator(.)ident(Integer)operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(comment)delimiter(')>operator(:) operator([)
            operator(()string<delimiter(')content(\\()content(\\*)delimiter(')>operator(,) ident(Comment)operator(.)ident(Multiline)operator(,) string<delimiter(')content(#push)delimiter(')>operator(\))operator(,)
            operator(()string<delimiter(')content(\\*)content(\\\))delimiter(')>operator(,) ident(Comment)operator(.)ident(Multiline)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<delimiter(')content([^*(]+)delimiter(')>operator(,) ident(Comment)operator(.)ident(Multiline)operator(\))operator(,)
            operator(()string<delimiter(')content([*(])delimiter(')>operator(,) ident(Comment)operator(.)ident(Multiline)operator(\))operator(,)
        operator(])operator(,)
    operator(})


keyword(class) class(ModelicaLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    For `Modelica <http://www.modelica.org/>`_ source code.)content(
)content(
)content(    *New in Pygments 1.1.*)content(
)content(    )delimiter(""")>
    ident(name) operator(=) string<delimiter(')content(Modelica)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(modelica)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.mo)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(text/x-modelica)delimiter(')>operator(])

    ident(flags) operator(=) ident(re)operator(.)ident(IGNORECASE) operator(|) ident(re)operator(.)ident(DOTALL)

    ident(tokens) operator(=) operator({)
        string<delimiter(')content(whitespace)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\n)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\s)content(+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\\\)content(\\n)delimiter(')>operator(,) ident(Text)operator(\))operator(,) comment(# line continuation)
            operator(()string<modifier(r)delimiter(')content(//()content(\\n)content(|(.|)content(\\n)content(\)*?[^)content(\\\\)content(])content(\\n)content(\))delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(/()content(\\\\)content(\\n)content(\)?[*](.|)content(\\n)content(\)*?[*]()content(\\\\)content(\\n)content(\)?/)delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(statements)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(")delimiter(')>operator(,) ident(String)operator(,) string<delimiter(')content(string)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(()content(\\d)content(+)content(\\.)content(\\d)content(*|)content(\\.)content(\\d)content(+|)content(\\d)content(+|)content(\\d)content(.\)[eE][+-]?)content(\\d)content(+[lL]?)delimiter(')>operator(,) ident(Number)operator(.)ident(Float)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(()content(\\d)content(+)content(\\.)content(\\d)content(*|)content(\\.)content(\\d)content(+\))delimiter(')>operator(,) ident(Number)operator(.)ident(Float)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\d)content(+[Ll]?)delimiter(')>operator(,) ident(Number)operator(.)ident(Integer)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([~!%^&*+=|?:<>/-])delimiter(')>operator(,) ident(Operator)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([(\))content(\\[)content(\\])content({},.;])delimiter(')>operator(,) ident(Punctuation)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((true|false|NULL|Real|Integer|Boolean\))content(\\b)delimiter(')>operator(,) ident(Name)operator(.)ident(Builtin)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(")content(([a-zA-Z_][)content(\\w)content(]*|'[a-zA-Z_)content(\\+)content(\\-)content(\\*)content(\\/)content(\\^)content(][)content(\\w)content(]*'\))delimiter(")>
             string<modifier(r)delimiter(")content(()content(\\.)content(([a-zA-Z_][)content(\\w)content(]*|'[a-zA-Z_)content(\\+)content(\\-)content(\\*)content(\\/)content(\\^)content(][)content(\\w)content(]*'\)\)+)delimiter(")>operator(,) ident(Name)operator(.)ident(Class)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(")content(('[)content(\\w)content(\\+)content(\\-)content(\\*)content(\\/)content(\\^)content(]+'|)content(\\w)content(+\))delimiter(")>operator(,) ident(Name)operator(\))        operator(])operator(,)
        string<delimiter(')content(root)delimiter(')>operator(:) operator([)
            ident(include)operator(()string<delimiter(')content(whitespace)delimiter(')>operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(keywords)delimiter(')>operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(functions)delimiter(')>operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(operators)delimiter(')>operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(classes)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(("<html>|<html>\))delimiter(')>operator(,) ident(Name)operator(.)ident(Tag)operator(,) string<delimiter(')content(html-content)delimiter(')>operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(statements)delimiter(')>operator(\))
        operator(])operator(,)
        string<delimiter(')content(keywords)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content((algorithm|annotation|break|connect|constant|constrainedby|)delimiter(')>
            string<modifier(r)delimiter(')content(discrete|each|else|elseif|elsewhen|encapsulated|enumeration|)delimiter(')>
            string<modifier(r)delimiter(')content(end|equation|exit|expandable|extends|)delimiter(')>
            string<modifier(r)delimiter(')content(external|false|final|flow|for|if|import|in|inner|input|)delimiter(')>
            string<modifier(r)delimiter(')content(loop|nondiscrete|outer|output|parameter|partial|)delimiter(')>
            string<modifier(r)delimiter(')content(protected|public|redeclare|replaceable|time|then|true|)delimiter(')>
            string<modifier(r)delimiter(')content(when|while|within\))content(\\b)delimiter(')>operator(,) ident(Keyword)operator(\))
        operator(])operator(,)
        string<delimiter(')content(functions)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content((abs|acos|acosh|asin|asinh|atan|atan2|atan3|ceil|cos|cosh|)delimiter(')>
             string<modifier(r)delimiter(')content(cross|div|exp|floor|log|log10|mod|rem|sign|sin|sinh|size|)delimiter(')>
             string<modifier(r)delimiter(')content(sqrt|tan|tanh|zeros\))content(\\b)delimiter(')>operator(,) ident(Name)operator(.)ident(Function)operator(\))
        operator(])operator(,)
        string<delimiter(')content(operators)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content((and|assert|cardinality|change|delay|der|edge|initial|)delimiter(')>
             string<modifier(r)delimiter(')content(noEvent|not|or|pre|reinit|return|sample|smooth|)delimiter(')>
             string<modifier(r)delimiter(')content(terminal|terminate\))content(\\b)delimiter(')>operator(,) ident(Name)operator(.)ident(Builtin)operator(\))
        operator(])operator(,)
        string<delimiter(')content(classes)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content((block|class|connector|function|model|package|)delimiter(')>
             string<modifier(r)delimiter(')content(record|type\))content(\\b)delimiter(')>operator(,) ident(Name)operator(.)ident(Class)operator(\))
        operator(])operator(,)
        string<delimiter(')content(string)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(")delimiter(')>operator(,) ident(String)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\\\)content(([)content(\\\\)content(abfnrtv")content(\\')content(]|x[a-fA-F0-9]{2,4}|[0-7]{1,3}\))delimiter(')>operator(,)
             ident(String)operator(.)ident(Escape)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([^)content(\\\\)content(")content(\\n)content(]+)delimiter(')>operator(,) ident(String)operator(\))operator(,) comment(# all other characters)
            operator(()string<modifier(r)delimiter(')content(\\\\)content(\\n)delimiter(')>operator(,) ident(String)operator(\))operator(,) comment(# line continuation)
            operator(()string<modifier(r)delimiter(')content(\\\\)delimiter(')>operator(,) ident(String)operator(\)) comment(# stray backslash)
        operator(])operator(,)
        string<delimiter(')content(html-content)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(<)content(\\s)content(*/)content(\\s)content(*html)content(\\s)content(*>)delimiter(')>operator(,) ident(Name)operator(.)ident(Tag)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(.+?(?=<)content(\\s)content(*/)content(\\s)content(*html)content(\\s)content(*>\))delimiter(')>operator(,) ident(using)operator(()ident(HtmlLexer)operator(\))operator(\))operator(,)
        operator(])
    operator(})


keyword(class) class(RebolLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    A `REBOL <http://www.rebol.com/>`_ lexer.)content(
)content(
)content(    *New in Pygments 1.1.*)content(
)content(    )delimiter(""")>
    ident(name) operator(=) string<delimiter(')content(REBOL)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(rebol)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.r)delimiter(')>operator(,) string<delimiter(')content(*.r3)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(text/x-rebol)delimiter(')>operator(])

    ident(flags) operator(=) ident(re)operator(.)ident(IGNORECASE) operator(|) ident(re)operator(.)ident(MULTILINE)

    ident(re)operator(.)ident(IGNORECASE)

    ident(escape_re) operator(=) string<modifier(r)delimiter(')content((?:)content(\\^)content(\\()content([0-9a-fA-F]{1,4})content(\\\))content(*\))delimiter(')>

    keyword(def) method(word_callback)operator(()ident(lexer)operator(,) ident(match)operator(\))operator(:)
        ident(word) operator(=) ident(match)operator(.)ident(group)operator(()operator(\))

        keyword(if) ident(re)operator(.)ident(match)operator(()string<delimiter(")content(.*:$)delimiter(")>operator(,) ident(word)operator(\))operator(:)
            keyword(yield) ident(match)operator(.)ident(start)operator(()operator(\))operator(,) ident(Generic)operator(.)ident(Subheading)operator(,) ident(word)
        keyword(elif) ident(re)operator(.)ident(match)operator(()
            string<modifier(r)delimiter(')content((native|alias|all|any|as-string|as-binary|bind|bound)content(\\?)content(|case|)delimiter(')>
            string<modifier(r)delimiter(')content(catch|checksum|comment|debase|dehex|exclude|difference|disarm|)delimiter(')>
            string<modifier(r)delimiter(')content(either|else|enbase|foreach|remove-each|form|free|get|get-env|if|)delimiter(')>
            string<modifier(r)delimiter(')content(in|intersect|loop|minimum-of|maximum-of|mold|new-line|)delimiter(')>
            string<modifier(r)delimiter(')content(new-line)content(\\?)content(|not|now|prin|print|reduce|compose|construct|repeat|)delimiter(')>
            string<modifier(r)delimiter(')content(reverse|save|script)content(\\?)content(|set|shift|switch|throw|to-hex|trace|try|)delimiter(')>
            string<modifier(r)delimiter(')content(type)content(\\?)content(|union|unique|unless|unprotect|unset|until|use|value)content(\\?)content(|)delimiter(')>
            string<modifier(r)delimiter(')content(while|compress|decompress|secure|open|close|read|read-io|)delimiter(')>
            string<modifier(r)delimiter(')content(write-io|write|update|query|wait|input)content(\\?)content(|exp|log-10|log-2|)delimiter(')>
            string<modifier(r)delimiter(')content(log-e|square-root|cosine|sine|tangent|arccosine|arcsine|)delimiter(')>
            string<modifier(r)delimiter(')content(arctangent|protect|lowercase|uppercase|entab|detab|connected)content(\\?)content(|)delimiter(')>
            string<modifier(r)delimiter(')content(browse|launch|stats|get-modes|set-modes|to-local-file|)delimiter(')>
            string<modifier(r)delimiter(')content(to-rebol-file|encloak|decloak|create-link|do-browser|bind)content(\\?)content(|)delimiter(')>
            string<modifier(r)delimiter(')content(hide|draw|show|size-text|textinfo|offset-to-caret|)delimiter(')>
            string<modifier(r)delimiter(')content(caret-to-offset|local-request-file|rgb-to-hsv|hsv-to-rgb|)delimiter(')>
            string<modifier(r)delimiter(')content(crypt-strength)content(\\?)content(|dh-make-key|dh-generate-key|dh-compute-key|)delimiter(')>
            string<modifier(r)delimiter(')content(dsa-make-key|dsa-generate-key|dsa-make-signature|)delimiter(')>
            string<modifier(r)delimiter(')content(dsa-verify-signature|rsa-make-key|rsa-generate-key|)delimiter(')>
            string<modifier(r)delimiter(')content(rsa-encrypt\)$)delimiter(')>operator(,) ident(word)operator(\))operator(:)
            keyword(yield) ident(match)operator(.)ident(start)operator(()operator(\))operator(,) ident(Name)operator(.)ident(Builtin)operator(,) ident(word)
        keyword(elif) ident(re)operator(.)ident(match)operator(()
            string<modifier(r)delimiter(')content((add|subtract|multiply|divide|remainder|power|and~|or~|xor~|)delimiter(')>
            string<modifier(r)delimiter(')content(minimum|maximum|negate|complement|absolute|random|head|tail|)delimiter(')>
            string<modifier(r)delimiter(')content(next|back|skip|at|pick|first|second|third|fourth|fifth|sixth|)delimiter(')>
            string<modifier(r)delimiter(')content(seventh|eighth|ninth|tenth|last|path|find|select|make|to|copy)content(\\*)content(|)delimiter(')>
            string<modifier(r)delimiter(')content(insert|remove|change|poke|clear|trim|sort|min|max|abs|cp|)delimiter(')>
            string<modifier(r)delimiter(')content(copy\)$)delimiter(')>operator(,) ident(word)operator(\))operator(:)
            keyword(yield) ident(match)operator(.)ident(start)operator(()operator(\))operator(,) ident(Name)operator(.)ident(Function)operator(,) ident(word)
        keyword(elif) ident(re)operator(.)ident(match)operator(()
            string<modifier(r)delimiter(')content((error|source|input|license|help|install|echo|Usage|with|func|)delimiter(')>
            string<modifier(r)delimiter(')content(throw-on-error|function|does|has|context|probe|)content(\\?)content(\\?)content(|as-pair|)delimiter(')>
            string<modifier(r)delimiter(')content(mod|modulo|round|repend|about|set-net|append|join|rejoin|reform|)delimiter(')>
            string<modifier(r)delimiter(')content(remold|charset|array|replace|move|extract|forskip|forall|alter|)delimiter(')>
            string<modifier(r)delimiter(')content(first+|also|take|for|forever|dispatch|attempt|what-dir|)delimiter(')>
            string<modifier(r)delimiter(')content(change-dir|clean-path|list-dir|dirize|rename|split-path|delete|)delimiter(')>
            string<modifier(r)delimiter(')content(make-dir|delete-dir|in-dir|confirm|dump-obj|upgrade|what|)delimiter(')>
            string<modifier(r)delimiter(')content(build-tag|process-source|build-markup|decode-cgi|read-cgi|)delimiter(')>
            string<modifier(r)delimiter(')content(write-user|save-user|set-user-name|protect-system|parse-xml|)delimiter(')>
            string<modifier(r)delimiter(')content(cvs-date|cvs-version|do-boot|get-net-info|desktop|layout|)delimiter(')>
            string<modifier(r)delimiter(')content(scroll-para|get-face|alert|set-face|uninstall|unfocus|)delimiter(')>
            string<modifier(r)delimiter(')content(request-dir|center-face|do-events|net-error|decode-url|)delimiter(')>
            string<modifier(r)delimiter(')content(parse-header|parse-header-date|parse-email-addrs|import-email|)delimiter(')>
            string<modifier(r)delimiter(')content(send|build-attach-body|resend|show-popup|hide-popup|open-events|)delimiter(')>
            string<modifier(r)delimiter(')content(find-key-face|do-face|viewtop|confine|find-window|)delimiter(')>
            string<modifier(r)delimiter(')content(insert-event-func|remove-event-func|inform|dump-pane|dump-face|)delimiter(')>
            string<modifier(r)delimiter(')content(flag-face|deflag-face|clear-fields|read-net|vbug|path-thru|)delimiter(')>
            string<modifier(r)delimiter(')content(read-thru|load-thru|do-thru|launch-thru|load-image|)delimiter(')>
            string<modifier(r)delimiter(')content(request-download|do-face-alt|set-font|set-para|get-style|)delimiter(')>
            string<modifier(r)delimiter(')content(set-style|make-face|stylize|choose|hilight-text|hilight-all|)delimiter(')>
            string<modifier(r)delimiter(')content(unlight-text|focus|scroll-drag|clear-face|reset-face|scroll-face|)delimiter(')>
            string<modifier(r)delimiter(')content(resize-face|load-stock|load-stock-block|notify|request|flash|)delimiter(')>
            string<modifier(r)delimiter(')content(request-color|request-pass|request-text|request-list|)delimiter(')>
            string<modifier(r)delimiter(')content(request-date|request-file|dbug|editor|link-relative-path|)delimiter(')>
            string<modifier(r)delimiter(')content(emailer|parse-error\)$)delimiter(')>operator(,) ident(word)operator(\))operator(:)
            keyword(yield) ident(match)operator(.)ident(start)operator(()operator(\))operator(,) ident(Keyword)operator(.)ident(Namespace)operator(,) ident(word)
        keyword(elif) ident(re)operator(.)ident(match)operator(()
            string<modifier(r)delimiter(')content((halt|quit|do|load|q|recycle|call|run|ask|parse|view|unview|)delimiter(')>
            string<modifier(r)delimiter(')content(return|exit|break\)$)delimiter(')>operator(,) ident(word)operator(\))operator(:)
            keyword(yield) ident(match)operator(.)ident(start)operator(()operator(\))operator(,) ident(Name)operator(.)ident(Exception)operator(,) ident(word)
        keyword(elif) ident(re)operator(.)ident(match)operator(()string<delimiter(')content(REBOL$)delimiter(')>operator(,) ident(word)operator(\))operator(:)
            keyword(yield) ident(match)operator(.)ident(start)operator(()operator(\))operator(,) ident(Generic)operator(.)ident(Heading)operator(,) ident(word)
        keyword(elif) ident(re)operator(.)ident(match)operator(()string<delimiter(")content(to-.*)delimiter(")>operator(,) ident(word)operator(\))operator(:)
            keyword(yield) ident(match)operator(.)ident(start)operator(()operator(\))operator(,) ident(Keyword)operator(,) ident(word)
        keyword(elif) ident(re)operator(.)ident(match)operator(()string<delimiter(')content(()content(\\+)content(|-|)content(\\*)content(|/|//|)content(\\*)content(\\*)content(|and|or|xor|=)content(\\?)content(|=|==|<>|<|>|<=|>=\)$)delimiter(')>operator(,)
                      ident(word)operator(\))operator(:)
            keyword(yield) ident(match)operator(.)ident(start)operator(()operator(\))operator(,) ident(Operator)operator(,) ident(word)
        keyword(elif) ident(re)operator(.)ident(match)operator(()string<delimiter(")content(.*)content(\\?)content($)delimiter(")>operator(,) ident(word)operator(\))operator(:)
            keyword(yield) ident(match)operator(.)ident(start)operator(()operator(\))operator(,) ident(Keyword)operator(,) ident(word)
        keyword(elif) ident(re)operator(.)ident(match)operator(()string<delimiter(")content(.*)content(\\!)content($)delimiter(")>operator(,) ident(word)operator(\))operator(:)
            keyword(yield) ident(match)operator(.)ident(start)operator(()operator(\))operator(,) ident(Keyword)operator(.)ident(Type)operator(,) ident(word)
        keyword(elif) ident(re)operator(.)ident(match)operator(()string<delimiter(")content('.*)delimiter(")>operator(,) ident(word)operator(\))operator(:)
            keyword(yield) ident(match)operator(.)ident(start)operator(()operator(\))operator(,) ident(Name)operator(.)ident(Variable)operator(.)ident(Instance)operator(,) ident(word) comment(# lit-word)
        keyword(elif) ident(re)operator(.)ident(match)operator(()string<delimiter(")content(#.*)delimiter(")>operator(,) ident(word)operator(\))operator(:)
            keyword(yield) ident(match)operator(.)ident(start)operator(()operator(\))operator(,) ident(Name)operator(.)ident(Label)operator(,) ident(word) comment(# issue)
        keyword(elif) ident(re)operator(.)ident(match)operator(()string<delimiter(")content(%.*)delimiter(")>operator(,) ident(word)operator(\))operator(:)
            keyword(yield) ident(match)operator(.)ident(start)operator(()operator(\))operator(,) ident(Name)operator(.)ident(Decorator)operator(,) ident(word) comment(# file)
        keyword(else)operator(:)
            keyword(yield) ident(match)operator(.)ident(start)operator(()operator(\))operator(,) ident(Name)operator(.)ident(Variable)operator(,) ident(word)

    ident(tokens) operator(=) operator({)
        string<delimiter(')content(root)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\s)content(+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(#")delimiter(')>operator(,) ident(String)operator(.)ident(Char)operator(,) string<delimiter(')content(char)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(#{[0-9a-fA-F]*})delimiter(')>operator(,) ident(Number)operator(.)ident(Hex)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(2#{)delimiter(')>operator(,) ident(Number)operator(.)ident(Hex)operator(,) string<delimiter(')content(bin2)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(64#{[0-9a-zA-Z+/=)content(\\s)content(]*})delimiter(')>operator(,) ident(Number)operator(.)ident(Hex)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(")delimiter(')>operator(,) ident(String)operator(,) string<delimiter(')content(string)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content({)delimiter(')>operator(,) ident(String)operator(,) string<delimiter(')content(string2)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(;#+.*)content(\\n)delimiter(')>operator(,) ident(Comment)operator(.)ident(Special)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(;)content(\\*)content(+.*)content(\\n)delimiter(')>operator(,) ident(Comment)operator(.)ident(Preproc)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(;.*)content(\\n)delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(%")delimiter(')>operator(,) ident(Name)operator(.)ident(Decorator)operator(,) string<delimiter(')content(stringFile)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(%[^()content(\\^)content({^"\))content(\\s)content(\\[)content(\\])content(]+)delimiter(')>operator(,) ident(Name)operator(.)ident(Decorator)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(<[a-zA-Z0-9:._-]*>)delimiter(')>operator(,) ident(Name)operator(.)ident(Tag)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(<[^(<>)content(\\s)content("\)]+)delimiter(')>operator(,) ident(Name)operator(.)ident(Tag)operator(,) string<delimiter(')content(tag)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([+-]?([a-zA-Z]{1,3}\)?)content(\\$)content(\\d)content(+()content(\\.)content(\\d)content(+\)?)delimiter(')>operator(,) ident(Number)operator(.)ident(Float)operator(\))operator(,) comment(# money)
            operator(()string<modifier(r)delimiter(')content([+-]?)content(\\d)content(+)content(\\:)content(\\d)content(+()content(\\:)content(\\d)content(+\)?()content(\\.)content(\\d)content(+\)?)delimiter(')>operator(,) ident(String)operator(.)ident(Other)operator(\))operator(,) comment(# time)
            operator(()string<modifier(r)delimiter(')content(\\d)content(+)content(\\-)content([0-9a-zA-Z]+)content(\\-)content(\\d)content(+()content(\\/)content(\\d)content(+)content(\\:)content(\\d)content(+()content(\\:)content(\\d)content(+\)?)delimiter(')>
             string<modifier(r)delimiter(')content(([)content(\\.)content(\\d)content(+]?([+-]?)content(\\d)content(+:)content(\\d)content(+\)?\)?\)?)delimiter(')>operator(,) ident(String)operator(.)ident(Other)operator(\))operator(,) comment(# date)
            operator(()string<modifier(r)delimiter(')content(\\d)content(+()content(\\.)content(\\d)content(+\)+)content(\\.)content(\\d)content(+)delimiter(')>operator(,) ident(Keyword)operator(.)ident(Constant)operator(\))operator(,) comment(# tuple)
            operator(()string<modifier(r)delimiter(')content(\\d)content(+[xX])content(\\d)content(+)delimiter(')>operator(,) ident(Keyword)operator(.)ident(Constant)operator(\))operator(,) comment(# pair)
            operator(()string<modifier(r)delimiter(')content([+-]?)content(\\d)content(+()content(\\')content(\\d)content(+\)?([)content(\\.)content(,])content(\\d)content(*\)?[eE][+-]?)content(\\d)content(+)delimiter(')>operator(,) ident(Number)operator(.)ident(Float)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([+-]?)content(\\d)content(+()content(\\')content(\\d)content(+\)?[)content(\\.)content(,])content(\\d)content(*)delimiter(')>operator(,) ident(Number)operator(.)ident(Float)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([+-]?)content(\\d)content(+()content(\\')content(\\d)content(+\)?)delimiter(')>operator(,) ident(Number)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([)content(\\[)content(\\])content(\\()content(\\\))content(])delimiter(')>operator(,) ident(Generic)operator(.)ident(Strong)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([a-zA-Z]+[^()content(\\^)content({")content(\\s)content(:\)]*://[^()content(\\^)content({")content(\\s)content(\)]*)delimiter(')>operator(,) ident(Name)operator(.)ident(Decorator)operator(\))operator(,) comment(# url)
            operator(()string<modifier(r)delimiter(')content(mailto:[^()content(\\^)content({"@)content(\\s)content(\)]+@[^()content(\\^)content({"@)content(\\s)content(\)]+)delimiter(')>operator(,) ident(Name)operator(.)ident(Decorator)operator(\))operator(,) comment(# url)
            operator(()string<modifier(r)delimiter(')content([^()content(\\^)content({"@)content(\\s)content(\)]+@[^()content(\\^)content({"@)content(\\s)content(\)]+)delimiter(')>operator(,) ident(Name)operator(.)ident(Decorator)operator(\))operator(,) comment(# email)
            operator(()string<modifier(r)delimiter(')content(comment)content(\\s)delimiter(')>operator(,) ident(Comment)operator(,) string<delimiter(')content(comment)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(/[^()content(\\^)content({^"\))content(\\s)content(/[)content(\\])content(]*)delimiter(')>operator(,) ident(Name)operator(.)ident(Attribute)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(([^()content(\\^)content({^"\))content(\\s)content(/[)content(\\])content(]+\)(?=[:({")content(\\s)content(/)content(\\[)content(\\])content(]\))delimiter(')>operator(,) ident(word_callback)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(([^()content(\\^)content({^"\))content(\\s)content(]+\))delimiter(')>operator(,) ident(Text)operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(string)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content([^()content(\\^)content("\)]+)delimiter(')>operator(,) ident(String)operator(\))operator(,)
            operator(()ident(escape_re)operator(,) ident(String)operator(.)ident(Escape)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([)content(\\()content(|)content(\\\))content(]+)delimiter(')>operator(,) ident(String)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\^)content(.)delimiter(')>operator(,) ident(String)operator(.)ident(Escape)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(")delimiter(')>operator(,) ident(String)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(string2)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content([^()content(\\^)content({^}\)]+)delimiter(')>operator(,) ident(String)operator(\))operator(,)
            operator(()ident(escape_re)operator(,) ident(String)operator(.)ident(Escape)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([)content(\\()content(|)content(\\\))content(]+)delimiter(')>operator(,) ident(String)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\^)content(.)delimiter(')>operator(,) ident(String)operator(.)ident(Escape)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content({)delimiter(')>operator(,) ident(String)operator(,) string<delimiter(')content(#push)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(})delimiter(')>operator(,) ident(String)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(stringFile)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content([^()content(\\^)content("\)]+)delimiter(')>operator(,) ident(Name)operator(.)ident(Decorator)operator(\))operator(,)
            operator(()ident(escape_re)operator(,) ident(Name)operator(.)ident(Decorator)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\^)content(.)delimiter(')>operator(,) ident(Name)operator(.)ident(Decorator)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(")delimiter(')>operator(,) ident(Name)operator(.)ident(Decorator)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(char)delimiter(')>operator(:) operator([)
            operator(()ident(escape_re) operator(+) string<delimiter(')content(")delimiter(')>operator(,) ident(String)operator(.)ident(Char)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\^)content(.")delimiter(')>operator(,) ident(String)operator(.)ident(Char)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(.")delimiter(')>operator(,) ident(String)operator(.)ident(Char)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(tag)delimiter(')>operator(:) operator([)
            operator(()ident(escape_re)operator(,) ident(Name)operator(.)ident(Tag)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(")delimiter(')>operator(,) ident(Name)operator(.)ident(Tag)operator(,) string<delimiter(')content(tagString)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([^(<>)content(\\r)content(\\n)content("\)]+)delimiter(')>operator(,) ident(Name)operator(.)ident(Tag)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(>)delimiter(')>operator(,) ident(Name)operator(.)ident(Tag)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(tagString)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content([^()content(\\^)content("\)]+)delimiter(')>operator(,) ident(Name)operator(.)ident(Tag)operator(\))operator(,)
            operator(()ident(escape_re)operator(,) ident(Name)operator(.)ident(Tag)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([)content(\\()content(|)content(\\\))content(]+)delimiter(')>operator(,) ident(Name)operator(.)ident(Tag)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\^)content(.)delimiter(')>operator(,) ident(Name)operator(.)ident(Tag)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(")delimiter(')>operator(,) ident(Name)operator(.)ident(Tag)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(tuple)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(()content(\\d)content(+)content(\\.)content(\)+)delimiter(')>operator(,) ident(Keyword)operator(.)ident(Constant)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\d)content(+)delimiter(')>operator(,) ident(Keyword)operator(.)ident(Constant)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(bin2)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\s)content(+)delimiter(')>operator(,) ident(Number)operator(.)ident(Hex)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(([0-1])content(\\s)content(*\){8})delimiter(')>operator(,) ident(Number)operator(.)ident(Hex)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(})delimiter(')>operator(,) ident(Number)operator(.)ident(Hex)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(comment)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(")delimiter(')>operator(,) ident(Comment)operator(,) string<delimiter(')content(commentString1)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content({)delimiter(')>operator(,) ident(Comment)operator(,) string<delimiter(')content(commentString2)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\[)delimiter(')>operator(,) ident(Comment)operator(,) string<delimiter(')content(commentBlock)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([^()content(\\s)content({)content(\\")content(\\[)content(]+)delimiter(')>operator(,) ident(Comment)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(commentString1)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content([^()content(\\^)content("\)]+)delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
            operator(()ident(escape_re)operator(,) ident(Comment)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([)content(\\()content(|)content(\\\))content(]+)delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\^)content(.)delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(")delimiter(')>operator(,) ident(Comment)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(commentString2)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content([^()content(\\^)content({^}\)]+)delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
            operator(()ident(escape_re)operator(,) ident(Comment)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([)content(\\()content(|)content(\\\))content(]+)delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\^)content(.)delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content({)delimiter(')>operator(,) ident(Comment)operator(,) string<delimiter(')content(#push)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(})delimiter(')>operator(,) ident(Comment)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(commentBlock)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\[)delimiter(')>operator(,)ident(Comment)operator(,) string<delimiter(')content(#push)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\])delimiter(')>operator(,)ident(Comment)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([^()content(\\[)content(\\])content(\)]*)delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
        operator(])operator(,)
    operator(})


keyword(class) class(ABAPLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Lexer for ABAP, SAP's integrated language.)content(
)content(
)content(    *New in Pygments 1.1.*)content(
)content(    )delimiter(""")>
    ident(name) operator(=) string<delimiter(')content(ABAP)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(abap)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.abap)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(text/x-abap)delimiter(')>operator(])

    ident(flags) operator(=) ident(re)operator(.)ident(IGNORECASE) operator(|) ident(re)operator(.)ident(MULTILINE)

    ident(tokens) operator(=) operator({)
        string<delimiter(')content(common)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\s)content(+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(^)content(\\*)content(.*$)delimiter(')>operator(,) ident(Comment)operator(.)ident(Single)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\")content(.*?)content(\\n)delimiter(')>operator(,) ident(Comment)operator(.)ident(Single)operator(\))operator(,)
            operator(])operator(,)
        string<delimiter(')content(variable-names)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(<[)content(\\S)content(_]+>)delimiter(')>operator(,) ident(Name)operator(.)ident(Variable)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([)content(\\w)content(][)content(\\w)content(_~]*(?:()content(\\[)content(\\])content(\)|->)content(\\*)content(\)?)delimiter(')>operator(,) ident(Name)operator(.)ident(Variable)operator(\))operator(,)
            operator(])operator(,)
        string<delimiter(')content(root)delimiter(')>operator(:) operator([)
            ident(include)operator(()string<delimiter(')content(common)delimiter(')>operator(\))operator(,)
            comment(#function calls)
            operator(()string<modifier(r)delimiter(')content((CALL)content(\\s)content(+(?:BADI|CUSTOMER-FUNCTION|FUNCTION\)\)()content(\\s)content(+\)()content(\\')content(?)content(\\S)content(+)content(\\')content(?\))delimiter(')>operator(,)
                ident(bygroups)operator(()ident(Keyword)operator(,) ident(Text)operator(,) ident(Name)operator(.)ident(Function)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((CALL)content(\\s)content(+(?:DIALOG|SCREEN|SUBSCREEN|SELECTION-SCREEN|)delimiter(')>
             string<modifier(r)delimiter(')content(TRANSACTION|TRANSFORMATION\)\))content(\\b)delimiter(')>operator(,)
                ident(Keyword)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((FORM|PERFORM\)()content(\\s)content(+\)([)content(\\w)content(_]+\))delimiter(')>operator(,)
                ident(bygroups)operator(()ident(Keyword)operator(,) ident(Text)operator(,) ident(Name)operator(.)ident(Function)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((PERFORM\)()content(\\s)content(+\)()content(\\()content(\)([)content(\\w)content(_]+\)()content(\\\))content(\))delimiter(')>operator(,)
                ident(bygroups)operator(()ident(Keyword)operator(,) ident(Text)operator(,) ident(Punctuation)operator(,) ident(Name)operator(.)ident(Variable)operator(,) ident(Punctuation) operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((MODULE\)()content(\\s)content(+\)()content(\\S)content(+\)()content(\\s)content(+\)(INPUT|OUTPUT\))delimiter(')>operator(,)
                ident(bygroups)operator(()ident(Keyword)operator(,) ident(Text)operator(,) ident(Name)operator(.)ident(Function)operator(,) ident(Text)operator(,) ident(Keyword)operator(\))operator(\))operator(,)

            comment(# method implementation)
            operator(()string<modifier(r)delimiter(')content((METHOD\)()content(\\s)content(+\)([)content(\\w)content(_~]+\))delimiter(')>operator(,)
                ident(bygroups)operator(()ident(Keyword)operator(,) ident(Text)operator(,) ident(Name)operator(.)ident(Function)operator(\))operator(\))operator(,)
            comment(# method calls)
            operator(()string<modifier(r)delimiter(')content(()content(\\s)content(+\)([)content(\\w)content(_)content(\\-)content(]+\)([=)content(\\-)content(]>\)([)content(\\w)content(_)content(\\-)content(~]+\))delimiter(')>operator(,)
                ident(bygroups)operator(()ident(Text)operator(,) ident(Name)operator(.)ident(Variable)operator(,) ident(Operator)operator(,) ident(Name)operator(.)ident(Function)operator(\))operator(\))operator(,)
            comment(# call methodnames returning style)
            operator(()string<modifier(r)delimiter(')content((?<=(=|-\)>\)([)content(\\w)content(_)content(\\-)content(~]+\)(?=)content(\\()content(\))delimiter(')>operator(,) ident(Name)operator(.)ident(Function)operator(\))operator(,)

            comment(# keywords with dashes in them.)
            comment(# these need to be first, because for instance the -ID part)
            comment(# of MESSAGE-ID wouldn't get highlighted if MESSAGE was)
            comment(# first in the list of keywords.)
            operator(()string<modifier(r)delimiter(')content((ADD-CORRESPONDING|AUTHORITY-CHECK|)delimiter(')>
             string<modifier(r)delimiter(')content(CLASS-DATA|CLASS-EVENTS|CLASS-METHODS|CLASS-POOL|)delimiter(')>
             string<modifier(r)delimiter(')content(DELETE-ADJACENT|DIVIDE-CORRESPONDING|)delimiter(')>
             string<modifier(r)delimiter(')content(EDITOR-CALL|ENHANCEMENT-POINT|ENHANCEMENT-SECTION|EXIT-COMMAND|)delimiter(')>
             string<modifier(r)delimiter(')content(FIELD-GROUPS|FIELD-SYMBOLS|FUNCTION-POOL|)delimiter(')>
             string<modifier(r)delimiter(')content(INTERFACE-POOL|INVERTED-DATE|)delimiter(')>
             string<modifier(r)delimiter(')content(LOAD-OF-PROGRAM|LOG-POINT|)delimiter(')>
             string<modifier(r)delimiter(')content(MESSAGE-ID|MOVE-CORRESPONDING|MULTIPLY-CORRESPONDING|)delimiter(')>
             string<modifier(r)delimiter(')content(NEW-LINE|NEW-PAGE|NEW-SECTION|NO-EXTENSION|)delimiter(')>
             string<modifier(r)delimiter(')content(OUTPUT-LENGTH|PRINT-CONTROL|)delimiter(')>
             string<modifier(r)delimiter(')content(SELECT-OPTIONS|START-OF-SELECTION|SUBTRACT-CORRESPONDING|)delimiter(')>
             string<modifier(r)delimiter(')content(SYNTAX-CHECK|SYSTEM-EXCEPTIONS|)delimiter(')>
             string<modifier(r)delimiter(')content(TYPE-POOL|TYPE-POOLS)delimiter(')>
             string<modifier(r)delimiter(')content(\))content(\\b)delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)

             comment(# keyword kombinations)
            operator(()string<modifier(r)delimiter(')content(CREATE)content(\\s)content(+(PUBLIC|PRIVATE|DATA|OBJECT\)|)delimiter(')>
             string<modifier(r)delimiter(')content(((PUBLIC|PRIVATE|PROTECTED\))content(\\s)content(+SECTION|)delimiter(')>
             string<modifier(r)delimiter(')content((TYPE|LIKE\)()content(\\s)content(+(LINE)content(\\s)content(+OF|REF)content(\\s)content(+TO|)delimiter(')>
             string<modifier(r)delimiter(')content((SORTED|STANDARD|HASHED\))content(\\s)content(+TABLE)content(\\s)content(+OF\)\)?|)delimiter(')>
             string<modifier(r)delimiter(')content(FROM)content(\\s)content(+(DATABASE|MEMORY\)|CALL)content(\\s)content(+METHOD|)delimiter(')>
             string<modifier(r)delimiter(')content((GROUP|ORDER\) BY|HAVING|SEPARATED BY|)delimiter(')>
             string<modifier(r)delimiter(')content(GET)content(\\s)content(+(BADI|BIT|CURSOR|DATASET|LOCALE|PARAMETER|)delimiter(')>
                      string<modifier(r)delimiter(')content(PF-STATUS|(PROPERTY|REFERENCE\))content(\\s)content(+OF|)delimiter(')>
                      string<modifier(r)delimiter(')content(RUN)content(\\s)content(+TIME|TIME)content(\\s)content(+(STAMP\)?\)?|)delimiter(')>
             string<modifier(r)delimiter(')content(SET)content(\\s)content(+(BIT|BLANK)content(\\s)content(+LINES|COUNTRY|CURSOR|DATASET|EXTENDED)content(\\s)content(+CHECK|)delimiter(')>
                      string<modifier(r)delimiter(')content(HANDLER|HOLD)content(\\s)content(+DATA|LANGUAGE|LEFT)content(\\s)content(+SCROLL-BOUNDARY|)delimiter(')>
                      string<modifier(r)delimiter(')content(LOCALE|MARGIN|PARAMETER|PF-STATUS|PROPERTY)content(\\s)content(+OF|)delimiter(')>
                      string<modifier(r)delimiter(')content(RUN)content(\\s)content(+TIME)content(\\s)content(+(ANALYZER|CLOCK)content(\\s)content(+RESOLUTION\)|SCREEN|)delimiter(')>
                      string<modifier(r)delimiter(')content(TITLEBAR|UPADTE)content(\\s)content(+TASK)content(\\s)content(+LOCAL|USER-COMMAND\)|)delimiter(')>
             string<modifier(r)delimiter(')content(CONVERT)content(\\s)content(+((INVERTED-\)?DATE|TIME|TIME)content(\\s)content(+STAMP|TEXT\)|)delimiter(')>
             string<modifier(r)delimiter(')content((CLOSE|OPEN\))content(\\s)content(+(DATASET|CURSOR\)|)delimiter(')>
             string<modifier(r)delimiter(')content((TO|FROM\))content(\\s)content(+(DATA BUFFER|INTERNAL TABLE|MEMORY ID|)delimiter(')>
                            string<modifier(r)delimiter(')content(DATABASE|SHARED)content(\\s)content(+(MEMORY|BUFFER\)\)|)delimiter(')>
             string<modifier(r)delimiter(')content(DESCRIBE)content(\\s)content(+(DISTANCE)content(\\s)content(+BETWEEN|FIELD|LIST|TABLE\)|)delimiter(')>
             string<modifier(r)delimiter(')content(FREE)content(\\s)content((MEMORY|OBJECT\)?|)delimiter(')>
             string<modifier(r)delimiter(')content(PROCESS)content(\\s)content(+(BEFORE)content(\\s)content(+OUTPUT|AFTER)content(\\s)content(+INPUT|)delimiter(')>
                          string<modifier(r)delimiter(')content(ON)content(\\s)content(+(VALUE-REQUEST|HELP-REQUEST\)\)|)delimiter(')>
             string<modifier(r)delimiter(')content(AT)content(\\s)content(+(LINE-SELECTION|USER-COMMAND|END)content(\\s)content(+OF|NEW\)|)delimiter(')>
             string<modifier(r)delimiter(')content(AT)content(\\s)content(+SELECTION-SCREEN()content(\\s)content(+(ON()content(\\s)content(+(BLOCK|(HELP|VALUE\)-REQUEST)content(\\s)content(+FOR|)delimiter(')>
                                     string<modifier(r)delimiter(')content(END)content(\\s)content(+OF|RADIOBUTTON)content(\\s)content(+GROUP\)\)?|OUTPUT\)\)?|)delimiter(')>
             string<modifier(r)delimiter(')content(SELECTION-SCREEN:?)content(\\s)content(+((BEGIN|END\))content(\\s)content(+OF)content(\\s)content(+((TABBED)content(\\s)content(+\)?BLOCK|LINE|)delimiter(')>
                                     string<modifier(r)delimiter(')content(SCREEN\)|COMMENT|FUNCTION)content(\\s)content(+KEY|)delimiter(')>
                                     string<modifier(r)delimiter(')content(INCLUDE)content(\\s)content(+BLOCKS|POSITION|PUSHBUTTON|)delimiter(')>
                                     string<modifier(r)delimiter(')content(SKIP|ULINE\)|)delimiter(')>
             string<modifier(r)delimiter(')content(LEAVE)content(\\s)content(+(LIST-PROCESSING|PROGRAM|SCREEN|)delimiter(')>
                        string<modifier(r)delimiter(')content(TO LIST-PROCESSING|TO TRANSACTION\))delimiter(')>
             string<modifier(r)delimiter(')content((ENDING|STARTING\))content(\\s)content(+AT|)delimiter(')>
             string<modifier(r)delimiter(')content(FORMAT)content(\\s)content(+(COLOR|INTENSIFIED|INVERSE|HOTSPOT|INPUT|FRAMES|RESET\)|)delimiter(')>
             string<modifier(r)delimiter(')content(AS)content(\\s)content(+(CHECKBOX|SUBSCREEN|WINDOW\)|)delimiter(')>
             string<modifier(r)delimiter(')content(WITH)content(\\s)content(+(((NON-\)?UNIQUE\)?)content(\\s)content(+KEY|FRAME\)|)delimiter(')>
             string<modifier(r)delimiter(')content((BEGIN|END\))content(\\s)content(+OF|)delimiter(')>
             string<modifier(r)delimiter(')content(DELETE()content(\\s)content(+ADJACENT)content(\\s)content(+DUPLICATES)content(\\s)content(FROM\)?|)delimiter(')>
             string<modifier(r)delimiter(')content(COMPARING()content(\\s)content(+ALL)content(\\s)content(+FIELDS\)?|)delimiter(')>
             string<modifier(r)delimiter(')content(INSERT()content(\\s)content(+INITIAL)content(\\s)content(+LINE)content(\\s)content(+INTO|)content(\\s)content(+LINES)content(\\s)content(+OF\)?|)delimiter(')>
             string<modifier(r)delimiter(')content(IN)content(\\s)content(+((BYTE|CHARACTER\))content(\\s)content(+MODE|PROGRAM\)|)delimiter(')>
             string<modifier(r)delimiter(')content(END-OF-(DEFINITION|PAGE|SELECTION\)|)delimiter(')>
             string<modifier(r)delimiter(')content(WITH)content(\\s)content(+FRAME()content(\\s)content(+TITLE\)|)delimiter(')>

             comment(# simple kombinations)
             string<modifier(r)delimiter(')content(AND)content(\\s)content(+(MARK|RETURN\)|CLIENT)content(\\s)content(+SPECIFIED|CORRESPONDING)content(\\s)content(+FIELDS)content(\\s)content(+OF|)delimiter(')>
             string<modifier(r)delimiter(')content(IF)content(\\s)content(+FOUND|FOR)content(\\s)content(+EVENT|INHERITING)content(\\s)content(+FROM|LEAVE)content(\\s)content(+TO)content(\\s)content(+SCREEN|)delimiter(')>
             string<modifier(r)delimiter(')content(LOOP)content(\\s)content(+AT)content(\\s)content(+(SCREEN\)?|LOWER)content(\\s)content(+CASE|MATCHCODE)content(\\s)content(+OBJECT|MODIF)content(\\s)content(+ID|)delimiter(')>
             string<modifier(r)delimiter(')content(MODIFY)content(\\s)content(+SCREEN|NESTING)content(\\s)content(+LEVEL|NO)content(\\s)content(+INTERVALS|OF)content(\\s)content(+STRUCTURE|)delimiter(')>
             string<modifier(r)delimiter(')content(RADIOBUTTON)content(\\s)content(+GROUP|RANGE)content(\\s)content(+OF|REF)content(\\s)content(+TO|SUPPRESS DIALOG|)delimiter(')>
             string<modifier(r)delimiter(')content(TABLE)content(\\s)content(+OF|UPPER)content(\\s)content(+CASE|TRANSPORTING)content(\\s)content(+NO)content(\\s)content(+FIELDS|)delimiter(')>
             string<modifier(r)delimiter(')content(VALUE)content(\\s)content(+CHECK|VISIBLE)content(\\s)content(+LENGTH|HEADER)content(\\s)content(+LINE\))content(\\b)delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)

            comment(# single word keywords.)
            operator(()string<modifier(r)delimiter(')content((^|(?<=()content(\\s)content(|)content(\\.)content(\)\)\)(ABBREVIATED|ADD|ALIASES|APPEND|ASSERT|)delimiter(')>
             string<modifier(r)delimiter(')content(ASSIGN(ING\)?|AT()content(\\s)content(+FIRST\)?|)delimiter(')>
             string<modifier(r)delimiter(')content(BACK|BLOCK|BREAK-POINT|)delimiter(')>
             string<modifier(r)delimiter(')content(CASE|CATCH|CHANGING|CHECK|CLASS|CLEAR|COLLECT|COLOR|COMMIT|)delimiter(')>
             string<modifier(r)delimiter(')content(CREATE|COMMUNICATION|COMPONENTS?|COMPUTE|CONCATENATE|CONDENSE|)delimiter(')>
             string<modifier(r)delimiter(')content(CONSTANTS|CONTEXTS|CONTINUE|CONTROLS|)delimiter(')>
             string<modifier(r)delimiter(')content(DATA|DECIMALS|DEFAULT|DEFINE|DEFINITION|DEFERRED|DEMAND|)delimiter(')>
             string<modifier(r)delimiter(')content(DETAIL|DIRECTORY|DIVIDE|DO|)delimiter(')>
             string<modifier(r)delimiter(')content(ELSE(IF\)?|ENDAT|ENDCASE|ENDCLASS|ENDDO|ENDFORM|ENDFUNCTION|)delimiter(')>
             string<modifier(r)delimiter(')content(ENDIF|ENDLOOP|ENDMETHOD|ENDMODULE|ENDSELECT|ENDTRY|)delimiter(')>
             string<modifier(r)delimiter(')content(ENHANCEMENT|EVENTS|EXCEPTIONS|EXIT|EXPORT|EXPORTING|EXTRACT|)delimiter(')>
             string<modifier(r)delimiter(')content(FETCH|FIELDS?|FIND|FOR|FORM|FORMAT|FREE|FROM|)delimiter(')>
             string<modifier(r)delimiter(')content(HIDE|)delimiter(')>
             string<modifier(r)delimiter(')content(ID|IF|IMPORT|IMPLEMENTATION|IMPORTING|IN|INCLUDE|INCLUDING|)delimiter(')>
             string<modifier(r)delimiter(')content(INDEX|INFOTYPES|INITIALIZATION|INTERFACE|INTERFACES|INTO|)delimiter(')>
             string<modifier(r)delimiter(')content(LENGTH|LINES|LOAD|LOCAL|)delimiter(')>
             string<modifier(r)delimiter(')content(JOIN|)delimiter(')>
             string<modifier(r)delimiter(')content(KEY|)delimiter(')>
             string<modifier(r)delimiter(')content(MAXIMUM|MESSAGE|METHOD[S]?|MINIMUM|MODULE|MODIFY|MOVE|MULTIPLY|)delimiter(')>
             string<modifier(r)delimiter(')content(NODES|)delimiter(')>
             string<modifier(r)delimiter(')content(OBLIGATORY|OF|OFF|ON|OVERLAY|)delimiter(')>
             string<modifier(r)delimiter(')content(PACK|PARAMETERS|PERCENTAGE|POSITION|PROGRAM|PROVIDE|PUBLIC|PUT|)delimiter(')>
             string<modifier(r)delimiter(')content(RAISE|RAISING|RANGES|READ|RECEIVE|REFRESH|REJECT|REPORT|RESERVE|)delimiter(')>
             string<modifier(r)delimiter(')content(RESUME|RETRY|RETURN|RETURNING|RIGHT|ROLLBACK|)delimiter(')>
             string<modifier(r)delimiter(')content(SCROLL|SEARCH|SELECT|SHIFT|SINGLE|SKIP|SORT|SPLIT|STATICS|STOP|)delimiter(')>
             string<modifier(r)delimiter(')content(SUBMIT|SUBTRACT|SUM|SUMMARY|SUMMING|SUPPLY|)delimiter(')>
             string<modifier(r)delimiter(')content(TABLE|TABLES|TIMES|TITLE|TO|TOP-OF-PAGE|TRANSFER|TRANSLATE|TRY|TYPES|)delimiter(')>
             string<modifier(r)delimiter(')content(ULINE|UNDER|UNPACK|UPDATE|USING|)delimiter(')>
             string<modifier(r)delimiter(')content(VALUE|VALUES|VIA|)delimiter(')>
             string<modifier(r)delimiter(')content(WAIT|WHEN|WHERE|WHILE|WITH|WINDOW|WRITE\))content(\\b)delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)

             comment(# builtins)
            operator(()string<modifier(r)delimiter(')content((abs|acos|asin|atan|)delimiter(')>
             string<modifier(r)delimiter(')content(boolc|boolx|bit_set|)delimiter(')>
             string<modifier(r)delimiter(')content(char_off|charlen|ceil|cmax|cmin|condense|contains|)delimiter(')>
             string<modifier(r)delimiter(')content(contains_any_of|contains_any_not_of|concat_lines_of|cos|cosh|)delimiter(')>
             string<modifier(r)delimiter(')content(count|count_any_of|count_any_not_of|)delimiter(')>
             string<modifier(r)delimiter(')content(dbmaxlen|distance|)delimiter(')>
             string<modifier(r)delimiter(')content(escape|exp|)delimiter(')>
             string<modifier(r)delimiter(')content(find|find_end|find_any_of|find_any_not_of|floor|frac|from_mixed|)delimiter(')>
             string<modifier(r)delimiter(')content(insert|)delimiter(')>
             string<modifier(r)delimiter(')content(lines|log|log10|)delimiter(')>
             string<modifier(r)delimiter(')content(match|matches|)delimiter(')>
             string<modifier(r)delimiter(')content(nmax|nmin|numofchar|)delimiter(')>
             string<modifier(r)delimiter(')content(repeat|replace|rescale|reverse|round|)delimiter(')>
             string<modifier(r)delimiter(')content(segment|shift_left|shift_right|sign|sin|sinh|sqrt|strlen|)delimiter(')>
             string<modifier(r)delimiter(')content(substring|substring_after|substring_from|substring_before|substring_to|)delimiter(')>
             string<modifier(r)delimiter(')content(tan|tanh|to_upper|to_lower|to_mixed|translate|trunc|)delimiter(')>
             string<modifier(r)delimiter(')content(xstrlen\)()content(\\()content(\))content(\\b)delimiter(')>operator(,) ident(bygroups)operator(()ident(Name)operator(.)ident(Builtin)operator(,) ident(Punctuation)operator(\))operator(\))operator(,)

            operator(()string<modifier(r)delimiter(')content(&[0-9])delimiter(')>operator(,) ident(Name)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([0-9]+)delimiter(')>operator(,) ident(Number)operator(.)ident(Integer)operator(\))operator(,)

            comment(# operators which look like variable names before)
            comment(# parsing variable names.)
            operator(()string<modifier(r)delimiter(')content((?<=()content(\\s)content(|.\)\)(AND|EQ|NE|GT|LT|GE|LE|CO|CN|CA|NA|CS|NOT|NS|CP|NP|)delimiter(')>
             string<modifier(r)delimiter(')content(BYTE-CO|BYTE-CN|BYTE-CA|BYTE-NA|BYTE-CS|BYTE-NS|)delimiter(')>
             string<modifier(r)delimiter(')content(IS)content(\\s)content(+(NOT)content(\\s)content(+\)?(INITIAL|ASSIGNED|REQUESTED|BOUND\)\))content(\\b)delimiter(')>operator(,) ident(Operator)operator(\))operator(,)

            ident(include)operator(()string<delimiter(')content(variable-names)delimiter(')>operator(\))operator(,)

            comment(# standard oparators after variable names,)
            comment(# because < and > are part of field symbols.)
            operator(()string<modifier(r)delimiter(')content([?*<>=)content(\\-)content(+])delimiter(')>operator(,) ident(Operator)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(")content('(''|[^']\)*')delimiter(")>operator(,) ident(String)operator(.)ident(Single)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([/;:(\))content(\\[)content(\\])content(,)content(\\.)content(])delimiter(')>operator(,) ident(Punctuation)operator(\))
        operator(])operator(,)
    operator(})
comment(# -*- coding: utf-8 -*-)
docstring<delimiter(""")content(
)content(    pygments.lexers.parsers)content(
)content(    ~~~~~~~~~~~~~~~~~~~~~~~)content(
)content(
)content(    Lexers for parser generators.)content(
)content(
)content(    :copyright: Copyright 2006-2009 by the Pygments team, see AUTHORS.)content(
)content(    :license: BSD, see LICENSE for details.)content(
)delimiter(""")>

keyword(import) include(re)

keyword(from) include(pygments.lexer) keyword(import) include(RegexLexer)operator(,) include(DelegatingLexer)operator(,) \
    include(include)operator(,) include(bygroups)operator(,) include(using)operator(,) include(this)
keyword(from) include(pygments.token) keyword(import) include(Error)operator(,) include(Punctuation)operator(,) include(Generic)operator(,) include(Other)operator(,) \
    include(Text)operator(,) include(Comment)operator(,) include(Operator)operator(,) include(Keyword)operator(,) include(Name)operator(,) include(String)operator(,) include(Number)operator(,) include(Whitespace)
keyword(from) include(pygments.lexers.compiled) keyword(import) include(JavaLexer)operator(,) include(CLexer)operator(,) include(CppLexer)operator(,) \
    include(ObjectiveCLexer)operator(,) include(DLexer)
keyword(from) include(pygments.lexers.dotnet) keyword(import) include(CSharpLexer)
keyword(from) include(pygments.lexers.agile) keyword(import) include(RubyLexer)operator(,) include(PythonLexer)operator(,) include(PerlLexer)
keyword(from) include(pygments.lexers.web) keyword(import) include(ActionScriptLexer)
comment(# Use TextLexer during development to just focus on one part of a delegating)
comment(# lexer.)
keyword(from) include(pygments.lexers.special) keyword(import) include(TextLexer)

ident(__all__) operator(=) operator([)string<delimiter(')content(RagelLexer)delimiter(')>operator(,) string<delimiter(')content(RagelEmbeddedLexer)delimiter(')>operator(,) string<delimiter(')content(RagelCLexer)delimiter(')>operator(,) string<delimiter(')content(RagelDLexer)delimiter(')>operator(,)
           string<delimiter(')content(RagelCppLexer)delimiter(')>operator(,) string<delimiter(')content(RagelObjectiveCLexer)delimiter(')>operator(,) string<delimiter(')content(RagelRubyLexer)delimiter(')>operator(,)
           string<delimiter(')content(RagelJavaLexer)delimiter(')>operator(,) string<delimiter(')content(AntlrLexer)delimiter(')>operator(,) string<delimiter(')content(AntlrPythonLexer)delimiter(')>operator(,)
           string<delimiter(')content(AntlrPerlLexer)delimiter(')>operator(,) string<delimiter(')content(AntlrRubyLexer)delimiter(')>operator(,) string<delimiter(')content(AntlrCppLexer)delimiter(')>operator(,)
           comment(#'AntlrCLexer',)
           string<delimiter(')content(AntlrCSharpLexer)delimiter(')>operator(,) string<delimiter(')content(AntlrObjectiveCLexer)delimiter(')>operator(,)
           string<delimiter(')content(AntlrJavaLexer)delimiter(')>operator(,) string<delimiter(")content(AntlrActionScriptLexer)delimiter(")>operator(])

keyword(class) class(RagelLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    A pure `Ragel <http://www.complang.org/ragel/>`_ lexer.  Use this for)content(
)content(    fragments of Ragel.  For ``.rl`` files, use RagelEmbeddedLexer instead)content(
)content(    (or one of the language-specific subclasses\).)content(
)content(
)content(    *New in Pygments 1.1*)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(Ragel)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(ragel)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)operator(])

    ident(tokens) operator(=) operator({)
        string<delimiter(')content(whitespace)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\s)content(+)delimiter(')>operator(,) ident(Whitespace)operator(\))
        operator(])operator(,)
        string<delimiter(')content(comments)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\#)content(.*$)delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(keywords)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content((access|action|alphtype\))content(\\b)delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((getkey|write|machine|include\))content(\\b)delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((any|ascii|extend|alpha|digit|alnum|lower|upper\))content(\\b)delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((xdigit|cntrl|graph|print|punct|space|zlen|empty\))content(\\b)delimiter(')>operator(,) ident(Keyword)operator(\))
        operator(])operator(,)
        string<delimiter(')content(numbers)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(0x[0-9A-Fa-f]+)delimiter(')>operator(,) ident(Number)operator(.)ident(Hex)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([+-]?[0-9]+)delimiter(')>operator(,) ident(Number)operator(.)ident(Integer)operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(literals)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content("()content(\\\\)content(\\\\)content(|)content(\\\\)content("|[^"]\)*")delimiter(')>operator(,) ident(String)operator(\))operator(,) comment(# double quote string)
            operator(()string<modifier(r)delimiter(")content('()content(\\\\)content(\\\\)content(|)content(\\\\)content('|[^']\)*')delimiter(")>operator(,) ident(String)operator(\))operator(,) comment(# single quote string)
            operator(()string<modifier(r)delimiter(')content(\\[)content(()content(\\\\)content(\\\\)content(|)content(\\\\)content(\\])content(|[^)content(\\])content(]\)*)content(\\])delimiter(')>operator(,) ident(String)operator(\))operator(,) comment(# square bracket literals)
            operator(()string<modifier(r)delimiter(')content(/(?!)content(\\*)content(\)()content(\\\\)content(\\\\)content(|)content(\\\\)content(/|[^/]\)*/)delimiter(')>operator(,) ident(String)operator(.)ident(Regex)operator(\))operator(,) comment(# regular expressions)
        operator(])operator(,)
        string<delimiter(')content(identifiers)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content([a-zA-Z_][a-zA-Z_0-9]*)delimiter(')>operator(,) ident(Name)operator(.)ident(Variable)operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(operators)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(,)delimiter(')>operator(,) ident(Operator)operator(\))operator(,) comment(# Join)
            operator(()string<modifier(r)delimiter(')content(\\|)content(|&|-|--)delimiter(')>operator(,) ident(Operator)operator(\))operator(,) comment(# Union, Intersection and Subtraction)
            operator(()string<modifier(r)delimiter(')content(\\.)content(|<:|:>|:>>)delimiter(')>operator(,) ident(Operator)operator(\))operator(,) comment(# Concatention)
            operator(()string<modifier(r)delimiter(')content(:)delimiter(')>operator(,) ident(Operator)operator(\))operator(,) comment(# Label)
            operator(()string<modifier(r)delimiter(')content(->)delimiter(')>operator(,) ident(Operator)operator(\))operator(,) comment(# Epsilon Transition)
            operator(()string<modifier(r)delimiter(')content((>|)content(\\$)content(|%|<|@|<>\)(/|eof)content(\\b)content(\))delimiter(')>operator(,) ident(Operator)operator(\))operator(,) comment(# EOF Actions)
            operator(()string<modifier(r)delimiter(')content((>|)content(\\$)content(|%|<|@|<>\)(!|err)content(\\b)content(\))delimiter(')>operator(,) ident(Operator)operator(\))operator(,) comment(# Global Error Actions)
            operator(()string<modifier(r)delimiter(')content((>|)content(\\$)content(|%|<|@|<>\)()content(\\^)content(|lerr)content(\\b)content(\))delimiter(')>operator(,) ident(Operator)operator(\))operator(,) comment(# Local Error Actions)
            operator(()string<modifier(r)delimiter(')content((>|)content(\\$)content(|%|<|@|<>\)(~|to)content(\\b)content(\))delimiter(')>operator(,) ident(Operator)operator(\))operator(,) comment(# To-State Actions)
            operator(()string<modifier(r)delimiter(')content((>|)content(\\$)content(|%|<|@|<>\)()content(\\*)content(|from)content(\\b)content(\))delimiter(')>operator(,) ident(Operator)operator(\))operator(,) comment(# From-State Actions)
            operator(()string<modifier(r)delimiter(')content(>|@|)content(\\$)content(|%)delimiter(')>operator(,) ident(Operator)operator(\))operator(,) comment(# Transition Actions and Priorities)
            operator(()string<modifier(r)delimiter(')content(\\*)content(|)content(\\?)content(|)content(\\+)content(|{[0-9]*,[0-9]*})delimiter(')>operator(,) ident(Operator)operator(\))operator(,) comment(# Repetition)
            operator(()string<modifier(r)delimiter(')content(!|)content(\\^)delimiter(')>operator(,) ident(Operator)operator(\))operator(,) comment(# Negation)
            operator(()string<modifier(r)delimiter(')content(\\()content(|)content(\\\))delimiter(')>operator(,) ident(Operator)operator(\))operator(,) comment(# Grouping)
        operator(])operator(,)
        string<delimiter(')content(root)delimiter(')>operator(:) operator([)
            ident(include)operator(()string<delimiter(')content(literals)delimiter(')>operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(whitespace)delimiter(')>operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(comments)delimiter(')>operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(keywords)delimiter(')>operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(numbers)delimiter(')>operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(identifiers)delimiter(')>operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(operators)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content({)delimiter(')>operator(,) ident(Punctuation)operator(,) string<delimiter(')content(host)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(=)delimiter(')>operator(,) ident(Operator)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(;)delimiter(')>operator(,) ident(Punctuation)operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(host)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(()delimiter(')> operator(+) string<modifier(r)delimiter(')content(|)delimiter(')>operator(.)ident(join)operator(()operator(() comment(# keep host code in largest possible chunks)
                string<modifier(r)delimiter(')content([^{})content(\\')content("/#]+)delimiter(')>operator(,) comment(# exclude unsafe characters)
                string<modifier(r)delimiter(')content([^)content(\\\\)content(][)content(\\\\)content(][{}])delimiter(')>operator(,) comment(# allow escaped { or })

                comment(# strings and comments may safely contain unsafe characters)
                string<modifier(r)delimiter(')content("()content(\\\\)content(\\\\)content(|)content(\\\\)content("|[^"]\)*")delimiter(')>operator(,) comment(# double quote string)
                string<modifier(r)delimiter(")content('()content(\\\\)content(\\\\)content(|)content(\\\\)content('|[^']\)*')delimiter(")>operator(,) comment(# single quote string)
                string<modifier(r)delimiter(')content(//.*$)content(\\n)content(?)delimiter(')>operator(,) comment(# single line comment)
                string<modifier(r)delimiter(')content(/)content(\\*)content((.|)content(\\n)content(\)*?)content(\\*)content(/)delimiter(')>operator(,) comment(# multi-line javadoc-style comment)
                string<modifier(r)delimiter(')content(\\#)content(.*$)content(\\n)content(?)delimiter(')>operator(,) comment(# ruby comment)

                comment(# regular expression: There's no reason for it to start)
                comment(# with a * and this stops confusion with comments.)
                string<modifier(r)delimiter(')content(/(?!)content(\\*)content(\)()content(\\\\)content(\\\\)content(|)content(\\\\)content(/|[^/]\)*/)delimiter(')>operator(,)

                comment(# / is safe now that we've handled regex and javadoc comments)
                string<modifier(r)delimiter(')content(/)delimiter(')>operator(,)
            operator(\))operator(\)) operator(+) string<modifier(r)delimiter(')content(\)+)delimiter(')>operator(,) ident(Other)operator(\))operator(,)

            operator(()string<modifier(r)delimiter(')content({)delimiter(')>operator(,) ident(Punctuation)operator(,) string<delimiter(')content(#push)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(})delimiter(')>operator(,) ident(Punctuation)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
    operator(})

keyword(class) class(RagelEmbeddedLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    A lexer for `Ragel`_ embedded in a host language file.)content(
)content(
)content(    This will only highlight Ragel statements. If you want host language)content(
)content(    highlighting then call the language-specific Ragel lexer.)content(
)content(
)content(    *New in Pygments 1.1*)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(Embedded Ragel)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(ragel-em)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.rl)delimiter(')>operator(])

    ident(tokens) operator(=) operator({)
        string<delimiter(')content(root)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(()delimiter(')> operator(+) string<modifier(r)delimiter(')content(|)delimiter(')>operator(.)ident(join)operator(()operator(() comment(# keep host code in largest possible chunks)
                string<modifier(r)delimiter(')content([^%)content(\\')content("/#]+)delimiter(')>operator(,) comment(# exclude unsafe characters)
                string<modifier(r)delimiter(')content(%(?=[^%]|$\))delimiter(')>operator(,) comment(# a single % sign is okay, just not 2 of them)

                comment(# strings and comments may safely contain unsafe characters)
                string<modifier(r)delimiter(')content("()content(\\\\)content(\\\\)content(|)content(\\\\)content("|[^"]\)*")delimiter(')>operator(,) comment(# double quote string)
                string<modifier(r)delimiter(")content('()content(\\\\)content(\\\\)content(|)content(\\\\)content('|[^']\)*')delimiter(")>operator(,) comment(# single quote string)
                string<modifier(r)delimiter(')content(/)content(\\*)content((.|)content(\\n)content(\)*?)content(\\*)content(/)delimiter(')>operator(,) comment(# multi-line javadoc-style comment)
                string<modifier(r)delimiter(')content(//.*$)content(\\n)content(?)delimiter(')>operator(,) comment(# single line comment)
                string<modifier(r)delimiter(')content(\\#)content(.*$)content(\\n)content(?)delimiter(')>operator(,) comment(# ruby/ragel comment)
                string<modifier(r)delimiter(')content(/(?!)content(\\*)content(\)()content(\\\\)content(\\\\)content(|)content(\\\\)content(/|[^/]\)*/)delimiter(')>operator(,) comment(# regular expression)

                comment(# / is safe now that we've handled regex and javadoc comments)
                string<modifier(r)delimiter(')content(/)delimiter(')>operator(,)
            operator(\))operator(\)) operator(+) string<modifier(r)delimiter(')content(\)+)delimiter(')>operator(,) ident(Other)operator(\))operator(,)

            comment(# Single Line FSM.)
            comment(# Please don't put a quoted newline in a single line FSM.)
            comment(# That's just mean. It will break this.)
            operator(()string<modifier(r)delimiter(')content((%%\)(?![{%]\)(.*\)($|;\)()content(\\n)content(?\))delimiter(')>operator(,) ident(bygroups)operator(()ident(Punctuation)operator(,)
                                                     ident(using)operator(()ident(RagelLexer)operator(\))operator(,)
                                                     ident(Punctuation)operator(,) ident(Text)operator(\))operator(\))operator(,)

            comment(# Multi Line FSM.)
            operator(()string<modifier(r)delimiter(')content((%%%%|%%\){)delimiter(')>operator(,) ident(Punctuation)operator(,) string<delimiter(')content(multi-line-fsm)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(multi-line-fsm)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(()delimiter(')> operator(+) string<modifier(r)delimiter(')content(|)delimiter(')>operator(.)ident(join)operator(()operator(() comment(# keep ragel code in largest possible chunks.)
                string<modifier(r)delimiter(')content(()delimiter(')> operator(+) string<modifier(r)delimiter(')content(|)delimiter(')>operator(.)ident(join)operator(()operator(()
                    string<modifier(r)delimiter(')content([^})content(\\')content(")content(\\[)content(/#])delimiter(')>operator(,) comment(# exclude unsafe characters)
                    string<modifier(r)delimiter(')content(}(?=[^%]|$\))delimiter(')>operator(,) comment(# } is okay as long as it's not followed by %)
                    string<modifier(r)delimiter(')content(}%(?=[^%]|$\))delimiter(')>operator(,) comment(# ...well, one %'s okay, just not two...)
                    string<modifier(r)delimiter(')content([^)content(\\\\)content(][)content(\\\\)content(][{}])delimiter(')>operator(,) comment(# ...and } is okay if it's escaped)

                    comment(# allow / if it's preceded with one of these symbols)
                    comment(# (ragel EOF actions\))
                    string<modifier(r)delimiter(')content((>|)content(\\$)content(|%|<|@|<>\)/)delimiter(')>operator(,)

                    comment(# specifically allow regex followed immediately by *)
                    comment(# so it doesn't get mistaken for a comment)
                    string<modifier(r)delimiter(')content(/(?!)content(\\*)content(\)()content(\\\\)content(\\\\)content(|)content(\\\\)content(/|[^/]\)*/)content(\\*)delimiter(')>operator(,)

                    comment(# allow / as long as it's not followed by another / or by a *)
                    string<modifier(r)delimiter(')content(/(?=[^/)content(\\*)content(]|$\))delimiter(')>operator(,)

                    comment(# We want to match as many of these as we can in one block.)
                    comment(# Not sure if we need the + sign here,)
                    comment(# does it help performance?)
                    operator(\))operator(\)) operator(+) string<modifier(r)delimiter(')content(\)+)delimiter(')>operator(,)

                comment(# strings and comments may safely contain unsafe characters)
                string<modifier(r)delimiter(')content("()content(\\\\)content(\\\\)content(|)content(\\\\)content("|[^"]\)*")delimiter(')>operator(,) comment(# double quote string)
                string<modifier(r)delimiter(")content('()content(\\\\)content(\\\\)content(|)content(\\\\)content('|[^']\)*')delimiter(")>operator(,) comment(# single quote string)
                string<modifier(r)delimiter(")content(\\[)content(()content(\\\\)content(\\\\)content(|)content(\\\\)content(\\])content(|[^)content(\\])content(]\)*)content(\\])delimiter(")>operator(,) comment(# square bracket literal)
                string<modifier(r)delimiter(')content(/)content(\\*)content((.|)content(\\n)content(\)*?)content(\\*)content(/)delimiter(')>operator(,) comment(# multi-line javadoc-style comment)
                string<modifier(r)delimiter(')content(//.*$)content(\\n)content(?)delimiter(')>operator(,) comment(# single line comment)
                string<modifier(r)delimiter(')content(\\#)content(.*$)content(\\n)content(?)delimiter(')>operator(,) comment(# ruby/ragel comment)
            operator(\))operator(\)) operator(+) string<modifier(r)delimiter(')content(\)+)delimiter(')>operator(,) ident(using)operator(()ident(RagelLexer)operator(\))operator(\))operator(,)

            operator(()string<modifier(r)delimiter(')content(}%%)delimiter(')>operator(,) ident(Punctuation)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
        operator(])
    operator(})

    keyword(def) method(analyse_text)operator(()ident(text)operator(\))operator(:)
        keyword(return) string<delimiter(')content(@LANG: indep)delimiter(')> keyword(in) ident(text) keyword(or) float(0.1)

keyword(class) class(RagelRubyLexer)operator(()ident(DelegatingLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    A lexer for `Ragel`_ in a Ruby host file.)content(
)content(
)content(    *New in Pygments 1.1*)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(Ragel in Ruby Host)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(ragel-ruby)delimiter(')>operator(,) string<delimiter(')content(ragel-rb)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.rl)delimiter(')>operator(])

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))operator(:)
        predefined(super)operator(()ident(RagelRubyLexer)operator(,) predefined_constant(self)operator(\))operator(.)ident(__init__)operator(()ident(RubyLexer)operator(,) ident(RagelEmbeddedLexer)operator(,)
                                              operator(**)ident(options)operator(\))

    keyword(def) method(analyse_text)operator(()ident(text)operator(\))operator(:)
        keyword(return) string<delimiter(')content(@LANG: ruby)delimiter(')> keyword(in) ident(text)

keyword(class) class(RagelCLexer)operator(()ident(DelegatingLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    A lexer for `Ragel`_ in a C host file.)content(
)content(
)content(    *New in Pygments 1.1*)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(Ragel in C Host)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(ragel-c)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.rl)delimiter(')>operator(])

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))operator(:)
        predefined(super)operator(()ident(RagelCLexer)operator(,) predefined_constant(self)operator(\))operator(.)ident(__init__)operator(()ident(CLexer)operator(,) ident(RagelEmbeddedLexer)operator(,)
                                          operator(**)ident(options)operator(\))

    keyword(def) method(analyse_text)operator(()ident(text)operator(\))operator(:)
        keyword(return) string<delimiter(')content(@LANG: c)delimiter(')> keyword(in) ident(text)

keyword(class) class(RagelDLexer)operator(()ident(DelegatingLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    A lexer for `Ragel`_ in a D host file.)content(
)content(
)content(    *New in Pygments 1.1*)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(Ragel in D Host)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(ragel-d)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.rl)delimiter(')>operator(])

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))operator(:)
        predefined(super)operator(()ident(RagelDLexer)operator(,) predefined_constant(self)operator(\))operator(.)ident(__init__)operator(()ident(DLexer)operator(,) ident(RagelEmbeddedLexer)operator(,) operator(**)ident(options)operator(\))

    keyword(def) method(analyse_text)operator(()ident(text)operator(\))operator(:)
        keyword(return) string<delimiter(')content(@LANG: d)delimiter(')> keyword(in) ident(text)

keyword(class) class(RagelCppLexer)operator(()ident(DelegatingLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    A lexer for `Ragel`_ in a CPP host file.)content(
)content(
)content(    *New in Pygments 1.1*)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(Ragel in CPP Host)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(ragel-cpp)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.rl)delimiter(')>operator(])

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))operator(:)
        predefined(super)operator(()ident(RagelCppLexer)operator(,) predefined_constant(self)operator(\))operator(.)ident(__init__)operator(()ident(CppLexer)operator(,) ident(RagelEmbeddedLexer)operator(,) operator(**)ident(options)operator(\))

    keyword(def) method(analyse_text)operator(()ident(text)operator(\))operator(:)
        keyword(return) string<delimiter(')content(@LANG: c++)delimiter(')> keyword(in) ident(text)

keyword(class) class(RagelObjectiveCLexer)operator(()ident(DelegatingLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    A lexer for `Ragel`_ in an Objective C host file.)content(
)content(
)content(    *New in Pygments 1.1*)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(Ragel in Objective C Host)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(ragel-objc)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.rl)delimiter(')>operator(])

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))operator(:)
        predefined(super)operator(()ident(RagelObjectiveCLexer)operator(,) predefined_constant(self)operator(\))operator(.)ident(__init__)operator(()ident(ObjectiveCLexer)operator(,)
                                                   ident(RagelEmbeddedLexer)operator(,)
                                                   operator(**)ident(options)operator(\))

    keyword(def) method(analyse_text)operator(()ident(text)operator(\))operator(:)
        keyword(return) string<delimiter(')content(@LANG: objc)delimiter(')> keyword(in) ident(text)

keyword(class) class(RagelJavaLexer)operator(()ident(DelegatingLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    A lexer for `Ragel`_ in a Java host file.)content(
)content(
)content(    *New in Pygments 1.1*)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(Ragel in Java Host)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(ragel-java)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.rl)delimiter(')>operator(])

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))operator(:)
        predefined(super)operator(()ident(RagelJavaLexer)operator(,) predefined_constant(self)operator(\))operator(.)ident(__init__)operator(()ident(JavaLexer)operator(,) ident(RagelEmbeddedLexer)operator(,)
                                             operator(**)ident(options)operator(\))

    keyword(def) method(analyse_text)operator(()ident(text)operator(\))operator(:)
        keyword(return) string<delimiter(')content(@LANG: java)delimiter(')> keyword(in) ident(text)

keyword(class) class(AntlrLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Generic `ANTLR`_ Lexer.)content(
)content(    Should not be called directly, instead)content(
)content(    use DelegatingLexer for your target language.)content(
)content(
)content(    *New in Pygments 1.1*)content(
)content(
)content(    .. _ANTLR: http://www.antlr.org/)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(ANTLR)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(antlr)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)operator(])

    ident(_id) operator(=)          string<modifier(r)delimiter(')content([A-Za-z][A-Za-z_0-9]*)delimiter(')>
    ident(_TOKEN_REF) operator(=)   string<modifier(r)delimiter(')content([A-Z][A-Za-z_0-9]*)delimiter(')>
    ident(_RULE_REF) operator(=)    string<modifier(r)delimiter(')content([a-z][A-Za-z_0-9]*)delimiter(')>
    ident(_STRING_LITERAL) operator(=) string<modifier(r)delimiter(')content(\\')content((?:)content(\\\\)content(\\\\)content(|)content(\\\\)content(\\')content(|[^)content(\\')content(]*\))content(\\')delimiter(')>
    ident(_INT) operator(=) string<modifier(r)delimiter(')content([0-9]+)delimiter(')>

    ident(tokens) operator(=) operator({)
        string<delimiter(')content(whitespace)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\s)content(+)delimiter(')>operator(,) ident(Whitespace)operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(comments)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(//.*$)delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(/)content(\\*)content((.|)content(\\n)content(\)*?)content(\\*)content(/)delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(root)delimiter(')>operator(:) operator([)
            ident(include)operator(()string<delimiter(')content(whitespace)delimiter(')>operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(comments)delimiter(')>operator(\))operator(,)

            operator(()string<modifier(r)delimiter(')content((lexer|parser|tree\)?()content(\\s)content(*\)(grammar)content(\\b)content(\)()content(\\s)content(*\)()delimiter(')> operator(+) ident(_id) operator(+) string<delimiter(')content(\)(;\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Keyword)operator(,) ident(Whitespace)operator(,) ident(Keyword)operator(,) ident(Whitespace)operator(,) ident(Name)operator(.)ident(Class)operator(,)
                      ident(Punctuation)operator(\))operator(\))operator(,)
            comment(# optionsSpec)
            operator(()string<modifier(r)delimiter(')content(options)content(\\b)delimiter(')>operator(,) ident(Keyword)operator(,) string<delimiter(')content(options)delimiter(')>operator(\))operator(,)
            comment(# tokensSpec)
            operator(()string<modifier(r)delimiter(')content(tokens)content(\\b)delimiter(')>operator(,) ident(Keyword)operator(,) string<delimiter(')content(tokens)delimiter(')>operator(\))operator(,)
            comment(# attrScope)
            operator(()string<modifier(r)delimiter(')content((scope\)()content(\\s)content(*\)()delimiter(')> operator(+) ident(_id) operator(+) string<delimiter(')content(\)()content(\\s)content(*\)({\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Keyword)operator(,) ident(Whitespace)operator(,) ident(Name)operator(.)ident(Variable)operator(,) ident(Whitespace)operator(,)
                      ident(Punctuation)operator(\))operator(,) string<delimiter(')content(action)delimiter(')>operator(\))operator(,)
            comment(# exception)
            operator(()string<modifier(r)delimiter(')content((catch|finally\))content(\\b)delimiter(')>operator(,) ident(Keyword)operator(,) string<delimiter(')content(exception)delimiter(')>operator(\))operator(,)
            comment(# action)
            operator(()string<modifier(r)delimiter(')content((@)delimiter(')> operator(+) ident(_id) operator(+) string<delimiter(')content(\)()content(\\s)content(*\)(::\)?()content(\\s)content(*\)()delimiter(')> operator(+) ident(_id) operator(+) string<delimiter(')content(\)()content(\\s)content(*\)({\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Name)operator(.)ident(Label)operator(,) ident(Whitespace)operator(,) ident(Punctuation)operator(,) ident(Whitespace)operator(,)
                      ident(Name)operator(.)ident(Label)operator(,) ident(Whitespace)operator(,) ident(Punctuation)operator(\))operator(,) string<delimiter(')content(action)delimiter(')>operator(\))operator(,)
            comment(# rule)
            operator(()string<modifier(r)delimiter(')content(((?:protected|private|public|fragment\))content(\\b)content(\)?()content(\\s)content(*\)()delimiter(')> operator(+) ident(_id) operator(+) string<delimiter(')content(\)(!\)?)delimiter(')>operator(,) \
             ident(bygroups)operator(()ident(Keyword)operator(,) ident(Whitespace)operator(,) ident(Name)operator(.)ident(Label)operator(,) ident(Punctuation)operator(\))operator(,)
             operator(()string<delimiter(')content(rule-alts)delimiter(')>operator(,) string<delimiter(')content(rule-prelims)delimiter(')>operator(\))operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(exception)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\n)delimiter(')>operator(,) ident(Whitespace)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\s)delimiter(')>operator(,) ident(Whitespace)operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(comments)delimiter(')>operator(\))operator(,)

            operator(()string<modifier(r)delimiter(')content(\\[)delimiter(')>operator(,) ident(Punctuation)operator(,) string<delimiter(')content(nested-arg-action)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\{)delimiter(')>operator(,) ident(Punctuation)operator(,) string<delimiter(')content(action)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(rule-prelims)delimiter(')>operator(:) operator([)
            ident(include)operator(()string<delimiter(')content(whitespace)delimiter(')>operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(comments)delimiter(')>operator(\))operator(,)

            operator(()string<modifier(r)delimiter(')content(returns)content(\\b)delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\[)delimiter(')>operator(,) ident(Punctuation)operator(,) string<delimiter(')content(nested-arg-action)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\{)delimiter(')>operator(,) ident(Punctuation)operator(,) string<delimiter(')content(action)delimiter(')>operator(\))operator(,)
            comment(# throwsSpec)
            operator(()string<modifier(r)delimiter(')content((throws\)()content(\\s)content(+\)()delimiter(')> operator(+) ident(_id) operator(+) string<delimiter(')content(\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Keyword)operator(,) ident(Whitespace)operator(,) ident(Name)operator(.)ident(Label)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((?:(,\)()content(\\s)content(*\)()delimiter(')> operator(+) ident(_id) operator(+) string<delimiter(')content(\)\)+)delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Punctuation)operator(,) ident(Whitespace)operator(,) ident(Name)operator(.)ident(Label)operator(\))operator(\))operator(,) comment(# Additional throws)
            comment(# optionsSpec)
            operator(()string<modifier(r)delimiter(')content(options)content(\\b)delimiter(')>operator(,) ident(Keyword)operator(,) string<delimiter(')content(options)delimiter(')>operator(\))operator(,)
            comment(# ruleScopeSpec - scope followed by target language code or name of action)
            comment(# TODO finish implementing other possibilities for scope)
            comment(# L173 ANTLRv3.g from ANTLR book)
            operator(()string<modifier(r)delimiter(')content((scope\)()content(\\s)content(+\)({\))delimiter(')>operator(,) ident(bygroups)operator(()ident(Keyword)operator(,) ident(Whitespace)operator(,) ident(Punctuation)operator(\))operator(,)
            string<delimiter(')content(action)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((scope\)()content(\\s)content(+\)()delimiter(')> operator(+) ident(_id) operator(+) string<delimiter(')content(\)()content(\\s)content(*\)(;\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Keyword)operator(,) ident(Whitespace)operator(,) ident(Name)operator(.)ident(Label)operator(,) ident(Whitespace)operator(,) ident(Punctuation)operator(\))operator(\))operator(,)
            comment(# ruleAction)
            operator(()string<modifier(r)delimiter(')content((@)delimiter(')> operator(+) ident(_id) operator(+) string<delimiter(')content(\)()content(\\s)content(*\)({\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Name)operator(.)ident(Label)operator(,) ident(Whitespace)operator(,) ident(Punctuation)operator(\))operator(,) string<delimiter(')content(action)delimiter(')>operator(\))operator(,)
            comment(# finished prelims, go to rule alts!)
            operator(()string<modifier(r)delimiter(')content(:)delimiter(')>operator(,) ident(Punctuation)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))
        operator(])operator(,)
        string<delimiter(')content(rule-alts)delimiter(')>operator(:) operator([)
            ident(include)operator(()string<delimiter(')content(whitespace)delimiter(')>operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(comments)delimiter(')>operator(\))operator(,)

            comment(# These might need to go in a separate 'block' state triggered by ()
            operator(()string<modifier(r)delimiter(')content(options)content(\\b)delimiter(')>operator(,) ident(Keyword)operator(,) string<delimiter(')content(options)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(:)delimiter(')>operator(,) ident(Punctuation)operator(\))operator(,)

            comment(# literals)
            operator(()string<modifier(r)delimiter(")content('()content(\\\\)content(\\\\)content(|)content(\\\\)content('|[^']\)*')delimiter(")>operator(,) ident(String)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content("()content(\\\\)content(\\\\)content(|)content(\\\\)content("|[^"]\)*")delimiter(')>operator(,) ident(String)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(<<([^>]|>[^>]\)>>)delimiter(')>operator(,) ident(String)operator(\))operator(,)
            comment(# identifiers)
            comment(# Tokens start with capital letter.)
            operator(()string<modifier(r)delimiter(')content(\\$)content(?[A-Z_][A-Za-z_0-9]*)delimiter(')>operator(,) ident(Name)operator(.)ident(Constant)operator(\))operator(,)
            comment(# Rules start with small letter.)
            operator(()string<modifier(r)delimiter(')content(\\$)content(?[a-z_][A-Za-z_0-9]*)delimiter(')>operator(,) ident(Name)operator(.)ident(Variable)operator(\))operator(,)
            comment(# operators)
            operator(()string<modifier(r)delimiter(')content(()content(\\+)content(|)content(\\|)content(|->|=>|=|)content(\\()content(|)content(\\\))content(|)content(\\.)content(\\.)content(|)content(\\.)content(|)content(\\?)content(|)content(\\*)content(|)content(\\^)content(|!|)content(\\#)content(|~\))delimiter(')>operator(,) ident(Operator)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(,)delimiter(')>operator(,) ident(Punctuation)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\[)delimiter(')>operator(,) ident(Punctuation)operator(,) string<delimiter(')content(nested-arg-action)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\{)delimiter(')>operator(,) ident(Punctuation)operator(,) string<delimiter(')content(action)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(;)delimiter(')>operator(,) ident(Punctuation)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))
        operator(])operator(,)
        string<delimiter(')content(tokens)delimiter(')>operator(:) operator([)
            ident(include)operator(()string<delimiter(')content(whitespace)delimiter(')>operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(comments)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content({)delimiter(')>operator(,) ident(Punctuation)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(()delimiter(')> operator(+) ident(_TOKEN_REF) operator(+) string<modifier(r)delimiter(')content(\)()content(\\s)content(*\)(=\)?()content(\\s)content(*\)()delimiter(')> operator(+) ident(_STRING_LITERAL) operator(+) string<delimiter(')content(\)?()content(\\s)content(*\)(;\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Name)operator(.)ident(Label)operator(,) ident(Whitespace)operator(,) ident(Punctuation)operator(,) ident(Whitespace)operator(,)
                      ident(String)operator(,) ident(Whitespace)operator(,) ident(Punctuation)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(})delimiter(')>operator(,) ident(Punctuation)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(options)delimiter(')>operator(:) operator([)
            ident(include)operator(()string<delimiter(')content(whitespace)delimiter(')>operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(comments)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content({)delimiter(')>operator(,) ident(Punctuation)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(()delimiter(')> operator(+) ident(_id) operator(+) string<modifier(r)delimiter(')content(\)()content(\\s)content(*\)(=\)()content(\\s)content(*\)()delimiter(')> operator(+)
             string<delimiter(')content(|)delimiter(')>operator(.)ident(join)operator(()operator(()ident(_id)operator(,) ident(_STRING_LITERAL)operator(,) ident(_INT)operator(,) string<delimiter(')content(\\*)delimiter(')>operator(\))operator(\))operator(+) string<delimiter(')content(\)()content(\\s)content(*\)(;\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Name)operator(.)ident(Variable)operator(,) ident(Whitespace)operator(,) ident(Punctuation)operator(,) ident(Whitespace)operator(,)
                      ident(Text)operator(,) ident(Whitespace)operator(,) ident(Punctuation)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(})delimiter(')>operator(,) ident(Punctuation)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(action)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(()delimiter(')> operator(+) string<modifier(r)delimiter(')content(|)delimiter(')>operator(.)ident(join)operator(()operator(() comment(# keep host code in largest possible chunks)
                string<modifier(r)delimiter(')content([^)content(\\$)content({})content(\\')content("/)content(\\\\)content(]+)delimiter(')>operator(,) comment(# exclude unsafe characters)

                comment(# strings and comments may safely contain unsafe characters)
                string<modifier(r)delimiter(')content("()content(\\\\)content(\\\\)content(|)content(\\\\)content("|[^"]\)*")delimiter(')>operator(,) comment(# double quote string)
                string<modifier(r)delimiter(")content('()content(\\\\)content(\\\\)content(|)content(\\\\)content('|[^']\)*')delimiter(")>operator(,) comment(# single quote string)
                string<modifier(r)delimiter(')content(//.*$)content(\\n)content(?)delimiter(')>operator(,) comment(# single line comment)
                string<modifier(r)delimiter(')content(/)content(\\*)content((.|)content(\\n)content(\)*?)content(\\*)content(/)delimiter(')>operator(,) comment(# multi-line javadoc-style comment)

                comment(# regular expression: There's no reason for it to start)
                comment(# with a * and this stops confusion with comments.)
                string<modifier(r)delimiter(')content(/(?!)content(\\*)content(\)()content(\\\\)content(\\\\)content(|)content(\\\\)content(/|[^/]\)*/)delimiter(')>operator(,)

                comment(# backslashes are okay, as long as we are not backslashing a %)
                string<modifier(r)delimiter(')content(\\\\)content((?!%\))delimiter(')>operator(,)

                comment(# Now that we've handled regex and javadoc comments)
                comment(# it's safe to let / through.)
                string<modifier(r)delimiter(')content(/)delimiter(')>operator(,)
            operator(\))operator(\)) operator(+) string<modifier(r)delimiter(')content(\)+)delimiter(')>operator(,) ident(Other)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(()content(\\\\)content(\)(%\))delimiter(')>operator(,) ident(bygroups)operator(()ident(Punctuation)operator(,) ident(Other)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(()content(\\$)content([a-zA-Z]+\)()content(\\.)content(?\)(text|value\)?)delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Name)operator(.)ident(Variable)operator(,) ident(Punctuation)operator(,) ident(Name)operator(.)ident(Property)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content({)delimiter(')>operator(,) ident(Punctuation)operator(,) string<delimiter(')content(#push)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(})delimiter(')>operator(,) ident(Punctuation)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(nested-arg-action)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(()delimiter(')> operator(+) string<modifier(r)delimiter(')content(|)delimiter(')>operator(.)ident(join)operator(()operator(() comment(# keep host code in largest possible chunks.)
                string<modifier(r)delimiter(')content([^)content(\\$)content(\\[)content(\\])content(\\')content("/]+)delimiter(')>operator(,) comment(# exclude unsafe characters)

                comment(# strings and comments may safely contain unsafe characters)
                string<modifier(r)delimiter(')content("()content(\\\\)content(\\\\)content(|)content(\\\\)content("|[^"]\)*")delimiter(')>operator(,) comment(# double quote string)
                string<modifier(r)delimiter(")content('()content(\\\\)content(\\\\)content(|)content(\\\\)content('|[^']\)*')delimiter(")>operator(,) comment(# single quote string)
                string<modifier(r)delimiter(')content(//.*$)content(\\n)content(?)delimiter(')>operator(,) comment(# single line comment)
                string<modifier(r)delimiter(')content(/)content(\\*)content((.|)content(\\n)content(\)*?)content(\\*)content(/)delimiter(')>operator(,) comment(# multi-line javadoc-style comment)

                comment(# regular expression: There's no reason for it to start)
                comment(# with a * and this stops confusion with comments.)
                string<modifier(r)delimiter(')content(/(?!)content(\\*)content(\)()content(\\\\)content(\\\\)content(|)content(\\\\)content(/|[^/]\)*/)delimiter(')>operator(,)

                comment(# Now that we've handled regex and javadoc comments)
                comment(# it's safe to let / through.)
                string<modifier(r)delimiter(')content(/)delimiter(')>operator(,)
            operator(\))operator(\)) operator(+) string<modifier(r)delimiter(')content(\)+)delimiter(')>operator(,) ident(Other)operator(\))operator(,)


            operator(()string<modifier(r)delimiter(')content(\\[)delimiter(')>operator(,) ident(Punctuation)operator(,) string<delimiter(')content(#push)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\])delimiter(')>operator(,) ident(Punctuation)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(()content(\\$)content([a-zA-Z]+\)()content(\\.)content(?\)(text|value\)?)delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Name)operator(.)ident(Variable)operator(,) ident(Punctuation)operator(,) ident(Name)operator(.)ident(Property)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(()content(\\\\)content(\\\\)content(|)content(\\\\)content(\\])content(|)content(\\\\)content(\\[)content(|[^)content(\\[)content(\\])content(]\)+)delimiter(')>operator(,) ident(Other)operator(\))operator(,)
        operator(])
    operator(})

comment(# http://www.antlr.org/wiki/display/ANTLR3/Code+Generation+Targets)

comment(# TH: I'm not aware of any language features of C++ that will cause)
comment(# incorrect lexing of C files.  Antlr doesn't appear to make a distinction,)
comment(# so just assume they're C++.  No idea how to make Objective C work in the)
comment(# future.)

comment(#class AntlrCLexer(DelegatingLexer\):)
comment(#    """)
comment(#    ANTLR with C Target)
comment(#)
comment(#    *New in Pygments 1.1*)
comment(#    """)
comment(#)
comment(#    name = 'ANTLR With C Target')
comment(#    aliases = ['antlr-c'])
comment(#    filenames = ['*.G', '*.g'])
comment(#)
comment(#    def __init__(self, **options\):)
comment(#        super(AntlrCLexer, self\).__init__(CLexer, AntlrLexer, **options\))
comment(#)
comment(#    def analyse_text(text\):)
comment(#        return re.match(r'^\\s*language\\s*=\\s*C\\s*;', text\))

keyword(class) class(AntlrCppLexer)operator(()ident(DelegatingLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    `ANTLR`_ with CPP Target)content(
)content(
)content(    *New in Pygments 1.1*)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(ANTLR With CPP Target)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(antlr-cpp)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.G)delimiter(')>operator(,) string<delimiter(')content(*.g)delimiter(')>operator(])

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))operator(:)
        predefined(super)operator(()ident(AntlrCppLexer)operator(,) predefined_constant(self)operator(\))operator(.)ident(__init__)operator(()ident(CppLexer)operator(,) ident(AntlrLexer)operator(,) operator(**)ident(options)operator(\))

    keyword(def) method(analyse_text)operator(()ident(text)operator(\))operator(:)
        keyword(return) ident(re)operator(.)ident(match)operator(()string<modifier(r)delimiter(')content(^)content(\\s)content(*language)content(\\s)content(*=)content(\\s)content(*C)content(\\s)content(*;)delimiter(')>operator(,) ident(text)operator(,) ident(re)operator(.)ident(M)operator(\))

keyword(class) class(AntlrObjectiveCLexer)operator(()ident(DelegatingLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    `ANTLR`_ with Objective-C Target)content(
)content(
)content(    *New in Pygments 1.1*)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(ANTLR With ObjectiveC Target)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(antlr-objc)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.G)delimiter(')>operator(,) string<delimiter(')content(*.g)delimiter(')>operator(])

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))operator(:)
        predefined(super)operator(()ident(AntlrObjectiveCLexer)operator(,) predefined_constant(self)operator(\))operator(.)ident(__init__)operator(()ident(ObjectiveCLexer)operator(,)
                                                   ident(AntlrLexer)operator(,) operator(**)ident(options)operator(\))

    keyword(def) method(analyse_text)operator(()ident(text)operator(\))operator(:)
        keyword(return) ident(re)operator(.)ident(match)operator(()string<modifier(r)delimiter(')content(^)content(\\s)content(*language)content(\\s)content(*=)content(\\s)content(*ObjC)content(\\s)content(*;)delimiter(')>operator(,) ident(text)operator(\))

keyword(class) class(AntlrCSharpLexer)operator(()ident(DelegatingLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    `ANTLR`_ with C# Target)content(
)content(
)content(    *New in Pygments 1.1*)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(ANTLR With C# Target)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(antlr-csharp)delimiter(')>operator(,) string<delimiter(')content(antlr-c#)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.G)delimiter(')>operator(,) string<delimiter(')content(*.g)delimiter(')>operator(])

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))operator(:)
        predefined(super)operator(()ident(AntlrCSharpLexer)operator(,) predefined_constant(self)operator(\))operator(.)ident(__init__)operator(()ident(CSharpLexer)operator(,) ident(AntlrLexer)operator(,)
                                               operator(**)ident(options)operator(\))

    keyword(def) method(analyse_text)operator(()ident(text)operator(\))operator(:)
        keyword(return) ident(re)operator(.)ident(match)operator(()string<modifier(r)delimiter(')content(^)content(\\s)content(*language)content(\\s)content(*=)content(\\s)content(*CSharp2)content(\\s)content(*;)delimiter(')>operator(,) ident(text)operator(,) ident(re)operator(.)ident(M)operator(\))

keyword(class) class(AntlrPythonLexer)operator(()ident(DelegatingLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    `ANTLR`_ with Python Target)content(
)content(
)content(    *New in Pygments 1.1*)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(ANTLR With Python Target)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(antlr-python)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.G)delimiter(')>operator(,) string<delimiter(')content(*.g)delimiter(')>operator(])

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))operator(:)
        predefined(super)operator(()ident(AntlrPythonLexer)operator(,) predefined_constant(self)operator(\))operator(.)ident(__init__)operator(()ident(PythonLexer)operator(,) ident(AntlrLexer)operator(,)
                                               operator(**)ident(options)operator(\))

    keyword(def) method(analyse_text)operator(()ident(text)operator(\))operator(:)
        keyword(return) ident(re)operator(.)ident(match)operator(()string<modifier(r)delimiter(')content(^)content(\\s)content(*language)content(\\s)content(*=)content(\\s)content(*Python)content(\\s)content(*;)delimiter(')>operator(,) ident(text)operator(,) ident(re)operator(.)ident(M)operator(\))


keyword(class) class(AntlrJavaLexer)operator(()ident(DelegatingLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    `ANTLR`_ with Java Target)content(
)content(
)content(    *New in Pygments 1.1*)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(ANTLR With Java Target)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(antlr-java)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.G)delimiter(')>operator(,) string<delimiter(')content(*.g)delimiter(')>operator(])

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))operator(:)
        predefined(super)operator(()ident(AntlrJavaLexer)operator(,) predefined_constant(self)operator(\))operator(.)ident(__init__)operator(()ident(JavaLexer)operator(,) ident(AntlrLexer)operator(,)
                                             operator(**)ident(options)operator(\))

    keyword(def) method(analyse_text)operator(()ident(text)operator(\))operator(:)
        keyword(return) float(0.5) comment(# Antlr is Java if not specified)


keyword(class) class(AntlrRubyLexer)operator(()ident(DelegatingLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    `ANTLR`_ with Ruby Target)content(
)content(
)content(    *New in Pygments 1.1*)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(ANTLR With Ruby Target)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(antlr-ruby)delimiter(')>operator(,) string<delimiter(')content(antlr-rb)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.G)delimiter(')>operator(,) string<delimiter(')content(*.g)delimiter(')>operator(])

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))operator(:)
        predefined(super)operator(()ident(AntlrRubyLexer)operator(,) predefined_constant(self)operator(\))operator(.)ident(__init__)operator(()ident(RubyLexer)operator(,) ident(AntlrLexer)operator(,)
                                             operator(**)ident(options)operator(\))

    keyword(def) method(analyse_text)operator(()ident(text)operator(\))operator(:)
        keyword(return) ident(re)operator(.)ident(match)operator(()string<modifier(r)delimiter(')content(^)content(\\s)content(*language)content(\\s)content(*=)content(\\s)content(*Ruby)content(\\s)content(*;)delimiter(')>operator(,) ident(text)operator(,) ident(re)operator(.)ident(M)operator(\))

keyword(class) class(AntlrPerlLexer)operator(()ident(DelegatingLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    `ANTLR`_ with Perl Target)content(
)content(
)content(    *New in Pygments 1.1*)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(ANTLR With Perl Target)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(antlr-perl)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.G)delimiter(')>operator(,) string<delimiter(')content(*.g)delimiter(')>operator(])

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))operator(:)
        predefined(super)operator(()ident(AntlrPerlLexer)operator(,) predefined_constant(self)operator(\))operator(.)ident(__init__)operator(()ident(PerlLexer)operator(,) ident(AntlrLexer)operator(,)
                                             operator(**)ident(options)operator(\))

    keyword(def) method(analyse_text)operator(()ident(text)operator(\))operator(:)
        keyword(return) ident(re)operator(.)ident(match)operator(()string<modifier(r)delimiter(')content(^)content(\\s)content(*language)content(\\s)content(*=)content(\\s)content(*Perl5)content(\\s)content(*;)delimiter(')>operator(,) ident(text)operator(,) ident(re)operator(.)ident(M)operator(\))

keyword(class) class(AntlrActionScriptLexer)operator(()ident(DelegatingLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    `ANTLR`_ with ActionScript Target)content(
)content(
)content(    *New in Pygments 1.1*)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(ANTLR With ActionScript Target)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(antlr-as)delimiter(')>operator(,) string<delimiter(')content(antlr-actionscript)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.G)delimiter(')>operator(,) string<delimiter(')content(*.g)delimiter(')>operator(])

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))operator(:)
        predefined(super)operator(()ident(AntlrActionScriptLexer)operator(,) predefined_constant(self)operator(\))operator(.)ident(__init__)operator(()ident(ActionScriptLexer)operator(,)
                                                     ident(AntlrLexer)operator(,) operator(**)ident(options)operator(\))

    keyword(def) method(analyse_text)operator(()ident(text)operator(\))operator(:)
        keyword(return) ident(re)operator(.)ident(match)operator(()string<modifier(r)delimiter(')content(^)content(\\s)content(*language)content(\\s)content(*=)content(\\s)content(*ActionScript)content(\\s)content(*;)delimiter(')>operator(,) ident(text)operator(,) ident(re)operator(.)ident(M)operator(\))
comment(# -*- coding: utf-8 -*-)
docstring<delimiter(""")content(
)content(    pygments.lexers.special)content(
)content(    ~~~~~~~~~~~~~~~~~~~~~~~)content(
)content(
)content(    Special lexers.)content(
)content(
)content(    :copyright: Copyright 2006-2009 by the Pygments team, see AUTHORS.)content(
)content(    :license: BSD, see LICENSE for details.)content(
)delimiter(""")>

keyword(import) include(re)
keyword(import) include(cStringIO)

keyword(from) include(pygments.lexer) keyword(import) include(Lexer)
keyword(from) include(pygments.token) keyword(import) include(Token)operator(,) include(Error)operator(,) include(Text)
keyword(from) include(pygments.util) keyword(import) include(get_choice_opt)operator(,) include(b)


ident(__all__) operator(=) operator([)string<delimiter(')content(TextLexer)delimiter(')>operator(,) string<delimiter(')content(RawTokenLexer)delimiter(')>operator(])


keyword(class) class(TextLexer)operator(()ident(Lexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    "Null" lexer, doesn't highlight anything.)content(
)content(    )delimiter(""")>
    ident(name) operator(=) string<delimiter(')content(Text only)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(text)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.txt)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(text/plain)delimiter(')>operator(])

    keyword(def) method(get_tokens_unprocessed)operator(()predefined_constant(self)operator(,) ident(text)operator(\))operator(:)
        keyword(yield) integer(0)operator(,) ident(Text)operator(,) ident(text)


ident(_ttype_cache) operator(=) operator({)operator(})

ident(line_re) operator(=) ident(re)operator(.)ident(compile)operator(()ident(b)operator(()string<delimiter(')content(.*?)char(\\n)delimiter(')>operator(\))operator(\))

keyword(class) class(RawTokenLexer)operator(()ident(Lexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Recreate a token stream formatted with the `RawTokenFormatter`.  This)content(
)content(    lexer raises exceptions during parsing if the token stream in the)content(
)content(    file is malformed.)content(
)content(
)content(    Additional options accepted:)content(
)content(
)content(    `compress`)content(
)content(        If set to ``"gz"`` or ``"bz2"``, decompress the token stream with)content(
)content(        the given compression algorithm before lexing (default: ``""``\).)content(
)content(    )delimiter(""")>
    ident(name) operator(=) string<delimiter(')content(Raw token data)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(raw)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(application/x-pygments-tokens)delimiter(')>operator(])

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))operator(:)
        predefined_constant(self)operator(.)ident(compress) operator(=) ident(get_choice_opt)operator(()ident(options)operator(,) string<delimiter(')content(compress)delimiter(')>operator(,)
                                       operator([)string<delimiter(')delimiter(')>operator(,) string<delimiter(')content(none)delimiter(')>operator(,) string<delimiter(')content(gz)delimiter(')>operator(,) string<delimiter(')content(bz2)delimiter(')>operator(])operator(,) string<delimiter(')delimiter(')>operator(\))
        ident(Lexer)operator(.)ident(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))

    keyword(def) method(get_tokens)operator(()predefined_constant(self)operator(,) ident(text)operator(\))operator(:)
        keyword(if) predefined(isinstance)operator(()ident(text)operator(,) predefined(unicode)operator(\))operator(:)
            comment(# raw token stream never has any non-ASCII characters)
            ident(text) operator(=) ident(text)operator(.)ident(encode)operator(()string<delimiter(')content(ascii)delimiter(')>operator(\))
        keyword(if) predefined_constant(self)operator(.)ident(compress) operator(==) string<delimiter(')content(gz)delimiter(')>operator(:)
            keyword(import) include(gzip)
            ident(gzipfile) operator(=) ident(gzip)operator(.)ident(GzipFile)operator(()string<delimiter(')delimiter(')>operator(,) string<delimiter(')content(rb)delimiter(')>operator(,) integer(9)operator(,) ident(cStringIO)operator(.)ident(StringIO)operator(()ident(text)operator(\))operator(\))
            ident(text) operator(=) ident(gzipfile)operator(.)ident(read)operator(()operator(\))
        keyword(elif) predefined_constant(self)operator(.)ident(compress) operator(==) string<delimiter(')content(bz2)delimiter(')>operator(:)
            keyword(import) include(bz2)
            ident(text) operator(=) ident(bz2)operator(.)ident(decompress)operator(()ident(text)operator(\))

        comment(# do not call Lexer.get_tokens(\) because we do not want Unicode)
        comment(# decoding to occur, and stripping is not optional.)
        ident(text) operator(=) ident(text)operator(.)ident(strip)operator(()ident(b)operator(()string<delimiter(')char(\\n)delimiter(')>operator(\))operator(\)) operator(+) ident(b)operator(()string<delimiter(')char(\\n)delimiter(')>operator(\))
        keyword(for) ident(i)operator(,) ident(t)operator(,) ident(v) keyword(in) predefined_constant(self)operator(.)ident(get_tokens_unprocessed)operator(()ident(text)operator(\))operator(:)
            keyword(yield) ident(t)operator(,) ident(v)

    keyword(def) method(get_tokens_unprocessed)operator(()predefined_constant(self)operator(,) ident(text)operator(\))operator(:)
        ident(length) operator(=) integer(0)
        keyword(for) ident(match) keyword(in) ident(line_re)operator(.)ident(finditer)operator(()ident(text)operator(\))operator(:)
            keyword(try)operator(:)
                ident(ttypestr)operator(,) ident(val) operator(=) ident(match)operator(.)ident(group)operator(()operator(\))operator(.)ident(split)operator(()ident(b)operator(()string<delimiter(')char(\\t)delimiter(')>operator(\))operator(,) integer(1)operator(\))
            keyword(except) exception(ValueError)operator(:)
                ident(val) operator(=) ident(match)operator(.)ident(group)operator(()operator(\))operator(.)ident(decode)operator(()predefined_constant(self)operator(.)ident(encoding)operator(\))
                ident(ttype) operator(=) ident(Error)
            keyword(else)operator(:)
                ident(ttype) operator(=) ident(_ttype_cache)operator(.)ident(get)operator(()ident(ttypestr)operator(\))
                keyword(if) keyword(not) ident(ttype)operator(:)
                    ident(ttype) operator(=) ident(Token)
                    ident(ttypes) operator(=) ident(ttypestr)operator(.)ident(split)operator(()string<delimiter(')content(.)delimiter(')>operator(\))operator([)integer(1)operator(:)operator(])
                    keyword(for) ident(ttype_) keyword(in) ident(ttypes)operator(:)
                        keyword(if) keyword(not) ident(ttype_) keyword(or) keyword(not) ident(ttype_)operator([)integer(0)operator(])operator(.)ident(isupper)operator(()operator(\))operator(:)
                            keyword(raise) exception(ValueError)operator(()string<delimiter(')content(malformed token name)delimiter(')>operator(\))
                        ident(ttype) operator(=) predefined(getattr)operator(()ident(ttype)operator(,) ident(ttype_)operator(\))
                    ident(_ttype_cache)operator([)ident(ttypestr)operator(]) operator(=) ident(ttype)
                ident(val) operator(=) ident(val)operator([)integer(2)operator(:)operator(-)integer(2)operator(])operator(.)ident(decode)operator(()string<delimiter(')content(unicode-escape)delimiter(')>operator(\))
            keyword(yield) ident(length)operator(,) ident(ttype)operator(,) ident(val)
            ident(length) operator(+=) predefined(len)operator(()ident(val)operator(\))
comment(# -*- coding: utf-8 -*-)
docstring<delimiter(""")content(
)content(    pygments.lexers.templates)content(
)content(    ~~~~~~~~~~~~~~~~~~~~~~~~~)content(
)content(
)content(    Lexers for various template engines' markup.)content(
)content(
)content(    :copyright: Copyright 2006-2009 by the Pygments team, see AUTHORS.)content(
)content(    :license: BSD, see LICENSE for details.)content(
)delimiter(""")>

keyword(import) include(re)
keyword(try)operator(:)
    predefined(set)
keyword(except) exception(NameError)operator(:)
    keyword(from) include(sets) keyword(import) include(Set) keyword(as) ident(set)

keyword(from) include(pygments.lexers.web) keyword(import) \
     include(PhpLexer)operator(,) include(HtmlLexer)operator(,) include(XmlLexer)operator(,) include(JavascriptLexer)operator(,) include(CssLexer)
keyword(from) include(pygments.lexers.agile) keyword(import) include(PythonLexer)
keyword(from) include(pygments.lexers.compiled) keyword(import) include(JavaLexer)
keyword(from) include(pygments.lexer) keyword(import) include(Lexer)operator(,) include(DelegatingLexer)operator(,) include(RegexLexer)operator(,) include(bygroups)operator(,) \
     include(include)operator(,) include(using)operator(,) include(this)
keyword(from) include(pygments.token) keyword(import) include(Error)operator(,) include(Punctuation)operator(,) \
     include(Text)operator(,) include(Comment)operator(,) include(Operator)operator(,) include(Keyword)operator(,) include(Name)operator(,) include(String)operator(,) include(Number)operator(,) include(Other)operator(,) include(Token)
keyword(from) include(pygments.util) keyword(import) include(html_doctype_matches)operator(,) include(looks_like_xml)

ident(__all__) operator(=) operator([)string<delimiter(')content(HtmlPhpLexer)delimiter(')>operator(,) string<delimiter(')content(XmlPhpLexer)delimiter(')>operator(,) string<delimiter(')content(CssPhpLexer)delimiter(')>operator(,)
           string<delimiter(')content(JavascriptPhpLexer)delimiter(')>operator(,) string<delimiter(')content(ErbLexer)delimiter(')>operator(,) string<delimiter(')content(RhtmlLexer)delimiter(')>operator(,)
           string<delimiter(')content(XmlErbLexer)delimiter(')>operator(,) string<delimiter(')content(CssErbLexer)delimiter(')>operator(,) string<delimiter(')content(JavascriptErbLexer)delimiter(')>operator(,)
           string<delimiter(')content(SmartyLexer)delimiter(')>operator(,) string<delimiter(')content(HtmlSmartyLexer)delimiter(')>operator(,) string<delimiter(')content(XmlSmartyLexer)delimiter(')>operator(,)
           string<delimiter(')content(CssSmartyLexer)delimiter(')>operator(,) string<delimiter(')content(JavascriptSmartyLexer)delimiter(')>operator(,) string<delimiter(')content(DjangoLexer)delimiter(')>operator(,)
           string<delimiter(')content(HtmlDjangoLexer)delimiter(')>operator(,) string<delimiter(')content(CssDjangoLexer)delimiter(')>operator(,) string<delimiter(')content(XmlDjangoLexer)delimiter(')>operator(,)
           string<delimiter(')content(JavascriptDjangoLexer)delimiter(')>operator(,) string<delimiter(')content(GenshiLexer)delimiter(')>operator(,) string<delimiter(')content(HtmlGenshiLexer)delimiter(')>operator(,)
           string<delimiter(')content(GenshiTextLexer)delimiter(')>operator(,) string<delimiter(')content(CssGenshiLexer)delimiter(')>operator(,) string<delimiter(')content(JavascriptGenshiLexer)delimiter(')>operator(,)
           string<delimiter(')content(MyghtyLexer)delimiter(')>operator(,) string<delimiter(')content(MyghtyHtmlLexer)delimiter(')>operator(,) string<delimiter(')content(MyghtyXmlLexer)delimiter(')>operator(,)
           string<delimiter(')content(MyghtyCssLexer)delimiter(')>operator(,) string<delimiter(')content(MyghtyJavascriptLexer)delimiter(')>operator(,) string<delimiter(')content(MakoLexer)delimiter(')>operator(,)
           string<delimiter(')content(MakoHtmlLexer)delimiter(')>operator(,) string<delimiter(')content(MakoXmlLexer)delimiter(')>operator(,) string<delimiter(')content(MakoJavascriptLexer)delimiter(')>operator(,)
           string<delimiter(')content(MakoCssLexer)delimiter(')>operator(,) string<delimiter(')content(JspLexer)delimiter(')>operator(,) string<delimiter(')content(CheetahLexer)delimiter(')>operator(,) string<delimiter(')content(CheetahHtmlLexer)delimiter(')>operator(,)
           string<delimiter(')content(CheetahXmlLexer)delimiter(')>operator(,) string<delimiter(')content(CheetahJavascriptLexer)delimiter(')>operator(,)
           string<delimiter(')content(EvoqueLexer)delimiter(')>operator(,) string<delimiter(')content(EvoqueHtmlLexer)delimiter(')>operator(,) string<delimiter(')content(EvoqueXmlLexer)delimiter(')>operator(])


keyword(class) class(ErbLexer)operator(()ident(Lexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Generic `ERB <http://ruby-doc.org/core/classes/ERB.html>`_ (Ruby Templating\))content(
)content(    lexer.)content(
)content(
)content(    Just highlights ruby code between the preprocessor directives, other data)content(
)content(    is left untouched by the lexer.)content(
)content(
)content(    All options are also forwarded to the `RubyLexer`.)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(ERB)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(erb)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(application/x-ruby-templating)delimiter(')>operator(])

    ident(_block_re) operator(=) ident(re)operator(.)ident(compile)operator(()string<modifier(r)delimiter(')content((<%%|%%>|<%=|<%#|<%-|<%|-%>|%>|^%[^%].*?$\))delimiter(')>operator(,) ident(re)operator(.)ident(M)operator(\))

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))operator(:)
        keyword(from) include(pygments.lexers.agile) keyword(import) include(RubyLexer)
        predefined_constant(self)operator(.)ident(ruby_lexer) operator(=) ident(RubyLexer)operator(()operator(**)ident(options)operator(\))
        ident(Lexer)operator(.)ident(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))

    keyword(def) method(get_tokens_unprocessed)operator(()predefined_constant(self)operator(,) ident(text)operator(\))operator(:)
        docstring<delimiter(""")content(
)content(        Since ERB doesn't allow "<%" and other tags inside of ruby)content(
)content(        blocks we have to use a split approach here that fails for)content(
)content(        that too.)content(
)content(        )delimiter(""")>
        ident(tokens) operator(=) predefined_constant(self)operator(.)ident(_block_re)operator(.)ident(split)operator(()ident(text)operator(\))
        ident(tokens)operator(.)ident(reverse)operator(()operator(\))
        ident(state) operator(=) ident(idx) operator(=) integer(0)
        keyword(try)operator(:)
            keyword(while) predefined_constant(True)operator(:)
                comment(# text)
                keyword(if) ident(state) operator(==) integer(0)operator(:)
                    ident(val) operator(=) ident(tokens)operator(.)ident(pop)operator(()operator(\))
                    keyword(yield) ident(idx)operator(,) ident(Other)operator(,) ident(val)
                    ident(idx) operator(+=) predefined(len)operator(()ident(val)operator(\))
                    ident(state) operator(=) integer(1)
                comment(# block starts)
                keyword(elif) ident(state) operator(==) integer(1)operator(:)
                    ident(tag) operator(=) ident(tokens)operator(.)ident(pop)operator(()operator(\))
                    comment(# literals)
                    keyword(if) ident(tag) keyword(in) operator(()string<delimiter(')content(<%%)delimiter(')>operator(,) string<delimiter(')content(%%>)delimiter(')>operator(\))operator(:)
                        keyword(yield) ident(idx)operator(,) ident(Other)operator(,) ident(tag)
                        ident(idx) operator(+=) integer(3)
                        ident(state) operator(=) integer(0)
                    comment(# comment)
                    keyword(elif) ident(tag) operator(==) string<delimiter(')content(<%#)delimiter(')>operator(:)
                        keyword(yield) ident(idx)operator(,) ident(Comment)operator(.)ident(Preproc)operator(,) ident(tag)
                        ident(val) operator(=) ident(tokens)operator(.)ident(pop)operator(()operator(\))
                        keyword(yield) ident(idx) operator(+) integer(3)operator(,) ident(Comment)operator(,) ident(val)
                        ident(idx) operator(+=) integer(3) operator(+) predefined(len)operator(()ident(val)operator(\))
                        ident(state) operator(=) integer(2)
                    comment(# blocks or output)
                    keyword(elif) ident(tag) keyword(in) operator(()string<delimiter(')content(<%)delimiter(')>operator(,) string<delimiter(')content(<%=)delimiter(')>operator(,) string<delimiter(')content(<%-)delimiter(')>operator(\))operator(:)
                        keyword(yield) ident(idx)operator(,) ident(Comment)operator(.)ident(Preproc)operator(,) ident(tag)
                        ident(idx) operator(+=) predefined(len)operator(()ident(tag)operator(\))
                        ident(data) operator(=) ident(tokens)operator(.)ident(pop)operator(()operator(\))
                        ident(r_idx) operator(=) integer(0)
                        keyword(for) ident(r_idx)operator(,) ident(r_token)operator(,) ident(r_value) keyword(in) \
                            predefined_constant(self)operator(.)ident(ruby_lexer)operator(.)ident(get_tokens_unprocessed)operator(()ident(data)operator(\))operator(:)
                            keyword(yield) ident(r_idx) operator(+) ident(idx)operator(,) ident(r_token)operator(,) ident(r_value)
                        ident(idx) operator(+=) predefined(len)operator(()ident(data)operator(\))
                        ident(state) operator(=) integer(2)
                    keyword(elif) ident(tag) keyword(in) operator(()string<delimiter(')content(%>)delimiter(')>operator(,) string<delimiter(')content(-%>)delimiter(')>operator(\))operator(:)
                        keyword(yield) ident(idx)operator(,) ident(Error)operator(,) ident(tag)
                        ident(idx) operator(+=) predefined(len)operator(()ident(tag)operator(\))
                        ident(state) operator(=) integer(0)
                    comment(# % raw ruby statements)
                    keyword(else)operator(:)
                        keyword(yield) ident(idx)operator(,) ident(Comment)operator(.)ident(Preproc)operator(,) ident(tag)operator([)integer(0)operator(])
                        ident(r_idx) operator(=) integer(0)
                        keyword(for) ident(r_idx)operator(,) ident(r_token)operator(,) ident(r_value) keyword(in) \
                            predefined_constant(self)operator(.)ident(ruby_lexer)operator(.)ident(get_tokens_unprocessed)operator(()ident(tag)operator([)integer(1)operator(:)operator(])operator(\))operator(:)
                            keyword(yield) ident(idx) operator(+) integer(1) operator(+) ident(r_idx)operator(,) ident(r_token)operator(,) ident(r_value)
                        ident(idx) operator(+=) predefined(len)operator(()ident(tag)operator(\))
                        ident(state) operator(=) integer(0)
                comment(# block ends)
                keyword(elif) ident(state) operator(==) integer(2)operator(:)
                    ident(tag) operator(=) ident(tokens)operator(.)ident(pop)operator(()operator(\))
                    keyword(if) ident(tag) keyword(not) keyword(in) operator(()string<delimiter(')content(%>)delimiter(')>operator(,) string<delimiter(')content(-%>)delimiter(')>operator(\))operator(:)
                        keyword(yield) ident(idx)operator(,) ident(Other)operator(,) ident(tag)
                    keyword(else)operator(:)
                        keyword(yield) ident(idx)operator(,) ident(Comment)operator(.)ident(Preproc)operator(,) ident(tag)
                    ident(idx) operator(+=) predefined(len)operator(()ident(tag)operator(\))
                    ident(state) operator(=) integer(0)
        keyword(except) exception(IndexError)operator(:)
            keyword(return)

    keyword(def) method(analyse_text)operator(()ident(text)operator(\))operator(:)
        keyword(if) string<delimiter(')content(<%)delimiter(')> keyword(in) ident(text) keyword(and) string<delimiter(')content(%>)delimiter(')> keyword(in) ident(text)operator(:)
            keyword(return) float(0.4)


keyword(class) class(SmartyLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Generic `Smarty <http://smarty.php.net/>`_ template lexer.)content(
)content(
)content(    Just highlights smarty code between the preprocessor directives, other)content(
)content(    data is left untouched by the lexer.)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(Smarty)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(smarty)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.tpl)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(application/x-smarty)delimiter(')>operator(])

    ident(flags) operator(=) ident(re)operator(.)ident(MULTILINE) operator(|) ident(re)operator(.)ident(DOTALL)

    ident(tokens) operator(=) operator({)
        string<delimiter(')content(root)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content([^{]+)delimiter(')>operator(,) ident(Other)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(()content(\\{)content(\)()content(\\*)content(.*?)content(\\*)content(\)()content(\\})content(\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Comment)operator(.)ident(Preproc)operator(,) ident(Comment)operator(,) ident(Comment)operator(.)ident(Preproc)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(()content(\\{)content(php)content(\\})content(\)(.*?\)()content(\\{)content(/php)content(\\})content(\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Comment)operator(.)ident(Preproc)operator(,) ident(using)operator(()ident(PhpLexer)operator(,) ident(startinline)operator(=)predefined_constant(True)operator(\))operator(,)
                      ident(Comment)operator(.)ident(Preproc)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(()content(\\{)content(\)(/?[a-zA-Z_][a-zA-Z0-9_]*\)()content(\\s)content(*\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Comment)operator(.)ident(Preproc)operator(,) ident(Name)operator(.)ident(Function)operator(,) ident(Text)operator(\))operator(,) string<delimiter(')content(smarty)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\{)delimiter(')>operator(,) ident(Comment)operator(.)ident(Preproc)operator(,) string<delimiter(')content(smarty)delimiter(')>operator(\))
        operator(])operator(,)
        string<delimiter(')content(smarty)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\s)content(+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\})delimiter(')>operator(,) ident(Comment)operator(.)ident(Preproc)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(#[a-zA-Z_][a-zA-Z0-9_]*#)delimiter(')>operator(,) ident(Name)operator(.)ident(Variable)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\$)content([a-zA-Z_][a-zA-Z0-9_]*()content(\\.)content([a-zA-Z0-9_]+\)*)delimiter(')>operator(,) ident(Name)operator(.)ident(Variable)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([~!%^&*(\)+=|)content(\\[)content(\\])content(:;,.<>/?{}@-])delimiter(')>operator(,) ident(Operator)operator(\))operator(,)
            operator(()string<delimiter(')content((true|false|null\))char(\\b)delimiter(')>operator(,) ident(Keyword)operator(.)ident(Constant)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(")content([0-9]()content(\\.)content([0-9]*\)?(eE[+-][0-9]\)?[flFLdD]?|)delimiter(")>
             string<modifier(r)delimiter(")content(0[xX][0-9a-fA-F]+[Ll]?)delimiter(")>operator(,) ident(Number)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content("()content(\\\\)content(\\\\)content(|)content(\\\\)content("|[^"]\)*")delimiter(')>operator(,) ident(String)operator(.)ident(Double)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(")content('()content(\\\\)content(\\\\)content(|)content(\\\\)content('|[^']\)*')delimiter(")>operator(,) ident(String)operator(.)ident(Single)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([a-zA-Z_][a-zA-Z0-9_]*)delimiter(')>operator(,) ident(Name)operator(.)ident(Attribute)operator(\))
        operator(])
    operator(})

    keyword(def) method(analyse_text)operator(()ident(text)operator(\))operator(:)
        ident(rv) operator(=) float(0.0)
        keyword(if) ident(re)operator(.)ident(search)operator(()string<delimiter(')content(\\{)content(if)content(\\s)content(+.*?)content(\\})content(.*?)content(\\{)content(/if)content(\\})delimiter(')>operator(,) ident(text)operator(\))operator(:)
            ident(rv) operator(+=) float(0.15)
        keyword(if) ident(re)operator(.)ident(search)operator(()string<delimiter(')content(\\{)content(include)content(\\s)content(+file=.*?)content(\\})delimiter(')>operator(,) ident(text)operator(\))operator(:)
            ident(rv) operator(+=) float(0.15)
        keyword(if) ident(re)operator(.)ident(search)operator(()string<delimiter(')content(\\{)content(foreach)content(\\s)content(+.*?)content(\\})content(.*?)content(\\{)content(/foreach)content(\\})delimiter(')>operator(,) ident(text)operator(\))operator(:)
            ident(rv) operator(+=) float(0.15)
        keyword(if) ident(re)operator(.)ident(search)operator(()string<delimiter(')content(\\{)content(\\$)content(.*?)content(\\})delimiter(')>operator(,) ident(text)operator(\))operator(:)
            ident(rv) operator(+=) float(0.01)
        keyword(return) ident(rv)


keyword(class) class(DjangoLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Generic `django <http://www.djangoproject.com/documentation/templates/>`_)content(
)content(    and `jinja <http://wsgiarea.pocoo.org/jinja/>`_ template lexer.)content(
)content(
)content(    It just highlights django/jinja code between the preprocessor directives,)content(
)content(    other data is left untouched by the lexer.)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(Django/Jinja)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(django)delimiter(')>operator(,) string<delimiter(')content(jinja)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(application/x-django-templating)delimiter(')>operator(,) string<delimiter(')content(application/x-jinja)delimiter(')>operator(])

    ident(flags) operator(=) ident(re)operator(.)ident(M) operator(|) ident(re)operator(.)ident(S)

    ident(tokens) operator(=) operator({)
        string<delimiter(')content(root)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content([^{]+)delimiter(')>operator(,) ident(Other)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\{)content(\\{)delimiter(')>operator(,) ident(Comment)operator(.)ident(Preproc)operator(,) string<delimiter(')content(var)delimiter(')>operator(\))operator(,)
            comment(# jinja/django comments)
            operator(()string<modifier(r)delimiter(')content(\\{)content([*#].*?[*#])content(\\})delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
            comment(# django comments)
            operator(()string<modifier(r)delimiter(')content(()content(\\{)content(%\)(-?)content(\\s)content(*\)(comment\)()content(\\s)content(*-?\)(%)content(\\})content(\)(.*?\))delimiter(')>
             string<modifier(r)delimiter(')content(()content(\\{)content(%\)(-?)content(\\s)content(*\)(endcomment\)()content(\\s)content(*-?\)(%)content(\\})content(\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Comment)operator(.)ident(Preproc)operator(,) ident(Text)operator(,) ident(Keyword)operator(,) ident(Text)operator(,) ident(Comment)operator(.)ident(Preproc)operator(,)
                      ident(Comment)operator(,) ident(Comment)operator(.)ident(Preproc)operator(,) ident(Text)operator(,) ident(Keyword)operator(,) ident(Text)operator(,)
                      ident(Comment)operator(.)ident(Preproc)operator(\))operator(\))operator(,)
            comment(# raw jinja blocks)
            operator(()string<modifier(r)delimiter(')content(()content(\\{)content(%\)(-?)content(\\s)content(*\)(raw\)()content(\\s)content(*-?\)(%)content(\\})content(\)(.*?\))delimiter(')>
             string<modifier(r)delimiter(')content(()content(\\{)content(%\)(-?)content(\\s)content(*\)(endraw\)()content(\\s)content(*-?\)(%)content(\\})content(\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Comment)operator(.)ident(Preproc)operator(,) ident(Text)operator(,) ident(Keyword)operator(,) ident(Text)operator(,) ident(Comment)operator(.)ident(Preproc)operator(,)
                      ident(Text)operator(,) ident(Comment)operator(.)ident(Preproc)operator(,) ident(Text)operator(,) ident(Keyword)operator(,) ident(Text)operator(,)
                      ident(Comment)operator(.)ident(Preproc)operator(\))operator(\))operator(,)
            comment(# filter blocks)
            operator(()string<modifier(r)delimiter(')content(()content(\\{)content(%\)(-?)content(\\s)content(*\)(filter\)()content(\\s)content(+\)([a-zA-Z_][a-zA-Z0-9_]*\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Comment)operator(.)ident(Preproc)operator(,) ident(Text)operator(,) ident(Keyword)operator(,) ident(Text)operator(,) ident(Name)operator(.)ident(Function)operator(\))operator(,)
             string<delimiter(')content(block)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(()content(\\{)content(%\)(-?)content(\\s)content(*\)([a-zA-Z_][a-zA-Z0-9_]*\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Comment)operator(.)ident(Preproc)operator(,) ident(Text)operator(,) ident(Keyword)operator(\))operator(,) string<delimiter(')content(block)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\{)delimiter(')>operator(,) ident(Other)operator(\))
        operator(])operator(,)
        string<delimiter(')content(varnames)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(()content(\\|)content(\)()content(\\s)content(*\)([a-zA-Z_][a-zA-Z0-9_]*\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Operator)operator(,) ident(Text)operator(,) ident(Name)operator(.)ident(Function)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((is\)()content(\\s)content(+\)(not\)?()content(\\s)content(+\)?([a-zA-Z_][a-zA-Z0-9_]*\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Keyword)operator(,) ident(Text)operator(,) ident(Keyword)operator(,) ident(Text)operator(,) ident(Name)operator(.)ident(Function)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((_|true|false|none|True|False|None\))content(\\b)delimiter(')>operator(,) ident(Keyword)operator(.)ident(Pseudo)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((in|as|reversed|recursive|not|and|or|is|if|else|import|)delimiter(')>
             string<modifier(r)delimiter(')content(with(?:(?:out\)?)content(\\s)content(*context\)?\))content(\\b)delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((loop|block|super|forloop\))content(\\b)delimiter(')>operator(,) ident(Name)operator(.)ident(Builtin)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([a-zA-Z][a-zA-Z0-9_]*)delimiter(')>operator(,) ident(Name)operator(.)ident(Variable)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\.)content([a-zA-Z0-9_]+)delimiter(')>operator(,) ident(Name)operator(.)ident(Variable)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(:?"()content(\\\\)content(\\\\)content(|)content(\\\\)content("|[^"]\)*")delimiter(')>operator(,) ident(String)operator(.)ident(Double)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(")content(:?'()content(\\\\)content(\\\\)content(|)content(\\\\)content('|[^']\)*')delimiter(")>operator(,) ident(String)operator(.)ident(Single)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(([{}(\))content(\\[)content(\\])content(+)content(\\-)content(*/,:]|[><=]=?\))delimiter(')>operator(,) ident(Operator)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(")content([0-9]()content(\\.)content([0-9]*\)?(eE[+-][0-9]\)?[flFLdD]?|)delimiter(")>
             string<modifier(r)delimiter(")content(0[xX][0-9a-fA-F]+[Ll]?)delimiter(")>operator(,) ident(Number)operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(var)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\s)content(+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((-?\)()content(\\})content(\\})content(\))delimiter(')>operator(,) ident(bygroups)operator(()ident(Text)operator(,) ident(Comment)operator(.)ident(Preproc)operator(\))operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(varnames)delimiter(')>operator(\))
        operator(])operator(,)
        string<delimiter(')content(block)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\s)content(+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((-?\)(%)content(\\})content(\))delimiter(')>operator(,) ident(bygroups)operator(()ident(Text)operator(,) ident(Comment)operator(.)ident(Preproc)operator(\))operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(varnames)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(.)delimiter(')>operator(,) ident(Punctuation)operator(\))
        operator(])
    operator(})

    keyword(def) method(analyse_text)operator(()ident(text)operator(\))operator(:)
        ident(rv) operator(=) float(0.0)
        keyword(if) ident(re)operator(.)ident(search)operator(()string<modifier(r)delimiter(')content(\\{)content(%)content(\\s)content(*(block|extends\))delimiter(')>operator(,) ident(text)operator(\)) keyword(is) keyword(not) predefined_constant(None)operator(:)
            ident(rv) operator(+=) float(0.4)
        keyword(if) ident(re)operator(.)ident(search)operator(()string<modifier(r)delimiter(')content(\\{)content(%)content(\\s)content(*if)content(\\s)content(*.*?%)content(\\})delimiter(')>operator(,) ident(text)operator(\)) keyword(is) keyword(not) predefined_constant(None)operator(:)
            ident(rv) operator(+=) float(0.1)
        keyword(if) ident(re)operator(.)ident(search)operator(()string<modifier(r)delimiter(')content(\\{)content(\\{)content(.*?)content(\\})content(\\})delimiter(')>operator(,) ident(text)operator(\)) keyword(is) keyword(not) predefined_constant(None)operator(:)
            ident(rv) operator(+=) float(0.1)
        keyword(return) ident(rv)


keyword(class) class(MyghtyLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Generic `myghty templates`_ lexer. Code that isn't Myghty)content(
)content(    markup is yielded as `Token.Other`.)content(
)content(
)content(    *New in Pygments 0.6.*)content(
)content(
)content(    .. _myghty templates: http://www.myghty.org/)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(Myghty)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(myghty)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.myt)delimiter(')>operator(,) string<delimiter(')content(autodelegate)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(application/x-myghty)delimiter(')>operator(])

    ident(tokens) operator(=) operator({)
        string<delimiter(')content(root)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\s)content(+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((<%(def|method\)\)()content(\\s)content(*\)(.*?\)(>\)(.*?\)(</%)content(\\2)content(\\s)content(*>\)(?s\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Name)operator(.)ident(Tag)operator(,) predefined_constant(None)operator(,) ident(Text)operator(,) ident(Name)operator(.)ident(Function)operator(,) ident(Name)operator(.)ident(Tag)operator(,)
                      ident(using)operator(()ident(this)operator(\))operator(,) ident(Name)operator(.)ident(Tag)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((<%()content(\\w)content(+\)\)(.*?\)(>\)(.*?\)(</%)content(\\2)content(\\s)content(*>\)(?s\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Name)operator(.)ident(Tag)operator(,) predefined_constant(None)operator(,) ident(Name)operator(.)ident(Function)operator(,) ident(Name)operator(.)ident(Tag)operator(,)
                      ident(using)operator(()ident(PythonLexer)operator(\))operator(,) ident(Name)operator(.)ident(Tag)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((<&[^|]\)(.*?\)(,.*?\)?(&>\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Name)operator(.)ident(Tag)operator(,) ident(Name)operator(.)ident(Function)operator(,) ident(using)operator(()ident(PythonLexer)operator(\))operator(,) ident(Name)operator(.)ident(Tag)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((<&)content(\\|)content(\)(.*?\)(,.*?\)?(&>\)(?s\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Name)operator(.)ident(Tag)operator(,) ident(Name)operator(.)ident(Function)operator(,) ident(using)operator(()ident(PythonLexer)operator(\))operator(,) ident(Name)operator(.)ident(Tag)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(</&>)delimiter(')>operator(,) ident(Name)operator(.)ident(Tag)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((<%!?\)(.*?\)(%>\)(?s\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Name)operator(.)ident(Tag)operator(,) ident(using)operator(()ident(PythonLexer)operator(\))operator(,) ident(Name)operator(.)ident(Tag)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((?<=^\)#[^)content(\\n)content(]*()content(\\n)content(|)content(\\Z)content(\))delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((?<=^\)(%\)([^)content(\\n)content(]*\)()content(\\n)content(|)content(\\Z)content(\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Name)operator(.)ident(Tag)operator(,) ident(using)operator(()ident(PythonLexer)operator(\))operator(,) ident(Other)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(""")content((?sx\))content(
)content(                 (.+?\)               # anything, followed by:)content(
)content(                 (?:)content(
)content(                  (?<=)content(\\n)content(\)(?=[%#]\) |  # an eval or comment line)content(
)content(                  (?=</?[%&]\) |      # a substitution or block or)content(
)content(                                     # call start or end)content(
)content(                                     # - don't consume)content(
)content(                  ()content(\\\\)content(\\n)content(\) |           # an escaped newline)content(
)content(                  )content(\\Z)content(                 # end of string)content(
)content(                 \))delimiter(""")>operator(,) ident(bygroups)operator(()ident(Other)operator(,) ident(Operator)operator(\))operator(\))operator(,)
        operator(])
    operator(})


keyword(class) class(MyghtyHtmlLexer)operator(()ident(DelegatingLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Subclass of the `MyghtyLexer` that highlights unlexer data)content(
)content(    with the `HtmlLexer`.)content(
)content(
)content(    *New in Pygments 0.6.*)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(HTML+Myghty)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(html+myghty)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(text/html+myghty)delimiter(')>operator(])

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))operator(:)
        predefined(super)operator(()ident(MyghtyHtmlLexer)operator(,) predefined_constant(self)operator(\))operator(.)ident(__init__)operator(()ident(HtmlLexer)operator(,) ident(MyghtyLexer)operator(,)
                                              operator(**)ident(options)operator(\))


keyword(class) class(MyghtyXmlLexer)operator(()ident(DelegatingLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Subclass of the `MyghtyLexer` that highlights unlexer data)content(
)content(    with the `XmlLexer`.)content(
)content(
)content(    *New in Pygments 0.6.*)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(XML+Myghty)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(xml+myghty)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(application/xml+myghty)delimiter(')>operator(])

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))operator(:)
        predefined(super)operator(()ident(MyghtyXmlLexer)operator(,) predefined_constant(self)operator(\))operator(.)ident(__init__)operator(()ident(XmlLexer)operator(,) ident(MyghtyLexer)operator(,)
                                             operator(**)ident(options)operator(\))


keyword(class) class(MyghtyJavascriptLexer)operator(()ident(DelegatingLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Subclass of the `MyghtyLexer` that highlights unlexer data)content(
)content(    with the `JavascriptLexer`.)content(
)content(
)content(    *New in Pygments 0.6.*)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(JavaScript+Myghty)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(js+myghty)delimiter(')>operator(,) string<delimiter(')content(javascript+myghty)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(application/x-javascript+myghty)delimiter(')>operator(,)
                 string<delimiter(')content(text/x-javascript+myghty)delimiter(')>operator(,)
                 string<delimiter(')content(text/javascript+mygthy)delimiter(')>operator(])

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))operator(:)
        predefined(super)operator(()ident(MyghtyJavascriptLexer)operator(,) predefined_constant(self)operator(\))operator(.)ident(__init__)operator(()ident(JavascriptLexer)operator(,)
                                                    ident(MyghtyLexer)operator(,) operator(**)ident(options)operator(\))


keyword(class) class(MyghtyCssLexer)operator(()ident(DelegatingLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Subclass of the `MyghtyLexer` that highlights unlexer data)content(
)content(    with the `CssLexer`.)content(
)content(
)content(    *New in Pygments 0.6.*)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(CSS+Myghty)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(css+myghty)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(text/css+myghty)delimiter(')>operator(])

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))operator(:)
        predefined(super)operator(()ident(MyghtyCssLexer)operator(,) predefined_constant(self)operator(\))operator(.)ident(__init__)operator(()ident(CssLexer)operator(,) ident(MyghtyLexer)operator(,)
                                             operator(**)ident(options)operator(\))


keyword(class) class(MakoLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Generic `mako templates`_ lexer. Code that isn't Mako)content(
)content(    markup is yielded as `Token.Other`.)content(
)content(
)content(    *New in Pygments 0.7.*)content(
)content(
)content(    .. _mako templates: http://www.makotemplates.org/)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(Mako)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(mako)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.mao)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(application/x-mako)delimiter(')>operator(])

    ident(tokens) operator(=) operator({)
        string<delimiter(')content(root)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(()content(\\s)content(*\)(%\)()content(\\s)content(*end(?:)content(\\w)content(+\)\)()content(\\n)content(|)content(\\Z)content(\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Text)operator(,) ident(Comment)operator(.)ident(Preproc)operator(,) ident(Keyword)operator(,) ident(Other)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(()content(\\s)content(*\)(%\)([^)content(\\n)content(]*\)()content(\\n)content(|)content(\\Z)content(\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Text)operator(,) ident(Comment)operator(.)ident(Preproc)operator(,) ident(using)operator(()ident(PythonLexer)operator(\))operator(,) ident(Other)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(()content(\\s)content(*\)(##[^)content(\\n)content(]*\)()content(\\n)content(|)content(\\Z)content(\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Text)operator(,) ident(Comment)operator(.)ident(Preproc)operator(,) ident(Other)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((?s\)<%doc>.*?</%doc>)delimiter(')>operator(,) ident(Comment)operator(.)ident(Preproc)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((<%\)([)content(\\w)content(\\.)content(\\:)content(]+\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Comment)operator(.)ident(Preproc)operator(,) ident(Name)operator(.)ident(Builtin)operator(\))operator(,) string<delimiter(')content(tag)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((</%\)([)content(\\w)content(\\.)content(\\:)content(]+\)(>\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Comment)operator(.)ident(Preproc)operator(,) ident(Name)operator(.)ident(Builtin)operator(,) ident(Comment)operator(.)ident(Preproc)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(<%(?=([)content(\\w)content(\\.)content(\\:)content(]+\)\))delimiter(')>operator(,) ident(Comment)operator(.)ident(Preproc)operator(,) string<delimiter(')content(ondeftags)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((<%(?:!?\)\)(.*?\)(%>\)(?s\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Comment)operator(.)ident(Preproc)operator(,) ident(using)operator(()ident(PythonLexer)operator(\))operator(,) ident(Comment)operator(.)ident(Preproc)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(()content(\\$)content(\\{)content(\)(.*?\)()content(\\})content(\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Comment)operator(.)ident(Preproc)operator(,) ident(using)operator(()ident(PythonLexer)operator(\))operator(,) ident(Comment)operator(.)ident(Preproc)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(''')content((?sx\))content(
)content(                (.+?\)                # anything, followed by:)content(
)content(                (?:)content(
)content(<<<<<<< local)content(
)content(                 (?<=)content(\\n)content(\)(?=%|)content(\\#)content(\\#)content(\) |# an eval or comment line)content(
)content(                 (?=)content(\\#)content(\\*)content(\) |         # multiline comment)content(
)content(                 (?=</?%\) |         # a python block)content(
)content(                                    # call start or end)content(
)content(                 (?=)content(\\$)content(\\{)content(\) |         # a substitution)content(
)content(=======)content(
)content(                 (?<=)content(\\n)content(\)(?=%|)content(\\#)content(\\#)content(\) | # an eval or comment line)content(
)content(                 (?=)content(\\#)content(\\*)content(\) |          # multiline comment)content(
)content(                 (?=</?%\) |          # a python block)content(
)content(                                     # call start or end)content(
)content(                 (?=)content(\\$)content(\\{)content(\) |          # a substitution)content(
)content(>>>>>>> other)content(
)content(                 (?<=)content(\\n)content(\)(?=)content(\\s)content(*%\) |)content(
)content(                                     # - don't consume)content(
)content(                 ()content(\\\\)content(\\n)content(\) |            # an escaped newline)content(
)content(                 )content(\\Z)content(                  # end of string)content(
)content(                \))content(
)content(            )delimiter(''')>operator(,) ident(bygroups)operator(()ident(Other)operator(,) ident(Operator)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\s)content(+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(ondeftags)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(<%)delimiter(')>operator(,) ident(Comment)operator(.)ident(Preproc)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((?<=<%\)(include|inherit|namespace|page\))delimiter(')>operator(,) ident(Name)operator(.)ident(Builtin)operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(tag)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(tag)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(((?:)content(\\w)content(+\))content(\\s)content(*=\))content(\\s)content(*(".*?"\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Name)operator(.)ident(Attribute)operator(,) ident(String)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(/?)content(\\s)content(*>)delimiter(')>operator(,) ident(Comment)operator(.)ident(Preproc)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\s)content(+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(attr)delimiter(')>operator(:) operator([)
            operator(()string<delimiter(')content(".*?")delimiter(')>operator(,) ident(String)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<delimiter(")content('.*?')delimiter(")>operator(,) ident(String)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([^)content(\\s)content(>]+)delimiter(')>operator(,) ident(String)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
    operator(})


keyword(class) class(MakoHtmlLexer)operator(()ident(DelegatingLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Subclass of the `MakoLexer` that highlights unlexed data)content(
)content(    with the `HtmlLexer`.)content(
)content(
)content(    *New in Pygments 0.7.*)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(HTML+Mako)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(html+mako)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(text/html+mako)delimiter(')>operator(])

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))operator(:)
        predefined(super)operator(()ident(MakoHtmlLexer)operator(,) predefined_constant(self)operator(\))operator(.)ident(__init__)operator(()ident(HtmlLexer)operator(,) ident(MakoLexer)operator(,)
                                              operator(**)ident(options)operator(\))

keyword(class) class(MakoXmlLexer)operator(()ident(DelegatingLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Subclass of the `MakoLexer` that highlights unlexer data)content(
)content(    with the `XmlLexer`.)content(
)content(
)content(    *New in Pygments 0.7.*)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(XML+Mako)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(xml+mako)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(application/xml+mako)delimiter(')>operator(])

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))operator(:)
        predefined(super)operator(()ident(MakoXmlLexer)operator(,) predefined_constant(self)operator(\))operator(.)ident(__init__)operator(()ident(XmlLexer)operator(,) ident(MakoLexer)operator(,)
                                             operator(**)ident(options)operator(\))

keyword(class) class(MakoJavascriptLexer)operator(()ident(DelegatingLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Subclass of the `MakoLexer` that highlights unlexer data)content(
)content(    with the `JavascriptLexer`.)content(
)content(
)content(    *New in Pygments 0.7.*)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(JavaScript+Mako)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(js+mako)delimiter(')>operator(,) string<delimiter(')content(javascript+mako)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(application/x-javascript+mako)delimiter(')>operator(,)
                 string<delimiter(')content(text/x-javascript+mako)delimiter(')>operator(,)
                 string<delimiter(')content(text/javascript+mako)delimiter(')>operator(])

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))operator(:)
        predefined(super)operator(()ident(MakoJavascriptLexer)operator(,) predefined_constant(self)operator(\))operator(.)ident(__init__)operator(()ident(JavascriptLexer)operator(,)
                                                    ident(MakoLexer)operator(,) operator(**)ident(options)operator(\))

keyword(class) class(MakoCssLexer)operator(()ident(DelegatingLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Subclass of the `MakoLexer` that highlights unlexer data)content(
)content(    with the `CssLexer`.)content(
)content(
)content(    *New in Pygments 0.7.*)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(CSS+Mako)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(css+mako)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(text/css+mako)delimiter(')>operator(])

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))operator(:)
        predefined(super)operator(()ident(MakoCssLexer)operator(,) predefined_constant(self)operator(\))operator(.)ident(__init__)operator(()ident(CssLexer)operator(,) ident(MakoLexer)operator(,)
                                             operator(**)ident(options)operator(\))


comment(# Genshi and Cheetah lexers courtesy of Matt Good.)

keyword(class) class(CheetahPythonLexer)operator(()ident(Lexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Lexer for handling Cheetah's special $ tokens in Python syntax.)content(
)content(    )delimiter(""")>

    keyword(def) method(get_tokens_unprocessed)operator(()predefined_constant(self)operator(,) ident(text)operator(\))operator(:)
        ident(pylexer) operator(=) ident(PythonLexer)operator(()operator(**)predefined_constant(self)operator(.)ident(options)operator(\))
        keyword(for) ident(pos)operator(,) ident(type_)operator(,) ident(value) keyword(in) ident(pylexer)operator(.)ident(get_tokens_unprocessed)operator(()ident(text)operator(\))operator(:)
            keyword(if) ident(type_) operator(==) ident(Token)operator(.)ident(Error) keyword(and) ident(value) operator(==) string<delimiter(')content($)delimiter(')>operator(:)
                ident(type_) operator(=) ident(Comment)operator(.)ident(Preproc)
            keyword(yield) ident(pos)operator(,) ident(type_)operator(,) ident(value)


keyword(class) class(CheetahLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Generic `cheetah templates`_ lexer. Code that isn't Cheetah)content(
)content(    markup is yielded as `Token.Other`.  This also works for)content(
)content(    `spitfire templates`_ which use the same syntax.)content(
)content(
)content(    .. _cheetah templates: http://www.cheetahtemplate.org/)content(
)content(    .. _spitfire templates: http://code.google.com/p/spitfire/)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(Cheetah)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(cheetah)delimiter(')>operator(,) string<delimiter(')content(spitfire)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.tmpl)delimiter(')>operator(,) string<delimiter(')content(*.spt)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(application/x-cheetah)delimiter(')>operator(,) string<delimiter(')content(application/x-spitfire)delimiter(')>operator(])

    ident(tokens) operator(=) operator({)
        string<delimiter(')content(root)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content((##[^)content(\\n)content(]*\)$)delimiter(')>operator(,)
             operator(()ident(bygroups)operator(()ident(Comment)operator(\))operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(#[*](.|)content(\\n)content(\)*?[*]#)delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(#end[^#)content(\\n)content(]*(?:#|$\))delimiter(')>operator(,) ident(Comment)operator(.)ident(Preproc)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(#slurp$)delimiter(')>operator(,) ident(Comment)operator(.)ident(Preproc)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((#[a-zA-Z]+\)([^#)content(\\n)content(]*\)(#|$\))delimiter(')>operator(,)
             operator(()ident(bygroups)operator(()ident(Comment)operator(.)ident(Preproc)operator(,) ident(using)operator(()ident(CheetahPythonLexer)operator(\))operator(,)
                       ident(Comment)operator(.)ident(Preproc)operator(\))operator(\))operator(\))operator(,)
            comment(# TODO support other Python syntax like $foo['bar'])
            operator(()string<modifier(r)delimiter(')content(()content(\\$)content(\)([a-zA-Z_][a-zA-Z0-9_)content(\\.)content(]*[a-zA-Z0-9_]\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Comment)operator(.)ident(Preproc)operator(,) ident(using)operator(()ident(CheetahPythonLexer)operator(\))operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(()content(\\$)content(\\{)content(!?\)(.*?\)()content(\\})content(\)(?s\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Comment)operator(.)ident(Preproc)operator(,) ident(using)operator(()ident(CheetahPythonLexer)operator(\))operator(,)
                      ident(Comment)operator(.)ident(Preproc)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(''')content((?sx\))content(
)content(                (.+?\)               # anything, followed by:)content(
)content(                (?:)content(
)content(                 (?=[#][#a-zA-Z]*\) |   # an eval comment)content(
)content(                 (?=)content(\\$)content([a-zA-Z_{]\) | # a substitution)content(
)content(                 )content(\\Z)content(                 # end of string)content(
)content(                \))content(
)content(            )delimiter(''')>operator(,) ident(Other)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\s)content(+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
        operator(])operator(,)
    operator(})


keyword(class) class(CheetahHtmlLexer)operator(()ident(DelegatingLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Subclass of the `CheetahLexer` that highlights unlexer data)content(
)content(    with the `HtmlLexer`.)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(HTML+Cheetah)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(html+cheetah)delimiter(')>operator(,) string<delimiter(')content(html+spitfire)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(text/html+cheetah)delimiter(')>operator(,) string<delimiter(')content(text/html+spitfire)delimiter(')>operator(])

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))operator(:)
        predefined(super)operator(()ident(CheetahHtmlLexer)operator(,) predefined_constant(self)operator(\))operator(.)ident(__init__)operator(()ident(HtmlLexer)operator(,) ident(CheetahLexer)operator(,)
                                               operator(**)ident(options)operator(\))


keyword(class) class(CheetahXmlLexer)operator(()ident(DelegatingLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Subclass of the `CheetahLexer` that highlights unlexer data)content(
)content(    with the `XmlLexer`.)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(XML+Cheetah)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(xml+cheetah)delimiter(')>operator(,) string<delimiter(')content(xml+spitfire)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(application/xml+cheetah)delimiter(')>operator(,) string<delimiter(')content(application/xml+spitfire)delimiter(')>operator(])

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))operator(:)
        predefined(super)operator(()ident(CheetahXmlLexer)operator(,) predefined_constant(self)operator(\))operator(.)ident(__init__)operator(()ident(XmlLexer)operator(,) ident(CheetahLexer)operator(,)
                                              operator(**)ident(options)operator(\))


keyword(class) class(CheetahJavascriptLexer)operator(()ident(DelegatingLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Subclass of the `CheetahLexer` that highlights unlexer data)content(
)content(    with the `JavascriptLexer`.)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(JavaScript+Cheetah)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(js+cheetah)delimiter(')>operator(,) string<delimiter(')content(javascript+cheetah)delimiter(')>operator(,)
               string<delimiter(')content(js+spitfire)delimiter(')>operator(,) string<delimiter(')content(javascript+spitfire)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(application/x-javascript+cheetah)delimiter(')>operator(,)
                 string<delimiter(')content(text/x-javascript+cheetah)delimiter(')>operator(,)
                 string<delimiter(')content(text/javascript+cheetah)delimiter(')>operator(,)
                 string<delimiter(')content(application/x-javascript+spitfire)delimiter(')>operator(,)
                 string<delimiter(')content(text/x-javascript+spitfire)delimiter(')>operator(,)
                 string<delimiter(')content(text/javascript+spitfire)delimiter(')>operator(])

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))operator(:)
        predefined(super)operator(()ident(CheetahJavascriptLexer)operator(,) predefined_constant(self)operator(\))operator(.)ident(__init__)operator(()ident(JavascriptLexer)operator(,)
                                                     ident(CheetahLexer)operator(,) operator(**)ident(options)operator(\))


keyword(class) class(GenshiTextLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    A lexer that highlights `genshi <http://genshi.edgewall.org/>`_ text)content(
)content(    templates.)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(Genshi Text)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(genshitext)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(application/x-genshi-text)delimiter(')>operator(,) string<delimiter(')content(text/x-genshi)delimiter(')>operator(])

    ident(tokens) operator(=) operator({)
        string<delimiter(')content(root)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content([^#)content(\\$)content(\\s)content(]+)delimiter(')>operator(,) ident(Other)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(^()content(\\s)content(*\)(##.*\)$)delimiter(')>operator(,) ident(bygroups)operator(()ident(Text)operator(,) ident(Comment)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(^()content(\\s)content(*\)(#\))delimiter(')>operator(,) ident(bygroups)operator(()ident(Text)operator(,) ident(Comment)operator(.)ident(Preproc)operator(\))operator(,) string<delimiter(')content(directive)delimiter(')>operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(variable)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([#)content(\\$)content(\\s)content(])delimiter(')>operator(,) ident(Other)operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(directive)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\n)delimiter(')>operator(,) ident(Text)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((?:def|for|if\))content(\\s)content(+.*)delimiter(')>operator(,) ident(using)operator(()ident(PythonLexer)operator(\))operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((choose|when|with\)([^)content(\\S)content(\\n)content(]+\)(.*\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Keyword)operator(,) ident(Text)operator(,) ident(using)operator(()ident(PythonLexer)operator(\))operator(\))operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((choose|otherwise\))content(\\b)delimiter(')>operator(,) ident(Keyword)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((end)content(\\w)content(*\)([^)content(\\S)content(\\n)content(]*\)(.*\))delimiter(')>operator(,) ident(bygroups)operator(()ident(Keyword)operator(,) ident(Text)operator(,) ident(Comment)operator(\))operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(variable)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content((?<!)content(\\$)content(\)()content(\\$)content(\\{)content(\)(.+?\)()content(\\})content(\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Comment)operator(.)ident(Preproc)operator(,) ident(using)operator(()ident(PythonLexer)operator(\))operator(,) ident(Comment)operator(.)ident(Preproc)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((?<!)content(\\$)content(\)()content(\\$)content(\)([a-zA-Z_][a-zA-Z0-9_)content(\\.)content(]*\))delimiter(')>operator(,)
             ident(Name)operator(.)ident(Variable)operator(\))operator(,)
        operator(])
    operator(})


keyword(class) class(GenshiMarkupLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Base lexer for Genshi markup, used by `HtmlGenshiLexer` and)content(
)content(    `GenshiLexer`.)content(
)content(    )delimiter(""")>

    ident(flags) operator(=) ident(re)operator(.)ident(DOTALL)

    ident(tokens) operator(=) operator({)
        string<delimiter(')content(root)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content([^<)content(\\$)content(]+)delimiter(')>operator(,) ident(Other)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((<)content(\\?)content(python\)(.*?\)()content(\\?)content(>\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Comment)operator(.)ident(Preproc)operator(,) ident(using)operator(()ident(PythonLexer)operator(\))operator(,) ident(Comment)operator(.)ident(Preproc)operator(\))operator(\))operator(,)
            comment(# yield style and script blocks as Other)
            operator(()string<modifier(r)delimiter(')content(<)content(\\s)content(*(script|style\))content(\\s)content(*.*?>.*?<)content(\\s)content(*/)content(\\1)content(\\s)content(*>)delimiter(')>operator(,) ident(Other)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(<)content(\\s)content(*py:[a-zA-Z0-9]+)delimiter(')>operator(,) ident(Name)operator(.)ident(Tag)operator(,) string<delimiter(')content(pytag)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(<)content(\\s)content(*[a-zA-Z0-9:]+)delimiter(')>operator(,) ident(Name)operator(.)ident(Tag)operator(,) string<delimiter(')content(tag)delimiter(')>operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(variable)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([<)content(\\$)content(])delimiter(')>operator(,) ident(Other)operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(pytag)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\s)content(+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([a-zA-Z0-9_:-]+)content(\\s)content(*=)delimiter(')>operator(,) ident(Name)operator(.)ident(Attribute)operator(,) string<delimiter(')content(pyattr)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(/?)content(\\s)content(*>)delimiter(')>operator(,) ident(Name)operator(.)ident(Tag)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(pyattr)delimiter(')>operator(:) operator([)
            operator(()string<delimiter(')content(("\)(.*?\)("\))delimiter(')>operator(,) ident(bygroups)operator(()ident(String)operator(,) ident(using)operator(()ident(PythonLexer)operator(\))operator(,) ident(String)operator(\))operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<delimiter(")content(('\)(.*?\)('\))delimiter(")>operator(,) ident(bygroups)operator(()ident(String)operator(,) ident(using)operator(()ident(PythonLexer)operator(\))operator(,) ident(String)operator(\))operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([^)content(\\s)content(>]+)delimiter(')>operator(,) ident(String)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(tag)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\s)content(+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(py:[a-zA-Z0-9_-]+)content(\\s)content(*=)delimiter(')>operator(,) ident(Name)operator(.)ident(Attribute)operator(,) string<delimiter(')content(pyattr)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([a-zA-Z0-9_:-]+)content(\\s)content(*=)delimiter(')>operator(,) ident(Name)operator(.)ident(Attribute)operator(,) string<delimiter(')content(attr)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(/?)content(\\s)content(*>)delimiter(')>operator(,) ident(Name)operator(.)ident(Tag)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(attr)delimiter(')>operator(:) operator([)
            operator(()string<delimiter(')content(")delimiter(')>operator(,) ident(String)operator(,) string<delimiter(')content(attr-dstring)delimiter(')>operator(\))operator(,)
            operator(()string<delimiter(")content(')delimiter(")>operator(,) ident(String)operator(,) string<delimiter(')content(attr-sstring)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([^)content(\\s)content(>]*)delimiter(')>operator(,) ident(String)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))
        operator(])operator(,)
        string<delimiter(')content(attr-dstring)delimiter(')>operator(:) operator([)
            operator(()string<delimiter(')content(")delimiter(')>operator(,) ident(String)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(strings)delimiter(')>operator(\))operator(,)
            operator(()string<delimiter(")content(')delimiter(")>operator(,) ident(String)operator(\))
        operator(])operator(,)
        string<delimiter(')content(attr-sstring)delimiter(')>operator(:) operator([)
            operator(()string<delimiter(")content(')delimiter(")>operator(,) ident(String)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(strings)delimiter(')>operator(\))operator(,)
            operator(()string<delimiter(")content(')delimiter(")>operator(,) ident(String)operator(\))
        operator(])operator(,)
        string<delimiter(')content(strings)delimiter(')>operator(:) operator([)
            operator(()string<delimiter(')content([^")char(\\')content($]+)delimiter(')>operator(,) ident(String)operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(variable)delimiter(')>operator(\))
        operator(])operator(,)
        string<delimiter(')content(variable)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content((?<!)content(\\$)content(\)()content(\\$)content(\\{)content(\)(.+?\)()content(\\})content(\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Comment)operator(.)ident(Preproc)operator(,) ident(using)operator(()ident(PythonLexer)operator(\))operator(,) ident(Comment)operator(.)ident(Preproc)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((?<!)content(\\$)content(\)()content(\\$)content(\)([a-zA-Z_][a-zA-Z0-9_)content(\\.)content(]*\))delimiter(')>operator(,)
             ident(Name)operator(.)ident(Variable)operator(\))operator(,)
        operator(])
    operator(})


keyword(class) class(HtmlGenshiLexer)operator(()ident(DelegatingLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    A lexer that highlights `genshi <http://genshi.edgewall.org/>`_ and)content(
)content(    `kid <http://kid-templating.org/>`_ kid HTML templates.)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(HTML+Genshi)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(html+genshi)delimiter(')>operator(,) string<delimiter(')content(html+kid)delimiter(')>operator(])
    ident(alias_filenames) operator(=) operator([)string<delimiter(')content(*.html)delimiter(')>operator(,) string<delimiter(')content(*.htm)delimiter(')>operator(,) string<delimiter(')content(*.xhtml)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(text/html+genshi)delimiter(')>operator(])

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))operator(:)
        predefined(super)operator(()ident(HtmlGenshiLexer)operator(,) predefined_constant(self)operator(\))operator(.)ident(__init__)operator(()ident(HtmlLexer)operator(,) ident(GenshiMarkupLexer)operator(,)
                                              operator(**)ident(options)operator(\))

    keyword(def) method(analyse_text)operator(()ident(text)operator(\))operator(:)
        ident(rv) operator(=) float(0.0)
        keyword(if) ident(re)operator(.)ident(search)operator(()string<delimiter(')content(\\$)content(\\{)content(.*?)content(\\})delimiter(')>operator(,) ident(text)operator(\)) keyword(is) keyword(not) predefined_constant(None)operator(:)
            ident(rv) operator(+=) float(0.2)
        keyword(if) ident(re)operator(.)ident(search)operator(()string<delimiter(')content(py:(.*?\)=[")char(\\')content(])delimiter(')>operator(,) ident(text)operator(\)) keyword(is) keyword(not) predefined_constant(None)operator(:)
            ident(rv) operator(+=) float(0.2)
        keyword(return) ident(rv) operator(+) ident(HtmlLexer)operator(.)ident(analyse_text)operator(()ident(text)operator(\)) operator(-) float(0.01)


keyword(class) class(GenshiLexer)operator(()ident(DelegatingLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    A lexer that highlights `genshi <http://genshi.edgewall.org/>`_ and)content(
)content(    `kid <http://kid-templating.org/>`_ kid XML templates.)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(Genshi)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(genshi)delimiter(')>operator(,) string<delimiter(')content(kid)delimiter(')>operator(,) string<delimiter(')content(xml+genshi)delimiter(')>operator(,) string<delimiter(')content(xml+kid)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.kid)delimiter(')>operator(])
    ident(alias_filenames) operator(=) operator([)string<delimiter(')content(*.xml)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(application/x-genshi)delimiter(')>operator(,) string<delimiter(')content(application/x-kid)delimiter(')>operator(])

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))operator(:)
        predefined(super)operator(()ident(GenshiLexer)operator(,) predefined_constant(self)operator(\))operator(.)ident(__init__)operator(()ident(XmlLexer)operator(,) ident(GenshiMarkupLexer)operator(,)
                                          operator(**)ident(options)operator(\))

    keyword(def) method(analyse_text)operator(()ident(text)operator(\))operator(:)
        ident(rv) operator(=) float(0.0)
        keyword(if) ident(re)operator(.)ident(search)operator(()string<delimiter(')content(\\$)content(\\{)content(.*?)content(\\})delimiter(')>operator(,) ident(text)operator(\)) keyword(is) keyword(not) predefined_constant(None)operator(:)
            ident(rv) operator(+=) float(0.2)
        keyword(if) ident(re)operator(.)ident(search)operator(()string<delimiter(')content(py:(.*?\)=[")char(\\')content(])delimiter(')>operator(,) ident(text)operator(\)) keyword(is) keyword(not) predefined_constant(None)operator(:)
            ident(rv) operator(+=) float(0.2)
        keyword(return) ident(rv) operator(+) ident(XmlLexer)operator(.)ident(analyse_text)operator(()ident(text)operator(\)) operator(-) float(0.01)


keyword(class) class(JavascriptGenshiLexer)operator(()ident(DelegatingLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    A lexer that highlights javascript code in genshi text templates.)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(JavaScript+Genshi Text)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(js+genshitext)delimiter(')>operator(,) string<delimiter(')content(js+genshi)delimiter(')>operator(,) string<delimiter(')content(javascript+genshitext)delimiter(')>operator(,)
               string<delimiter(')content(javascript+genshi)delimiter(')>operator(])
    ident(alias_filenames) operator(=) operator([)string<delimiter(')content(*.js)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(application/x-javascript+genshi)delimiter(')>operator(,)
                 string<delimiter(')content(text/x-javascript+genshi)delimiter(')>operator(,)
                 string<delimiter(')content(text/javascript+genshi)delimiter(')>operator(])

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))operator(:)
        predefined(super)operator(()ident(JavascriptGenshiLexer)operator(,) predefined_constant(self)operator(\))operator(.)ident(__init__)operator(()ident(JavascriptLexer)operator(,)
                                                    ident(GenshiTextLexer)operator(,)
                                                    operator(**)ident(options)operator(\))

    keyword(def) method(analyse_text)operator(()ident(text)operator(\))operator(:)
        keyword(return) ident(GenshiLexer)operator(.)ident(analyse_text)operator(()ident(text)operator(\)) operator(-) float(0.05)


keyword(class) class(CssGenshiLexer)operator(()ident(DelegatingLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    A lexer that highlights CSS definitions in genshi text templates.)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(CSS+Genshi Text)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(css+genshitext)delimiter(')>operator(,) string<delimiter(')content(css+genshi)delimiter(')>operator(])
    ident(alias_filenames) operator(=) operator([)string<delimiter(')content(*.css)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(text/css+genshi)delimiter(')>operator(])

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))operator(:)
        predefined(super)operator(()ident(CssGenshiLexer)operator(,) predefined_constant(self)operator(\))operator(.)ident(__init__)operator(()ident(CssLexer)operator(,) ident(GenshiTextLexer)operator(,)
                                             operator(**)ident(options)operator(\))

    keyword(def) method(analyse_text)operator(()ident(text)operator(\))operator(:)
        keyword(return) ident(GenshiLexer)operator(.)ident(analyse_text)operator(()ident(text)operator(\)) operator(-) float(0.05)


keyword(class) class(RhtmlLexer)operator(()ident(DelegatingLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Subclass of the ERB lexer that highlights the unlexed data with the)content(
)content(    html lexer.)content(
)content(
)content(    Nested Javascript and CSS is highlighted too.)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(RHTML)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(rhtml)delimiter(')>operator(,) string<delimiter(')content(html+erb)delimiter(')>operator(,) string<delimiter(')content(html+ruby)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.rhtml)delimiter(')>operator(])
    ident(alias_filenames) operator(=) operator([)string<delimiter(')content(*.html)delimiter(')>operator(,) string<delimiter(')content(*.htm)delimiter(')>operator(,) string<delimiter(')content(*.xhtml)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(text/html+ruby)delimiter(')>operator(])

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))operator(:)
        predefined(super)operator(()ident(RhtmlLexer)operator(,) predefined_constant(self)operator(\))operator(.)ident(__init__)operator(()ident(HtmlLexer)operator(,) ident(ErbLexer)operator(,) operator(**)ident(options)operator(\))

    keyword(def) method(analyse_text)operator(()ident(text)operator(\))operator(:)
        ident(rv) operator(=) ident(ErbLexer)operator(.)ident(analyse_text)operator(()ident(text)operator(\)) operator(-) float(0.01)
        keyword(if) ident(html_doctype_matches)operator(()ident(text)operator(\))operator(:)
            comment(# one more than the XmlErbLexer returns)
            ident(rv) operator(+=) float(0.5)
        keyword(return) ident(rv)


keyword(class) class(XmlErbLexer)operator(()ident(DelegatingLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Subclass of `ErbLexer` which highlights data outside preprocessor)content(
)content(    directives with the `XmlLexer`.)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(XML+Ruby)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(xml+erb)delimiter(')>operator(,) string<delimiter(')content(xml+ruby)delimiter(')>operator(])
    ident(alias_filenames) operator(=) operator([)string<delimiter(')content(*.xml)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(application/xml+ruby)delimiter(')>operator(])

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))operator(:)
        predefined(super)operator(()ident(XmlErbLexer)operator(,) predefined_constant(self)operator(\))operator(.)ident(__init__)operator(()ident(XmlLexer)operator(,) ident(ErbLexer)operator(,) operator(**)ident(options)operator(\))

    keyword(def) method(analyse_text)operator(()ident(text)operator(\))operator(:)
        ident(rv) operator(=) ident(ErbLexer)operator(.)ident(analyse_text)operator(()ident(text)operator(\)) operator(-) float(0.01)
        keyword(if) ident(looks_like_xml)operator(()ident(text)operator(\))operator(:)
            ident(rv) operator(+=) float(0.4)
        keyword(return) ident(rv)


keyword(class) class(CssErbLexer)operator(()ident(DelegatingLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Subclass of `ErbLexer` which highlights unlexed data with the `CssLexer`.)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(CSS+Ruby)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(css+erb)delimiter(')>operator(,) string<delimiter(')content(css+ruby)delimiter(')>operator(])
    ident(alias_filenames) operator(=) operator([)string<delimiter(')content(*.css)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(text/css+ruby)delimiter(')>operator(])

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))operator(:)
        predefined(super)operator(()ident(CssErbLexer)operator(,) predefined_constant(self)operator(\))operator(.)ident(__init__)operator(()ident(CssLexer)operator(,) ident(ErbLexer)operator(,) operator(**)ident(options)operator(\))

    keyword(def) method(analyse_text)operator(()ident(text)operator(\))operator(:)
        keyword(return) ident(ErbLexer)operator(.)ident(analyse_text)operator(()ident(text)operator(\)) operator(-) float(0.05)


keyword(class) class(JavascriptErbLexer)operator(()ident(DelegatingLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Subclass of `ErbLexer` which highlights unlexed data with the)content(
)content(    `JavascriptLexer`.)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(JavaScript+Ruby)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(js+erb)delimiter(')>operator(,) string<delimiter(')content(javascript+erb)delimiter(')>operator(,) string<delimiter(')content(js+ruby)delimiter(')>operator(,) string<delimiter(')content(javascript+ruby)delimiter(')>operator(])
    ident(alias_filenames) operator(=) operator([)string<delimiter(')content(*.js)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(application/x-javascript+ruby)delimiter(')>operator(,)
                 string<delimiter(')content(text/x-javascript+ruby)delimiter(')>operator(,)
                 string<delimiter(')content(text/javascript+ruby)delimiter(')>operator(])

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))operator(:)
        predefined(super)operator(()ident(JavascriptErbLexer)operator(,) predefined_constant(self)operator(\))operator(.)ident(__init__)operator(()ident(JavascriptLexer)operator(,) ident(ErbLexer)operator(,)
                                                 operator(**)ident(options)operator(\))

    keyword(def) method(analyse_text)operator(()ident(text)operator(\))operator(:)
        keyword(return) ident(ErbLexer)operator(.)ident(analyse_text)operator(()ident(text)operator(\)) operator(-) float(0.05)


keyword(class) class(HtmlPhpLexer)operator(()ident(DelegatingLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Subclass of `PhpLexer` that highlights unhandled data with the `HtmlLexer`.)content(
)content(
)content(    Nested Javascript and CSS is highlighted too.)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(HTML+PHP)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(html+php)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.phtml)delimiter(')>operator(])
    ident(alias_filenames) operator(=) operator([)string<delimiter(')content(*.php)delimiter(')>operator(,) string<delimiter(')content(*.html)delimiter(')>operator(,) string<delimiter(')content(*.htm)delimiter(')>operator(,) string<delimiter(')content(*.xhtml)delimiter(')>operator(,)
                       string<delimiter(')content(*.php[345])delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(application/x-php)delimiter(')>operator(,)
                 string<delimiter(')content(application/x-httpd-php)delimiter(')>operator(,) string<delimiter(')content(application/x-httpd-php3)delimiter(')>operator(,)
                 string<delimiter(')content(application/x-httpd-php4)delimiter(')>operator(,) string<delimiter(')content(application/x-httpd-php5)delimiter(')>operator(])

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))operator(:)
        predefined(super)operator(()ident(HtmlPhpLexer)operator(,) predefined_constant(self)operator(\))operator(.)ident(__init__)operator(()ident(HtmlLexer)operator(,) ident(PhpLexer)operator(,) operator(**)ident(options)operator(\))

    keyword(def) method(analyse_text)operator(()ident(text)operator(\))operator(:)
        ident(rv) operator(=) ident(PhpLexer)operator(.)ident(analyse_text)operator(()ident(text)operator(\)) operator(-) float(0.01)
        keyword(if) ident(html_doctype_matches)operator(()ident(text)operator(\))operator(:)
            ident(rv) operator(+=) float(0.5)
        keyword(return) ident(rv)


keyword(class) class(XmlPhpLexer)operator(()ident(DelegatingLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Subclass of `PhpLexer` that higlights unhandled data with the `XmlLexer`.)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(XML+PHP)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(xml+php)delimiter(')>operator(])
    ident(alias_filenames) operator(=) operator([)string<delimiter(')content(*.xml)delimiter(')>operator(,) string<delimiter(')content(*.php)delimiter(')>operator(,) string<delimiter(')content(*.php[345])delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(application/xml+php)delimiter(')>operator(])

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))operator(:)
        predefined(super)operator(()ident(XmlPhpLexer)operator(,) predefined_constant(self)operator(\))operator(.)ident(__init__)operator(()ident(XmlLexer)operator(,) ident(PhpLexer)operator(,) operator(**)ident(options)operator(\))

    keyword(def) method(analyse_text)operator(()ident(text)operator(\))operator(:)
        ident(rv) operator(=) ident(PhpLexer)operator(.)ident(analyse_text)operator(()ident(text)operator(\)) operator(-) float(0.01)
        keyword(if) ident(looks_like_xml)operator(()ident(text)operator(\))operator(:)
            ident(rv) operator(+=) float(0.4)
        keyword(return) ident(rv)


keyword(class) class(CssPhpLexer)operator(()ident(DelegatingLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Subclass of `PhpLexer` which highlights unmatched data with the `CssLexer`.)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(CSS+PHP)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(css+php)delimiter(')>operator(])
    ident(alias_filenames) operator(=) operator([)string<delimiter(')content(*.css)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(text/css+php)delimiter(')>operator(])

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))operator(:)
        predefined(super)operator(()ident(CssPhpLexer)operator(,) predefined_constant(self)operator(\))operator(.)ident(__init__)operator(()ident(CssLexer)operator(,) ident(PhpLexer)operator(,) operator(**)ident(options)operator(\))

    keyword(def) method(analyse_text)operator(()ident(text)operator(\))operator(:)
        keyword(return) ident(PhpLexer)operator(.)ident(analyse_text)operator(()ident(text)operator(\)) operator(-) float(0.05)


keyword(class) class(JavascriptPhpLexer)operator(()ident(DelegatingLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Subclass of `PhpLexer` which highlights unmatched data with the)content(
)content(    `JavascriptLexer`.)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(JavaScript+PHP)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(js+php)delimiter(')>operator(,) string<delimiter(')content(javascript+php)delimiter(')>operator(])
    ident(alias_filenames) operator(=) operator([)string<delimiter(')content(*.js)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(application/x-javascript+php)delimiter(')>operator(,)
                 string<delimiter(')content(text/x-javascript+php)delimiter(')>operator(,)
                 string<delimiter(')content(text/javascript+php)delimiter(')>operator(])

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))operator(:)
        predefined(super)operator(()ident(JavascriptPhpLexer)operator(,) predefined_constant(self)operator(\))operator(.)ident(__init__)operator(()ident(JavascriptLexer)operator(,) ident(PhpLexer)operator(,)
                                                 operator(**)ident(options)operator(\))

    keyword(def) method(analyse_text)operator(()ident(text)operator(\))operator(:)
        keyword(return) ident(PhpLexer)operator(.)ident(analyse_text)operator(()ident(text)operator(\))


keyword(class) class(HtmlSmartyLexer)operator(()ident(DelegatingLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Subclass of the `SmartyLexer` that highighlights unlexed data with the)content(
)content(    `HtmlLexer`.)content(
)content(
)content(    Nested Javascript and CSS is highlighted too.)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(HTML+Smarty)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(html+smarty)delimiter(')>operator(])
    ident(alias_filenames) operator(=) operator([)string<delimiter(')content(*.html)delimiter(')>operator(,) string<delimiter(')content(*.htm)delimiter(')>operator(,) string<delimiter(')content(*.xhtml)delimiter(')>operator(,) string<delimiter(')content(*.tpl)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(text/html+smarty)delimiter(')>operator(])

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))operator(:)
        predefined(super)operator(()ident(HtmlSmartyLexer)operator(,) predefined_constant(self)operator(\))operator(.)ident(__init__)operator(()ident(HtmlLexer)operator(,) ident(SmartyLexer)operator(,) operator(**)ident(options)operator(\))

    keyword(def) method(analyse_text)operator(()ident(text)operator(\))operator(:)
        ident(rv) operator(=) ident(SmartyLexer)operator(.)ident(analyse_text)operator(()ident(text)operator(\)) operator(-) float(0.01)
        keyword(if) ident(html_doctype_matches)operator(()ident(text)operator(\))operator(:)
            ident(rv) operator(+=) float(0.5)
        keyword(return) ident(rv)


keyword(class) class(XmlSmartyLexer)operator(()ident(DelegatingLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Subclass of the `SmartyLexer` that highlights unlexed data with the)content(
)content(    `XmlLexer`.)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(XML+Smarty)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(xml+smarty)delimiter(')>operator(])
    ident(alias_filenames) operator(=) operator([)string<delimiter(')content(*.xml)delimiter(')>operator(,) string<delimiter(')content(*.tpl)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(application/xml+smarty)delimiter(')>operator(])

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))operator(:)
        predefined(super)operator(()ident(XmlSmartyLexer)operator(,) predefined_constant(self)operator(\))operator(.)ident(__init__)operator(()ident(XmlLexer)operator(,) ident(SmartyLexer)operator(,) operator(**)ident(options)operator(\))

    keyword(def) method(analyse_text)operator(()ident(text)operator(\))operator(:)
        ident(rv) operator(=) ident(SmartyLexer)operator(.)ident(analyse_text)operator(()ident(text)operator(\)) operator(-) float(0.01)
        keyword(if) ident(looks_like_xml)operator(()ident(text)operator(\))operator(:)
            ident(rv) operator(+=) float(0.4)
        keyword(return) ident(rv)


keyword(class) class(CssSmartyLexer)operator(()ident(DelegatingLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Subclass of the `SmartyLexer` that highlights unlexed data with the)content(
)content(    `CssLexer`.)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(CSS+Smarty)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(css+smarty)delimiter(')>operator(])
    ident(alias_filenames) operator(=) operator([)string<delimiter(')content(*.css)delimiter(')>operator(,) string<delimiter(')content(*.tpl)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(text/css+smarty)delimiter(')>operator(])

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))operator(:)
        predefined(super)operator(()ident(CssSmartyLexer)operator(,) predefined_constant(self)operator(\))operator(.)ident(__init__)operator(()ident(CssLexer)operator(,) ident(SmartyLexer)operator(,) operator(**)ident(options)operator(\))

    keyword(def) method(analyse_text)operator(()ident(text)operator(\))operator(:)
        keyword(return) ident(SmartyLexer)operator(.)ident(analyse_text)operator(()ident(text)operator(\)) operator(-) float(0.05)


keyword(class) class(JavascriptSmartyLexer)operator(()ident(DelegatingLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Subclass of the `SmartyLexer` that highlights unlexed data with the)content(
)content(    `JavascriptLexer`.)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(JavaScript+Smarty)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(js+smarty)delimiter(')>operator(,) string<delimiter(')content(javascript+smarty)delimiter(')>operator(])
    ident(alias_filenames) operator(=) operator([)string<delimiter(')content(*.js)delimiter(')>operator(,) string<delimiter(')content(*.tpl)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(application/x-javascript+smarty)delimiter(')>operator(,)
                 string<delimiter(')content(text/x-javascript+smarty)delimiter(')>operator(,)
                 string<delimiter(')content(text/javascript+smarty)delimiter(')>operator(])

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))operator(:)
        predefined(super)operator(()ident(JavascriptSmartyLexer)operator(,) predefined_constant(self)operator(\))operator(.)ident(__init__)operator(()ident(JavascriptLexer)operator(,) ident(SmartyLexer)operator(,)
                                                    operator(**)ident(options)operator(\))

    keyword(def) method(analyse_text)operator(()ident(text)operator(\))operator(:)
        keyword(return) ident(SmartyLexer)operator(.)ident(analyse_text)operator(()ident(text)operator(\)) operator(-) float(0.05)


keyword(class) class(HtmlDjangoLexer)operator(()ident(DelegatingLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Subclass of the `DjangoLexer` that highighlights unlexed data with the)content(
)content(    `HtmlLexer`.)content(
)content(
)content(    Nested Javascript and CSS is highlighted too.)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(HTML+Django/Jinja)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(html+django)delimiter(')>operator(,) string<delimiter(')content(html+jinja)delimiter(')>operator(])
    ident(alias_filenames) operator(=) operator([)string<delimiter(')content(*.html)delimiter(')>operator(,) string<delimiter(')content(*.htm)delimiter(')>operator(,) string<delimiter(')content(*.xhtml)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(text/html+django)delimiter(')>operator(,) string<delimiter(')content(text/html+jinja)delimiter(')>operator(])

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))operator(:)
        predefined(super)operator(()ident(HtmlDjangoLexer)operator(,) predefined_constant(self)operator(\))operator(.)ident(__init__)operator(()ident(HtmlLexer)operator(,) ident(DjangoLexer)operator(,) operator(**)ident(options)operator(\))

    keyword(def) method(analyse_text)operator(()ident(text)operator(\))operator(:)
        ident(rv) operator(=) ident(DjangoLexer)operator(.)ident(analyse_text)operator(()ident(text)operator(\)) operator(-) float(0.01)
        keyword(if) ident(html_doctype_matches)operator(()ident(text)operator(\))operator(:)
            ident(rv) operator(+=) float(0.5)
        keyword(return) ident(rv)


keyword(class) class(XmlDjangoLexer)operator(()ident(DelegatingLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Subclass of the `DjangoLexer` that highlights unlexed data with the)content(
)content(    `XmlLexer`.)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(XML+Django/Jinja)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(xml+django)delimiter(')>operator(,) string<delimiter(')content(xml+jinja)delimiter(')>operator(])
    ident(alias_filenames) operator(=) operator([)string<delimiter(')content(*.xml)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(application/xml+django)delimiter(')>operator(,) string<delimiter(')content(application/xml+jinja)delimiter(')>operator(])

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))operator(:)
        predefined(super)operator(()ident(XmlDjangoLexer)operator(,) predefined_constant(self)operator(\))operator(.)ident(__init__)operator(()ident(XmlLexer)operator(,) ident(DjangoLexer)operator(,) operator(**)ident(options)operator(\))

    keyword(def) method(analyse_text)operator(()ident(text)operator(\))operator(:)
        ident(rv) operator(=) ident(DjangoLexer)operator(.)ident(analyse_text)operator(()ident(text)operator(\)) operator(-) float(0.01)
        keyword(if) ident(looks_like_xml)operator(()ident(text)operator(\))operator(:)
            ident(rv) operator(+=) float(0.4)
        keyword(return) ident(rv)


keyword(class) class(CssDjangoLexer)operator(()ident(DelegatingLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Subclass of the `DjangoLexer` that highlights unlexed data with the)content(
)content(    `CssLexer`.)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(CSS+Django/Jinja)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(css+django)delimiter(')>operator(,) string<delimiter(')content(css+jinja)delimiter(')>operator(])
    ident(alias_filenames) operator(=) operator([)string<delimiter(')content(*.css)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(text/css+django)delimiter(')>operator(,) string<delimiter(')content(text/css+jinja)delimiter(')>operator(])

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))operator(:)
        predefined(super)operator(()ident(CssDjangoLexer)operator(,) predefined_constant(self)operator(\))operator(.)ident(__init__)operator(()ident(CssLexer)operator(,) ident(DjangoLexer)operator(,) operator(**)ident(options)operator(\))

    keyword(def) method(analyse_text)operator(()ident(text)operator(\))operator(:)
        keyword(return) ident(DjangoLexer)operator(.)ident(analyse_text)operator(()ident(text)operator(\)) operator(-) float(0.05)


keyword(class) class(JavascriptDjangoLexer)operator(()ident(DelegatingLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Subclass of the `DjangoLexer` that highlights unlexed data with the)content(
)content(    `JavascriptLexer`.)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(JavaScript+Django/Jinja)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(js+django)delimiter(')>operator(,) string<delimiter(')content(javascript+django)delimiter(')>operator(,)
               string<delimiter(')content(js+jinja)delimiter(')>operator(,) string<delimiter(')content(javascript+jinja)delimiter(')>operator(])
    ident(alias_filenames) operator(=) operator([)string<delimiter(')content(*.js)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(application/x-javascript+django)delimiter(')>operator(,)
                 string<delimiter(')content(application/x-javascript+jinja)delimiter(')>operator(,)
                 string<delimiter(')content(text/x-javascript+django)delimiter(')>operator(,)
                 string<delimiter(')content(text/x-javascript+jinja)delimiter(')>operator(,)
                 string<delimiter(')content(text/javascript+django)delimiter(')>operator(,)
                 string<delimiter(')content(text/javascript+jinja)delimiter(')>operator(])

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))operator(:)
        predefined(super)operator(()ident(JavascriptDjangoLexer)operator(,) predefined_constant(self)operator(\))operator(.)ident(__init__)operator(()ident(JavascriptLexer)operator(,) ident(DjangoLexer)operator(,)
                                                    operator(**)ident(options)operator(\))

    keyword(def) method(analyse_text)operator(()ident(text)operator(\))operator(:)
        keyword(return) ident(DjangoLexer)operator(.)ident(analyse_text)operator(()ident(text)operator(\)) operator(-) float(0.05)


keyword(class) class(JspRootLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Base for the `JspLexer`. Yields `Token.Other` for area outside of)content(
)content(    JSP tags.)content(
)content(
)content(    *New in Pygments 0.7.*)content(
)content(    )delimiter(""")>

    ident(tokens) operator(=) operator({)
        string<delimiter(')content(root)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(<%)content(\\S)content(?)delimiter(')>operator(,) ident(Keyword)operator(,) string<delimiter(')content(sec)delimiter(')>operator(\))operator(,)
            comment(# FIXME: I want to make these keywords but still parse attributes.)
            operator(()string<modifier(r)delimiter(')content(</?jsp:(forward|getProperty|include|plugin|setProperty|useBean\).*?>)delimiter(')>operator(,)
             ident(Keyword)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([^<]+)delimiter(')>operator(,) ident(Other)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(<)delimiter(')>operator(,) ident(Other)operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(sec)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(%>)delimiter(')>operator(,) ident(Keyword)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            comment(# note: '\\w\\W' != '.' without DOTALL.)
            operator(()string<modifier(r)delimiter(')content([)content(\\w)content(\\W)content(]+?(?=%>|)content(\\Z)content(\))delimiter(')>operator(,) ident(using)operator(()ident(JavaLexer)operator(\))operator(\))operator(,)
        operator(])operator(,)
    operator(})


keyword(class) class(JspLexer)operator(()ident(DelegatingLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Lexer for Java Server Pages.)content(
)content(
)content(    *New in Pygments 0.7.*)content(
)content(    )delimiter(""")>
    ident(name) operator(=) string<delimiter(')content(Java Server Page)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(jsp)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.jsp)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(application/x-jsp)delimiter(')>operator(])

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))operator(:)
        predefined(super)operator(()ident(JspLexer)operator(,) predefined_constant(self)operator(\))operator(.)ident(__init__)operator(()ident(XmlLexer)operator(,) ident(JspRootLexer)operator(,) operator(**)ident(options)operator(\))

    keyword(def) method(analyse_text)operator(()ident(text)operator(\))operator(:)
        ident(rv) operator(=) ident(JavaLexer)operator(.)ident(analyse_text)operator(()ident(text)operator(\)) operator(-) float(0.01)
        keyword(if) ident(looks_like_xml)operator(()ident(text)operator(\))operator(:)
            ident(rv) operator(+=) float(0.4)
        keyword(if) string<delimiter(')content(<%)delimiter(')> keyword(in) ident(text) keyword(and) string<delimiter(')content(%>)delimiter(')> keyword(in) ident(text)operator(:)
            ident(rv) operator(+=) float(0.1)
        keyword(return) ident(rv)


keyword(class) class(EvoqueLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    For files using the Evoque templating system.)content(
)content(
)content(    *New in Pygments 1.1.*)content(
)content(    )delimiter(""")>
    ident(name) operator(=) string<delimiter(')content(Evoque)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(evoque)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.evoque)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(application/x-evoque)delimiter(')>operator(])

    ident(flags) operator(=) ident(re)operator(.)ident(DOTALL)

    ident(tokens) operator(=) operator({)
        string<delimiter(')content(root)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content([^#$]+)delimiter(')>operator(,) ident(Other)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(#)content(\\[)delimiter(')>operator(,) ident(Comment)operator(.)ident(Multiline)operator(,) string<delimiter(')content(comment)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\$)content(\\$)delimiter(')>operator(,) ident(Other)operator(\))operator(,)
            comment(# svn keywords)
            operator(()string<modifier(r)delimiter(')content(\\$)content(\\w)content(+:[^$)content(\\n)content(]*)content(\\$)delimiter(')>operator(,) ident(Comment)operator(.)ident(Multiline)operator(\))operator(,)
            comment(# directives: begin, end)
            operator(()string<modifier(r)delimiter(')content(()content(\\$)content(\)(begin|end\)()content(\\{)content((%\)?\)(.*?\)((?(4\)%\))content(\\})content(\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Punctuation)operator(,) ident(Name)operator(.)ident(Builtin)operator(,) ident(Punctuation)operator(,) predefined_constant(None)operator(,)
                      ident(String)operator(,) ident(Punctuation)operator(,) predefined_constant(None)operator(\))operator(\))operator(,)
            comment(# directives: evoque, overlay)
            comment(# see doc for handling first name arg: /directives/evoque/)
            comment(#+ minor inconsistency: the "name" in e.g. $overlay{name=site_base})
            comment(# should be using(PythonLexer\), not passed out as String)
            operator(()string<modifier(r)delimiter(')content(()content(\\$)content(\)(evoque|overlay\)()content(\\{)content((%\)?\)()content(\\s)content(*[#)content(\\w)content(\\-)content(")content(\\')content(.]+[^=,%}]+?\)?)delimiter(')>
             string<modifier(r)delimiter(')content((.*?\)((?(4\)%\))content(\\})content(\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Punctuation)operator(,) ident(Name)operator(.)ident(Builtin)operator(,) ident(Punctuation)operator(,) predefined_constant(None)operator(,)
                      ident(String)operator(,) ident(using)operator(()ident(PythonLexer)operator(\))operator(,) ident(Punctuation)operator(,) predefined_constant(None)operator(\))operator(\))operator(,)
            comment(# directives: if, for, prefer, test)
            operator(()string<modifier(r)delimiter(')content(()content(\\$)content(\)()content(\\w)content(+\)()content(\\{)content((%\)?\)(.*?\)((?(4\)%\))content(\\})content(\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Punctuation)operator(,) ident(Name)operator(.)ident(Builtin)operator(,) ident(Punctuation)operator(,) predefined_constant(None)operator(,)
                      ident(using)operator(()ident(PythonLexer)operator(\))operator(,) ident(Punctuation)operator(,) predefined_constant(None)operator(\))operator(\))operator(,)
            comment(# directive clauses (no {} expression\))
            operator(()string<modifier(r)delimiter(')content(()content(\\$)content(\)(else|rof|fi\))delimiter(')>operator(,) ident(bygroups)operator(()ident(Punctuation)operator(,) ident(Name)operator(.)ident(Builtin)operator(\))operator(\))operator(,)
            comment(# expressions)
            operator(()string<modifier(r)delimiter(')content(()content(\\$)content(\\{)content((%\)?\)(.*?\)((!\)(.*?\)\)?((?(2\)%\))content(\\})content(\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Punctuation)operator(,) predefined_constant(None)operator(,) ident(using)operator(()ident(PythonLexer)operator(\))operator(,)
                      ident(Name)operator(.)ident(Builtin)operator(,) predefined_constant(None)operator(,) predefined_constant(None)operator(,) ident(Punctuation)operator(,) predefined_constant(None)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(#)delimiter(')>operator(,) ident(Other)operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(comment)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content([^)content(\\])content(#])delimiter(')>operator(,) ident(Comment)operator(.)ident(Multiline)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(#)content(\\[)delimiter(')>operator(,) ident(Comment)operator(.)ident(Multiline)operator(,) string<delimiter(')content(#push)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\])content(#)delimiter(')>operator(,) ident(Comment)operator(.)ident(Multiline)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([)content(\\])content(#])delimiter(')>operator(,) ident(Comment)operator(.)ident(Multiline)operator(\))
        operator(])operator(,)
    operator(})

keyword(class) class(EvoqueHtmlLexer)operator(()ident(DelegatingLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Subclass of the `EvoqueLexer` that highlights unlexed data with the)content(
)content(    `HtmlLexer`.)content(
)content(
)content(    *New in Pygments 1.1.*)content(
)content(    )delimiter(""")>
    ident(name) operator(=) string<delimiter(')content(HTML+Evoque)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(html+evoque)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.html)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(text/html+evoque)delimiter(')>operator(])

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))operator(:)
        predefined(super)operator(()ident(EvoqueHtmlLexer)operator(,) predefined_constant(self)operator(\))operator(.)ident(__init__)operator(()ident(HtmlLexer)operator(,) ident(EvoqueLexer)operator(,)
                                              operator(**)ident(options)operator(\))

keyword(class) class(EvoqueXmlLexer)operator(()ident(DelegatingLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Subclass of the `EvoqueLexer` that highlights unlexed data with the)content(
)content(    `XmlLexer`.)content(
)content(
)content(    *New in Pygments 1.1.*)content(
)content(    )delimiter(""")>
    ident(name) operator(=) string<delimiter(')content(XML+Evoque)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(xml+evoque)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.xml)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(application/xml+evoque)delimiter(')>operator(])

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))operator(:)
        predefined(super)operator(()ident(EvoqueXmlLexer)operator(,) predefined_constant(self)operator(\))operator(.)ident(__init__)operator(()ident(XmlLexer)operator(,) ident(EvoqueLexer)operator(,)
                                             operator(**)ident(options)operator(\))
comment(# -*- coding: utf-8 -*-)
docstring<delimiter(""")content(
)content(    pygments.lexers.text)content(
)content(    ~~~~~~~~~~~~~~~~~~~~)content(
)content(
)content(    Lexers for non-source code file types.)content(
)content(
)content(    :copyright: Copyright 2006-2009 by the Pygments team, see AUTHORS.)content(
)content(    :license: BSD, see LICENSE for details.)content(
)delimiter(""")>

keyword(import) include(re)
keyword(try)operator(:)
    predefined(set)
keyword(except) exception(NameError)operator(:)
    keyword(from) include(sets) keyword(import) include(Set) keyword(as) ident(set)
keyword(from) include(bisect) keyword(import) include(bisect)

keyword(from) include(pygments.lexer) keyword(import) include(Lexer)operator(,) include(LexerContext)operator(,) include(RegexLexer)operator(,) include(ExtendedRegexLexer)operator(,) \
     include(bygroups)operator(,) include(include)operator(,) include(using)operator(,) include(this)operator(,) include(do_insertions)
keyword(from) include(pygments.token) keyword(import) include(Punctuation)operator(,) include(Text)operator(,) include(Comment)operator(,) include(Keyword)operator(,) include(Name)operator(,) include(String)operator(,) \
     include(Generic)operator(,) include(Operator)operator(,) include(Number)operator(,) include(Whitespace)operator(,) include(Literal)
keyword(from) include(pygments.util) keyword(import) include(get_bool_opt)
keyword(from) include(pygments.lexers.other) keyword(import) include(BashLexer)

ident(__all__) operator(=) operator([)string<delimiter(')content(IniLexer)delimiter(')>operator(,) string<delimiter(')content(SourcesListLexer)delimiter(')>operator(,) string<delimiter(')content(BaseMakefileLexer)delimiter(')>operator(,)
           string<delimiter(')content(MakefileLexer)delimiter(')>operator(,) string<delimiter(')content(DiffLexer)delimiter(')>operator(,) string<delimiter(')content(IrcLogsLexer)delimiter(')>operator(,) string<delimiter(')content(TexLexer)delimiter(')>operator(,)
           string<delimiter(')content(GroffLexer)delimiter(')>operator(,) string<delimiter(')content(ApacheConfLexer)delimiter(')>operator(,) string<delimiter(')content(BBCodeLexer)delimiter(')>operator(,) string<delimiter(')content(MoinWikiLexer)delimiter(')>operator(,)
           string<delimiter(')content(RstLexer)delimiter(')>operator(,) string<delimiter(')content(VimLexer)delimiter(')>operator(,) string<delimiter(')content(GettextLexer)delimiter(')>operator(,) string<delimiter(')content(SquidConfLexer)delimiter(')>operator(,)
           string<delimiter(')content(DebianControlLexer)delimiter(')>operator(,) string<delimiter(')content(DarcsPatchLexer)delimiter(')>operator(,) string<delimiter(')content(YamlLexer)delimiter(')>operator(,)
           string<delimiter(')content(LighttpdConfLexer)delimiter(')>operator(,) string<delimiter(')content(NginxConfLexer)delimiter(')>operator(])


keyword(class) class(IniLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Lexer for configuration files in INI style.)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(INI)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(ini)delimiter(')>operator(,) string<delimiter(')content(cfg)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.ini)delimiter(')>operator(,) string<delimiter(')content(*.cfg)delimiter(')>operator(,) string<delimiter(')content(*.properties)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(text/x-ini)delimiter(')>operator(])

    ident(tokens) operator(=) operator({)
        string<delimiter(')content(root)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\s)content(+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([;#].*?$)delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\[)content(.*?)content(\\])content($)delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((.*?\)([ )content(\\t)content(]*\)(=\)([ )content(\\t)content(]*\)(.*?\)$)delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Name)operator(.)ident(Attribute)operator(,) ident(Text)operator(,) ident(Operator)operator(,) ident(Text)operator(,) ident(String)operator(\))operator(\))
        operator(])
    operator(})

    keyword(def) method(analyse_text)operator(()ident(text)operator(\))operator(:)
        ident(npos) operator(=) ident(text)operator(.)ident(find)operator(()string<delimiter(')char(\\n)delimiter(')>operator(\))
        keyword(if) ident(npos) operator(<) integer(3)operator(:)
            keyword(return) predefined_constant(False)
        keyword(return) ident(text)operator([)integer(0)operator(]) operator(==) string<delimiter(')content([)delimiter(')> keyword(and) ident(text)operator([)ident(npos)operator(-)integer(1)operator(]) operator(==) string<delimiter(')content(])delimiter(')>


keyword(class) class(SourcesListLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Lexer that highlights debian sources.list files.)content(
)content(
)content(    *New in Pygments 0.7.*)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(Debian Sourcelist)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(sourceslist)delimiter(')>operator(,) string<delimiter(')content(sources.list)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(sources.list)delimiter(')>operator(])
    ident(mimetype) operator(=) operator([)string<delimiter(')content(application/x-debian-sourceslist)delimiter(')>operator(])

    ident(tokens) operator(=) operator({)
        string<delimiter(')content(root)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\s)content(+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(#.*?$)delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(^(deb(?:-src\)?\)()content(\\s)content(+\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Keyword)operator(,) ident(Text)operator(\))operator(,) string<delimiter(')content(distribution)delimiter(')>operator(\))
        operator(])operator(,)
        string<delimiter(')content(distribution)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(#.*?$)delimiter(')>operator(,) ident(Comment)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\$)content(\\()content(ARCH)content(\\\))delimiter(')>operator(,) ident(Name)operator(.)ident(Variable)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([^)content(\\s)content($[]+)delimiter(')>operator(,) ident(String)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\[)delimiter(')>operator(,) ident(String)operator(.)ident(Other)operator(,) string<delimiter(')content(escaped-distribution)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\$)delimiter(')>operator(,) ident(String)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\s)content(+)delimiter(')>operator(,) ident(Text)operator(,) string<delimiter(')content(components)delimiter(')>operator(\))
        operator(])operator(,)
        string<delimiter(')content(escaped-distribution)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\])delimiter(')>operator(,) ident(String)operator(.)ident(Other)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\$)content(\\()content(ARCH)content(\\\))delimiter(')>operator(,) ident(Name)operator(.)ident(Variable)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([^)content(\\])content($]+)delimiter(')>operator(,) ident(String)operator(.)ident(Other)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\$)delimiter(')>operator(,) ident(String)operator(.)ident(Other)operator(\))
        operator(])operator(,)
        string<delimiter(')content(components)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(#.*?$)delimiter(')>operator(,) ident(Comment)operator(,) string<delimiter(')content(#pop:2)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content($)delimiter(')>operator(,) ident(Text)operator(,) string<delimiter(')content(#pop:2)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\s)content(+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\S)content(+)delimiter(')>operator(,) ident(Keyword)operator(.)ident(Pseudo)operator(\))operator(,)
        operator(])
    operator(})

    keyword(def) method(analyse_text)operator(()ident(text)operator(\))operator(:)
        keyword(for) ident(line) keyword(in) ident(text)operator(.)ident(split)operator(()string<delimiter(')char(\\n)delimiter(')>operator(\))operator(:)
            ident(line) operator(=) ident(line)operator(.)ident(strip)operator(()operator(\))
            keyword(if) keyword(not) operator(()ident(line)operator(.)ident(startswith)operator(()string<delimiter(')content(#)delimiter(')>operator(\)) keyword(or) ident(line)operator(.)ident(startswith)operator(()string<delimiter(')content(deb )delimiter(')>operator(\)) keyword(or)
                    ident(line)operator(.)ident(startswith)operator(()string<delimiter(')content(deb-src )delimiter(')>operator(\)) keyword(or) keyword(not) ident(line)operator(\))operator(:)
                keyword(return) predefined_constant(False)
        keyword(return) predefined_constant(True)


keyword(class) class(MakefileLexer)operator(()ident(Lexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Lexer for BSD and GNU make extensions (lenient enough to handle both in)content(
)content(    the same file even\).)content(
)content(
)content(    *Rewritten in Pygments 0.10.*)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(Makefile)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(make)delimiter(')>operator(,) string<delimiter(')content(makefile)delimiter(')>operator(,) string<delimiter(')content(mf)delimiter(')>operator(,) string<delimiter(')content(bsdmake)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.mak)delimiter(')>operator(,) string<delimiter(')content(Makefile)delimiter(')>operator(,) string<delimiter(')content(makefile)delimiter(')>operator(,) string<delimiter(')content(Makefile.*)delimiter(')>operator(,) string<delimiter(')content(GNUmakefile)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(text/x-makefile)delimiter(')>operator(])

    ident(r_special) operator(=) ident(re)operator(.)ident(compile)operator(()string<modifier(r)delimiter(')content(^(?:)delimiter(')>
        comment(# BSD Make)
        string<modifier(r)delimiter(')content(\\.)content(\\s)content(*(include|undef|error|warning|if|else|elif|endif|for|endfor\)|)delimiter(')>
        comment(# GNU Make)
        string<modifier(r)delimiter(')content(\\s)content(*(ifeq|ifneq|ifdef|ifndef|else|endif|-?include|define|endef|:\)\)(?=)content(\\s)content(\))delimiter(')>operator(\))
    ident(r_comment) operator(=) ident(re)operator(.)ident(compile)operator(()string<modifier(r)delimiter(')content(^)content(\\s)content(*@?#)delimiter(')>operator(\))

    keyword(def) method(get_tokens_unprocessed)operator(()predefined_constant(self)operator(,) ident(text)operator(\))operator(:)
        ident(ins) operator(=) operator([)operator(])
        ident(lines) operator(=) ident(text)operator(.)ident(splitlines)operator(()predefined_constant(True)operator(\))
        ident(done) operator(=) string<delimiter(')delimiter(')>
        ident(lex) operator(=) ident(BaseMakefileLexer)operator(()operator(**)predefined_constant(self)operator(.)ident(options)operator(\))
        ident(backslashflag) operator(=) predefined_constant(False)
        keyword(for) ident(line) keyword(in) ident(lines)operator(:)
            keyword(if) predefined_constant(self)operator(.)ident(r_special)operator(.)ident(match)operator(()ident(line)operator(\)) keyword(or) ident(backslashflag)operator(:)
                ident(ins)operator(.)ident(append)operator(()operator(()predefined(len)operator(()ident(done)operator(\))operator(,) operator([)operator(()integer(0)operator(,) ident(Comment)operator(.)ident(Preproc)operator(,) ident(line)operator(\))operator(])operator(\))operator(\))
                ident(backslashflag) operator(=) ident(line)operator(.)ident(strip)operator(()operator(\))operator(.)ident(endswith)operator(()string<delimiter(')char(\\\\)delimiter(')>operator(\))
            keyword(elif) predefined_constant(self)operator(.)ident(r_comment)operator(.)ident(match)operator(()ident(line)operator(\))operator(:)
                ident(ins)operator(.)ident(append)operator(()operator(()predefined(len)operator(()ident(done)operator(\))operator(,) operator([)operator(()integer(0)operator(,) ident(Comment)operator(,) ident(line)operator(\))operator(])operator(\))operator(\))
            keyword(else)operator(:)
                ident(done) operator(+=) ident(line)
        keyword(for) ident(item) keyword(in) ident(do_insertions)operator(()ident(ins)operator(,) ident(lex)operator(.)ident(get_tokens_unprocessed)operator(()ident(done)operator(\))operator(\))operator(:)
            keyword(yield) ident(item)


keyword(class) class(BaseMakefileLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Lexer for simple Makefiles (no preprocessing\).)content(
)content(
)content(    *New in Pygments 0.10.*)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(Makefile)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(basemake)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)operator(])
    ident(mimetypes) operator(=) operator([)operator(])

    ident(tokens) operator(=) operator({)
        string<delimiter(')content(root)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(^(?:[)content(\\t)content( ]+.*)content(\\n)content(|)content(\\n)content(\)+)delimiter(')>operator(,) ident(using)operator(()ident(BashLexer)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\$)content(\\()content((?:.*)content(\\\\)content(\\n)content(|.*)content(\\n)content(\)+)delimiter(')>operator(,) ident(using)operator(()ident(BashLexer)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\s)content(+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(#.*?)content(\\n)delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((export\)()content(\\s)content(+\)(?=[a-zA-Z0-9_${})content(\\t)content( -]+)content(\\n)content(\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Keyword)operator(,) ident(Text)operator(\))operator(,) string<delimiter(')content(export)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(export)content(\\s)content(+)delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
            comment(# assignment)
            operator(()string<modifier(r)delimiter(')content(([a-zA-Z0-9_${}.-]+\)()content(\\s)content(*\)([!?:+]?=\)([ )content(\\t)content(]*\)((?:.*)content(\\\\)content(\\n)content(|.*)content(\\n)content(\)+\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Name)operator(.)ident(Variable)operator(,) ident(Text)operator(,) ident(Operator)operator(,) ident(Text)operator(,) ident(using)operator(()ident(BashLexer)operator(\))operator(\))operator(\))operator(,)
            comment(# strings)
            operator(()string<modifier(r)delimiter(')content("()content(\\\\)content(\\\\)content(|)content(\\\\)content("|[^"]\)*")delimiter(')>operator(,) ident(String)operator(.)ident(Double)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(")content('()content(\\\\)content(\\\\)content(|)content(\\\\)content('|[^']\)*')delimiter(")>operator(,) ident(String)operator(.)ident(Single)operator(\))operator(,)
            comment(# targets)
            operator(()string<modifier(r)delimiter(')content(([^)content(\\n)content(:]+\)(:+\)([ )content(\\t)content(]*\))delimiter(')>operator(,) ident(bygroups)operator(()ident(Name)operator(.)ident(Function)operator(,) ident(Operator)operator(,) ident(Text)operator(\))operator(,)
             string<delimiter(')content(block-header)delimiter(')>operator(\))operator(,)
            comment(# TODO: add paren handling (grr\))
        operator(])operator(,)
        string<delimiter(')content(export)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content([a-zA-Z0-9_${}-]+)delimiter(')>operator(,) ident(Name)operator(.)ident(Variable)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\n)delimiter(')>operator(,) ident(Text)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\s)content(+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(block-header)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content([^,)content(\\\\)content(\\n)content(#]+)delimiter(')>operator(,) ident(Number)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(,)delimiter(')>operator(,) ident(Punctuation)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(#.*?)content(\\n)delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\\\)content(\\n)delimiter(')>operator(,) ident(Text)operator(\))operator(,) comment(# line continuation)
            operator(()string<modifier(r)delimiter(')content(\\\\)content(.)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((?:[)content(\\t)content( ]+.*)content(\\n)content(|)content(\\n)content(\)+)delimiter(')>operator(,) ident(using)operator(()ident(BashLexer)operator(\))operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
    operator(})


keyword(class) class(DiffLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Lexer for unified or context-style diffs or patches.)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(Diff)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(diff)delimiter(')>operator(,) string<delimiter(')content(udiff)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.diff)delimiter(')>operator(,) string<delimiter(')content(*.patch)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(text/x-diff)delimiter(')>operator(,) string<delimiter(')content(text/x-patch)delimiter(')>operator(])

    ident(tokens) operator(=) operator({)
        string<delimiter(')content(root)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content( .*)content(\\n)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\+)content(.*)content(\\n)delimiter(')>operator(,) ident(Generic)operator(.)ident(Inserted)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(-.*)content(\\n)delimiter(')>operator(,) ident(Generic)operator(.)ident(Deleted)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(!.*)content(\\n)delimiter(')>operator(,) ident(Generic)operator(.)ident(Strong)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(@.*)content(\\n)delimiter(')>operator(,) ident(Generic)operator(.)ident(Subheading)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(([Ii]ndex|diff\).*)content(\\n)delimiter(')>operator(,) ident(Generic)operator(.)ident(Heading)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(=.*)content(\\n)delimiter(')>operator(,) ident(Generic)operator(.)ident(Heading)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(.*)content(\\n)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
        operator(])
    operator(})

    keyword(def) method(analyse_text)operator(()ident(text)operator(\))operator(:)
        keyword(if) ident(text)operator([)operator(:)integer(7)operator(]) operator(==) string<delimiter(')content(Index: )delimiter(')>operator(:)
            keyword(return) predefined_constant(True)
        keyword(if) ident(text)operator([)operator(:)integer(5)operator(]) operator(==) string<delimiter(')content(diff )delimiter(')>operator(:)
            keyword(return) predefined_constant(True)
        keyword(if) ident(text)operator([)operator(:)integer(4)operator(]) operator(==) string<delimiter(')content(--- )delimiter(')>operator(:)
            keyword(return) float(0.9)


ident(DPATCH_KEYWORDS) operator(=) operator([)string<delimiter(')content(hunk)delimiter(')>operator(,) string<delimiter(')content(addfile)delimiter(')>operator(,) string<delimiter(')content(adddir)delimiter(')>operator(,) string<delimiter(')content(rmfile)delimiter(')>operator(,) string<delimiter(')content(rmdir)delimiter(')>operator(,) string<delimiter(')content(move)delimiter(')>operator(,)
    string<delimiter(')content(replace)delimiter(')>operator(])

keyword(class) class(DarcsPatchLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    DarcsPatchLexer is a lexer for the various versions of the darcs patch)content(
)content(    format.  Examples of this format are derived by commands such as)content(
)content(    ``darcs annotate --patch`` and ``darcs send``.)content(
)content(
)content(    *New in Pygments 0.10.*)content(
)content(    )delimiter(""")>
    ident(name) operator(=) string<delimiter(')content(Darcs Patch)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(dpatch)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.dpatch)delimiter(')>operator(,) string<delimiter(')content(*.darcspatch)delimiter(')>operator(])

    ident(tokens) operator(=) operator({)
        string<delimiter(')content(root)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(<)delimiter(')>operator(,) ident(Operator)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(>)delimiter(')>operator(,) ident(Operator)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content({)delimiter(')>operator(,) ident(Operator)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(})delimiter(')>operator(,) ident(Operator)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(()content(\\[)content(\)((?:TAG \)?\)(.*\)()content(\\n)content(\)(.*\)()content(\\*)content(\\*)content(\)()content(\\d)content(+\)()content(\\s)content(?\)()content(\\])content(\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Operator)operator(,) ident(Keyword)operator(,) ident(Name)operator(,) ident(Text)operator(,) ident(Name)operator(,) ident(Operator)operator(,)
                      ident(Literal)operator(.)ident(Date)operator(,) ident(Text)operator(,) ident(Operator)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(()content(\\[)content(\)((?:TAG \)?\)(.*\)()content(\\n)content(\)(.*\)()content(\\*)content(\\*)content(\)()content(\\d)content(+\)()content(\\s)content(?\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Operator)operator(,) ident(Keyword)operator(,) ident(Name)operator(,) ident(Text)operator(,) ident(Name)operator(,) ident(Operator)operator(,)
                      ident(Literal)operator(.)ident(Date)operator(,) ident(Text)operator(\))operator(,) string<delimiter(')content(comment)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(New patches:)delimiter(')>operator(,) ident(Generic)operator(.)ident(Heading)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(Context:)delimiter(')>operator(,) ident(Generic)operator(.)ident(Heading)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(Patch bundle hash:)delimiter(')>operator(,) ident(Generic)operator(.)ident(Heading)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(()content(\\s)content(*\)(%s\)(.*)content(\\n)content(\))delimiter(')> operator(%) string<delimiter(')content(|)delimiter(')>operator(.)ident(join)operator(()ident(DPATCH_KEYWORDS)operator(\))operator(,)
                ident(bygroups)operator(()ident(Text)operator(,) ident(Keyword)operator(,) ident(Text)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\+)delimiter(')>operator(,) ident(Generic)operator(.)ident(Inserted)operator(,) string<delimiter(")content(insert)delimiter(")>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(-)delimiter(')>operator(,) ident(Generic)operator(.)ident(Deleted)operator(,) string<delimiter(")content(delete)delimiter(")>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(.*)content(\\n)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(comment)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content([^)content(\\])content(].*)content(\\n)delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\])delimiter(')>operator(,) ident(Operator)operator(,) string<delimiter(")content(#pop)delimiter(")>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(specialText)delimiter(')>operator(:) operator([) comment(# darcs add [_CODE_] special operators for clarity)
            operator(()string<modifier(r)delimiter(')content(\\n)delimiter(')>operator(,) ident(Text)operator(,) string<delimiter(")content(#pop)delimiter(")>operator(\))operator(,) comment(# line-based)
            operator(()string<modifier(r)delimiter(')content(\\[)content(_[^_]*_])delimiter(')>operator(,) ident(Operator)operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(insert)delimiter(')>operator(:) operator([)
            ident(include)operator(()string<delimiter(')content(specialText)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\[)delimiter(')>operator(,) ident(Generic)operator(.)ident(Inserted)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([^)content(\\n)content(\\[)content(]*)delimiter(')>operator(,) ident(Generic)operator(.)ident(Inserted)operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(delete)delimiter(')>operator(:) operator([)
            ident(include)operator(()string<delimiter(')content(specialText)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\[)delimiter(')>operator(,) ident(Generic)operator(.)ident(Deleted)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([^)content(\\n)content(\\[)content(]*)delimiter(')>operator(,) ident(Generic)operator(.)ident(Deleted)operator(\))operator(,)
        operator(])operator(,)
    operator(})


keyword(class) class(IrcLogsLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Lexer for IRC logs in *irssi*, *xchat* or *weechat* style.)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(IRC logs)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(irc)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.weechatlog)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(text/x-irclog)delimiter(')>operator(])

    ident(flags) operator(=) ident(re)operator(.)ident(VERBOSE) operator(|) ident(re)operator(.)ident(MULTILINE)
    ident(timestamp) operator(=) string<modifier(r)delimiter(""")content(
)content(        ()content(
)content(          # irssi / xchat and others)content(
)content(          (?: )content(\\[)content(|)content(\\()content(\)?                  # Opening bracket or paren for the timestamp)content(
)content(            (?:                        # Timestamp)content(
)content(                (?: (?:)content(\\d)content({1,4} [-/]?\)+ # Date as - or /-separated groups of digits)content(
)content(                 [T ]\)?                # Date/time separator: T or space)content(
)content(                (?: )content(\\d)content(?)content(\\d)content( [:.]?\)+      # Time as :/.-separated groups of 1 or 2 digits)content(
)content(            \))content(
)content(          (?: )content(\\])content(|)content(\\\))content(\)?)content(\\s)content(+               # Closing bracket or paren for the timestamp)content(
)content(        |)content(
)content(          # weechat)content(
)content(          )content(\\d)content({4})content(\\s)content(\\w)content({3})content(\\s)content(\\d)content({2})content(\\s)content(        # Date)content(
)content(          )content(\\d)content({2}:)content(\\d)content({2}:)content(\\d)content({2})content(\\s)content(+         # Time + Whitespace)content(
)content(        |)content(
)content(          # xchat)content(
)content(          )content(\\w)content({3})content(\\s)content(\\d)content({2})content(\\s)content(               # Date)content(
)content(          )content(\\d)content({2}:)content(\\d)content({2}:)content(\\d)content({2})content(\\s)content(+         # Time + Whitespace)content(
)content(        \)?)content(
)content(    )delimiter(""")>
    ident(tokens) operator(=) operator({)
        string<delimiter(')content(root)delimiter(')>operator(:) operator([)
                comment(# log start/end)
            operator(()string<modifier(r)delimiter(')content(^)content(\\*)content(\\*)content(\\*)content(\\*)content((.*\))content(\\*)content(\\*)content(\\*)content(\\*)content($)delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
            comment(# hack)
            operator(()string<delimiter(")content(^)delimiter(")> operator(+) ident(timestamp) operator(+) string<modifier(r)delimiter(')content(()content(\\s)content(*<[^>]*>)content(\\s)content(*\)$)delimiter(')>operator(,) ident(bygroups)operator(()ident(Comment)operator(.)ident(Preproc)operator(,) ident(Name)operator(.)ident(Tag)operator(\))operator(\))operator(,)
            comment(# normal msgs)
            operator(()string<delimiter(")content(^)delimiter(")> operator(+) ident(timestamp) operator(+) string<modifier(r)delimiter(""")content(
)content(                ()content(\\s)content(*<.*?>)content(\\s)content(*\)          # Nick )delimiter(""")>operator(,)
             ident(bygroups)operator(()ident(Comment)operator(.)ident(Preproc)operator(,) ident(Name)operator(.)ident(Tag)operator(\))operator(,) string<delimiter(')content(msg)delimiter(')>operator(\))operator(,)
            comment(# /me msgs)
            operator(()string<delimiter(")content(^)delimiter(")> operator(+) ident(timestamp) operator(+) string<modifier(r)delimiter(""")content(
)content(                ()content(\\s)content(*[*])content(\\s)content(+\)            # Star)content(
)content(                ([^)content(\\s)content(]+)content(\\s)content(+.*?)content(\\n)content(\)       # Nick + rest of message )delimiter(""")>operator(,)
             ident(bygroups)operator(()ident(Comment)operator(.)ident(Preproc)operator(,) ident(Keyword)operator(,) ident(Generic)operator(.)ident(Inserted)operator(\))operator(\))operator(,)
            comment(# join/part msgs)
            operator(()string<delimiter(")content(^)delimiter(")> operator(+) ident(timestamp) operator(+) string<modifier(r)delimiter(""")content(
)content(                ()content(\\s)content(*(?:)content(\\*)content({3}|<?-[!@=P]?->?\))content(\\s)content(*\)  # Star(s\) or symbols)content(
)content(                ([^)content(\\s)content(]+)content(\\s)content(+\)                     # Nick + Space)content(
)content(                (.*?)content(\\n)content(\)                         # Rest of message )delimiter(""")>operator(,)
             ident(bygroups)operator(()ident(Comment)operator(.)ident(Preproc)operator(,) ident(Keyword)operator(,) ident(String)operator(,) ident(Comment)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(")content(^.*?)content(\\n)delimiter(")>operator(,) ident(Text)operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(msg)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(")content([^)content(\\s)content(]+:(?!//\))delimiter(")>operator(,) ident(Name)operator(.)ident(Attribute)operator(\))operator(,)  comment(# Prefix)
            operator(()string<modifier(r)delimiter(")content(.*)content(\\n)delimiter(")>operator(,) ident(Text)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
    operator(})


keyword(class) class(BBCodeLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    A lexer that highlights BBCode(-like\) syntax.)content(
)content(
)content(    *New in Pygments 0.6.*)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(BBCode)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(bbcode)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(text/x-bbcode)delimiter(')>operator(])

    ident(tokens) operator(=) operator({)
        string<delimiter(')content(root)delimiter(')> operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content([)content(\\s)content(\\w)content(]+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(()content(\\[)content(\)(/?[^)content(\\])content(\\n)content(\\r)content(=]+\)()content(\\])content(\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Keyword)operator(,) ident(Keyword)operator(.)ident(Pseudo)operator(,) ident(Keyword)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(()content(\\[)content(\)([^)content(\\])content(\\n)content(\\r)content(=]+\)(=\)([^)content(\\])content(\\n)content(\\r)content(]+\)()content(\\])content(\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Keyword)operator(,) ident(Keyword)operator(.)ident(Pseudo)operator(,) ident(Operator)operator(,) ident(String)operator(,) ident(Keyword)operator(\))operator(\))operator(,)
        operator(])operator(,)
    operator(})


keyword(class) class(TexLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Lexer for the TeX and LaTeX typesetting languages.)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(TeX)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(tex)delimiter(')>operator(,) string<delimiter(')content(latex)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.tex)delimiter(')>operator(,) string<delimiter(')content(*.aux)delimiter(')>operator(,) string<delimiter(')content(*.toc)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(text/x-tex)delimiter(')>operator(,) string<delimiter(')content(text/x-latex)delimiter(')>operator(])

    ident(tokens) operator(=) operator({)
        string<delimiter(')content(general)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(%.*?)content(\\n)delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([{}])delimiter(')>operator(,) ident(Name)operator(.)ident(Builtin)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([&_^])delimiter(')>operator(,) ident(Name)operator(.)ident(Builtin)operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(root)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\\\)content(\\[)delimiter(')>operator(,) ident(String)operator(.)ident(Backtick)operator(,) string<delimiter(')content(displaymath)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\\\)content(\\()delimiter(')>operator(,) ident(String)operator(,) string<delimiter(')content(inlinemath)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\$)content(\\$)delimiter(')>operator(,) ident(String)operator(.)ident(Backtick)operator(,) string<delimiter(')content(displaymath)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\$)delimiter(')>operator(,) ident(String)operator(,) string<delimiter(')content(inlinemath)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\\\)content(([a-zA-Z]+|.\))delimiter(')>operator(,) ident(Keyword)operator(,) string<delimiter(')content(command)delimiter(')>operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(general)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([^)content(\\\\)content($%&_^{}]+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(math)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\\\)content(([a-zA-Z]+|.\))delimiter(')>operator(,) ident(Name)operator(.)ident(Variable)operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(general)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([0-9]+)delimiter(')>operator(,) ident(Number)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([-=!+*/(\))content(\\[)content(\\])content(])delimiter(')>operator(,) ident(Operator)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([^=!+*/(\))content(\\[)content(\\])content(\\\\)content($%&_^{}0-9-]+)delimiter(')>operator(,) ident(Name)operator(.)ident(Builtin)operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(inlinemath)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\\\)content(\\\))delimiter(')>operator(,) ident(String)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\$)delimiter(')>operator(,) ident(String)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(math)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(displaymath)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\\\)content(\\])delimiter(')>operator(,) ident(String)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\$)content(\\$)delimiter(')>operator(,) ident(String)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\$)delimiter(')>operator(,) ident(Name)operator(.)ident(Builtin)operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(math)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(command)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\[)content(.*?)content(\\])delimiter(')>operator(,) ident(Name)operator(.)ident(Attribute)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\*)delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')delimiter(')>operator(,) ident(Text)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
    operator(})

    keyword(def) method(analyse_text)operator(()ident(text)operator(\))operator(:)
        keyword(for) ident(start) keyword(in) operator(()string<delimiter(")char(\\\\)content(documentclass)delimiter(")>operator(,) string<delimiter(")char(\\\\)content(input)delimiter(")>operator(,) string<delimiter(")char(\\\\)content(documentstyle)delimiter(")>operator(,)
                      string<delimiter(")char(\\\\)content(relax)delimiter(")>operator(\))operator(:)
            keyword(if) ident(text)operator([)operator(:)predefined(len)operator(()ident(start)operator(\))operator(]) operator(==) ident(start)operator(:)
                keyword(return) predefined_constant(True)


keyword(class) class(GroffLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Lexer for the (g\)roff typesetting language, supporting groff)content(
)content(    extensions. Mainly useful for highlighting manpage sources.)content(
)content(
)content(    *New in Pygments 0.6.*)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(Groff)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(groff)delimiter(')>operator(,) string<delimiter(')content(nroff)delimiter(')>operator(,) string<delimiter(')content(man)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.[1234567])delimiter(')>operator(,) string<delimiter(')content(*.man)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(application/x-troff)delimiter(')>operator(,) string<delimiter(')content(text/troff)delimiter(')>operator(])

    ident(tokens) operator(=) operator({)
        string<delimiter(')content(root)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content((?i\)()content(\\.)content(\)()content(\\w)content(+\))delimiter(')>operator(,) ident(bygroups)operator(()ident(Text)operator(,) ident(Keyword)operator(\))operator(,) string<delimiter(')content(request)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\.)delimiter(')>operator(,) ident(Punctuation)operator(,) string<delimiter(')content(request)delimiter(')>operator(\))operator(,)
            comment(# Regular characters, slurp till we find a backslash or newline)
            operator(()string<modifier(r)delimiter(')content([^)content(\\\\)content(\\n)content(]*)delimiter(')>operator(,) ident(Text)operator(,) string<delimiter(')content(textline)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(textline)delimiter(')>operator(:) operator([)
            ident(include)operator(()string<delimiter(')content(escapes)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([^)content(\\\\)content(\\n)content(]+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\n)delimiter(')>operator(,) ident(Text)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(escapes)delimiter(')>operator(:) operator([)
            comment(# groff has many ways to write escapes.)
            operator(()string<modifier(r)delimiter(')content(\\\\)content("[^)content(\\n)content(]*)delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\\\)content([fn])content(\\w)delimiter(')>operator(,) ident(String)operator(.)ident(Escape)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\\\)content(\\()content(..)delimiter(')>operator(,) ident(String)operator(.)ident(Escape)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\\\)content(.)content(\\[)content(.*)content(\\])delimiter(')>operator(,) ident(String)operator(.)ident(Escape)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\\\)content(.)delimiter(')>operator(,) ident(String)operator(.)ident(Escape)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\\\)content(\\n)delimiter(')>operator(,) ident(Text)operator(,) string<delimiter(')content(request)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(request)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\n)delimiter(')>operator(,) ident(Text)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(escapes)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content("[^)content(\\n)content("]+")delimiter(')>operator(,) ident(String)operator(.)ident(Double)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\d)content(+)delimiter(')>operator(,) ident(Number)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\S)content(+)delimiter(')>operator(,) ident(String)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\s)content(+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
        operator(])operator(,)
    operator(})

    keyword(def) method(analyse_text)operator(()ident(text)operator(\))operator(:)
        keyword(if) ident(text)operator([)operator(:)integer(1)operator(]) operator(!=) string<delimiter(')content(.)delimiter(')>operator(:)
            keyword(return) predefined_constant(False)
        keyword(if) ident(text)operator([)operator(:)integer(3)operator(]) operator(==) string<delimiter(')content(.)char(\\\\)content(")delimiter(')>operator(:)
            keyword(return) predefined_constant(True)
        keyword(if) ident(text)operator([)operator(:)integer(4)operator(]) operator(==) string<delimiter(')content(.TH )delimiter(')>operator(:)
            keyword(return) predefined_constant(True)
        keyword(if) ident(text)operator([)integer(1)operator(:)integer(3)operator(])operator(.)ident(isalnum)operator(()operator(\)) keyword(and) ident(text)operator([)integer(3)operator(])operator(.)ident(isspace)operator(()operator(\))operator(:)
            keyword(return) float(0.9)


keyword(class) class(ApacheConfLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Lexer for configuration files following the Apache config file)content(
)content(    format.)content(
)content(
)content(    *New in Pygments 0.6.*)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(ApacheConf)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(apacheconf)delimiter(')>operator(,) string<delimiter(')content(aconf)delimiter(')>operator(,) string<delimiter(')content(apache)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(.htaccess)delimiter(')>operator(,) string<delimiter(')content(apache.conf)delimiter(')>operator(,) string<delimiter(')content(apache2.conf)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(text/x-apacheconf)delimiter(')>operator(])
    ident(flags) operator(=) ident(re)operator(.)ident(MULTILINE) operator(|) ident(re)operator(.)ident(IGNORECASE)

    ident(tokens) operator(=) operator({)
        string<delimiter(')content(root)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\s)content(+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((#.*?\)$)delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((<[^)content(\\s)content(>]+\)(?:()content(\\s)content(+\)(.*?\)\)?(>\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Name)operator(.)ident(Tag)operator(,) ident(Text)operator(,) ident(String)operator(,) ident(Name)operator(.)ident(Tag)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(([a-zA-Z][a-zA-Z0-9]*\)()content(\\s)content(+\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Name)operator(.)ident(Builtin)operator(,) ident(Text)operator(\))operator(,) string<delimiter(')content(value)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\.)content(+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(value)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content($)delimiter(')>operator(,) ident(Text)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([^)content(\\S)content(\\n)content(]+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\d)content(+)content(\\.)content(\\d)content(+)content(\\.)content(\\d)content(+)content(\\.)content(\\d)content(+(?:/)content(\\d)content(+\)?)delimiter(')>operator(,) ident(Number)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\d)content(+)delimiter(')>operator(,) ident(Number)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(/([a-zA-Z0-9][a-zA-Z0-9_./-]+\))delimiter(')>operator(,) ident(String)operator(.)ident(Other)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((on|off|none|any|all|double|email|dns|min|minimal|)delimiter(')>
             string<modifier(r)delimiter(')content(os|productonly|full|emerg|alert|crit|error|warn|)delimiter(')>
             string<modifier(r)delimiter(')content(notice|info|debug|registry|script|inetd|standalone|)delimiter(')>
             string<modifier(r)delimiter(')content(user|group\))content(\\b)delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content("([^")content(\\\\)content(]*(?:)content(\\\\)content(.[^")content(\\\\)content(]*\)*\)")delimiter(')>operator(,) ident(String)operator(.)ident(Double)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([^)content(\\s)content("]+)delimiter(')>operator(,) ident(Text)operator(\))
        operator(])
    operator(})


keyword(class) class(MoinWikiLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    For MoinMoin (and Trac\) Wiki markup.)content(
)content(
)content(    *New in Pygments 0.7.*)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(MoinMoin/Trac Wiki markup)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(trac-wiki)delimiter(')>operator(,) string<delimiter(')content(moin)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(text/x-trac-wiki)delimiter(')>operator(])
    ident(flags) operator(=) ident(re)operator(.)ident(MULTILINE) operator(|) ident(re)operator(.)ident(IGNORECASE)

    ident(tokens) operator(=) operator({)
        string<delimiter(')content(root)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(^#.*$)delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((!\)()content(\\S)content(+\))delimiter(')>operator(,) ident(bygroups)operator(()ident(Keyword)operator(,) ident(Text)operator(\))operator(\))operator(,) comment(# Ignore-next)
            comment(# Titles)
            operator(()string<modifier(r)delimiter(')content(^(=+\)([^=]+\)(=+\)()content(\\s)content(*#.+\)?$)delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Generic)operator(.)ident(Heading)operator(,) ident(using)operator(()ident(this)operator(\))operator(,) ident(Generic)operator(.)ident(Heading)operator(,) ident(String)operator(\))operator(\))operator(,)
            comment(# Literal code blocks, with optional shebang)
            operator(()string<modifier(r)delimiter(')content(({{{\)()content(\\n)content(#!.+\)?)delimiter(')>operator(,) ident(bygroups)operator(()ident(Name)operator(.)ident(Builtin)operator(,) ident(Name)operator(.)ident(Namespace)operator(\))operator(,) string<delimiter(')content(codeblock)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(()content(\\')content(\\')content(\\')content(?|)content(\\|)content(\\|)content(|`|__|~~|)content(\\^)content(|,,|::\))delimiter(')>operator(,) ident(Comment)operator(\))operator(,) comment(# Formatting)
            comment(# Lists)
            operator(()string<modifier(r)delimiter(')content(^( +\)([.*-]\)( \))delimiter(')>operator(,) ident(bygroups)operator(()ident(Text)operator(,) ident(Name)operator(.)ident(Builtin)operator(,) ident(Text)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(^( +\)([a-zivx]{1,5})content(\\.)content(\)( \))delimiter(')>operator(,) ident(bygroups)operator(()ident(Text)operator(,) ident(Name)operator(.)ident(Builtin)operator(,) ident(Text)operator(\))operator(\))operator(,)
            comment(# Other Formatting)
            operator(()string<modifier(r)delimiter(')content(\\[)content(\\[)content(\\w)content(+.*?)content(\\])content(\\])delimiter(')>operator(,) ident(Keyword)operator(\))operator(,) comment(# Macro)
            operator(()string<modifier(r)delimiter(')content(()content(\\[)content([^)content(\\s)content(\\])content(]+\)()content(\\s)content(+[^)content(\\])content(]+?\)?()content(\\])content(\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Keyword)operator(,) ident(String)operator(,) ident(Keyword)operator(\))operator(\))operator(,) comment(# Link)
            operator(()string<modifier(r)delimiter(')content(^----+$)delimiter(')>operator(,) ident(Keyword)operator(\))operator(,) comment(# Horizontal rules)
            operator(()string<modifier(r)delimiter(')content([^)content(\\n)content(\\')content(\\[)content({!_~^,|]+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\n)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(.)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(codeblock)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(}}})delimiter(')>operator(,) ident(Name)operator(.)ident(Builtin)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            comment(# these blocks are allowed to be nested in Trac, but not MoinMoin)
            operator(()string<modifier(r)delimiter(')content({{{)delimiter(')>operator(,) ident(Text)operator(,) string<delimiter(')content(#push)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([^{}]+)delimiter(')>operator(,) ident(Comment)operator(.)ident(Preproc)operator(\))operator(,) comment(# slurp boring text)
            operator(()string<modifier(r)delimiter(')content(.)delimiter(')>operator(,) ident(Comment)operator(.)ident(Preproc)operator(\))operator(,) comment(# allow loose { or })
        operator(])operator(,)
    operator(})


keyword(class) class(RstLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    For `reStructuredText <http://docutils.sf.net/rst.html>`_ markup.)content(
)content(
)content(    *New in Pygments 0.7.*)content(
)content(
)content(    Additional options accepted:)content(
)content(
)content(    `handlecodeblocks`)content(
)content(        Highlight the contents of ``.. sourcecode:: langauge`` and)content(
)content(        ``.. code:: language`` directives with a lexer for the given)content(
)content(        language (default: ``True``\). *New in Pygments 0.8.*)content(
)content(    )delimiter(""")>
    ident(name) operator(=) string<delimiter(')content(reStructuredText)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(rst)delimiter(')>operator(,) string<delimiter(')content(rest)delimiter(')>operator(,) string<delimiter(')content(restructuredtext)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.rst)delimiter(')>operator(,) string<delimiter(')content(*.rest)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(")content(text/x-rst)delimiter(")>operator(,) string<delimiter(")content(text/prs.fallenstein.rst)delimiter(")>operator(])
    ident(flags) operator(=) ident(re)operator(.)ident(MULTILINE)

    keyword(def) method(_handle_sourcecode)operator(()predefined_constant(self)operator(,) ident(match)operator(\))operator(:)
        keyword(from) include(pygments.lexers) keyword(import) include(get_lexer_by_name)
        keyword(from) include(pygments.util) keyword(import) include(ClassNotFound)

        comment(# section header)
        keyword(yield) ident(match)operator(.)ident(start)operator(()integer(1)operator(\))operator(,) ident(Punctuation)operator(,) ident(match)operator(.)ident(group)operator(()integer(1)operator(\))
        keyword(yield) ident(match)operator(.)ident(start)operator(()integer(2)operator(\))operator(,) ident(Text)operator(,) ident(match)operator(.)ident(group)operator(()integer(2)operator(\))
        keyword(yield) ident(match)operator(.)ident(start)operator(()integer(3)operator(\))operator(,) ident(Operator)operator(.)ident(Word)operator(,) ident(match)operator(.)ident(group)operator(()integer(3)operator(\))
        keyword(yield) ident(match)operator(.)ident(start)operator(()integer(4)operator(\))operator(,) ident(Punctuation)operator(,) ident(match)operator(.)ident(group)operator(()integer(4)operator(\))
        keyword(yield) ident(match)operator(.)ident(start)operator(()integer(5)operator(\))operator(,) ident(Text)operator(,) ident(match)operator(.)ident(group)operator(()integer(5)operator(\))
        keyword(yield) ident(match)operator(.)ident(start)operator(()integer(6)operator(\))operator(,) ident(Keyword)operator(,) ident(match)operator(.)ident(group)operator(()integer(6)operator(\))
        keyword(yield) ident(match)operator(.)ident(start)operator(()integer(7)operator(\))operator(,) ident(Text)operator(,) ident(match)operator(.)ident(group)operator(()integer(7)operator(\))

        comment(# lookup lexer if wanted and existing)
        ident(lexer) operator(=) predefined_constant(None)
        keyword(if) predefined_constant(self)operator(.)ident(handlecodeblocks)operator(:)
            keyword(try)operator(:)
                ident(lexer) operator(=) ident(get_lexer_by_name)operator(()ident(match)operator(.)ident(group)operator(()integer(6)operator(\))operator(.)ident(strip)operator(()operator(\))operator(\))
            keyword(except) ident(ClassNotFound)operator(:)
                keyword(pass)
        ident(indention) operator(=) ident(match)operator(.)ident(group)operator(()integer(8)operator(\))
        ident(indention_size) operator(=) predefined(len)operator(()ident(indention)operator(\))
        ident(code) operator(=) operator(()ident(indention) operator(+) ident(match)operator(.)ident(group)operator(()integer(9)operator(\)) operator(+) ident(match)operator(.)ident(group)operator(()integer(10)operator(\)) operator(+) ident(match)operator(.)ident(group)operator(()integer(11)operator(\))operator(\))

        comment(# no lexer for this language. handle it like it was a code block)
        keyword(if) ident(lexer) keyword(is) predefined_constant(None)operator(:)
            keyword(yield) ident(match)operator(.)ident(start)operator(()integer(8)operator(\))operator(,) ident(String)operator(,) ident(code)
            keyword(return)

        comment(# highlight the lines with the lexer.)
        ident(ins) operator(=) operator([)operator(])
        ident(codelines) operator(=) ident(code)operator(.)ident(splitlines)operator(()predefined_constant(True)operator(\))
        ident(code) operator(=) string<delimiter(')delimiter(')>
        keyword(for) ident(line) keyword(in) ident(codelines)operator(:)
            keyword(if) predefined(len)operator(()ident(line)operator(\)) operator(>) ident(indention_size)operator(:)
                ident(ins)operator(.)ident(append)operator(()operator(()predefined(len)operator(()ident(code)operator(\))operator(,) operator([)operator(()integer(0)operator(,) ident(Text)operator(,) ident(line)operator([)operator(:)ident(indention_size)operator(])operator(\))operator(])operator(\))operator(\))
                ident(code) operator(+=) ident(line)operator([)ident(indention_size)operator(:)operator(])
            keyword(else)operator(:)
                ident(code) operator(+=) ident(line)
        keyword(for) ident(item) keyword(in) ident(do_insertions)operator(()ident(ins)operator(,) ident(lexer)operator(.)ident(get_tokens_unprocessed)operator(()ident(code)operator(\))operator(\))operator(:)
            keyword(yield) ident(item)

    ident(tokens) operator(=) operator({)
        string<delimiter(')content(root)delimiter(')>operator(:) operator([)
            comment(# Heading with overline)
            operator(()string<modifier(r)delimiter(')content(^(=+|-+|`+|:+|)content(\\.)content(+|)content(\\')content(+|"+|~+|)content(\\^)content(+|_+|)content(\\*)content(+|)content(\\+)content(+|#+\)([ )content(\\t)content(]*)content(\\n)content(\)(.+\)()content(\\n)content(\)()content(\\1)content(\)()content(\\n)content(\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Generic)operator(.)ident(Heading)operator(,) ident(Text)operator(,) ident(Generic)operator(.)ident(Heading)operator(,)
                      ident(Text)operator(,) ident(Generic)operator(.)ident(Heading)operator(,) ident(Text)operator(\))operator(\))operator(,)
            comment(# Plain heading)
            operator(()string<modifier(r)delimiter(')content(^()content(\\S)content(.*\)()content(\\n)content(\)(={3,}|-{3,}|`{3,}|:{3,}|)content(\\.)content({3,}|)content(\\')content({3,}|"{3,}|)delimiter(')>
             string<modifier(r)delimiter(')content(~{3,}|)content(\\^)content({3,}|_{3,}|)content(\\*)content({3,}|)content(\\+)content({3,}|#{3,}\)()content(\\n)content(\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Generic)operator(.)ident(Heading)operator(,) ident(Text)operator(,) ident(Generic)operator(.)ident(Heading)operator(,) ident(Text)operator(\))operator(\))operator(,)
            comment(# Bulleted lists)
            operator(()string<modifier(r)delimiter(')content(^()content(\\s)content(*\)([-*+]\)( .+)content(\\n)content((?:)content(\\1)content(  .+)content(\\n)content(\)*\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Text)operator(,) ident(Number)operator(,) ident(using)operator(()ident(this)operator(,) ident(state)operator(=)string<delimiter(')content(inline)delimiter(')>operator(\))operator(\))operator(\))operator(,)
            comment(# Numbered lists)
            operator(()string<modifier(r)delimiter(')content(^()content(\\s)content(*\)([0-9#ivxlcmIVXLCM]+)content(\\.)content(\)( .+)content(\\n)content((?:)content(\\1)content(  .+)content(\\n)content(\)*\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Text)operator(,) ident(Number)operator(,) ident(using)operator(()ident(this)operator(,) ident(state)operator(=)string<delimiter(')content(inline)delimiter(')>operator(\))operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(^()content(\\s)content(*\)()content(\\()content(?[0-9#ivxlcmIVXLCM]+)content(\\\))content(\)( .+)content(\\n)content((?:)content(\\1)content(  .+)content(\\n)content(\)*\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Text)operator(,) ident(Number)operator(,) ident(using)operator(()ident(this)operator(,) ident(state)operator(=)string<delimiter(')content(inline)delimiter(')>operator(\))operator(\))operator(\))operator(,)
            comment(# Numbered, but keep words at BOL from becoming lists)
            operator(()string<modifier(r)delimiter(')content(^()content(\\s)content(*\)([A-Z]+)content(\\.)content(\)( .+)content(\\n)content((?:)content(\\1)content(  .+)content(\\n)content(\)+\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Text)operator(,) ident(Number)operator(,) ident(using)operator(()ident(this)operator(,) ident(state)operator(=)string<delimiter(')content(inline)delimiter(')>operator(\))operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(^()content(\\s)content(*\)()content(\\()content(?[A-Za-z]+)content(\\\))content(\)( .+)content(\\n)content((?:)content(\\1)content(  .+)content(\\n)content(\)+\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Text)operator(,) ident(Number)operator(,) ident(using)operator(()ident(this)operator(,) ident(state)operator(=)string<delimiter(')content(inline)delimiter(')>operator(\))operator(\))operator(\))operator(,)
            comment(# Sourcecode directives)
            operator(()string<modifier(r)delimiter(')content(^( *)content(\\.)content(\\.)content(\)()content(\\s)content(*\)((?:source\)?code\)(::\)([ )content(\\t)content(]*\)([^)content(\\n)content(]+\))delimiter(')>
             string<modifier(r)delimiter(')content(()content(\\n)content([ )content(\\t)content(]*)content(\\n)content(\)([ )content(\\t)content(]+\)(.*\)()content(\\n)content(\)((?:(?:)content(\\8)content(.*|\))content(\\n)content(\)+\))delimiter(')>operator(,)
             ident(_handle_sourcecode)operator(\))operator(,)
            comment(# A directive)
            operator(()string<modifier(r)delimiter(')content(^( *)content(\\.)content(\\.)content(\)()content(\\s)content(*\)([)content(\\w)content(-]+\)(::\)(?:([ )content(\\t)content(]*\)(.+\)\)?)delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Punctuation)operator(,) ident(Text)operator(,) ident(Operator)operator(.)ident(Word)operator(,) ident(Punctuation)operator(,) ident(Text)operator(,) ident(Keyword)operator(\))operator(\))operator(,)
            comment(# A reference target)
            operator(()string<modifier(r)delimiter(')content(^( *)content(\\.)content(\\.)content(\)()content(\\s)content(*\)([)content(\\w)content(\\t)content( ]+:\)(.*?\)$)delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Punctuation)operator(,) ident(Text)operator(,) ident(Name)operator(.)ident(Tag)operator(,) ident(using)operator(()ident(this)operator(,) ident(state)operator(=)string<delimiter(')content(inline)delimiter(')>operator(\))operator(\))operator(\))operator(,)
            comment(# A footnote target)
            operator(()string<modifier(r)delimiter(')content(^( *)content(\\.)content(\\.)content(\)()content(\\s)content(*\)()content(\\[)content(.+)content(\\])content(\)(.*?\)$)delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Punctuation)operator(,) ident(Text)operator(,) ident(Name)operator(.)ident(Tag)operator(,) ident(using)operator(()ident(this)operator(,) ident(state)operator(=)string<delimiter(')content(inline)delimiter(')>operator(\))operator(\))operator(\))operator(,)
            comment(# Comments)
            operator(()string<modifier(r)delimiter(')content(^ *)content(\\.)content(\\.)content(.*()content(\\n)content(( +.*)content(\\n)content(|)content(\\n)content(\)+\)?)delimiter(')>operator(,) ident(Comment)operator(.)ident(Preproc)operator(\))operator(,)
            comment(# Field list)
            operator(()string<modifier(r)delimiter(')content(^( *\)(:.*?:\)([ )content(\\t)content(]+\)(.*?\)$)delimiter(')>operator(,) ident(bygroups)operator(()ident(Text)operator(,) ident(Name)operator(.)ident(Class)operator(,) ident(Text)operator(,)
                                                     ident(Name)operator(.)ident(Function)operator(\))operator(\))operator(,)
            comment(# Definition list)
            operator(()string<modifier(r)delimiter(')content(^([^ ].*(?<!::\))content(\\n)content(\)((?:(?: +.*\))content(\\n)content(\)+\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(using)operator(()ident(this)operator(,) ident(state)operator(=)string<delimiter(')content(inline)delimiter(')>operator(\))operator(,) ident(using)operator(()ident(this)operator(,) ident(state)operator(=)string<delimiter(')content(inline)delimiter(')>operator(\))operator(\))operator(\))operator(,)
            comment(# Code blocks)
            operator(()string<modifier(r)delimiter(')content((::\)()content(\\n)content([ )content(\\t)content(]*)content(\\n)content(\)([ )content(\\t)content(]+\)(.*\)()content(\\n)content(\)((?:(?:)content(\\3)content(.*|\))content(\\n)content(\)+\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(String)operator(.)ident(Escape)operator(,) ident(Text)operator(,) ident(String)operator(,) ident(String)operator(,) ident(Text)operator(,) ident(String)operator(\))operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(inline)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(inline)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\\\)content(.)delimiter(')>operator(,) ident(Text)operator(\))operator(,) comment(# escape)
            operator(()string<modifier(r)delimiter(')content(``)delimiter(')>operator(,) ident(String)operator(,) string<delimiter(')content(literal)delimiter(')>operator(\))operator(,) comment(# code)
            operator(()string<modifier(r)delimiter(')content((`\)(.+?\)(`__?\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Punctuation)operator(,) ident(using)operator(()ident(this)operator(\))operator(,) ident(Punctuation)operator(\))operator(\))operator(,) comment(# reference)
            operator(()string<modifier(r)delimiter(')content((`.+?`\)(:[a-zA-Z0-9-]+?:\)?)delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Name)operator(.)ident(Variable)operator(,) ident(Name)operator(.)ident(Attribute)operator(\))operator(\))operator(,) comment(# role)
            operator(()string<modifier(r)delimiter(')content((:[a-zA-Z0-9-]+?:\)(`.+?`\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Name)operator(.)ident(Attribute)operator(,) ident(Name)operator(.)ident(Variable)operator(\))operator(\))operator(,) comment(# user-defined role)
            operator(()string<modifier(r)delimiter(')content(\\*)content(\\*)content(.+?)content(\\*)content(\\*)delimiter(')>operator(,) ident(Generic)operator(.)ident(Strong)operator(\))operator(,) comment(# Strong emphasis)
            operator(()string<modifier(r)delimiter(')content(\\*)content(.+?)content(\\*)delimiter(')>operator(,) ident(Generic)operator(.)ident(Emph)operator(\))operator(,) comment(# Emphasis)
            operator(()string<modifier(r)delimiter(')content(\\[)content(.*?)content(\\])content(_)delimiter(')>operator(,) ident(String)operator(\))operator(,) comment(# Footnote or citation)
            operator(()string<modifier(r)delimiter(')content(<.+?>)delimiter(')>operator(,) ident(Name)operator(.)ident(Tag)operator(\))operator(,) comment(# Hyperlink)
            operator(()string<modifier(r)delimiter(')content([^)content(\\\\)content(\\n)content(\\[)content(*`:]+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(.)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(literal)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content([^`)content(\\\\)content(]+)delimiter(')>operator(,) ident(String)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\\\)content(.)delimiter(')>operator(,) ident(String)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(``)delimiter(')>operator(,) ident(String)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([`)content(\\\\)content(])delimiter(')>operator(,) ident(String)operator(\))operator(,)
        operator(])
    operator(})

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))operator(:)
        predefined_constant(self)operator(.)ident(handlecodeblocks) operator(=) ident(get_bool_opt)operator(()ident(options)operator(,) string<delimiter(')content(handlecodeblocks)delimiter(')>operator(,) predefined_constant(True)operator(\))
        ident(RegexLexer)operator(.)ident(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))

    keyword(def) method(analyse_text)operator(()ident(text)operator(\))operator(:)
        keyword(if) ident(text)operator([)operator(:)integer(2)operator(]) operator(==) string<delimiter(')content(..)delimiter(')> keyword(and) ident(text)operator([)integer(2)operator(:)integer(3)operator(]) operator(!=) string<delimiter(')content(.)delimiter(')>operator(:)
            keyword(return) float(0.3)
        ident(p1) operator(=) ident(text)operator(.)ident(find)operator(()string<delimiter(")char(\\n)delimiter(")>operator(\))
        ident(p2) operator(=) ident(text)operator(.)ident(find)operator(()string<delimiter(")char(\\n)delimiter(")>operator(,) ident(p1) operator(+) integer(1)operator(\))
        keyword(if) operator(()ident(p2) operator(>) operator(-)integer(1) keyword(and)              comment(# has two lines)
            ident(p1) operator(*) integer(2) operator(+) integer(1) operator(==) ident(p2) keyword(and)     comment(# they are the same length)
            ident(text)operator([)ident(p1)operator(+)integer(1)operator(]) keyword(in) string<delimiter(')content(-=)delimiter(')> keyword(and)   comment(# the next line both starts and ends with)
            ident(text)operator([)ident(p1)operator(+)integer(1)operator(]) operator(==) ident(text)operator([)ident(p2)operator(-)integer(1)operator(])operator(\))operator(:) comment(# ...a sufficiently high header)
            keyword(return) float(0.5)


keyword(class) class(VimLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Lexer for VimL script files.)content(
)content(
)content(    *New in Pygments 0.8.*)content(
)content(    )delimiter(""")>
    ident(name) operator(=) string<delimiter(')content(VimL)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(vim)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.vim)delimiter(')>operator(,) string<delimiter(')content(.vimrc)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(text/x-vim)delimiter(')>operator(])
    ident(flags) operator(=) ident(re)operator(.)ident(MULTILINE)

    ident(tokens) operator(=) operator({)
        string<delimiter(')content(root)delimiter(')>operator(:) operator([)
            comment(# Who decided that doublequote was a good comment character??)
            operator(()string<modifier(r)delimiter(')content(^)content(\\s)content(*".*)delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((?<=)content(\\s)content(\)"[^)content(\\-)content(:.%#=*].*)delimiter(')>operator(,) ident(Comment)operator(\))operator(,)

            operator(()string<modifier(r)delimiter(')content([ )content(\\t)content(]+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            comment(# TODO: regexes can have other delims)
            operator(()string<modifier(r)delimiter(')content(/()content(\\\\)content(\\\\)content(|)content(\\\\)content(/|[^)content(\\n)content(/]\)*/)delimiter(')>operator(,) ident(String)operator(.)ident(Regex)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content("()content(\\\\)content(\\\\)content(|)content(\\\\)content("|[^)content(\\n)content("]\)*")delimiter(')>operator(,) ident(String)operator(.)ident(Double)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(")content('()content(\\\\)content(\\\\)content(|)content(\\\\)content('|[^)content(\\n)content(']\)*')delimiter(")>operator(,) ident(String)operator(.)ident(Single)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(-?)content(\\d)content(+)delimiter(')>operator(,) ident(Number)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(#[0-9a-f]{6})delimiter(')>operator(,) ident(Number)operator(.)ident(Hex)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(^:)delimiter(')>operator(,) ident(Punctuation)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([(\)<>+=!|,~-])delimiter(')>operator(,) ident(Punctuation)operator(\))operator(,) comment(# Inexact list.  Looks decent.)
            operator(()string<modifier(r)delimiter(')content(\\b)content((let|if|else|endif|elseif|fun|function|endfunction\))content(\\b)delimiter(')>operator(,)
             ident(Keyword)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\b)content((NONE|bold|italic|underline|dark|light\))content(\\b)delimiter(')>operator(,) ident(Name)operator(.)ident(Builtin)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\b)content(\\w)content(+)content(\\b)delimiter(')>operator(,) ident(Name)operator(.)ident(Other)operator(\))operator(,) comment(# These are postprocessed below)
            operator(()string<modifier(r)delimiter(')content(.)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
        operator(])operator(,)
    operator(})
    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))operator(:)
        keyword(from) include(pygments.lexers._vimbuiltins) keyword(import) include(command)operator(,) include(option)operator(,) include(auto)
        predefined_constant(self)operator(.)ident(_cmd) operator(=) ident(command)
        predefined_constant(self)operator(.)ident(_opt) operator(=) ident(option)
        predefined_constant(self)operator(.)ident(_aut) operator(=) ident(auto)

        ident(RegexLexer)operator(.)ident(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))

    keyword(def) method(is_in)operator(()predefined_constant(self)operator(,) ident(w)operator(,) ident(mapping)operator(\))operator(:)
        docstring<modifier(r)delimiter(""")content(
)content(        It's kind of difficult to decide if something might be a keyword)content(
)content(        in VimL because it allows you to abbreviate them.  In fact,)content(
)content(        'ab[breviate]' is a good example.  :ab, :abbre, or :abbreviate are)content(
)content(        valid ways to call it so rather than making really awful regexps)content(
)content(        like::)content(
)content(
)content(            )content(\\b)content(ab(?:b(?:r(?:e(?:v(?:i(?:a(?:t(?:e\)?\)?\)?\)?\)?\)?\)?\)?)content(\\b)content(
)content(
)content(        we match `)content(\\b)content(\\w)content(+)content(\\b)content(` and then call is_in(\) on those tokens.  See)content(
)content(        `scripts/get_vimkw.py` for how the lists are extracted.)content(
)content(        )delimiter(""")>
        ident(p) operator(=) ident(bisect)operator(()ident(mapping)operator(,) operator(()ident(w)operator(,)operator(\))operator(\))
        keyword(if) ident(p) operator(>) integer(0)operator(:)
            keyword(if) ident(mapping)operator([)ident(p)operator(-)integer(1)operator(])operator([)integer(0)operator(]) operator(==) ident(w)operator([)operator(:)predefined(len)operator(()ident(mapping)operator([)ident(p)operator(-)integer(1)operator(])operator([)integer(0)operator(])operator(\))operator(]) keyword(and) \
               ident(mapping)operator([)ident(p)operator(-)integer(1)operator(])operator([)integer(1)operator(])operator([)operator(:)predefined(len)operator(()ident(w)operator(\))operator(]) operator(==) ident(w)operator(:) keyword(return) predefined_constant(True)
        keyword(if) ident(p) operator(<) predefined(len)operator(()ident(mapping)operator(\))operator(:)
            keyword(return) ident(mapping)operator([)ident(p)operator(])operator([)integer(0)operator(]) operator(==) ident(w)operator([)operator(:)predefined(len)operator(()ident(mapping)operator([)ident(p)operator(])operator([)integer(0)operator(])operator(\))operator(]) keyword(and) \
                   ident(mapping)operator([)ident(p)operator(])operator([)integer(1)operator(])operator([)operator(:)predefined(len)operator(()ident(w)operator(\))operator(]) operator(==) ident(w)
        keyword(return) predefined_constant(False)

    keyword(def) method(get_tokens_unprocessed)operator(()predefined_constant(self)operator(,) ident(text)operator(\))operator(:)
        comment(# TODO: builtins are only subsequent tokens on lines)
        comment(#       and 'keywords' only happen at the beginning except)
        comment(#       for :au ones)
        keyword(for) ident(index)operator(,) ident(token)operator(,) ident(value) keyword(in) \
            ident(RegexLexer)operator(.)ident(get_tokens_unprocessed)operator(()predefined_constant(self)operator(,) ident(text)operator(\))operator(:)
            keyword(if) ident(token) keyword(is) ident(Name)operator(.)ident(Other)operator(:)
                keyword(if) predefined_constant(self)operator(.)ident(is_in)operator(()ident(value)operator(,) predefined_constant(self)operator(.)ident(_cmd)operator(\))operator(:)
                    keyword(yield) ident(index)operator(,) ident(Keyword)operator(,) ident(value)
                keyword(elif) predefined_constant(self)operator(.)ident(is_in)operator(()ident(value)operator(,) predefined_constant(self)operator(.)ident(_opt)operator(\)) keyword(or) \
                     predefined_constant(self)operator(.)ident(is_in)operator(()ident(value)operator(,) predefined_constant(self)operator(.)ident(_aut)operator(\))operator(:)
                    keyword(yield) ident(index)operator(,) ident(Name)operator(.)ident(Builtin)operator(,) ident(value)
                keyword(else)operator(:)
                    keyword(yield) ident(index)operator(,) ident(Text)operator(,) ident(value)
            keyword(else)operator(:)
                keyword(yield) ident(index)operator(,) ident(token)operator(,) ident(value)


keyword(class) class(GettextLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Lexer for Gettext catalog files.)content(
)content(
)content(    *New in Pygments 0.9.*)content(
)content(    )delimiter(""")>
    ident(name) operator(=) string<delimiter(')content(Gettext Catalog)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(pot)delimiter(')>operator(,) string<delimiter(')content(po)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.pot)delimiter(')>operator(,) string<delimiter(')content(*.po)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(application/x-gettext)delimiter(')>operator(,) string<delimiter(')content(text/x-gettext)delimiter(')>operator(,) string<delimiter(')content(text/gettext)delimiter(')>operator(])

    ident(tokens) operator(=) operator({)
        string<delimiter(')content(root)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(^#,)content(\\s)content(.*?$)delimiter(')>operator(,) ident(Keyword)operator(.)ident(Type)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(^#:)content(\\s)content(.*?$)delimiter(')>operator(,) ident(Keyword)operator(.)ident(Declaration)operator(\))operator(,)
            comment(#(r'^#$', Comment\),)
            operator(()string<modifier(r)delimiter(')content(^(#|#)content(\\.)content(\\s)content(|#)content(\\|)content(\\s)content(|#~)content(\\s)content(|#)content(\\s)content(\).*$)delimiter(')>operator(,) ident(Comment)operator(.)ident(Single)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(^("\)([)content(\\w)content(-]*:\)(.*"\)$)delimiter(')>operator(,)
             ident(bygroups)operator(()ident(String)operator(,) ident(Name)operator(.)ident(Property)operator(,) ident(String)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(^".*"$)delimiter(')>operator(,) ident(String)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(^(msgid|msgid_plural|msgstr\)()content(\\s)content(+\)(".*"\)$)delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Name)operator(.)ident(Variable)operator(,) ident(Text)operator(,) ident(String)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(^(msgstr)content(\\[)content(\)()content(\\d)content(\)()content(\\])content(\)()content(\\s)content(+\)(".*"\)$)delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Name)operator(.)ident(Variable)operator(,) ident(Number)operator(.)ident(Integer)operator(,) ident(Name)operator(.)ident(Variable)operator(,) ident(Text)operator(,) ident(String)operator(\))operator(\))operator(,)
        operator(])
    operator(})


keyword(class) class(SquidConfLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Lexer for `squid <http://www.squid-cache.org/>`_ configuration files.)content(
)content(
)content(    *New in Pygments 0.9.*)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(SquidConf)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(squidconf)delimiter(')>operator(,) string<delimiter(')content(squid.conf)delimiter(')>operator(,) string<delimiter(')content(squid)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(squid.conf)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(text/x-squidconf)delimiter(')>operator(])
    ident(flags) operator(=) ident(re)operator(.)ident(IGNORECASE)

    ident(keywords) operator(=) operator([) string<delimiter(")content(acl)delimiter(")>operator(,) string<delimiter(")content(always_direct)delimiter(")>operator(,) string<delimiter(")content(announce_host)delimiter(")>operator(,)
                 string<delimiter(")content(announce_period)delimiter(")>operator(,) string<delimiter(")content(announce_port)delimiter(")>operator(,) string<delimiter(")content(announce_to)delimiter(")>operator(,)
                 string<delimiter(")content(anonymize_headers)delimiter(")>operator(,) string<delimiter(")content(append_domain)delimiter(")>operator(,) string<delimiter(")content(as_whois_server)delimiter(")>operator(,)
                 string<delimiter(")content(auth_param_basic)delimiter(")>operator(,) string<delimiter(")content(authenticate_children)delimiter(")>operator(,)
                 string<delimiter(")content(authenticate_program)delimiter(")>operator(,) string<delimiter(")content(authenticate_ttl)delimiter(")>operator(,) string<delimiter(")content(broken_posts)delimiter(")>operator(,)
                 string<delimiter(")content(buffered_logs)delimiter(")>operator(,) string<delimiter(")content(cache_access_log)delimiter(")>operator(,) string<delimiter(")content(cache_announce)delimiter(")>operator(,)
                 string<delimiter(")content(cache_dir)delimiter(")>operator(,) string<delimiter(")content(cache_dns_program)delimiter(")>operator(,) string<delimiter(")content(cache_effective_group)delimiter(")>operator(,)
                 string<delimiter(")content(cache_effective_user)delimiter(")>operator(,) string<delimiter(")content(cache_host)delimiter(")>operator(,) string<delimiter(")content(cache_host_acl)delimiter(")>operator(,)
                 string<delimiter(")content(cache_host_domain)delimiter(")>operator(,) string<delimiter(")content(cache_log)delimiter(")>operator(,) string<delimiter(")content(cache_mem)delimiter(")>operator(,)
                 string<delimiter(")content(cache_mem_high)delimiter(")>operator(,) string<delimiter(")content(cache_mem_low)delimiter(")>operator(,) string<delimiter(")content(cache_mgr)delimiter(")>operator(,)
                 string<delimiter(")content(cachemgr_passwd)delimiter(")>operator(,) string<delimiter(")content(cache_peer)delimiter(")>operator(,) string<delimiter(")content(cache_peer_access)delimiter(")>operator(,)
                 string<delimiter(")content(cahce_replacement_policy)delimiter(")>operator(,) string<delimiter(")content(cache_stoplist)delimiter(")>operator(,)
                 string<delimiter(")content(cache_stoplist_pattern)delimiter(")>operator(,) string<delimiter(")content(cache_store_log)delimiter(")>operator(,) string<delimiter(")content(cache_swap)delimiter(")>operator(,)
                 string<delimiter(")content(cache_swap_high)delimiter(")>operator(,) string<delimiter(")content(cache_swap_log)delimiter(")>operator(,) string<delimiter(")content(cache_swap_low)delimiter(")>operator(,)
                 string<delimiter(")content(client_db)delimiter(")>operator(,) string<delimiter(")content(client_lifetime)delimiter(")>operator(,) string<delimiter(")content(client_netmask)delimiter(")>operator(,)
                 string<delimiter(")content(connect_timeout)delimiter(")>operator(,) string<delimiter(")content(coredump_dir)delimiter(")>operator(,) string<delimiter(")content(dead_peer_timeout)delimiter(")>operator(,)
                 string<delimiter(")content(debug_options)delimiter(")>operator(,) string<delimiter(")content(delay_access)delimiter(")>operator(,) string<delimiter(")content(delay_class)delimiter(")>operator(,)
                 string<delimiter(")content(delay_initial_bucket_level)delimiter(")>operator(,) string<delimiter(")content(delay_parameters)delimiter(")>operator(,)
                 string<delimiter(")content(delay_pools)delimiter(")>operator(,) string<delimiter(")content(deny_info)delimiter(")>operator(,) string<delimiter(")content(dns_children)delimiter(")>operator(,) string<delimiter(")content(dns_defnames)delimiter(")>operator(,)
                 string<delimiter(")content(dns_nameservers)delimiter(")>operator(,) string<delimiter(")content(dns_testnames)delimiter(")>operator(,) string<delimiter(")content(emulate_httpd_log)delimiter(")>operator(,)
                 string<delimiter(")content(err_html_text)delimiter(")>operator(,) string<delimiter(")content(fake_user_agent)delimiter(")>operator(,) string<delimiter(")content(firewall_ip)delimiter(")>operator(,)
                 string<delimiter(")content(forwarded_for)delimiter(")>operator(,) string<delimiter(")content(forward_snmpd_port)delimiter(")>operator(,) string<delimiter(")content(fqdncache_size)delimiter(")>operator(,)
                 string<delimiter(")content(ftpget_options)delimiter(")>operator(,) string<delimiter(")content(ftpget_program)delimiter(")>operator(,) string<delimiter(")content(ftp_list_width)delimiter(")>operator(,)
                 string<delimiter(")content(ftp_passive)delimiter(")>operator(,) string<delimiter(")content(ftp_user)delimiter(")>operator(,) string<delimiter(")content(half_closed_clients)delimiter(")>operator(,)
                 string<delimiter(")content(header_access)delimiter(")>operator(,) string<delimiter(")content(header_replace)delimiter(")>operator(,) string<delimiter(")content(hierarchy_stoplist)delimiter(")>operator(,)
                 string<delimiter(")content(high_response_time_warning)delimiter(")>operator(,) string<delimiter(")content(high_page_fault_warning)delimiter(")>operator(,)
                 string<delimiter(")content(htcp_port)delimiter(")>operator(,) string<delimiter(")content(http_access)delimiter(")>operator(,) string<delimiter(")content(http_anonymizer)delimiter(")>operator(,) string<delimiter(")content(httpd_accel)delimiter(")>operator(,)
                 string<delimiter(")content(httpd_accel_host)delimiter(")>operator(,) string<delimiter(")content(httpd_accel_port)delimiter(")>operator(,)
                 string<delimiter(")content(httpd_accel_uses_host_header)delimiter(")>operator(,) string<delimiter(")content(httpd_accel_with_proxy)delimiter(")>operator(,)
                 string<delimiter(")content(http_port)delimiter(")>operator(,) string<delimiter(")content(http_reply_access)delimiter(")>operator(,) string<delimiter(")content(icp_access)delimiter(")>operator(,)
                 string<delimiter(")content(icp_hit_stale)delimiter(")>operator(,) string<delimiter(")content(icp_port)delimiter(")>operator(,) string<delimiter(")content(icp_query_timeout)delimiter(")>operator(,)
                 string<delimiter(")content(ident_lookup)delimiter(")>operator(,) string<delimiter(")content(ident_lookup_access)delimiter(")>operator(,) string<delimiter(")content(ident_timeout)delimiter(")>operator(,)
                 string<delimiter(")content(incoming_http_average)delimiter(")>operator(,) string<delimiter(")content(incoming_icp_average)delimiter(")>operator(,)
                 string<delimiter(")content(inside_firewall)delimiter(")>operator(,) string<delimiter(")content(ipcache_high)delimiter(")>operator(,) string<delimiter(")content(ipcache_low)delimiter(")>operator(,)
                 string<delimiter(")content(ipcache_size)delimiter(")>operator(,) string<delimiter(")content(local_domain)delimiter(")>operator(,) string<delimiter(")content(local_ip)delimiter(")>operator(,) string<delimiter(")content(logfile_rotate)delimiter(")>operator(,)
                 string<delimiter(")content(log_fqdn)delimiter(")>operator(,) string<delimiter(")content(log_icp_queries)delimiter(")>operator(,) string<delimiter(")content(log_mime_hdrs)delimiter(")>operator(,)
                 string<delimiter(")content(maximum_object_size)delimiter(")>operator(,) string<delimiter(")content(maximum_single_addr_tries)delimiter(")>operator(,)
                 string<delimiter(")content(mcast_groups)delimiter(")>operator(,) string<delimiter(")content(mcast_icp_query_timeout)delimiter(")>operator(,) string<delimiter(")content(mcast_miss_addr)delimiter(")>operator(,)
                 string<delimiter(")content(mcast_miss_encode_key)delimiter(")>operator(,) string<delimiter(")content(mcast_miss_port)delimiter(")>operator(,) string<delimiter(")content(memory_pools)delimiter(")>operator(,)
                 string<delimiter(")content(memory_pools_limit)delimiter(")>operator(,) string<delimiter(")content(memory_replacement_policy)delimiter(")>operator(,)
                 string<delimiter(")content(mime_table)delimiter(")>operator(,) string<delimiter(")content(min_http_poll_cnt)delimiter(")>operator(,) string<delimiter(")content(min_icp_poll_cnt)delimiter(")>operator(,)
                 string<delimiter(")content(minimum_direct_hops)delimiter(")>operator(,) string<delimiter(")content(minimum_object_size)delimiter(")>operator(,)
                 string<delimiter(")content(minimum_retry_timeout)delimiter(")>operator(,) string<delimiter(")content(miss_access)delimiter(")>operator(,) string<delimiter(")content(negative_dns_ttl)delimiter(")>operator(,)
                 string<delimiter(")content(negative_ttl)delimiter(")>operator(,) string<delimiter(")content(neighbor_timeout)delimiter(")>operator(,) string<delimiter(")content(neighbor_type_domain)delimiter(")>operator(,)
                 string<delimiter(")content(netdb_high)delimiter(")>operator(,) string<delimiter(")content(netdb_low)delimiter(")>operator(,) string<delimiter(")content(netdb_ping_period)delimiter(")>operator(,)
                 string<delimiter(")content(netdb_ping_rate)delimiter(")>operator(,) string<delimiter(")content(never_direct)delimiter(")>operator(,) string<delimiter(")content(no_cache)delimiter(")>operator(,)
                 string<delimiter(")content(passthrough_proxy)delimiter(")>operator(,) string<delimiter(")content(pconn_timeout)delimiter(")>operator(,) string<delimiter(")content(pid_filename)delimiter(")>operator(,)
                 string<delimiter(")content(pinger_program)delimiter(")>operator(,) string<delimiter(")content(positive_dns_ttl)delimiter(")>operator(,) string<delimiter(")content(prefer_direct)delimiter(")>operator(,)
                 string<delimiter(")content(proxy_auth)delimiter(")>operator(,) string<delimiter(")content(proxy_auth_realm)delimiter(")>operator(,) string<delimiter(")content(query_icmp)delimiter(")>operator(,) string<delimiter(")content(quick_abort)delimiter(")>operator(,)
                 string<delimiter(")content(quick_abort)delimiter(")>operator(,) string<delimiter(")content(quick_abort_max)delimiter(")>operator(,) string<delimiter(")content(quick_abort_min)delimiter(")>operator(,)
                 string<delimiter(")content(quick_abort_pct)delimiter(")>operator(,) string<delimiter(")content(range_offset_limit)delimiter(")>operator(,) string<delimiter(")content(read_timeout)delimiter(")>operator(,)
                 string<delimiter(")content(redirect_children)delimiter(")>operator(,) string<delimiter(")content(redirect_program)delimiter(")>operator(,)
                 string<delimiter(")content(redirect_rewrites_host_header)delimiter(")>operator(,) string<delimiter(")content(reference_age)delimiter(")>operator(,)
                 string<delimiter(")content(reference_age)delimiter(")>operator(,) string<delimiter(")content(refresh_pattern)delimiter(")>operator(,) string<delimiter(")content(reload_into_ims)delimiter(")>operator(,)
                 string<delimiter(")content(request_body_max_size)delimiter(")>operator(,) string<delimiter(")content(request_size)delimiter(")>operator(,) string<delimiter(")content(request_timeout)delimiter(")>operator(,)
                 string<delimiter(")content(shutdown_lifetime)delimiter(")>operator(,) string<delimiter(")content(single_parent_bypass)delimiter(")>operator(,)
                 string<delimiter(")content(siteselect_timeout)delimiter(")>operator(,) string<delimiter(")content(snmp_access)delimiter(")>operator(,) string<delimiter(")content(snmp_incoming_address)delimiter(")>operator(,)
                 string<delimiter(")content(snmp_port)delimiter(")>operator(,) string<delimiter(")content(source_ping)delimiter(")>operator(,) string<delimiter(")content(ssl_proxy)delimiter(")>operator(,)
                 string<delimiter(")content(store_avg_object_size)delimiter(")>operator(,) string<delimiter(")content(store_objects_per_bucket)delimiter(")>operator(,)
                 string<delimiter(")content(strip_query_terms)delimiter(")>operator(,) string<delimiter(")content(swap_level1_dirs)delimiter(")>operator(,) string<delimiter(")content(swap_level2_dirs)delimiter(")>operator(,)
                 string<delimiter(")content(tcp_incoming_address)delimiter(")>operator(,) string<delimiter(")content(tcp_outgoing_address)delimiter(")>operator(,)
                 string<delimiter(")content(tcp_recv_bufsize)delimiter(")>operator(,) string<delimiter(")content(test_reachability)delimiter(")>operator(,) string<delimiter(")content(udp_hit_obj)delimiter(")>operator(,)
                 string<delimiter(")content(udp_hit_obj_size)delimiter(")>operator(,) string<delimiter(")content(udp_incoming_address)delimiter(")>operator(,)
                 string<delimiter(")content(udp_outgoing_address)delimiter(")>operator(,) string<delimiter(")content(unique_hostname)delimiter(")>operator(,) string<delimiter(")content(unlinkd_program)delimiter(")>operator(,)
                 string<delimiter(")content(uri_whitespace)delimiter(")>operator(,) string<delimiter(")content(useragent_log)delimiter(")>operator(,) string<delimiter(")content(visible_hostname)delimiter(")>operator(,)
                 string<delimiter(")content(wais_relay)delimiter(")>operator(,) string<delimiter(")content(wais_relay_host)delimiter(")>operator(,) string<delimiter(")content(wais_relay_port)delimiter(")>operator(,)
                 operator(])

    ident(opts) operator(=) operator([) string<delimiter(")content(proxy-only)delimiter(")>operator(,) string<delimiter(")content(weight)delimiter(")>operator(,) string<delimiter(")content(ttl)delimiter(")>operator(,) string<delimiter(")content(no-query)delimiter(")>operator(,) string<delimiter(")content(default)delimiter(")>operator(,)
             string<delimiter(")content(round-robin)delimiter(")>operator(,) string<delimiter(")content(multicast-responder)delimiter(")>operator(,) string<delimiter(")content(on)delimiter(")>operator(,) string<delimiter(")content(off)delimiter(")>operator(,) string<delimiter(")content(all)delimiter(")>operator(,)
             string<delimiter(")content(deny)delimiter(")>operator(,) string<delimiter(")content(allow)delimiter(")>operator(,) string<delimiter(")content(via)delimiter(")>operator(,) string<delimiter(")content(parent)delimiter(")>operator(,) string<delimiter(")content(no-digest)delimiter(")>operator(,) string<delimiter(")content(heap)delimiter(")>operator(,) string<delimiter(")content(lru)delimiter(")>operator(,)
             string<delimiter(")content(realm)delimiter(")>operator(,) string<delimiter(")content(children)delimiter(")>operator(,) string<delimiter(")content(credentialsttl)delimiter(")>operator(,) string<delimiter(")content(none)delimiter(")>operator(,) string<delimiter(")content(disable)delimiter(")>operator(,)
             string<delimiter(")content(offline_toggle)delimiter(")>operator(,) string<delimiter(")content(diskd)delimiter(")>operator(,) string<delimiter(")content(q1)delimiter(")>operator(,) string<delimiter(")content(q2)delimiter(")>operator(,)
             operator(])

    ident(actions) operator(=) operator([) string<delimiter(")content(shutdown)delimiter(")>operator(,) string<delimiter(")content(info)delimiter(")>operator(,) string<delimiter(")content(parameter)delimiter(")>operator(,) string<delimiter(")content(server_list)delimiter(")>operator(,)
                string<delimiter(")content(client_list)delimiter(")>operator(,) string<modifier(r)delimiter(')content(squid)content(\\.)content(conf)delimiter(')>operator(,)
                operator(])

    ident(actions_stats) operator(=) operator([) string<delimiter(")content(objects)delimiter(")>operator(,) string<delimiter(")content(vm_objects)delimiter(")>operator(,) string<delimiter(")content(utilization)delimiter(")>operator(,)
                      string<delimiter(")content(ipcache)delimiter(")>operator(,) string<delimiter(")content(fqdncache)delimiter(")>operator(,) string<delimiter(")content(dns)delimiter(")>operator(,) string<delimiter(")content(redirector)delimiter(")>operator(,) string<delimiter(")content(io)delimiter(")>operator(,)
                      string<delimiter(")content(reply_headers)delimiter(")>operator(,) string<delimiter(")content(filedescriptors)delimiter(")>operator(,) string<delimiter(")content(netdb)delimiter(")>operator(,)
                      operator(])

    ident(actions_log) operator(=) operator([) string<delimiter(")content(status)delimiter(")>operator(,) string<delimiter(")content(enable)delimiter(")>operator(,) string<delimiter(")content(disable)delimiter(")>operator(,) string<delimiter(")content(clear)delimiter(")>operator(])

    ident(acls) operator(=) operator([) string<delimiter(")content(url_regex)delimiter(")>operator(,) string<delimiter(")content(urlpath_regex)delimiter(")>operator(,) string<delimiter(")content(referer_regex)delimiter(")>operator(,) string<delimiter(")content(port)delimiter(")>operator(,)
             string<delimiter(")content(proto)delimiter(")>operator(,) string<delimiter(")content(req_mime_type)delimiter(")>operator(,) string<delimiter(")content(rep_mime_type)delimiter(")>operator(,) string<delimiter(")content(method)delimiter(")>operator(,)
             string<delimiter(")content(browser)delimiter(")>operator(,) string<delimiter(")content(user)delimiter(")>operator(,) string<delimiter(")content(src)delimiter(")>operator(,) string<delimiter(")content(dst)delimiter(")>operator(,) string<delimiter(")content(time)delimiter(")>operator(,) string<delimiter(")content(dstdomain)delimiter(")>operator(,) string<delimiter(")content(ident)delimiter(")>operator(,)
             string<delimiter(")content(snmp_community)delimiter(")>operator(,)
             operator(])

    ident(ip_re) operator(=) string<modifier(r)delimiter(')content(\\b)content((?:)content(\\d)content({1,3})content(\\.)content(\){3})content(\\d)content({1,3})content(\\b)delimiter(')>

    keyword(def) method(makelistre)operator(()predefined(list)operator(\))operator(:)
        keyword(return) string<modifier(r)delimiter(')content(\\b)content((?:)delimiter(')>operator(+)string<delimiter(')content(|)delimiter(')>operator(.)ident(join)operator(()predefined(list)operator(\))operator(+)string<modifier(r)delimiter(')content(\))content(\\b)delimiter(')>

    ident(tokens) operator(=) operator({)
        string<delimiter(')content(root)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\s)content(+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(#)delimiter(')>operator(,) ident(Comment)operator(,) string<delimiter(')content(comment)delimiter(')>operator(\))operator(,)
            operator(()ident(makelistre)operator(()ident(keywords)operator(\))operator(,) ident(Keyword)operator(\))operator(,)
            operator(()ident(makelistre)operator(()ident(opts)operator(\))operator(,) ident(Name)operator(.)ident(Constant)operator(\))operator(,)
            comment(# Actions)
            operator(()ident(makelistre)operator(()ident(actions)operator(\))operator(,) ident(String)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(stats/)delimiter(')>operator(+)ident(makelistre)operator(()ident(actions)operator(\))operator(,) ident(String)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(log/)delimiter(')>operator(+)ident(makelistre)operator(()ident(actions)operator(\))operator(+)string<modifier(r)delimiter(')content(=)delimiter(')>operator(,) ident(String)operator(\))operator(,)
            operator(()ident(makelistre)operator(()ident(acls)operator(\))operator(,) ident(Keyword)operator(\))operator(,)
            operator(()ident(ip_re)operator(+)string<modifier(r)delimiter(')content((?:/(?:)delimiter(')>operator(+)ident(ip_re)operator(+)string<modifier(r)delimiter(')content(\)|)content(\\d)content(+\)?)delimiter(')>operator(,) ident(Number)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\b)content(\\d)content(+)content(\\b)delimiter(')>operator(,) ident(Number)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\S)content(+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(comment)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\s)content(*TAG:.*)delimiter(')>operator(,) ident(String)operator(.)ident(Escape)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(.*)delimiter(')>operator(,) ident(Comment)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
    operator(})


keyword(class) class(DebianControlLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Lexer for Debian ``control`` files and ``apt-cache show <pkg>`` outputs.)content(
)content(
)content(    *New in Pygments 0.9.*)content(
)content(    )delimiter(""")>
    ident(name) operator(=) string<delimiter(')content(Debian Control file)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(control)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(control)delimiter(')>operator(])

    ident(tokens) operator(=) operator({)
        string<delimiter(')content(root)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(^(Description\))delimiter(')>operator(,) ident(Keyword)operator(,) string<delimiter(')content(description)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(^(Maintainer\)(:)content(\\s)content(*\))delimiter(')>operator(,) ident(bygroups)operator(()ident(Keyword)operator(,) ident(Text)operator(\))operator(,) string<delimiter(')content(maintainer)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(^((Build-\)?Depends\))delimiter(')>operator(,) ident(Keyword)operator(,) string<delimiter(')content(depends)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(^((?:Python-\)?Version\)(:)content(\\s)content(*\)([^)content(\\s)content(]+\)$)delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Keyword)operator(,) ident(Text)operator(,) ident(Number)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(^((?:Installed-\)?Size\)(:)content(\\s)content(*\)([^)content(\\s)content(]+\)$)delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Keyword)operator(,) ident(Text)operator(,) ident(Number)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(^(MD5Sum|SHA1|SHA256\)(:)content(\\s)content(*\)([^)content(\\s)content(]+\)$)delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Keyword)operator(,) ident(Text)operator(,) ident(Number)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(^([a-zA-Z)content(\\-)content(0-9)content(\\.)content(]*?\)(:)content(\\s)content(*\)(.*?\)$)delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Keyword)operator(,) ident(Whitespace)operator(,) ident(String)operator(\))operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(maintainer)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(<[^>]+>)delimiter(')>operator(,) ident(Generic)operator(.)ident(Strong)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(<[^>]+>$)delimiter(')>operator(,) ident(Generic)operator(.)ident(Strong)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(,)content(\\n)content(?)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(.)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(description)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content((.*\)(Homepage\)(: \)([^)content(\\s)content(]+\))delimiter(')>operator(,) ident(bygroups)operator(()ident(Text)operator(,) ident(String)operator(,) ident(Name)operator(,) ident(Name)operator(.)ident(Class)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(:.*)content(\\n)delimiter(')>operator(,) ident(Generic)operator(.)ident(Strong)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content( .*)content(\\n)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<delimiter(')delimiter(')>operator(,) ident(Text)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(depends)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(:)content(\\s)content(*)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(()content(\\$)content(\)()content(\\{)content(\)()content(\\w)content(+)content(\\s)content(*:)content(\\s)content(*)content(\\w)content(+\))delimiter(')>operator(,) ident(bygroups)operator(()ident(Operator)operator(,) ident(Text)operator(,) ident(Name)operator(.)ident(Entity)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\()delimiter(')>operator(,) ident(Text)operator(,) string<delimiter(')content(depend_vers)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(,)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\|)delimiter(')>operator(,) ident(Operator)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([)content(\\s)content(]+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([})content(\\\))content(])content(\\s)content(*$)delimiter(')>operator(,) ident(Text)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([}])delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([^,]$)delimiter(')>operator(,) ident(Name)operator(.)ident(Function)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(([)content(\\+)content(\\.)content(a-zA-Z0-9-][)content(\\s)content(\\n)content(]*\))delimiter(')>operator(,) ident(Name)operator(.)ident(Function)operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(depend_vers)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\\))content(,)delimiter(')>operator(,) ident(Text)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\\))content([^,])delimiter(')>operator(,) ident(Text)operator(,) string<delimiter(')content(#pop:2)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(([><=]+\)()content(\\s)content(*\)([^)content(\\\))content(]+\))delimiter(')>operator(,) ident(bygroups)operator(()ident(Operator)operator(,) ident(Text)operator(,) ident(Number)operator(\))operator(\))
        operator(])
    operator(})


keyword(class) class(YamlLexerContext)operator(()ident(LexerContext)operator(\))operator(:)
    docstring<delimiter(""")content(Indentation context for the YAML lexer.)delimiter(""")>

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) operator(*)ident(args)operator(,) operator(**)ident(kwds)operator(\))operator(:)
        predefined(super)operator(()ident(YamlLexerContext)operator(,) predefined_constant(self)operator(\))operator(.)ident(__init__)operator(()operator(*)ident(args)operator(,) operator(**)ident(kwds)operator(\))
        predefined_constant(self)operator(.)ident(indent_stack) operator(=) operator([)operator(])
        predefined_constant(self)operator(.)ident(indent) operator(=) operator(-)integer(1)
        predefined_constant(self)operator(.)ident(next_indent) operator(=) integer(0)
        predefined_constant(self)operator(.)ident(block_scalar_indent) operator(=) predefined_constant(None)


keyword(class) class(YamlLexer)operator(()ident(ExtendedRegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Lexer for `YAML <http://yaml.org/>`_, a human-friendly data serialization)content(
)content(    language.)content(
)content(
)content(    *New in Pygments 0.11.*)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(YAML)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(yaml)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.yaml)delimiter(')>operator(,) string<delimiter(')content(*.yml)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(text/x-yaml)delimiter(')>operator(])


    keyword(def) method(something)operator(()ident(token_class)operator(\))operator(:)
        docstring<delimiter(""")content(Do not produce empty tokens.)delimiter(""")>
        keyword(def) method(callback)operator(()ident(lexer)operator(,) ident(match)operator(,) ident(context)operator(\))operator(:)
            ident(text) operator(=) ident(match)operator(.)ident(group)operator(()operator(\))
            keyword(if) keyword(not) ident(text)operator(:)
                keyword(return)
            keyword(yield) ident(match)operator(.)ident(start)operator(()operator(\))operator(,) ident(token_class)operator(,) ident(text)
            ident(context)operator(.)ident(pos) operator(=) ident(match)operator(.)ident(end)operator(()operator(\))
        keyword(return) ident(callback)

    keyword(def) method(reset_indent)operator(()ident(token_class)operator(\))operator(:)
        docstring<delimiter(""")content(Reset the indentation levels.)delimiter(""")>
        keyword(def) method(callback)operator(()ident(lexer)operator(,) ident(match)operator(,) ident(context)operator(\))operator(:)
            ident(text) operator(=) ident(match)operator(.)ident(group)operator(()operator(\))
            ident(context)operator(.)ident(indent_stack) operator(=) operator([)operator(])
            ident(context)operator(.)ident(indent) operator(=) operator(-)integer(1)
            ident(context)operator(.)ident(next_indent) operator(=) integer(0)
            ident(context)operator(.)ident(block_scalar_indent) operator(=) predefined_constant(None)
            keyword(yield) ident(match)operator(.)ident(start)operator(()operator(\))operator(,) ident(token_class)operator(,) ident(text)
            ident(context)operator(.)ident(pos) operator(=) ident(match)operator(.)ident(end)operator(()operator(\))
        keyword(return) ident(callback)

    keyword(def) method(save_indent)operator(()ident(token_class)operator(,) ident(start)operator(=)predefined_constant(False)operator(\))operator(:)
        docstring<delimiter(""")content(Save a possible indentation level.)delimiter(""")>
        keyword(def) method(callback)operator(()ident(lexer)operator(,) ident(match)operator(,) ident(context)operator(\))operator(:)
            ident(text) operator(=) ident(match)operator(.)ident(group)operator(()operator(\))
            ident(extra) operator(=) string<delimiter(')delimiter(')>
            keyword(if) ident(start)operator(:)
                ident(context)operator(.)ident(next_indent) operator(=) predefined(len)operator(()ident(text)operator(\))
                keyword(if) ident(context)operator(.)ident(next_indent) operator(<) ident(context)operator(.)ident(indent)operator(:)
                    keyword(while) ident(context)operator(.)ident(next_indent) operator(<) ident(context)operator(.)ident(indent)operator(:)
                        ident(context)operator(.)ident(indent) operator(=) ident(context)operator(.)ident(indent_stack)operator(.)ident(pop)operator(()operator(\))
                    keyword(if) ident(context)operator(.)ident(next_indent) operator(>) ident(context)operator(.)ident(indent)operator(:)
                        ident(extra) operator(=) ident(text)operator([)ident(context)operator(.)ident(indent)operator(:)operator(])
                        ident(text) operator(=) ident(text)operator([)operator(:)ident(context)operator(.)ident(indent)operator(])
            keyword(else)operator(:)
                ident(context)operator(.)ident(next_indent) operator(+=) predefined(len)operator(()ident(text)operator(\))
            keyword(if) ident(text)operator(:)
                keyword(yield) ident(match)operator(.)ident(start)operator(()operator(\))operator(,) ident(token_class)operator(,) ident(text)
            keyword(if) ident(extra)operator(:)
                keyword(yield) ident(match)operator(.)ident(start)operator(()operator(\))operator(+)predefined(len)operator(()ident(text)operator(\))operator(,) ident(token_class)operator(.)ident(Error)operator(,) ident(extra)
            ident(context)operator(.)ident(pos) operator(=) ident(match)operator(.)ident(end)operator(()operator(\))
        keyword(return) ident(callback)

    keyword(def) method(set_indent)operator(()ident(token_class)operator(,) ident(implicit)operator(=)predefined_constant(False)operator(\))operator(:)
        docstring<delimiter(""")content(Set the previously saved indentation level.)delimiter(""")>
        keyword(def) method(callback)operator(()ident(lexer)operator(,) ident(match)operator(,) ident(context)operator(\))operator(:)
            ident(text) operator(=) ident(match)operator(.)ident(group)operator(()operator(\))
            keyword(if) ident(context)operator(.)ident(indent) operator(<) ident(context)operator(.)ident(next_indent)operator(:)
                ident(context)operator(.)ident(indent_stack)operator(.)ident(append)operator(()ident(context)operator(.)ident(indent)operator(\))
                ident(context)operator(.)ident(indent) operator(=) ident(context)operator(.)ident(next_indent)
            keyword(if) keyword(not) ident(implicit)operator(:)
                ident(context)operator(.)ident(next_indent) operator(+=) predefined(len)operator(()ident(text)operator(\))
            keyword(yield) ident(match)operator(.)ident(start)operator(()operator(\))operator(,) ident(token_class)operator(,) ident(text)
            ident(context)operator(.)ident(pos) operator(=) ident(match)operator(.)ident(end)operator(()operator(\))
        keyword(return) ident(callback)

    keyword(def) method(set_block_scalar_indent)operator(()ident(token_class)operator(\))operator(:)
        docstring<delimiter(""")content(Set an explicit indentation level for a block scalar.)delimiter(""")>
        keyword(def) method(callback)operator(()ident(lexer)operator(,) ident(match)operator(,) ident(context)operator(\))operator(:)
            ident(text) operator(=) ident(match)operator(.)ident(group)operator(()operator(\))
            ident(context)operator(.)ident(block_scalar_indent) operator(=) predefined_constant(None)
            keyword(if) keyword(not) ident(text)operator(:)
                keyword(return)
            ident(increment) operator(=) ident(match)operator(.)ident(group)operator(()integer(1)operator(\))
            keyword(if) ident(increment)operator(:)
                ident(current_indent) operator(=) predefined(max)operator(()ident(context)operator(.)ident(indent)operator(,) integer(0)operator(\))
                ident(increment) operator(=) predefined(int)operator(()ident(increment)operator(\))
                ident(context)operator(.)ident(block_scalar_indent) operator(=) ident(current_indent) operator(+) ident(increment)
            keyword(if) ident(text)operator(:)
                keyword(yield) ident(match)operator(.)ident(start)operator(()operator(\))operator(,) ident(token_class)operator(,) ident(text)
                ident(context)operator(.)ident(pos) operator(=) ident(match)operator(.)ident(end)operator(()operator(\))
        keyword(return) ident(callback)

    keyword(def) method(parse_block_scalar_empty_line)operator(()ident(indent_token_class)operator(,) ident(content_token_class)operator(\))operator(:)
        docstring<delimiter(""")content(Process an empty line in a block scalar.)delimiter(""")>
        keyword(def) method(callback)operator(()ident(lexer)operator(,) ident(match)operator(,) ident(context)operator(\))operator(:)
            ident(text) operator(=) ident(match)operator(.)ident(group)operator(()operator(\))
            keyword(if) operator(()ident(context)operator(.)ident(block_scalar_indent) keyword(is) predefined_constant(None) keyword(or)
                    predefined(len)operator(()ident(text)operator(\)) operator(<=) ident(context)operator(.)ident(block_scalar_indent)operator(\))operator(:)
                keyword(if) ident(text)operator(:)
                    keyword(yield) ident(match)operator(.)ident(start)operator(()operator(\))operator(,) ident(indent_token_class)operator(,) ident(text)
            keyword(else)operator(:)
                ident(indentation) operator(=) ident(text)operator([)operator(:)ident(context)operator(.)ident(block_scalar_indent)operator(])
                ident(content) operator(=) ident(text)operator([)ident(context)operator(.)ident(block_scalar_indent)operator(:)operator(])
                keyword(yield) ident(match)operator(.)ident(start)operator(()operator(\))operator(,) ident(indent_token_class)operator(,) ident(indentation)
                keyword(yield) operator(()ident(match)operator(.)ident(start)operator(()operator(\))operator(+)ident(context)operator(.)ident(block_scalar_indent)operator(,)
                        ident(content_token_class)operator(,) ident(content)operator(\))
            ident(context)operator(.)ident(pos) operator(=) ident(match)operator(.)ident(end)operator(()operator(\))
        keyword(return) ident(callback)

    keyword(def) method(parse_block_scalar_indent)operator(()ident(token_class)operator(\))operator(:)
        docstring<delimiter(""")content(Process indentation spaces in a block scalar.)delimiter(""")>
        keyword(def) method(callback)operator(()ident(lexer)operator(,) ident(match)operator(,) ident(context)operator(\))operator(:)
            ident(text) operator(=) ident(match)operator(.)ident(group)operator(()operator(\))
            keyword(if) ident(context)operator(.)ident(block_scalar_indent) keyword(is) predefined_constant(None)operator(:)
                keyword(if) predefined(len)operator(()ident(text)operator(\)) operator(<=) predefined(max)operator(()ident(context)operator(.)ident(indent)operator(,) integer(0)operator(\))operator(:)
                    ident(context)operator(.)ident(stack)operator(.)ident(pop)operator(()operator(\))
                    ident(context)operator(.)ident(stack)operator(.)ident(pop)operator(()operator(\))
                    keyword(return)
                ident(context)operator(.)ident(block_scalar_indent) operator(=) predefined(len)operator(()ident(text)operator(\))
            keyword(else)operator(:)
                keyword(if) predefined(len)operator(()ident(text)operator(\)) operator(<) ident(context)operator(.)ident(block_scalar_indent)operator(:)
                    ident(context)operator(.)ident(stack)operator(.)ident(pop)operator(()operator(\))
                    ident(context)operator(.)ident(stack)operator(.)ident(pop)operator(()operator(\))
                    keyword(return)
            keyword(if) ident(text)operator(:)
                keyword(yield) ident(match)operator(.)ident(start)operator(()operator(\))operator(,) ident(token_class)operator(,) ident(text)
                ident(context)operator(.)ident(pos) operator(=) ident(match)operator(.)ident(end)operator(()operator(\))
        keyword(return) ident(callback)

    keyword(def) method(parse_plain_scalar_indent)operator(()ident(token_class)operator(\))operator(:)
        docstring<delimiter(""")content(Process indentation spaces in a plain scalar.)delimiter(""")>
        keyword(def) method(callback)operator(()ident(lexer)operator(,) ident(match)operator(,) ident(context)operator(\))operator(:)
            ident(text) operator(=) ident(match)operator(.)ident(group)operator(()operator(\))
            keyword(if) predefined(len)operator(()ident(text)operator(\)) operator(<=) ident(context)operator(.)ident(indent)operator(:)
                ident(context)operator(.)ident(stack)operator(.)ident(pop)operator(()operator(\))
                ident(context)operator(.)ident(stack)operator(.)ident(pop)operator(()operator(\))
                keyword(return)
            keyword(if) ident(text)operator(:)
                keyword(yield) ident(match)operator(.)ident(start)operator(()operator(\))operator(,) ident(token_class)operator(,) ident(text)
                ident(context)operator(.)ident(pos) operator(=) ident(match)operator(.)ident(end)operator(()operator(\))
        keyword(return) ident(callback)



    ident(tokens) operator(=) operator({)
        comment(# the root rules)
        string<delimiter(')content(root)delimiter(')>operator(:) operator([)
            comment(# ignored whitespaces)
            operator(()string<modifier(r)delimiter(')content([ ]+(?=#|$\))delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            comment(# line breaks)
            operator(()string<modifier(r)delimiter(')content(\\n)content(+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            comment(# a comment)
            operator(()string<modifier(r)delimiter(')content(#[^)content(\\n)content(]*)delimiter(')>operator(,) ident(Comment)operator(.)ident(Single)operator(\))operator(,)
            comment(# the '%YAML' directive)
            operator(()string<modifier(r)delimiter(')content(^%YAML(?=[ ]|$\))delimiter(')>operator(,) ident(reset_indent)operator(()ident(Name)operator(.)ident(Tag)operator(\))operator(,) string<delimiter(')content(yaml-directive)delimiter(')>operator(\))operator(,)
            comment(# the %TAG directive)
            operator(()string<modifier(r)delimiter(')content(^%TAG(?=[ ]|$\))delimiter(')>operator(,) ident(reset_indent)operator(()ident(Name)operator(.)ident(Tag)operator(\))operator(,) string<delimiter(')content(tag-directive)delimiter(')>operator(\))operator(,)
            comment(# document start and document end indicators)
            operator(()string<modifier(r)delimiter(')content(^(?:---|)content(\\.)content(\\.)content(\\.)content(\)(?=[ ]|$\))delimiter(')>operator(,) ident(reset_indent)operator(()ident(Name)operator(.)ident(Namespace)operator(\))operator(,)
             string<delimiter(')content(block-line)delimiter(')>operator(\))operator(,)
            comment(# indentation spaces)
            operator(()string<modifier(r)delimiter(')content([ ]*(?![ )content(\\t)content(\\n)content(\\r)content(\\f)content(\\v)content(]|$\))delimiter(')>operator(,) ident(save_indent)operator(()ident(Text)operator(,) ident(start)operator(=)predefined_constant(True)operator(\))operator(,)
             operator(()string<delimiter(')content(block-line)delimiter(')>operator(,) string<delimiter(')content(indentation)delimiter(')>operator(\))operator(\))operator(,)
        operator(])operator(,)

        comment(# trailing whitespaces after directives or a block scalar indicator)
        string<delimiter(')content(ignored-line)delimiter(')>operator(:) operator([)
            comment(# ignored whitespaces)
            operator(()string<modifier(r)delimiter(')content([ ]+(?=#|$\))delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            comment(# a comment)
            operator(()string<modifier(r)delimiter(')content(#[^)content(\\n)content(]*)delimiter(')>operator(,) ident(Comment)operator(.)ident(Single)operator(\))operator(,)
            comment(# line break)
            operator(()string<modifier(r)delimiter(')content(\\n)delimiter(')>operator(,) ident(Text)operator(,) string<delimiter(')content(#pop:2)delimiter(')>operator(\))operator(,)
        operator(])operator(,)

        comment(# the %YAML directive)
        string<delimiter(')content(yaml-directive)delimiter(')>operator(:) operator([)
            comment(# the version number)
            operator(()string<modifier(r)delimiter(')content(([ ]+\)([0-9]+)content(\\.)content([0-9]+\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Text)operator(,) ident(Number)operator(\))operator(,) string<delimiter(')content(ignored-line)delimiter(')>operator(\))operator(,)
        operator(])operator(,)

        comment(# the %YAG directive)
        string<delimiter(')content(tag-directive)delimiter(')>operator(:) operator([)
            comment(# a tag handle and the corresponding prefix)
            operator(()string<modifier(r)delimiter(')content(([ ]+\)(!|![0-9A-Za-z_-]*!\))delimiter(')>
             string<modifier(r)delimiter(')content(([ ]+\)(!|!?[0-9A-Za-z;/?:@&=+$,_.!~*)content(\\')content((\))content(\\[)content(\\])content(%-]+\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Text)operator(,) ident(Keyword)operator(.)ident(Type)operator(,) ident(Text)operator(,) ident(Keyword)operator(.)ident(Type)operator(\))operator(,)
             string<delimiter(')content(ignored-line)delimiter(')>operator(\))operator(,)
        operator(])operator(,)

        comment(# block scalar indicators and indentation spaces)
        string<delimiter(')content(indentation)delimiter(')>operator(:) operator([)
            comment(# trailing whitespaces are ignored)
            operator(()string<modifier(r)delimiter(')content([ ]*$)delimiter(')>operator(,) ident(something)operator(()ident(Text)operator(\))operator(,) string<delimiter(')content(#pop:2)delimiter(')>operator(\))operator(,)
            comment(# whitespaces preceeding block collection indicators)
            operator(()string<modifier(r)delimiter(')content([ ]+(?=[?:-](?:[ ]|$\)\))delimiter(')>operator(,) ident(save_indent)operator(()ident(Text)operator(\))operator(\))operator(,)
            comment(# block collection indicators)
            operator(()string<modifier(r)delimiter(')content([?:-](?=[ ]|$\))delimiter(')>operator(,) ident(set_indent)operator(()ident(Punctuation)operator(.)ident(Indicator)operator(\))operator(\))operator(,)
            comment(# the beginning a block line)
            operator(()string<modifier(r)delimiter(')content([ ]*)delimiter(')>operator(,) ident(save_indent)operator(()ident(Text)operator(\))operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
        operator(])operator(,)

        comment(# an indented line in the block context)
        string<delimiter(')content(block-line)delimiter(')>operator(:) operator([)
            comment(# the line end)
            operator(()string<modifier(r)delimiter(')content([ ]*(?=#|$\))delimiter(')>operator(,) ident(something)operator(()ident(Text)operator(\))operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            comment(# whitespaces separating tokens)
            operator(()string<modifier(r)delimiter(')content([ ]+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            comment(# tags, anchors and aliases,)
            ident(include)operator(()string<delimiter(')content(descriptors)delimiter(')>operator(\))operator(,)
            comment(# block collections and scalars)
            ident(include)operator(()string<delimiter(')content(block-nodes)delimiter(')>operator(\))operator(,)
            comment(# flow collections and quoted scalars)
            ident(include)operator(()string<delimiter(')content(flow-nodes)delimiter(')>operator(\))operator(,)
            comment(# a plain scalar)
            operator(()string<modifier(r)delimiter(')content((?=[^ )content(\\t)content(\\n)content(\\r)content(\\f)content(\\v)content(?:,)content(\\[)content(\\])content({}#&*!|>)content(\\')content("%@`-]|[?:-][^ )content(\\t)content(\\n)content(\\r)content(\\f)content(\\v)content(]\))delimiter(')>operator(,)
             ident(something)operator(()ident(Name)operator(.)ident(Variable)operator(\))operator(,)
             string<delimiter(')content(plain-scalar-in-block-context)delimiter(')>operator(\))operator(,)
        operator(])operator(,)

        comment(# tags, anchors, aliases)
        string<delimiter(')content(descriptors)delimiter(')> operator(:) operator([)
            comment(# a full-form tag)
            operator(()string<modifier(r)delimiter(')content(!<[0-9A-Za-z;/?:@&=+$,_.!~*)content(\\')content((\))content(\\[)content(\\])content(%-]+>)delimiter(')>operator(,) ident(Keyword)operator(.)ident(Type)operator(\))operator(,)
            comment(# a tag in the form '!', '!suffix' or '!handle!suffix')
            operator(()string<modifier(r)delimiter(')content(!(?:[0-9A-Za-z_-]+\)?)delimiter(')>
             string<modifier(r)delimiter(')content((?:![0-9A-Za-z;/?:@&=+$,_.!~*)content(\\')content((\))content(\\[)content(\\])content(%-]+\)?)delimiter(')>operator(,) ident(Keyword)operator(.)ident(Type)operator(\))operator(,)
            comment(# an anchor)
            operator(()string<modifier(r)delimiter(')content(&[0-9A-Za-z_-]+)delimiter(')>operator(,) ident(Name)operator(.)ident(Label)operator(\))operator(,)
            comment(# an alias)
            operator(()string<modifier(r)delimiter(')content(\\*)content([0-9A-Za-z_-]+)delimiter(')>operator(,) ident(Name)operator(.)ident(Variable)operator(\))operator(,)
        operator(])operator(,)

        comment(# block collections and scalars)
        string<delimiter(')content(block-nodes)delimiter(')>operator(:) operator([)
            comment(# implicit key)
            operator(()string<modifier(r)delimiter(')content(:(?=[ ]|$\))delimiter(')>operator(,) ident(set_indent)operator(()ident(Punctuation)operator(.)ident(Indicator)operator(,) ident(implicit)operator(=)predefined_constant(True)operator(\))operator(\))operator(,)
            comment(# literal and folded scalars)
            operator(()string<modifier(r)delimiter(')content([|>])delimiter(')>operator(,) ident(Punctuation)operator(.)ident(Indicator)operator(,)
             operator(()string<delimiter(')content(block-scalar-content)delimiter(')>operator(,) string<delimiter(')content(block-scalar-header)delimiter(')>operator(\))operator(\))operator(,)
        operator(])operator(,)

        comment(# flow collections and quoted scalars)
        string<delimiter(')content(flow-nodes)delimiter(')>operator(:) operator([)
            comment(# a flow sequence)
            operator(()string<modifier(r)delimiter(')content(\\[)delimiter(')>operator(,) ident(Punctuation)operator(.)ident(Indicator)operator(,) string<delimiter(')content(flow-sequence)delimiter(')>operator(\))operator(,)
            comment(# a flow mapping)
            operator(()string<modifier(r)delimiter(')content(\\{)delimiter(')>operator(,) ident(Punctuation)operator(.)ident(Indicator)operator(,) string<delimiter(')content(flow-mapping)delimiter(')>operator(\))operator(,)
            comment(# a single-quoted scalar)
            operator(()string<modifier(r)delimiter(')content(\\')delimiter(')>operator(,) ident(String)operator(,) string<delimiter(')content(single-quoted-scalar)delimiter(')>operator(\))operator(,)
            comment(# a double-quoted scalar)
            operator(()string<modifier(r)delimiter(')content(\\")delimiter(')>operator(,) ident(String)operator(,) string<delimiter(')content(double-quoted-scalar)delimiter(')>operator(\))operator(,)
        operator(])operator(,)

        comment(# the content of a flow collection)
        string<delimiter(')content(flow-collection)delimiter(')>operator(:) operator([)
            comment(# whitespaces)
            operator(()string<modifier(r)delimiter(')content([ ]+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            comment(# line breaks)
            operator(()string<modifier(r)delimiter(')content(\\n)content(+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            comment(# a comment)
            operator(()string<modifier(r)delimiter(')content(#[^)content(\\n)content(]*)delimiter(')>operator(,) ident(Comment)operator(.)ident(Single)operator(\))operator(,)
            comment(# simple indicators)
            operator(()string<modifier(r)delimiter(')content([?:,])delimiter(')>operator(,) ident(Punctuation)operator(.)ident(Indicator)operator(\))operator(,)
            comment(# tags, anchors and aliases)
            ident(include)operator(()string<delimiter(')content(descriptors)delimiter(')>operator(\))operator(,)
            comment(# nested collections and quoted scalars)
            ident(include)operator(()string<delimiter(')content(flow-nodes)delimiter(')>operator(\))operator(,)
            comment(# a plain scalar)
            operator(()string<modifier(r)delimiter(')content((?=[^ )content(\\t)content(\\n)content(\\r)content(\\f)content(\\v)content(?:,)content(\\[)content(\\])content({}#&*!|>)content(\\')content("%@`]\))delimiter(')>operator(,)
             ident(something)operator(()ident(Name)operator(.)ident(Variable)operator(\))operator(,)
             string<delimiter(')content(plain-scalar-in-flow-context)delimiter(')>operator(\))operator(,)
        operator(])operator(,)

        comment(# a flow sequence indicated by '[' and ']')
        string<delimiter(')content(flow-sequence)delimiter(')>operator(:) operator([)
            comment(# include flow collection rules)
            ident(include)operator(()string<delimiter(')content(flow-collection)delimiter(')>operator(\))operator(,)
            comment(# the closing indicator)
            operator(()string<modifier(r)delimiter(')content(\\])delimiter(')>operator(,) ident(Punctuation)operator(.)ident(Indicator)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
        operator(])operator(,)

        comment(# a flow mapping indicated by '{' and '}')
        string<delimiter(')content(flow-mapping)delimiter(')>operator(:) operator([)
            comment(# include flow collection rules)
            ident(include)operator(()string<delimiter(')content(flow-collection)delimiter(')>operator(\))operator(,)
            comment(# the closing indicator)
            operator(()string<modifier(r)delimiter(')content(\\})delimiter(')>operator(,) ident(Punctuation)operator(.)ident(Indicator)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
        operator(])operator(,)

        comment(# block scalar lines)
        string<delimiter(')content(block-scalar-content)delimiter(')>operator(:) operator([)
            comment(# line break)
            operator(()string<modifier(r)delimiter(')content(\\n)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            comment(# empty line)
            operator(()string<modifier(r)delimiter(')content(^[ ]+$)delimiter(')>operator(,)
             ident(parse_block_scalar_empty_line)operator(()ident(Text)operator(,) ident(Name)operator(.)ident(Constant)operator(\))operator(\))operator(,)
            comment(# indentation spaces (we may leave the state here\))
            operator(()string<modifier(r)delimiter(')content(^[ ]*)delimiter(')>operator(,) ident(parse_block_scalar_indent)operator(()ident(Text)operator(\))operator(\))operator(,)
            comment(# line content)
            operator(()string<modifier(r)delimiter(')content([^)content(\\n)content(\\r)content(\\f)content(\\v)content(]+)delimiter(')>operator(,) ident(Name)operator(.)ident(Constant)operator(\))operator(,)
        operator(])operator(,)

        comment(# the content of a literal or folded scalar)
        string<delimiter(')content(block-scalar-header)delimiter(')>operator(:) operator([)
            comment(# indentation indicator followed by chomping flag)
            operator(()string<modifier(r)delimiter(')content(([1-9]\)?[+-]?(?=[ ]|$\))delimiter(')>operator(,)
             ident(set_block_scalar_indent)operator(()ident(Punctuation)operator(.)ident(Indicator)operator(\))operator(,)
             string<delimiter(')content(ignored-line)delimiter(')>operator(\))operator(,)
            comment(# chomping flag followed by indentation indicator)
            operator(()string<modifier(r)delimiter(')content([+-]?([1-9]\)?(?=[ ]|$\))delimiter(')>operator(,)
             ident(set_block_scalar_indent)operator(()ident(Punctuation)operator(.)ident(Indicator)operator(\))operator(,)
             string<delimiter(')content(ignored-line)delimiter(')>operator(\))operator(,)
        operator(])operator(,)

        comment(# ignored and regular whitespaces in quoted scalars)
        string<delimiter(')content(quoted-scalar-whitespaces)delimiter(')>operator(:) operator([)
            comment(# leading and trailing whitespaces are ignored)
            operator(()string<modifier(r)delimiter(')content(^[ ]+|[ ]+$)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            comment(# line breaks are ignored)
            operator(()string<modifier(r)delimiter(')content(\\n)content(+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            comment(# other whitespaces are a part of the value)
            operator(()string<modifier(r)delimiter(')content([ ]+)delimiter(')>operator(,) ident(Name)operator(.)ident(Variable)operator(\))operator(,)
        operator(])operator(,)

        comment(# single-quoted scalars)
        string<delimiter(')content(single-quoted-scalar)delimiter(')>operator(:) operator([)
            comment(# include whitespace and line break rules)
            ident(include)operator(()string<delimiter(')content(quoted-scalar-whitespaces)delimiter(')>operator(\))operator(,)
            comment(# escaping of the quote character)
            operator(()string<modifier(r)delimiter(')content(\\')content(\\')delimiter(')>operator(,) ident(String)operator(.)ident(Escape)operator(\))operator(,)
            comment(# regular non-whitespace characters)
            operator(()string<modifier(r)delimiter(')content([^ )content(\\t)content(\\n)content(\\r)content(\\f)content(\\v)content(\\')content(]+)delimiter(')>operator(,) ident(String)operator(\))operator(,)
            comment(# the closing quote)
            operator(()string<modifier(r)delimiter(')content(\\')delimiter(')>operator(,) ident(String)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
        operator(])operator(,)

        comment(# double-quoted scalars)
        string<delimiter(')content(double-quoted-scalar)delimiter(')>operator(:) operator([)
            comment(# include whitespace and line break rules)
            ident(include)operator(()string<delimiter(')content(quoted-scalar-whitespaces)delimiter(')>operator(\))operator(,)
            comment(# escaping of special characters)
            operator(()string<modifier(r)delimiter(')content(\\\\)content([0abt)content(\\t)content(n)content(\\n)content(vfre ")content(\\\\)content(N_LP])delimiter(')>operator(,) ident(String)operator(\))operator(,)
            comment(# escape codes)
            operator(()string<modifier(r)delimiter(')content(\\\\)content((?:x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8}\))delimiter(')>operator(,)
             ident(String)operator(.)ident(Escape)operator(\))operator(,)
            comment(# regular non-whitespace characters)
            operator(()string<modifier(r)delimiter(')content([^ )content(\\t)content(\\n)content(\\r)content(\\f)content(\\v)content(\\")content(\\\\)content(]+)delimiter(')>operator(,) ident(String)operator(\))operator(,)
            comment(# the closing quote)
            operator(()string<modifier(r)delimiter(')content(")delimiter(')>operator(,) ident(String)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
        operator(])operator(,)

        comment(# the beginning of a new line while scanning a plain scalar)
        string<delimiter(')content(plain-scalar-in-block-context-new-line)delimiter(')>operator(:) operator([)
            comment(# empty lines)
            operator(()string<modifier(r)delimiter(')content(^[ ]+$)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            comment(# line breaks)
            operator(()string<modifier(r)delimiter(')content(\\n)content(+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            comment(# document start and document end indicators)
            operator(()string<modifier(r)delimiter(')content(^(?=---|)content(\\.)content(\\.)content(\\.)content(\))delimiter(')>operator(,) ident(something)operator(()ident(Name)operator(.)ident(Namespace)operator(\))operator(,) string<delimiter(')content(#pop:3)delimiter(')>operator(\))operator(,)
            comment(# indentation spaces (we may leave the block line state here\))
            operator(()string<modifier(r)delimiter(')content(^[ ]*)delimiter(')>operator(,) ident(parse_plain_scalar_indent)operator(()ident(Text)operator(\))operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
        operator(])operator(,)

        comment(# a plain scalar in the block context)
        string<delimiter(')content(plain-scalar-in-block-context)delimiter(')>operator(:) operator([)
            comment(# the scalar ends with the ':' indicator)
            operator(()string<modifier(r)delimiter(')content([ ]*(?=:[ ]|:$\))delimiter(')>operator(,) ident(something)operator(()ident(Text)operator(\))operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            comment(# the scalar ends with whitespaces followed by a comment)
            operator(()string<modifier(r)delimiter(')content([ ]+(?=#\))delimiter(')>operator(,) ident(Text)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            comment(# trailing whitespaces are ignored)
            operator(()string<modifier(r)delimiter(')content([ ]+$)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            comment(# line breaks are ignored)
            operator(()string<modifier(r)delimiter(')content(\\n)content(+)delimiter(')>operator(,) ident(Text)operator(,) string<delimiter(')content(plain-scalar-in-block-context-new-line)delimiter(')>operator(\))operator(,)
            comment(# other whitespaces are a part of the value)
            operator(()string<modifier(r)delimiter(')content([ ]+)delimiter(')>operator(,) ident(Literal)operator(.)ident(Scalar)operator(.)ident(Plain)operator(\))operator(,)
            comment(# regular non-whitespace characters)
            operator(()string<modifier(r)delimiter(')content((?::(?![ )content(\\t)content(\\n)content(\\r)content(\\f)content(\\v)content(]\)|[^ )content(\\t)content(\\n)content(\\r)content(\\f)content(\\v)content(:]\)+)delimiter(')>operator(,) ident(Literal)operator(.)ident(Scalar)operator(.)ident(Plain)operator(\))operator(,)
        operator(])operator(,)

        comment(# a plain scalar is the flow context)
        string<delimiter(')content(plain-scalar-in-flow-context)delimiter(')>operator(:) operator([)
            comment(# the scalar ends with an indicator character)
            operator(()string<modifier(r)delimiter(')content([ ]*(?=[,:?)content(\\[)content(\\])content({}]\))delimiter(')>operator(,) ident(something)operator(()ident(Text)operator(\))operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            comment(# the scalar ends with a comment)
            operator(()string<modifier(r)delimiter(')content([ ]+(?=#\))delimiter(')>operator(,) ident(Text)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            comment(# leading and trailing whitespaces are ignored)
            operator(()string<modifier(r)delimiter(')content(^[ ]+|[ ]+$)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            comment(# line breaks are ignored)
            operator(()string<modifier(r)delimiter(')content(\\n)content(+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            comment(# other whitespaces are a part of the value)
            operator(()string<modifier(r)delimiter(')content([ ]+)delimiter(')>operator(,) ident(Name)operator(.)ident(Variable)operator(\))operator(,)
            comment(# regular non-whitespace characters)
            operator(()string<modifier(r)delimiter(')content([^ )content(\\t)content(\\n)content(\\r)content(\\f)content(\\v)content(,:?)content(\\[)content(\\])content({}]+)delimiter(')>operator(,) ident(Name)operator(.)ident(Variable)operator(\))operator(,)
        operator(])operator(,)

    operator(})

    keyword(def) method(get_tokens_unprocessed)operator(()predefined_constant(self)operator(,) ident(text)operator(=)predefined_constant(None)operator(,) ident(context)operator(=)predefined_constant(None)operator(\))operator(:)
        keyword(if) ident(context) keyword(is) predefined_constant(None)operator(:)
            ident(context) operator(=) ident(YamlLexerContext)operator(()ident(text)operator(,) integer(0)operator(\))
        keyword(return) predefined(super)operator(()ident(YamlLexer)operator(,) predefined_constant(self)operator(\))operator(.)ident(get_tokens_unprocessed)operator(()ident(text)operator(,) ident(context)operator(\))


keyword(class) class(LighttpdConfLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Lexer for `Lighttpd <http://lighttpd.net/>`_ configuration files.)content(
)content(
)content(    *New in Pygments 0.11.*)content(
)content(    )delimiter(""")>
    ident(name) operator(=) string<delimiter(')content(Lighttpd configuration file)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(lighty)delimiter(')>operator(,) string<delimiter(')content(lighttpd)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(text/x-lighttpd-conf)delimiter(')>operator(])

    ident(tokens) operator(=) operator({)
        string<delimiter(')content(root)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(#.*)content(\\n)delimiter(')>operator(,) ident(Comment)operator(.)ident(Single)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(/)content(\\S)content(*)delimiter(')>operator(,) ident(Name)operator(\))operator(,) comment(# pathname)
            operator(()string<modifier(r)delimiter(')content([a-zA-Z._-]+)delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\d)content(+)content(\\.)content(\\d)content(+)content(\\.)content(\\d)content(+)content(\\.)content(\\d)content(+(?:/)content(\\d)content(+\)?)delimiter(')>operator(,) ident(Number)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([0-9]+)delimiter(')>operator(,) ident(Number)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(=>|=~|)content(\\+)content(=|==|=|)content(\\+)delimiter(')>operator(,) ident(Operator)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\$)content([A-Z]+)delimiter(')>operator(,) ident(Name)operator(.)ident(Builtin)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([(\){})content(\\[)content(\\])content(,])delimiter(')>operator(,) ident(Punctuation)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content("([^")content(\\\\)content(]*(?:)content(\\\\)content(.[^")content(\\\\)content(]*\)*\)")delimiter(')>operator(,) ident(String)operator(.)ident(Double)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\s)content(+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
        operator(])operator(,)

    operator(})


keyword(class) class(NginxConfLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Lexer for `Nginx <http://nginx.net/>`_ configuration files.)content(
)content(
)content(    *New in Pygments 0.11.*)content(
)content(    )delimiter(""")>
    ident(name) operator(=) string<delimiter(')content(Nginx configuration file)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(nginx)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(text/x-nginx-conf)delimiter(')>operator(])

    ident(tokens) operator(=) operator({)
        string<delimiter(')content(root)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content((include\)()content(\\s)content(+\)([^)content(\\s)content(;]+\))delimiter(')>operator(,) ident(bygroups)operator(()ident(Keyword)operator(,) ident(Text)operator(,) ident(Name)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([^)content(\\s)content(;#]+)delimiter(')>operator(,) ident(Keyword)operator(,) string<delimiter(')content(stmt)delimiter(')>operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(base)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(block)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(})delimiter(')>operator(,) ident(Punctuation)operator(,) string<delimiter(')content(#pop:2)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([^)content(\\s)content(;#]+)delimiter(')>operator(,) ident(Keyword)operator(.)ident(Namespace)operator(,) string<delimiter(')content(stmt)delimiter(')>operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(base)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(stmt)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content({)delimiter(')>operator(,) ident(Punctuation)operator(,) string<delimiter(')content(block)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(;)delimiter(')>operator(,) ident(Punctuation)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(base)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(base)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(#.*)content(\\n)delimiter(')>operator(,) ident(Comment)operator(.)ident(Single)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(on|off)delimiter(')>operator(,) ident(Name)operator(.)ident(Constant)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\$)content([^)content(\\s)content(;#(\)]+)delimiter(')>operator(,) ident(Name)operator(.)ident(Variable)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(([a-z0-9.-]+\)(:\)([0-9]+\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Name)operator(,) ident(Punctuation)operator(,) ident(Number)operator(.)ident(Integer)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([a-z-]+/[a-z-+]+)delimiter(')>operator(,) ident(String)operator(\))operator(,) comment(# mimetype)
            comment(#(r'[a-zA-Z._-]+', Keyword\),)
            operator(()string<modifier(r)delimiter(')content([0-9]+[km]?)content(\\b)delimiter(')>operator(,) ident(Number)operator(.)ident(Integer)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((~\)()content(\\s)content(*\)([^)content(\\s)content({]+\))delimiter(')>operator(,) ident(bygroups)operator(()ident(Punctuation)operator(,) ident(Text)operator(,) ident(String)operator(.)ident(Regex)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([:=~])delimiter(')>operator(,) ident(Punctuation)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([^)content(\\s)content(;#{}$]+)delimiter(')>operator(,) ident(String)operator(\))operator(,) comment(# catch all)
            operator(()string<modifier(r)delimiter(')content(/[^)content(\\s)content(;#]*)delimiter(')>operator(,) ident(Name)operator(\))operator(,) comment(# pathname)
            operator(()string<modifier(r)delimiter(')content(\\s)content(+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
        operator(])operator(,)
    operator(})
comment(# -*- coding: utf-8 -*-)
docstring<delimiter(""")content(
)content(    pygments.lexers.web)content(
)content(    ~~~~~~~~~~~~~~~~~~~)content(
)content(
)content(    Lexers for web-related languages and markup.)content(
)content(
)content(    :copyright: Copyright 2006-2009 by the Pygments team, see AUTHORS.)content(
)content(    :license: BSD, see LICENSE for details.)content(
)delimiter(""")>

keyword(import) include(re)
keyword(try)operator(:)
    predefined(set)
keyword(except) exception(NameError)operator(:)
    keyword(from) include(sets) keyword(import) include(Set) keyword(as) ident(set)

keyword(from) include(pygments.lexer) keyword(import) include(RegexLexer)operator(,) include(bygroups)operator(,) include(using)operator(,) include(include)operator(,) include(this)
keyword(from) include(pygments.token) keyword(import) \
     include(Text)operator(,) include(Comment)operator(,) include(Operator)operator(,) include(Keyword)operator(,) include(Name)operator(,) include(String)operator(,) include(Number)operator(,) include(Other)operator(,) include(Punctuation)
keyword(from) include(pygments.util) keyword(import) include(get_bool_opt)operator(,) include(get_list_opt)operator(,) include(looks_like_xml)operator(,) \
                          include(html_doctype_matches)


ident(__all__) operator(=) operator([)string<delimiter(')content(HtmlLexer)delimiter(')>operator(,) string<delimiter(')content(XmlLexer)delimiter(')>operator(,) string<delimiter(')content(JavascriptLexer)delimiter(')>operator(,) string<delimiter(')content(CssLexer)delimiter(')>operator(,)
           string<delimiter(')content(PhpLexer)delimiter(')>operator(,) string<delimiter(')content(ActionScriptLexer)delimiter(')>operator(,) string<delimiter(')content(XsltLexer)delimiter(')>operator(,) string<delimiter(')content(ActionScript3Lexer)delimiter(')>operator(,)
           string<delimiter(')content(MxmlLexer)delimiter(')>operator(])


keyword(class) class(JavascriptLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    For JavaScript source code.)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(JavaScript)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(js)delimiter(')>operator(,) string<delimiter(')content(javascript)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.js)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(application/x-javascript)delimiter(')>operator(,) string<delimiter(')content(text/x-javascript)delimiter(')>operator(,) string<delimiter(')content(text/javascript)delimiter(')>operator(])

    ident(flags) operator(=) ident(re)operator(.)ident(DOTALL)
    ident(tokens) operator(=) operator({)
        string<delimiter(')content(root)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\s)content(+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(<!--)delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(//.*?)content(\\n)delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(/)content(\\*)content(.*?)content(\\*)content(/)delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(/()content(\\\\)content(\\\\)content(|)content(\\\\)content(/|[^/)content(\\n)content(]\)*/[gim]+)content(\\b)delimiter(')>operator(,) ident(String)operator(.)ident(Regex)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(/()content(\\\\)content(\\\\)content(|)content(\\\\)content(/|[^/)content(\\n)content(]\)*/(?=)content(\\s)content(*[,\);)content(\\n)content(]\))delimiter(')>operator(,) ident(String)operator(.)ident(Regex)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(/()content(\\\\)content(\\\\)content(|)content(\\\\)content(/|[^/)content(\\n)content(]\)*/(?=)content(\\s)content(*)content(\\.)content([a-z]\))delimiter(')>operator(,) ident(String)operator(.)ident(Regex)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([~)content(\\^)content(\\*)content(!%&<>)content(\\|)content(+=:;,/?)content(\\\\)content(-]+)delimiter(')>operator(,) ident(Operator)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([{})content(\\[)content(\\])content((\);.]+)delimiter(')>operator(,) ident(Punctuation)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((for|in|while|do|break|return|continue|if|else|throw|try|)delimiter(')>
             string<modifier(r)delimiter(')content(catch|new|typeof|instanceof|this\))content(\\b)delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((var|with|const|label|function\))content(\\b)delimiter(')>operator(,) ident(Keyword)operator(.)ident(Declaration)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((true|false|null|NaN|Infinity|undefined\))content(\\b)delimiter(')>operator(,) ident(Keyword)operator(.)ident(Constant)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((Array|Boolean|Date|Error|Function|Math|netscape|)delimiter(')>
             string<modifier(r)delimiter(')content(Number|Object|Packages|RegExp|String|sun|decodeURI|)delimiter(')>
             string<modifier(r)delimiter(')content(decodeURIComponent|encodeURI|encodeURIComponent|)delimiter(')>
             string<modifier(r)delimiter(')content(Error|eval|isFinite|isNaN|parseFloat|parseInt|document|this|)delimiter(')>
             string<modifier(r)delimiter(')content(window\))content(\\b)delimiter(')>operator(,) ident(Name)operator(.)ident(Builtin)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([$a-zA-Z_][a-zA-Z0-9_]*)delimiter(')>operator(,) ident(Name)operator(.)ident(Other)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([0-9][0-9]*)content(\\.)content([0-9]+([eE][0-9]+\)?[fd]?)delimiter(')>operator(,) ident(Number)operator(.)ident(Float)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(0x[0-9a-fA-F]+)delimiter(')>operator(,) ident(Number)operator(.)ident(Hex)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([0-9]+)delimiter(')>operator(,) ident(Number)operator(.)ident(Integer)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content("()content(\\\\)content(\\\\)content(|)content(\\\\)content("|[^"]\)*")delimiter(')>operator(,) ident(String)operator(.)ident(Double)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(")content('()content(\\\\)content(\\\\)content(|)content(\\\\)content('|[^']\)*')delimiter(")>operator(,) ident(String)operator(.)ident(Single)operator(\))operator(,)
        operator(])
    operator(})


keyword(class) class(ActionScriptLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    For ActionScript source code.)content(
)content(
)content(    *New in Pygments 0.9.*)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(ActionScript)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(as)delimiter(')>operator(,) string<delimiter(')content(actionscript)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.as)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(application/x-actionscript)delimiter(')>operator(,) string<delimiter(')content(text/x-actionscript)delimiter(')>operator(,)
                 string<delimiter(')content(text/actionscript)delimiter(')>operator(])

    ident(flags) operator(=) ident(re)operator(.)ident(DOTALL)
    ident(tokens) operator(=) operator({)
        string<delimiter(')content(root)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\s)content(+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(//.*?)content(\\n)delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(/)content(\\*)content(.*?)content(\\*)content(/)delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(/()content(\\\\)content(\\\\)content(|)content(\\\\)content(/|[^/)content(\\n)content(]\)*/[gim]*)delimiter(')>operator(,) ident(String)operator(.)ident(Regex)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([~)content(\\^)content(\\*)content(!%&<>)content(\\|)content(+=:;,/?)content(\\\\)content(-]+)delimiter(')>operator(,) ident(Operator)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([{})content(\\[)content(\\])content((\);.]+)delimiter(')>operator(,) ident(Punctuation)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((case|default|for|each|in|while|do|break|return|continue|if|else|)delimiter(')>
             string<modifier(r)delimiter(')content(throw|try|catch|var|with|new|typeof|arguments|instanceof|this|)delimiter(')>
             string<modifier(r)delimiter(')content(switch\))content(\\b)delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((class|public|final|internal|native|override|private|protected|)delimiter(')>
             string<modifier(r)delimiter(')content(static|import|extends|implements|interface|intrinsic|return|super|)delimiter(')>
             string<modifier(r)delimiter(')content(dynamic|function|const|get|namespace|package|set\))content(\\b)delimiter(')>operator(,)
             ident(Keyword)operator(.)ident(Declaration)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((true|false|null|NaN|Infinity|-Infinity|undefined|Void\))content(\\b)delimiter(')>operator(,)
             ident(Keyword)operator(.)ident(Constant)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((Accessibility|AccessibilityProperties|ActionScriptVersion|)delimiter(')>
             string<modifier(r)delimiter(')content(ActivityEvent|AntiAliasType|ApplicationDomain|AsBroadcaster|Array|)delimiter(')>
             string<modifier(r)delimiter(')content(AsyncErrorEvent|AVM1Movie|BevelFilter|Bitmap|BitmapData|)delimiter(')>
             string<modifier(r)delimiter(')content(BitmapDataChannel|BitmapFilter|BitmapFilterQuality|BitmapFilterType|)delimiter(')>
             string<modifier(r)delimiter(')content(BlendMode|BlurFilter|Boolean|ByteArray|Camera|Capabilities|CapsStyle|)delimiter(')>
             string<modifier(r)delimiter(')content(Class|Color|ColorMatrixFilter|ColorTransform|ContextMenu|)delimiter(')>
             string<modifier(r)delimiter(')content(ContextMenuBuiltInItems|ContextMenuEvent|ContextMenuItem|)delimiter(')>
             string<modifier(r)delimiter(')content(ConvultionFilter|CSMSettings|DataEvent|Date|DefinitionError|)delimiter(')>
             string<modifier(r)delimiter(')content(DeleteObjectSample|Dictionary|DisplacmentMapFilter|DisplayObject|)delimiter(')>
             string<modifier(r)delimiter(')content(DisplacmentMapFilterMode|DisplayObjectContainer|DropShadowFilter|)delimiter(')>
             string<modifier(r)delimiter(')content(Endian|EOFError|Error|ErrorEvent|EvalError|Event|EventDispatcher|)delimiter(')>
             string<modifier(r)delimiter(')content(EventPhase|ExternalInterface|FileFilter|FileReference|)delimiter(')>
             string<modifier(r)delimiter(')content(FileReferenceList|FocusDirection|FocusEvent|Font|FontStyle|FontType|)delimiter(')>
             string<modifier(r)delimiter(')content(FrameLabel|FullScreenEvent|Function|GlowFilter|GradientBevelFilter|)delimiter(')>
             string<modifier(r)delimiter(')content(GradientGlowFilter|GradientType|Graphics|GridFitType|HTTPStatusEvent|)delimiter(')>
             string<modifier(r)delimiter(')content(IBitmapDrawable|ID3Info|IDataInput|IDataOutput|IDynamicPropertyOutput)delimiter(')>
             string<modifier(r)delimiter(')content(IDynamicPropertyWriter|IEventDispatcher|IExternalizable|)delimiter(')>
             string<modifier(r)delimiter(')content(IllegalOperationError|IME|IMEConversionMode|IMEEvent|int|)delimiter(')>
             string<modifier(r)delimiter(')content(InteractiveObject|InterpolationMethod|InvalidSWFError|InvokeEvent|)delimiter(')>
             string<modifier(r)delimiter(')content(IOError|IOErrorEvent|JointStyle|Key|Keyboard|KeyboardEvent|KeyLocation|)delimiter(')>
             string<modifier(r)delimiter(')content(LineScaleMode|Loader|LoaderContext|LoaderInfo|LoadVars|LocalConnection|)delimiter(')>
             string<modifier(r)delimiter(')content(Locale|Math|Matrix|MemoryError|Microphone|MorphShape|Mouse|MouseEvent|)delimiter(')>
             string<modifier(r)delimiter(')content(MovieClip|MovieClipLoader|Namespace|NetConnection|NetStatusEvent|)delimiter(')>
             string<modifier(r)delimiter(')content(NetStream|NewObjectSample|Number|Object|ObjectEncoding|PixelSnapping|)delimiter(')>
             string<modifier(r)delimiter(')content(Point|PrintJob|PrintJobOptions|PrintJobOrientation|ProgressEvent|Proxy|)delimiter(')>
             string<modifier(r)delimiter(')content(QName|RangeError|Rectangle|ReferenceError|RegExp|Responder|Sample|Scene|)delimiter(')>
             string<modifier(r)delimiter(')content(ScriptTimeoutError|Security|SecurityDomain|SecurityError|)delimiter(')>
             string<modifier(r)delimiter(')content(SecurityErrorEvent|SecurityPanel|Selection|Shape|SharedObject|)delimiter(')>
             string<modifier(r)delimiter(')content(SharedObjectFlushStatus|SimpleButton|Socket|Sound|SoundChannel|)delimiter(')>
             string<modifier(r)delimiter(')content(SoundLoaderContext|SoundMixer|SoundTransform|SpreadMethod|Sprite|)delimiter(')>
             string<modifier(r)delimiter(')content(StackFrame|StackOverflowError|Stage|StageAlign|StageDisplayState|)delimiter(')>
             string<modifier(r)delimiter(')content(StageQuality|StageScaleMode|StaticText|StatusEvent|String|StyleSheet|)delimiter(')>
             string<modifier(r)delimiter(')content(SWFVersion|SyncEvent|SyntaxError|System|TextColorType|TextField|)delimiter(')>
             string<modifier(r)delimiter(')content(TextFieldAutoSize|TextFieldType|TextFormat|TextFormatAlign|)delimiter(')>
             string<modifier(r)delimiter(')content(TextLineMetrics|TextRenderer|TextSnapshot|Timer|TimerEvent|Transform|)delimiter(')>
             string<modifier(r)delimiter(')content(TypeError|uint|URIError|URLLoader|URLLoaderDataFormat|URLRequest|)delimiter(')>
             string<modifier(r)delimiter(')content(URLRequestHeader|URLRequestMethod|URLStream|URLVariabeles|VerifyError|)delimiter(')>
             string<modifier(r)delimiter(')content(Video|XML|XMLDocument|XMLList|XMLNode|XMLNodeType|XMLSocket|XMLUI\))content(\\b)delimiter(')>operator(,)
             ident(Name)operator(.)ident(Builtin)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((decodeURI|decodeURIComponent|encodeURI|escape|eval|isFinite|isNaN|)delimiter(')>
             string<modifier(r)delimiter(')content(isXMLName|clearInterval|fscommand|getTimer|getURL|getVersion|)delimiter(')>
             string<modifier(r)delimiter(')content(isFinite|parseFloat|parseInt|setInterval|trace|updateAfterEvent|)delimiter(')>
             string<modifier(r)delimiter(')content(unescape\))content(\\b)delimiter(')>operator(,)ident(Name)operator(.)ident(Function)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([$a-zA-Z_][a-zA-Z0-9_]*)delimiter(')>operator(,) ident(Name)operator(.)ident(Other)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([0-9][0-9]*)content(\\.)content([0-9]+([eE][0-9]+\)?[fd]?)delimiter(')>operator(,) ident(Number)operator(.)ident(Float)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(0x[0-9a-f]+)delimiter(')>operator(,) ident(Number)operator(.)ident(Hex)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([0-9]+)delimiter(')>operator(,) ident(Number)operator(.)ident(Integer)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content("()content(\\\\)content(\\\\)content(|)content(\\\\)content("|[^"]\)*")delimiter(')>operator(,) ident(String)operator(.)ident(Double)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(")content('()content(\\\\)content(\\\\)content(|)content(\\\\)content('|[^']\)*')delimiter(")>operator(,) ident(String)operator(.)ident(Single)operator(\))operator(,)
        operator(])
    operator(})

    keyword(def) method(analyse_text)operator(()ident(text)operator(\))operator(:)
        keyword(return) float(0.05)


keyword(class) class(ActionScript3Lexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    For ActionScript 3 source code.)content(
)content(
)content(    *New in Pygments 0.11.*)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(ActionScript 3)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(as3)delimiter(')>operator(,) string<delimiter(')content(actionscript3)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.as)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(application/x-actionscript)delimiter(')>operator(,) string<delimiter(')content(text/x-actionscript)delimiter(')>operator(,)
                 string<delimiter(')content(text/actionscript)delimiter(')>operator(])

    ident(identifier) operator(=) string<modifier(r)delimiter(')content([$a-zA-Z_][a-zA-Z0-9_]*)delimiter(')>

    ident(flags) operator(=) ident(re)operator(.)ident(DOTALL) operator(|) ident(re)operator(.)ident(MULTILINE)
    ident(tokens) operator(=) operator({)
        string<delimiter(')content(root)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\s)content(+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((function)content(\\s)content(+\)()delimiter(')> operator(+) ident(identifier) operator(+) string<modifier(r)delimiter(')content(\)()content(\\s)content(*\)()content(\\()content(\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Keyword)operator(.)ident(Declaration)operator(,) ident(Name)operator(.)ident(Function)operator(,) ident(Text)operator(,) ident(Operator)operator(\))operator(,)
             string<delimiter(')content(funcparams)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((var|const\)()content(\\s)content(+\)()delimiter(')> operator(+) ident(identifier) operator(+) string<modifier(r)delimiter(')content(\)()content(\\s)content(*\)(:\)()content(\\s)content(*\)()delimiter(')> operator(+) ident(identifier) operator(+) string<modifier(r)delimiter(')content(\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Keyword)operator(.)ident(Declaration)operator(,) ident(Text)operator(,) ident(Name)operator(,) ident(Text)operator(,) ident(Punctuation)operator(,) ident(Text)operator(,)
                      ident(Keyword)operator(.)ident(Type)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((import|package\)()content(\\s)content(+\)((?:)delimiter(')> operator(+) ident(identifier) operator(+) string<modifier(r)delimiter(')content(|)content(\\.)content(\)+\)()content(\\s)content(*\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Keyword)operator(,) ident(Text)operator(,) ident(Name)operator(.)ident(Namespace)operator(,) ident(Text)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((new\)()content(\\s)content(+\)()delimiter(')> operator(+) ident(identifier) operator(+) string<modifier(r)delimiter(')content(\)()content(\\s)content(*\)()content(\\()content(\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Keyword)operator(,) ident(Text)operator(,) ident(Keyword)operator(.)ident(Type)operator(,) ident(Text)operator(,) ident(Operator)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(//.*?)content(\\n)delimiter(')>operator(,) ident(Comment)operator(.)ident(Single)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(/)content(\\*)content(.*?)content(\\*)content(/)delimiter(')>operator(,) ident(Comment)operator(.)ident(Multiline)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(/()content(\\\\)content(\\\\)content(|)content(\\\\)content(/|[^)content(\\n)content(]\)*/[gisx]*)delimiter(')>operator(,) ident(String)operator(.)ident(Regex)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(()content(\\.)content(\)()delimiter(')> operator(+) ident(identifier) operator(+) string<modifier(r)delimiter(')content(\))delimiter(')>operator(,) ident(bygroups)operator(()ident(Operator)operator(,) ident(Name)operator(.)ident(Attribute)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((case|default|for|each|in|while|do|break|return|continue|if|else|)delimiter(')>
             string<modifier(r)delimiter(')content(throw|try|catch|with|new|typeof|arguments|instanceof|this|)delimiter(')>
             string<modifier(r)delimiter(')content(switch|import|include|as|is\))content(\\b)delimiter(')>operator(,)
             ident(Keyword)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((class|public|final|internal|native|override|private|protected|)delimiter(')>
             string<modifier(r)delimiter(')content(static|import|extends|implements|interface|intrinsic|return|super|)delimiter(')>
             string<modifier(r)delimiter(')content(dynamic|function|const|get|namespace|package|set\))content(\\b)delimiter(')>operator(,)
             ident(Keyword)operator(.)ident(Declaration)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((true|false|null|NaN|Infinity|-Infinity|undefined|void\))content(\\b)delimiter(')>operator(,)
             ident(Keyword)operator(.)ident(Constant)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((decodeURI|decodeURIComponent|encodeURI|escape|eval|isFinite|isNaN|)delimiter(')>
             string<modifier(r)delimiter(')content(isXMLName|clearInterval|fscommand|getTimer|getURL|getVersion|)delimiter(')>
             string<modifier(r)delimiter(')content(isFinite|parseFloat|parseInt|setInterval|trace|updateAfterEvent|)delimiter(')>
             string<modifier(r)delimiter(')content(unescape\))content(\\b)delimiter(')>operator(,) ident(Name)operator(.)ident(Function)operator(\))operator(,)
            operator(()ident(identifier)operator(,) ident(Name)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([0-9][0-9]*)content(\\.)content([0-9]+([eE][0-9]+\)?[fd]?)delimiter(')>operator(,) ident(Number)operator(.)ident(Float)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(0x[0-9a-f]+)delimiter(')>operator(,) ident(Number)operator(.)ident(Hex)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([0-9]+)delimiter(')>operator(,) ident(Number)operator(.)ident(Integer)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content("()content(\\\\)content(\\\\)content(|)content(\\\\)content("|[^"]\)*")delimiter(')>operator(,) ident(String)operator(.)ident(Double)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(")content('()content(\\\\)content(\\\\)content(|)content(\\\\)content('|[^']\)*')delimiter(")>operator(,) ident(String)operator(.)ident(Single)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([~)content(\\^)content(\\*)content(!%&<>)content(\\|)content(+=:;,/?)content(\\\\)content({})content(\\[)content(\\])content((\);.-]+)delimiter(')>operator(,) ident(Operator)operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(funcparams)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(()content(\\s)content(*\)()content(\\.)content(\\.)content(\\.)content(\)?()delimiter(')> operator(+) ident(identifier) operator(+) string<modifier(r)delimiter(')content(\)()content(\\s)content(*\)(:\)()content(\\s)content(*\)()delimiter(')> operator(+)
             ident(identifier) operator(+) string<modifier(r)delimiter(')content(|)content(\\*)content(\)()content(\\s)content(*\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Text)operator(,) ident(Punctuation)operator(,) ident(Name)operator(,) ident(Text)operator(,) ident(Operator)operator(,) ident(Text)operator(,)
                      ident(Keyword)operator(.)ident(Type)operator(,) ident(Text)operator(\))operator(,) string<delimiter(')content(defval)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\\))delimiter(')>operator(,) ident(Operator)operator(,) string<delimiter(')content(type)delimiter(')>operator(\))
        operator(])operator(,)
        string<delimiter(')content(type)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(()content(\\s)content(*\)(:\)()content(\\s)content(*\)()delimiter(')> operator(+) ident(identifier) operator(+) string<modifier(r)delimiter(')content(|)content(\\*)content(\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Text)operator(,) ident(Operator)operator(,) ident(Text)operator(,) ident(Keyword)operator(.)ident(Type)operator(\))operator(,) string<delimiter(')content(#pop:2)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\s)content(*)delimiter(')>operator(,) ident(Text)operator(,) string<delimiter(')content(#pop:2)delimiter(')>operator(\))
        operator(])operator(,)
        string<delimiter(')content(defval)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content((=\)()content(\\s)content(*\)([^(\),]+\)()content(\\s)content(*\)(,?\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Operator)operator(,) ident(Text)operator(,) ident(using)operator(()ident(this)operator(\))operator(,) ident(Text)operator(,) ident(Operator)operator(\))operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(,?)delimiter(')>operator(,) ident(Operator)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))
        operator(])
    operator(})

    keyword(def) method(analyse_text)operator(()ident(text)operator(\))operator(:)
        keyword(if) ident(re)operator(.)ident(match)operator(()string<modifier(r)delimiter(')content(\\w)content(+)content(\\s)content(*:)content(\\s)content(*)content(\\w)delimiter(')>operator(,) ident(text)operator(\))operator(:) keyword(return) float(0.3)
        keyword(return) float(0.1)


keyword(class) class(CssLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    For CSS (Cascading Style Sheets\).)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(CSS)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(css)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.css)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(text/css)delimiter(')>operator(])

    ident(tokens) operator(=) operator({)
        string<delimiter(')content(root)delimiter(')>operator(:) operator([)
            ident(include)operator(()string<delimiter(')content(basics)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(basics)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\s)content(+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(/)content(\\*)content((?:.|)content(\\n)content(\)*?)content(\\*)content(/)delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content({)delimiter(')>operator(,) ident(Punctuation)operator(,) string<delimiter(')content(content)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\:)content([a-zA-Z0-9_-]+)delimiter(')>operator(,) ident(Name)operator(.)ident(Decorator)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\.)content([a-zA-Z0-9_-]+)delimiter(')>operator(,) ident(Name)operator(.)ident(Class)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\#)content([a-zA-Z0-9_-]+)delimiter(')>operator(,) ident(Name)operator(.)ident(Function)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(@[a-zA-Z0-9_-]+)delimiter(')>operator(,) ident(Keyword)operator(,) string<delimiter(')content(atrule)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([a-zA-Z0-9_-]+)delimiter(')>operator(,) ident(Name)operator(.)ident(Tag)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([~)content(\\^)content(\\*)content(!%&)content(\\[)content(\\])content(\\()content(\\\))content(<>)content(\\|)content(+=@:;,./?-])delimiter(')>operator(,) ident(Operator)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content("()content(\\\\)content(\\\\)content(|)content(\\\\)content("|[^"]\)*")delimiter(')>operator(,) ident(String)operator(.)ident(Double)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(")content('()content(\\\\)content(\\\\)content(|)content(\\\\)content('|[^']\)*')delimiter(")>operator(,) ident(String)operator(.)ident(Single)operator(\))
        operator(])operator(,)
        string<delimiter(')content(atrule)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content({)delimiter(')>operator(,) ident(Punctuation)operator(,) string<delimiter(')content(atcontent)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(;)delimiter(')>operator(,) ident(Punctuation)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            ident(include)operator(()string<delimiter(')content(basics)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(atcontent)delimiter(')>operator(:) operator([)
            ident(include)operator(()string<delimiter(')content(basics)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(})delimiter(')>operator(,) ident(Punctuation)operator(,) string<delimiter(')content(#pop:2)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(content)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\s)content(+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(})delimiter(')>operator(,) ident(Punctuation)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(url)content(\\()content(.*?)content(\\\))delimiter(')>operator(,) ident(String)operator(.)ident(Other)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(^@.*?$)delimiter(')>operator(,) ident(Comment)operator(.)ident(Preproc)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((azimuth|background-attachment|background-color|)delimiter(')>
             string<modifier(r)delimiter(')content(background-image|background-position|background-repeat|)delimiter(')>
             string<modifier(r)delimiter(')content(background|border-bottom-color|border-bottom-style|)delimiter(')>
             string<modifier(r)delimiter(')content(border-bottom-width|border-left-color|border-left-style|)delimiter(')>
             string<modifier(r)delimiter(')content(border-left-width|border-right|border-right-color|)delimiter(')>
             string<modifier(r)delimiter(')content(border-right-style|border-right-width|border-top-color|)delimiter(')>
             string<modifier(r)delimiter(')content(border-top-style|border-top-width|border-bottom|)delimiter(')>
             string<modifier(r)delimiter(')content(border-collapse|border-left|border-width|border-color|)delimiter(')>
             string<modifier(r)delimiter(')content(border-spacing|border-style|border-top|border|caption-side|)delimiter(')>
             string<modifier(r)delimiter(')content(clear|clip|color|content|counter-increment|counter-reset|)delimiter(')>
             string<modifier(r)delimiter(')content(cue-after|cue-before|cue|cursor|direction|display|)delimiter(')>
             string<modifier(r)delimiter(')content(elevation|empty-cells|float|font-family|font-size|)delimiter(')>
             string<modifier(r)delimiter(')content(font-size-adjust|font-stretch|font-style|font-variant|)delimiter(')>
             string<modifier(r)delimiter(')content(font-weight|font|height|letter-spacing|line-height|)delimiter(')>
             string<modifier(r)delimiter(')content(list-style-type|list-style-image|list-style-position|)delimiter(')>
             string<modifier(r)delimiter(')content(list-style|margin-bottom|margin-left|margin-right|)delimiter(')>
             string<modifier(r)delimiter(')content(margin-top|margin|marker-offset|marks|max-height|max-width|)delimiter(')>
             string<modifier(r)delimiter(')content(min-height|min-width|opacity|orphans|outline|outline-color|)delimiter(')>
             string<modifier(r)delimiter(')content(outline-style|outline-width|overflow|padding-bottom|)delimiter(')>
             string<modifier(r)delimiter(')content(padding-left|padding-right|padding-top|padding|page|)delimiter(')>
             string<modifier(r)delimiter(')content(page-break-after|page-break-before|page-break-inside|)delimiter(')>
             string<modifier(r)delimiter(')content(pause-after|pause-before|pause|pitch|pitch-range|)delimiter(')>
             string<modifier(r)delimiter(')content(play-during|position|quotes|richness|right|size|)delimiter(')>
             string<modifier(r)delimiter(')content(speak-header|speak-numeral|speak-punctuation|speak|)delimiter(')>
             string<modifier(r)delimiter(')content(speech-rate|stress|table-layout|text-align|text-decoration|)delimiter(')>
             string<modifier(r)delimiter(')content(text-indent|text-shadow|text-transform|top|unicode-bidi|)delimiter(')>
             string<modifier(r)delimiter(')content(vertical-align|visibility|voice-family|volume|white-space|)delimiter(')>
             string<modifier(r)delimiter(')content(widows|width|word-spacing|z-index|bottom|left|)delimiter(')>
             string<modifier(r)delimiter(')content(above|absolute|always|armenian|aural|auto|avoid|baseline|)delimiter(')>
             string<modifier(r)delimiter(')content(behind|below|bidi-override|blink|block|bold|bolder|both|)delimiter(')>
             string<modifier(r)delimiter(')content(capitalize|center-left|center-right|center|circle|)delimiter(')>
             string<modifier(r)delimiter(')content(cjk-ideographic|close-quote|collapse|condensed|continuous|)delimiter(')>
             string<modifier(r)delimiter(')content(crop|crosshair|cross|cursive|dashed|decimal-leading-zero|)delimiter(')>
             string<modifier(r)delimiter(')content(decimal|default|digits|disc|dotted|double|e-resize|embed|)delimiter(')>
             string<modifier(r)delimiter(')content(extra-condensed|extra-expanded|expanded|fantasy|far-left|)delimiter(')>
             string<modifier(r)delimiter(')content(far-right|faster|fast|fixed|georgian|groove|hebrew|help|)delimiter(')>
             string<modifier(r)delimiter(')content(hidden|hide|higher|high|hiragana-iroha|hiragana|icon|)delimiter(')>
             string<modifier(r)delimiter(')content(inherit|inline-table|inline|inset|inside|invert|italic|)delimiter(')>
             string<modifier(r)delimiter(')content(justify|katakana-iroha|katakana|landscape|larger|large|)delimiter(')>
             string<modifier(r)delimiter(')content(left-side|leftwards|level|lighter|line-through|list-item|)delimiter(')>
             string<modifier(r)delimiter(')content(loud|lower-alpha|lower-greek|lower-roman|lowercase|ltr|)delimiter(')>
             string<modifier(r)delimiter(')content(lower|low|medium|message-box|middle|mix|monospace|)delimiter(')>
             string<modifier(r)delimiter(')content(n-resize|narrower|ne-resize|no-close-quote|no-open-quote|)delimiter(')>
             string<modifier(r)delimiter(')content(no-repeat|none|normal|nowrap|nw-resize|oblique|once|)delimiter(')>
             string<modifier(r)delimiter(')content(open-quote|outset|outside|overline|pointer|portrait|px|)delimiter(')>
             string<modifier(r)delimiter(')content(relative|repeat-x|repeat-y|repeat|rgb|ridge|right-side|)delimiter(')>
             string<modifier(r)delimiter(')content(rightwards|s-resize|sans-serif|scroll|se-resize|)delimiter(')>
             string<modifier(r)delimiter(')content(semi-condensed|semi-expanded|separate|serif|show|silent|)delimiter(')>
             string<modifier(r)delimiter(')content(slow|slower|small-caps|small-caption|smaller|soft|solid|)delimiter(')>
             string<modifier(r)delimiter(')content(spell-out|square|static|status-bar|super|sw-resize|)delimiter(')>
             string<modifier(r)delimiter(')content(table-caption|table-cell|table-column|table-column-group|)delimiter(')>
             string<modifier(r)delimiter(')content(table-footer-group|table-header-group|table-row|)delimiter(')>
             string<modifier(r)delimiter(')content(table-row-group|text|text-bottom|text-top|thick|thin|)delimiter(')>
             string<modifier(r)delimiter(')content(transparent|ultra-condensed|ultra-expanded|underline|)delimiter(')>
             string<modifier(r)delimiter(')content(upper-alpha|upper-latin|upper-roman|uppercase|url|)delimiter(')>
             string<modifier(r)delimiter(')content(visible|w-resize|wait|wider|x-fast|x-high|x-large|x-loud|)delimiter(')>
             string<modifier(r)delimiter(')content(x-low|x-small|x-soft|xx-large|xx-small|yes\))content(\\b)delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((indigo|gold|firebrick|indianred|yellow|darkolivegreen|)delimiter(')>
             string<modifier(r)delimiter(')content(darkseagreen|mediumvioletred|mediumorchid|chartreuse|)delimiter(')>
             string<modifier(r)delimiter(')content(mediumslateblue|black|springgreen|crimson|lightsalmon|brown|)delimiter(')>
             string<modifier(r)delimiter(')content(turquoise|olivedrab|cyan|silver|skyblue|gray|darkturquoise|)delimiter(')>
             string<modifier(r)delimiter(')content(goldenrod|darkgreen|darkviolet|darkgray|lightpink|teal|)delimiter(')>
             string<modifier(r)delimiter(')content(darkmagenta|lightgoldenrodyellow|lavender|yellowgreen|thistle|)delimiter(')>
             string<modifier(r)delimiter(')content(violet|navy|orchid|blue|ghostwhite|honeydew|cornflowerblue|)delimiter(')>
             string<modifier(r)delimiter(')content(darkblue|darkkhaki|mediumpurple|cornsilk|red|bisque|slategray|)delimiter(')>
             string<modifier(r)delimiter(')content(darkcyan|khaki|wheat|deepskyblue|darkred|steelblue|aliceblue|)delimiter(')>
             string<modifier(r)delimiter(')content(gainsboro|mediumturquoise|floralwhite|coral|purple|lightgrey|)delimiter(')>
             string<modifier(r)delimiter(')content(lightcyan|darksalmon|beige|azure|lightsteelblue|oldlace|)delimiter(')>
             string<modifier(r)delimiter(')content(greenyellow|royalblue|lightseagreen|mistyrose|sienna|)delimiter(')>
             string<modifier(r)delimiter(')content(lightcoral|orangered|navajowhite|lime|palegreen|burlywood|)delimiter(')>
             string<modifier(r)delimiter(')content(seashell|mediumspringgreen|fuchsia|papayawhip|blanchedalmond|)delimiter(')>
             string<modifier(r)delimiter(')content(peru|aquamarine|white|darkslategray|ivory|dodgerblue|)delimiter(')>
             string<modifier(r)delimiter(')content(lemonchiffon|chocolate|orange|forestgreen|slateblue|olive|)delimiter(')>
             string<modifier(r)delimiter(')content(mintcream|antiquewhite|darkorange|cadetblue|moccasin|)delimiter(')>
             string<modifier(r)delimiter(')content(limegreen|saddlebrown|darkslateblue|lightskyblue|deeppink|)delimiter(')>
             string<modifier(r)delimiter(')content(plum|aqua|darkgoldenrod|maroon|sandybrown|magenta|tan|)delimiter(')>
             string<modifier(r)delimiter(')content(rosybrown|pink|lightblue|palevioletred|mediumseagreen|)delimiter(')>
             string<modifier(r)delimiter(')content(dimgray|powderblue|seagreen|snow|mediumblue|midnightblue|)delimiter(')>
             string<modifier(r)delimiter(')content(paleturquoise|palegoldenrod|whitesmoke|darkorchid|salmon|)delimiter(')>
             string<modifier(r)delimiter(')content(lightslategray|lawngreen|lightgreen|tomato|hotpink|)delimiter(')>
             string<modifier(r)delimiter(')content(lightyellow|lavenderblush|linen|mediumaquamarine|green|)delimiter(')>
             string<modifier(r)delimiter(')content(blueviolet|peachpuff\))content(\\b)delimiter(')>operator(,) ident(Name)operator(.)ident(Builtin)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\!)content(important)delimiter(')>operator(,) ident(Comment)operator(.)ident(Preproc)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(/)content(\\*)content((?:.|)content(\\n)content(\)*?)content(\\*)content(/)delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\#)content([a-zA-Z0-9]{1,6})delimiter(')>operator(,) ident(Number)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([)content(\\.)content(-]?[0-9]*[)content(\\.)content(]?[0-9]+(em|px|)content(\\%)content(|pt|pc|in|mm|cm|ex\))delimiter(')>operator(,) ident(Number)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(-?[0-9]+)delimiter(')>operator(,) ident(Number)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([~)content(\\^)content(\\*)content(!%&<>)content(\\|)content(+=@:,./?-]+)delimiter(')>operator(,) ident(Operator)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([)content(\\[)content(\\])content((\);]+)delimiter(')>operator(,) ident(Punctuation)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content("()content(\\\\)content(\\\\)content(|)content(\\\\)content("|[^"]\)*")delimiter(')>operator(,) ident(String)operator(.)ident(Double)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(")content('()content(\\\\)content(\\\\)content(|)content(\\\\)content('|[^']\)*')delimiter(")>operator(,) ident(String)operator(.)ident(Single)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([a-zA-Z][a-zA-Z0-9]+)delimiter(')>operator(,) ident(Name)operator(\))
        operator(])
    operator(})


keyword(class) class(HtmlLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    For HTML 4 and XHTML 1 markup. Nested JavaScript and CSS is highlighted)content(
)content(    by the appropriate lexer.)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(HTML)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(html)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.html)delimiter(')>operator(,) string<delimiter(')content(*.htm)delimiter(')>operator(,) string<delimiter(')content(*.xhtml)delimiter(')>operator(,) string<delimiter(')content(*.xslt)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(text/html)delimiter(')>operator(,) string<delimiter(')content(application/xhtml+xml)delimiter(')>operator(])

    ident(flags) operator(=) ident(re)operator(.)ident(IGNORECASE) operator(|) ident(re)operator(.)ident(DOTALL)
    ident(tokens) operator(=) operator({)
        string<delimiter(')content(root)delimiter(')>operator(:) operator([)
            operator(()string<delimiter(')content([^<&]+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(&)content(\\S)content(*?;)delimiter(')>operator(,) ident(Name)operator(.)ident(Entity)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\<)content(\\!)content(\\[)content(CDATA)content(\\[)content(.*?)content(\\])content(\\])content(\\>)delimiter(')>operator(,) ident(Comment)operator(.)ident(Preproc)operator(\))operator(,)
            operator(()string<delimiter(')content(<!--)delimiter(')>operator(,) ident(Comment)operator(,) string<delimiter(')content(comment)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(<)content(\\?)content(.*?)content(\\?)content(>)delimiter(')>operator(,) ident(Comment)operator(.)ident(Preproc)operator(\))operator(,)
            operator(()string<delimiter(')content(<![^>]*>)delimiter(')>operator(,) ident(Comment)operator(.)ident(Preproc)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(<)content(\\s)content(*script)content(\\s)content(*)delimiter(')>operator(,) ident(Name)operator(.)ident(Tag)operator(,) operator(()string<delimiter(')content(script-content)delimiter(')>operator(,) string<delimiter(')content(tag)delimiter(')>operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(<)content(\\s)content(*style)content(\\s)content(*)delimiter(')>operator(,) ident(Name)operator(.)ident(Tag)operator(,) operator(()string<delimiter(')content(style-content)delimiter(')>operator(,) string<delimiter(')content(tag)delimiter(')>operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(<)content(\\s)content(*[a-zA-Z0-9:]+)delimiter(')>operator(,) ident(Name)operator(.)ident(Tag)operator(,) string<delimiter(')content(tag)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(<)content(\\s)content(*/)content(\\s)content(*[a-zA-Z0-9:]+)content(\\s)content(*>)delimiter(')>operator(,) ident(Name)operator(.)ident(Tag)operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(comment)delimiter(')>operator(:) operator([)
            operator(()string<delimiter(')content([^-]+)delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
            operator(()string<delimiter(')content(-->)delimiter(')>operator(,) ident(Comment)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<delimiter(')content(-)delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(tag)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\s)content(+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([a-zA-Z0-9_:-]+)content(\\s)content(*=)delimiter(')>operator(,) ident(Name)operator(.)ident(Attribute)operator(,) string<delimiter(')content(attr)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([a-zA-Z0-9_:-]+)delimiter(')>operator(,) ident(Name)operator(.)ident(Attribute)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(/?)content(\\s)content(*>)delimiter(')>operator(,) ident(Name)operator(.)ident(Tag)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(script-content)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(<)content(\\s)content(*/)content(\\s)content(*script)content(\\s)content(*>)delimiter(')>operator(,) ident(Name)operator(.)ident(Tag)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(.+?(?=<)content(\\s)content(*/)content(\\s)content(*script)content(\\s)content(*>\))delimiter(')>operator(,) ident(using)operator(()ident(JavascriptLexer)operator(\))operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(style-content)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(<)content(\\s)content(*/)content(\\s)content(*style)content(\\s)content(*>)delimiter(')>operator(,) ident(Name)operator(.)ident(Tag)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(.+?(?=<)content(\\s)content(*/)content(\\s)content(*style)content(\\s)content(*>\))delimiter(')>operator(,) ident(using)operator(()ident(CssLexer)operator(\))operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(attr)delimiter(')>operator(:) operator([)
            operator(()string<delimiter(')content(".*?")delimiter(')>operator(,) ident(String)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<delimiter(")content('.*?')delimiter(")>operator(,) ident(String)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([^)content(\\s)content(>]+)delimiter(')>operator(,) ident(String)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
    operator(})

    keyword(def) method(analyse_text)operator(()ident(text)operator(\))operator(:)
        keyword(if) ident(html_doctype_matches)operator(()ident(text)operator(\))operator(:)
            keyword(return) float(0.5)


keyword(class) class(PhpLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    For `PHP <http://www.php.net/>`_ source code.)content(
)content(    For PHP embedded in HTML, use the `HtmlPhpLexer`.)content(
)content(
)content(    Additional options accepted:)content(
)content(
)content(    `startinline`)content(
)content(        If given and ``True`` the lexer starts highlighting with)content(
)content(        php code (i.e.: no starting ``<?php`` required\).  The default)content(
)content(        is ``False``.)content(
)content(    `funcnamehighlighting`)content(
)content(        If given and ``True``, highlight builtin function names)content(
)content(        (default: ``True``\).)content(
)content(    `disabledmodules`)content(
)content(        If given, must be a list of module names whose function names)content(
)content(        should not be highlighted. By default all modules are highlighted)content(
)content(        except the special ``'unknown'`` module that includes functions)content(
)content(        that are known to php but are undocumented.)content(
)content(
)content(        To get a list of allowed modules have a look into the)content(
)content(        `_phpbuiltins` module:)content(
)content(
)content(        .. sourcecode:: pycon)content(
)content(
)content(            >>> from pygments.lexers._phpbuiltins import MODULES)content(
)content(            >>> MODULES.keys(\))content(
)content(            ['PHP Options/Info', 'Zip', 'dba', ...])content(
)content(
)content(        In fact the names of those modules match the module names from)content(
)content(        the php documentation.)content(
)content(    )delimiter(""")>

    ident(name) operator(=) string<delimiter(')content(PHP)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(php)delimiter(')>operator(,) string<delimiter(')content(php3)delimiter(')>operator(,) string<delimiter(')content(php4)delimiter(')>operator(,) string<delimiter(')content(php5)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.php)delimiter(')>operator(,) string<delimiter(')content(*.php[345])delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(text/x-php)delimiter(')>operator(])

    ident(flags) operator(=) ident(re)operator(.)ident(IGNORECASE) operator(|) ident(re)operator(.)ident(DOTALL) operator(|) ident(re)operator(.)ident(MULTILINE)
    ident(tokens) operator(=) operator({)
        string<delimiter(')content(root)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(<)content(\\?)content((php\)?)delimiter(')>operator(,) ident(Comment)operator(.)ident(Preproc)operator(,) string<delimiter(')content(php)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([^<]+)delimiter(')>operator(,) ident(Other)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(<)delimiter(')>operator(,) ident(Other)operator(\))
        operator(])operator(,)
        string<delimiter(')content(php)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\?)content(>)delimiter(')>operator(,) ident(Comment)operator(.)ident(Preproc)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(<<<([a-zA-Z_][a-zA-Z0-9_]*\))content(\\n)content(.*?)content(\\n)content(\\1)content(\\;)content(?)content(\\n)delimiter(')>operator(,) ident(String)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\s)content(+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(#.*?)content(\\n)delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(//.*?)content(\\n)delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(/)content(\\*)content(\\*)content(/)delimiter(')>operator(,) ident(Comment)operator(\))operator(,) comment(# put the empty comment here, it is otherwise)
                                  comment(# seen as the start of a docstring)
            operator(()string<modifier(r)delimiter(')content(/)content(\\*)content(\\*)content(.*?)content(\\*)content(/)delimiter(')>operator(,) ident(String)operator(.)ident(Doc)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(/)content(\\*)content(.*?)content(\\*)content(/)delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((->|::\)()content(\\s)content(*\)([a-zA-Z_][a-zA-Z0-9_]*\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(Operator)operator(,) ident(Text)operator(,) ident(Name)operator(.)ident(Attribute)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([~!%^&*+=|:.<>/?@-]+)delimiter(')>operator(,) ident(Operator)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([)content(\\[)content(\\])content({}(\);,]+)delimiter(')>operator(,) ident(Punctuation)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((class\)()content(\\s)content(+\))delimiter(')>operator(,) ident(bygroups)operator(()ident(Keyword)operator(,) ident(Text)operator(\))operator(,) string<delimiter(')content(classname)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((function\)()content(\\s)content(+\)(&?\)()content(\\s)content(*\))delimiter(')>operator(,)
              ident(bygroups)operator(()ident(Keyword)operator(,) ident(Text)operator(,) ident(Operator)operator(,) ident(Text)operator(\))operator(,) string<delimiter(')content(functionname)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((const\)()content(\\s)content(+\)([a-zA-Z_][a-zA-Z0-9_]*\))delimiter(')>operator(,)
              ident(bygroups)operator(()ident(Keyword)operator(,) ident(Text)operator(,) ident(Name)operator(.)ident(Constant)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content((and|E_PARSE|old_function|E_ERROR|or|as|E_WARNING|parent|)delimiter(')>
             string<modifier(r)delimiter(')content(eval|PHP_OS|break|exit|case|extends|PHP_VERSION|cfunction|)delimiter(')>
             string<modifier(r)delimiter(')content(FALSE|print|for|require|continue|foreach|require_once|)delimiter(')>
             string<modifier(r)delimiter(')content(declare|return|default|static|do|switch|die|stdClass|)delimiter(')>
             string<modifier(r)delimiter(')content(echo|else|TRUE|elseif|var|empty|if|xor|enddeclare|include|)delimiter(')>
             string<modifier(r)delimiter(')content(virtual|endfor|include_once|while|endforeach|global|__FILE__|)delimiter(')>
             string<modifier(r)delimiter(')content(endif|list|__LINE__|endswitch|new|__sleep|endwhile|not|)delimiter(')>
             string<modifier(r)delimiter(')content(array|__wakeup|E_ALL|NULL|final|php_user_filter|interface|)delimiter(')>
             string<modifier(r)delimiter(')content(implements|public|private|protected|abstract|clone|try|)delimiter(')>
             string<modifier(r)delimiter(')content(catch|throw|this\))content(\\b)delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
            operator(()string<delimiter(')content((true|false|null\))char(\\b)delimiter(')>operator(,) ident(Keyword)operator(.)ident(Constant)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\$)content(\\{)content(\\$)content(+[a-zA-Z_][a-zA-Z0-9_]*)content(\\})delimiter(')>operator(,) ident(Name)operator(.)ident(Variable)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\$)content(+[a-zA-Z_][a-zA-Z0-9_]*)delimiter(')>operator(,) ident(Name)operator(.)ident(Variable)operator(\))operator(,)
            operator(()string<delimiter(')content([a-zA-Z_][a-zA-Z0-9_]*)delimiter(')>operator(,) ident(Name)operator(.)ident(Other)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(")content([0-9]()content(\\.)content([0-9]*\)?(eE[+-][0-9]\)?[flFLdD]?|)delimiter(")>
             string<modifier(r)delimiter(")content(0[xX][0-9a-fA-F]+[Ll]?)delimiter(")>operator(,) ident(Number)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(")content('([^')content(\\\\)content(]*(?:)content(\\\\)content(.[^')content(\\\\)content(]*\)*\)')delimiter(")>operator(,) ident(String)operator(.)ident(Single)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(`([^`)content(\\\\)content(]*(?:)content(\\\\)content(.[^`)content(\\\\)content(]*\)*\)`)delimiter(')>operator(,) ident(String)operator(.)ident(Backtick)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(")delimiter(')>operator(,) ident(String)operator(.)ident(Double)operator(,) string<delimiter(')content(string)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(classname)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content([a-zA-Z_][a-zA-Z0-9_]*)delimiter(')>operator(,) ident(Name)operator(.)ident(Class)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))
        operator(])operator(,)
        string<delimiter(')content(functionname)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content([a-zA-Z_][a-zA-Z0-9_]*)delimiter(')>operator(,) ident(Name)operator(.)ident(Function)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))
        operator(])operator(,)
        string<delimiter(')content(string)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(")delimiter(')>operator(,) ident(String)operator(.)ident(Double)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([^{$")content(\\\\)content(]+)delimiter(')>operator(,) ident(String)operator(.)ident(Double)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\\\)content(([nrt)content(\\")content($]|[0-7]{1,3}|x[0-9A-Fa-f]{1,2}\))delimiter(')>operator(,) ident(String)operator(.)ident(Escape)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\$)content([a-zA-Z_][a-zA-Z0-9_]*()content(\\[)content(\\S)content(+)content(\\])content(|->[a-zA-Z_][a-zA-Z0-9_]*\)?)delimiter(')>operator(,)
             ident(String)operator(.)ident(Interpol)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(()content(\\{)content(\\$)content(\\{)content(\)(.*?\)()content(\\})content(\\})content(\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(String)operator(.)ident(Interpol)operator(,) ident(using)operator(()ident(this)operator(,) ident(_startinline)operator(=)predefined_constant(True)operator(\))operator(,)
                      ident(String)operator(.)ident(Interpol)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(()content(\\{)content(\)()content(\\$)content(.*?\)()content(\\})content(\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(String)operator(.)ident(Interpol)operator(,) ident(using)operator(()ident(this)operator(,) ident(_startinline)operator(=)predefined_constant(True)operator(\))operator(,)
                      ident(String)operator(.)ident(Interpol)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(()content(\\$)content(\\{)content(\)()content(\\S)content(+\)()content(\\})content(\))delimiter(')>operator(,)
             ident(bygroups)operator(()ident(String)operator(.)ident(Interpol)operator(,) ident(Name)operator(.)ident(Variable)operator(,) ident(String)operator(.)ident(Interpol)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([${)content(\\\\)content(]+)delimiter(')>operator(,) ident(String)operator(.)ident(Double)operator(\))
        operator(])operator(,)
    operator(})

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))operator(:)
        predefined_constant(self)operator(.)ident(funcnamehighlighting) operator(=) ident(get_bool_opt)operator(()
            ident(options)operator(,) string<delimiter(')content(funcnamehighlighting)delimiter(')>operator(,) predefined_constant(True)operator(\))
        predefined_constant(self)operator(.)ident(disabledmodules) operator(=) ident(get_list_opt)operator(()
            ident(options)operator(,) string<delimiter(')content(disabledmodules)delimiter(')>operator(,) operator([)string<delimiter(')content(unknown)delimiter(')>operator(])operator(\))
        predefined_constant(self)operator(.)ident(startinline) operator(=) ident(get_bool_opt)operator(()ident(options)operator(,) string<delimiter(')content(startinline)delimiter(')>operator(,) predefined_constant(False)operator(\))

        comment(# private option argument for the lexer itself)
        keyword(if) string<delimiter(')content(_startinline)delimiter(')> keyword(in) ident(options)operator(:)
            predefined_constant(self)operator(.)ident(startinline) operator(=) ident(options)operator(.)ident(pop)operator(()string<delimiter(')content(_startinline)delimiter(')>operator(\))

        comment(# collect activated functions in a set)
        predefined_constant(self)operator(.)ident(_functions) operator(=) predefined(set)operator(()operator(\))
        keyword(if) predefined_constant(self)operator(.)ident(funcnamehighlighting)operator(:)
            keyword(from) include(pygments.lexers._phpbuiltins) keyword(import) include(MODULES)
            keyword(for) ident(key)operator(,) ident(value) keyword(in) ident(MODULES)operator(.)ident(iteritems)operator(()operator(\))operator(:)
                keyword(if) ident(key) keyword(not) keyword(in) predefined_constant(self)operator(.)ident(disabledmodules)operator(:)
                    predefined_constant(self)operator(.)ident(_functions)operator(.)ident(update)operator(()ident(value)operator(\))
        ident(RegexLexer)operator(.)ident(__init__)operator(()predefined_constant(self)operator(,) operator(**)ident(options)operator(\))

    keyword(def) method(get_tokens_unprocessed)operator(()predefined_constant(self)operator(,) ident(text)operator(\))operator(:)
        ident(stack) operator(=) operator([)string<delimiter(')content(root)delimiter(')>operator(])
        keyword(if) predefined_constant(self)operator(.)ident(startinline)operator(:)
            ident(stack)operator(.)ident(append)operator(()string<delimiter(')content(php)delimiter(')>operator(\))
        keyword(for) ident(index)operator(,) ident(token)operator(,) ident(value) keyword(in) \
            ident(RegexLexer)operator(.)ident(get_tokens_unprocessed)operator(()predefined_constant(self)operator(,) ident(text)operator(,) ident(stack)operator(\))operator(:)
            keyword(if) ident(token) keyword(is) ident(Name)operator(.)ident(Other)operator(:)
                keyword(if) ident(value) keyword(in) predefined_constant(self)operator(.)ident(_functions)operator(:)
                    keyword(yield) ident(index)operator(,) ident(Name)operator(.)ident(Builtin)operator(,) ident(value)
                    keyword(continue)
            keyword(yield) ident(index)operator(,) ident(token)operator(,) ident(value)

    keyword(def) method(analyse_text)operator(()ident(text)operator(\))operator(:)
        ident(rv) operator(=) float(0.0)
        keyword(if) ident(re)operator(.)ident(search)operator(()string<modifier(r)delimiter(')content(<)content(\\?)content((?!xml\))delimiter(')>operator(,) ident(text)operator(\))operator(:)
            ident(rv) operator(+=) float(0.3)
        keyword(if) string<delimiter(')content(?>)delimiter(')> keyword(in) ident(text)operator(:)
            ident(rv) operator(+=) float(0.1)
        keyword(return) ident(rv)


keyword(class) class(XmlLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Generic lexer for XML (eXtensible Markup Language\).)content(
)content(    )delimiter(""")>

    ident(flags) operator(=) ident(re)operator(.)ident(MULTILINE) operator(|) ident(re)operator(.)ident(DOTALL)

    ident(name) operator(=) string<delimiter(')content(XML)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(xml)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.xml)delimiter(')>operator(,) string<delimiter(')content(*.xsl)delimiter(')>operator(,) string<delimiter(')content(*.rss)delimiter(')>operator(,) string<delimiter(')content(*.xslt)delimiter(')>operator(,) string<delimiter(')content(*.xsd)delimiter(')>operator(,) string<delimiter(')content(*.wsdl)delimiter(')>operator(])
    ident(mimetypes) operator(=) operator([)string<delimiter(')content(text/xml)delimiter(')>operator(,) string<delimiter(')content(application/xml)delimiter(')>operator(,) string<delimiter(')content(image/svg+xml)delimiter(')>operator(,)
                 string<delimiter(')content(application/rss+xml)delimiter(')>operator(,) string<delimiter(')content(application/atom+xml)delimiter(')>operator(,)
                 string<delimiter(')content(application/xsl+xml)delimiter(')>operator(,) string<delimiter(')content(application/xslt+xml)delimiter(')>operator(])

    ident(tokens) operator(=) operator({)
        string<delimiter(')content(root)delimiter(')>operator(:) operator([)
            operator(()string<delimiter(')content([^<&]+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(&)content(\\S)content(*?;)delimiter(')>operator(,) ident(Name)operator(.)ident(Entity)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(\\<)content(\\!)content(\\[)content(CDATA)content(\\[)content(.*?)content(\\])content(\\])content(\\>)delimiter(')>operator(,) ident(Comment)operator(.)ident(Preproc)operator(\))operator(,)
            operator(()string<delimiter(')content(<!--)delimiter(')>operator(,) ident(Comment)operator(,) string<delimiter(')content(comment)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(<)content(\\?)content(.*?)content(\\?)content(>)delimiter(')>operator(,) ident(Comment)operator(.)ident(Preproc)operator(\))operator(,)
            operator(()string<delimiter(')content(<![^>]*>)delimiter(')>operator(,) ident(Comment)operator(.)ident(Preproc)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(<)content(\\s)content(*[a-zA-Z0-9:._-]+)delimiter(')>operator(,) ident(Name)operator(.)ident(Tag)operator(,) string<delimiter(')content(tag)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(<)content(\\s)content(*/)content(\\s)content(*[a-zA-Z0-9:._-]+)content(\\s)content(*>)delimiter(')>operator(,) ident(Name)operator(.)ident(Tag)operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(comment)delimiter(')>operator(:) operator([)
            operator(()string<delimiter(')content([^-]+)delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
            operator(()string<delimiter(')content(-->)delimiter(')>operator(,) ident(Comment)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<delimiter(')content(-)delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(tag)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(\\s)content(+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([a-zA-Z0-9_.:-]+)content(\\s)content(*=)delimiter(')>operator(,) ident(Name)operator(.)ident(Attribute)operator(,) string<delimiter(')content(attr)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(/?)content(\\s)content(*>)delimiter(')>operator(,) ident(Name)operator(.)ident(Tag)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(attr)delimiter(')>operator(:) operator([)
            operator(()string<delimiter(')content(\\s)content(+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
            operator(()string<delimiter(')content(".*?")delimiter(')>operator(,) ident(String)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<delimiter(")content('.*?')delimiter(")>operator(,) ident(String)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([^)content(\\s)content(>]+)delimiter(')>operator(,) ident(String)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
        operator(])operator(,)
    operator(})

    keyword(def) method(analyse_text)operator(()ident(text)operator(\))operator(:)
        keyword(if) ident(looks_like_xml)operator(()ident(text)operator(\))operator(:)
            keyword(return) float(0.5)


keyword(class) class(XsltLexer)operator(()ident(XmlLexer)operator(\))operator(:)
    docstring<delimiter(''')content(
)content(    A lexer for XSLT.)content(
)content(
)content(    *New in Pygments 0.10.*)content(
)content(    )delimiter(''')>

    ident(name) operator(=) string<delimiter(')content(XSLT)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(xslt)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.xsl)delimiter(')>operator(,) string<delimiter(')content(*.xslt)delimiter(')>operator(])

    ident(EXTRA_KEYWORDS) operator(=) predefined(set)operator(()operator([)
        string<delimiter(')content(apply-imports)delimiter(')>operator(,) string<delimiter(')content(apply-templates)delimiter(')>operator(,) string<delimiter(')content(attribute)delimiter(')>operator(,)
        string<delimiter(')content(attribute-set)delimiter(')>operator(,) string<delimiter(')content(call-template)delimiter(')>operator(,) string<delimiter(')content(choose)delimiter(')>operator(,) string<delimiter(')content(comment)delimiter(')>operator(,)
        string<delimiter(')content(copy)delimiter(')>operator(,) string<delimiter(')content(copy-of)delimiter(')>operator(,) string<delimiter(')content(decimal-format)delimiter(')>operator(,) string<delimiter(')content(element)delimiter(')>operator(,) string<delimiter(')content(fallback)delimiter(')>operator(,)
        string<delimiter(')content(for-each)delimiter(')>operator(,) string<delimiter(')content(if)delimiter(')>operator(,) string<delimiter(')content(import)delimiter(')>operator(,) string<delimiter(')content(include)delimiter(')>operator(,) string<delimiter(')content(key)delimiter(')>operator(,) string<delimiter(')content(message)delimiter(')>operator(,)
        string<delimiter(')content(namespace-alias)delimiter(')>operator(,) string<delimiter(')content(number)delimiter(')>operator(,) string<delimiter(')content(otherwise)delimiter(')>operator(,) string<delimiter(')content(output)delimiter(')>operator(,) string<delimiter(')content(param)delimiter(')>operator(,)
        string<delimiter(')content(preserve-space)delimiter(')>operator(,) string<delimiter(')content(processing-instruction)delimiter(')>operator(,) string<delimiter(')content(sort)delimiter(')>operator(,)
        string<delimiter(')content(strip-space)delimiter(')>operator(,) string<delimiter(')content(stylesheet)delimiter(')>operator(,) string<delimiter(')content(template)delimiter(')>operator(,) string<delimiter(')content(text)delimiter(')>operator(,) string<delimiter(')content(transform)delimiter(')>operator(,)
        string<delimiter(')content(value-of)delimiter(')>operator(,) string<delimiter(')content(variable)delimiter(')>operator(,) string<delimiter(')content(when)delimiter(')>operator(,) string<delimiter(')content(with-param)delimiter(')>
    operator(])operator(\))

    keyword(def) method(get_tokens_unprocessed)operator(()predefined_constant(self)operator(,) ident(text)operator(\))operator(:)
        keyword(for) ident(index)operator(,) ident(token)operator(,) ident(value) keyword(in) ident(XmlLexer)operator(.)ident(get_tokens_unprocessed)operator(()predefined_constant(self)operator(,) ident(text)operator(\))operator(:)
            ident(m) operator(=) ident(re)operator(.)ident(match)operator(()string<delimiter(')content(</?xsl:([^>]*\)/?>?)delimiter(')>operator(,) ident(value)operator(\))

            keyword(if) ident(token) keyword(is) ident(Name)operator(.)ident(Tag) keyword(and) ident(m) keyword(and) ident(m)operator(.)ident(group)operator(()integer(1)operator(\)) keyword(in) predefined_constant(self)operator(.)ident(EXTRA_KEYWORDS)operator(:)
                keyword(yield) ident(index)operator(,) ident(Keyword)operator(,) ident(value)
            keyword(else)operator(:)
                keyword(yield) ident(index)operator(,) ident(token)operator(,) ident(value)

    keyword(def) method(analyse_text)operator(()ident(text)operator(\))operator(:)
        keyword(if) ident(looks_like_xml)operator(()ident(text)operator(\)) keyword(and) string<delimiter(')content(<xsl)delimiter(')> keyword(in) ident(text)operator(:)
            keyword(return) float(0.8)



keyword(class) class(MxmlLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    For MXML markup.)content(
)content(    Nested AS3 in <script> tags is highlighted by the appropriate lexer.)content(
)content(    )delimiter(""")>
    ident(flags) operator(=) ident(re)operator(.)ident(MULTILINE) operator(|) ident(re)operator(.)ident(DOTALL)
    ident(name) operator(=) string<delimiter(')content(MXML)delimiter(')>
    ident(aliases) operator(=) operator([)string<delimiter(')content(mxml)delimiter(')>operator(])
    ident(filenames) operator(=) operator([)string<delimiter(')content(*.mxml)delimiter(')>operator(])
    ident(mimetimes) operator(=) operator([)string<delimiter(')content(text/xml)delimiter(')>operator(,) string<delimiter(')content(application/xml)delimiter(')>operator(])

    ident(tokens) operator(=) operator({)
            string<delimiter(')content(root)delimiter(')>operator(:) operator([)
                operator(()string<delimiter(')content([^<&]+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
                operator(()string<modifier(r)delimiter(')content(&)content(\\S)content(*?;)delimiter(')>operator(,) ident(Name)operator(.)ident(Entity)operator(\))operator(,)
                operator(()string<modifier(r)delimiter(')content(()content(\\<)content(\\!)content(\\[)content(CDATA)content(\\[)content(\)(.*?\)()content(\\])content(\\])content(\\>)content(\))delimiter(')>operator(,)
                 ident(bygroups)operator(()ident(String)operator(,) ident(using)operator(()ident(ActionScript3Lexer)operator(\))operator(,) ident(String)operator(\))operator(\))operator(,)
                operator(()string<delimiter(')content(<!--)delimiter(')>operator(,) ident(Comment)operator(,) string<delimiter(')content(comment)delimiter(')>operator(\))operator(,)
                operator(()string<modifier(r)delimiter(')content(<)content(\\?)content(.*?)content(\\?)content(>)delimiter(')>operator(,) ident(Comment)operator(.)ident(Preproc)operator(\))operator(,)
                operator(()string<delimiter(')content(<![^>]*>)delimiter(')>operator(,) ident(Comment)operator(.)ident(Preproc)operator(\))operator(,)
                operator(()string<modifier(r)delimiter(')content(<)content(\\s)content(*[a-zA-Z0-9:._-]+)delimiter(')>operator(,) ident(Name)operator(.)ident(Tag)operator(,) string<delimiter(')content(tag)delimiter(')>operator(\))operator(,)
                operator(()string<modifier(r)delimiter(')content(<)content(\\s)content(*/)content(\\s)content(*[a-zA-Z0-9:._-]+)content(\\s)content(*>)delimiter(')>operator(,) ident(Name)operator(.)ident(Tag)operator(\))operator(,)
            operator(])operator(,)
            string<delimiter(')content(comment)delimiter(')>operator(:) operator([)
                operator(()string<delimiter(')content([^-]+)delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
                operator(()string<delimiter(')content(-->)delimiter(')>operator(,) ident(Comment)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
                operator(()string<delimiter(')content(-)delimiter(')>operator(,) ident(Comment)operator(\))operator(,)
            operator(])operator(,)
            string<delimiter(')content(tag)delimiter(')>operator(:) operator([)
                operator(()string<modifier(r)delimiter(')content(\\s)content(+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
                operator(()string<modifier(r)delimiter(')content([a-zA-Z0-9_.:-]+)content(\\s)content(*=)delimiter(')>operator(,) ident(Name)operator(.)ident(Attribute)operator(,) string<delimiter(')content(attr)delimiter(')>operator(\))operator(,)
                operator(()string<modifier(r)delimiter(')content(/?)content(\\s)content(*>)delimiter(')>operator(,) ident(Name)operator(.)ident(Tag)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(])operator(,)
            string<delimiter(')content(attr)delimiter(')>operator(:) operator([)
                operator(()string<delimiter(')content(\\s)content(+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
                operator(()string<delimiter(')content(".*?")delimiter(')>operator(,) ident(String)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
                operator(()string<delimiter(")content('.*?')delimiter(")>operator(,) ident(String)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
                operator(()string<modifier(r)delimiter(')content([^)content(\\s)content(>]+)delimiter(')>operator(,) ident(String)operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(,)
            operator(])operator(,)
        operator(})
comment(# -*- coding: utf-8 -*-)
docstring<delimiter(""")content(
)content(    pygments.plugin)content(
)content(    ~~~~~~~~~~~~~~~)content(
)content(
)content(    Pygments setuptools plugin interface. The methods defined)content(
)content(    here also work if setuptools isn't installed but they just)content(
)content(    return nothing.)content(
)content(
)content(    lexer plugins::)content(
)content(
)content(        [pygments.lexers])content(
)content(        yourlexer = yourmodule:YourLexer)content(
)content(
)content(    formatter plugins::)content(
)content(
)content(        [pygments.formatters])content(
)content(        yourformatter = yourformatter:YourFormatter)content(
)content(        /.ext = yourformatter:YourFormatter)content(
)content(
)content(    As you can see, you can define extensions for the formatter)content(
)content(    with a leading slash.)content(
)content(
)content(    syntax plugins::)content(
)content(
)content(        [pygments.styles])content(
)content(        yourstyle = yourstyle:YourStyle)content(
)content(
)content(    filter plugin::)content(
)content(
)content(        [pygments.filter])content(
)content(        yourfilter = yourfilter:YourFilter)content(
)content(
)content(
)content(    :copyright: Copyright 2006-2009 by the Pygments team, see AUTHORS.)content(
)content(    :license: BSD, see LICENSE for details.)content(
)delimiter(""")>
keyword(try)operator(:)
    keyword(import) include(pkg_resources)
keyword(except) exception(ImportError)operator(:)
    ident(pkg_resources) operator(=) predefined_constant(None)

ident(LEXER_ENTRY_POINT) operator(=) string<delimiter(')content(pygments.lexers)delimiter(')>
ident(FORMATTER_ENTRY_POINT) operator(=) string<delimiter(')content(pygments.formatters)delimiter(')>
ident(STYLE_ENTRY_POINT) operator(=) string<delimiter(')content(pygments.styles)delimiter(')>
ident(FILTER_ENTRY_POINT) operator(=) string<delimiter(')content(pygments.filters)delimiter(')>


keyword(def) method(find_plugin_lexers)operator(()operator(\))operator(:)
    keyword(if) ident(pkg_resources) keyword(is) predefined_constant(None)operator(:)
        keyword(return)
    keyword(for) ident(entrypoint) keyword(in) ident(pkg_resources)operator(.)ident(iter_entry_points)operator(()ident(LEXER_ENTRY_POINT)operator(\))operator(:)
        keyword(yield) ident(entrypoint)operator(.)ident(load)operator(()operator(\))


keyword(def) method(find_plugin_formatters)operator(()operator(\))operator(:)
    keyword(if) ident(pkg_resources) keyword(is) predefined_constant(None)operator(:)
        keyword(return)
    keyword(for) ident(entrypoint) keyword(in) ident(pkg_resources)operator(.)ident(iter_entry_points)operator(()ident(FORMATTER_ENTRY_POINT)operator(\))operator(:)
        keyword(yield) ident(entrypoint)operator(.)ident(name)operator(,) ident(entrypoint)operator(.)ident(load)operator(()operator(\))


keyword(def) method(find_plugin_styles)operator(()operator(\))operator(:)
    keyword(if) ident(pkg_resources) keyword(is) predefined_constant(None)operator(:)
        keyword(return)
    keyword(for) ident(entrypoint) keyword(in) ident(pkg_resources)operator(.)ident(iter_entry_points)operator(()ident(STYLE_ENTRY_POINT)operator(\))operator(:)
        keyword(yield) ident(entrypoint)operator(.)ident(name)operator(,) ident(entrypoint)operator(.)ident(load)operator(()operator(\))


keyword(def) method(find_plugin_filters)operator(()operator(\))operator(:)
    keyword(if) ident(pkg_resources) keyword(is) predefined_constant(None)operator(:)
        keyword(return)
    keyword(for) ident(entrypoint) keyword(in) ident(pkg_resources)operator(.)ident(iter_entry_points)operator(()ident(FILTER_ENTRY_POINT)operator(\))operator(:)
        keyword(yield) ident(entrypoint)operator(.)ident(name)operator(,) ident(entrypoint)operator(.)ident(load)operator(()operator(\))
comment(# -*- coding: utf-8 -*-)
docstring<delimiter(""")content(
)content(    pygments.scanner)content(
)content(    ~~~~~~~~~~~~~~~~)content(
)content(
)content(    This library implements a regex based scanner. Some languages)content(
)content(    like Pascal are easy to parse but have some keywords that)content(
)content(    depend on the context. Because of this it's impossible to lex)content(
)content(    that just by using a regular expression lexer like the)content(
)content(    `RegexLexer`.)content(
)content(
)content(    Have a look at the `DelphiLexer` to get an idea of how to use)content(
)content(    this scanner.)content(
)content(
)content(    :copyright: Copyright 2006-2009 by the Pygments team, see AUTHORS.)content(
)content(    :license: BSD, see LICENSE for details.)content(
)delimiter(""")>
keyword(import) include(re)


keyword(class) class(EndOfText)operator(()exception(RuntimeError)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Raise if end of text is reached and the user)content(
)content(    tried to call a match function.)content(
)content(    )delimiter(""")>


keyword(class) class(Scanner)operator(()predefined(object)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Simple scanner)content(
)content(
)content(    All method patterns are regular expression strings (not)content(
)content(    compiled expressions!\))content(
)content(    )delimiter(""")>

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) ident(text)operator(,) ident(flags)operator(=)integer(0)operator(\))operator(:)
        docstring<delimiter(""")content(
)content(        :param text:    The text which should be scanned)content(
)content(        :param flags:   default regular expression flags)content(
)content(        )delimiter(""")>
        predefined_constant(self)operator(.)ident(data) operator(=) ident(text)
        predefined_constant(self)operator(.)ident(data_length) operator(=) predefined(len)operator(()ident(text)operator(\))
        predefined_constant(self)operator(.)ident(start_pos) operator(=) integer(0)
        predefined_constant(self)operator(.)ident(pos) operator(=) integer(0)
        predefined_constant(self)operator(.)ident(flags) operator(=) ident(flags)
        predefined_constant(self)operator(.)ident(last) operator(=) predefined_constant(None)
        predefined_constant(self)operator(.)ident(match) operator(=) predefined_constant(None)
        predefined_constant(self)operator(.)ident(_re_cache) operator(=) operator({)operator(})

    keyword(def) method(eos)operator(()predefined_constant(self)operator(\))operator(:)
        docstring<delimiter(""")content(`True` if the scanner reached the end of text.)delimiter(""")>
        keyword(return) predefined_constant(self)operator(.)ident(pos) operator(>=) predefined_constant(self)operator(.)ident(data_length)
    ident(eos) operator(=) predefined(property)operator(()ident(eos)operator(,) ident(eos)operator(.)ident(__doc__)operator(\))

    keyword(def) method(check)operator(()predefined_constant(self)operator(,) ident(pattern)operator(\))operator(:)
        docstring<delimiter(""")content(
)content(        Apply `pattern` on the current position and return)content(
)content(        the match object. (Doesn't touch pos\). Use this for)content(
)content(        lookahead.)content(
)content(        )delimiter(""")>
        keyword(if) predefined_constant(self)operator(.)ident(eos)operator(:)
            keyword(raise) ident(EndOfText)operator(()operator(\))
        keyword(if) ident(pattern) keyword(not) keyword(in) predefined_constant(self)operator(.)ident(_re_cache)operator(:)
            predefined_constant(self)operator(.)ident(_re_cache)operator([)ident(pattern)operator(]) operator(=) ident(re)operator(.)ident(compile)operator(()ident(pattern)operator(,) predefined_constant(self)operator(.)ident(flags)operator(\))
        keyword(return) predefined_constant(self)operator(.)ident(_re_cache)operator([)ident(pattern)operator(])operator(.)ident(match)operator(()predefined_constant(self)operator(.)ident(data)operator(,) predefined_constant(self)operator(.)ident(pos)operator(\))

    keyword(def) method(test)operator(()predefined_constant(self)operator(,) ident(pattern)operator(\))operator(:)
        docstring<delimiter(""")content(Apply a pattern on the current position and check)content(
)content(        if it patches. Doesn't touch pos.)delimiter(""")>
        keyword(return) predefined_constant(self)operator(.)ident(check)operator(()ident(pattern)operator(\)) keyword(is) keyword(not) predefined_constant(None)

    keyword(def) method(scan)operator(()predefined_constant(self)operator(,) ident(pattern)operator(\))operator(:)
        docstring<delimiter(""")content(
)content(        Scan the text for the given pattern and update pos/match)content(
)content(        and related fields. The return value is a boolen that)content(
)content(        indicates if the pattern matched. The matched value is)content(
)content(        stored on the instance as ``match``, the last value is)content(
)content(        stored as ``last``. ``start_pos`` is the position of the)content(
)content(        pointer before the pattern was matched, ``pos`` is the)content(
)content(        end position.)content(
)content(        )delimiter(""")>
        keyword(if) predefined_constant(self)operator(.)ident(eos)operator(:)
            keyword(raise) ident(EndOfText)operator(()operator(\))
        keyword(if) ident(pattern) keyword(not) keyword(in) predefined_constant(self)operator(.)ident(_re_cache)operator(:)
            predefined_constant(self)operator(.)ident(_re_cache)operator([)ident(pattern)operator(]) operator(=) ident(re)operator(.)ident(compile)operator(()ident(pattern)operator(,) predefined_constant(self)operator(.)ident(flags)operator(\))
        predefined_constant(self)operator(.)ident(last) operator(=) predefined_constant(self)operator(.)ident(match)
        ident(m) operator(=) predefined_constant(self)operator(.)ident(_re_cache)operator([)ident(pattern)operator(])operator(.)ident(match)operator(()predefined_constant(self)operator(.)ident(data)operator(,) predefined_constant(self)operator(.)ident(pos)operator(\))
        keyword(if) ident(m) keyword(is) predefined_constant(None)operator(:)
            keyword(return) predefined_constant(False)
        predefined_constant(self)operator(.)ident(start_pos) operator(=) ident(m)operator(.)ident(start)operator(()operator(\))
        predefined_constant(self)operator(.)ident(pos) operator(=) ident(m)operator(.)ident(end)operator(()operator(\))
        predefined_constant(self)operator(.)ident(match) operator(=) ident(m)operator(.)ident(group)operator(()operator(\))
        keyword(return) predefined_constant(True)

    keyword(def) method(get_char)operator(()predefined_constant(self)operator(\))operator(:)
        docstring<delimiter(""")content(Scan exactly one char.)delimiter(""")>
        predefined_constant(self)operator(.)ident(scan)operator(()string<delimiter(')content(.)delimiter(')>operator(\))

    keyword(def) method(__repr__)operator(()predefined_constant(self)operator(\))operator(:)
        keyword(return) string<delimiter(')content(<%s %d/%d>)delimiter(')> operator(%) operator(()
            predefined_constant(self)operator(.)ident(__class__)operator(.)ident(__name__)operator(,)
            predefined_constant(self)operator(.)ident(pos)operator(,)
            predefined_constant(self)operator(.)ident(data_length)
        operator(\))
comment(# -*- coding: utf-8 -*-)
docstring<delimiter(""")content(
)content(    pygments.style)content(
)content(    ~~~~~~~~~~~~~~)content(
)content(
)content(    Basic style object.)content(
)content(
)content(    :copyright: Copyright 2006-2009 by the Pygments team, see AUTHORS.)content(
)content(    :license: BSD, see LICENSE for details.)content(
)delimiter(""")>

keyword(from) include(pygments.token) keyword(import) include(Token)operator(,) include(STANDARD_TYPES)


keyword(class) class(StyleMeta)operator(()predefined(type)operator(\))operator(:)

    keyword(def) method(__new__)operator(()ident(mcs)operator(,) ident(name)operator(,) ident(bases)operator(,) ident(dct)operator(\))operator(:)
        ident(obj) operator(=) predefined(type)operator(.)ident(__new__)operator(()ident(mcs)operator(,) ident(name)operator(,) ident(bases)operator(,) ident(dct)operator(\))
        keyword(for) ident(token) keyword(in) ident(STANDARD_TYPES)operator(:)
            keyword(if) ident(token) keyword(not) keyword(in) ident(obj)operator(.)ident(styles)operator(:)
                ident(obj)operator(.)ident(styles)operator([)ident(token)operator(]) operator(=) string<delimiter(')delimiter(')>

        keyword(def) method(colorformat)operator(()ident(text)operator(\))operator(:)
            keyword(if) ident(text)operator([)integer(0)operator(:)integer(1)operator(]) operator(==) string<delimiter(')content(#)delimiter(')>operator(:)
                ident(col) operator(=) ident(text)operator([)integer(1)operator(:)operator(])
                keyword(if) predefined(len)operator(()ident(col)operator(\)) operator(==) integer(6)operator(:)
                    keyword(return) ident(col)
                keyword(elif) predefined(len)operator(()ident(col)operator(\)) operator(==) integer(3)operator(:)
                    keyword(return) ident(col)operator([)integer(0)operator(])operator(+)string<delimiter(')content(0)delimiter(')>operator(+)ident(col)operator([)integer(1)operator(])operator(+)string<delimiter(')content(0)delimiter(')>operator(+)ident(col)operator([)integer(2)operator(])operator(+)string<delimiter(')content(0)delimiter(')>
            keyword(elif) ident(text) operator(==) string<delimiter(')delimiter(')>operator(:)
                keyword(return) string<delimiter(')delimiter(')>
            keyword(assert) predefined_constant(False)operator(,) string<delimiter(")content(wrong color format %r)delimiter(")> operator(%) ident(text)

        ident(_styles) operator(=) ident(obj)operator(.)ident(_styles) operator(=) operator({)operator(})

        keyword(for) ident(ttype) keyword(in) ident(obj)operator(.)ident(styles)operator(:)
            keyword(for) ident(token) keyword(in) ident(ttype)operator(.)ident(split)operator(()operator(\))operator(:)
                keyword(if) ident(token) keyword(in) ident(_styles)operator(:)
                    keyword(continue)
                ident(ndef) operator(=) ident(_styles)operator(.)ident(get)operator(()ident(token)operator(.)ident(parent)operator(,) predefined_constant(None)operator(\))
                ident(styledefs) operator(=) ident(obj)operator(.)ident(styles)operator(.)ident(get)operator(()ident(token)operator(,) string<delimiter(')delimiter(')>operator(\))operator(.)ident(split)operator(()operator(\))
                keyword(if)  keyword(not) ident(ndef) keyword(or) ident(token) keyword(is) predefined_constant(None)operator(:)
                    ident(ndef) operator(=) operator([)string<delimiter(')delimiter(')>operator(,) integer(0)operator(,) integer(0)operator(,) integer(0)operator(,) string<delimiter(')delimiter(')>operator(,) string<delimiter(')delimiter(')>operator(,) integer(0)operator(,) integer(0)operator(,) integer(0)operator(])
                keyword(elif) string<delimiter(')content(noinherit)delimiter(')> keyword(in) ident(styledefs) keyword(and) ident(token) keyword(is) keyword(not) ident(Token)operator(:)
                    ident(ndef) operator(=) ident(_styles)operator([)ident(Token)operator(])operator([)operator(:)operator(])
                keyword(else)operator(:)
                    ident(ndef) operator(=) ident(ndef)operator([)operator(:)operator(])
                ident(_styles)operator([)ident(token)operator(]) operator(=) ident(ndef)
                keyword(for) ident(styledef) keyword(in) ident(obj)operator(.)ident(styles)operator(.)ident(get)operator(()ident(token)operator(,) string<delimiter(')delimiter(')>operator(\))operator(.)ident(split)operator(()operator(\))operator(:)
                    keyword(if) ident(styledef) operator(==) string<delimiter(')content(noinherit)delimiter(')>operator(:)
                        keyword(pass)
                    keyword(elif) ident(styledef) operator(==) string<delimiter(')content(bold)delimiter(')>operator(:)
                        ident(ndef)operator([)integer(1)operator(]) operator(=) integer(1)
                    keyword(elif) ident(styledef) operator(==) string<delimiter(')content(nobold)delimiter(')>operator(:)
                        ident(ndef)operator([)integer(1)operator(]) operator(=) integer(0)
                    keyword(elif) ident(styledef) operator(==) string<delimiter(')content(italic)delimiter(')>operator(:)
                        ident(ndef)operator([)integer(2)operator(]) operator(=) integer(1)
                    keyword(elif) ident(styledef) operator(==) string<delimiter(')content(noitalic)delimiter(')>operator(:)
                        ident(ndef)operator([)integer(2)operator(]) operator(=) integer(0)
                    keyword(elif) ident(styledef) operator(==) string<delimiter(')content(underline)delimiter(')>operator(:)
                        ident(ndef)operator([)integer(3)operator(]) operator(=) integer(1)
                    keyword(elif) ident(styledef) operator(==) string<delimiter(')content(nounderline)delimiter(')>operator(:)
                        ident(ndef)operator([)integer(3)operator(]) operator(=) integer(0)
                    keyword(elif) ident(styledef)operator([)operator(:)integer(3)operator(]) operator(==) string<delimiter(')content(bg:)delimiter(')>operator(:)
                        ident(ndef)operator([)integer(4)operator(]) operator(=) ident(colorformat)operator(()ident(styledef)operator([)integer(3)operator(:)operator(])operator(\))
                    keyword(elif) ident(styledef)operator([)operator(:)integer(7)operator(]) operator(==) string<delimiter(')content(border:)delimiter(')>operator(:)
                        ident(ndef)operator([)integer(5)operator(]) operator(=) ident(colorformat)operator(()ident(styledef)operator([)integer(7)operator(:)operator(])operator(\))
                    keyword(elif) ident(styledef) operator(==) string<delimiter(')content(roman)delimiter(')>operator(:)
                        ident(ndef)operator([)integer(6)operator(]) operator(=) integer(1)
                    keyword(elif) ident(styledef) operator(==) string<delimiter(')content(sans)delimiter(')>operator(:)
                        ident(ndef)operator([)integer(7)operator(]) operator(=) integer(1)
                    keyword(elif) ident(styledef) operator(==) string<delimiter(')content(mono)delimiter(')>operator(:)
                        ident(ndef)operator([)integer(8)operator(]) operator(=) integer(1)
                    keyword(else)operator(:)
                        ident(ndef)operator([)integer(0)operator(]) operator(=) ident(colorformat)operator(()ident(styledef)operator(\))

        keyword(return) ident(obj)

    keyword(def) method(style_for_token)operator(()ident(cls)operator(,) ident(token)operator(\))operator(:)
        ident(t) operator(=) ident(cls)operator(.)ident(_styles)operator([)ident(token)operator(])
        keyword(return) operator({)
            string<delimiter(')content(color)delimiter(')>operator(:)        ident(t)operator([)integer(0)operator(]) keyword(or) predefined_constant(None)operator(,)
            string<delimiter(')content(bold)delimiter(')>operator(:)         predefined(bool)operator(()ident(t)operator([)integer(1)operator(])operator(\))operator(,)
            string<delimiter(')content(italic)delimiter(')>operator(:)       predefined(bool)operator(()ident(t)operator([)integer(2)operator(])operator(\))operator(,)
            string<delimiter(')content(underline)delimiter(')>operator(:)    predefined(bool)operator(()ident(t)operator([)integer(3)operator(])operator(\))operator(,)
            string<delimiter(')content(bgcolor)delimiter(')>operator(:)      ident(t)operator([)integer(4)operator(]) keyword(or) predefined_constant(None)operator(,)
            string<delimiter(')content(border)delimiter(')>operator(:)       ident(t)operator([)integer(5)operator(]) keyword(or) predefined_constant(None)operator(,)
            string<delimiter(')content(roman)delimiter(')>operator(:)        predefined(bool)operator(()ident(t)operator([)integer(6)operator(])operator(\)) keyword(or) predefined_constant(None)operator(,)
            string<delimiter(')content(sans)delimiter(')>operator(:)         predefined(bool)operator(()ident(t)operator([)integer(7)operator(])operator(\)) keyword(or) predefined_constant(None)operator(,)
            string<delimiter(')content(mono)delimiter(')>operator(:)         predefined(bool)operator(()ident(t)operator([)integer(8)operator(])operator(\)) keyword(or) predefined_constant(None)operator(,)
        operator(})

    keyword(def) method(list_styles)operator(()ident(cls)operator(\))operator(:)
        keyword(return) predefined(list)operator(()ident(cls)operator(\))

    keyword(def) method(styles_token)operator(()ident(cls)operator(,) ident(ttype)operator(\))operator(:)
        keyword(return) ident(ttype) keyword(in) ident(cls)operator(.)ident(_styles)

    keyword(def) method(__iter__)operator(()ident(cls)operator(\))operator(:)
        keyword(for) ident(token) keyword(in) ident(cls)operator(.)ident(_styles)operator(:)
            keyword(yield) ident(token)operator(,) ident(cls)operator(.)ident(style_for_token)operator(()ident(token)operator(\))

    keyword(def) method(__len__)operator(()ident(cls)operator(\))operator(:)
        keyword(return) predefined(len)operator(()ident(cls)operator(.)ident(_styles)operator(\))


keyword(class) class(Style)operator(()predefined(object)operator(\))operator(:)
    ident(__metaclass__) operator(=) ident(StyleMeta)

    comment(#: overall background color (``None`` means transparent\))
    ident(background_color) operator(=) string<delimiter(')content(#ffffff)delimiter(')>

    comment(#: highlight background color)
    ident(highlight_color) operator(=) string<delimiter(')content(#ffffcc)delimiter(')>

    comment(#: Style definitions for individual token types.)
    ident(styles) operator(=) operator({)operator(})
comment(# -*- coding: utf-8 -*-)
docstring<delimiter(""")content(
)content(    pygments.styles)content(
)content(    ~~~~~~~~~~~~~~~)content(
)content(
)content(    Contains built-in styles.)content(
)content(
)content(    :copyright: Copyright 2006-2009 by the Pygments team, see AUTHORS.)content(
)content(    :license: BSD, see LICENSE for details.)content(
)delimiter(""")>

keyword(from) include(pygments.plugin) keyword(import) include(find_plugin_styles)
keyword(from) include(pygments.util) keyword(import) include(ClassNotFound)


comment(#: Maps style names to 'submodule::classname'.)
ident(STYLE_MAP) operator(=) operator({)
    string<delimiter(')content(default)delimiter(')>operator(:)  string<delimiter(')content(default::DefaultStyle)delimiter(')>operator(,)
    string<delimiter(')content(emacs)delimiter(')>operator(:)    string<delimiter(')content(emacs::EmacsStyle)delimiter(')>operator(,)
    string<delimiter(')content(friendly)delimiter(')>operator(:) string<delimiter(')content(friendly::FriendlyStyle)delimiter(')>operator(,)
    string<delimiter(')content(colorful)delimiter(')>operator(:) string<delimiter(')content(colorful::ColorfulStyle)delimiter(')>operator(,)
    string<delimiter(')content(autumn)delimiter(')>operator(:)   string<delimiter(')content(autumn::AutumnStyle)delimiter(')>operator(,)
    string<delimiter(')content(murphy)delimiter(')>operator(:)   string<delimiter(')content(murphy::MurphyStyle)delimiter(')>operator(,)
    string<delimiter(')content(manni)delimiter(')>operator(:)    string<delimiter(')content(manni::ManniStyle)delimiter(')>operator(,)
    string<delimiter(')content(perldoc)delimiter(')>operator(:)  string<delimiter(')content(perldoc::PerldocStyle)delimiter(')>operator(,)
    string<delimiter(')content(pastie)delimiter(')>operator(:)   string<delimiter(')content(pastie::PastieStyle)delimiter(')>operator(,)
    string<delimiter(')content(borland)delimiter(')>operator(:)  string<delimiter(')content(borland::BorlandStyle)delimiter(')>operator(,)
    string<delimiter(')content(trac)delimiter(')>operator(:)     string<delimiter(')content(trac::TracStyle)delimiter(')>operator(,)
    string<delimiter(')content(native)delimiter(')>operator(:)   string<delimiter(')content(native::NativeStyle)delimiter(')>operator(,)
    string<delimiter(')content(fruity)delimiter(')>operator(:)   string<delimiter(')content(fruity::FruityStyle)delimiter(')>operator(,)
    string<delimiter(')content(bw)delimiter(')>operator(:)       string<delimiter(')content(bw::BlackWhiteStyle)delimiter(')>operator(,)
    string<delimiter(')content(vs)delimiter(')>operator(:)       string<delimiter(')content(vs::VisualStudioStyle)delimiter(')>operator(,)
    string<delimiter(')content(tango)delimiter(')>operator(:)    string<delimiter(')content(tango::TangoStyle)delimiter(')>operator(,)
operator(})


keyword(def) method(get_style_by_name)operator(()ident(name)operator(\))operator(:)
    keyword(if) ident(name) keyword(in) ident(STYLE_MAP)operator(:)
        ident(mod)operator(,) ident(cls) operator(=) ident(STYLE_MAP)operator([)ident(name)operator(])operator(.)ident(split)operator(()string<delimiter(')content(::)delimiter(')>operator(\))
        ident(builtin) operator(=) string<delimiter(")content(yes)delimiter(")>
    keyword(else)operator(:)
        keyword(for) ident(found_name)operator(,) ident(style) keyword(in) ident(find_plugin_styles)operator(()operator(\))operator(:)
            keyword(if) ident(name) operator(==) ident(found_name)operator(:)
                keyword(return) ident(style)
        comment(# perhaps it got dropped into our styles package)
        ident(builtin) operator(=) string<delimiter(")delimiter(")>
        ident(mod) operator(=) ident(name)
        ident(cls) operator(=) ident(name)operator(.)ident(title)operator(()operator(\)) operator(+) string<delimiter(")content(Style)delimiter(")>

    keyword(try)operator(:)
        ident(mod) operator(=) predefined(__import__)operator(()string<delimiter(')content(pygments.styles.)delimiter(')> operator(+) ident(mod)operator(,) predefined_constant(None)operator(,) predefined_constant(None)operator(,) operator([)ident(cls)operator(])operator(\))
    keyword(except) exception(ImportError)operator(:)
        keyword(raise) ident(ClassNotFound)operator(()string<delimiter(")content(Could not find style module %r)delimiter(")> operator(%) ident(mod) operator(+)
                         operator(()ident(builtin) keyword(and) string<delimiter(")content(, though it should be builtin)delimiter(")>operator(\)) operator(+) string<delimiter(")content(.)delimiter(")>operator(\))
    keyword(try)operator(:)
        keyword(return) predefined(getattr)operator(()ident(mod)operator(,) ident(cls)operator(\))
    keyword(except) exception(AttributeError)operator(:)
        keyword(raise) ident(ClassNotFound)operator(()string<delimiter(")content(Could not find style class %r in style module.)delimiter(")> operator(%) ident(cls)operator(\))


keyword(def) method(get_all_styles)operator(()operator(\))operator(:)
    docstring<delimiter(""")content(Return an generator for all styles by name,)content(
)content(    both builtin and plugin.)delimiter(""")>
    keyword(for) ident(name) keyword(in) ident(STYLE_MAP)operator(:)
        keyword(yield) ident(name)
    keyword(for) ident(name)operator(,) ident(_) keyword(in) ident(find_plugin_styles)operator(()operator(\))operator(:)
        keyword(yield) ident(name)
comment(# -*- coding: utf-8 -*-)
docstring<delimiter(""")content(
)content(    pygments.styles.autumn)content(
)content(    ~~~~~~~~~~~~~~~~~~~~~~)content(
)content(
)content(    A colorful style, inspired by the terminal highlighting style.)content(
)content(
)content(    :copyright: Copyright 2006-2009 by the Pygments team, see AUTHORS.)content(
)content(    :license: BSD, see LICENSE for details.)content(
)delimiter(""")>

keyword(from) include(pygments.style) keyword(import) include(Style)
keyword(from) include(pygments.token) keyword(import) include(Keyword)operator(,) include(Name)operator(,) include(Comment)operator(,) include(String)operator(,) include(Error)operator(,) \
     include(Number)operator(,) include(Operator)operator(,) include(Generic)operator(,) include(Whitespace)


keyword(class) class(AutumnStyle)operator(()ident(Style)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    A colorful style, inspired by the terminal highlighting style.)content(
)content(    )delimiter(""")>

    ident(default_style) operator(=) string<delimiter(")delimiter(")>

    ident(styles) operator(=) operator({)
        ident(Whitespace)operator(:)                 string<delimiter(')content(#bbbbbb)delimiter(')>operator(,)

        ident(Comment)operator(:)                    string<delimiter(')content(italic #aaaaaa)delimiter(')>operator(,)
        ident(Comment)operator(.)ident(Preproc)operator(:)            string<delimiter(')content(noitalic #4c8317)delimiter(')>operator(,)
        ident(Comment)operator(.)ident(Special)operator(:)            string<delimiter(')content(italic #0000aa)delimiter(')>operator(,)

        ident(Keyword)operator(:)                    string<delimiter(')content(#0000aa)delimiter(')>operator(,)
        ident(Keyword)operator(.)ident(Type)operator(:)               string<delimiter(')content(#00aaaa)delimiter(')>operator(,)

        ident(Operator)operator(.)ident(Word)operator(:)              string<delimiter(')content(#0000aa)delimiter(')>operator(,)

        ident(Name)operator(.)ident(Builtin)operator(:)               string<delimiter(')content(#00aaaa)delimiter(')>operator(,)
        ident(Name)operator(.)ident(Function)operator(:)              string<delimiter(')content(#00aa00)delimiter(')>operator(,)
        ident(Name)operator(.)ident(Class)operator(:)                 string<delimiter(')content(underline #00aa00)delimiter(')>operator(,)
        ident(Name)operator(.)ident(Namespace)operator(:)             string<delimiter(')content(underline #00aaaa)delimiter(')>operator(,)
        ident(Name)operator(.)ident(Variable)operator(:)              string<delimiter(')content(#aa0000)delimiter(')>operator(,)
        ident(Name)operator(.)ident(Constant)operator(:)              string<delimiter(')content(#aa0000)delimiter(')>operator(,)
        ident(Name)operator(.)ident(Entity)operator(:)                string<delimiter(')content(bold #800)delimiter(')>operator(,)
        ident(Name)operator(.)ident(Attribute)operator(:)             string<delimiter(')content(#1e90ff)delimiter(')>operator(,)
        ident(Name)operator(.)ident(Tag)operator(:)                   string<delimiter(')content(bold #1e90ff)delimiter(')>operator(,)
        ident(Name)operator(.)ident(Decorator)operator(:)             string<delimiter(')content(#888888)delimiter(')>operator(,)

        ident(String)operator(:)                     string<delimiter(')content(#aa5500)delimiter(')>operator(,)
        ident(String)operator(.)ident(Symbol)operator(:)              string<delimiter(')content(#0000aa)delimiter(')>operator(,)
        ident(String)operator(.)ident(Regex)operator(:)               string<delimiter(')content(#009999)delimiter(')>operator(,)

        ident(Number)operator(:)                     string<delimiter(')content(#009999)delimiter(')>operator(,)

        ident(Generic)operator(.)ident(Heading)operator(:)            string<delimiter(')content(bold #000080)delimiter(')>operator(,)
        ident(Generic)operator(.)ident(Subheading)operator(:)         string<delimiter(')content(bold #800080)delimiter(')>operator(,)
        ident(Generic)operator(.)ident(Deleted)operator(:)            string<delimiter(')content(#aa0000)delimiter(')>operator(,)
        ident(Generic)operator(.)ident(Inserted)operator(:)           string<delimiter(')content(#00aa00)delimiter(')>operator(,)
        ident(Generic)operator(.)ident(Error)operator(:)              string<delimiter(')content(#aa0000)delimiter(')>operator(,)
        ident(Generic)operator(.)ident(Emph)operator(:)               string<delimiter(')content(italic)delimiter(')>operator(,)
        ident(Generic)operator(.)ident(Strong)operator(:)             string<delimiter(')content(bold)delimiter(')>operator(,)
        ident(Generic)operator(.)ident(Prompt)operator(:)             string<delimiter(')content(#555555)delimiter(')>operator(,)
        ident(Generic)operator(.)ident(Output)operator(:)             string<delimiter(')content(#888888)delimiter(')>operator(,)
        ident(Generic)operator(.)ident(Traceback)operator(:)          string<delimiter(')content(#aa0000)delimiter(')>operator(,)

        ident(Error)operator(:)                      string<delimiter(')content(#F00 bg:#FAA)delimiter(')>
    operator(})
comment(# -*- coding: utf-8 -*-)
docstring<delimiter(""")content(
)content(    pygments.styles.borland)content(
)content(    ~~~~~~~~~~~~~~~~~~~~~~~)content(
)content(
)content(    Style similar to the style used in the Borland IDEs.)content(
)content(
)content(    :copyright: Copyright 2006-2009 by the Pygments team, see AUTHORS.)content(
)content(    :license: BSD, see LICENSE for details.)content(
)delimiter(""")>

keyword(from) include(pygments.style) keyword(import) include(Style)
keyword(from) include(pygments.token) keyword(import) include(Keyword)operator(,) include(Name)operator(,) include(Comment)operator(,) include(String)operator(,) include(Error)operator(,) \
     include(Number)operator(,) include(Operator)operator(,) include(Generic)operator(,) include(Whitespace)


keyword(class) class(BorlandStyle)operator(()ident(Style)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Style similar to the style used in the borland IDEs.)content(
)content(    )delimiter(""")>

    ident(default_style) operator(=) string<delimiter(')delimiter(')>

    ident(styles) operator(=) operator({)
        ident(Whitespace)operator(:)             string<delimiter(')content(#bbbbbb)delimiter(')>operator(,)

        ident(Comment)operator(:)                string<delimiter(')content(italic #008800)delimiter(')>operator(,)
        ident(Comment)operator(.)ident(Preproc)operator(:)        string<delimiter(')content(noitalic #008080)delimiter(')>operator(,)
        ident(Comment)operator(.)ident(Special)operator(:)        string<delimiter(')content(noitalic bold)delimiter(')>operator(,)

        ident(String)operator(:)                 string<delimiter(')content(#0000FF)delimiter(')>operator(,)
        ident(String)operator(.)ident(Char)operator(:)            string<delimiter(')content(#800080)delimiter(')>operator(,)
        ident(Number)operator(:)                 string<delimiter(')content(#0000FF)delimiter(')>operator(,)
        ident(Keyword)operator(:)                string<delimiter(')content(bold #000080)delimiter(')>operator(,)
        ident(Operator)operator(.)ident(Word)operator(:)          string<delimiter(')content(bold)delimiter(')>operator(,)
        ident(Name)operator(.)ident(Tag)operator(:)               string<delimiter(')content(bold #000080)delimiter(')>operator(,)
        ident(Name)operator(.)ident(Attribute)operator(:)         string<delimiter(')content(#FF0000)delimiter(')>operator(,)

        ident(Generic)operator(.)ident(Heading)operator(:)        string<delimiter(')content(#999999)delimiter(')>operator(,)
        ident(Generic)operator(.)ident(Subheading)operator(:)     string<delimiter(')content(#aaaaaa)delimiter(')>operator(,)
        ident(Generic)operator(.)ident(Deleted)operator(:)        string<delimiter(')content(bg:#ffdddd #000000)delimiter(')>operator(,)
        ident(Generic)operator(.)ident(Inserted)operator(:)       string<delimiter(')content(bg:#ddffdd #000000)delimiter(')>operator(,)
        ident(Generic)operator(.)ident(Error)operator(:)          string<delimiter(')content(#aa0000)delimiter(')>operator(,)
        ident(Generic)operator(.)ident(Emph)operator(:)           string<delimiter(')content(italic)delimiter(')>operator(,)
        ident(Generic)operator(.)ident(Strong)operator(:)         string<delimiter(')content(bold)delimiter(')>operator(,)
        ident(Generic)operator(.)ident(Prompt)operator(:)         string<delimiter(')content(#555555)delimiter(')>operator(,)
        ident(Generic)operator(.)ident(Output)operator(:)         string<delimiter(')content(#888888)delimiter(')>operator(,)
        ident(Generic)operator(.)ident(Traceback)operator(:)      string<delimiter(')content(#aa0000)delimiter(')>operator(,)

        ident(Error)operator(:)                  string<delimiter(')content(bg:#e3d2d2 #a61717)delimiter(')>
    operator(})
comment(# -*- coding: utf-8 -*-)
docstring<delimiter(""")content(
)content(    pygments.styles.bw)content(
)content(    ~~~~~~~~~~~~~~~~~~)content(
)content(
)content(    Simple black/white only style.)content(
)content(
)content(    :copyright: Copyright 2006-2009 by the Pygments team, see AUTHORS.)content(
)content(    :license: BSD, see LICENSE for details.)content(
)delimiter(""")>

keyword(from) include(pygments.style) keyword(import) include(Style)
keyword(from) include(pygments.token) keyword(import) include(Keyword)operator(,) include(Name)operator(,) include(Comment)operator(,) include(String)operator(,) include(Error)operator(,) \
     include(Operator)operator(,) include(Generic)


keyword(class) class(BlackWhiteStyle)operator(()ident(Style)operator(\))operator(:)

    ident(background_color) operator(=) string<delimiter(")content(#ffffff)delimiter(")>
    ident(default_style) operator(=) string<delimiter(")delimiter(")>

    ident(styles) operator(=) operator({)
        ident(Comment)operator(:)                   string<delimiter(")content(italic)delimiter(")>operator(,)
        ident(Comment)operator(.)ident(Preproc)operator(:)           string<delimiter(")content(noitalic)delimiter(")>operator(,)

        ident(Keyword)operator(:)                   string<delimiter(")content(bold)delimiter(")>operator(,)
        ident(Keyword)operator(.)ident(Pseudo)operator(:)            string<delimiter(")content(nobold)delimiter(")>operator(,)
        ident(Keyword)operator(.)ident(Type)operator(:)              string<delimiter(")content(nobold)delimiter(")>operator(,)

        ident(Operator)operator(.)ident(Word)operator(:)             string<delimiter(")content(bold)delimiter(")>operator(,)

        ident(Name)operator(.)ident(Class)operator(:)                string<delimiter(")content(bold)delimiter(")>operator(,)
        ident(Name)operator(.)ident(Namespace)operator(:)            string<delimiter(")content(bold)delimiter(")>operator(,)
        ident(Name)operator(.)ident(Exception)operator(:)            string<delimiter(")content(bold)delimiter(")>operator(,)
        ident(Name)operator(.)ident(Entity)operator(:)               string<delimiter(")content(bold)delimiter(")>operator(,)
        ident(Name)operator(.)ident(Tag)operator(:)                  string<delimiter(")content(bold)delimiter(")>operator(,)

        ident(String)operator(:)                    string<delimiter(")content(italic)delimiter(")>operator(,)
        ident(String)operator(.)ident(Interpol)operator(:)           string<delimiter(")content(bold)delimiter(")>operator(,)
        ident(String)operator(.)ident(Escape)operator(:)             string<delimiter(")content(bold)delimiter(")>operator(,)

        ident(Generic)operator(.)ident(Heading)operator(:)           string<delimiter(")content(bold)delimiter(")>operator(,)
        ident(Generic)operator(.)ident(Subheading)operator(:)        string<delimiter(")content(bold)delimiter(")>operator(,)
        ident(Generic)operator(.)ident(Emph)operator(:)              string<delimiter(")content(italic)delimiter(")>operator(,)
        ident(Generic)operator(.)ident(Strong)operator(:)            string<delimiter(")content(bold)delimiter(")>operator(,)
        ident(Generic)operator(.)ident(Prompt)operator(:)            string<delimiter(")content(bold)delimiter(")>operator(,)

        ident(Error)operator(:)                     string<delimiter(")content(border:#FF0000)delimiter(")>
    operator(})
comment(# -*- coding: utf-8 -*-)
docstring<delimiter(""")content(
)content(    pygments.styles.colorful)content(
)content(    ~~~~~~~~~~~~~~~~~~~~~~~~)content(
)content(
)content(    A colorful style, inspired by CodeRay.)content(
)content(
)content(    :copyright: Copyright 2006-2009 by the Pygments team, see AUTHORS.)content(
)content(    :license: BSD, see LICENSE for details.)content(
)delimiter(""")>

keyword(from) include(pygments.style) keyword(import) include(Style)
keyword(from) include(pygments.token) keyword(import) include(Keyword)operator(,) include(Name)operator(,) include(Comment)operator(,) include(String)operator(,) include(Error)operator(,) \
     include(Number)operator(,) include(Operator)operator(,) include(Generic)operator(,) include(Whitespace)


keyword(class) class(ColorfulStyle)operator(()ident(Style)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    A colorful style, inspired by CodeRay.)content(
)content(    )delimiter(""")>

    ident(default_style) operator(=) string<delimiter(")delimiter(")>

    ident(styles) operator(=) operator({)
        ident(Whitespace)operator(:)                string<delimiter(")content(#bbbbbb)delimiter(")>operator(,)

        ident(Comment)operator(:)                   string<delimiter(")content(#888)delimiter(")>operator(,)
        ident(Comment)operator(.)ident(Preproc)operator(:)           string<delimiter(")content(#579)delimiter(")>operator(,)
        ident(Comment)operator(.)ident(Special)operator(:)           string<delimiter(")content(bold #cc0000)delimiter(")>operator(,)

        ident(Keyword)operator(:)                   string<delimiter(")content(bold #080)delimiter(")>operator(,)
        ident(Keyword)operator(.)ident(Pseudo)operator(:)            string<delimiter(")content(#038)delimiter(")>operator(,)
        ident(Keyword)operator(.)ident(Type)operator(:)              string<delimiter(")content(#339)delimiter(")>operator(,)

        ident(Operator)operator(:)                  string<delimiter(")content(#333)delimiter(")>operator(,)
        ident(Operator)operator(.)ident(Word)operator(:)             string<delimiter(")content(bold #000)delimiter(")>operator(,)

        ident(Name)operator(.)ident(Builtin)operator(:)              string<delimiter(")content(#007020)delimiter(")>operator(,)
        ident(Name)operator(.)ident(Function)operator(:)             string<delimiter(")content(bold #06B)delimiter(")>operator(,)
        ident(Name)operator(.)ident(Class)operator(:)                string<delimiter(")content(bold #B06)delimiter(")>operator(,)
        ident(Name)operator(.)ident(Namespace)operator(:)            string<delimiter(")content(bold #0e84b5)delimiter(")>operator(,)
        ident(Name)operator(.)ident(Exception)operator(:)            string<delimiter(")content(bold #F00)delimiter(")>operator(,)
        ident(Name)operator(.)ident(Variable)operator(:)             string<delimiter(")content(#963)delimiter(")>operator(,)
        ident(Name)operator(.)ident(Variable)operator(.)ident(Instance)operator(:)    string<delimiter(")content(#33B)delimiter(")>operator(,)
        ident(Name)operator(.)ident(Variable)operator(.)ident(Class)operator(:)       string<delimiter(")content(#369)delimiter(")>operator(,)
        ident(Name)operator(.)ident(Variable)operator(.)ident(Global)operator(:)      string<delimiter(")content(bold #d70)delimiter(")>operator(,)
        ident(Name)operator(.)ident(Constant)operator(:)             string<delimiter(")content(bold #036)delimiter(")>operator(,)
        ident(Name)operator(.)ident(Label)operator(:)                string<delimiter(")content(bold #970)delimiter(")>operator(,)
        ident(Name)operator(.)ident(Entity)operator(:)               string<delimiter(")content(bold #800)delimiter(")>operator(,)
        ident(Name)operator(.)ident(Attribute)operator(:)            string<delimiter(")content(#00C)delimiter(")>operator(,)
        ident(Name)operator(.)ident(Tag)operator(:)                  string<delimiter(")content(#070)delimiter(")>operator(,)
        ident(Name)operator(.)ident(Decorator)operator(:)            string<delimiter(")content(bold #555)delimiter(")>operator(,)

        ident(String)operator(:)                    string<delimiter(")content(bg:#fff0f0)delimiter(")>operator(,)
        ident(String)operator(.)ident(Char)operator(:)               string<delimiter(")content(#04D bg:)delimiter(")>operator(,)
        ident(String)operator(.)ident(Doc)operator(:)                string<delimiter(")content(#D42 bg:)delimiter(")>operator(,)
        ident(String)operator(.)ident(Interpol)operator(:)           string<delimiter(")content(bg:#eee)delimiter(")>operator(,)
        ident(String)operator(.)ident(Escape)operator(:)             string<delimiter(")content(bold #666)delimiter(")>operator(,)
        ident(String)operator(.)ident(Regex)operator(:)              string<delimiter(")content(bg:#fff0ff #000)delimiter(")>operator(,)
        ident(String)operator(.)ident(Symbol)operator(:)             string<delimiter(")content(#A60 bg:)delimiter(")>operator(,)
        ident(String)operator(.)ident(Other)operator(:)              string<delimiter(")content(#D20)delimiter(")>operator(,)

        ident(Number)operator(:)                    string<delimiter(")content(bold #60E)delimiter(")>operator(,)
        ident(Number)operator(.)ident(Integer)operator(:)            string<delimiter(")content(bold #00D)delimiter(")>operator(,)
        ident(Number)operator(.)ident(Float)operator(:)              string<delimiter(")content(bold #60E)delimiter(")>operator(,)
        ident(Number)operator(.)ident(Hex)operator(:)                string<delimiter(")content(bold #058)delimiter(")>operator(,)
        ident(Number)operator(.)ident(Oct)operator(:)                string<delimiter(")content(bold #40E)delimiter(")>operator(,)

        ident(Generic)operator(.)ident(Heading)operator(:)           string<delimiter(")content(bold #000080)delimiter(")>operator(,)
        ident(Generic)operator(.)ident(Subheading)operator(:)        string<delimiter(")content(bold #800080)delimiter(")>operator(,)
        ident(Generic)operator(.)ident(Deleted)operator(:)           string<delimiter(")content(#A00000)delimiter(")>operator(,)
        ident(Generic)operator(.)ident(Inserted)operator(:)          string<delimiter(")content(#00A000)delimiter(")>operator(,)
        ident(Generic)operator(.)ident(Error)operator(:)             string<delimiter(")content(#FF0000)delimiter(")>operator(,)
        ident(Generic)operator(.)ident(Emph)operator(:)              string<delimiter(")content(italic)delimiter(")>operator(,)
        ident(Generic)operator(.)ident(Strong)operator(:)            string<delimiter(")content(bold)delimiter(")>operator(,)
        ident(Generic)operator(.)ident(Prompt)operator(:)            string<delimiter(")content(bold #c65d09)delimiter(")>operator(,)
        ident(Generic)operator(.)ident(Output)operator(:)            string<delimiter(")content(#888)delimiter(")>operator(,)
        ident(Generic)operator(.)ident(Traceback)operator(:)         string<delimiter(")content(#04D)delimiter(")>operator(,)

        ident(Error)operator(:)                     string<delimiter(")content(#F00 bg:#FAA)delimiter(")>
    operator(})
comment(# -*- coding: utf-8 -*-)
docstring<delimiter(""")content(
)content(    pygments.styles.default)content(
)content(    ~~~~~~~~~~~~~~~~~~~~~~~)content(
)content(
)content(    The default highlighting style.)content(
)content(
)content(    :copyright: Copyright 2006-2009 by the Pygments team, see AUTHORS.)content(
)content(    :license: BSD, see LICENSE for details.)content(
)delimiter(""")>

keyword(from) include(pygments.style) keyword(import) include(Style)
keyword(from) include(pygments.token) keyword(import) include(Keyword)operator(,) include(Name)operator(,) include(Comment)operator(,) include(String)operator(,) include(Error)operator(,) \
     include(Number)operator(,) include(Operator)operator(,) include(Generic)operator(,) include(Whitespace)


keyword(class) class(DefaultStyle)operator(()ident(Style)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    The default style (inspired by Emacs 22\).)content(
)content(    )delimiter(""")>

    ident(background_color) operator(=) string<delimiter(")content(#f8f8f8)delimiter(")>
    ident(default_style) operator(=) string<delimiter(")delimiter(")>

    ident(styles) operator(=) operator({)
        ident(Whitespace)operator(:)                string<delimiter(")content(#bbbbbb)delimiter(")>operator(,)
        ident(Comment)operator(:)                   string<delimiter(")content(italic #408080)delimiter(")>operator(,)
        ident(Comment)operator(.)ident(Preproc)operator(:)           string<delimiter(")content(noitalic #BC7A00)delimiter(")>operator(,)

        comment(#Keyword:                   "bold #AA22FF",)
        ident(Keyword)operator(:)                   string<delimiter(")content(bold #008000)delimiter(")>operator(,)
        ident(Keyword)operator(.)ident(Pseudo)operator(:)            string<delimiter(")content(nobold)delimiter(")>operator(,)
        ident(Keyword)operator(.)ident(Type)operator(:)              string<delimiter(")content(nobold #B00040)delimiter(")>operator(,)

        ident(Operator)operator(:)                  string<delimiter(")content(#666666)delimiter(")>operator(,)
        ident(Operator)operator(.)ident(Word)operator(:)             string<delimiter(")content(bold #AA22FF)delimiter(")>operator(,)

        ident(Name)operator(.)ident(Builtin)operator(:)              string<delimiter(")content(#008000)delimiter(")>operator(,)
        ident(Name)operator(.)ident(Function)operator(:)             string<delimiter(")content(#0000FF)delimiter(")>operator(,)
        ident(Name)operator(.)ident(Class)operator(:)                string<delimiter(")content(bold #0000FF)delimiter(")>operator(,)
        ident(Name)operator(.)ident(Namespace)operator(:)            string<delimiter(")content(bold #0000FF)delimiter(")>operator(,)
        ident(Name)operator(.)ident(Exception)operator(:)            string<delimiter(")content(bold #D2413A)delimiter(")>operator(,)
        ident(Name)operator(.)ident(Variable)operator(:)             string<delimiter(")content(#19177C)delimiter(")>operator(,)
        ident(Name)operator(.)ident(Constant)operator(:)             string<delimiter(")content(#880000)delimiter(")>operator(,)
        ident(Name)operator(.)ident(Label)operator(:)                string<delimiter(")content(#A0A000)delimiter(")>operator(,)
        ident(Name)operator(.)ident(Entity)operator(:)               string<delimiter(")content(bold #999999)delimiter(")>operator(,)
        ident(Name)operator(.)ident(Attribute)operator(:)            string<delimiter(")content(#7D9029)delimiter(")>operator(,)
        ident(Name)operator(.)ident(Tag)operator(:)                  string<delimiter(")content(bold #008000)delimiter(")>operator(,)
        ident(Name)operator(.)ident(Decorator)operator(:)            string<delimiter(")content(#AA22FF)delimiter(")>operator(,)

        ident(String)operator(:)                    string<delimiter(")content(#BA2121)delimiter(")>operator(,)
        ident(String)operator(.)ident(Doc)operator(:)                string<delimiter(")content(italic)delimiter(")>operator(,)
        ident(String)operator(.)ident(Interpol)operator(:)           string<delimiter(")content(bold #BB6688)delimiter(")>operator(,)
        ident(String)operator(.)ident(Escape)operator(:)             string<delimiter(")content(bold #BB6622)delimiter(")>operator(,)
        ident(String)operator(.)ident(Regex)operator(:)              string<delimiter(")content(#BB6688)delimiter(")>operator(,)
        comment(#String.Symbol:             "#B8860B",)
        ident(String)operator(.)ident(Symbol)operator(:)             string<delimiter(")content(#19177C)delimiter(")>operator(,)
        ident(String)operator(.)ident(Other)operator(:)              string<delimiter(")content(#008000)delimiter(")>operator(,)
        ident(Number)operator(:)                    string<delimiter(")content(#666666)delimiter(")>operator(,)

        ident(Generic)operator(.)ident(Heading)operator(:)           string<delimiter(")content(bold #000080)delimiter(")>operator(,)
        ident(Generic)operator(.)ident(Subheading)operator(:)        string<delimiter(")content(bold #800080)delimiter(")>operator(,)
        ident(Generic)operator(.)ident(Deleted)operator(:)           string<delimiter(")content(#A00000)delimiter(")>operator(,)
        ident(Generic)operator(.)ident(Inserted)operator(:)          string<delimiter(")content(#00A000)delimiter(")>operator(,)
        ident(Generic)operator(.)ident(Error)operator(:)             string<delimiter(")content(#FF0000)delimiter(")>operator(,)
        ident(Generic)operator(.)ident(Emph)operator(:)              string<delimiter(")content(italic)delimiter(")>operator(,)
        ident(Generic)operator(.)ident(Strong)operator(:)            string<delimiter(")content(bold)delimiter(")>operator(,)
        ident(Generic)operator(.)ident(Prompt)operator(:)            string<delimiter(")content(bold #000080)delimiter(")>operator(,)
        ident(Generic)operator(.)ident(Output)operator(:)            string<delimiter(")content(#888)delimiter(")>operator(,)
        ident(Generic)operator(.)ident(Traceback)operator(:)         string<delimiter(")content(#04D)delimiter(")>operator(,)

        ident(Error)operator(:)                     string<delimiter(")content(border:#FF0000)delimiter(")>
    operator(})
comment(# -*- coding: utf-8 -*-)
docstring<delimiter(""")content(
)content(    pygments.styles.emacs)content(
)content(    ~~~~~~~~~~~~~~~~~~~~~)content(
)content(
)content(    A highlighting style for Pygments, inspired by Emacs.)content(
)content(
)content(    :copyright: Copyright 2006-2009 by the Pygments team, see AUTHORS.)content(
)content(    :license: BSD, see LICENSE for details.)content(
)delimiter(""")>

keyword(from) include(pygments.style) keyword(import) include(Style)
keyword(from) include(pygments.token) keyword(import) include(Keyword)operator(,) include(Name)operator(,) include(Comment)operator(,) include(String)operator(,) include(Error)operator(,) \
     include(Number)operator(,) include(Operator)operator(,) include(Generic)operator(,) include(Whitespace)


keyword(class) class(EmacsStyle)operator(()ident(Style)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    The default style (inspired by Emacs 22\).)content(
)content(    )delimiter(""")>

    ident(background_color) operator(=) string<delimiter(")content(#f8f8f8)delimiter(")>
    ident(default_style) operator(=) string<delimiter(")delimiter(")>

    ident(styles) operator(=) operator({)
        ident(Whitespace)operator(:)                string<delimiter(")content(#bbbbbb)delimiter(")>operator(,)
        ident(Comment)operator(:)                   string<delimiter(")content(italic #008800)delimiter(")>operator(,)
        ident(Comment)operator(.)ident(Preproc)operator(:)           string<delimiter(")content(noitalic)delimiter(")>operator(,)
        ident(Comment)operator(.)ident(Special)operator(:)           string<delimiter(")content(noitalic bold)delimiter(")>operator(,)

        ident(Keyword)operator(:)                   string<delimiter(")content(bold #AA22FF)delimiter(")>operator(,)
        ident(Keyword)operator(.)ident(Pseudo)operator(:)            string<delimiter(")content(nobold)delimiter(")>operator(,)
        ident(Keyword)operator(.)ident(Type)operator(:)              string<delimiter(")content(bold #00BB00)delimiter(")>operator(,)

        ident(Operator)operator(:)                  string<delimiter(")content(#666666)delimiter(")>operator(,)
        ident(Operator)operator(.)ident(Word)operator(:)             string<delimiter(")content(bold #AA22FF)delimiter(")>operator(,)

        ident(Name)operator(.)ident(Builtin)operator(:)              string<delimiter(")content(#AA22FF)delimiter(")>operator(,)
        ident(Name)operator(.)ident(Function)operator(:)             string<delimiter(")content(#00A000)delimiter(")>operator(,)
        ident(Name)operator(.)ident(Class)operator(:)                string<delimiter(")content(#0000FF)delimiter(")>operator(,)
        ident(Name)operator(.)ident(Namespace)operator(:)            string<delimiter(")content(bold #0000FF)delimiter(")>operator(,)
        ident(Name)operator(.)ident(Exception)operator(:)            string<delimiter(")content(bold #D2413A)delimiter(")>operator(,)
        ident(Name)operator(.)ident(Variable)operator(:)             string<delimiter(")content(#B8860B)delimiter(")>operator(,)
        ident(Name)operator(.)ident(Constant)operator(:)             string<delimiter(")content(#880000)delimiter(")>operator(,)
        ident(Name)operator(.)ident(Label)operator(:)                string<delimiter(")content(#A0A000)delimiter(")>operator(,)
        ident(Name)operator(.)ident(Entity)operator(:)               string<delimiter(")content(bold #999999)delimiter(")>operator(,)
        ident(Name)operator(.)ident(Attribute)operator(:)            string<delimiter(")content(#BB4444)delimiter(")>operator(,)
        ident(Name)operator(.)ident(Tag)operator(:)                  string<delimiter(")content(bold #008000)delimiter(")>operator(,)
        ident(Name)operator(.)ident(Decorator)operator(:)            string<delimiter(")content(#AA22FF)delimiter(")>operator(,)

        ident(String)operator(:)                    string<delimiter(")content(#BB4444)delimiter(")>operator(,)
        ident(String)operator(.)ident(Doc)operator(:)                string<delimiter(")content(italic)delimiter(")>operator(,)
        ident(String)operator(.)ident(Interpol)operator(:)           string<delimiter(")content(bold #BB6688)delimiter(")>operator(,)
        ident(String)operator(.)ident(Escape)operator(:)             string<delimiter(")content(bold #BB6622)delimiter(")>operator(,)
        ident(String)operator(.)ident(Regex)operator(:)              string<delimiter(")content(#BB6688)delimiter(")>operator(,)
        ident(String)operator(.)ident(Symbol)operator(:)             string<delimiter(")content(#B8860B)delimiter(")>operator(,)
        ident(String)operator(.)ident(Other)operator(:)              string<delimiter(")content(#008000)delimiter(")>operator(,)
        ident(Number)operator(:)                    string<delimiter(")content(#666666)delimiter(")>operator(,)

        ident(Generic)operator(.)ident(Heading)operator(:)           string<delimiter(")content(bold #000080)delimiter(")>operator(,)
        ident(Generic)operator(.)ident(Subheading)operator(:)        string<delimiter(")content(bold #800080)delimiter(")>operator(,)
        ident(Generic)operator(.)ident(Deleted)operator(:)           string<delimiter(")content(#A00000)delimiter(")>operator(,)
        ident(Generic)operator(.)ident(Inserted)operator(:)          string<delimiter(")content(#00A000)delimiter(")>operator(,)
        ident(Generic)operator(.)ident(Error)operator(:)             string<delimiter(")content(#FF0000)delimiter(")>operator(,)
        ident(Generic)operator(.)ident(Emph)operator(:)              string<delimiter(")content(italic)delimiter(")>operator(,)
        ident(Generic)operator(.)ident(Strong)operator(:)            string<delimiter(")content(bold)delimiter(")>operator(,)
        ident(Generic)operator(.)ident(Prompt)operator(:)            string<delimiter(")content(bold #000080)delimiter(")>operator(,)
        ident(Generic)operator(.)ident(Output)operator(:)            string<delimiter(")content(#888)delimiter(")>operator(,)
        ident(Generic)operator(.)ident(Traceback)operator(:)         string<delimiter(")content(#04D)delimiter(")>operator(,)

        ident(Error)operator(:)                     string<delimiter(")content(border:#FF0000)delimiter(")>
    operator(})
comment(# -*- coding: utf-8 -*-)
docstring<delimiter(""")content(
)content(    pygments.styles.friendly)content(
)content(    ~~~~~~~~~~~~~~~~~~~~~~~~)content(
)content(
)content(    A modern style based on the VIM pyte theme.)content(
)content(
)content(    :copyright: Copyright 2006-2009 by the Pygments team, see AUTHORS.)content(
)content(    :license: BSD, see LICENSE for details.)content(
)delimiter(""")>

keyword(from) include(pygments.style) keyword(import) include(Style)
keyword(from) include(pygments.token) keyword(import) include(Keyword)operator(,) include(Name)operator(,) include(Comment)operator(,) include(String)operator(,) include(Error)operator(,) \
     include(Number)operator(,) include(Operator)operator(,) include(Generic)operator(,) include(Whitespace)


keyword(class) class(FriendlyStyle)operator(()ident(Style)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    A modern style based on the VIM pyte theme.)content(
)content(    )delimiter(""")>

    ident(background_color) operator(=) string<delimiter(")content(#f0f0f0)delimiter(")>
    ident(default_style) operator(=) string<delimiter(")delimiter(")>

    ident(styles) operator(=) operator({)
        ident(Whitespace)operator(:)                string<delimiter(")content(#bbbbbb)delimiter(")>operator(,)
        ident(Comment)operator(:)                   string<delimiter(")content(italic #60a0b0)delimiter(")>operator(,)
        ident(Comment)operator(.)ident(Preproc)operator(:)           string<delimiter(")content(noitalic #007020)delimiter(")>operator(,)
        ident(Comment)operator(.)ident(Special)operator(:)           string<delimiter(")content(noitalic bg:#fff0f0)delimiter(")>operator(,)

        ident(Keyword)operator(:)                   string<delimiter(")content(bold #007020)delimiter(")>operator(,)
        ident(Keyword)operator(.)ident(Pseudo)operator(:)            string<delimiter(")content(nobold)delimiter(")>operator(,)
        ident(Keyword)operator(.)ident(Type)operator(:)              string<delimiter(")content(nobold #902000)delimiter(")>operator(,)

        ident(Operator)operator(:)                  string<delimiter(")content(#666666)delimiter(")>operator(,)
        ident(Operator)operator(.)ident(Word)operator(:)             string<delimiter(")content(bold #007020)delimiter(")>operator(,)

        ident(Name)operator(.)ident(Builtin)operator(:)              string<delimiter(")content(#007020)delimiter(")>operator(,)
        ident(Name)operator(.)ident(Function)operator(:)             string<delimiter(")content(#06287e)delimiter(")>operator(,)
        ident(Name)operator(.)ident(Class)operator(:)                string<delimiter(")content(bold #0e84b5)delimiter(")>operator(,)
        ident(Name)operator(.)ident(Namespace)operator(:)            string<delimiter(")content(bold #0e84b5)delimiter(")>operator(,)
        ident(Name)operator(.)ident(Exception)operator(:)            string<delimiter(")content(#007020)delimiter(")>operator(,)
        ident(Name)operator(.)ident(Variable)operator(:)             string<delimiter(")content(#bb60d5)delimiter(")>operator(,)
        ident(Name)operator(.)ident(Constant)operator(:)             string<delimiter(")content(#60add5)delimiter(")>operator(,)
        ident(Name)operator(.)ident(Label)operator(:)                string<delimiter(")content(bold #002070)delimiter(")>operator(,)
        ident(Name)operator(.)ident(Entity)operator(:)               string<delimiter(")content(bold #d55537)delimiter(")>operator(,)
        ident(Name)operator(.)ident(Attribute)operator(:)            string<delimiter(")content(#4070a0)delimiter(")>operator(,)
        ident(Name)operator(.)ident(Tag)operator(:)                  string<delimiter(")content(bold #062873)delimiter(")>operator(,)
        ident(Name)operator(.)ident(Decorator)operator(:)            string<delimiter(")content(bold #555555)delimiter(")>operator(,)

        ident(String)operator(:)                    string<delimiter(")content(#4070a0)delimiter(")>operator(,)
        ident(String)operator(.)ident(Doc)operator(:)                string<delimiter(")content(italic)delimiter(")>operator(,)
        ident(String)operator(.)ident(Interpol)operator(:)           string<delimiter(")content(italic #70a0d0)delimiter(")>operator(,)
        ident(String)operator(.)ident(Escape)operator(:)             string<delimiter(")content(bold #4070a0)delimiter(")>operator(,)
        ident(String)operator(.)ident(Regex)operator(:)              string<delimiter(")content(#235388)delimiter(")>operator(,)
        ident(String)operator(.)ident(Symbol)operator(:)             string<delimiter(")content(#517918)delimiter(")>operator(,)
        ident(String)operator(.)ident(Other)operator(:)              string<delimiter(")content(#c65d09)delimiter(")>operator(,)
        ident(Number)operator(:)                    string<delimiter(")content(#40a070)delimiter(")>operator(,)

        ident(Generic)operator(.)ident(Heading)operator(:)           string<delimiter(")content(bold #000080)delimiter(")>operator(,)
        ident(Generic)operator(.)ident(Subheading)operator(:)        string<delimiter(")content(bold #800080)delimiter(")>operator(,)
        ident(Generic)operator(.)ident(Deleted)operator(:)           string<delimiter(")content(#A00000)delimiter(")>operator(,)
        ident(Generic)operator(.)ident(Inserted)operator(:)          string<delimiter(")content(#00A000)delimiter(")>operator(,)
        ident(Generic)operator(.)ident(Error)operator(:)             string<delimiter(")content(#FF0000)delimiter(")>operator(,)
        ident(Generic)operator(.)ident(Emph)operator(:)              string<delimiter(")content(italic)delimiter(")>operator(,)
        ident(Generic)operator(.)ident(Strong)operator(:)            string<delimiter(")content(bold)delimiter(")>operator(,)
        ident(Generic)operator(.)ident(Prompt)operator(:)            string<delimiter(")content(bold #c65d09)delimiter(")>operator(,)
        ident(Generic)operator(.)ident(Output)operator(:)            string<delimiter(")content(#888)delimiter(")>operator(,)
        ident(Generic)operator(.)ident(Traceback)operator(:)         string<delimiter(")content(#04D)delimiter(")>operator(,)

        ident(Error)operator(:)                     string<delimiter(")content(border:#FF0000)delimiter(")>
    operator(})
comment(# -*- coding: utf-8 -*-)
docstring<delimiter(""")content(
)content(    pygments.styles.fruity)content(
)content(    ~~~~~~~~~~~~~~~~~~~~~~)content(
)content(
)content(    pygments version of my "fruity" vim theme.)content(
)content(
)content(    :copyright: Copyright 2006-2009 by the Pygments team, see AUTHORS.)content(
)content(    :license: BSD, see LICENSE for details.)content(
)delimiter(""")>

keyword(from) include(pygments.style) keyword(import) include(Style)
keyword(from) include(pygments.token) keyword(import) include(Token)operator(,) include(Comment)operator(,) include(Name)operator(,) include(Keyword)operator(,) \
    include(Generic)operator(,) include(Number)operator(,) include(String)operator(,) include(Whitespace)

keyword(class) class(FruityStyle)operator(()ident(Style)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Pygments version of the "native" vim theme.)content(
)content(    )delimiter(""")>

    ident(background_color) operator(=) string<delimiter(')content(#111111)delimiter(')>
    ident(highlight_color) operator(=) string<delimiter(')content(#333333)delimiter(')>

    ident(styles) operator(=) operator({)
        ident(Whitespace)operator(:)         string<delimiter(')content(#888888)delimiter(')>operator(,)
        ident(Token)operator(:)              string<delimiter(')content(#ffffff)delimiter(')>operator(,)
        ident(Generic)operator(.)ident(Output)operator(:)     string<delimiter(')content(#444444 bg:#222222)delimiter(')>operator(,)
        ident(Keyword)operator(:)            string<delimiter(')content(#fb660a bold)delimiter(')>operator(,)
        ident(Keyword)operator(.)ident(Pseudo)operator(:)     string<delimiter(')content(nobold)delimiter(')>operator(,)
        ident(Number)operator(:)             string<delimiter(')content(#0086f7 bold)delimiter(')>operator(,)
        ident(Name)operator(.)ident(Tag)operator(:)           string<delimiter(')content(#fb660a bold)delimiter(')>operator(,)
        ident(Name)operator(.)ident(Variable)operator(:)      string<delimiter(')content(#fb660a)delimiter(')>operator(,)
        ident(Name)operator(.)ident(Constant)operator(:)      string<delimiter(')content(#fb660a)delimiter(')>operator(,)
        ident(Comment)operator(:)            string<delimiter(')content(#008800 bg:#0f140f italic)delimiter(')>operator(,)
        ident(Name)operator(.)ident(Attribute)operator(:)     string<delimiter(')content(#ff0086 bold)delimiter(')>operator(,)
        ident(String)operator(:)             string<delimiter(')content(#0086d2)delimiter(')>operator(,)
        ident(Name)operator(.)ident(Function)operator(:)      string<delimiter(')content(#ff0086 bold)delimiter(')>operator(,)
        ident(Generic)operator(.)ident(Heading)operator(:)    string<delimiter(')content(#ffffff bold)delimiter(')>operator(,)
        ident(Keyword)operator(.)ident(Type)operator(:)       string<delimiter(')content(#cdcaa9 bold)delimiter(')>operator(,)
        ident(Generic)operator(.)ident(Subheading)operator(:) string<delimiter(')content(#ffffff bold)delimiter(')>operator(,)
        ident(Name)operator(.)ident(Constant)operator(:)      string<delimiter(')content(#0086d2)delimiter(')>operator(,)
        ident(Comment)operator(.)ident(Preproc)operator(:)    string<delimiter(')content(#ff0007 bold)delimiter(')>
    operator(})
comment(# -*- coding: utf-8 -*-)
docstring<delimiter(""")content(
)content(    pygments.styles.manni)content(
)content(    ~~~~~~~~~~~~~~~~~~~~~)content(
)content(
)content(    A colorful style, inspired by the terminal highlighting style.)content(
)content(
)content(    This is a port of the style used in the `php port`_ of pygments)content(
)content(    by Manni. The style is called 'default' there.)content(
)content(
)content(    :copyright: Copyright 2006-2009 by the Pygments team, see AUTHORS.)content(
)content(    :license: BSD, see LICENSE for details.)content(
)delimiter(""")>

keyword(from) include(pygments.style) keyword(import) include(Style)
keyword(from) include(pygments.token) keyword(import) include(Keyword)operator(,) include(Name)operator(,) include(Comment)operator(,) include(String)operator(,) include(Error)operator(,) \
     include(Number)operator(,) include(Operator)operator(,) include(Generic)operator(,) include(Whitespace)


keyword(class) class(ManniStyle)operator(()ident(Style)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    A colorful style, inspired by the terminal highlighting style.)content(
)content(    )delimiter(""")>

    ident(background_color) operator(=) string<delimiter(')content(#f0f3f3)delimiter(')>

    ident(styles) operator(=) operator({)
        ident(Whitespace)operator(:)         string<delimiter(')content(#bbbbbb)delimiter(')>operator(,)
        ident(Comment)operator(:)            string<delimiter(')content(italic #0099FF)delimiter(')>operator(,)
        ident(Comment)operator(.)ident(Preproc)operator(:)    string<delimiter(')content(noitalic #009999)delimiter(')>operator(,)
        ident(Comment)operator(.)ident(Special)operator(:)    string<delimiter(')content(bold)delimiter(')>operator(,)

        ident(Keyword)operator(:)            string<delimiter(')content(bold #006699)delimiter(')>operator(,)
        ident(Keyword)operator(.)ident(Pseudo)operator(:)     string<delimiter(')content(nobold)delimiter(')>operator(,)
        ident(Keyword)operator(.)ident(Type)operator(:)       string<delimiter(')content(#007788)delimiter(')>operator(,)

        ident(Operator)operator(:)           string<delimiter(')content(#555555)delimiter(')>operator(,)
        ident(Operator)operator(.)ident(Word)operator(:)      string<delimiter(')content(bold #000000)delimiter(')>operator(,)

        ident(Name)operator(.)ident(Builtin)operator(:)       string<delimiter(')content(#336666)delimiter(')>operator(,)
        ident(Name)operator(.)ident(Function)operator(:)      string<delimiter(')content(#CC00FF)delimiter(')>operator(,)
        ident(Name)operator(.)ident(Class)operator(:)         string<delimiter(')content(bold #00AA88)delimiter(')>operator(,)
        ident(Name)operator(.)ident(Namespace)operator(:)     string<delimiter(')content(bold #00CCFF)delimiter(')>operator(,)
        ident(Name)operator(.)ident(Exception)operator(:)     string<delimiter(')content(bold #CC0000)delimiter(')>operator(,)
        ident(Name)operator(.)ident(Variable)operator(:)      string<delimiter(')content(#003333)delimiter(')>operator(,)
        ident(Name)operator(.)ident(Constant)operator(:)      string<delimiter(')content(#336600)delimiter(')>operator(,)
        ident(Name)operator(.)ident(Label)operator(:)         string<delimiter(')content(#9999FF)delimiter(')>operator(,)
        ident(Name)operator(.)ident(Entity)operator(:)        string<delimiter(')content(bold #999999)delimiter(')>operator(,)
        ident(Name)operator(.)ident(Attribute)operator(:)     string<delimiter(')content(#330099)delimiter(')>operator(,)
        ident(Name)operator(.)ident(Tag)operator(:)           string<delimiter(')content(bold #330099)delimiter(')>operator(,)
        ident(Name)operator(.)ident(Decorator)operator(:)     string<delimiter(')content(#9999FF)delimiter(')>operator(,)

        ident(String)operator(:)             string<delimiter(')content(#CC3300)delimiter(')>operator(,)
        ident(String)operator(.)ident(Doc)operator(:)         string<delimiter(')content(italic)delimiter(')>operator(,)
        ident(String)operator(.)ident(Interpol)operator(:)    string<delimiter(')content(#AA0000)delimiter(')>operator(,)
        ident(String)operator(.)ident(Escape)operator(:)      string<delimiter(')content(bold #CC3300)delimiter(')>operator(,)
        ident(String)operator(.)ident(Regex)operator(:)       string<delimiter(')content(#33AAAA)delimiter(')>operator(,)
        ident(String)operator(.)ident(Symbol)operator(:)      string<delimiter(')content(#FFCC33)delimiter(')>operator(,)
        ident(String)operator(.)ident(Other)operator(:)       string<delimiter(')content(#CC3300)delimiter(')>operator(,)

        ident(Number)operator(:)             string<delimiter(')content(#FF6600)delimiter(')>operator(,)

        ident(Generic)operator(.)ident(Heading)operator(:)    string<delimiter(')content(bold #003300)delimiter(')>operator(,)
        ident(Generic)operator(.)ident(Subheading)operator(:) string<delimiter(')content(bold #003300)delimiter(')>operator(,)
        ident(Generic)operator(.)ident(Deleted)operator(:)    string<delimiter(')content(border:#CC0000 bg:#FFCCCC)delimiter(')>operator(,)
        ident(Generic)operator(.)ident(Inserted)operator(:)   string<delimiter(')content(border:#00CC00 bg:#CCFFCC)delimiter(')>operator(,)
        ident(Generic)operator(.)ident(Error)operator(:)      string<delimiter(')content(#FF0000)delimiter(')>operator(,)
        ident(Generic)operator(.)ident(Emph)operator(:)       string<delimiter(')content(italic)delimiter(')>operator(,)
        ident(Generic)operator(.)ident(Strong)operator(:)     string<delimiter(')content(bold)delimiter(')>operator(,)
        ident(Generic)operator(.)ident(Prompt)operator(:)     string<delimiter(')content(bold #000099)delimiter(')>operator(,)
        ident(Generic)operator(.)ident(Output)operator(:)     string<delimiter(')content(#AAAAAA)delimiter(')>operator(,)
        ident(Generic)operator(.)ident(Traceback)operator(:)  string<delimiter(')content(#99CC66)delimiter(')>operator(,)

        ident(Error)operator(:)              string<delimiter(')content(bg:#FFAAAA #AA0000)delimiter(')>
    operator(})
comment(# -*- coding: utf-8 -*-)
docstring<delimiter(""")content(
)content(    pygments.styles.murphy)content(
)content(    ~~~~~~~~~~~~~~~~~~~~~~)content(
)content(
)content(    Murphy's style from CodeRay.)content(
)content(
)content(    :copyright: Copyright 2006-2009 by the Pygments team, see AUTHORS.)content(
)content(    :license: BSD, see LICENSE for details.)content(
)delimiter(""")>

keyword(from) include(pygments.style) keyword(import) include(Style)
keyword(from) include(pygments.token) keyword(import) include(Keyword)operator(,) include(Name)operator(,) include(Comment)operator(,) include(String)operator(,) include(Error)operator(,) \
     include(Number)operator(,) include(Operator)operator(,) include(Generic)operator(,) include(Whitespace)


keyword(class) class(MurphyStyle)operator(()ident(Style)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Murphy's style from CodeRay.)content(
)content(    )delimiter(""")>

    ident(default_style) operator(=) string<delimiter(")delimiter(")>

    ident(styles) operator(=) operator({)
        ident(Whitespace)operator(:)                string<delimiter(")content(#bbbbbb)delimiter(")>operator(,)
        ident(Comment)operator(:)                   string<delimiter(")content(#666 italic)delimiter(")>operator(,)
        ident(Comment)operator(.)ident(Preproc)operator(:)           string<delimiter(")content(#579 noitalic)delimiter(")>operator(,)
        ident(Comment)operator(.)ident(Special)operator(:)           string<delimiter(")content(#c00 bold)delimiter(")>operator(,)

        ident(Keyword)operator(:)                   string<delimiter(")content(bold #289)delimiter(")>operator(,)
        ident(Keyword)operator(.)ident(Pseudo)operator(:)            string<delimiter(")content(#08f)delimiter(")>operator(,)
        ident(Keyword)operator(.)ident(Type)operator(:)              string<delimiter(")content(#66f)delimiter(")>operator(,)

        ident(Operator)operator(:)                  string<delimiter(")content(#333)delimiter(")>operator(,)
        ident(Operator)operator(.)ident(Word)operator(:)             string<delimiter(")content(bold #000)delimiter(")>operator(,)

        ident(Name)operator(.)ident(Builtin)operator(:)              string<delimiter(")content(#072)delimiter(")>operator(,)
        ident(Name)operator(.)ident(Function)operator(:)             string<delimiter(")content(bold #5ed)delimiter(")>operator(,)
        ident(Name)operator(.)ident(Class)operator(:)                string<delimiter(")content(bold #e9e)delimiter(")>operator(,)
        ident(Name)operator(.)ident(Namespace)operator(:)            string<delimiter(")content(bold #0e84b5)delimiter(")>operator(,)
        ident(Name)operator(.)ident(Exception)operator(:)            string<delimiter(")content(bold #F00)delimiter(")>operator(,)
        ident(Name)operator(.)ident(Variable)operator(:)             string<delimiter(")content(#036)delimiter(")>operator(,)
        ident(Name)operator(.)ident(Variable)operator(.)ident(Instance)operator(:)    string<delimiter(")content(#aaf)delimiter(")>operator(,)
        ident(Name)operator(.)ident(Variable)operator(.)ident(Class)operator(:)       string<delimiter(")content(#ccf)delimiter(")>operator(,)
        ident(Name)operator(.)ident(Variable)operator(.)ident(Global)operator(:)      string<delimiter(")content(#f84)delimiter(")>operator(,)
        ident(Name)operator(.)ident(Constant)operator(:)             string<delimiter(")content(bold #5ed)delimiter(")>operator(,)
        ident(Name)operator(.)ident(Label)operator(:)                string<delimiter(")content(bold #970)delimiter(")>operator(,)
        ident(Name)operator(.)ident(Entity)operator(:)               string<delimiter(")content(#800)delimiter(")>operator(,)
        ident(Name)operator(.)ident(Attribute)operator(:)            string<delimiter(")content(#007)delimiter(")>operator(,)
        ident(Name)operator(.)ident(Tag)operator(:)                  string<delimiter(")content(#070)delimiter(")>operator(,)
        ident(Name)operator(.)ident(Decorator)operator(:)            string<delimiter(")content(bold #555)delimiter(")>operator(,)

        ident(String)operator(:)                    string<delimiter(")content(bg:#e0e0ff)delimiter(")>operator(,)
        ident(String)operator(.)ident(Char)operator(:)               string<delimiter(")content(#88F bg:)delimiter(")>operator(,)
        ident(String)operator(.)ident(Doc)operator(:)                string<delimiter(")content(#D42 bg:)delimiter(")>operator(,)
        ident(String)operator(.)ident(Interpol)operator(:)           string<delimiter(")content(bg:#eee)delimiter(")>operator(,)
        ident(String)operator(.)ident(Escape)operator(:)             string<delimiter(")content(bold #666)delimiter(")>operator(,)
        ident(String)operator(.)ident(Regex)operator(:)              string<delimiter(")content(bg:#e0e0ff #000)delimiter(")>operator(,)
        ident(String)operator(.)ident(Symbol)operator(:)             string<delimiter(")content(#fc8 bg:)delimiter(")>operator(,)
        ident(String)operator(.)ident(Other)operator(:)              string<delimiter(")content(#f88)delimiter(")>operator(,)

        ident(Number)operator(:)                    string<delimiter(")content(bold #60E)delimiter(")>operator(,)
        ident(Number)operator(.)ident(Integer)operator(:)            string<delimiter(")content(bold #66f)delimiter(")>operator(,)
        ident(Number)operator(.)ident(Float)operator(:)              string<delimiter(")content(bold #60E)delimiter(")>operator(,)
        ident(Number)operator(.)ident(Hex)operator(:)                string<delimiter(")content(bold #058)delimiter(")>operator(,)
        ident(Number)operator(.)ident(Oct)operator(:)                string<delimiter(")content(bold #40E)delimiter(")>operator(,)

        ident(Generic)operator(.)ident(Heading)operator(:)           string<delimiter(")content(bold #000080)delimiter(")>operator(,)
        ident(Generic)operator(.)ident(Subheading)operator(:)        string<delimiter(")content(bold #800080)delimiter(")>operator(,)
        ident(Generic)operator(.)ident(Deleted)operator(:)           string<delimiter(")content(#A00000)delimiter(")>operator(,)
        ident(Generic)operator(.)ident(Inserted)operator(:)          string<delimiter(")content(#00A000)delimiter(")>operator(,)
        ident(Generic)operator(.)ident(Error)operator(:)             string<delimiter(")content(#FF0000)delimiter(")>operator(,)
        ident(Generic)operator(.)ident(Emph)operator(:)              string<delimiter(")content(italic)delimiter(")>operator(,)
        ident(Generic)operator(.)ident(Strong)operator(:)            string<delimiter(")content(bold)delimiter(")>operator(,)
        ident(Generic)operator(.)ident(Prompt)operator(:)            string<delimiter(")content(bold #c65d09)delimiter(")>operator(,)
        ident(Generic)operator(.)ident(Output)operator(:)            string<delimiter(")content(#888)delimiter(")>operator(,)
        ident(Generic)operator(.)ident(Traceback)operator(:)         string<delimiter(")content(#04D)delimiter(")>operator(,)

        ident(Error)operator(:)                     string<delimiter(")content(#F00 bg:#FAA)delimiter(")>
    operator(})
comment(# -*- coding: utf-8 -*-)
docstring<delimiter(""")content(
)content(    pygments.styles.native)content(
)content(    ~~~~~~~~~~~~~~~~~~~~~~)content(
)content(
)content(    pygments version of my "native" vim theme.)content(
)content(
)content(    :copyright: Copyright 2006-2009 by the Pygments team, see AUTHORS.)content(
)content(    :license: BSD, see LICENSE for details.)content(
)delimiter(""")>

keyword(from) include(pygments.style) keyword(import) include(Style)
keyword(from) include(pygments.token) keyword(import) include(Keyword)operator(,) include(Name)operator(,) include(Comment)operator(,) include(String)operator(,) include(Error)operator(,) \
     include(Number)operator(,) include(Operator)operator(,) include(Generic)operator(,) include(Token)operator(,) include(Whitespace)


keyword(class) class(NativeStyle)operator(()ident(Style)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Pygments version of the "native" vim theme.)content(
)content(    )delimiter(""")>

    ident(background_color) operator(=) string<delimiter(')content(#202020)delimiter(')>
    ident(highlight_color) operator(=) string<delimiter(')content(#404040)delimiter(')>

    ident(styles) operator(=) operator({)
        ident(Token)operator(:)              string<delimiter(')content(#d0d0d0)delimiter(')>operator(,)
        ident(Whitespace)operator(:)         string<delimiter(')content(#666666)delimiter(')>operator(,)

        ident(Comment)operator(:)            string<delimiter(')content(italic #999999)delimiter(')>operator(,)
        ident(Comment)operator(.)ident(Preproc)operator(:)    string<delimiter(')content(noitalic bold #cd2828)delimiter(')>operator(,)
        ident(Comment)operator(.)ident(Special)operator(:)    string<delimiter(')content(noitalic bold #e50808 bg:#520000)delimiter(')>operator(,)

        ident(Keyword)operator(:)            string<delimiter(')content(bold #6ab825)delimiter(')>operator(,)
        ident(Keyword)operator(.)ident(Pseudo)operator(:)     string<delimiter(')content(nobold)delimiter(')>operator(,)
        ident(Operator)operator(.)ident(Word)operator(:)      string<delimiter(')content(bold #6ab825)delimiter(')>operator(,)

        ident(String)operator(:)             string<delimiter(')content(#ed9d13)delimiter(')>operator(,)
        ident(String)operator(.)ident(Other)operator(:)       string<delimiter(')content(#ffa500)delimiter(')>operator(,)

        ident(Number)operator(:)             string<delimiter(')content(#3677a9)delimiter(')>operator(,)

        ident(Name)operator(.)ident(Builtin)operator(:)       string<delimiter(')content(#24909d)delimiter(')>operator(,)
        ident(Name)operator(.)ident(Variable)operator(:)      string<delimiter(')content(#40ffff)delimiter(')>operator(,)
        ident(Name)operator(.)ident(Constant)operator(:)      string<delimiter(')content(#40ffff)delimiter(')>operator(,)
        ident(Name)operator(.)ident(Class)operator(:)         string<delimiter(')content(underline #447fcf)delimiter(')>operator(,)
        ident(Name)operator(.)ident(Function)operator(:)      string<delimiter(')content(#447fcf)delimiter(')>operator(,)
        ident(Name)operator(.)ident(Namespace)operator(:)     string<delimiter(')content(underline #447fcf)delimiter(')>operator(,)
        ident(Name)operator(.)ident(Exception)operator(:)     string<delimiter(')content(#bbbbbb)delimiter(')>operator(,)
        ident(Name)operator(.)ident(Tag)operator(:)           string<delimiter(')content(bold #6ab825)delimiter(')>operator(,)
        ident(Name)operator(.)ident(Attribute)operator(:)     string<delimiter(')content(#bbbbbb)delimiter(')>operator(,)
        ident(Name)operator(.)ident(Decorator)operator(:)     string<delimiter(')content(#ffa500)delimiter(')>operator(,)

        ident(Generic)operator(.)ident(Heading)operator(:)    string<delimiter(')content(bold #ffffff)delimiter(')>operator(,)
        ident(Generic)operator(.)ident(Subheading)operator(:) string<delimiter(')content(underline #ffffff)delimiter(')>operator(,)
        ident(Generic)operator(.)ident(Deleted)operator(:)    string<delimiter(')content(#d22323)delimiter(')>operator(,)
        ident(Generic)operator(.)ident(Inserted)operator(:)   string<delimiter(')content(#589819)delimiter(')>operator(,)
        ident(Generic)operator(.)ident(Error)operator(:)      string<delimiter(')content(#d22323)delimiter(')>operator(,)
        ident(Generic)operator(.)ident(Emph)operator(:)       string<delimiter(')content(italic)delimiter(')>operator(,)
        ident(Generic)operator(.)ident(Strong)operator(:)     string<delimiter(')content(bold)delimiter(')>operator(,)
        ident(Generic)operator(.)ident(Prompt)operator(:)     string<delimiter(')content(#aaaaaa)delimiter(')>operator(,)
        ident(Generic)operator(.)ident(Output)operator(:)     string<delimiter(')content(#cccccc)delimiter(')>operator(,)
        ident(Generic)operator(.)ident(Traceback)operator(:)  string<delimiter(')content(#d22323)delimiter(')>operator(,)

        ident(Error)operator(:)              string<delimiter(')content(bg:#e3d2d2 #a61717)delimiter(')>
    operator(})
comment(# -*- coding: utf-8 -*-)
docstring<delimiter(""")content(
)content(    pygments.styles.pastie)content(
)content(    ~~~~~~~~~~~~~~~~~~~~~~)content(
)content(
)content(    Style similar to the `pastie`_ default style.)content(
)content(
)content(    .. _pastie: http://pastie.caboo.se/)content(
)content(
)content(    :copyright: Copyright 2006-2009 by the Pygments team, see AUTHORS.)content(
)content(    :license: BSD, see LICENSE for details.)content(
)delimiter(""")>

keyword(from) include(pygments.style) keyword(import) include(Style)
keyword(from) include(pygments.token) keyword(import) include(Keyword)operator(,) include(Name)operator(,) include(Comment)operator(,) include(String)operator(,) include(Error)operator(,) \
     include(Number)operator(,) include(Operator)operator(,) include(Generic)operator(,) include(Whitespace)


keyword(class) class(PastieStyle)operator(()ident(Style)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Style similar to the pastie default style.)content(
)content(    )delimiter(""")>

    ident(default_style) operator(=) string<delimiter(')delimiter(')>

    ident(styles) operator(=) operator({)
        ident(Whitespace)operator(:)             string<delimiter(')content(#bbbbbb)delimiter(')>operator(,)
        ident(Comment)operator(:)                string<delimiter(')content(#888888)delimiter(')>operator(,)
        ident(Comment)operator(.)ident(Preproc)operator(:)        string<delimiter(')content(bold #cc0000)delimiter(')>operator(,)
        ident(Comment)operator(.)ident(Special)operator(:)        string<delimiter(')content(bg:#fff0f0 bold #cc0000)delimiter(')>operator(,)

        ident(String)operator(:)                 string<delimiter(')content(bg:#fff0f0 #dd2200)delimiter(')>operator(,)
        ident(String)operator(.)ident(Regex)operator(:)           string<delimiter(')content(bg:#fff0ff #008800)delimiter(')>operator(,)
        ident(String)operator(.)ident(Other)operator(:)           string<delimiter(')content(bg:#f0fff0 #22bb22)delimiter(')>operator(,)
        ident(String)operator(.)ident(Symbol)operator(:)          string<delimiter(')content(#aa6600)delimiter(')>operator(,)
        ident(String)operator(.)ident(Interpol)operator(:)        string<delimiter(')content(#3333bb)delimiter(')>operator(,)
        ident(String)operator(.)ident(Escape)operator(:)          string<delimiter(')content(#0044dd)delimiter(')>operator(,)

        ident(Operator)operator(.)ident(Word)operator(:)          string<delimiter(')content(#008800)delimiter(')>operator(,)

        ident(Keyword)operator(:)                string<delimiter(')content(bold #008800)delimiter(')>operator(,)
        ident(Keyword)operator(.)ident(Pseudo)operator(:)         string<delimiter(')content(nobold)delimiter(')>operator(,)
        ident(Keyword)operator(.)ident(Type)operator(:)           string<delimiter(')content(#888888)delimiter(')>operator(,)

        ident(Name)operator(.)ident(Class)operator(:)             string<delimiter(')content(bold #bb0066)delimiter(')>operator(,)
        ident(Name)operator(.)ident(Exception)operator(:)         string<delimiter(')content(bold #bb0066)delimiter(')>operator(,)
        ident(Name)operator(.)ident(Function)operator(:)          string<delimiter(')content(bold #0066bb)delimiter(')>operator(,)
        ident(Name)operator(.)ident(Property)operator(:)          string<delimiter(')content(bold #336699)delimiter(')>operator(,)
        ident(Name)operator(.)ident(Namespace)operator(:)         string<delimiter(')content(bold #bb0066)delimiter(')>operator(,)
        ident(Name)operator(.)ident(Builtin)operator(:)           string<delimiter(')content(#003388)delimiter(')>operator(,)
        ident(Name)operator(.)ident(Variable)operator(:)          string<delimiter(')content(#336699)delimiter(')>operator(,)
        ident(Name)operator(.)ident(Variable)operator(.)ident(Class)operator(:)    string<delimiter(')content(#336699)delimiter(')>operator(,)
        ident(Name)operator(.)ident(Variable)operator(.)ident(Instance)operator(:) string<delimiter(')content(#3333bb)delimiter(')>operator(,)
        ident(Name)operator(.)ident(Variable)operator(.)ident(Global)operator(:)   string<delimiter(')content(#dd7700)delimiter(')>operator(,)
        ident(Name)operator(.)ident(Constant)operator(:)          string<delimiter(')content(bold #003366)delimiter(')>operator(,)
        ident(Name)operator(.)ident(Tag)operator(:)               string<delimiter(')content(bold #bb0066)delimiter(')>operator(,)
        ident(Name)operator(.)ident(Attribute)operator(:)         string<delimiter(')content(#336699)delimiter(')>operator(,)
        ident(Name)operator(.)ident(Decorator)operator(:)         string<delimiter(')content(#555555)delimiter(')>operator(,)
        ident(Name)operator(.)ident(Label)operator(:)             string<delimiter(')content(italic #336699)delimiter(')>operator(,)

        ident(Number)operator(:)                 string<delimiter(')content(bold #0000DD)delimiter(')>operator(,)

        ident(Generic)operator(.)ident(Heading)operator(:)        string<delimiter(')content(#333)delimiter(')>operator(,)
        ident(Generic)operator(.)ident(Subheading)operator(:)     string<delimiter(')content(#666)delimiter(')>operator(,)
        ident(Generic)operator(.)ident(Deleted)operator(:)        string<delimiter(')content(bg:#ffdddd #000000)delimiter(')>operator(,)
        ident(Generic)operator(.)ident(Inserted)operator(:)       string<delimiter(')content(bg:#ddffdd #000000)delimiter(')>operator(,)
        ident(Generic)operator(.)ident(Error)operator(:)          string<delimiter(')content(#aa0000)delimiter(')>operator(,)
        ident(Generic)operator(.)ident(Emph)operator(:)           string<delimiter(')content(italic)delimiter(')>operator(,)
        ident(Generic)operator(.)ident(Strong)operator(:)         string<delimiter(')content(bold)delimiter(')>operator(,)
        ident(Generic)operator(.)ident(Prompt)operator(:)         string<delimiter(')content(#555555)delimiter(')>operator(,)
        ident(Generic)operator(.)ident(Output)operator(:)         string<delimiter(')content(#888888)delimiter(')>operator(,)
        ident(Generic)operator(.)ident(Traceback)operator(:)      string<delimiter(')content(#aa0000)delimiter(')>operator(,)

        ident(Error)operator(:)                  string<delimiter(')content(bg:#e3d2d2 #a61717)delimiter(')>
    operator(})
comment(# -*- coding: utf-8 -*-)
docstring<delimiter(""")content(
)content(    pygments.styles.perldoc)content(
)content(    ~~~~~~~~~~~~~~~~~~~~~~~)content(
)content(
)content(    Style similar to the style used in the `perldoc`_ code blocks.)content(
)content(
)content(    .. _perldoc: http://perldoc.perl.org/)content(
)content(
)content(    :copyright: Copyright 2006-2009 by the Pygments team, see AUTHORS.)content(
)content(    :license: BSD, see LICENSE for details.)content(
)delimiter(""")>

keyword(from) include(pygments.style) keyword(import) include(Style)
keyword(from) include(pygments.token) keyword(import) include(Keyword)operator(,) include(Name)operator(,) include(Comment)operator(,) include(String)operator(,) include(Error)operator(,) \
     include(Number)operator(,) include(Operator)operator(,) include(Generic)operator(,) include(Whitespace)


keyword(class) class(PerldocStyle)operator(()ident(Style)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Style similar to the style used in the perldoc code blocks.)content(
)content(    )delimiter(""")>

    ident(background_color) operator(=) string<delimiter(')content(#eeeedd)delimiter(')>
    ident(default_style) operator(=) string<delimiter(')delimiter(')>

    ident(styles) operator(=) operator({)
        ident(Whitespace)operator(:)             string<delimiter(')content(#bbbbbb)delimiter(')>operator(,)
        ident(Comment)operator(:)                string<delimiter(')content(#228B22)delimiter(')>operator(,)
        ident(Comment)operator(.)ident(Preproc)operator(:)        string<delimiter(')content(#1e889b)delimiter(')>operator(,)
        ident(Comment)operator(.)ident(Special)operator(:)        string<delimiter(')content(#8B008B bold)delimiter(')>operator(,)

        ident(String)operator(:)                 string<delimiter(')content(#CD5555)delimiter(')>operator(,)
        ident(String)operator(.)ident(Heredoc)operator(:)         string<delimiter(')content(#1c7e71 italic)delimiter(')>operator(,)
        ident(String)operator(.)ident(Regex)operator(:)           string<delimiter(')content(#B452CD)delimiter(')>operator(,)
        ident(String)operator(.)ident(Other)operator(:)           string<delimiter(')content(#cb6c20)delimiter(')>operator(,)
        ident(String)operator(.)ident(Regex)operator(:)           string<delimiter(')content(#1c7e71)delimiter(')>operator(,)

        ident(Number)operator(:)                 string<delimiter(')content(#B452CD)delimiter(')>operator(,)

        ident(Operator)operator(.)ident(Word)operator(:)          string<delimiter(')content(#8B008B)delimiter(')>operator(,)

        ident(Keyword)operator(:)                string<delimiter(')content(#8B008B bold)delimiter(')>operator(,)
        ident(Keyword)operator(.)ident(Type)operator(:)           string<delimiter(')content(#a7a7a7)delimiter(')>operator(,)

        ident(Name)operator(.)ident(Class)operator(:)             string<delimiter(')content(#008b45 bold)delimiter(')>operator(,)
        ident(Name)operator(.)ident(Exception)operator(:)         string<delimiter(')content(#008b45 bold)delimiter(')>operator(,)
        ident(Name)operator(.)ident(Function)operator(:)          string<delimiter(')content(#008b45)delimiter(')>operator(,)
        ident(Name)operator(.)ident(Namespace)operator(:)         string<delimiter(')content(#008b45 underline)delimiter(')>operator(,)
        ident(Name)operator(.)ident(Variable)operator(:)          string<delimiter(')content(#00688B)delimiter(')>operator(,)
        ident(Name)operator(.)ident(Constant)operator(:)          string<delimiter(')content(#00688B)delimiter(')>operator(,)
        ident(Name)operator(.)ident(Decorator)operator(:)         string<delimiter(')content(#707a7c)delimiter(')>operator(,)
        ident(Name)operator(.)ident(Tag)operator(:)               string<delimiter(')content(#8B008B bold)delimiter(')>operator(,)
        ident(Name)operator(.)ident(Attribute)operator(:)         string<delimiter(')content(#658b00)delimiter(')>operator(,)
        ident(Name)operator(.)ident(Builtin)operator(:)           string<delimiter(')content(#658b00)delimiter(')>operator(,)

        ident(Generic)operator(.)ident(Heading)operator(:)        string<delimiter(')content(bold #000080)delimiter(')>operator(,)
        ident(Generic)operator(.)ident(Subheading)operator(:)     string<delimiter(')content(bold #800080)delimiter(')>operator(,)
        ident(Generic)operator(.)ident(Deleted)operator(:)        string<delimiter(')content(#aa0000)delimiter(')>operator(,)
        ident(Generic)operator(.)ident(Inserted)operator(:)       string<delimiter(')content(#00aa00)delimiter(')>operator(,)
        ident(Generic)operator(.)ident(Error)operator(:)          string<delimiter(')content(#aa0000)delimiter(')>operator(,)
        ident(Generic)operator(.)ident(Emph)operator(:)           string<delimiter(')content(italic)delimiter(')>operator(,)
        ident(Generic)operator(.)ident(Strong)operator(:)         string<delimiter(')content(bold)delimiter(')>operator(,)
        ident(Generic)operator(.)ident(Prompt)operator(:)         string<delimiter(')content(#555555)delimiter(')>operator(,)
        ident(Generic)operator(.)ident(Output)operator(:)         string<delimiter(')content(#888888)delimiter(')>operator(,)
        ident(Generic)operator(.)ident(Traceback)operator(:)      string<delimiter(')content(#aa0000)delimiter(')>operator(,)

        ident(Error)operator(:)                  string<delimiter(')content(bg:#e3d2d2 #a61717)delimiter(')>
    operator(})
comment(# -*- coding: utf-8 -*-)
docstring<delimiter(""")content(
)content(    pygments.styles.tango)content(
)content(    ~~~~~~~~~~~~~~~~~~~~~)content(
)content(
)content(    The Crunchy default Style inspired from the color palette from)content(
)content(    the Tango Icon Theme Guidelines.)content(
)content(
)content(    http://tango.freedesktop.org/Tango_Icon_Theme_Guidelines)content(
)content(
)content(    Butter:     #fce94f     #edd400     #c4a000)content(
)content(    Orange:     #fcaf3e     #f57900     #ce5c00)content(
)content(    Chocolate:  #e9b96e     #c17d11     #8f5902)content(
)content(    Chameleon:  #8ae234     #73d216     #4e9a06)content(
)content(    Sky Blue:   #729fcf     #3465a4     #204a87)content(
)content(    Plum:       #ad7fa8     #75507b     #5c35cc)content(
)content(    Scarlet Red:#ef2929     #cc0000     #a40000)content(
)content(    Aluminium:  #eeeeec     #d3d7cf     #babdb6)content(
)content(                #888a85     #555753     #2e3436)content(
)content(
)content(    Not all of the above colors are used; other colors added:)content(
)content(        very light grey: #f8f8f8  (for background\))content(
)content(
)content(    This style can be used as a template as it includes all the known)content(
)content(    Token types, unlike most (if not all\) of the styles included in the)content(
)content(    Pygments distribution.)content(
)content(
)content(    However, since Crunchy is intended to be used by beginners, we have strived)content(
)content(    to create a style that gloss over subtle distinctions between different)content(
)content(    categories.)content(
)content(
)content(    Taking Python for example, comments (Comment.*\) and docstrings (String.Doc\))content(
)content(    have been chosen to have the same style.  Similarly, keywords (Keyword.*\),)content(
)content(    and Operator.Word (and, or, in\) have been assigned the same style.)content(
)content(
)content(    :copyright: Copyright 2006-2009 by the Pygments team, see AUTHORS.)content(
)content(    :license: BSD, see LICENSE for details.)content(
)delimiter(""")>

keyword(from) include(pygments.style) keyword(import) include(Style)
keyword(from) include(pygments.token) keyword(import) include(Keyword)operator(,) include(Name)operator(,) include(Comment)operator(,) include(String)operator(,) include(Error)operator(,) \
     include(Number)operator(,) include(Operator)operator(,) include(Generic)operator(,) include(Whitespace)operator(,) include(Punctuation)operator(,) include(Other)operator(,) include(Literal)


keyword(class) class(TangoStyle)operator(()ident(Style)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    The Crunchy default Style inspired from the color palette from)content(
)content(    the Tango Icon Theme Guidelines.)content(
)content(    )delimiter(""")>

    comment(# work in progress...)

    ident(background_color) operator(=) string<delimiter(")content(#f8f8f8)delimiter(")>
    ident(default_style) operator(=) string<delimiter(")delimiter(")>

    ident(styles) operator(=) operator({)
        comment(# No corresponding class for the following:)
        comment(#Text:              "", # class:  '',)
        ident(Whitespace)operator(:)                string<delimiter(")content(underline #f8f8f8)delimiter(")>operator(,) comment(# class: 'w',)
        ident(Error)operator(:)                     string<delimiter(")content(#a40000 border:#ef2929)delimiter(")>operator(,) comment(# class: 'err',)
        ident(Other)operator(:)                     string<delimiter(")content(#000000)delimiter(")>operator(,)        comment(# class 'x',)

        ident(Comment)operator(:)                   string<delimiter(")content(italic #8f5902)delimiter(")>operator(,) comment(# class: 'c',)
        ident(Comment)operator(.)ident(Multiline)operator(:)         string<delimiter(")content(italic #8f5902)delimiter(")>operator(,) comment(# class: 'cm',)
        ident(Comment)operator(.)ident(Preproc)operator(:)           string<delimiter(")content(italic #8f5902)delimiter(")>operator(,) comment(# class: 'cp',)
        ident(Comment)operator(.)ident(Single)operator(:)            string<delimiter(")content(italic #8f5902)delimiter(")>operator(,) comment(# class: 'c1',)
        ident(Comment)operator(.)ident(Special)operator(:)           string<delimiter(")content(italic #8f5902)delimiter(")>operator(,) comment(# class: 'cs',)

        ident(Keyword)operator(:)                   string<delimiter(")content(bold #204a87)delimiter(")>operator(,) comment(# class: 'k',)
        ident(Keyword)operator(.)ident(Constant)operator(:)          string<delimiter(")content(bold #204a87)delimiter(")>operator(,) comment(# class: 'kc',)
        ident(Keyword)operator(.)ident(Declaration)operator(:)       string<delimiter(")content(bold #204a87)delimiter(")>operator(,) comment(# class: 'kd',)
        ident(Keyword)operator(.)ident(Namespace)operator(:)         string<delimiter(")content(bold #204a87)delimiter(")>operator(,) comment(# class: 'kn',)
        ident(Keyword)operator(.)ident(Pseudo)operator(:)            string<delimiter(")content(bold #204a87)delimiter(")>operator(,) comment(# class: 'kp',)
        ident(Keyword)operator(.)ident(Reserved)operator(:)          string<delimiter(")content(bold #204a87)delimiter(")>operator(,) comment(# class: 'kr',)
        ident(Keyword)operator(.)ident(Type)operator(:)              string<delimiter(")content(bold #204a87)delimiter(")>operator(,) comment(# class: 'kt',)

        ident(Operator)operator(:)                  string<delimiter(")content(bold #ce5c00)delimiter(")>operator(,) comment(# class: 'o')
        ident(Operator)operator(.)ident(Word)operator(:)             string<delimiter(")content(bold #204a87)delimiter(")>operator(,) comment(# class: 'ow' - like keywords)

        ident(Punctuation)operator(:)               string<delimiter(")content(bold #000000)delimiter(")>operator(,) comment(# class: 'p')

        comment(# because special names such as Name.Class, Name.Function, etc.)
        comment(# are not recognized as such later in the parsing, we choose them)
        comment(# to look the same as ordinary variables.)
        ident(Name)operator(:)                          string<delimiter(")content(#000000)delimiter(")>operator(,)      comment(# class: 'n')
        ident(Name)operator(.)ident(Attribute)operator(:)                string<delimiter(")content(#c4a000)delimiter(")>operator(,)      comment(# class: 'na', - to be revised)
        ident(Name)operator(.)ident(Builtin)operator(:)                  string<delimiter(")content(#204a87)delimiter(")>operator(,)      comment(# class: 'nb')
        ident(Name)operator(.)ident(Builtin)operator(.)ident(Pseudo)operator(:)           string<delimiter(")content(#3465a4)delimiter(")>operator(,)      comment(# class: 'bp')
        ident(Name)operator(.)ident(Class)operator(:)                    string<delimiter(")content(#000000)delimiter(")>operator(,)      comment(# class: 'nc' - to be revised)
        ident(Name)operator(.)ident(Constant)operator(:)                 string<delimiter(")content(#000000)delimiter(")>operator(,)      comment(# class: 'no', - to be revised)
        ident(Name)operator(.)ident(Decorator)operator(:)                string<delimiter(")content(bold #5c35cc)delimiter(")>operator(,) comment(# class: 'nd', - to be revised)
        ident(Name)operator(.)ident(Entity)operator(:)                   string<delimiter(")content(#ce5c00)delimiter(")>operator(,)      comment(# class: 'ni',)
        ident(Name)operator(.)ident(Exception)operator(:)                string<delimiter(")content(bold #cc0000)delimiter(")>operator(,) comment(# class: 'ne',)
        ident(Name)operator(.)ident(Function)operator(:)                 string<delimiter(")content(#000000)delimiter(")>operator(,)      comment(# class: 'nf')
        ident(Name)operator(.)ident(Property)operator(:)                 string<delimiter(")content(#000000)delimiter(")>operator(,)      comment(# class: 'py',)
        ident(Name)operator(.)ident(Label)operator(:)                    string<delimiter(")content(#f57900)delimiter(")>operator(,)      comment(# class: 'nl',)
        ident(Name)operator(.)ident(Namespace)operator(:)                string<delimiter(")content(#000000)delimiter(")>operator(,)      comment(# class: 'nn' - to be revised)
        ident(Name)operator(.)ident(Other)operator(:)                    string<delimiter(")content(#000000)delimiter(")>operator(,)      comment(# class: 'nx',)
        ident(Name)operator(.)ident(Tag)operator(:)                      string<delimiter(")content(bold #204a87)delimiter(")>operator(,) comment(# class'nt' -- like a keyword)
        ident(Name)operator(.)ident(Variable)operator(:)                 string<delimiter(")content(#000000)delimiter(")>operator(,)      comment(# class: 'nv', - to be revised)
        ident(Name)operator(.)ident(Variable)operator(.)ident(Class)operator(:)           string<delimiter(")content(#000000)delimiter(")>operator(,)      comment(# class: 'vc', - to be revised)
        ident(Name)operator(.)ident(Variable)operator(.)ident(Global)operator(:)          string<delimiter(")content(#000000)delimiter(")>operator(,)      comment(# class: 'vg', - to be revised)
        ident(Name)operator(.)ident(Variable)operator(.)ident(Instance)operator(:)        string<delimiter(")content(#000000)delimiter(")>operator(,)      comment(# class: 'vi', - to be revised)

        comment(# since the tango light blue does not show up well in text, we choose)
        comment(# a pure blue instead.)
        ident(Number)operator(:)                        string<delimiter(")content(bold #0000cf)delimiter(")>operator(,) comment(# class: 'm')
        ident(Number)operator(.)ident(Float)operator(:)                  string<delimiter(")content(bold #0000cf)delimiter(")>operator(,) comment(# class: ''mf',)
        ident(Number)operator(.)ident(Hex)operator(:)                    string<delimiter(")content(bold #0000cf)delimiter(")>operator(,) comment(# class: ''mh',)
        ident(Number)operator(.)ident(Integer)operator(:)                string<delimiter(")content(bold #0000cf)delimiter(")>operator(,) comment(# class: ''mi',)
        ident(Number)operator(.)ident(Integer)operator(.)ident(Long)operator(:)           string<delimiter(")content(bold #0000cf)delimiter(")>operator(,) comment(# class: ''il',)
        ident(Number)operator(.)ident(Oct)operator(:)                    string<delimiter(")content(bold #0000cf)delimiter(")>operator(,) comment(# class: ''mo',)

        ident(Literal)operator(:)                   string<delimiter(")content(#000000)delimiter(")>operator(,)      comment(# class: 'l',)
        ident(Literal)operator(.)ident(Date)operator(:)              string<delimiter(")content(#000000)delimiter(")>operator(,)      comment(# class: 'ld',)

        ident(String)operator(:)                    string<delimiter(")content(#4e9a06)delimiter(")>operator(,)      comment(# class: 's',)
        ident(String)operator(.)ident(Backtick)operator(:)           string<delimiter(")content(#4e9a06)delimiter(")>operator(,)      comment(# class: 'sb',)
        ident(String)operator(.)ident(Char)operator(:)               string<delimiter(")content(#4e9a06)delimiter(")>operator(,)      comment(# class: 'sc',)
        ident(String)operator(.)ident(Doc)operator(:)                string<delimiter(")content(italic #8f5902)delimiter(")>operator(,)  comment(# class: 'sd' - like a comment)
        ident(String)operator(.)ident(Double)operator(:)             string<delimiter(")content(#4e9a06)delimiter(")>operator(,)      comment(# class: 's2',)
        ident(String)operator(.)ident(Escape)operator(:)             string<delimiter(")content(#4e9a06)delimiter(")>operator(,)      comment(# class: 'se',)
        ident(String)operator(.)ident(Heredoc)operator(:)            string<delimiter(")content(#4e9a06)delimiter(")>operator(,)      comment(# class: 'sh',)
        ident(String)operator(.)ident(Interpol)operator(:)           string<delimiter(")content(#4e9a06)delimiter(")>operator(,)      comment(# class: 'si',)
        ident(String)operator(.)ident(Other)operator(:)              string<delimiter(")content(#4e9a06)delimiter(")>operator(,)      comment(# class: 'sx',)
        ident(String)operator(.)ident(Regex)operator(:)              string<delimiter(")content(#4e9a06)delimiter(")>operator(,)      comment(# class: 'sr',)
        ident(String)operator(.)ident(Single)operator(:)             string<delimiter(")content(#4e9a06)delimiter(")>operator(,)      comment(# class: 's1',)
        ident(String)operator(.)ident(Symbol)operator(:)             string<delimiter(")content(#4e9a06)delimiter(")>operator(,)      comment(# class: 'ss',)

        ident(Generic)operator(:)                   string<delimiter(")content(#000000)delimiter(")>operator(,)      comment(# class: 'g',)
        ident(Generic)operator(.)ident(Deleted)operator(:)           string<delimiter(")content(#a40000)delimiter(")>operator(,)      comment(# class: 'gd',)
        ident(Generic)operator(.)ident(Emph)operator(:)              string<delimiter(")content(italic #000000)delimiter(")>operator(,)      comment(# class: 'ge',)
        ident(Generic)operator(.)ident(Error)operator(:)             string<delimiter(")content(#ef2929)delimiter(")>operator(,)      comment(# class: 'gr',)
        ident(Generic)operator(.)ident(Heading)operator(:)           string<delimiter(")content(bold #000080)delimiter(")>operator(,)      comment(# class: 'gh',)
        ident(Generic)operator(.)ident(Inserted)operator(:)          string<delimiter(")content(#00A000)delimiter(")>operator(,)      comment(# class: 'gi',)
        ident(Generic)operator(.)ident(Output)operator(:)            string<delimiter(")content(italic #000000)delimiter(")>operator(,)      comment(# class: 'go',)
        ident(Generic)operator(.)ident(Prompt)operator(:)            string<delimiter(")content(#8f5902)delimiter(")>operator(,)      comment(# class: 'gp',)
        ident(Generic)operator(.)ident(Strong)operator(:)            string<delimiter(")content(bold #000000)delimiter(")>operator(,)      comment(# class: 'gs',)
        ident(Generic)operator(.)ident(Subheading)operator(:)        string<delimiter(")content(bold #800080)delimiter(")>operator(,)      comment(# class: 'gu',)
        ident(Generic)operator(.)ident(Traceback)operator(:)         string<delimiter(")content(bold #a40000)delimiter(")>operator(,)      comment(# class: 'gt',)
    operator(})
comment(# -*- coding: utf-8 -*-)
docstring<delimiter(""")content(
)content(    pygments.styles.trac)content(
)content(    ~~~~~~~~~~~~~~~~~~~~)content(
)content(
)content(    Port of the default trac highlighter design.)content(
)content(
)content(    :copyright: Copyright 2006-2009 by the Pygments team, see AUTHORS.)content(
)content(    :license: BSD, see LICENSE for details.)content(
)delimiter(""")>

keyword(from) include(pygments.style) keyword(import) include(Style)
keyword(from) include(pygments.token) keyword(import) include(Keyword)operator(,) include(Name)operator(,) include(Comment)operator(,) include(String)operator(,) include(Error)operator(,) \
     include(Number)operator(,) include(Operator)operator(,) include(Generic)operator(,) include(Whitespace)


keyword(class) class(TracStyle)operator(()ident(Style)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Port of the default trac highlighter design.)content(
)content(    )delimiter(""")>

    ident(default_style) operator(=) string<delimiter(')delimiter(')>

    ident(styles) operator(=) operator({)
        ident(Whitespace)operator(:)             string<delimiter(')content(#bbbbbb)delimiter(')>operator(,)
        ident(Comment)operator(:)                string<delimiter(')content(italic #999988)delimiter(')>operator(,)
        ident(Comment)operator(.)ident(Preproc)operator(:)        string<delimiter(')content(bold noitalic #999999)delimiter(')>operator(,)
        ident(Comment)operator(.)ident(Special)operator(:)        string<delimiter(')content(bold #999999)delimiter(')>operator(,)

        ident(Operator)operator(:)               string<delimiter(')content(bold)delimiter(')>operator(,)

        ident(String)operator(:)                 string<delimiter(')content(#bb8844)delimiter(')>operator(,)
        ident(String)operator(.)ident(Regex)operator(:)           string<delimiter(')content(#808000)delimiter(')>operator(,)

        ident(Number)operator(:)                 string<delimiter(')content(#009999)delimiter(')>operator(,)

        ident(Keyword)operator(:)                string<delimiter(')content(bold)delimiter(')>operator(,)
        ident(Keyword)operator(.)ident(Type)operator(:)           string<delimiter(')content(#445588)delimiter(')>operator(,)

        ident(Name)operator(.)ident(Builtin)operator(:)           string<delimiter(')content(#999999)delimiter(')>operator(,)
        ident(Name)operator(.)ident(Function)operator(:)          string<delimiter(')content(bold #990000)delimiter(')>operator(,)
        ident(Name)operator(.)ident(Class)operator(:)             string<delimiter(')content(bold #445588)delimiter(')>operator(,)
        ident(Name)operator(.)ident(Exception)operator(:)         string<delimiter(')content(bold #990000)delimiter(')>operator(,)
        ident(Name)operator(.)ident(Namespace)operator(:)         string<delimiter(')content(#555555)delimiter(')>operator(,)
        ident(Name)operator(.)ident(Variable)operator(:)          string<delimiter(')content(#008080)delimiter(')>operator(,)
        ident(Name)operator(.)ident(Constant)operator(:)          string<delimiter(')content(#008080)delimiter(')>operator(,)
        ident(Name)operator(.)ident(Tag)operator(:)               string<delimiter(')content(#000080)delimiter(')>operator(,)
        ident(Name)operator(.)ident(Attribute)operator(:)         string<delimiter(')content(#008080)delimiter(')>operator(,)
        ident(Name)operator(.)ident(Entity)operator(:)            string<delimiter(')content(#800080)delimiter(')>operator(,)

        ident(Generic)operator(.)ident(Heading)operator(:)        string<delimiter(')content(#999999)delimiter(')>operator(,)
        ident(Generic)operator(.)ident(Subheading)operator(:)     string<delimiter(')content(#aaaaaa)delimiter(')>operator(,)
        ident(Generic)operator(.)ident(Deleted)operator(:)        string<delimiter(')content(bg:#ffdddd #000000)delimiter(')>operator(,)
        ident(Generic)operator(.)ident(Inserted)operator(:)       string<delimiter(')content(bg:#ddffdd #000000)delimiter(')>operator(,)
        ident(Generic)operator(.)ident(Error)operator(:)          string<delimiter(')content(#aa0000)delimiter(')>operator(,)
        ident(Generic)operator(.)ident(Emph)operator(:)           string<delimiter(')content(italic)delimiter(')>operator(,)
        ident(Generic)operator(.)ident(Strong)operator(:)         string<delimiter(')content(bold)delimiter(')>operator(,)
        ident(Generic)operator(.)ident(Prompt)operator(:)         string<delimiter(')content(#555555)delimiter(')>operator(,)
        ident(Generic)operator(.)ident(Output)operator(:)         string<delimiter(')content(#888888)delimiter(')>operator(,)
        ident(Generic)operator(.)ident(Traceback)operator(:)      string<delimiter(')content(#aa0000)delimiter(')>operator(,)

        ident(Error)operator(:)                  string<delimiter(')content(bg:#e3d2d2 #a61717)delimiter(')>
    operator(})
comment(# -*- coding: utf-8 -*-)
docstring<delimiter(""")content(
)content(    pygments.styles.vim)content(
)content(    ~~~~~~~~~~~~~~~~~~~)content(
)content(
)content(    A highlighting style for Pygments, inspired by vim.)content(
)content(
)content(    :copyright: Copyright 2006-2009 by the Pygments team, see AUTHORS.)content(
)content(    :license: BSD, see LICENSE for details.)content(
)delimiter(""")>

keyword(from) include(pygments.style) keyword(import) include(Style)
keyword(from) include(pygments.token) keyword(import) include(Keyword)operator(,) include(Name)operator(,) include(Comment)operator(,) include(String)operator(,) include(Error)operator(,) \
     include(Number)operator(,) include(Operator)operator(,) include(Generic)operator(,) include(Whitespace)operator(,) include(Token)


keyword(class) class(VimStyle)operator(()ident(Style)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Styles somewhat like vim 7.0)content(
)content(    )delimiter(""")>

    ident(background_color) operator(=) string<delimiter(")content(#000000)delimiter(")>
    ident(highlight_color) operator(=) string<delimiter(")content(#222222)delimiter(")>
    ident(default_style) operator(=) string<delimiter(")content(#cccccc)delimiter(")>

    ident(styles) operator(=) operator({)
        ident(Token)operator(:)                     string<delimiter(")content(#cccccc)delimiter(")>operator(,)
        ident(Whitespace)operator(:)                string<delimiter(")delimiter(")>operator(,)
        ident(Comment)operator(:)                   string<delimiter(")content(#000080)delimiter(")>operator(,)
        ident(Comment)operator(.)ident(Preproc)operator(:)           string<delimiter(")delimiter(")>operator(,)
        ident(Comment)operator(.)ident(Special)operator(:)           string<delimiter(")content(bold #cd0000)delimiter(")>operator(,)

        ident(Keyword)operator(:)                   string<delimiter(")content(#cdcd00)delimiter(")>operator(,)
        ident(Keyword)operator(.)ident(Declaration)operator(:)       string<delimiter(")content(#00cd00)delimiter(")>operator(,)
        ident(Keyword)operator(.)ident(Namespace)operator(:)         string<delimiter(")content(#cd00cd)delimiter(")>operator(,)
        ident(Keyword)operator(.)ident(Pseudo)operator(:)            string<delimiter(")delimiter(")>operator(,)
        ident(Keyword)operator(.)ident(Type)operator(:)              string<delimiter(")content(#00cd00)delimiter(")>operator(,)

        ident(Operator)operator(:)                  string<delimiter(")content(#3399cc)delimiter(")>operator(,)
        ident(Operator)operator(.)ident(Word)operator(:)             string<delimiter(")content(#cdcd00)delimiter(")>operator(,)

        ident(Name)operator(:)                      string<delimiter(")delimiter(")>operator(,)
        ident(Name)operator(.)ident(Class)operator(:)                string<delimiter(")content(#00cdcd)delimiter(")>operator(,)
        ident(Name)operator(.)ident(Builtin)operator(:)              string<delimiter(")content(#cd00cd)delimiter(")>operator(,)
        ident(Name)operator(.)ident(Exception)operator(:)            string<delimiter(")content(bold #666699)delimiter(")>operator(,)
        ident(Name)operator(.)ident(Variable)operator(:)             string<delimiter(")content(#00cdcd)delimiter(")>operator(,)

        ident(String)operator(:)                    string<delimiter(")content(#cd0000)delimiter(")>operator(,)
        ident(Number)operator(:)                    string<delimiter(")content(#cd00cd)delimiter(")>operator(,)

        ident(Generic)operator(.)ident(Heading)operator(:)           string<delimiter(")content(bold #000080)delimiter(")>operator(,)
        ident(Generic)operator(.)ident(Subheading)operator(:)        string<delimiter(")content(bold #800080)delimiter(")>operator(,)
        ident(Generic)operator(.)ident(Deleted)operator(:)           string<delimiter(")content(#cd0000)delimiter(")>operator(,)
        ident(Generic)operator(.)ident(Inserted)operator(:)          string<delimiter(")content(#00cd00)delimiter(")>operator(,)
        ident(Generic)operator(.)ident(Error)operator(:)             string<delimiter(")content(#FF0000)delimiter(")>operator(,)
        ident(Generic)operator(.)ident(Emph)operator(:)              string<delimiter(")content(italic)delimiter(")>operator(,)
        ident(Generic)operator(.)ident(Strong)operator(:)            string<delimiter(")content(bold)delimiter(")>operator(,)
        ident(Generic)operator(.)ident(Prompt)operator(:)            string<delimiter(")content(bold #000080)delimiter(")>operator(,)
        ident(Generic)operator(.)ident(Output)operator(:)            string<delimiter(")content(#888)delimiter(")>operator(,)
        ident(Generic)operator(.)ident(Traceback)operator(:)         string<delimiter(")content(#04D)delimiter(")>operator(,)

        ident(Error)operator(:)                     string<delimiter(")content(border:#FF0000)delimiter(")>
    operator(})
comment(# -*- coding: utf-8 -*-)
docstring<delimiter(""")content(
)content(    pygments.styles.vs)content(
)content(    ~~~~~~~~~~~~~~~~~~)content(
)content(
)content(    Simple style with MS Visual Studio colors.)content(
)content(
)content(    :copyright: Copyright 2006-2009 by the Pygments team, see AUTHORS.)content(
)content(    :license: BSD, see LICENSE for details.)content(
)delimiter(""")>

keyword(from) include(pygments.style) keyword(import) include(Style)
keyword(from) include(pygments.token) keyword(import) include(Keyword)operator(,) include(Name)operator(,) include(Comment)operator(,) include(String)operator(,) include(Error)operator(,) \
     include(Operator)operator(,) include(Generic)


keyword(class) class(VisualStudioStyle)operator(()ident(Style)operator(\))operator(:)

    ident(background_color) operator(=) string<delimiter(")content(#ffffff)delimiter(")>
    ident(default_style) operator(=) string<delimiter(")delimiter(")>

    ident(styles) operator(=) operator({)
        ident(Comment)operator(:)                   string<delimiter(")content(#008000)delimiter(")>operator(,)
        ident(Comment)operator(.)ident(Preproc)operator(:)           string<delimiter(")content(#0000ff)delimiter(")>operator(,)
        ident(Keyword)operator(:)                   string<delimiter(")content(#0000ff)delimiter(")>operator(,)
        ident(Operator)operator(.)ident(Word)operator(:)             string<delimiter(")content(#0000ff)delimiter(")>operator(,)
        ident(Keyword)operator(.)ident(Type)operator(:)              string<delimiter(")content(#2b91af)delimiter(")>operator(,)
        ident(Name)operator(.)ident(Class)operator(:)                string<delimiter(")content(#2b91af)delimiter(")>operator(,)
        ident(String)operator(:)                    string<delimiter(")content(#a31515)delimiter(")>operator(,)

        ident(Generic)operator(.)ident(Heading)operator(:)           string<delimiter(")content(bold)delimiter(")>operator(,)
        ident(Generic)operator(.)ident(Subheading)operator(:)        string<delimiter(")content(bold)delimiter(")>operator(,)
        ident(Generic)operator(.)ident(Emph)operator(:)              string<delimiter(")content(italic)delimiter(")>operator(,)
        ident(Generic)operator(.)ident(Strong)operator(:)            string<delimiter(")content(bold)delimiter(")>operator(,)
        ident(Generic)operator(.)ident(Prompt)operator(:)            string<delimiter(")content(bold)delimiter(")>operator(,)

        ident(Error)operator(:)                     string<delimiter(")content(border:#FF0000)delimiter(")>
    operator(})
comment(# -*- coding: utf-8 -*-)
docstring<delimiter(""")content(
)content(    pygments.token)content(
)content(    ~~~~~~~~~~~~~~)content(
)content(
)content(    Basic token types and the standard tokens.)content(
)content(
)content(    :copyright: Copyright 2006-2009 by the Pygments team, see AUTHORS.)content(
)content(    :license: BSD, see LICENSE for details.)content(
)delimiter(""")>
keyword(try)operator(:)
    predefined(set)
keyword(except) exception(NameError)operator(:)
    keyword(from) include(sets) keyword(import) include(Set) keyword(as) ident(set)


keyword(class) class(_TokenType)operator(()predefined(tuple)operator(\))operator(:)
    ident(parent) operator(=) predefined_constant(None)

    keyword(def) method(split)operator(()predefined_constant(self)operator(\))operator(:)
        ident(buf) operator(=) operator([)operator(])
        ident(node) operator(=) predefined_constant(self)
        keyword(while) ident(node) keyword(is) keyword(not) predefined_constant(None)operator(:)
            ident(buf)operator(.)ident(append)operator(()ident(node)operator(\))
            ident(node) operator(=) ident(node)operator(.)ident(parent)
        ident(buf)operator(.)ident(reverse)operator(()operator(\))
        keyword(return) ident(buf)

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) operator(*)ident(args)operator(\))operator(:)
        comment(# no need to call super.__init__)
        predefined_constant(self)operator(.)ident(subtypes) operator(=) predefined(set)operator(()operator(\))

    keyword(def) method(__contains__)operator(()predefined_constant(self)operator(,) ident(val)operator(\))operator(:)
        keyword(return) predefined_constant(self) keyword(is) ident(val) keyword(or) operator(()
            predefined(type)operator(()ident(val)operator(\)) keyword(is) predefined_constant(self)operator(.)ident(__class__) keyword(and)
            ident(val)operator([)operator(:)predefined(len)operator(()predefined_constant(self)operator(\))operator(]) operator(==) predefined_constant(self)
        operator(\))

    keyword(def) method(__getattr__)operator(()predefined_constant(self)operator(,) ident(val)operator(\))operator(:)
        keyword(if) keyword(not) ident(val) keyword(or) keyword(not) ident(val)operator([)integer(0)operator(])operator(.)ident(isupper)operator(()operator(\))operator(:)
            keyword(return) predefined(tuple)operator(.)ident(__getattribute__)operator(()predefined_constant(self)operator(,) ident(val)operator(\))
        ident(new) operator(=) ident(_TokenType)operator(()predefined_constant(self) operator(+) operator(()ident(val)operator(,)operator(\))operator(\))
        predefined(setattr)operator(()predefined_constant(self)operator(,) ident(val)operator(,) ident(new)operator(\))
        predefined_constant(self)operator(.)ident(subtypes)operator(.)ident(add)operator(()ident(new)operator(\))
        ident(new)operator(.)ident(parent) operator(=) predefined_constant(self)
        keyword(return) ident(new)

    keyword(def) method(__hash__)operator(()predefined_constant(self)operator(\))operator(:)
        keyword(return) predefined(hash)operator(()predefined(tuple)operator(()predefined_constant(self)operator(\))operator(\))

    keyword(def) method(__repr__)operator(()predefined_constant(self)operator(\))operator(:)
        keyword(return) string<delimiter(')content(Token)delimiter(')> operator(+) operator(()predefined_constant(self) keyword(and) string<delimiter(')content(.)delimiter(')> ident(or) string<delimiter(')delimiter(')>operator(\)) operator(+) string<delimiter(')content(.)delimiter(')>operator(.)ident(join)operator(()predefined_constant(self)operator(\))


ident(Token)       operator(=) ident(_TokenType)operator(()operator(\))

comment(# Special token types)
ident(Text)        operator(=) ident(Token)operator(.)ident(Text)
ident(Whitespace)  operator(=) ident(Text)operator(.)ident(Whitespace)
ident(Error)       operator(=) ident(Token)operator(.)ident(Error)
comment(# Text that doesn't belong to this lexer (e.g. HTML in PHP\))
ident(Other)       operator(=) ident(Token)operator(.)ident(Other)

comment(# Common token types for source code)
ident(Keyword)     operator(=) ident(Token)operator(.)ident(Keyword)
ident(Name)        operator(=) ident(Token)operator(.)ident(Name)
ident(Literal)     operator(=) ident(Token)operator(.)ident(Literal)
ident(String)      operator(=) ident(Literal)operator(.)ident(String)
ident(Number)      operator(=) ident(Literal)operator(.)ident(Number)
ident(Punctuation) operator(=) ident(Token)operator(.)ident(Punctuation)
ident(Operator)    operator(=) ident(Token)operator(.)ident(Operator)
ident(Comment)     operator(=) ident(Token)operator(.)ident(Comment)

comment(# Generic types for non-source code)
ident(Generic)     operator(=) ident(Token)operator(.)ident(Generic)

comment(# String and some others are not direct childs of Token.)
comment(# alias them:)
ident(Token)operator(.)ident(Token) operator(=) ident(Token)
ident(Token)operator(.)ident(String) operator(=) ident(String)
ident(Token)operator(.)ident(Number) operator(=) ident(Number)


keyword(def) method(is_token_subtype)operator(()ident(ttype)operator(,) ident(other)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Return True if ``ttype`` is a subtype of ``other``.)content(
)content(
)content(    exists for backwards compatibility. use ``ttype in other`` now.)content(
)content(    )delimiter(""")>
    keyword(return) ident(ttype) keyword(in) ident(other)


keyword(def) method(string_to_tokentype)operator(()ident(s)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Convert a string into a token type::)content(
)content(
)content(        >>> string_to_token('String.Double'\))content(
)content(        Token.Literal.String.Double)content(
)content(        >>> string_to_token('Token.Literal.Number'\))content(
)content(        Token.Literal.Number)content(
)content(        >>> string_to_token(''\))content(
)content(        Token)content(
)content(
)content(    Tokens that are already tokens are returned unchanged:)content(
)content(
)content(        >>> string_to_token(String\))content(
)content(        Token.Literal.String)content(
)content(    )delimiter(""")>
    keyword(if) predefined(isinstance)operator(()ident(s)operator(,) ident(_TokenType)operator(\))operator(:)
        keyword(return) ident(s)
    keyword(if) keyword(not) ident(s)operator(:)
        keyword(return) ident(Token)
    ident(node) operator(=) ident(Token)
    keyword(for) ident(item) keyword(in) ident(s)operator(.)ident(split)operator(()string<delimiter(')content(.)delimiter(')>operator(\))operator(:)
        ident(node) operator(=) predefined(getattr)operator(()ident(node)operator(,) ident(item)operator(\))
    keyword(return) ident(node)


comment(# Map standard token types to short names, used in CSS class naming.)
comment(# If you add a new item, please be sure to run this file to perform)
comment(# a consistency check for duplicate values.)
ident(STANDARD_TYPES) operator(=) operator({)
    ident(Token)operator(:)                         string<delimiter(')delimiter(')>operator(,)

    ident(Text)operator(:)                          string<delimiter(')delimiter(')>operator(,)
    ident(Whitespace)operator(:)                    string<delimiter(')content(w)delimiter(')>operator(,)
    ident(Error)operator(:)                         string<delimiter(')content(err)delimiter(')>operator(,)
    ident(Other)operator(:)                         string<delimiter(')content(x)delimiter(')>operator(,)

    ident(Keyword)operator(:)                       string<delimiter(')content(k)delimiter(')>operator(,)
    ident(Keyword)operator(.)ident(Constant)operator(:)              string<delimiter(')content(kc)delimiter(')>operator(,)
    ident(Keyword)operator(.)ident(Declaration)operator(:)           string<delimiter(')content(kd)delimiter(')>operator(,)
    ident(Keyword)operator(.)ident(Namespace)operator(:)             string<delimiter(')content(kn)delimiter(')>operator(,)
    ident(Keyword)operator(.)ident(Pseudo)operator(:)                string<delimiter(')content(kp)delimiter(')>operator(,)
    ident(Keyword)operator(.)ident(Reserved)operator(:)              string<delimiter(')content(kr)delimiter(')>operator(,)
    ident(Keyword)operator(.)ident(Type)operator(:)                  string<delimiter(')content(kt)delimiter(')>operator(,)

    ident(Name)operator(:)                          string<delimiter(')content(n)delimiter(')>operator(,)
    ident(Name)operator(.)ident(Attribute)operator(:)                string<delimiter(')content(na)delimiter(')>operator(,)
    ident(Name)operator(.)ident(Builtin)operator(:)                  string<delimiter(')content(nb)delimiter(')>operator(,)
    ident(Name)operator(.)ident(Builtin)operator(.)ident(Pseudo)operator(:)           string<delimiter(')content(bp)delimiter(')>operator(,)
    ident(Name)operator(.)ident(Class)operator(:)                    string<delimiter(')content(nc)delimiter(')>operator(,)
    ident(Name)operator(.)ident(Constant)operator(:)                 string<delimiter(')content(no)delimiter(')>operator(,)
    ident(Name)operator(.)ident(Decorator)operator(:)                string<delimiter(')content(nd)delimiter(')>operator(,)
    ident(Name)operator(.)ident(Entity)operator(:)                   string<delimiter(')content(ni)delimiter(')>operator(,)
    ident(Name)operator(.)ident(Exception)operator(:)                string<delimiter(')content(ne)delimiter(')>operator(,)
    ident(Name)operator(.)ident(Function)operator(:)                 string<delimiter(')content(nf)delimiter(')>operator(,)
    ident(Name)operator(.)ident(Property)operator(:)                 string<delimiter(')content(py)delimiter(')>operator(,)
    ident(Name)operator(.)ident(Label)operator(:)                    string<delimiter(')content(nl)delimiter(')>operator(,)
    ident(Name)operator(.)ident(Namespace)operator(:)                string<delimiter(')content(nn)delimiter(')>operator(,)
    ident(Name)operator(.)ident(Other)operator(:)                    string<delimiter(')content(nx)delimiter(')>operator(,)
    ident(Name)operator(.)ident(Tag)operator(:)                      string<delimiter(')content(nt)delimiter(')>operator(,)
    ident(Name)operator(.)ident(Variable)operator(:)                 string<delimiter(')content(nv)delimiter(')>operator(,)
    ident(Name)operator(.)ident(Variable)operator(.)ident(Class)operator(:)           string<delimiter(')content(vc)delimiter(')>operator(,)
    ident(Name)operator(.)ident(Variable)operator(.)ident(Global)operator(:)          string<delimiter(')content(vg)delimiter(')>operator(,)
    ident(Name)operator(.)ident(Variable)operator(.)ident(Instance)operator(:)        string<delimiter(')content(vi)delimiter(')>operator(,)

    ident(Literal)operator(:)                       string<delimiter(')content(l)delimiter(')>operator(,)
    ident(Literal)operator(.)ident(Date)operator(:)                  string<delimiter(')content(ld)delimiter(')>operator(,)

    ident(String)operator(:)                        string<delimiter(')content(s)delimiter(')>operator(,)
    ident(String)operator(.)ident(Backtick)operator(:)               string<delimiter(')content(sb)delimiter(')>operator(,)
    ident(String)operator(.)ident(Char)operator(:)                   string<delimiter(')content(sc)delimiter(')>operator(,)
    ident(String)operator(.)ident(Doc)operator(:)                    string<delimiter(')content(sd)delimiter(')>operator(,)
    ident(String)operator(.)ident(Double)operator(:)                 string<delimiter(')content(s2)delimiter(')>operator(,)
    ident(String)operator(.)ident(Escape)operator(:)                 string<delimiter(')content(se)delimiter(')>operator(,)
    ident(String)operator(.)ident(Heredoc)operator(:)                string<delimiter(')content(sh)delimiter(')>operator(,)
    ident(String)operator(.)ident(Interpol)operator(:)               string<delimiter(')content(si)delimiter(')>operator(,)
    ident(String)operator(.)ident(Other)operator(:)                  string<delimiter(')content(sx)delimiter(')>operator(,)
    ident(String)operator(.)ident(Regex)operator(:)                  string<delimiter(')content(sr)delimiter(')>operator(,)
    ident(String)operator(.)ident(Single)operator(:)                 string<delimiter(')content(s1)delimiter(')>operator(,)
    ident(String)operator(.)ident(Symbol)operator(:)                 string<delimiter(')content(ss)delimiter(')>operator(,)

    ident(Number)operator(:)                        string<delimiter(')content(m)delimiter(')>operator(,)
    ident(Number)operator(.)ident(Float)operator(:)                  string<delimiter(')content(mf)delimiter(')>operator(,)
    ident(Number)operator(.)ident(Hex)operator(:)                    string<delimiter(')content(mh)delimiter(')>operator(,)
    ident(Number)operator(.)ident(Integer)operator(:)                string<delimiter(')content(mi)delimiter(')>operator(,)
    ident(Number)operator(.)ident(Integer)operator(.)ident(Long)operator(:)           string<delimiter(')content(il)delimiter(')>operator(,)
    ident(Number)operator(.)ident(Oct)operator(:)                    string<delimiter(')content(mo)delimiter(')>operator(,)

    ident(Operator)operator(:)                      string<delimiter(')content(o)delimiter(')>operator(,)
    ident(Operator)operator(.)ident(Word)operator(:)                 string<delimiter(')content(ow)delimiter(')>operator(,)

    ident(Punctuation)operator(:)                   string<delimiter(')content(p)delimiter(')>operator(,)

    ident(Comment)operator(:)                       string<delimiter(')content(c)delimiter(')>operator(,)
    ident(Comment)operator(.)ident(Multiline)operator(:)             string<delimiter(')content(cm)delimiter(')>operator(,)
    ident(Comment)operator(.)ident(Preproc)operator(:)               string<delimiter(')content(cp)delimiter(')>operator(,)
    ident(Comment)operator(.)ident(Single)operator(:)                string<delimiter(')content(c1)delimiter(')>operator(,)
    ident(Comment)operator(.)ident(Special)operator(:)               string<delimiter(')content(cs)delimiter(')>operator(,)

    ident(Generic)operator(:)                       string<delimiter(')content(g)delimiter(')>operator(,)
    ident(Generic)operator(.)ident(Deleted)operator(:)               string<delimiter(')content(gd)delimiter(')>operator(,)
    ident(Generic)operator(.)ident(Emph)operator(:)                  string<delimiter(')content(ge)delimiter(')>operator(,)
    ident(Generic)operator(.)ident(Error)operator(:)                 string<delimiter(')content(gr)delimiter(')>operator(,)
    ident(Generic)operator(.)ident(Heading)operator(:)               string<delimiter(')content(gh)delimiter(')>operator(,)
    ident(Generic)operator(.)ident(Inserted)operator(:)              string<delimiter(')content(gi)delimiter(')>operator(,)
    ident(Generic)operator(.)ident(Output)operator(:)                string<delimiter(')content(go)delimiter(')>operator(,)
    ident(Generic)operator(.)ident(Prompt)operator(:)                string<delimiter(')content(gp)delimiter(')>operator(,)
    ident(Generic)operator(.)ident(Strong)operator(:)                string<delimiter(')content(gs)delimiter(')>operator(,)
    ident(Generic)operator(.)ident(Subheading)operator(:)            string<delimiter(')content(gu)delimiter(')>operator(,)
    ident(Generic)operator(.)ident(Traceback)operator(:)             string<delimiter(')content(gt)delimiter(')>operator(,)
operator(})
comment(# -*- coding: utf-8 -*-)
docstring<delimiter(""")content(
)content(    pygments.util)content(
)content(    ~~~~~~~~~~~~~)content(
)content(
)content(    Utility functions.)content(
)content(
)content(    :copyright: Copyright 2006-2009 by the Pygments team, see AUTHORS.)content(
)content(    :license: BSD, see LICENSE for details.)content(
)delimiter(""")>
keyword(import) include(re)
keyword(import) include(sys)


ident(split_path_re) operator(=) ident(re)operator(.)ident(compile)operator(()string<modifier(r)delimiter(')content([/)content(\\\\)content( ])delimiter(')>operator(\))
ident(doctype_lookup_re) operator(=) ident(re)operator(.)ident(compile)operator(()string<modifier(r)delimiter(''')content((?smx\))content(
)content(    (<)content(\\?)content(.*?)content(\\?)content(>\)?)content(\\s)content(*)content(
)content(    <!DOCTYPE)content(\\s)content(+()content(
)content(     [a-zA-Z_][a-zA-Z0-9]*)content(\\s)content(+)content(
)content(     [a-zA-Z_][a-zA-Z0-9]*)content(\\s)content(+)content(
)content(     "[^"]*"\))content(
)content(     [^>]*>)content(
)delimiter(''')>operator(\))
ident(tag_re) operator(=) ident(re)operator(.)ident(compile)operator(()string<modifier(r)delimiter(')content(<(.+?\)()content(\\s)content(.*?\)?>.*?</.+?>(?uism\))delimiter(')>operator(\))


keyword(class) class(ClassNotFound)operator(()exception(ValueError)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    If one of the get_*_by_* functions didn't find a matching class.)content(
)content(    )delimiter(""")>


keyword(class) class(OptionError)operator(()exception(Exception)operator(\))operator(:)
    keyword(pass)


keyword(def) method(get_choice_opt)operator(()ident(options)operator(,) ident(optname)operator(,) ident(allowed)operator(,) ident(default)operator(=)predefined_constant(None)operator(,) ident(normcase)operator(=)predefined_constant(False)operator(\))operator(:)
    ident(string) operator(=) ident(options)operator(.)ident(get)operator(()ident(optname)operator(,) ident(default)operator(\))
    keyword(if) ident(normcase)operator(:)
        ident(string) operator(=) ident(string)operator(.)ident(lower)operator(()operator(\))
    keyword(if) ident(string) keyword(not) keyword(in) ident(allowed)operator(:)
        keyword(raise) ident(OptionError)operator(()string<delimiter(')content(Value for option %s must be one of %s)delimiter(')> operator(%)
                          operator(()ident(optname)operator(,) string<delimiter(')content(, )delimiter(')>operator(.)ident(join)operator(()predefined(map)operator(()predefined(str)operator(,) ident(allowed)operator(\))operator(\))operator(\))operator(\))
    keyword(return) ident(string)


keyword(def) method(get_bool_opt)operator(()ident(options)operator(,) ident(optname)operator(,) ident(default)operator(=)predefined_constant(None)operator(\))operator(:)
    ident(string) operator(=) ident(options)operator(.)ident(get)operator(()ident(optname)operator(,) ident(default)operator(\))
    keyword(if) predefined(isinstance)operator(()ident(string)operator(,) predefined(bool)operator(\))operator(:)
        keyword(return) ident(string)
    keyword(elif) predefined(isinstance)operator(()ident(string)operator(,) predefined(int)operator(\))operator(:)
        keyword(return) predefined(bool)operator(()ident(string)operator(\))
    keyword(elif) keyword(not) predefined(isinstance)operator(()ident(string)operator(,) predefined(basestring)operator(\))operator(:)
        keyword(raise) ident(OptionError)operator(()string<delimiter(')content(Invalid type %r for option %s; use )delimiter(')>
                          string<delimiter(')content(1/0, yes/no, true/false, on/off)delimiter(')> operator(%) operator(()
                          ident(string)operator(,) ident(optname)operator(\))operator(\))
    keyword(elif) ident(string)operator(.)ident(lower)operator(()operator(\)) keyword(in) operator(()string<delimiter(')content(1)delimiter(')>operator(,) string<delimiter(')content(yes)delimiter(')>operator(,) string<delimiter(')content(true)delimiter(')>operator(,) string<delimiter(')content(on)delimiter(')>operator(\))operator(:)
        keyword(return) predefined_constant(True)
    keyword(elif) ident(string)operator(.)ident(lower)operator(()operator(\)) keyword(in) operator(()string<delimiter(')content(0)delimiter(')>operator(,) string<delimiter(')content(no)delimiter(')>operator(,) string<delimiter(')content(false)delimiter(')>operator(,) string<delimiter(')content(off)delimiter(')>operator(\))operator(:)
        keyword(return) predefined_constant(False)
    keyword(else)operator(:)
        keyword(raise) ident(OptionError)operator(()string<delimiter(')content(Invalid value %r for option %s; use )delimiter(')>
                          string<delimiter(')content(1/0, yes/no, true/false, on/off)delimiter(')> operator(%) operator(()
                          ident(string)operator(,) ident(optname)operator(\))operator(\))


keyword(def) method(get_int_opt)operator(()ident(options)operator(,) ident(optname)operator(,) ident(default)operator(=)predefined_constant(None)operator(\))operator(:)
    ident(string) operator(=) ident(options)operator(.)ident(get)operator(()ident(optname)operator(,) ident(default)operator(\))
    keyword(try)operator(:)
        keyword(return) predefined(int)operator(()ident(string)operator(\))
    keyword(except) exception(TypeError)operator(:)
        keyword(raise) ident(OptionError)operator(()string<delimiter(')content(Invalid type %r for option %s; you )delimiter(')>
                          string<delimiter(')content(must give an integer value)delimiter(')> operator(%) operator(()
                          ident(string)operator(,) ident(optname)operator(\))operator(\))
    keyword(except) exception(ValueError)operator(:)
        keyword(raise) ident(OptionError)operator(()string<delimiter(')content(Invalid value %r for option %s; you )delimiter(')>
                          string<delimiter(')content(must give an integer value)delimiter(')> operator(%) operator(()
                          ident(string)operator(,) ident(optname)operator(\))operator(\))


keyword(def) method(get_list_opt)operator(()ident(options)operator(,) ident(optname)operator(,) ident(default)operator(=)predefined_constant(None)operator(\))operator(:)
    ident(val) operator(=) ident(options)operator(.)ident(get)operator(()ident(optname)operator(,) ident(default)operator(\))
    keyword(if) predefined(isinstance)operator(()ident(val)operator(,) predefined(basestring)operator(\))operator(:)
        keyword(return) ident(val)operator(.)ident(split)operator(()operator(\))
    keyword(elif) predefined(isinstance)operator(()ident(val)operator(,) operator(()predefined(list)operator(,) predefined(tuple)operator(\))operator(\))operator(:)
        keyword(return) predefined(list)operator(()ident(val)operator(\))
    keyword(else)operator(:)
        keyword(raise) ident(OptionError)operator(()string<delimiter(')content(Invalid type %r for option %s; you )delimiter(')>
                          string<delimiter(')content(must give a list value)delimiter(')> operator(%) operator(()
                          ident(val)operator(,) ident(optname)operator(\))operator(\))


keyword(def) method(docstring_headline)operator(()ident(obj)operator(\))operator(:)
    keyword(if) keyword(not) ident(obj)operator(.)ident(__doc__)operator(:)
        keyword(return) string<delimiter(')delimiter(')>
    ident(res) operator(=) operator([)operator(])
    keyword(for) ident(line) keyword(in) ident(obj)operator(.)ident(__doc__)operator(.)ident(strip)operator(()operator(\))operator(.)ident(splitlines)operator(()operator(\))operator(:)
        keyword(if) ident(line)operator(.)ident(strip)operator(()operator(\))operator(:)
            ident(res)operator(.)ident(append)operator(()string<delimiter(")content( )delimiter(")> operator(+) ident(line)operator(.)ident(strip)operator(()operator(\))operator(\))
        keyword(else)operator(:)
            keyword(break)
    keyword(return) string<delimiter(')delimiter(')>operator(.)ident(join)operator(()ident(res)operator(\))operator(.)ident(lstrip)operator(()operator(\))


keyword(def) method(make_analysator)operator(()ident(f)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Return a static text analysation function that)content(
)content(    returns float values.)content(
)content(    )delimiter(""")>
    keyword(def) method(text_analyse)operator(()ident(text)operator(\))operator(:)
        ident(rv) operator(=) ident(f)operator(()ident(text)operator(\))
        keyword(if) keyword(not) ident(rv)operator(:)
            keyword(return) float(0.0)
        keyword(return) predefined(min)operator(()float(1.0)operator(,) predefined(max)operator(()float(0.0)operator(,) predefined(float)operator(()ident(rv)operator(\))operator(\))operator(\))
    ident(text_analyse)operator(.)ident(__doc__) operator(=) ident(f)operator(.)ident(__doc__)
    keyword(return) predefined(staticmethod)operator(()ident(text_analyse)operator(\))


keyword(def) method(shebang_matches)operator(()ident(text)operator(,) ident(regex)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Check if the given regular expression matches the last part of the)content(
)content(    shebang if one exists.)content(
)content(
)content(        >>> from pygments.util import shebang_matches)content(
)content(        >>> shebang_matches('#!/usr/bin/env python', r'python(2)content(\\.)content(\\d)content(\)?'\))content(
)content(        True)content(
)content(        >>> shebang_matches('#!/usr/bin/python2.4', r'python(2)content(\\.)content(\\d)content(\)?'\))content(
)content(        True)content(
)content(        >>> shebang_matches('#!/usr/bin/python-ruby', r'python(2)content(\\.)content(\\d)content(\)?'\))content(
)content(        False)content(
)content(        >>> shebang_matches('#!/usr/bin/python/ruby', r'python(2)content(\\.)content(\\d)content(\)?'\))content(
)content(        False)content(
)content(        >>> shebang_matches('#!/usr/bin/startsomethingwith python',)content(
)content(        ...                 r'python(2)content(\\.)content(\\d)content(\)?'\))content(
)content(        True)content(
)content(
)content(    It also checks for common windows executable file extensions::)content(
)content(
)content(        >>> shebang_matches('#!C:)char(\\\\)content(Python2.4)char(\\\\)content(Python.exe', r'python(2)content(\\.)content(\\d)content(\)?'\))content(
)content(        True)content(
)content(
)content(    Parameters (``'-f'`` or ``'--foo'`` are ignored so ``'perl'`` does)content(
)content(    the same as ``'perl -e'``\))content(
)content(
)content(    Note that this method automatically searches the whole string (eg:)content(
)content(    the regular expression is wrapped in ``'^$'``\))content(
)content(    )delimiter(""")>
    ident(index) operator(=) ident(text)operator(.)ident(find)operator(()string<delimiter(')char(\\n)delimiter(')>operator(\))
    keyword(if) ident(index) operator(>=) integer(0)operator(:)
        ident(first_line) operator(=) ident(text)operator([)operator(:)ident(index)operator(])operator(.)ident(lower)operator(()operator(\))
    keyword(else)operator(:)
        ident(first_line) operator(=) ident(text)operator(.)ident(lower)operator(()operator(\))
    keyword(if) ident(first_line)operator(.)ident(startswith)operator(()string<delimiter(')content(#!)delimiter(')>operator(\))operator(:)
        keyword(try)operator(:)
            ident(found) operator(=) operator([)ident(x) keyword(for) ident(x) keyword(in) ident(split_path_re)operator(.)ident(split)operator(()ident(first_line)operator([)integer(2)operator(:)operator(])operator(.)ident(strip)operator(()operator(\))operator(\))
                     keyword(if) ident(x) keyword(and) keyword(not) ident(x)operator(.)ident(startswith)operator(()string<delimiter(')content(-)delimiter(')>operator(\))operator(])operator([)operator(-)integer(1)operator(])
        keyword(except) exception(IndexError)operator(:)
            keyword(return) predefined_constant(False)
        ident(regex) operator(=) ident(re)operator(.)ident(compile)operator(()string<delimiter(')content(^%s()content(\\.)content((exe|cmd|bat|bin\)\)?$)delimiter(')> operator(%) ident(regex)operator(,) ident(re)operator(.)ident(IGNORECASE)operator(\))
        keyword(if) ident(regex)operator(.)ident(search)operator(()ident(found)operator(\)) keyword(is) keyword(not) predefined_constant(None)operator(:)
            keyword(return) predefined_constant(True)
    keyword(return) predefined_constant(False)


keyword(def) method(doctype_matches)operator(()ident(text)operator(,) ident(regex)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Check if the doctype matches a regular expression (if present\).)content(
)content(    Note that this method only checks the first part of a DOCTYPE.)content(
)content(    eg: 'html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"')content(
)content(    )delimiter(""")>
    ident(m) operator(=) ident(doctype_lookup_re)operator(.)ident(match)operator(()ident(text)operator(\))
    keyword(if) ident(m) keyword(is) predefined_constant(None)operator(:)
        keyword(return) predefined_constant(False)
    ident(doctype) operator(=) ident(m)operator(.)ident(group)operator(()integer(2)operator(\))
    keyword(return) ident(re)operator(.)ident(compile)operator(()ident(regex)operator(\))operator(.)ident(match)operator(()ident(doctype)operator(.)ident(strip)operator(()operator(\))operator(\)) keyword(is) keyword(not) predefined_constant(None)


keyword(def) method(html_doctype_matches)operator(()ident(text)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Check if the file looks like it has a html doctype.)content(
)content(    )delimiter(""")>
    keyword(return) ident(doctype_matches)operator(()ident(text)operator(,) string<modifier(r)delimiter(')content(html)content(\\s)content(+PUBLIC)content(\\s)content(+"-//W3C//DTD X?HTML.*)delimiter(')>operator(\))


ident(_looks_like_xml_cache) operator(=) operator({)operator(})
keyword(def) method(looks_like_xml)operator(()ident(text)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Check if a doctype exists or if we have some tags.)content(
)content(    )delimiter(""")>
    ident(key) operator(=) predefined(hash)operator(()ident(text)operator(\))
    keyword(try)operator(:)
        keyword(return) ident(_looks_like_xml_cache)operator([)ident(key)operator(])
    keyword(except) exception(KeyError)operator(:)
        ident(m) operator(=) ident(doctype_lookup_re)operator(.)ident(match)operator(()ident(text)operator(\))
        keyword(if) ident(m) keyword(is) keyword(not) predefined_constant(None)operator(:)
            keyword(return) predefined_constant(True)
        ident(rv) operator(=) ident(tag_re)operator(.)ident(search)operator(()ident(text)operator([)operator(:)integer(1000)operator(])operator(\)) keyword(is) keyword(not) predefined_constant(None)
        ident(_looks_like_xml_cache)operator([)ident(key)operator(]) operator(=) ident(rv)
        keyword(return) ident(rv)

comment(# Python 2/3 compatibility)

keyword(if) ident(sys)operator(.)ident(version_info) operator(<) operator(()integer(3)operator(,)integer(0)operator(\))operator(:)
    ident(b) operator(=) ident(bytes) operator(=) predefined(str)
    ident(u_prefix) operator(=) string<delimiter(')content(u)delimiter(')>
    keyword(import) include(StringIO)operator(,) include(cStringIO)
    ident(BytesIO) operator(=) ident(cStringIO)operator(.)ident(StringIO)
    ident(StringIO) operator(=) ident(StringIO)operator(.)ident(StringIO)
keyword(else)operator(:)
    keyword(import) include(builtins)
    ident(bytes) operator(=) ident(builtins)operator(.)ident(bytes)
    ident(u_prefix) operator(=) string<delimiter(')delimiter(')>
    keyword(def) method(b)operator(()ident(s)operator(\))operator(:)
        keyword(if) predefined(isinstance)operator(()ident(s)operator(,) predefined(str)operator(\))operator(:)
            keyword(return) predefined(bytes)operator(()predefined(map)operator(()predefined(ord)operator(,) ident(s)operator(\))operator(\))
        keyword(elif) predefined(isinstance)operator(()ident(s)operator(,) predefined(bytes)operator(\))operator(:)
            keyword(return) ident(s)
        keyword(else)operator(:)
            keyword(raise) exception(TypeError)operator(()string<delimiter(")content(Invalid argument %r for b(\))delimiter(")> operator(%) operator(()ident(s)operator(,)operator(\))operator(\))
    keyword(import) include(io)
    ident(BytesIO) operator(=) ident(io)operator(.)ident(BytesIO)
    ident(StringIO) operator(=) ident(io)operator(.)ident(StringIO)
comment(#!/usr/bin/env python)
comment(# -*- coding: utf-8 -*-)
docstring<delimiter(""")content(
)content(    Checker for file headers)content(
)content(    ~~~~~~~~~~~~~~~~~~~~~~~~)content(
)content(
)content(    Make sure each Python file has a correct file header)content(
)content(    including copyright and license information.)content(
)content(
)content(    :copyright: Copyright 2006-2009 by the Pygments team, see AUTHORS.)content(
)content(    :license: BSD, see LICENSE for details.)content(
)delimiter(""")>

keyword(import) include(sys)operator(,) include(os)operator(,) include(re)
keyword(import) include(getopt)
keyword(import) include(cStringIO)
keyword(from) include(os.path) keyword(import) include(join)operator(,) include(splitext)operator(,) include(abspath)


ident(checkers) operator(=) operator({)operator(})

keyword(def) method(checker)operator(()operator(*)ident(suffixes)operator(,) operator(**)ident(kwds)operator(\))operator(:)
    ident(only_pkg) operator(=) ident(kwds)operator(.)ident(pop)operator(()string<delimiter(')content(only_pkg)delimiter(')>operator(,) predefined_constant(False)operator(\))
    keyword(def) method(deco)operator(()ident(func)operator(\))operator(:)
        keyword(for) ident(suffix) keyword(in) ident(suffixes)operator(:)
            ident(checkers)operator(.)ident(setdefault)operator(()ident(suffix)operator(,) operator([)operator(])operator(\))operator(.)ident(append)operator(()ident(func)operator(\))
        ident(func)operator(.)ident(only_pkg) operator(=) ident(only_pkg)
        keyword(return) ident(func)
    keyword(return) ident(deco)


ident(name_mail_re) operator(=) string<modifier(r)delimiter(')content([)content(\\w)content( ]+(<.*?>\)?)delimiter(')>
ident(copyright_re) operator(=) ident(re)operator(.)ident(compile)operator(()string<modifier(r)delimiter(')content(^    :copyright: Copyright 2006-2009 by the Pygments team, )delimiter(')>
                          string<modifier(r)delimiter(')content(see AUTHORS)content(\\.)content($)delimiter(')>operator(,) ident(re)operator(.)ident(UNICODE)operator(\))
ident(copyright_2_re) operator(=) ident(re)operator(.)ident(compile)operator(()string<modifier(r)delimiter(')content(^                %s(, %s\)*[,.]$)delimiter(')> operator(%)
                            operator(()ident(name_mail_re)operator(,) ident(name_mail_re)operator(\))operator(,) ident(re)operator(.)ident(UNICODE)operator(\))
ident(coding_re)    operator(=) ident(re)operator(.)ident(compile)operator(()string<modifier(r)delimiter(')content(coding[:=])content(\\s)content(*([-)content(\\w)content(.]+\))delimiter(')>operator(\))
ident(not_ix_re)    operator(=) ident(re)operator(.)ident(compile)operator(()string<modifier(r)delimiter(')content(\\b)content(not)content(\\s)content(+)content(\\S)content(+?)content(\\s)content(+i[sn])content(\\s)content(\\S)content(+)delimiter(')>operator(\))
ident(is_const_re)  operator(=) ident(re)operator(.)ident(compile)operator(()string<modifier(r)delimiter(')content(if.*?==)content(\\s)content(+(None|False|True\))content(\\b)delimiter(')>operator(\))

ident(misspellings) operator(=) operator([)string<delimiter(")content(developement)delimiter(")>operator(,) string<delimiter(")content(adress)delimiter(")>operator(,) string<delimiter(")content(verificate)delimiter(")>operator(,)  comment(# ALLOW-MISSPELLING)
                string<delimiter(")content(informations)delimiter(")>operator(])                          comment(# ALLOW-MISSPELLING)


decorator(@checker)operator(()string<delimiter(')content(.py)delimiter(')>operator(\))
keyword(def) method(check_syntax)operator(()ident(fn)operator(,) ident(lines)operator(\))operator(:)
    keyword(try)operator(:)
        predefined(compile)operator(()string<delimiter(')delimiter(')>operator(.)ident(join)operator(()ident(lines)operator(\))operator(,) ident(fn)operator(,) string<delimiter(")content(exec)delimiter(")>operator(\))
    keyword(except) exception(SyntaxError)operator(,) ident(err)operator(:)
        keyword(yield) integer(0)operator(,) string<delimiter(")content(not compilable: %s)delimiter(")> operator(%) ident(err)


decorator(@checker)operator(()string<delimiter(')content(.py)delimiter(')>operator(\))
keyword(def) method(check_style_and_encoding)operator(()ident(fn)operator(,) ident(lines)operator(\))operator(:)
    ident(encoding) operator(=) string<delimiter(')content(ascii)delimiter(')>
    keyword(for) ident(lno)operator(,) ident(line) keyword(in) predefined(enumerate)operator(()ident(lines)operator(\))operator(:)
        keyword(if) predefined(len)operator(()ident(line)operator(\)) operator(>) integer(90)operator(:)
            keyword(yield) ident(lno)operator(+)integer(1)operator(,) string<delimiter(")content(line too long)delimiter(")>
        ident(m) operator(=) ident(not_ix_re)operator(.)ident(search)operator(()ident(line)operator(\))
        keyword(if) ident(m)operator(:)
            keyword(yield) ident(lno)operator(+)integer(1)operator(,) string<delimiter(')content(")delimiter(')> operator(+) ident(m)operator(.)ident(group)operator(()operator(\)) operator(+) string<delimiter(')content(")delimiter(')>
        keyword(if) ident(is_const_re)operator(.)ident(search)operator(()ident(line)operator(\))operator(:)
            keyword(yield) ident(lno)operator(+)integer(1)operator(,) string<delimiter(')content(using == None/True/False)delimiter(')>
        keyword(if) ident(lno) operator(<) integer(2)operator(:)
            ident(co) operator(=) ident(coding_re)operator(.)ident(search)operator(()ident(line)operator(\))
            keyword(if) ident(co)operator(:)
                ident(encoding) operator(=) ident(co)operator(.)ident(group)operator(()integer(1)operator(\))
        keyword(try)operator(:)
            ident(line)operator(.)ident(decode)operator(()ident(encoding)operator(\))
        keyword(except) exception(UnicodeDecodeError)operator(,) ident(err)operator(:)
            keyword(yield) ident(lno)operator(+)integer(1)operator(,) string<delimiter(")content(not decodable: %s)char(\\n)content(   Line: %r)delimiter(")> operator(%) operator(()ident(err)operator(,) ident(line)operator(\))
        keyword(except) exception(LookupError)operator(,) ident(err)operator(:)
            keyword(yield) integer(0)operator(,) string<delimiter(")content(unknown encoding: %s)delimiter(")> operator(%) ident(encoding)
            ident(encoding) operator(=) string<delimiter(')content(latin1)delimiter(')>


decorator(@checker)operator(()string<delimiter(')content(.py)delimiter(')>operator(,) ident(only_pkg)operator(=)predefined_constant(True)operator(\))
keyword(def) method(check_fileheader)operator(()ident(fn)operator(,) ident(lines)operator(\))operator(:)
    comment(# line number correction)
    ident(c) operator(=) integer(1)
    keyword(if) ident(lines)operator([)integer(0)operator(:)integer(1)operator(]) operator(==) operator([)string<delimiter(')content(#!/usr/bin/env python)char(\\n)delimiter(')>operator(])operator(:)
        ident(lines) operator(=) ident(lines)operator([)integer(1)operator(:)operator(])
        ident(c) operator(=) integer(2)

    ident(llist) operator(=) operator([)operator(])
    ident(docopen) operator(=) predefined_constant(False)
    keyword(for) ident(lno)operator(,) ident(l) keyword(in) predefined(enumerate)operator(()ident(lines)operator(\))operator(:)
        ident(llist)operator(.)ident(append)operator(()ident(l)operator(\))
        keyword(if) ident(lno) operator(==) integer(0)operator(:)
            keyword(if) ident(l) operator(==) string<delimiter(')content(# -*- coding: rot13 -*-)char(\\n)delimiter(')>operator(:)
                comment(# special-case pony package)
                keyword(return)
            keyword(elif) ident(l) operator(!=) string<delimiter(')content(# -*- coding: utf-8 -*-)char(\\n)delimiter(')>operator(:)
                keyword(yield) integer(1)operator(,) string<delimiter(")content(missing coding declaration)delimiter(")>
        keyword(elif) ident(lno) operator(==) integer(1)operator(:)
            keyword(if) ident(l) operator(!=) string<delimiter(')content(""")char(\\n)delimiter(')> keyword(and) ident(l) operator(!=) string<delimiter(')content(r""")char(\\n)delimiter(')>operator(:)
                keyword(yield) integer(2)operator(,) string<delimiter(')content(missing docstring begin ("""\))delimiter(')>
            keyword(else)operator(:)
                ident(docopen) operator(=) predefined_constant(True)
        keyword(elif) ident(docopen)operator(:)
            keyword(if) ident(l) operator(==) string<delimiter(')content(""")char(\\n)delimiter(')>operator(:)
                comment(# end of docstring)
                keyword(if) ident(lno) operator(<=) integer(4)operator(:)
                    keyword(yield) ident(lno)operator(+)ident(c)operator(,) string<delimiter(")content(missing module name in docstring)delimiter(")>
                keyword(break)

            keyword(if) ident(l) operator(!=) string<delimiter(")char(\\n)delimiter(")> keyword(and) ident(l)operator([)operator(:)integer(4)operator(]) operator(!=) string<delimiter(')content(    )delimiter(')> keyword(and) ident(docopen)operator(:)
                keyword(yield) ident(lno)operator(+)ident(c)operator(,) string<delimiter(")content(missing correct docstring indentation)delimiter(")>

            keyword(if) ident(lno) operator(==) integer(2)operator(:)
                comment(# if not in package, don't check the module name)
                ident(modname) operator(=) ident(fn)operator([)operator(:)operator(-)integer(3)operator(])operator(.)ident(replace)operator(()string<delimiter(')content(/)delimiter(')>operator(,) string<delimiter(')content(.)delimiter(')>operator(\))operator(.)ident(replace)operator(()string<delimiter(')content(.__init__)delimiter(')>operator(,) string<delimiter(')delimiter(')>operator(\))
                keyword(while) ident(modname)operator(:)
                    keyword(if) ident(l)operator(.)ident(lower)operator(()operator(\))operator([)integer(4)operator(:)operator(-)integer(1)operator(]) operator(==) ident(modname)operator(:)
                        keyword(break)
                    ident(modname) operator(=) string<delimiter(')content(.)delimiter(')>operator(.)ident(join)operator(()ident(modname)operator(.)ident(split)operator(()string<delimiter(')content(.)delimiter(')>operator(\))operator([)integer(1)operator(:)operator(])operator(\))
                keyword(else)operator(:)
                    keyword(yield) integer(3)operator(,) string<delimiter(")content(wrong module name in docstring heading)delimiter(")>
                ident(modnamelen) operator(=) predefined(len)operator(()ident(l)operator(.)ident(strip)operator(()operator(\))operator(\))
            keyword(elif) ident(lno) operator(==) integer(3)operator(:)
                keyword(if) ident(l)operator(.)ident(strip)operator(()operator(\)) operator(!=) ident(modnamelen) operator(*) string<delimiter(")content(~)delimiter(")>operator(:)
                    keyword(yield) integer(4)operator(,) string<delimiter(")content(wrong module name underline, should be ~~~...~)delimiter(")>

    keyword(else)operator(:)
        keyword(yield) integer(0)operator(,) string<delimiter(")content(missing end and/or start of docstring...)delimiter(")>

    comment(# check for copyright and license fields)
    ident(license) operator(=) ident(llist)operator([)operator(-)integer(2)operator(:)operator(-)integer(1)operator(])
    keyword(if) ident(license) operator(!=) operator([)string<delimiter(")content(    :license: BSD, see LICENSE for details.)char(\\n)delimiter(")>operator(])operator(:)
        keyword(yield) integer(0)operator(,) string<delimiter(")content(no correct license info)delimiter(")>

    ident(ci) operator(=) operator(-)integer(3)
    ident(copyright) operator(=) operator([)ident(s)operator(.)ident(decode)operator(()string<delimiter(')content(utf-8)delimiter(')>operator(\)) keyword(for) ident(s) keyword(in) ident(llist)operator([)ident(ci)operator(:)ident(ci)operator(+)integer(1)operator(])operator(])
    keyword(while) ident(copyright) keyword(and) ident(copyright_2_re)operator(.)ident(match)operator(()ident(copyright)operator([)integer(0)operator(])operator(\))operator(:)
        ident(ci) operator(-=) integer(1)
        ident(copyright) operator(=) ident(llist)operator([)ident(ci)operator(:)ident(ci)operator(+)integer(1)operator(])
    keyword(if) keyword(not) ident(copyright) keyword(or) keyword(not) ident(copyright_re)operator(.)ident(match)operator(()ident(copyright)operator([)integer(0)operator(])operator(\))operator(:)
        keyword(yield) integer(0)operator(,) string<delimiter(")content(no correct copyright info)delimiter(")>


decorator(@checker)operator(()string<delimiter(')content(.py)delimiter(')>operator(,) string<delimiter(')content(.html)delimiter(')>operator(,) string<delimiter(')content(.js)delimiter(')>operator(\))
keyword(def) method(check_whitespace_and_spelling)operator(()ident(fn)operator(,) ident(lines)operator(\))operator(:)
    keyword(for) ident(lno)operator(,) ident(line) keyword(in) predefined(enumerate)operator(()ident(lines)operator(\))operator(:)
        keyword(if) string<delimiter(")char(\\t)delimiter(")> keyword(in) ident(line)operator(:)
            keyword(yield) ident(lno)operator(+)integer(1)operator(,) string<delimiter(")content(OMG TABS!!!1 )delimiter(")>
        keyword(if) ident(line)operator([)operator(:)operator(-)integer(1)operator(])operator(.)ident(rstrip)operator(()string<delimiter(')content( )char(\\t)delimiter(')>operator(\)) operator(!=) ident(line)operator([)operator(:)operator(-)integer(1)operator(])operator(:)
            keyword(yield) ident(lno)operator(+)integer(1)operator(,) string<delimiter(")content(trailing whitespace)delimiter(")>
        keyword(for) ident(word) keyword(in) ident(misspellings)operator(:)
            keyword(if) ident(word) keyword(in) ident(line) keyword(and) string<delimiter(')content(ALLOW-MISSPELLING)delimiter(')> keyword(not) keyword(in) ident(line)operator(:)
                keyword(yield) ident(lno)operator(+)integer(1)operator(,) string<delimiter(')content("%s" used)delimiter(')> operator(%) ident(word)


ident(bad_tags) operator(=) operator(()string<delimiter(')content(<b>)delimiter(')>operator(,) string<delimiter(')content(<i>)delimiter(')>operator(,) string<delimiter(')content(<u>)delimiter(')>operator(,) string<delimiter(')content(<s>)delimiter(')>operator(,) string<delimiter(')content(<strike>)delimiter(')>
            string<delimiter(')content(<center>)delimiter(')>operator(,) string<delimiter(')content(<big>)delimiter(')>operator(,) string<delimiter(')content(<small>)delimiter(')>operator(,) string<delimiter(')content(<font)delimiter(')>operator(\))

decorator(@checker)operator(()string<delimiter(')content(.html)delimiter(')>operator(\))
keyword(def) method(check_xhtml)operator(()ident(fn)operator(,) ident(lines)operator(\))operator(:)
    keyword(for) ident(lno)operator(,) ident(line) keyword(in) predefined(enumerate)operator(()ident(lines)operator(\))operator(:)
        keyword(for) ident(bad_tag) keyword(in) ident(bad_tags)operator(:)
            keyword(if) ident(bad_tag) keyword(in) ident(line)operator(:)
                keyword(yield) ident(lno)operator(+)integer(1)operator(,) string<delimiter(")content(used )delimiter(")> operator(+) ident(bad_tag)


keyword(def) method(main)operator(()ident(argv)operator(\))operator(:)
    keyword(try)operator(:)
        ident(gopts)operator(,) ident(args) operator(=) ident(getopt)operator(.)ident(getopt)operator(()ident(argv)operator([)integer(1)operator(:)operator(])operator(,) string<delimiter(")content(vi:)delimiter(")>operator(\))
    keyword(except) ident(getopt)operator(.)ident(GetoptError)operator(:)
        keyword(print) string<delimiter(")content(Usage: %s [-v] [-i ignorepath]* [path])delimiter(")> operator(%) ident(argv)operator([)integer(0)operator(])
        keyword(return) integer(2)
    ident(opts) operator(=) operator({)operator(})
    keyword(for) ident(opt)operator(,) ident(val) keyword(in) ident(gopts)operator(:)
        keyword(if) ident(opt) operator(==) string<delimiter(')content(-i)delimiter(')>operator(:)
            ident(val) operator(=) ident(abspath)operator(()ident(val)operator(\))
        ident(opts)operator(.)ident(setdefault)operator(()ident(opt)operator(,) operator([)operator(])operator(\))operator(.)ident(append)operator(()ident(val)operator(\))

    keyword(if) predefined(len)operator(()ident(args)operator(\)) operator(==) integer(0)operator(:)
        ident(path) operator(=) string<delimiter(')content(.)delimiter(')>
    ident(elif) predefined(len)operator(()ident(args)operator(\)) operator(==) integer(1)operator(:)
        ident(path) operator(=) ident(args)operator([)integer(0)operator(])
    keyword(else)operator(:)
        keyword(print) string<delimiter(")content(Usage: %s [-v] [-i ignorepath]* [path])delimiter(")> operator(%) ident(argv)operator([)integer(0)operator(])
        keyword(return) integer(2)

    ident(verbose) operator(=) string<delimiter(')content(-v)delimiter(')> keyword(in) ident(opts)

    ident(num) operator(=) integer(0)
    ident(out) operator(=) ident(cStringIO)operator(.)ident(StringIO)operator(()operator(\))

    comment(# TODO: replace os.walk run with iteration over output of)
    comment(#       `svn list -R`.)

    keyword(for) ident(root)operator(,) ident(dirs)operator(,) ident(files) keyword(in) ident(os)operator(.)ident(walk)operator(()ident(path)operator(\))operator(:)
        keyword(if) string<delimiter(')content(.svn)delimiter(')> keyword(in) ident(dirs)operator(:)
            ident(dirs)operator(.)ident(remove)operator(()string<delimiter(')content(.svn)delimiter(')>operator(\))
        keyword(if) string<delimiter(')content(-i)delimiter(')> keyword(in) ident(opts) keyword(and) ident(abspath)operator(()ident(root)operator(\)) keyword(in) ident(opts)operator([)string<delimiter(')content(-i)delimiter(')>operator(])operator(:)
            keyword(del) ident(dirs)operator([)operator(:)operator(])
            keyword(continue)
        comment(# XXX: awkward: for the Makefile call: don't check non-package)
        comment(#      files for file headers)
        ident(in_pocoo_pkg) operator(=) ident(root)operator(.)ident(startswith)operator(()string<delimiter(')content(./pygments)delimiter(')>operator(\))
        keyword(for) ident(fn) keyword(in) ident(files)operator(:)

            ident(fn) operator(=) ident(join)operator(()ident(root)operator(,) ident(fn)operator(\))
            keyword(if) ident(fn)operator([)operator(:)integer(2)operator(]) operator(==) string<delimiter(')content(./)delimiter(')>operator(:) ident(fn) operator(=) ident(fn)operator([)integer(2)operator(:)operator(])

            keyword(if) string<delimiter(')content(-i)delimiter(')> keyword(in) ident(opts) keyword(and) ident(abspath)operator(()ident(fn)operator(\)) keyword(in) ident(opts)operator([)string<delimiter(')content(-i)delimiter(')>operator(])operator(:)
                keyword(continue)

            ident(ext) operator(=) ident(splitext)operator(()ident(fn)operator(\))operator([)integer(1)operator(])
            ident(checkerlist) operator(=) ident(checkers)operator(.)ident(get)operator(()ident(ext)operator(,) predefined_constant(None)operator(\))
            keyword(if) keyword(not) ident(checkerlist)operator(:)
                keyword(continue)

            keyword(if) ident(verbose)operator(:)
                keyword(print) string<delimiter(")content(Checking %s...)delimiter(")> operator(%) ident(fn)

            keyword(try)operator(:)
                ident(f) operator(=) predefined(open)operator(()ident(fn)operator(,) string<delimiter(')content(r)delimiter(')>operator(\))
                ident(lines) operator(=) predefined(list)operator(()ident(f)operator(\))
            keyword(except) operator(()exception(IOError)operator(,) exception(OSError)operator(\))operator(,) ident(err)operator(:)
                keyword(print) string<delimiter(")content(%s: cannot open: %s)delimiter(")> operator(%) operator(()ident(fn)operator(,) ident(err)operator(\))
                ident(num) operator(+=) integer(1)
                keyword(continue)

            keyword(for) ident(checker) keyword(in) ident(checkerlist)operator(:)
                keyword(if) keyword(not) ident(in_pocoo_pkg) keyword(and) ident(checker)operator(.)ident(only_pkg)operator(:)
                    keyword(continue)
                keyword(for) ident(lno)operator(,) ident(msg) keyword(in) ident(checker)operator(()ident(fn)operator(,) ident(lines)operator(\))operator(:)
                    keyword(print) operator(>>)ident(out)operator(,) string<delimiter(")content(%s:%d: %s)delimiter(")> operator(%) operator(()ident(fn)operator(,) ident(lno)operator(,) ident(msg)operator(\))
                    ident(num) operator(+=) integer(1)
    keyword(if) ident(verbose)operator(:)
        keyword(print)
    keyword(if) ident(num) operator(==) integer(0)operator(:)
        keyword(print) string<delimiter(")content(No errors found.)delimiter(")>
    keyword(else)operator(:)
        keyword(print) ident(out)operator(.)ident(getvalue)operator(()operator(\))operator(.)ident(rstrip)operator(()string<delimiter(')char(\\n)delimiter(')>operator(\))
        keyword(print) string<delimiter(")content(%d error%s found.)delimiter(")> operator(%) operator(()ident(num)operator(,) ident(num) operator(>) integer(1) keyword(and) string<delimiter(")content(s)delimiter(")> keyword(or) string<delimiter(")delimiter(")>operator(\))
    keyword(return) predefined(int)operator(()ident(num) operator(>) integer(0)operator(\))


keyword(if) ident(__name__) operator(==) string<delimiter(')content(__main__)delimiter(')>operator(:)
    ident(sys)operator(.)ident(exit)operator(()ident(main)operator(()ident(sys)operator(.)ident(argv)operator(\))operator(\))
keyword(import) include(sys)

keyword(from) include(pygments.lexers) keyword(import) include(get_all_lexers)operator(,) include(find_lexer_class)
keyword(from) include(pygments.lexer) keyword(import) include(Lexer)

keyword(def) method(main)operator(()operator(\))operator(:)
    ident(uses) operator(=) operator({)operator(})

    keyword(for) ident(name)operator(,) ident(aliases)operator(,) ident(filenames)operator(,) ident(mimetypes) keyword(in) ident(get_all_lexers)operator(()operator(\))operator(:)
        ident(cls) operator(=) ident(find_lexer_class)operator(()ident(name)operator(\))
        keyword(for) ident(f) keyword(in) ident(filenames)operator(:)
            keyword(if) ident(f) keyword(not) keyword(in) ident(uses)operator(:)
                ident(uses)operator([)ident(f)operator(]) operator(=) operator([)operator(])
            ident(uses)operator([)ident(f)operator(])operator(.)ident(append)operator(()ident(cls)operator(\))

    ident(ret) operator(=) integer(0)
    keyword(for) ident(k)operator(,) ident(v) keyword(in) ident(uses)operator(.)ident(iteritems)operator(()operator(\))operator(:)
        keyword(if) predefined(len)operator(()ident(v)operator(\)) operator(>) integer(1)operator(:)
            comment(#print "Multiple for", k, v)
            keyword(for) ident(i) keyword(in) ident(v)operator(:)
                keyword(if) ident(i)operator(.)ident(analyse_text) keyword(is) predefined_constant(None)operator(:)
                    keyword(print) ident(i)operator(,) string<delimiter(")content(has a None analyse_text)delimiter(")>
                    ident(ret) operator(|=) integer(1)
                keyword(elif) ident(Lexer)operator(.)ident(analyse_text)operator(.)ident(__doc__) operator(==) ident(i)operator(.)ident(analyse_text)operator(.)ident(__doc__)operator(:)
                    keyword(print) ident(i)operator(,) string<delimiter(")content(needs analyse_text, multiple lexers for)delimiter(")>operator(,) ident(k)
                    ident(ret) operator(|=) integer(2)
    keyword(return) ident(ret)

keyword(if) ident(__name__) operator(==) string<delimiter(')content(__main__)delimiter(')>operator(:)
    ident(sys)operator(.)ident(exit)operator(()ident(main)operator(()operator(\))operator(\))
comment(#!/usr/bin/env python)
comment(# -*- coding: utf-8 -*-)
docstring<delimiter(""")content(
)content(    Codetags finder)content(
)content(    ~~~~~~~~~~~~~~~)content(
)content(
)content(    Find code tags in specified files and/or directories)content(
)content(    and create a report in HTML format.)content(
)content(
)content(    :copyright: Copyright 2006-2009 by the Pygments team, see AUTHORS.)content(
)content(    :license: BSD, see LICENSE for details.)content(
)delimiter(""")>

keyword(import) include(sys)operator(,) include(os)operator(,) include(re)
keyword(import) include(getopt)
keyword(from) include(os.path) keyword(import) include(join)operator(,) include(abspath)operator(,) include(isdir)operator(,) include(isfile)


ident(TAGS) operator(=) predefined(set)operator(()operator(()string<delimiter(')content(XXX)delimiter(')>operator(,) string<delimiter(')content(TODO)delimiter(')>operator(,) string<delimiter(')content(FIXME)delimiter(')>operator(,) string<delimiter(')content(HACK)delimiter(')>operator(\))operator(\))

ident(tag_re) operator(=) ident(re)operator(.)ident(compile)operator(()
    string<modifier(r)delimiter(')content((?P<tag>)content(\\b)delimiter(')> operator(+) string<modifier(r)delimiter(')content(\\b)content(|)content(\\b)delimiter(')>operator(.)ident(join)operator(()ident(TAGS)operator(\)) operator(+) string<modifier(r)delimiter(')content(\\b)content(\))content(\\s)content(*)delimiter(')>
    string<modifier(r)delimiter(')content((?: )content(\\()content( (?P<who> .*? \) )content(\\\))content( \)?)delimiter(')>
    string<modifier(r)delimiter(')content(\\s)content(*:?)content(\\s)content(* (?P<what> .*? \) )content(\\s)content(* $)delimiter(')>operator(,)
    ident(re)operator(.)ident(X)operator(\))

ident(binary_re) operator(=) ident(re)operator(.)ident(compile)operator(()string<delimiter(')content([)char(\\x00)content(-)char(\\x06)char(\\x0E)content(-)char(\\x1F)content(])delimiter(')>operator(\))


keyword(def) method(escape_html)operator(()ident(text)operator(\))operator(:)
    keyword(return) ident(text)operator(.)ident(replace)operator(()string<delimiter(')content(&)delimiter(')>operator(,) string<delimiter(')content(&amp;)delimiter(')>operator(\))operator(.) \
                ident(replace)operator(()string<delimiter(')content(<)delimiter(')>operator(,) string<delimiter(')content(&lt;)delimiter(')>operator(\))operator(.)  \
                ident(replace)operator(()string<delimiter(')content(>)delimiter(')>operator(,) string<delimiter(')content(&gt;)delimiter(')>operator(\))operator(.)  \
                ident(replace)operator(()string<delimiter(')content(")delimiter(')>operator(,) string<delimiter(')content(&quot;)delimiter(')>operator(\))

keyword(def) method(process_file)operator(()ident(store)operator(,) ident(filename)operator(\))operator(:)
    keyword(try)operator(:)
        ident(f) operator(=) predefined(open)operator(()ident(filename)operator(,) string<delimiter(')content(r)delimiter(')>operator(\))
    keyword(except) operator(()exception(IOError)operator(,) exception(OSError)operator(\))operator(:)
        keyword(return) predefined_constant(False)
    ident(llmatch) operator(=) integer(0)
    keyword(try)operator(:)
        keyword(for) ident(lno)operator(,) ident(line) keyword(in) predefined(enumerate)operator(()ident(f)operator(\))operator(:)
            comment(# just some random heuristics to filter out binary files)
            keyword(if) ident(lno) operator(<) integer(100) keyword(and) ident(binary_re)operator(.)ident(search)operator(()ident(line)operator(\))operator(:)
                keyword(return) predefined_constant(False)
            ident(m) operator(=) ident(tag_re)operator(.)ident(search)operator(()ident(line)operator(\))
            keyword(if) ident(m)operator(:)
                ident(store)operator(.)ident(setdefault)operator(()ident(filename)operator(,) operator([)operator(])operator(\))operator(.)ident(append)operator(()operator({)
                    string<delimiter(')content(lno)delimiter(')>operator(:)  ident(lno)operator(+)integer(1)operator(,)
                    string<delimiter(')content(tag)delimiter(')>operator(:)  ident(m)operator(.)ident(group)operator(()string<delimiter(')content(tag)delimiter(')>operator(\))operator(,)
                    string<delimiter(')content(who)delimiter(')>operator(:)  ident(m)operator(.)ident(group)operator(()string<delimiter(')content(who)delimiter(')>operator(\)) keyword(or) string<delimiter(')delimiter(')>operator(,)
                    string<delimiter(')content(what)delimiter(')>operator(:) ident(escape_html)operator(()ident(m)operator(.)ident(group)operator(()string<delimiter(')content(what)delimiter(')>operator(\))operator(\))operator(,)
                operator(})operator(\))
                comment(# 'what' cannot start at column 0)
                ident(llmatch) operator(=) ident(m)operator(.)ident(start)operator(()string<delimiter(')content(what)delimiter(')>operator(\))
            keyword(elif) ident(llmatch)operator(:)
                comment(# continuation lines)
                comment(# XXX: this is Python centric, doesn't work for)
                comment(#      JavaScript, for example.)
                keyword(if) ident(line)operator([)operator(:)ident(llmatch)operator(])operator(.)ident(replace)operator(()string<delimiter(')content(#)delimiter(')>operator(,) string<delimiter(')delimiter(')>operator(\))operator(.)ident(isspace)operator(()operator(\))operator(:)
                    ident(cont) operator(=) ident(line)operator([)ident(llmatch)operator(:)operator(])operator(.)ident(strip)operator(()operator(\))
                    keyword(if) ident(cont)operator(:)
                        ident(store)operator([)ident(filename)operator(])operator([)operator(-)integer(1)operator(])operator([)string<delimiter(')content(what)delimiter(')>operator(]) operator(+=) string<delimiter(')content( )delimiter(')> operator(+) ident(escape_html)operator(()ident(cont)operator(\))
                        keyword(continue)
                ident(llmatch) operator(=) integer(0)
        keyword(return) predefined_constant(True)
    keyword(finally)operator(:)
        ident(f)operator(.)ident(close)operator(()operator(\))


keyword(def) method(main)operator(()operator(\))operator(:)
    keyword(try)operator(:)
        ident(gopts)operator(,) ident(args) operator(=) ident(getopt)operator(.)ident(getopt)operator(()ident(sys)operator(.)ident(argv)operator([)integer(1)operator(:)operator(])operator(,) string<delimiter(")content(vo:i:)delimiter(")>operator(\))
    keyword(except) ident(getopt)operator(.)ident(GetoptError)operator(:)
        keyword(print) operator(()string<delimiter(")content(Usage: %s [-v] [-i ignoredir]* [-o reportfile.html] )delimiter(")>
               string<delimiter(")content(path ...)delimiter(")> operator(%) ident(sys)operator(.)ident(argv)operator([)integer(0)operator(])operator(\))
        keyword(return) integer(2)
    ident(opts) operator(=) operator({)operator(})
    keyword(for) ident(opt)operator(,) ident(val) keyword(in) ident(gopts)operator(:)
        keyword(if) ident(opt) operator(==) string<delimiter(')content(-i)delimiter(')>operator(:)
            ident(val) operator(=) ident(abspath)operator(()ident(val)operator(\))
        ident(opts)operator(.)ident(setdefault)operator(()ident(opt)operator(,) operator([)operator(])operator(\))operator(.)ident(append)operator(()ident(val)operator(\))

    keyword(if) keyword(not) ident(args)operator(:)
        ident(args) operator(=) operator([)string<delimiter(')content(.)delimiter(')>operator(])

    keyword(if) string<delimiter(')content(-o)delimiter(')> keyword(in) ident(opts)operator(:)
        ident(output) operator(=) ident(abspath)operator(()ident(opts)operator([)string<delimiter(')content(-o)delimiter(')>operator(])operator([)operator(-)integer(1)operator(])operator(\))
    keyword(else)operator(:)
        ident(output) operator(=) ident(abspath)operator(()string<delimiter(')content(tags.html)delimiter(')>operator(\))

    ident(verbose) operator(=) string<delimiter(')content(-v)delimiter(')> keyword(in) ident(opts)

    ident(store) operator(=) operator({)operator(})
    ident(gnum) operator(=) integer(0)
    ident(num) operator(=) integer(0)

    keyword(for) ident(path) keyword(in) ident(args)operator(:)
        keyword(print) string<delimiter(")content(Searching for code tags in %s, please wait.)delimiter(")> operator(%) ident(path)

        keyword(if) ident(isfile)operator(()ident(path)operator(\))operator(:)
            ident(gnum) operator(+=) integer(1)
            keyword(if) ident(process_file)operator(()ident(store)operator(,) ident(path)operator(\))operator(:)
                keyword(if) ident(verbose)operator(:)
                    keyword(print) ident(path) operator(+) string<delimiter(")content(: found %d tags)delimiter(")> operator(%) \
                        operator(()ident(path) keyword(in) ident(store) keyword(and) predefined(len)operator(()ident(store)operator([)ident(path)operator(])operator(\)) keyword(or) integer(0)operator(\))
                ident(num) operator(+=) integer(1)
            keyword(else)operator(:)
                keyword(if) ident(verbose)operator(:)
                    keyword(print) ident(path) operator(+) string<delimiter(")content(: binary or not readable)delimiter(")>
            keyword(continue)
        keyword(elif) keyword(not) ident(isdir)operator(()ident(path)operator(\))operator(:)
            keyword(continue)

        keyword(for) ident(root)operator(,) ident(dirs)operator(,) ident(files) keyword(in) ident(os)operator(.)ident(walk)operator(()ident(path)operator(\))operator(:)
            keyword(if) string<delimiter(')content(-i)delimiter(')> keyword(in) ident(opts) keyword(and) ident(abspath)operator(()ident(root)operator(\)) keyword(in) ident(opts)operator([)string<delimiter(')content(-i)delimiter(')>operator(])operator(:)
                keyword(del) ident(dirs)operator([)operator(:)operator(])
                keyword(continue)
            keyword(if) string<delimiter(')content(.svn)delimiter(')> keyword(in) ident(dirs)operator(:)
                ident(dirs)operator(.)ident(remove)operator(()string<delimiter(')content(.svn)delimiter(')>operator(\))
            keyword(for) ident(fn) keyword(in) ident(files)operator(:)
                ident(gnum) operator(+=) integer(1)
                keyword(if) ident(gnum) operator(%) integer(50) operator(==) integer(0) keyword(and) keyword(not) ident(verbose)operator(:)
                    ident(sys)operator(.)ident(stdout)operator(.)ident(write)operator(()string<delimiter(')content(.)delimiter(')>operator(\))
                    ident(sys)operator(.)ident(stdout)operator(.)ident(flush)operator(()operator(\))

                ident(fn) operator(=) ident(join)operator(()ident(root)operator(,) ident(fn)operator(\))

                keyword(if) ident(fn)operator(.)ident(endswith)operator(()string<delimiter(')content(.pyc)delimiter(')>operator(\)) keyword(or) ident(fn)operator(.)ident(endswith)operator(()string<delimiter(')content(.pyo)delimiter(')>operator(\))operator(:)
                    keyword(continue)
                keyword(elif) string<delimiter(')content(-i)delimiter(')> keyword(in) ident(opts) keyword(and) ident(abspath)operator(()ident(fn)operator(\)) keyword(in) ident(opts)operator([)string<delimiter(')content(-i)delimiter(')>operator(])operator(:)
                    keyword(continue)
                keyword(elif) ident(abspath)operator(()ident(fn)operator(\)) operator(==) ident(output)operator(:)
                    keyword(continue)

                keyword(if) ident(fn)operator([)operator(:)integer(2)operator(]) operator(==) string<delimiter(')content(./)delimiter(')>operator(:) ident(fn) operator(=) ident(fn)operator([)integer(2)operator(:)operator(])
                keyword(if) ident(process_file)operator(()ident(store)operator(,) ident(fn)operator(\))operator(:)
                    keyword(if) ident(verbose)operator(:)
                        keyword(print) ident(fn) operator(+) string<delimiter(")content(: found %d tags)delimiter(")> operator(%) \
                            operator(()ident(fn) keyword(in) ident(store) keyword(and) predefined(len)operator(()ident(store)operator([)ident(fn)operator(])operator(\)) keyword(or) integer(0)operator(\))
                    ident(num) operator(+=) integer(1)
                keyword(else)operator(:)
                    keyword(if) ident(verbose)operator(:)
                        keyword(print) ident(fn) operator(+) string<delimiter(")content(: binary or not readable)delimiter(")>
        keyword(print)

    keyword(print) string<delimiter(")content(Processed %d of %d files. Found %d tags in %d files.)delimiter(")> operator(%) operator(()
        ident(num)operator(,) ident(gnum)operator(,) predefined(sum)operator(()predefined(len)operator(()ident(fitem)operator(\)) keyword(for) ident(fitem) keyword(in) ident(store)operator(.)ident(itervalues)operator(()operator(\))operator(\))operator(,) predefined(len)operator(()ident(store)operator(\))operator(\))

    keyword(if) keyword(not) ident(store)operator(:)
        keyword(return) integer(0)

    ident(HTML) operator(=) string<delimiter(''')char(\\
)content(<html>)content(
)content(<head>)content(
)content(<title>Code tags report</title>)content(
)content(<style type="text/css">)content(
)content(body { font-family: Trebuchet MS,Verdana,sans-serif;)content(
)content(       width: 80%%; margin-left: auto; margin-right: auto; })content(
)content(table { width: 100%%; border-spacing: 0;)content(
)content(        border: 1px solid #CCC; })content(
)content(th { font-weight: bold; background-color: #DDD })content(
)content(td { padding: 2px 5px 2px 5px;)content(
)content(     vertical-align: top; })content(
)content(.tr0 { background-color: #EEEEEE; })content(
)content(.tr1 { background-color: #F6F6F6; })content(
)content(.tag { text-align: center; font-weight: bold; })content(
)content(.tr0 .tag { background-color: #FFEEEE; })content(
)content(.tr1 .tag { background-color: #FFDDDD; })content(
)content(.head { padding-top: 10px; font-size: 100%%; font-weight: bold })content(
)content(.XXX { color: #500; })content(
)content(.FIXME { color: red; })content(
)content(.TODO { color: #880; })content(
)content(</style>)content(
)content(</head>)content(
)content(<body>)content(
)content(<h1>Code tags report for %s</h1>)content(
)content(<table>)content(
)content(<tr><th>Line</th><th>Tag</th><th>Who</th><th>Description</th></tr>)content(
)content(%s)content(
)content(</table>)content(
)content(</body>)content(
)content(</html>)content(
)delimiter(''')>

    ident(TABLE) operator(=) string<delimiter(')char(\\n)content(<tr><td class="head" colspan="4">File: %s</td>)char(\\n)delimiter(')>

    ident(TR) operator(=) operator(()string<delimiter(')content(<tr class="tr%d"><td class="lno">%%(lno\)d</td>)delimiter(')>
          string<delimiter(')content(<td class="tag %%(tag\)s">%%(tag\)s</td>)delimiter(')>
          string<delimiter(')content(<td class="who">%%(who\)s</td><td class="what">%%(what\)s</td></tr>)delimiter(')>operator(\))

    ident(f) operator(=) predefined(file)operator(()ident(output)operator(,) string<delimiter(')content(w)delimiter(')>operator(\))
    ident(table) operator(=) string<delimiter(')char(\\n)delimiter(')>operator(.)ident(join)operator(()ident(TABLE) operator(%) ident(fname) operator(+)
                      string<delimiter(')char(\\n)delimiter(')>operator(.)ident(join)operator(()ident(TR) operator(%) operator(()ident(no) operator(%) integer(2)operator(,)operator(\)) operator(%) ident(entry)
                                keyword(for) ident(no)operator(,) ident(entry) keyword(in) predefined(enumerate)operator(()ident(store)operator([)ident(fname)operator(])operator(\))operator(\))
                      keyword(for) ident(fname) keyword(in) predefined(sorted)operator(()ident(store)operator(\))operator(\))
    ident(f)operator(.)ident(write)operator(()ident(HTML) operator(%) operator(()string<delimiter(')content(, )delimiter(')>operator(.)ident(join)operator(()predefined(map)operator(()ident(abspath)operator(,) ident(args)operator(\))operator(\))operator(,) ident(table)operator(\))operator(\))
    ident(f)operator(.)ident(close)operator(()operator(\))

    keyword(print) string<delimiter(")content(Report written to %s.)delimiter(")> operator(%) ident(output)
    keyword(return) integer(0)

keyword(if) ident(__name__) operator(==) string<delimiter(')content(__main__)delimiter(')>operator(:)
    ident(sys)operator(.)ident(exit)operator(()ident(main)operator(()operator(\))operator(\))
comment(#!/usr/bin/python)
comment(# -*- coding: utf-8 -*-)
docstring<delimiter(""")content(
)content(    Lexing error finder)content(
)content(    ~~~~~~~~~~~~~~~~~~~)content(
)content(
)content(    For the source files given on the command line, display)content(
)content(    the text where Error tokens are being generated, along)content(
)content(    with some context.)content(
)content(
)content(    :copyright: Copyright 2006-2009 by the Pygments team, see AUTHORS.)content(
)content(    :license: BSD, see LICENSE for details.)content(
)delimiter(""")>

keyword(import) include(sys)operator(,) include(os)

keyword(try)operator(:)
    keyword(import) include(pygments)
keyword(except) exception(ImportError)operator(:)
    comment(# try parent path)
    ident(sys)operator(.)ident(path)operator(.)ident(append)operator(()ident(os)operator(.)ident(path)operator(.)ident(join)operator(()ident(os)operator(.)ident(path)operator(.)ident(dirname)operator(()ident(__file__)operator(\))operator(,) string<delimiter(")content(..)delimiter(")>operator(\))operator(\))

keyword(from) include(pygments) keyword(import) include(highlight)
keyword(from) include(pygments.lexers) keyword(import) include(get_lexer_for_filename)operator(,) include(get_lexer_by_name)
keyword(from) include(pygments.token) keyword(import) include(Error)

keyword(def) method(main)operator(()ident(fn)operator(\))operator(:)
    keyword(try)operator(:)
        ident(lx) operator(=) ident(get_lexer_for_filename)operator(()ident(fn)operator(\))
    keyword(except) exception(ValueError)operator(:)
        keyword(try)operator(:)
            ident(name)operator(,) ident(rest) operator(=) ident(fn)operator(.)ident(split)operator(()string<delimiter(")content(_)delimiter(")>operator(,) integer(1)operator(\))
            ident(lx) operator(=) ident(get_lexer_by_name)operator(()ident(name)operator(\))
        keyword(except) exception(ValueError)operator(:)
            keyword(raise) exception(AssertionError)operator(()string<delimiter(')content(no lexer found for file %r)delimiter(')> operator(%) ident(fn)operator(\))
    ident(text) operator(=) predefined(file)operator(()ident(fn)operator(,) string<delimiter(')content(U)delimiter(')>operator(\))operator(.)ident(read)operator(()operator(\))
    ident(text) operator(=) ident(text)operator(.)ident(strip)operator(()string<delimiter(')char(\\n)delimiter(')>operator(\)) operator(+) string<delimiter(')char(\\n)delimiter(')>
    ident(text) operator(=) ident(text)operator(.)ident(decode)operator(()string<delimiter(')content(latin1)delimiter(')>operator(\))
    ident(ntext) operator(=) operator([)operator(])
    keyword(for) predefined(type)operator(,) ident(val) keyword(in) ident(lx)operator(.)ident(get_tokens)operator(()ident(text)operator(\))operator(:)
        keyword(if) ident(type) operator(==) ident(Error)operator(:)
            keyword(print) string<delimiter(")content(Error parsing)delimiter(")>operator(,) ident(fn)
            keyword(print) string<delimiter(")char(\\n)delimiter(")>operator(.)ident(join)operator(()operator([)string<delimiter(')content(   )delimiter(')> operator(+) predefined(repr)operator(()ident(x)operator(\)) keyword(for) ident(x) keyword(in) ident(ntext)operator([)operator(-)ident(num)operator(:)operator(])operator(])operator(\))
            keyword(print) operator(`)ident(val)operator(`) operator(+) string<delimiter(")content(<<<)delimiter(")>
            keyword(return) integer(1)
        ident(ntext)operator(.)ident(append)operator(()operator(()predefined(type)operator(,)ident(val)operator(\))operator(\))
    keyword(return) integer(0)


ident(num) operator(=) integer(10)

keyword(if) ident(__name__) operator(==) string<delimiter(")content(__main__)delimiter(")>operator(:)
    keyword(if) ident(sys)operator(.)ident(argv)operator([)integer(1)operator(])operator([)operator(:)integer(2)operator(]) operator(==) string<delimiter(')content(-n)delimiter(')>operator(:)
        ident(num) operator(=) predefined(int)operator(()ident(sys)operator(.)ident(argv)operator([)integer(1)operator(])operator([)integer(2)operator(:)operator(])operator(\))
        keyword(del) ident(sys)operator(.)ident(argv)operator([)integer(1)operator(])
    ident(ret) operator(=) integer(0)
    keyword(for) ident(f) keyword(in) ident(sys)operator(.)ident(argv)operator([)integer(1)operator(:)operator(])operator(:)
        ident(ret) operator(+=) ident(main)operator(()ident(f)operator(\))
    ident(sys)operator(.)ident(exit)operator(()predefined(bool)operator(()ident(ret)operator(\))operator(\))
keyword(import) include(re)
keyword(from) include(pprint) keyword(import) include(pprint)

ident(r_line) operator(=) ident(re)operator(.)ident(compile)operator(()string<modifier(r)delimiter(")content(^(syn keyword vimCommand contained|syn keyword vimOption )delimiter(")>
                    string<modifier(r)delimiter(")content(contained|syn keyword vimAutoEvent contained\))content(\\s)content(+(.*\))delimiter(")>operator(\))
ident(r_item) operator(=) ident(re)operator(.)ident(compile)operator(()string<modifier(r)delimiter(")content(()content(\\w)content(+\)(?:)content(\\[)content(()content(\\w)content(+\))content(\\])content(\)?)delimiter(")>operator(\))

keyword(def) method(getkw)operator(()predefined(input)operator(,) ident(output)operator(\))operator(:)
    ident(out) operator(=) predefined(file)operator(()ident(output)operator(,) string<delimiter(')content(w)delimiter(')>operator(\))

    ident(output_info) operator(=) operator({)string<delimiter(')content(command)delimiter(')>operator(:) operator([)operator(])operator(,) string<delimiter(')content(option)delimiter(')>operator(:) operator([)operator(])operator(,) string<delimiter(')content(auto)delimiter(')>operator(:) operator([)operator(])operator(})
    keyword(for) ident(line) keyword(in) predefined(file)operator(()predefined(input)operator(\))operator(:)
        ident(m) operator(=) ident(r_line)operator(.)ident(match)operator(()ident(line)operator(\))
        keyword(if) ident(m)operator(:)
            comment(# Decide which output gets mapped to d)
            keyword(if) string<delimiter(')content(vimCommand)delimiter(')> keyword(in) ident(m)operator(.)ident(group)operator(()integer(1)operator(\))operator(:)
                ident(d) operator(=) ident(output_info)operator([)string<delimiter(')content(command)delimiter(')>operator(])
            keyword(elif) string<delimiter(')content(AutoEvent)delimiter(')> keyword(in) ident(m)operator(.)ident(group)operator(()integer(1)operator(\))operator(:)
                ident(d) operator(=) ident(output_info)operator([)string<delimiter(')content(auto)delimiter(')>operator(])
            keyword(else)operator(:)
                ident(d) operator(=) ident(output_info)operator([)string<delimiter(')content(option)delimiter(')>operator(])

            comment(# Extract all the shortened versions)
            keyword(for) ident(i) keyword(in) ident(r_item)operator(.)ident(finditer)operator(()ident(m)operator(.)ident(group)operator(()integer(2)operator(\))operator(\))operator(:)
                ident(d)operator(.)ident(append)operator(()operator(()ident(i)operator(.)ident(group)operator(()integer(1)operator(\))operator(,) string<delimiter(")content(%s%s)delimiter(")> operator(%) operator(()ident(i)operator(.)ident(group)operator(()integer(1)operator(\))operator(,) ident(i)operator(.)ident(group)operator(()integer(2)operator(\)) keyword(or) string<delimiter(')delimiter(')>operator(\))operator(\))operator(\))
            ident(d)operator(.)ident(sort)operator(()operator(\))

    keyword(for) ident(a)operator(,) ident(b) keyword(in) ident(output_info)operator(.)ident(items)operator(()operator(\))operator(:)
        keyword(print) operator(>>)ident(out)operator(,) string<delimiter(')content(%s=%r)delimiter(')> operator(%) operator(()ident(a)operator(,) ident(b)operator(\))

keyword(def) method(is_keyword)operator(()ident(w)operator(,) ident(keywords)operator(\))operator(:)
    keyword(for) ident(i) keyword(in) predefined(range)operator(()predefined(len)operator(()ident(w)operator(\))operator(,) integer(0)operator(,) operator(-)integer(1)operator(\))operator(:)
        keyword(if) ident(w)operator([)operator(:)ident(i)operator(]) keyword(in) ident(keywords)operator(:)
            keyword(return) ident(signals)operator([)ident(w)operator([)operator(:)ident(i)operator(])operator(])operator([)operator(:)predefined(len)operator(()ident(w)operator(\))operator(]) operator(==) ident(w)
    keyword(return) predefined_constant(False)

keyword(if) ident(__name__) operator(==) string<delimiter(")content(__main__)delimiter(")>operator(:)
    ident(getkw)operator(()string<delimiter(")content(/usr/share/vim/vim70/syntax/vim.vim)delimiter(")>operator(,) string<delimiter(")content(temp.py)delimiter(")>operator(\))
comment(#! /usr/bin/env python)

comment(# Released to the public domain, by Tim Peters, 03 October 2000.)
comment(# -B option added by Georg Brandl, 2006.)

docstring<delimiter(""")content(reindent [-d][-r][-v] [ path ... ])content(
)content(
)content(-d (--dryrun\)  Dry run.  Analyze, but don't make any changes to files.)content(
)content(-r (--recurse\) Recurse.  Search for all .py files in subdirectories too.)content(
)content(-B (--no-backup\)         Don't write .bak backup files.)content(
)content(-v (--verbose\) Verbose.  Print informative msgs; else only names of changed files.)content(
)content(-h (--help\)    Help.     Print this usage information and exit.)content(
)content(
)content(Change Python (.py\) files to use 4-space indents and no hard tab characters.)content(
)content(Also trim excess spaces and tabs from ends of lines, and remove empty lines)content(
)content(at the end of files.  Also ensure the last line ends with a newline.)content(
)content(
)content(If no paths are given on the command line, reindent operates as a filter,)content(
)content(reading a single source file from standard input and writing the transformed)content(
)content(source to standard output.  In this case, the -d, -r and -v flags are)content(
)content(ignored.)content(
)content(
)content(You can pass one or more file and/or directory paths.  When a directory)content(
)content(path, all .py files within the directory will be examined, and, if the -r)content(
)content(option is given, likewise recursively for subdirectories.)content(
)content(
)content(If output is not to standard output, reindent overwrites files in place,)content(
)content(renaming the originals with a .bak extension.  If it finds nothing to)content(
)content(change, the file is left alone.  If reindent does change a file, the changed)content(
)content(file is a fixed-point for future runs (i.e., running reindent on the)content(
)content(resulting .py file won't change it again\).)content(
)content(
)content(The hard part of reindenting is figuring out what to do with comment)content(
)content(lines.  So long as the input files get a clean bill of health from)content(
)content(tabnanny.py, reindent should do a good job.)content(
)delimiter(""")>

ident(__version__) operator(=) string<delimiter(")content(1)delimiter(")>

keyword(import) include(tokenize)
keyword(import) include(os)
keyword(import) include(sys)

ident(verbose) operator(=) integer(0)
ident(recurse) operator(=) integer(0)
ident(dryrun)  operator(=) integer(0)
ident(no_backup) operator(=) integer(0)

keyword(def) method(usage)operator(()ident(msg)operator(=)predefined_constant(None)operator(\))operator(:)
    keyword(if) ident(msg) keyword(is) keyword(not) predefined_constant(None)operator(:)
        keyword(print) operator(>>) ident(sys)operator(.)ident(stderr)operator(,) ident(msg)
    keyword(print) operator(>>) ident(sys)operator(.)ident(stderr)operator(,) ident(__doc__)

keyword(def) method(errprint)operator(()operator(*)ident(args)operator(\))operator(:)
    ident(sep) operator(=) string<delimiter(")delimiter(")>
    keyword(for) ident(arg) keyword(in) ident(args)operator(:)
        ident(sys)operator(.)ident(stderr)operator(.)ident(write)operator(()ident(sep) operator(+) predefined(str)operator(()ident(arg)operator(\))operator(\))
        ident(sep) operator(=) string<delimiter(")content( )delimiter(")>
    ident(sys)operator(.)ident(stderr)operator(.)ident(write)operator(()string<delimiter(")char(\\n)delimiter(")>operator(\))

keyword(def) method(main)operator(()operator(\))operator(:)
    keyword(import) include(getopt)
    keyword(global) ident(verbose)operator(,) ident(recurse)operator(,) ident(dryrun)operator(,) ident(no_backup)

    keyword(try)operator(:)
        ident(opts)operator(,) ident(args) operator(=) ident(getopt)operator(.)ident(getopt)operator(()ident(sys)operator(.)ident(argv)operator([)integer(1)operator(:)operator(])operator(,) string<delimiter(")content(drvhB)delimiter(")>operator(,)
                                   operator([)string<delimiter(")content(dryrun)delimiter(")>operator(,) string<delimiter(")content(recurse)delimiter(")>operator(,) string<delimiter(")content(verbose)delimiter(")>operator(,) string<delimiter(")content(help)delimiter(")>operator(,)
                                    string<delimiter(")content(no-backup)delimiter(")>operator(])operator(\))
    keyword(except) ident(getopt)operator(.)ident(error)operator(,) ident(msg)operator(:)
        ident(usage)operator(()ident(msg)operator(\))
        keyword(return)
    keyword(for) ident(o)operator(,) ident(a) keyword(in) ident(opts)operator(:)
        keyword(if) ident(o) keyword(in) operator(()string<delimiter(')content(-d)delimiter(')>operator(,) string<delimiter(')content(--dryrun)delimiter(')>operator(\))operator(:)
            ident(dryrun) operator(+=) integer(1)
        keyword(elif) ident(o) keyword(in) operator(()string<delimiter(')content(-r)delimiter(')>operator(,) string<delimiter(')content(--recurse)delimiter(')>operator(\))operator(:)
            ident(recurse) operator(+=) integer(1)
        keyword(elif) ident(o) keyword(in) operator(()string<delimiter(')content(-v)delimiter(')>operator(,) string<delimiter(')content(--verbose)delimiter(')>operator(\))operator(:)
            ident(verbose) operator(+=) integer(1)
        keyword(elif) ident(o) keyword(in) operator(()string<delimiter(')content(-B)delimiter(')>operator(,) string<delimiter(')content(--no-backup)delimiter(')>operator(\))operator(:)
            ident(no_backup) operator(+=) integer(1)
        keyword(elif) ident(o) keyword(in) operator(()string<delimiter(')content(-h)delimiter(')>operator(,) string<delimiter(')content(--help)delimiter(')>operator(\))operator(:)
            ident(usage)operator(()operator(\))
            keyword(return)
    keyword(if) keyword(not) ident(args)operator(:)
        ident(r) operator(=) ident(Reindenter)operator(()ident(sys)operator(.)ident(stdin)operator(\))
        ident(r)operator(.)ident(run)operator(()operator(\))
        ident(r)operator(.)ident(write)operator(()ident(sys)operator(.)ident(stdout)operator(\))
        keyword(return)
    keyword(for) ident(arg) keyword(in) ident(args)operator(:)
        ident(check)operator(()ident(arg)operator(\))

keyword(def) method(check)operator(()predefined(file)operator(\))operator(:)
    keyword(if) ident(os)operator(.)ident(path)operator(.)ident(isdir)operator(()predefined(file)operator(\)) keyword(and) keyword(not) ident(os)operator(.)ident(path)operator(.)ident(islink)operator(()predefined(file)operator(\))operator(:)
        keyword(if) ident(verbose)operator(:)
            keyword(print) string<delimiter(")content(listing directory)delimiter(")>operator(,) predefined(file)
        ident(names) operator(=) ident(os)operator(.)ident(listdir)operator(()predefined(file)operator(\))
        keyword(for) ident(name) keyword(in) ident(names)operator(:)
            ident(fullname) operator(=) ident(os)operator(.)ident(path)operator(.)ident(join)operator(()predefined(file)operator(,) ident(name)operator(\))
            keyword(if) operator(()operator(()ident(recurse) keyword(and) ident(os)operator(.)ident(path)operator(.)ident(isdir)operator(()ident(fullname)operator(\)) keyword(and)
                 keyword(not) ident(os)operator(.)ident(path)operator(.)ident(islink)operator(()ident(fullname)operator(\))operator(\))
                keyword(or) ident(name)operator(.)ident(lower)operator(()operator(\))operator(.)ident(endswith)operator(()string<delimiter(")content(.py)delimiter(")>operator(\))operator(\))operator(:)
                ident(check)operator(()ident(fullname)operator(\))
        keyword(return)

    keyword(if) ident(verbose)operator(:)
        keyword(print) string<delimiter(")content(checking)delimiter(")>operator(,) predefined(file)operator(,) string<delimiter(")content(...)delimiter(")>operator(,)
    keyword(try)operator(:)
        ident(f) operator(=) predefined(open)operator(()predefined(file)operator(\))
    keyword(except) exception(IOError)operator(,) ident(msg)operator(:)
        ident(errprint)operator(()string<delimiter(")content(%s: I/O Error: %s)delimiter(")> operator(%) operator(()predefined(file)operator(,) predefined(str)operator(()ident(msg)operator(\))operator(\))operator(\))
        keyword(return)

    ident(r) operator(=) ident(Reindenter)operator(()ident(f)operator(\))
    ident(f)operator(.)ident(close)operator(()operator(\))
    keyword(if) ident(r)operator(.)ident(run)operator(()operator(\))operator(:)
        keyword(if) ident(verbose)operator(:)
            keyword(print) string<delimiter(")content(changed.)delimiter(")>
            keyword(if) ident(dryrun)operator(:)
                keyword(print) string<delimiter(")content(But this is a dry run, so leaving it alone.)delimiter(")>
        keyword(else)operator(:)
            keyword(print) string<delimiter(")content(reindented)delimiter(")>operator(,) predefined(file)operator(,) operator(()ident(dryrun) keyword(and) string<delimiter(")content((dry run => not really\))delimiter(")> keyword(or) string<delimiter(")delimiter(")>operator(\))
        keyword(if) keyword(not) ident(dryrun)operator(:)
            keyword(if) keyword(not) ident(no_backup)operator(:)
                ident(bak) operator(=) predefined(file) operator(+) string<delimiter(")content(.bak)delimiter(")>
                keyword(if) ident(os)operator(.)ident(path)operator(.)ident(exists)operator(()ident(bak)operator(\))operator(:)
                    ident(os)operator(.)ident(remove)operator(()ident(bak)operator(\))
                ident(os)operator(.)ident(rename)operator(()predefined(file)operator(,) ident(bak)operator(\))
                keyword(if) ident(verbose)operator(:)
                    keyword(print) string<delimiter(")content(renamed)delimiter(")>operator(,) predefined(file)operator(,) string<delimiter(")content(to)delimiter(")>operator(,) ident(bak)
            ident(f) operator(=) predefined(open)operator(()predefined(file)operator(,) string<delimiter(")content(w)delimiter(")>operator(\))
            ident(r)operator(.)ident(write)operator(()ident(f)operator(\))
            ident(f)operator(.)ident(close)operator(()operator(\))
            keyword(if) ident(verbose)operator(:)
                keyword(print) string<delimiter(")content(wrote new)delimiter(")>operator(,) predefined(file)
    keyword(else)operator(:)
        keyword(if) ident(verbose)operator(:)
            keyword(print) string<delimiter(")content(unchanged.)delimiter(")>


keyword(class) class(Reindenter)operator(:)

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) ident(f)operator(\))operator(:)
        predefined_constant(self)operator(.)ident(find_stmt) operator(=) integer(1)  comment(# next token begins a fresh stmt?)
        predefined_constant(self)operator(.)ident(level) operator(=) integer(0)      comment(# current indent level)

        comment(# Raw file lines.)
        predefined_constant(self)operator(.)ident(raw) operator(=) ident(f)operator(.)ident(readlines)operator(()operator(\))

        comment(# File lines, rstripped & tab-expanded.  Dummy at start is so)
        comment(# that we can use tokenize's 1-based line numbering easily.)
        comment(# Note that a line is all-blank iff it's "\\n".)
        predefined_constant(self)operator(.)ident(lines) operator(=) operator([)ident(line)operator(.)ident(rstrip)operator(()string<delimiter(')char(\\n)content( )char(\\t)delimiter(')>operator(\))operator(.)ident(expandtabs)operator(()operator(\)) operator(+) string<delimiter(")char(\\n)delimiter(")>
                      keyword(for) ident(line) keyword(in) predefined_constant(self)operator(.)ident(raw)operator(])
        predefined_constant(self)operator(.)ident(lines)operator(.)ident(insert)operator(()integer(0)operator(,) predefined_constant(None)operator(\))
        predefined_constant(self)operator(.)ident(index) operator(=) integer(1)  comment(# index into self.lines of next line)

        comment(# List of (lineno, indentlevel\) pairs, one for each stmt and)
        comment(# comment line.  indentlevel is -1 for comment lines, as a)
        comment(# signal that tokenize doesn't know what to do about them;)
        comment(# indeed, they're our headache!)
        predefined_constant(self)operator(.)ident(stats) operator(=) operator([)operator(])

    keyword(def) method(run)operator(()predefined_constant(self)operator(\))operator(:)
        ident(tokenize)operator(.)ident(tokenize)operator(()predefined_constant(self)operator(.)ident(getline)operator(,) predefined_constant(self)operator(.)ident(tokeneater)operator(\))
        comment(# Remove trailing empty lines.)
        ident(lines) operator(=) predefined_constant(self)operator(.)ident(lines)
        keyword(while) ident(lines) keyword(and) ident(lines)operator([)operator(-)integer(1)operator(]) operator(==) string<delimiter(")char(\\n)delimiter(")>operator(:)
            ident(lines)operator(.)ident(pop)operator(()operator(\))
        comment(# Sentinel.)
        ident(stats) operator(=) predefined_constant(self)operator(.)ident(stats)
        ident(stats)operator(.)ident(append)operator(()operator(()predefined(len)operator(()ident(lines)operator(\))operator(,) integer(0)operator(\))operator(\))
        comment(# Map count of leading spaces to # we want.)
        ident(have2want) operator(=) operator({)operator(})
        comment(# Program after transformation.)
        ident(after) operator(=) predefined_constant(self)operator(.)ident(after) operator(=) operator([)operator(])
        comment(# Copy over initial empty lines -- there's nothing to do until)
        comment(# we see a line with *something* on it.)
        ident(i) operator(=) ident(stats)operator([)integer(0)operator(])operator([)integer(0)operator(])
        ident(after)operator(.)ident(extend)operator(()ident(lines)operator([)integer(1)operator(:)ident(i)operator(])operator(\))
        keyword(for) ident(i) keyword(in) predefined(range)operator(()predefined(len)operator(()ident(stats)operator(\))operator(-)integer(1)operator(\))operator(:)
            ident(thisstmt)operator(,) ident(thislevel) operator(=) ident(stats)operator([)ident(i)operator(])
            ident(nextstmt) operator(=) ident(stats)operator([)ident(i)operator(+)integer(1)operator(])operator([)integer(0)operator(])
            ident(have) operator(=) ident(getlspace)operator(()ident(lines)operator([)ident(thisstmt)operator(])operator(\))
            ident(want) operator(=) ident(thislevel) operator(*) integer(4)
            keyword(if) ident(want) operator(<) integer(0)operator(:)
                comment(# A comment line.)
                keyword(if) ident(have)operator(:)
                    comment(# An indented comment line.  If we saw the same)
                    comment(# indentation before, reuse what it most recently)
                    comment(# mapped to.)
                    ident(want) operator(=) ident(have2want)operator(.)ident(get)operator(()ident(have)operator(,) operator(-)integer(1)operator(\))
                    keyword(if) ident(want) operator(<) integer(0)operator(:)
                        comment(# Then it probably belongs to the next real stmt.)
                        keyword(for) ident(j) keyword(in) predefined(xrange)operator(()ident(i)operator(+)integer(1)operator(,) predefined(len)operator(()ident(stats)operator(\))operator(-)integer(1)operator(\))operator(:)
                            ident(jline)operator(,) ident(jlevel) operator(=) ident(stats)operator([)ident(j)operator(])
                            keyword(if) ident(jlevel) operator(>=) integer(0)operator(:)
                                keyword(if) ident(have) operator(==) ident(getlspace)operator(()ident(lines)operator([)ident(jline)operator(])operator(\))operator(:)
                                    ident(want) operator(=) ident(jlevel) operator(*) integer(4)
                                keyword(break)
                    keyword(if) ident(want) operator(<) integer(0)operator(:)           comment(# Maybe it's a hanging)
                                           comment(# comment like this one,)
                        comment(# in which case we should shift it like its base)
                        comment(# line got shifted.)
                        keyword(for) ident(j) keyword(in) predefined(xrange)operator(()ident(i)operator(-)integer(1)operator(,) operator(-)integer(1)operator(,) operator(-)integer(1)operator(\))operator(:)
                            ident(jline)operator(,) ident(jlevel) operator(=) ident(stats)operator([)ident(j)operator(])
                            keyword(if) ident(jlevel) operator(>=) integer(0)operator(:)
                                ident(want) operator(=) ident(have) operator(+) ident(getlspace)operator(()ident(after)operator([)ident(jline)operator(-)integer(1)operator(])operator(\)) operator(-) \
                                       ident(getlspace)operator(()ident(lines)operator([)ident(jline)operator(])operator(\))
                                keyword(break)
                    keyword(if) ident(want) operator(<) integer(0)operator(:)
                        comment(# Still no luck -- leave it alone.)
                        ident(want) operator(=) ident(have)
                keyword(else)operator(:)
                    ident(want) operator(=) integer(0)
            keyword(assert) ident(want) operator(>=) integer(0)
            ident(have2want)operator([)ident(have)operator(]) operator(=) ident(want)
            ident(diff) operator(=) ident(want) operator(-) ident(have)
            keyword(if) ident(diff) operator(==) integer(0) keyword(or) ident(have) operator(==) integer(0)operator(:)
                ident(after)operator(.)ident(extend)operator(()ident(lines)operator([)ident(thisstmt)operator(:)ident(nextstmt)operator(])operator(\))
            keyword(else)operator(:)
                keyword(for) ident(line) keyword(in) ident(lines)operator([)ident(thisstmt)operator(:)ident(nextstmt)operator(])operator(:)
                    keyword(if) ident(diff) operator(>) integer(0)operator(:)
                        keyword(if) ident(line) operator(==) string<delimiter(")char(\\n)delimiter(")>operator(:)
                            ident(after)operator(.)ident(append)operator(()ident(line)operator(\))
                        keyword(else)operator(:)
                            ident(after)operator(.)ident(append)operator(()string<delimiter(")content( )delimiter(")> operator(*) ident(diff) operator(+) ident(line)operator(\))
                    keyword(else)operator(:)
                        ident(remove) operator(=) predefined(min)operator(()ident(getlspace)operator(()ident(line)operator(\))operator(,) operator(-)ident(diff)operator(\))
                        ident(after)operator(.)ident(append)operator(()ident(line)operator([)ident(remove)operator(:)operator(])operator(\))
        keyword(return) predefined_constant(self)operator(.)ident(raw) operator(!=) predefined_constant(self)operator(.)ident(after)

    keyword(def) method(write)operator(()predefined_constant(self)operator(,) ident(f)operator(\))operator(:)
        ident(f)operator(.)ident(writelines)operator(()predefined_constant(self)operator(.)ident(after)operator(\))

    comment(# Line-getter for tokenize.)
    keyword(def) method(getline)operator(()predefined_constant(self)operator(\))operator(:)
        keyword(if) predefined_constant(self)operator(.)ident(index) operator(>=) predefined(len)operator(()predefined_constant(self)operator(.)ident(lines)operator(\))operator(:)
            ident(line) operator(=) string<delimiter(")delimiter(")>
        keyword(else)operator(:)
            ident(line) operator(=) predefined_constant(self)operator(.)ident(lines)operator([)predefined_constant(self)operator(.)ident(index)operator(])
            predefined_constant(self)operator(.)ident(index) operator(+=) integer(1)
        keyword(return) ident(line)

    comment(# Line-eater for tokenize.)
    keyword(def) method(tokeneater)operator(()predefined_constant(self)operator(,) predefined(type)operator(,) ident(token)operator(,) operator(()ident(sline)operator(,) ident(scol)operator(\))operator(,) ident(end)operator(,) ident(line)operator(,)
                   ident(INDENT)operator(=)ident(tokenize)operator(.)ident(INDENT)operator(,)
                   ident(DEDENT)operator(=)ident(tokenize)operator(.)ident(DEDENT)operator(,)
                   ident(NEWLINE)operator(=)ident(tokenize)operator(.)ident(NEWLINE)operator(,)
                   ident(COMMENT)operator(=)ident(tokenize)operator(.)ident(COMMENT)operator(,)
                   ident(NL)operator(=)ident(tokenize)operator(.)ident(NL)operator(\))operator(:)

        keyword(if) ident(type) operator(==) ident(NEWLINE)operator(:)
            comment(# A program statement, or ENDMARKER, will eventually follow,)
            comment(# after some (possibly empty\) run of tokens of the form)
            comment(#     (NL | COMMENT\)* (INDENT | DEDENT+\)?)
            predefined_constant(self)operator(.)ident(find_stmt) operator(=) integer(1)

        keyword(elif) ident(type) operator(==) ident(INDENT)operator(:)
            predefined_constant(self)operator(.)ident(find_stmt) operator(=) integer(1)
            predefined_constant(self)operator(.)ident(level) operator(+=) integer(1)

        keyword(elif) ident(type) operator(==) ident(DEDENT)operator(:)
            predefined_constant(self)operator(.)ident(find_stmt) operator(=) integer(1)
            predefined_constant(self)operator(.)ident(level) operator(-=) integer(1)

        keyword(elif) ident(type) operator(==) ident(COMMENT)operator(:)
            keyword(if) predefined_constant(self)operator(.)ident(find_stmt)operator(:)
                predefined_constant(self)operator(.)ident(stats)operator(.)ident(append)operator(()operator(()ident(sline)operator(,) operator(-)integer(1)operator(\))operator(\))
                comment(# but we're still looking for a new stmt, so leave)
                comment(# find_stmt alone)

        keyword(elif) ident(type) operator(==) ident(NL)operator(:)
            keyword(pass)

        keyword(elif) predefined_constant(self)operator(.)ident(find_stmt)operator(:)
            comment(# This is the first "real token" following a NEWLINE, so it)
            comment(# must be the first token of the next program statement, or an)
            comment(# ENDMARKER.)
            predefined_constant(self)operator(.)ident(find_stmt) operator(=) integer(0)
            keyword(if) ident(line)operator(:)   comment(# not endmarker)
                predefined_constant(self)operator(.)ident(stats)operator(.)ident(append)operator(()operator(()ident(sline)operator(,) predefined_constant(self)operator(.)ident(level)operator(\))operator(\))

comment(# Count number of leading blanks.)
keyword(def) method(getlspace)operator(()ident(line)operator(\))operator(:)
    ident(i)operator(,) ident(n) operator(=) integer(0)operator(,) predefined(len)operator(()ident(line)operator(\))
    keyword(while) ident(i) operator(<) ident(n) keyword(and) ident(line)operator([)ident(i)operator(]) operator(==) string<delimiter(")content( )delimiter(")>operator(:)
        ident(i) operator(+=) integer(1)
    keyword(return) ident(i)

keyword(if) ident(__name__) operator(==) string<delimiter(')content(__main__)delimiter(')>operator(:)
    ident(main)operator(()operator(\))
comment(#!/usr/bin/env python)
comment(# -*- coding: utf-8 -*-)
docstring<delimiter(""")content(
)content(    Vim Colorscheme Converter)content(
)content(    ~~~~~~~~~~~~~~~~~~~~~~~~~)content(
)content(
)content(    This script converts vim colorscheme files to valid pygments)content(
)content(    style classes meant for putting into modules.)content(
)content(
)content(    :copyright 2006 by Armin Ronacher.)content(
)content(    :license: BSD, see LICENSE for details.)content(
)delimiter(""")>

keyword(import) include(sys)
keyword(import) include(re)
keyword(from) include(os) keyword(import) include(path)
keyword(from) include(cStringIO) keyword(import) include(StringIO)

ident(split_re) operator(=) ident(re)operator(.)ident(compile)operator(()string<modifier(r)delimiter(')content((?<!)content(\\\\)content(\))content(\\s)content(+)delimiter(')>operator(\))

ident(SCRIPT_NAME) operator(=) string<delimiter(')content(Vim Colorscheme Converter)delimiter(')>
ident(SCRIPT_VERSION) operator(=) string<delimiter(')content(0.1)delimiter(')>


ident(COLORS) operator(=) operator({)
    comment(# Numeric Colors)
    string<delimiter(')content(0)delimiter(')>operator(:) string<delimiter(')content(#000000)delimiter(')>operator(,)
    string<delimiter(')content(1)delimiter(')>operator(:) string<delimiter(')content(#c00000)delimiter(')>operator(,)
    string<delimiter(')content(2)delimiter(')>operator(:) string<delimiter(')content(#008000)delimiter(')>operator(,)
    string<delimiter(')content(3)delimiter(')>operator(:) string<delimiter(')content(#808000)delimiter(')>operator(,)
    string<delimiter(')content(4)delimiter(')>operator(:) string<delimiter(')content(#0000c0)delimiter(')>operator(,)
    string<delimiter(')content(5)delimiter(')>operator(:) string<delimiter(')content(#c000c0)delimiter(')>operator(,)
    string<delimiter(')content(6)delimiter(')>operator(:) string<delimiter(')content(#008080)delimiter(')>operator(,)
    string<delimiter(')content(7)delimiter(')>operator(:) string<delimiter(')content(#c0c0c0)delimiter(')>operator(,)
    string<delimiter(')content(8)delimiter(')>operator(:) string<delimiter(')content(#808080)delimiter(')>operator(,)
    string<delimiter(')content(9)delimiter(')>operator(:) string<delimiter(')content(#ff6060)delimiter(')>operator(,)
    string<delimiter(')content(10)delimiter(')>operator(:) string<delimiter(')content(#00ff00)delimiter(')>operator(,)
    string<delimiter(')content(11)delimiter(')>operator(:) string<delimiter(')content(#ffff00)delimiter(')>operator(,)
    string<delimiter(')content(12)delimiter(')>operator(:) string<delimiter(')content(#8080ff)delimiter(')>operator(,)
    string<delimiter(')content(13)delimiter(')>operator(:) string<delimiter(')content(#ff40ff)delimiter(')>operator(,)
    string<delimiter(')content(14)delimiter(')>operator(:) string<delimiter(')content(#00ffff)delimiter(')>operator(,)
    string<delimiter(')content(15)delimiter(')>operator(:) string<delimiter(')content(#ffffff)delimiter(')>operator(,)
    comment(# Named Colors)
    string<delimiter(')content(alice)delimiter(')>operator(:) string<delimiter(')content(#f0f8ff)delimiter(')>operator(,)
    string<delimiter(')content(aliceblue)delimiter(')>operator(:) string<delimiter(')content(#f0f8ff)delimiter(')>operator(,)
    string<delimiter(')content(antique)delimiter(')>operator(:) string<delimiter(')content(#faebd7)delimiter(')>operator(,)
    string<delimiter(')content(antiquewhite)delimiter(')>operator(:) string<delimiter(')content(#faebd7)delimiter(')>operator(,)
    string<delimiter(')content(antiquewhite1)delimiter(')>operator(:) string<delimiter(')content(#ffefdb)delimiter(')>operator(,)
    string<delimiter(')content(antiquewhite2)delimiter(')>operator(:) string<delimiter(')content(#eedfcc)delimiter(')>operator(,)
    string<delimiter(')content(antiquewhite3)delimiter(')>operator(:) string<delimiter(')content(#cdc0b0)delimiter(')>operator(,)
    string<delimiter(')content(antiquewhite4)delimiter(')>operator(:) string<delimiter(')content(#8b8378)delimiter(')>operator(,)
    string<delimiter(')content(aquamarine)delimiter(')>operator(:) string<delimiter(')content(#7fffd4)delimiter(')>operator(,)
    string<delimiter(')content(aquamarine1)delimiter(')>operator(:) string<delimiter(')content(#7fffd4)delimiter(')>operator(,)
    string<delimiter(')content(aquamarine2)delimiter(')>operator(:) string<delimiter(')content(#76eec6)delimiter(')>operator(,)
    string<delimiter(')content(aquamarine3)delimiter(')>operator(:) string<delimiter(')content(#66cdaa)delimiter(')>operator(,)
    string<delimiter(')content(aquamarine4)delimiter(')>operator(:) string<delimiter(')content(#458b74)delimiter(')>operator(,)
    string<delimiter(')content(azure)delimiter(')>operator(:) string<delimiter(')content(#f0ffff)delimiter(')>operator(,)
    string<delimiter(')content(azure1)delimiter(')>operator(:) string<delimiter(')content(#f0ffff)delimiter(')>operator(,)
    string<delimiter(')content(azure2)delimiter(')>operator(:) string<delimiter(')content(#e0eeee)delimiter(')>operator(,)
    string<delimiter(')content(azure3)delimiter(')>operator(:) string<delimiter(')content(#c1cdcd)delimiter(')>operator(,)
    string<delimiter(')content(azure4)delimiter(')>operator(:) string<delimiter(')content(#838b8b)delimiter(')>operator(,)
    string<delimiter(')content(beige)delimiter(')>operator(:) string<delimiter(')content(#f5f5dc)delimiter(')>operator(,)
    string<delimiter(')content(bisque)delimiter(')>operator(:) string<delimiter(')content(#ffe4c4)delimiter(')>operator(,)
    string<delimiter(')content(bisque1)delimiter(')>operator(:) string<delimiter(')content(#ffe4c4)delimiter(')>operator(,)
    string<delimiter(')content(bisque2)delimiter(')>operator(:) string<delimiter(')content(#eed5b7)delimiter(')>operator(,)
    string<delimiter(')content(bisque3)delimiter(')>operator(:) string<delimiter(')content(#cdb79e)delimiter(')>operator(,)
    string<delimiter(')content(bisque4)delimiter(')>operator(:) string<delimiter(')content(#8b7d6b)delimiter(')>operator(,)
    string<delimiter(')content(black)delimiter(')>operator(:) string<delimiter(')content(#000000)delimiter(')>operator(,)
    string<delimiter(')content(blanched)delimiter(')>operator(:) string<delimiter(')content(#ffebcd)delimiter(')>operator(,)
    string<delimiter(')content(blanchedalmond)delimiter(')>operator(:) string<delimiter(')content(#ffebcd)delimiter(')>operator(,)
    string<delimiter(')content(blue)delimiter(')>operator(:) string<delimiter(')content(#8a2be2)delimiter(')>operator(,)
    string<delimiter(')content(blue1)delimiter(')>operator(:) string<delimiter(')content(#0000ff)delimiter(')>operator(,)
    string<delimiter(')content(blue2)delimiter(')>operator(:) string<delimiter(')content(#0000ee)delimiter(')>operator(,)
    string<delimiter(')content(blue3)delimiter(')>operator(:) string<delimiter(')content(#0000cd)delimiter(')>operator(,)
    string<delimiter(')content(blue4)delimiter(')>operator(:) string<delimiter(')content(#00008b)delimiter(')>operator(,)
    string<delimiter(')content(blueviolet)delimiter(')>operator(:) string<delimiter(')content(#8a2be2)delimiter(')>operator(,)
    string<delimiter(')content(brown)delimiter(')>operator(:) string<delimiter(')content(#a52a2a)delimiter(')>operator(,)
    string<delimiter(')content(brown1)delimiter(')>operator(:) string<delimiter(')content(#ff4040)delimiter(')>operator(,)
    string<delimiter(')content(brown2)delimiter(')>operator(:) string<delimiter(')content(#ee3b3b)delimiter(')>operator(,)
    string<delimiter(')content(brown3)delimiter(')>operator(:) string<delimiter(')content(#cd3333)delimiter(')>operator(,)
    string<delimiter(')content(brown4)delimiter(')>operator(:) string<delimiter(')content(#8b2323)delimiter(')>operator(,)
    string<delimiter(')content(burlywood)delimiter(')>operator(:) string<delimiter(')content(#deb887)delimiter(')>operator(,)
    string<delimiter(')content(burlywood1)delimiter(')>operator(:) string<delimiter(')content(#ffd39b)delimiter(')>operator(,)
    string<delimiter(')content(burlywood2)delimiter(')>operator(:) string<delimiter(')content(#eec591)delimiter(')>operator(,)
    string<delimiter(')content(burlywood3)delimiter(')>operator(:) string<delimiter(')content(#cdaa7d)delimiter(')>operator(,)
    string<delimiter(')content(burlywood4)delimiter(')>operator(:) string<delimiter(')content(#8b7355)delimiter(')>operator(,)
    string<delimiter(')content(cadet)delimiter(')>operator(:) string<delimiter(')content(#5f9ea0)delimiter(')>operator(,)
    string<delimiter(')content(cadetblue)delimiter(')>operator(:) string<delimiter(')content(#5f9ea0)delimiter(')>operator(,)
    string<delimiter(')content(cadetblue1)delimiter(')>operator(:) string<delimiter(')content(#98f5ff)delimiter(')>operator(,)
    string<delimiter(')content(cadetblue2)delimiter(')>operator(:) string<delimiter(')content(#8ee5ee)delimiter(')>operator(,)
    string<delimiter(')content(cadetblue3)delimiter(')>operator(:) string<delimiter(')content(#7ac5cd)delimiter(')>operator(,)
    string<delimiter(')content(cadetblue4)delimiter(')>operator(:) string<delimiter(')content(#53868b)delimiter(')>operator(,)
    string<delimiter(')content(chartreuse)delimiter(')>operator(:) string<delimiter(')content(#7fff00)delimiter(')>operator(,)
    string<delimiter(')content(chartreuse1)delimiter(')>operator(:) string<delimiter(')content(#7fff00)delimiter(')>operator(,)
    string<delimiter(')content(chartreuse2)delimiter(')>operator(:) string<delimiter(')content(#76ee00)delimiter(')>operator(,)
    string<delimiter(')content(chartreuse3)delimiter(')>operator(:) string<delimiter(')content(#66cd00)delimiter(')>operator(,)
    string<delimiter(')content(chartreuse4)delimiter(')>operator(:) string<delimiter(')content(#458b00)delimiter(')>operator(,)
    string<delimiter(')content(chocolate)delimiter(')>operator(:) string<delimiter(')content(#d2691e)delimiter(')>operator(,)
    string<delimiter(')content(chocolate1)delimiter(')>operator(:) string<delimiter(')content(#ff7f24)delimiter(')>operator(,)
    string<delimiter(')content(chocolate2)delimiter(')>operator(:) string<delimiter(')content(#ee7621)delimiter(')>operator(,)
    string<delimiter(')content(chocolate3)delimiter(')>operator(:) string<delimiter(')content(#cd661d)delimiter(')>operator(,)
    string<delimiter(')content(chocolate4)delimiter(')>operator(:) string<delimiter(')content(#8b4513)delimiter(')>operator(,)
    string<delimiter(')content(coral)delimiter(')>operator(:) string<delimiter(')content(#ff7f50)delimiter(')>operator(,)
    string<delimiter(')content(coral1)delimiter(')>operator(:) string<delimiter(')content(#ff7256)delimiter(')>operator(,)
    string<delimiter(')content(coral2)delimiter(')>operator(:) string<delimiter(')content(#ee6a50)delimiter(')>operator(,)
    string<delimiter(')content(coral3)delimiter(')>operator(:) string<delimiter(')content(#cd5b45)delimiter(')>operator(,)
    string<delimiter(')content(coral4)delimiter(')>operator(:) string<delimiter(')content(#8b3e2f)delimiter(')>operator(,)
    string<delimiter(')content(cornflower)delimiter(')>operator(:) string<delimiter(')content(#6495ed)delimiter(')>operator(,)
    string<delimiter(')content(cornflowerblue)delimiter(')>operator(:) string<delimiter(')content(#6495ed)delimiter(')>operator(,)
    string<delimiter(')content(cornsilk)delimiter(')>operator(:) string<delimiter(')content(#fff8dc)delimiter(')>operator(,)
    string<delimiter(')content(cornsilk1)delimiter(')>operator(:) string<delimiter(')content(#fff8dc)delimiter(')>operator(,)
    string<delimiter(')content(cornsilk2)delimiter(')>operator(:) string<delimiter(')content(#eee8cd)delimiter(')>operator(,)
    string<delimiter(')content(cornsilk3)delimiter(')>operator(:) string<delimiter(')content(#cdc8b1)delimiter(')>operator(,)
    string<delimiter(')content(cornsilk4)delimiter(')>operator(:) string<delimiter(')content(#8b8878)delimiter(')>operator(,)
    string<delimiter(')content(cyan)delimiter(')>operator(:) string<delimiter(')content(#00ffff)delimiter(')>operator(,)
    string<delimiter(')content(cyan1)delimiter(')>operator(:) string<delimiter(')content(#00ffff)delimiter(')>operator(,)
    string<delimiter(')content(cyan2)delimiter(')>operator(:) string<delimiter(')content(#00eeee)delimiter(')>operator(,)
    string<delimiter(')content(cyan3)delimiter(')>operator(:) string<delimiter(')content(#00cdcd)delimiter(')>operator(,)
    string<delimiter(')content(cyan4)delimiter(')>operator(:) string<delimiter(')content(#008b8b)delimiter(')>operator(,)
    string<delimiter(')content(dark)delimiter(')>operator(:) string<delimiter(')content(#8b0000)delimiter(')>operator(,)
    string<delimiter(')content(darkblue)delimiter(')>operator(:) string<delimiter(')content(#00008b)delimiter(')>operator(,)
    string<delimiter(')content(darkcyan)delimiter(')>operator(:) string<delimiter(')content(#008b8b)delimiter(')>operator(,)
    string<delimiter(')content(darkgoldenrod)delimiter(')>operator(:) string<delimiter(')content(#b8860b)delimiter(')>operator(,)
    string<delimiter(')content(darkgoldenrod1)delimiter(')>operator(:) string<delimiter(')content(#ffb90f)delimiter(')>operator(,)
    string<delimiter(')content(darkgoldenrod2)delimiter(')>operator(:) string<delimiter(')content(#eead0e)delimiter(')>operator(,)
    string<delimiter(')content(darkgoldenrod3)delimiter(')>operator(:) string<delimiter(')content(#cd950c)delimiter(')>operator(,)
    string<delimiter(')content(darkgoldenrod4)delimiter(')>operator(:) string<delimiter(')content(#8b6508)delimiter(')>operator(,)
    string<delimiter(')content(darkgray)delimiter(')>operator(:) string<delimiter(')content(#a9a9a9)delimiter(')>operator(,)
    string<delimiter(')content(darkgreen)delimiter(')>operator(:) string<delimiter(')content(#006400)delimiter(')>operator(,)
    string<delimiter(')content(darkgrey)delimiter(')>operator(:) string<delimiter(')content(#a9a9a9)delimiter(')>operator(,)
    string<delimiter(')content(darkkhaki)delimiter(')>operator(:) string<delimiter(')content(#bdb76b)delimiter(')>operator(,)
    string<delimiter(')content(darkmagenta)delimiter(')>operator(:) string<delimiter(')content(#8b008b)delimiter(')>operator(,)
    string<delimiter(')content(darkolivegreen)delimiter(')>operator(:) string<delimiter(')content(#556b2f)delimiter(')>operator(,)
    string<delimiter(')content(darkolivegreen1)delimiter(')>operator(:) string<delimiter(')content(#caff70)delimiter(')>operator(,)
    string<delimiter(')content(darkolivegreen2)delimiter(')>operator(:) string<delimiter(')content(#bcee68)delimiter(')>operator(,)
    string<delimiter(')content(darkolivegreen3)delimiter(')>operator(:) string<delimiter(')content(#a2cd5a)delimiter(')>operator(,)
    string<delimiter(')content(darkolivegreen4)delimiter(')>operator(:) string<delimiter(')content(#6e8b3d)delimiter(')>operator(,)
    string<delimiter(')content(darkorange)delimiter(')>operator(:) string<delimiter(')content(#ff8c00)delimiter(')>operator(,)
    string<delimiter(')content(darkorange1)delimiter(')>operator(:) string<delimiter(')content(#ff7f00)delimiter(')>operator(,)
    string<delimiter(')content(darkorange2)delimiter(')>operator(:) string<delimiter(')content(#ee7600)delimiter(')>operator(,)
    string<delimiter(')content(darkorange3)delimiter(')>operator(:) string<delimiter(')content(#cd6600)delimiter(')>operator(,)
    string<delimiter(')content(darkorange4)delimiter(')>operator(:) string<delimiter(')content(#8b4500)delimiter(')>operator(,)
    string<delimiter(')content(darkorchid)delimiter(')>operator(:) string<delimiter(')content(#9932cc)delimiter(')>operator(,)
    string<delimiter(')content(darkorchid1)delimiter(')>operator(:) string<delimiter(')content(#bf3eff)delimiter(')>operator(,)
    string<delimiter(')content(darkorchid2)delimiter(')>operator(:) string<delimiter(')content(#b23aee)delimiter(')>operator(,)
    string<delimiter(')content(darkorchid3)delimiter(')>operator(:) string<delimiter(')content(#9a32cd)delimiter(')>operator(,)
    string<delimiter(')content(darkorchid4)delimiter(')>operator(:) string<delimiter(')content(#68228b)delimiter(')>operator(,)
    string<delimiter(')content(darkred)delimiter(')>operator(:) string<delimiter(')content(#8b0000)delimiter(')>operator(,)
    string<delimiter(')content(darksalmon)delimiter(')>operator(:) string<delimiter(')content(#e9967a)delimiter(')>operator(,)
    string<delimiter(')content(darkseagreen)delimiter(')>operator(:) string<delimiter(')content(#8fbc8f)delimiter(')>operator(,)
    string<delimiter(')content(darkseagreen1)delimiter(')>operator(:) string<delimiter(')content(#c1ffc1)delimiter(')>operator(,)
    string<delimiter(')content(darkseagreen2)delimiter(')>operator(:) string<delimiter(')content(#b4eeb4)delimiter(')>operator(,)
    string<delimiter(')content(darkseagreen3)delimiter(')>operator(:) string<delimiter(')content(#9bcd9b)delimiter(')>operator(,)
    string<delimiter(')content(darkseagreen4)delimiter(')>operator(:) string<delimiter(')content(#698b69)delimiter(')>operator(,)
    string<delimiter(')content(darkslateblue)delimiter(')>operator(:) string<delimiter(')content(#483d8b)delimiter(')>operator(,)
    string<delimiter(')content(darkslategray)delimiter(')>operator(:) string<delimiter(')content(#2f4f4f)delimiter(')>operator(,)
    string<delimiter(')content(darkslategray1)delimiter(')>operator(:) string<delimiter(')content(#97ffff)delimiter(')>operator(,)
    string<delimiter(')content(darkslategray2)delimiter(')>operator(:) string<delimiter(')content(#8deeee)delimiter(')>operator(,)
    string<delimiter(')content(darkslategray3)delimiter(')>operator(:) string<delimiter(')content(#79cdcd)delimiter(')>operator(,)
    string<delimiter(')content(darkslategray4)delimiter(')>operator(:) string<delimiter(')content(#528b8b)delimiter(')>operator(,)
    string<delimiter(')content(darkslategrey)delimiter(')>operator(:) string<delimiter(')content(#2f4f4f)delimiter(')>operator(,)
    string<delimiter(')content(darkturquoise)delimiter(')>operator(:) string<delimiter(')content(#00ced1)delimiter(')>operator(,)
    string<delimiter(')content(darkviolet)delimiter(')>operator(:) string<delimiter(')content(#9400d3)delimiter(')>operator(,)
    string<delimiter(')content(deep)delimiter(')>operator(:) string<delimiter(')content(#ff1493)delimiter(')>operator(,)
    string<delimiter(')content(deeppink)delimiter(')>operator(:) string<delimiter(')content(#ff1493)delimiter(')>operator(,)
    string<delimiter(')content(deeppink1)delimiter(')>operator(:) string<delimiter(')content(#ff1493)delimiter(')>operator(,)
    string<delimiter(')content(deeppink2)delimiter(')>operator(:) string<delimiter(')content(#ee1289)delimiter(')>operator(,)
    string<delimiter(')content(deeppink3)delimiter(')>operator(:) string<delimiter(')content(#cd1076)delimiter(')>operator(,)
    string<delimiter(')content(deeppink4)delimiter(')>operator(:) string<delimiter(')content(#8b0a50)delimiter(')>operator(,)
    string<delimiter(')content(deepskyblue)delimiter(')>operator(:) string<delimiter(')content(#00bfff)delimiter(')>operator(,)
    string<delimiter(')content(deepskyblue1)delimiter(')>operator(:) string<delimiter(')content(#00bfff)delimiter(')>operator(,)
    string<delimiter(')content(deepskyblue2)delimiter(')>operator(:) string<delimiter(')content(#00b2ee)delimiter(')>operator(,)
    string<delimiter(')content(deepskyblue3)delimiter(')>operator(:) string<delimiter(')content(#009acd)delimiter(')>operator(,)
    string<delimiter(')content(deepskyblue4)delimiter(')>operator(:) string<delimiter(')content(#00688b)delimiter(')>operator(,)
    string<delimiter(')content(dim)delimiter(')>operator(:) string<delimiter(')content(#696969)delimiter(')>operator(,)
    string<delimiter(')content(dimgray)delimiter(')>operator(:) string<delimiter(')content(#696969)delimiter(')>operator(,)
    string<delimiter(')content(dimgrey)delimiter(')>operator(:) string<delimiter(')content(#696969)delimiter(')>operator(,)
    string<delimiter(')content(dodger)delimiter(')>operator(:) string<delimiter(')content(#1e90ff)delimiter(')>operator(,)
    string<delimiter(')content(dodgerblue)delimiter(')>operator(:) string<delimiter(')content(#1e90ff)delimiter(')>operator(,)
    string<delimiter(')content(dodgerblue1)delimiter(')>operator(:) string<delimiter(')content(#1e90ff)delimiter(')>operator(,)
    string<delimiter(')content(dodgerblue2)delimiter(')>operator(:) string<delimiter(')content(#1c86ee)delimiter(')>operator(,)
    string<delimiter(')content(dodgerblue3)delimiter(')>operator(:) string<delimiter(')content(#1874cd)delimiter(')>operator(,)
    string<delimiter(')content(dodgerblue4)delimiter(')>operator(:) string<delimiter(')content(#104e8b)delimiter(')>operator(,)
    string<delimiter(')content(firebrick)delimiter(')>operator(:) string<delimiter(')content(#b22222)delimiter(')>operator(,)
    string<delimiter(')content(firebrick1)delimiter(')>operator(:) string<delimiter(')content(#ff3030)delimiter(')>operator(,)
    string<delimiter(')content(firebrick2)delimiter(')>operator(:) string<delimiter(')content(#ee2c2c)delimiter(')>operator(,)
    string<delimiter(')content(firebrick3)delimiter(')>operator(:) string<delimiter(')content(#cd2626)delimiter(')>operator(,)
    string<delimiter(')content(firebrick4)delimiter(')>operator(:) string<delimiter(')content(#8b1a1a)delimiter(')>operator(,)
    string<delimiter(')content(floral)delimiter(')>operator(:) string<delimiter(')content(#fffaf0)delimiter(')>operator(,)
    string<delimiter(')content(floralwhite)delimiter(')>operator(:) string<delimiter(')content(#fffaf0)delimiter(')>operator(,)
    string<delimiter(')content(forest)delimiter(')>operator(:) string<delimiter(')content(#228b22)delimiter(')>operator(,)
    string<delimiter(')content(forestgreen)delimiter(')>operator(:) string<delimiter(')content(#228b22)delimiter(')>operator(,)
    string<delimiter(')content(gainsboro)delimiter(')>operator(:) string<delimiter(')content(#dcdcdc)delimiter(')>operator(,)
    string<delimiter(')content(ghost)delimiter(')>operator(:) string<delimiter(')content(#f8f8ff)delimiter(')>operator(,)
    string<delimiter(')content(ghostwhite)delimiter(')>operator(:) string<delimiter(')content(#f8f8ff)delimiter(')>operator(,)
    string<delimiter(')content(gold)delimiter(')>operator(:) string<delimiter(')content(#ffd700)delimiter(')>operator(,)
    string<delimiter(')content(gold1)delimiter(')>operator(:) string<delimiter(')content(#ffd700)delimiter(')>operator(,)
    string<delimiter(')content(gold2)delimiter(')>operator(:) string<delimiter(')content(#eec900)delimiter(')>operator(,)
    string<delimiter(')content(gold3)delimiter(')>operator(:) string<delimiter(')content(#cdad00)delimiter(')>operator(,)
    string<delimiter(')content(gold4)delimiter(')>operator(:) string<delimiter(')content(#8b7500)delimiter(')>operator(,)
    string<delimiter(')content(goldenrod)delimiter(')>operator(:) string<delimiter(')content(#daa520)delimiter(')>operator(,)
    string<delimiter(')content(goldenrod1)delimiter(')>operator(:) string<delimiter(')content(#ffc125)delimiter(')>operator(,)
    string<delimiter(')content(goldenrod2)delimiter(')>operator(:) string<delimiter(')content(#eeb422)delimiter(')>operator(,)
    string<delimiter(')content(goldenrod3)delimiter(')>operator(:) string<delimiter(')content(#cd9b1d)delimiter(')>operator(,)
    string<delimiter(')content(goldenrod4)delimiter(')>operator(:) string<delimiter(')content(#8b6914)delimiter(')>operator(,)
    string<delimiter(')content(gray)delimiter(')>operator(:) string<delimiter(')content(#bebebe)delimiter(')>operator(,)
    string<delimiter(')content(gray0)delimiter(')>operator(:) string<delimiter(')content(#000000)delimiter(')>operator(,)
    string<delimiter(')content(gray1)delimiter(')>operator(:) string<delimiter(')content(#030303)delimiter(')>operator(,)
    string<delimiter(')content(gray10)delimiter(')>operator(:) string<delimiter(')content(#1a1a1a)delimiter(')>operator(,)
    string<delimiter(')content(gray100)delimiter(')>operator(:) string<delimiter(')content(#ffffff)delimiter(')>operator(,)
    string<delimiter(')content(gray11)delimiter(')>operator(:) string<delimiter(')content(#1c1c1c)delimiter(')>operator(,)
    string<delimiter(')content(gray12)delimiter(')>operator(:) string<delimiter(')content(#1f1f1f)delimiter(')>operator(,)
    string<delimiter(')content(gray13)delimiter(')>operator(:) string<delimiter(')content(#212121)delimiter(')>operator(,)
    string<delimiter(')content(gray14)delimiter(')>operator(:) string<delimiter(')content(#242424)delimiter(')>operator(,)
    string<delimiter(')content(gray15)delimiter(')>operator(:) string<delimiter(')content(#262626)delimiter(')>operator(,)
    string<delimiter(')content(gray16)delimiter(')>operator(:) string<delimiter(')content(#292929)delimiter(')>operator(,)
    string<delimiter(')content(gray17)delimiter(')>operator(:) string<delimiter(')content(#2b2b2b)delimiter(')>operator(,)
    string<delimiter(')content(gray18)delimiter(')>operator(:) string<delimiter(')content(#2e2e2e)delimiter(')>operator(,)
    string<delimiter(')content(gray19)delimiter(')>operator(:) string<delimiter(')content(#303030)delimiter(')>operator(,)
    string<delimiter(')content(gray2)delimiter(')>operator(:) string<delimiter(')content(#050505)delimiter(')>operator(,)
    string<delimiter(')content(gray20)delimiter(')>operator(:) string<delimiter(')content(#333333)delimiter(')>operator(,)
    string<delimiter(')content(gray21)delimiter(')>operator(:) string<delimiter(')content(#363636)delimiter(')>operator(,)
    string<delimiter(')content(gray22)delimiter(')>operator(:) string<delimiter(')content(#383838)delimiter(')>operator(,)
    string<delimiter(')content(gray23)delimiter(')>operator(:) string<delimiter(')content(#3b3b3b)delimiter(')>operator(,)
    string<delimiter(')content(gray24)delimiter(')>operator(:) string<delimiter(')content(#3d3d3d)delimiter(')>operator(,)
    string<delimiter(')content(gray25)delimiter(')>operator(:) string<delimiter(')content(#404040)delimiter(')>operator(,)
    string<delimiter(')content(gray26)delimiter(')>operator(:) string<delimiter(')content(#424242)delimiter(')>operator(,)
    string<delimiter(')content(gray27)delimiter(')>operator(:) string<delimiter(')content(#454545)delimiter(')>operator(,)
    string<delimiter(')content(gray28)delimiter(')>operator(:) string<delimiter(')content(#474747)delimiter(')>operator(,)
    string<delimiter(')content(gray29)delimiter(')>operator(:) string<delimiter(')content(#4a4a4a)delimiter(')>operator(,)
    string<delimiter(')content(gray3)delimiter(')>operator(:) string<delimiter(')content(#080808)delimiter(')>operator(,)
    string<delimiter(')content(gray30)delimiter(')>operator(:) string<delimiter(')content(#4d4d4d)delimiter(')>operator(,)
    string<delimiter(')content(gray31)delimiter(')>operator(:) string<delimiter(')content(#4f4f4f)delimiter(')>operator(,)
    string<delimiter(')content(gray32)delimiter(')>operator(:) string<delimiter(')content(#525252)delimiter(')>operator(,)
    string<delimiter(')content(gray33)delimiter(')>operator(:) string<delimiter(')content(#545454)delimiter(')>operator(,)
    string<delimiter(')content(gray34)delimiter(')>operator(:) string<delimiter(')content(#575757)delimiter(')>operator(,)
    string<delimiter(')content(gray35)delimiter(')>operator(:) string<delimiter(')content(#595959)delimiter(')>operator(,)
    string<delimiter(')content(gray36)delimiter(')>operator(:) string<delimiter(')content(#5c5c5c)delimiter(')>operator(,)
    string<delimiter(')content(gray37)delimiter(')>operator(:) string<delimiter(')content(#5e5e5e)delimiter(')>operator(,)
    string<delimiter(')content(gray38)delimiter(')>operator(:) string<delimiter(')content(#616161)delimiter(')>operator(,)
    string<delimiter(')content(gray39)delimiter(')>operator(:) string<delimiter(')content(#636363)delimiter(')>operator(,)
    string<delimiter(')content(gray4)delimiter(')>operator(:) string<delimiter(')content(#0a0a0a)delimiter(')>operator(,)
    string<delimiter(')content(gray40)delimiter(')>operator(:) string<delimiter(')content(#666666)delimiter(')>operator(,)
    string<delimiter(')content(gray41)delimiter(')>operator(:) string<delimiter(')content(#696969)delimiter(')>operator(,)
    string<delimiter(')content(gray42)delimiter(')>operator(:) string<delimiter(')content(#6b6b6b)delimiter(')>operator(,)
    string<delimiter(')content(gray43)delimiter(')>operator(:) string<delimiter(')content(#6e6e6e)delimiter(')>operator(,)
    string<delimiter(')content(gray44)delimiter(')>operator(:) string<delimiter(')content(#707070)delimiter(')>operator(,)
    string<delimiter(')content(gray45)delimiter(')>operator(:) string<delimiter(')content(#737373)delimiter(')>operator(,)
    string<delimiter(')content(gray46)delimiter(')>operator(:) string<delimiter(')content(#757575)delimiter(')>operator(,)
    string<delimiter(')content(gray47)delimiter(')>operator(:) string<delimiter(')content(#787878)delimiter(')>operator(,)
    string<delimiter(')content(gray48)delimiter(')>operator(:) string<delimiter(')content(#7a7a7a)delimiter(')>operator(,)
    string<delimiter(')content(gray49)delimiter(')>operator(:) string<delimiter(')content(#7d7d7d)delimiter(')>operator(,)
    string<delimiter(')content(gray5)delimiter(')>operator(:) string<delimiter(')content(#0d0d0d)delimiter(')>operator(,)
    string<delimiter(')content(gray50)delimiter(')>operator(:) string<delimiter(')content(#7f7f7f)delimiter(')>operator(,)
    string<delimiter(')content(gray51)delimiter(')>operator(:) string<delimiter(')content(#828282)delimiter(')>operator(,)
    string<delimiter(')content(gray52)delimiter(')>operator(:) string<delimiter(')content(#858585)delimiter(')>operator(,)
    string<delimiter(')content(gray53)delimiter(')>operator(:) string<delimiter(')content(#878787)delimiter(')>operator(,)
    string<delimiter(')content(gray54)delimiter(')>operator(:) string<delimiter(')content(#8a8a8a)delimiter(')>operator(,)
    string<delimiter(')content(gray55)delimiter(')>operator(:) string<delimiter(')content(#8c8c8c)delimiter(')>operator(,)
    string<delimiter(')content(gray56)delimiter(')>operator(:) string<delimiter(')content(#8f8f8f)delimiter(')>operator(,)
    string<delimiter(')content(gray57)delimiter(')>operator(:) string<delimiter(')content(#919191)delimiter(')>operator(,)
    string<delimiter(')content(gray58)delimiter(')>operator(:) string<delimiter(')content(#949494)delimiter(')>operator(,)
    string<delimiter(')content(gray59)delimiter(')>operator(:) string<delimiter(')content(#969696)delimiter(')>operator(,)
    string<delimiter(')content(gray6)delimiter(')>operator(:) string<delimiter(')content(#0f0f0f)delimiter(')>operator(,)
    string<delimiter(')content(gray60)delimiter(')>operator(:) string<delimiter(')content(#999999)delimiter(')>operator(,)
    string<delimiter(')content(gray61)delimiter(')>operator(:) string<delimiter(')content(#9c9c9c)delimiter(')>operator(,)
    string<delimiter(')content(gray62)delimiter(')>operator(:) string<delimiter(')content(#9e9e9e)delimiter(')>operator(,)
    string<delimiter(')content(gray63)delimiter(')>operator(:) string<delimiter(')content(#a1a1a1)delimiter(')>operator(,)
    string<delimiter(')content(gray64)delimiter(')>operator(:) string<delimiter(')content(#a3a3a3)delimiter(')>operator(,)
    string<delimiter(')content(gray65)delimiter(')>operator(:) string<delimiter(')content(#a6a6a6)delimiter(')>operator(,)
    string<delimiter(')content(gray66)delimiter(')>operator(:) string<delimiter(')content(#a8a8a8)delimiter(')>operator(,)
    string<delimiter(')content(gray67)delimiter(')>operator(:) string<delimiter(')content(#ababab)delimiter(')>operator(,)
    string<delimiter(')content(gray68)delimiter(')>operator(:) string<delimiter(')content(#adadad)delimiter(')>operator(,)
    string<delimiter(')content(gray69)delimiter(')>operator(:) string<delimiter(')content(#b0b0b0)delimiter(')>operator(,)
    string<delimiter(')content(gray7)delimiter(')>operator(:) string<delimiter(')content(#121212)delimiter(')>operator(,)
    string<delimiter(')content(gray70)delimiter(')>operator(:) string<delimiter(')content(#b3b3b3)delimiter(')>operator(,)
    string<delimiter(')content(gray71)delimiter(')>operator(:) string<delimiter(')content(#b5b5b5)delimiter(')>operator(,)
    string<delimiter(')content(gray72)delimiter(')>operator(:) string<delimiter(')content(#b8b8b8)delimiter(')>operator(,)
    string<delimiter(')content(gray73)delimiter(')>operator(:) string<delimiter(')content(#bababa)delimiter(')>operator(,)
    string<delimiter(')content(gray74)delimiter(')>operator(:) string<delimiter(')content(#bdbdbd)delimiter(')>operator(,)
    string<delimiter(')content(gray75)delimiter(')>operator(:) string<delimiter(')content(#bfbfbf)delimiter(')>operator(,)
    string<delimiter(')content(gray76)delimiter(')>operator(:) string<delimiter(')content(#c2c2c2)delimiter(')>operator(,)
    string<delimiter(')content(gray77)delimiter(')>operator(:) string<delimiter(')content(#c4c4c4)delimiter(')>operator(,)
    string<delimiter(')content(gray78)delimiter(')>operator(:) string<delimiter(')content(#c7c7c7)delimiter(')>operator(,)
    string<delimiter(')content(gray79)delimiter(')>operator(:) string<delimiter(')content(#c9c9c9)delimiter(')>operator(,)
    string<delimiter(')content(gray8)delimiter(')>operator(:) string<delimiter(')content(#141414)delimiter(')>operator(,)
    string<delimiter(')content(gray80)delimiter(')>operator(:) string<delimiter(')content(#cccccc)delimiter(')>operator(,)
    string<delimiter(')content(gray81)delimiter(')>operator(:) string<delimiter(')content(#cfcfcf)delimiter(')>operator(,)
    string<delimiter(')content(gray82)delimiter(')>operator(:) string<delimiter(')content(#d1d1d1)delimiter(')>operator(,)
    string<delimiter(')content(gray83)delimiter(')>operator(:) string<delimiter(')content(#d4d4d4)delimiter(')>operator(,)
    string<delimiter(')content(gray84)delimiter(')>operator(:) string<delimiter(')content(#d6d6d6)delimiter(')>operator(,)
    string<delimiter(')content(gray85)delimiter(')>operator(:) string<delimiter(')content(#d9d9d9)delimiter(')>operator(,)
    string<delimiter(')content(gray86)delimiter(')>operator(:) string<delimiter(')content(#dbdbdb)delimiter(')>operator(,)
    string<delimiter(')content(gray87)delimiter(')>operator(:) string<delimiter(')content(#dedede)delimiter(')>operator(,)
    string<delimiter(')content(gray88)delimiter(')>operator(:) string<delimiter(')content(#e0e0e0)delimiter(')>operator(,)
    string<delimiter(')content(gray89)delimiter(')>operator(:) string<delimiter(')content(#e3e3e3)delimiter(')>operator(,)
    string<delimiter(')content(gray9)delimiter(')>operator(:) string<delimiter(')content(#171717)delimiter(')>operator(,)
    string<delimiter(')content(gray90)delimiter(')>operator(:) string<delimiter(')content(#e5e5e5)delimiter(')>operator(,)
    string<delimiter(')content(gray91)delimiter(')>operator(:) string<delimiter(')content(#e8e8e8)delimiter(')>operator(,)
    string<delimiter(')content(gray92)delimiter(')>operator(:) string<delimiter(')content(#ebebeb)delimiter(')>operator(,)
    string<delimiter(')content(gray93)delimiter(')>operator(:) string<delimiter(')content(#ededed)delimiter(')>operator(,)
    string<delimiter(')content(gray94)delimiter(')>operator(:) string<delimiter(')content(#f0f0f0)delimiter(')>operator(,)
    string<delimiter(')content(gray95)delimiter(')>operator(:) string<delimiter(')content(#f2f2f2)delimiter(')>operator(,)
    string<delimiter(')content(gray96)delimiter(')>operator(:) string<delimiter(')content(#f5f5f5)delimiter(')>operator(,)
    string<delimiter(')content(gray97)delimiter(')>operator(:) string<delimiter(')content(#f7f7f7)delimiter(')>operator(,)
    string<delimiter(')content(gray98)delimiter(')>operator(:) string<delimiter(')content(#fafafa)delimiter(')>operator(,)
    string<delimiter(')content(gray99)delimiter(')>operator(:) string<delimiter(')content(#fcfcfc)delimiter(')>operator(,)
    string<delimiter(')content(green)delimiter(')>operator(:) string<delimiter(')content(#adff2f)delimiter(')>operator(,)
    string<delimiter(')content(green1)delimiter(')>operator(:) string<delimiter(')content(#00ff00)delimiter(')>operator(,)
    string<delimiter(')content(green2)delimiter(')>operator(:) string<delimiter(')content(#00ee00)delimiter(')>operator(,)
    string<delimiter(')content(green3)delimiter(')>operator(:) string<delimiter(')content(#00cd00)delimiter(')>operator(,)
    string<delimiter(')content(green4)delimiter(')>operator(:) string<delimiter(')content(#008b00)delimiter(')>operator(,)
    string<delimiter(')content(greenyellow)delimiter(')>operator(:) string<delimiter(')content(#adff2f)delimiter(')>operator(,)
    string<delimiter(')content(grey)delimiter(')>operator(:) string<delimiter(')content(#bebebe)delimiter(')>operator(,)
    string<delimiter(')content(grey0)delimiter(')>operator(:) string<delimiter(')content(#000000)delimiter(')>operator(,)
    string<delimiter(')content(grey1)delimiter(')>operator(:) string<delimiter(')content(#030303)delimiter(')>operator(,)
    string<delimiter(')content(grey10)delimiter(')>operator(:) string<delimiter(')content(#1a1a1a)delimiter(')>operator(,)
    string<delimiter(')content(grey100)delimiter(')>operator(:) string<delimiter(')content(#ffffff)delimiter(')>operator(,)
    string<delimiter(')content(grey11)delimiter(')>operator(:) string<delimiter(')content(#1c1c1c)delimiter(')>operator(,)
    string<delimiter(')content(grey12)delimiter(')>operator(:) string<delimiter(')content(#1f1f1f)delimiter(')>operator(,)
    string<delimiter(')content(grey13)delimiter(')>operator(:) string<delimiter(')content(#212121)delimiter(')>operator(,)
    string<delimiter(')content(grey14)delimiter(')>operator(:) string<delimiter(')content(#242424)delimiter(')>operator(,)
    string<delimiter(')content(grey15)delimiter(')>operator(:) string<delimiter(')content(#262626)delimiter(')>operator(,)
    string<delimiter(')content(grey16)delimiter(')>operator(:) string<delimiter(')content(#292929)delimiter(')>operator(,)
    string<delimiter(')content(grey17)delimiter(')>operator(:) string<delimiter(')content(#2b2b2b)delimiter(')>operator(,)
    string<delimiter(')content(grey18)delimiter(')>operator(:) string<delimiter(')content(#2e2e2e)delimiter(')>operator(,)
    string<delimiter(')content(grey19)delimiter(')>operator(:) string<delimiter(')content(#303030)delimiter(')>operator(,)
    string<delimiter(')content(grey2)delimiter(')>operator(:) string<delimiter(')content(#050505)delimiter(')>operator(,)
    string<delimiter(')content(grey20)delimiter(')>operator(:) string<delimiter(')content(#333333)delimiter(')>operator(,)
    string<delimiter(')content(grey21)delimiter(')>operator(:) string<delimiter(')content(#363636)delimiter(')>operator(,)
    string<delimiter(')content(grey22)delimiter(')>operator(:) string<delimiter(')content(#383838)delimiter(')>operator(,)
    string<delimiter(')content(grey23)delimiter(')>operator(:) string<delimiter(')content(#3b3b3b)delimiter(')>operator(,)
    string<delimiter(')content(grey24)delimiter(')>operator(:) string<delimiter(')content(#3d3d3d)delimiter(')>operator(,)
    string<delimiter(')content(grey25)delimiter(')>operator(:) string<delimiter(')content(#404040)delimiter(')>operator(,)
    string<delimiter(')content(grey26)delimiter(')>operator(:) string<delimiter(')content(#424242)delimiter(')>operator(,)
    string<delimiter(')content(grey27)delimiter(')>operator(:) string<delimiter(')content(#454545)delimiter(')>operator(,)
    string<delimiter(')content(grey28)delimiter(')>operator(:) string<delimiter(')content(#474747)delimiter(')>operator(,)
    string<delimiter(')content(grey29)delimiter(')>operator(:) string<delimiter(')content(#4a4a4a)delimiter(')>operator(,)
    string<delimiter(')content(grey3)delimiter(')>operator(:) string<delimiter(')content(#080808)delimiter(')>operator(,)
    string<delimiter(')content(grey30)delimiter(')>operator(:) string<delimiter(')content(#4d4d4d)delimiter(')>operator(,)
    string<delimiter(')content(grey31)delimiter(')>operator(:) string<delimiter(')content(#4f4f4f)delimiter(')>operator(,)
    string<delimiter(')content(grey32)delimiter(')>operator(:) string<delimiter(')content(#525252)delimiter(')>operator(,)
    string<delimiter(')content(grey33)delimiter(')>operator(:) string<delimiter(')content(#545454)delimiter(')>operator(,)
    string<delimiter(')content(grey34)delimiter(')>operator(:) string<delimiter(')content(#575757)delimiter(')>operator(,)
    string<delimiter(')content(grey35)delimiter(')>operator(:) string<delimiter(')content(#595959)delimiter(')>operator(,)
    string<delimiter(')content(grey36)delimiter(')>operator(:) string<delimiter(')content(#5c5c5c)delimiter(')>operator(,)
    string<delimiter(')content(grey37)delimiter(')>operator(:) string<delimiter(')content(#5e5e5e)delimiter(')>operator(,)
    string<delimiter(')content(grey38)delimiter(')>operator(:) string<delimiter(')content(#616161)delimiter(')>operator(,)
    string<delimiter(')content(grey39)delimiter(')>operator(:) string<delimiter(')content(#636363)delimiter(')>operator(,)
    string<delimiter(')content(grey4)delimiter(')>operator(:) string<delimiter(')content(#0a0a0a)delimiter(')>operator(,)
    string<delimiter(')content(grey40)delimiter(')>operator(:) string<delimiter(')content(#666666)delimiter(')>operator(,)
    string<delimiter(')content(grey41)delimiter(')>operator(:) string<delimiter(')content(#696969)delimiter(')>operator(,)
    string<delimiter(')content(grey42)delimiter(')>operator(:) string<delimiter(')content(#6b6b6b)delimiter(')>operator(,)
    string<delimiter(')content(grey43)delimiter(')>operator(:) string<delimiter(')content(#6e6e6e)delimiter(')>operator(,)
    string<delimiter(')content(grey44)delimiter(')>operator(:) string<delimiter(')content(#707070)delimiter(')>operator(,)
    string<delimiter(')content(grey45)delimiter(')>operator(:) string<delimiter(')content(#737373)delimiter(')>operator(,)
    string<delimiter(')content(grey46)delimiter(')>operator(:) string<delimiter(')content(#757575)delimiter(')>operator(,)
    string<delimiter(')content(grey47)delimiter(')>operator(:) string<delimiter(')content(#787878)delimiter(')>operator(,)
    string<delimiter(')content(grey48)delimiter(')>operator(:) string<delimiter(')content(#7a7a7a)delimiter(')>operator(,)
    string<delimiter(')content(grey49)delimiter(')>operator(:) string<delimiter(')content(#7d7d7d)delimiter(')>operator(,)
    string<delimiter(')content(grey5)delimiter(')>operator(:) string<delimiter(')content(#0d0d0d)delimiter(')>operator(,)
    string<delimiter(')content(grey50)delimiter(')>operator(:) string<delimiter(')content(#7f7f7f)delimiter(')>operator(,)
    string<delimiter(')content(grey51)delimiter(')>operator(:) string<delimiter(')content(#828282)delimiter(')>operator(,)
    string<delimiter(')content(grey52)delimiter(')>operator(:) string<delimiter(')content(#858585)delimiter(')>operator(,)
    string<delimiter(')content(grey53)delimiter(')>operator(:) string<delimiter(')content(#878787)delimiter(')>operator(,)
    string<delimiter(')content(grey54)delimiter(')>operator(:) string<delimiter(')content(#8a8a8a)delimiter(')>operator(,)
    string<delimiter(')content(grey55)delimiter(')>operator(:) string<delimiter(')content(#8c8c8c)delimiter(')>operator(,)
    string<delimiter(')content(grey56)delimiter(')>operator(:) string<delimiter(')content(#8f8f8f)delimiter(')>operator(,)
    string<delimiter(')content(grey57)delimiter(')>operator(:) string<delimiter(')content(#919191)delimiter(')>operator(,)
    string<delimiter(')content(grey58)delimiter(')>operator(:) string<delimiter(')content(#949494)delimiter(')>operator(,)
    string<delimiter(')content(grey59)delimiter(')>operator(:) string<delimiter(')content(#969696)delimiter(')>operator(,)
    string<delimiter(')content(grey6)delimiter(')>operator(:) string<delimiter(')content(#0f0f0f)delimiter(')>operator(,)
    string<delimiter(')content(grey60)delimiter(')>operator(:) string<delimiter(')content(#999999)delimiter(')>operator(,)
    string<delimiter(')content(grey61)delimiter(')>operator(:) string<delimiter(')content(#9c9c9c)delimiter(')>operator(,)
    string<delimiter(')content(grey62)delimiter(')>operator(:) string<delimiter(')content(#9e9e9e)delimiter(')>operator(,)
    string<delimiter(')content(grey63)delimiter(')>operator(:) string<delimiter(')content(#a1a1a1)delimiter(')>operator(,)
    string<delimiter(')content(grey64)delimiter(')>operator(:) string<delimiter(')content(#a3a3a3)delimiter(')>operator(,)
    string<delimiter(')content(grey65)delimiter(')>operator(:) string<delimiter(')content(#a6a6a6)delimiter(')>operator(,)
    string<delimiter(')content(grey66)delimiter(')>operator(:) string<delimiter(')content(#a8a8a8)delimiter(')>operator(,)
    string<delimiter(')content(grey67)delimiter(')>operator(:) string<delimiter(')content(#ababab)delimiter(')>operator(,)
    string<delimiter(')content(grey68)delimiter(')>operator(:) string<delimiter(')content(#adadad)delimiter(')>operator(,)
    string<delimiter(')content(grey69)delimiter(')>operator(:) string<delimiter(')content(#b0b0b0)delimiter(')>operator(,)
    string<delimiter(')content(grey7)delimiter(')>operator(:) string<delimiter(')content(#121212)delimiter(')>operator(,)
    string<delimiter(')content(grey70)delimiter(')>operator(:) string<delimiter(')content(#b3b3b3)delimiter(')>operator(,)
    string<delimiter(')content(grey71)delimiter(')>operator(:) string<delimiter(')content(#b5b5b5)delimiter(')>operator(,)
    string<delimiter(')content(grey72)delimiter(')>operator(:) string<delimiter(')content(#b8b8b8)delimiter(')>operator(,)
    string<delimiter(')content(grey73)delimiter(')>operator(:) string<delimiter(')content(#bababa)delimiter(')>operator(,)
    string<delimiter(')content(grey74)delimiter(')>operator(:) string<delimiter(')content(#bdbdbd)delimiter(')>operator(,)
    string<delimiter(')content(grey75)delimiter(')>operator(:) string<delimiter(')content(#bfbfbf)delimiter(')>operator(,)
    string<delimiter(')content(grey76)delimiter(')>operator(:) string<delimiter(')content(#c2c2c2)delimiter(')>operator(,)
    string<delimiter(')content(grey77)delimiter(')>operator(:) string<delimiter(')content(#c4c4c4)delimiter(')>operator(,)
    string<delimiter(')content(grey78)delimiter(')>operator(:) string<delimiter(')content(#c7c7c7)delimiter(')>operator(,)
    string<delimiter(')content(grey79)delimiter(')>operator(:) string<delimiter(')content(#c9c9c9)delimiter(')>operator(,)
    string<delimiter(')content(grey8)delimiter(')>operator(:) string<delimiter(')content(#141414)delimiter(')>operator(,)
    string<delimiter(')content(grey80)delimiter(')>operator(:) string<delimiter(')content(#cccccc)delimiter(')>operator(,)
    string<delimiter(')content(grey81)delimiter(')>operator(:) string<delimiter(')content(#cfcfcf)delimiter(')>operator(,)
    string<delimiter(')content(grey82)delimiter(')>operator(:) string<delimiter(')content(#d1d1d1)delimiter(')>operator(,)
    string<delimiter(')content(grey83)delimiter(')>operator(:) string<delimiter(')content(#d4d4d4)delimiter(')>operator(,)
    string<delimiter(')content(grey84)delimiter(')>operator(:) string<delimiter(')content(#d6d6d6)delimiter(')>operator(,)
    string<delimiter(')content(grey85)delimiter(')>operator(:) string<delimiter(')content(#d9d9d9)delimiter(')>operator(,)
    string<delimiter(')content(grey86)delimiter(')>operator(:) string<delimiter(')content(#dbdbdb)delimiter(')>operator(,)
    string<delimiter(')content(grey87)delimiter(')>operator(:) string<delimiter(')content(#dedede)delimiter(')>operator(,)
    string<delimiter(')content(grey88)delimiter(')>operator(:) string<delimiter(')content(#e0e0e0)delimiter(')>operator(,)
    string<delimiter(')content(grey89)delimiter(')>operator(:) string<delimiter(')content(#e3e3e3)delimiter(')>operator(,)
    string<delimiter(')content(grey9)delimiter(')>operator(:) string<delimiter(')content(#171717)delimiter(')>operator(,)
    string<delimiter(')content(grey90)delimiter(')>operator(:) string<delimiter(')content(#e5e5e5)delimiter(')>operator(,)
    string<delimiter(')content(grey91)delimiter(')>operator(:) string<delimiter(')content(#e8e8e8)delimiter(')>operator(,)
    string<delimiter(')content(grey92)delimiter(')>operator(:) string<delimiter(')content(#ebebeb)delimiter(')>operator(,)
    string<delimiter(')content(grey93)delimiter(')>operator(:) string<delimiter(')content(#ededed)delimiter(')>operator(,)
    string<delimiter(')content(grey94)delimiter(')>operator(:) string<delimiter(')content(#f0f0f0)delimiter(')>operator(,)
    string<delimiter(')content(grey95)delimiter(')>operator(:) string<delimiter(')content(#f2f2f2)delimiter(')>operator(,)
    string<delimiter(')content(grey96)delimiter(')>operator(:) string<delimiter(')content(#f5f5f5)delimiter(')>operator(,)
    string<delimiter(')content(grey97)delimiter(')>operator(:) string<delimiter(')content(#f7f7f7)delimiter(')>operator(,)
    string<delimiter(')content(grey98)delimiter(')>operator(:) string<delimiter(')content(#fafafa)delimiter(')>operator(,)
    string<delimiter(')content(grey99)delimiter(')>operator(:) string<delimiter(')content(#fcfcfc)delimiter(')>operator(,)
    string<delimiter(')content(honeydew)delimiter(')>operator(:) string<delimiter(')content(#f0fff0)delimiter(')>operator(,)
    string<delimiter(')content(honeydew1)delimiter(')>operator(:) string<delimiter(')content(#f0fff0)delimiter(')>operator(,)
    string<delimiter(')content(honeydew2)delimiter(')>operator(:) string<delimiter(')content(#e0eee0)delimiter(')>operator(,)
    string<delimiter(')content(honeydew3)delimiter(')>operator(:) string<delimiter(')content(#c1cdc1)delimiter(')>operator(,)
    string<delimiter(')content(honeydew4)delimiter(')>operator(:) string<delimiter(')content(#838b83)delimiter(')>operator(,)
    string<delimiter(')content(hot)delimiter(')>operator(:) string<delimiter(')content(#ff69b4)delimiter(')>operator(,)
    string<delimiter(')content(hotpink)delimiter(')>operator(:) string<delimiter(')content(#ff69b4)delimiter(')>operator(,)
    string<delimiter(')content(hotpink1)delimiter(')>operator(:) string<delimiter(')content(#ff6eb4)delimiter(')>operator(,)
    string<delimiter(')content(hotpink2)delimiter(')>operator(:) string<delimiter(')content(#ee6aa7)delimiter(')>operator(,)
    string<delimiter(')content(hotpink3)delimiter(')>operator(:) string<delimiter(')content(#cd6090)delimiter(')>operator(,)
    string<delimiter(')content(hotpink4)delimiter(')>operator(:) string<delimiter(')content(#8b3a62)delimiter(')>operator(,)
    string<delimiter(')content(indian)delimiter(')>operator(:) string<delimiter(')content(#cd5c5c)delimiter(')>operator(,)
    string<delimiter(')content(indianred)delimiter(')>operator(:) string<delimiter(')content(#cd5c5c)delimiter(')>operator(,)
    string<delimiter(')content(indianred1)delimiter(')>operator(:) string<delimiter(')content(#ff6a6a)delimiter(')>operator(,)
    string<delimiter(')content(indianred2)delimiter(')>operator(:) string<delimiter(')content(#ee6363)delimiter(')>operator(,)
    string<delimiter(')content(indianred3)delimiter(')>operator(:) string<delimiter(')content(#cd5555)delimiter(')>operator(,)
    string<delimiter(')content(indianred4)delimiter(')>operator(:) string<delimiter(')content(#8b3a3a)delimiter(')>operator(,)
    string<delimiter(')content(ivory)delimiter(')>operator(:) string<delimiter(')content(#fffff0)delimiter(')>operator(,)
    string<delimiter(')content(ivory1)delimiter(')>operator(:) string<delimiter(')content(#fffff0)delimiter(')>operator(,)
    string<delimiter(')content(ivory2)delimiter(')>operator(:) string<delimiter(')content(#eeeee0)delimiter(')>operator(,)
    string<delimiter(')content(ivory3)delimiter(')>operator(:) string<delimiter(')content(#cdcdc1)delimiter(')>operator(,)
    string<delimiter(')content(ivory4)delimiter(')>operator(:) string<delimiter(')content(#8b8b83)delimiter(')>operator(,)
    string<delimiter(')content(khaki)delimiter(')>operator(:) string<delimiter(')content(#f0e68c)delimiter(')>operator(,)
    string<delimiter(')content(khaki1)delimiter(')>operator(:) string<delimiter(')content(#fff68f)delimiter(')>operator(,)
    string<delimiter(')content(khaki2)delimiter(')>operator(:) string<delimiter(')content(#eee685)delimiter(')>operator(,)
    string<delimiter(')content(khaki3)delimiter(')>operator(:) string<delimiter(')content(#cdc673)delimiter(')>operator(,)
    string<delimiter(')content(khaki4)delimiter(')>operator(:) string<delimiter(')content(#8b864e)delimiter(')>operator(,)
    string<delimiter(')content(lavender)delimiter(')>operator(:) string<delimiter(')content(#fff0f5)delimiter(')>operator(,)
    string<delimiter(')content(lavenderblush)delimiter(')>operator(:) string<delimiter(')content(#fff0f5)delimiter(')>operator(,)
    string<delimiter(')content(lavenderblush1)delimiter(')>operator(:) string<delimiter(')content(#fff0f5)delimiter(')>operator(,)
    string<delimiter(')content(lavenderblush2)delimiter(')>operator(:) string<delimiter(')content(#eee0e5)delimiter(')>operator(,)
    string<delimiter(')content(lavenderblush3)delimiter(')>operator(:) string<delimiter(')content(#cdc1c5)delimiter(')>operator(,)
    string<delimiter(')content(lavenderblush4)delimiter(')>operator(:) string<delimiter(')content(#8b8386)delimiter(')>operator(,)
    string<delimiter(')content(lawn)delimiter(')>operator(:) string<delimiter(')content(#7cfc00)delimiter(')>operator(,)
    string<delimiter(')content(lawngreen)delimiter(')>operator(:) string<delimiter(')content(#7cfc00)delimiter(')>operator(,)
    string<delimiter(')content(lemon)delimiter(')>operator(:) string<delimiter(')content(#fffacd)delimiter(')>operator(,)
    string<delimiter(')content(lemonchiffon)delimiter(')>operator(:) string<delimiter(')content(#fffacd)delimiter(')>operator(,)
    string<delimiter(')content(lemonchiffon1)delimiter(')>operator(:) string<delimiter(')content(#fffacd)delimiter(')>operator(,)
    string<delimiter(')content(lemonchiffon2)delimiter(')>operator(:) string<delimiter(')content(#eee9bf)delimiter(')>operator(,)
    string<delimiter(')content(lemonchiffon3)delimiter(')>operator(:) string<delimiter(')content(#cdc9a5)delimiter(')>operator(,)
    string<delimiter(')content(lemonchiffon4)delimiter(')>operator(:) string<delimiter(')content(#8b8970)delimiter(')>operator(,)
    string<delimiter(')content(light)delimiter(')>operator(:) string<delimiter(')content(#90ee90)delimiter(')>operator(,)
    string<delimiter(')content(lightblue)delimiter(')>operator(:) string<delimiter(')content(#add8e6)delimiter(')>operator(,)
    string<delimiter(')content(lightblue1)delimiter(')>operator(:) string<delimiter(')content(#bfefff)delimiter(')>operator(,)
    string<delimiter(')content(lightblue2)delimiter(')>operator(:) string<delimiter(')content(#b2dfee)delimiter(')>operator(,)
    string<delimiter(')content(lightblue3)delimiter(')>operator(:) string<delimiter(')content(#9ac0cd)delimiter(')>operator(,)
    string<delimiter(')content(lightblue4)delimiter(')>operator(:) string<delimiter(')content(#68838b)delimiter(')>operator(,)
    string<delimiter(')content(lightcoral)delimiter(')>operator(:) string<delimiter(')content(#f08080)delimiter(')>operator(,)
    string<delimiter(')content(lightcyan)delimiter(')>operator(:) string<delimiter(')content(#e0ffff)delimiter(')>operator(,)
    string<delimiter(')content(lightcyan1)delimiter(')>operator(:) string<delimiter(')content(#e0ffff)delimiter(')>operator(,)
    string<delimiter(')content(lightcyan2)delimiter(')>operator(:) string<delimiter(')content(#d1eeee)delimiter(')>operator(,)
    string<delimiter(')content(lightcyan3)delimiter(')>operator(:) string<delimiter(')content(#b4cdcd)delimiter(')>operator(,)
    string<delimiter(')content(lightcyan4)delimiter(')>operator(:) string<delimiter(')content(#7a8b8b)delimiter(')>operator(,)
    string<delimiter(')content(lightgoldenrod)delimiter(')>operator(:) string<delimiter(')content(#eedd82)delimiter(')>operator(,)
    string<delimiter(')content(lightgoldenrod1)delimiter(')>operator(:) string<delimiter(')content(#ffec8b)delimiter(')>operator(,)
    string<delimiter(')content(lightgoldenrod2)delimiter(')>operator(:) string<delimiter(')content(#eedc82)delimiter(')>operator(,)
    string<delimiter(')content(lightgoldenrod3)delimiter(')>operator(:) string<delimiter(')content(#cdbe70)delimiter(')>operator(,)
    string<delimiter(')content(lightgoldenrod4)delimiter(')>operator(:) string<delimiter(')content(#8b814c)delimiter(')>operator(,)
    string<delimiter(')content(lightgoldenrodyellow)delimiter(')>operator(:) string<delimiter(')content(#fafad2)delimiter(')>operator(,)
    string<delimiter(')content(lightgray)delimiter(')>operator(:) string<delimiter(')content(#d3d3d3)delimiter(')>operator(,)
    string<delimiter(')content(lightgreen)delimiter(')>operator(:) string<delimiter(')content(#90ee90)delimiter(')>operator(,)
    string<delimiter(')content(lightgrey)delimiter(')>operator(:) string<delimiter(')content(#d3d3d3)delimiter(')>operator(,)
    string<delimiter(')content(lightpink)delimiter(')>operator(:) string<delimiter(')content(#ffb6c1)delimiter(')>operator(,)
    string<delimiter(')content(lightpink1)delimiter(')>operator(:) string<delimiter(')content(#ffaeb9)delimiter(')>operator(,)
    string<delimiter(')content(lightpink2)delimiter(')>operator(:) string<delimiter(')content(#eea2ad)delimiter(')>operator(,)
    string<delimiter(')content(lightpink3)delimiter(')>operator(:) string<delimiter(')content(#cd8c95)delimiter(')>operator(,)
    string<delimiter(')content(lightpink4)delimiter(')>operator(:) string<delimiter(')content(#8b5f65)delimiter(')>operator(,)
    string<delimiter(')content(lightsalmon)delimiter(')>operator(:) string<delimiter(')content(#ffa07a)delimiter(')>operator(,)
    string<delimiter(')content(lightsalmon1)delimiter(')>operator(:) string<delimiter(')content(#ffa07a)delimiter(')>operator(,)
    string<delimiter(')content(lightsalmon2)delimiter(')>operator(:) string<delimiter(')content(#ee9572)delimiter(')>operator(,)
    string<delimiter(')content(lightsalmon3)delimiter(')>operator(:) string<delimiter(')content(#cd8162)delimiter(')>operator(,)
    string<delimiter(')content(lightsalmon4)delimiter(')>operator(:) string<delimiter(')content(#8b5742)delimiter(')>operator(,)
    string<delimiter(')content(lightseagreen)delimiter(')>operator(:) string<delimiter(')content(#20b2aa)delimiter(')>operator(,)
    string<delimiter(')content(lightskyblue)delimiter(')>operator(:) string<delimiter(')content(#87cefa)delimiter(')>operator(,)
    string<delimiter(')content(lightskyblue1)delimiter(')>operator(:) string<delimiter(')content(#b0e2ff)delimiter(')>operator(,)
    string<delimiter(')content(lightskyblue2)delimiter(')>operator(:) string<delimiter(')content(#a4d3ee)delimiter(')>operator(,)
    string<delimiter(')content(lightskyblue3)delimiter(')>operator(:) string<delimiter(')content(#8db6cd)delimiter(')>operator(,)
    string<delimiter(')content(lightskyblue4)delimiter(')>operator(:) string<delimiter(')content(#607b8b)delimiter(')>operator(,)
    string<delimiter(')content(lightslateblue)delimiter(')>operator(:) string<delimiter(')content(#8470ff)delimiter(')>operator(,)
    string<delimiter(')content(lightslategray)delimiter(')>operator(:) string<delimiter(')content(#778899)delimiter(')>operator(,)
    string<delimiter(')content(lightslategrey)delimiter(')>operator(:) string<delimiter(')content(#778899)delimiter(')>operator(,)
    string<delimiter(')content(lightsteelblue)delimiter(')>operator(:) string<delimiter(')content(#b0c4de)delimiter(')>operator(,)
    string<delimiter(')content(lightsteelblue1)delimiter(')>operator(:) string<delimiter(')content(#cae1ff)delimiter(')>operator(,)
    string<delimiter(')content(lightsteelblue2)delimiter(')>operator(:) string<delimiter(')content(#bcd2ee)delimiter(')>operator(,)
    string<delimiter(')content(lightsteelblue3)delimiter(')>operator(:) string<delimiter(')content(#a2b5cd)delimiter(')>operator(,)
    string<delimiter(')content(lightsteelblue4)delimiter(')>operator(:) string<delimiter(')content(#6e7b8b)delimiter(')>operator(,)
    string<delimiter(')content(lightyellow)delimiter(')>operator(:) string<delimiter(')content(#ffffe0)delimiter(')>operator(,)
    string<delimiter(')content(lightyellow1)delimiter(')>operator(:) string<delimiter(')content(#ffffe0)delimiter(')>operator(,)
    string<delimiter(')content(lightyellow2)delimiter(')>operator(:) string<delimiter(')content(#eeeed1)delimiter(')>operator(,)
    string<delimiter(')content(lightyellow3)delimiter(')>operator(:) string<delimiter(')content(#cdcdb4)delimiter(')>operator(,)
    string<delimiter(')content(lightyellow4)delimiter(')>operator(:) string<delimiter(')content(#8b8b7a)delimiter(')>operator(,)
    string<delimiter(')content(lime)delimiter(')>operator(:) string<delimiter(')content(#32cd32)delimiter(')>operator(,)
    string<delimiter(')content(limegreen)delimiter(')>operator(:) string<delimiter(')content(#32cd32)delimiter(')>operator(,)
    string<delimiter(')content(linen)delimiter(')>operator(:) string<delimiter(')content(#faf0e6)delimiter(')>operator(,)
    string<delimiter(')content(magenta)delimiter(')>operator(:) string<delimiter(')content(#ff00ff)delimiter(')>operator(,)
    string<delimiter(')content(magenta1)delimiter(')>operator(:) string<delimiter(')content(#ff00ff)delimiter(')>operator(,)
    string<delimiter(')content(magenta2)delimiter(')>operator(:) string<delimiter(')content(#ee00ee)delimiter(')>operator(,)
    string<delimiter(')content(magenta3)delimiter(')>operator(:) string<delimiter(')content(#cd00cd)delimiter(')>operator(,)
    string<delimiter(')content(magenta4)delimiter(')>operator(:) string<delimiter(')content(#8b008b)delimiter(')>operator(,)
    string<delimiter(')content(maroon)delimiter(')>operator(:) string<delimiter(')content(#b03060)delimiter(')>operator(,)
    string<delimiter(')content(maroon1)delimiter(')>operator(:) string<delimiter(')content(#ff34b3)delimiter(')>operator(,)
    string<delimiter(')content(maroon2)delimiter(')>operator(:) string<delimiter(')content(#ee30a7)delimiter(')>operator(,)
    string<delimiter(')content(maroon3)delimiter(')>operator(:) string<delimiter(')content(#cd2990)delimiter(')>operator(,)
    string<delimiter(')content(maroon4)delimiter(')>operator(:) string<delimiter(')content(#8b1c62)delimiter(')>operator(,)
    string<delimiter(')content(medium)delimiter(')>operator(:) string<delimiter(')content(#9370db)delimiter(')>operator(,)
    string<delimiter(')content(mediumaquamarine)delimiter(')>operator(:) string<delimiter(')content(#66cdaa)delimiter(')>operator(,)
    string<delimiter(')content(mediumblue)delimiter(')>operator(:) string<delimiter(')content(#0000cd)delimiter(')>operator(,)
    string<delimiter(')content(mediumorchid)delimiter(')>operator(:) string<delimiter(')content(#ba55d3)delimiter(')>operator(,)
    string<delimiter(')content(mediumorchid1)delimiter(')>operator(:) string<delimiter(')content(#e066ff)delimiter(')>operator(,)
    string<delimiter(')content(mediumorchid2)delimiter(')>operator(:) string<delimiter(')content(#d15fee)delimiter(')>operator(,)
    string<delimiter(')content(mediumorchid3)delimiter(')>operator(:) string<delimiter(')content(#b452cd)delimiter(')>operator(,)
    string<delimiter(')content(mediumorchid4)delimiter(')>operator(:) string<delimiter(')content(#7a378b)delimiter(')>operator(,)
    string<delimiter(')content(mediumpurple)delimiter(')>operator(:) string<delimiter(')content(#9370db)delimiter(')>operator(,)
    string<delimiter(')content(mediumpurple1)delimiter(')>operator(:) string<delimiter(')content(#ab82ff)delimiter(')>operator(,)
    string<delimiter(')content(mediumpurple2)delimiter(')>operator(:) string<delimiter(')content(#9f79ee)delimiter(')>operator(,)
    string<delimiter(')content(mediumpurple3)delimiter(')>operator(:) string<delimiter(')content(#8968cd)delimiter(')>operator(,)
    string<delimiter(')content(mediumpurple4)delimiter(')>operator(:) string<delimiter(')content(#5d478b)delimiter(')>operator(,)
    string<delimiter(')content(mediumseagreen)delimiter(')>operator(:) string<delimiter(')content(#3cb371)delimiter(')>operator(,)
    string<delimiter(')content(mediumslateblue)delimiter(')>operator(:) string<delimiter(')content(#7b68ee)delimiter(')>operator(,)
    string<delimiter(')content(mediumspringgreen)delimiter(')>operator(:) string<delimiter(')content(#00fa9a)delimiter(')>operator(,)
    string<delimiter(')content(mediumturquoise)delimiter(')>operator(:) string<delimiter(')content(#48d1cc)delimiter(')>operator(,)
    string<delimiter(')content(mediumvioletred)delimiter(')>operator(:) string<delimiter(')content(#c71585)delimiter(')>operator(,)
    string<delimiter(')content(midnight)delimiter(')>operator(:) string<delimiter(')content(#191970)delimiter(')>operator(,)
    string<delimiter(')content(midnightblue)delimiter(')>operator(:) string<delimiter(')content(#191970)delimiter(')>operator(,)
    string<delimiter(')content(mint)delimiter(')>operator(:) string<delimiter(')content(#f5fffa)delimiter(')>operator(,)
    string<delimiter(')content(mintcream)delimiter(')>operator(:) string<delimiter(')content(#f5fffa)delimiter(')>operator(,)
    string<delimiter(')content(misty)delimiter(')>operator(:) string<delimiter(')content(#ffe4e1)delimiter(')>operator(,)
    string<delimiter(')content(mistyrose)delimiter(')>operator(:) string<delimiter(')content(#ffe4e1)delimiter(')>operator(,)
    string<delimiter(')content(mistyrose1)delimiter(')>operator(:) string<delimiter(')content(#ffe4e1)delimiter(')>operator(,)
    string<delimiter(')content(mistyrose2)delimiter(')>operator(:) string<delimiter(')content(#eed5d2)delimiter(')>operator(,)
    string<delimiter(')content(mistyrose3)delimiter(')>operator(:) string<delimiter(')content(#cdb7b5)delimiter(')>operator(,)
    string<delimiter(')content(mistyrose4)delimiter(')>operator(:) string<delimiter(')content(#8b7d7b)delimiter(')>operator(,)
    string<delimiter(')content(moccasin)delimiter(')>operator(:) string<delimiter(')content(#ffe4b5)delimiter(')>operator(,)
    string<delimiter(')content(navajo)delimiter(')>operator(:) string<delimiter(')content(#ffdead)delimiter(')>operator(,)
    string<delimiter(')content(navajowhite)delimiter(')>operator(:) string<delimiter(')content(#ffdead)delimiter(')>operator(,)
    string<delimiter(')content(navajowhite1)delimiter(')>operator(:) string<delimiter(')content(#ffdead)delimiter(')>operator(,)
    string<delimiter(')content(navajowhite2)delimiter(')>operator(:) string<delimiter(')content(#eecfa1)delimiter(')>operator(,)
    string<delimiter(')content(navajowhite3)delimiter(')>operator(:) string<delimiter(')content(#cdb38b)delimiter(')>operator(,)
    string<delimiter(')content(navajowhite4)delimiter(')>operator(:) string<delimiter(')content(#8b795e)delimiter(')>operator(,)
    string<delimiter(')content(navy)delimiter(')>operator(:) string<delimiter(')content(#000080)delimiter(')>operator(,)
    string<delimiter(')content(navyblue)delimiter(')>operator(:) string<delimiter(')content(#000080)delimiter(')>operator(,)
    string<delimiter(')content(old)delimiter(')>operator(:) string<delimiter(')content(#fdf5e6)delimiter(')>operator(,)
    string<delimiter(')content(oldlace)delimiter(')>operator(:) string<delimiter(')content(#fdf5e6)delimiter(')>operator(,)
    string<delimiter(')content(olive)delimiter(')>operator(:) string<delimiter(')content(#6b8e23)delimiter(')>operator(,)
    string<delimiter(')content(olivedrab)delimiter(')>operator(:) string<delimiter(')content(#6b8e23)delimiter(')>operator(,)
    string<delimiter(')content(olivedrab1)delimiter(')>operator(:) string<delimiter(')content(#c0ff3e)delimiter(')>operator(,)
    string<delimiter(')content(olivedrab2)delimiter(')>operator(:) string<delimiter(')content(#b3ee3a)delimiter(')>operator(,)
    string<delimiter(')content(olivedrab3)delimiter(')>operator(:) string<delimiter(')content(#9acd32)delimiter(')>operator(,)
    string<delimiter(')content(olivedrab4)delimiter(')>operator(:) string<delimiter(')content(#698b22)delimiter(')>operator(,)
    string<delimiter(')content(orange)delimiter(')>operator(:) string<delimiter(')content(#ff4500)delimiter(')>operator(,)
    string<delimiter(')content(orange1)delimiter(')>operator(:) string<delimiter(')content(#ffa500)delimiter(')>operator(,)
    string<delimiter(')content(orange2)delimiter(')>operator(:) string<delimiter(')content(#ee9a00)delimiter(')>operator(,)
    string<delimiter(')content(orange3)delimiter(')>operator(:) string<delimiter(')content(#cd8500)delimiter(')>operator(,)
    string<delimiter(')content(orange4)delimiter(')>operator(:) string<delimiter(')content(#8b5a00)delimiter(')>operator(,)
    string<delimiter(')content(orangered)delimiter(')>operator(:) string<delimiter(')content(#ff4500)delimiter(')>operator(,)
    string<delimiter(')content(orangered1)delimiter(')>operator(:) string<delimiter(')content(#ff4500)delimiter(')>operator(,)
    string<delimiter(')content(orangered2)delimiter(')>operator(:) string<delimiter(')content(#ee4000)delimiter(')>operator(,)
    string<delimiter(')content(orangered3)delimiter(')>operator(:) string<delimiter(')content(#cd3700)delimiter(')>operator(,)
    string<delimiter(')content(orangered4)delimiter(')>operator(:) string<delimiter(')content(#8b2500)delimiter(')>operator(,)
    string<delimiter(')content(orchid)delimiter(')>operator(:) string<delimiter(')content(#da70d6)delimiter(')>operator(,)
    string<delimiter(')content(orchid1)delimiter(')>operator(:) string<delimiter(')content(#ff83fa)delimiter(')>operator(,)
    string<delimiter(')content(orchid2)delimiter(')>operator(:) string<delimiter(')content(#ee7ae9)delimiter(')>operator(,)
    string<delimiter(')content(orchid3)delimiter(')>operator(:) string<delimiter(')content(#cd69c9)delimiter(')>operator(,)
    string<delimiter(')content(orchid4)delimiter(')>operator(:) string<delimiter(')content(#8b4789)delimiter(')>operator(,)
    string<delimiter(')content(pale)delimiter(')>operator(:) string<delimiter(')content(#db7093)delimiter(')>operator(,)
    string<delimiter(')content(palegoldenrod)delimiter(')>operator(:) string<delimiter(')content(#eee8aa)delimiter(')>operator(,)
    string<delimiter(')content(palegreen)delimiter(')>operator(:) string<delimiter(')content(#98fb98)delimiter(')>operator(,)
    string<delimiter(')content(palegreen1)delimiter(')>operator(:) string<delimiter(')content(#9aff9a)delimiter(')>operator(,)
    string<delimiter(')content(palegreen2)delimiter(')>operator(:) string<delimiter(')content(#90ee90)delimiter(')>operator(,)
    string<delimiter(')content(palegreen3)delimiter(')>operator(:) string<delimiter(')content(#7ccd7c)delimiter(')>operator(,)
    string<delimiter(')content(palegreen4)delimiter(')>operator(:) string<delimiter(')content(#548b54)delimiter(')>operator(,)
    string<delimiter(')content(paleturquoise)delimiter(')>operator(:) string<delimiter(')content(#afeeee)delimiter(')>operator(,)
    string<delimiter(')content(paleturquoise1)delimiter(')>operator(:) string<delimiter(')content(#bbffff)delimiter(')>operator(,)
    string<delimiter(')content(paleturquoise2)delimiter(')>operator(:) string<delimiter(')content(#aeeeee)delimiter(')>operator(,)
    string<delimiter(')content(paleturquoise3)delimiter(')>operator(:) string<delimiter(')content(#96cdcd)delimiter(')>operator(,)
    string<delimiter(')content(paleturquoise4)delimiter(')>operator(:) string<delimiter(')content(#668b8b)delimiter(')>operator(,)
    string<delimiter(')content(palevioletred)delimiter(')>operator(:) string<delimiter(')content(#db7093)delimiter(')>operator(,)
    string<delimiter(')content(palevioletred1)delimiter(')>operator(:) string<delimiter(')content(#ff82ab)delimiter(')>operator(,)
    string<delimiter(')content(palevioletred2)delimiter(')>operator(:) string<delimiter(')content(#ee799f)delimiter(')>operator(,)
    string<delimiter(')content(palevioletred3)delimiter(')>operator(:) string<delimiter(')content(#cd6889)delimiter(')>operator(,)
    string<delimiter(')content(palevioletred4)delimiter(')>operator(:) string<delimiter(')content(#8b475d)delimiter(')>operator(,)
    string<delimiter(')content(papaya)delimiter(')>operator(:) string<delimiter(')content(#ffefd5)delimiter(')>operator(,)
    string<delimiter(')content(papayawhip)delimiter(')>operator(:) string<delimiter(')content(#ffefd5)delimiter(')>operator(,)
    string<delimiter(')content(peach)delimiter(')>operator(:) string<delimiter(')content(#ffdab9)delimiter(')>operator(,)
    string<delimiter(')content(peachpuff)delimiter(')>operator(:) string<delimiter(')content(#ffdab9)delimiter(')>operator(,)
    string<delimiter(')content(peachpuff1)delimiter(')>operator(:) string<delimiter(')content(#ffdab9)delimiter(')>operator(,)
    string<delimiter(')content(peachpuff2)delimiter(')>operator(:) string<delimiter(')content(#eecbad)delimiter(')>operator(,)
    string<delimiter(')content(peachpuff3)delimiter(')>operator(:) string<delimiter(')content(#cdaf95)delimiter(')>operator(,)
    string<delimiter(')content(peachpuff4)delimiter(')>operator(:) string<delimiter(')content(#8b7765)delimiter(')>operator(,)
    string<delimiter(')content(peru)delimiter(')>operator(:) string<delimiter(')content(#cd853f)delimiter(')>operator(,)
    string<delimiter(')content(pink)delimiter(')>operator(:) string<delimiter(')content(#ffc0cb)delimiter(')>operator(,)
    string<delimiter(')content(pink1)delimiter(')>operator(:) string<delimiter(')content(#ffb5c5)delimiter(')>operator(,)
    string<delimiter(')content(pink2)delimiter(')>operator(:) string<delimiter(')content(#eea9b8)delimiter(')>operator(,)
    string<delimiter(')content(pink3)delimiter(')>operator(:) string<delimiter(')content(#cd919e)delimiter(')>operator(,)
    string<delimiter(')content(pink4)delimiter(')>operator(:) string<delimiter(')content(#8b636c)delimiter(')>operator(,)
    string<delimiter(')content(plum)delimiter(')>operator(:) string<delimiter(')content(#dda0dd)delimiter(')>operator(,)
    string<delimiter(')content(plum1)delimiter(')>operator(:) string<delimiter(')content(#ffbbff)delimiter(')>operator(,)
    string<delimiter(')content(plum2)delimiter(')>operator(:) string<delimiter(')content(#eeaeee)delimiter(')>operator(,)
    string<delimiter(')content(plum3)delimiter(')>operator(:) string<delimiter(')content(#cd96cd)delimiter(')>operator(,)
    string<delimiter(')content(plum4)delimiter(')>operator(:) string<delimiter(')content(#8b668b)delimiter(')>operator(,)
    string<delimiter(')content(powder)delimiter(')>operator(:) string<delimiter(')content(#b0e0e6)delimiter(')>operator(,)
    string<delimiter(')content(powderblue)delimiter(')>operator(:) string<delimiter(')content(#b0e0e6)delimiter(')>operator(,)
    string<delimiter(')content(purple)delimiter(')>operator(:) string<delimiter(')content(#a020f0)delimiter(')>operator(,)
    string<delimiter(')content(purple1)delimiter(')>operator(:) string<delimiter(')content(#9b30ff)delimiter(')>operator(,)
    string<delimiter(')content(purple2)delimiter(')>operator(:) string<delimiter(')content(#912cee)delimiter(')>operator(,)
    string<delimiter(')content(purple3)delimiter(')>operator(:) string<delimiter(')content(#7d26cd)delimiter(')>operator(,)
    string<delimiter(')content(purple4)delimiter(')>operator(:) string<delimiter(')content(#551a8b)delimiter(')>operator(,)
    string<delimiter(')content(red)delimiter(')>operator(:) string<delimiter(')content(#ff0000)delimiter(')>operator(,)
    string<delimiter(')content(red1)delimiter(')>operator(:) string<delimiter(')content(#ff0000)delimiter(')>operator(,)
    string<delimiter(')content(red2)delimiter(')>operator(:) string<delimiter(')content(#ee0000)delimiter(')>operator(,)
    string<delimiter(')content(red3)delimiter(')>operator(:) string<delimiter(')content(#cd0000)delimiter(')>operator(,)
    string<delimiter(')content(red4)delimiter(')>operator(:) string<delimiter(')content(#8b0000)delimiter(')>operator(,)
    string<delimiter(')content(rosy)delimiter(')>operator(:) string<delimiter(')content(#bc8f8f)delimiter(')>operator(,)
    string<delimiter(')content(rosybrown)delimiter(')>operator(:) string<delimiter(')content(#bc8f8f)delimiter(')>operator(,)
    string<delimiter(')content(rosybrown1)delimiter(')>operator(:) string<delimiter(')content(#ffc1c1)delimiter(')>operator(,)
    string<delimiter(')content(rosybrown2)delimiter(')>operator(:) string<delimiter(')content(#eeb4b4)delimiter(')>operator(,)
    string<delimiter(')content(rosybrown3)delimiter(')>operator(:) string<delimiter(')content(#cd9b9b)delimiter(')>operator(,)
    string<delimiter(')content(rosybrown4)delimiter(')>operator(:) string<delimiter(')content(#8b6969)delimiter(')>operator(,)
    string<delimiter(')content(royal)delimiter(')>operator(:) string<delimiter(')content(#4169e1)delimiter(')>operator(,)
    string<delimiter(')content(royalblue)delimiter(')>operator(:) string<delimiter(')content(#4169e1)delimiter(')>operator(,)
    string<delimiter(')content(royalblue1)delimiter(')>operator(:) string<delimiter(')content(#4876ff)delimiter(')>operator(,)
    string<delimiter(')content(royalblue2)delimiter(')>operator(:) string<delimiter(')content(#436eee)delimiter(')>operator(,)
    string<delimiter(')content(royalblue3)delimiter(')>operator(:) string<delimiter(')content(#3a5fcd)delimiter(')>operator(,)
    string<delimiter(')content(royalblue4)delimiter(')>operator(:) string<delimiter(')content(#27408b)delimiter(')>operator(,)
    string<delimiter(')content(saddle)delimiter(')>operator(:) string<delimiter(')content(#8b4513)delimiter(')>operator(,)
    string<delimiter(')content(saddlebrown)delimiter(')>operator(:) string<delimiter(')content(#8b4513)delimiter(')>operator(,)
    string<delimiter(')content(salmon)delimiter(')>operator(:) string<delimiter(')content(#fa8072)delimiter(')>operator(,)
    string<delimiter(')content(salmon1)delimiter(')>operator(:) string<delimiter(')content(#ff8c69)delimiter(')>operator(,)
    string<delimiter(')content(salmon2)delimiter(')>operator(:) string<delimiter(')content(#ee8262)delimiter(')>operator(,)
    string<delimiter(')content(salmon3)delimiter(')>operator(:) string<delimiter(')content(#cd7054)delimiter(')>operator(,)
    string<delimiter(')content(salmon4)delimiter(')>operator(:) string<delimiter(')content(#8b4c39)delimiter(')>operator(,)
    string<delimiter(')content(sandy)delimiter(')>operator(:) string<delimiter(')content(#f4a460)delimiter(')>operator(,)
    string<delimiter(')content(sandybrown)delimiter(')>operator(:) string<delimiter(')content(#f4a460)delimiter(')>operator(,)
    string<delimiter(')content(sea)delimiter(')>operator(:) string<delimiter(')content(#2e8b57)delimiter(')>operator(,)
    string<delimiter(')content(seagreen)delimiter(')>operator(:) string<delimiter(')content(#2e8b57)delimiter(')>operator(,)
    string<delimiter(')content(seagreen1)delimiter(')>operator(:) string<delimiter(')content(#54ff9f)delimiter(')>operator(,)
    string<delimiter(')content(seagreen2)delimiter(')>operator(:) string<delimiter(')content(#4eee94)delimiter(')>operator(,)
    string<delimiter(')content(seagreen3)delimiter(')>operator(:) string<delimiter(')content(#43cd80)delimiter(')>operator(,)
    string<delimiter(')content(seagreen4)delimiter(')>operator(:) string<delimiter(')content(#2e8b57)delimiter(')>operator(,)
    string<delimiter(')content(seashell)delimiter(')>operator(:) string<delimiter(')content(#fff5ee)delimiter(')>operator(,)
    string<delimiter(')content(seashell1)delimiter(')>operator(:) string<delimiter(')content(#fff5ee)delimiter(')>operator(,)
    string<delimiter(')content(seashell2)delimiter(')>operator(:) string<delimiter(')content(#eee5de)delimiter(')>operator(,)
    string<delimiter(')content(seashell3)delimiter(')>operator(:) string<delimiter(')content(#cdc5bf)delimiter(')>operator(,)
    string<delimiter(')content(seashell4)delimiter(')>operator(:) string<delimiter(')content(#8b8682)delimiter(')>operator(,)
    string<delimiter(')content(sienna)delimiter(')>operator(:) string<delimiter(')content(#a0522d)delimiter(')>operator(,)
    string<delimiter(')content(sienna1)delimiter(')>operator(:) string<delimiter(')content(#ff8247)delimiter(')>operator(,)
    string<delimiter(')content(sienna2)delimiter(')>operator(:) string<delimiter(')content(#ee7942)delimiter(')>operator(,)
    string<delimiter(')content(sienna3)delimiter(')>operator(:) string<delimiter(')content(#cd6839)delimiter(')>operator(,)
    string<delimiter(')content(sienna4)delimiter(')>operator(:) string<delimiter(')content(#8b4726)delimiter(')>operator(,)
    string<delimiter(')content(sky)delimiter(')>operator(:) string<delimiter(')content(#87ceeb)delimiter(')>operator(,)
    string<delimiter(')content(skyblue)delimiter(')>operator(:) string<delimiter(')content(#87ceeb)delimiter(')>operator(,)
    string<delimiter(')content(skyblue1)delimiter(')>operator(:) string<delimiter(')content(#87ceff)delimiter(')>operator(,)
    string<delimiter(')content(skyblue2)delimiter(')>operator(:) string<delimiter(')content(#7ec0ee)delimiter(')>operator(,)
    string<delimiter(')content(skyblue3)delimiter(')>operator(:) string<delimiter(')content(#6ca6cd)delimiter(')>operator(,)
    string<delimiter(')content(skyblue4)delimiter(')>operator(:) string<delimiter(')content(#4a708b)delimiter(')>operator(,)
    string<delimiter(')content(slate)delimiter(')>operator(:) string<delimiter(')content(#6a5acd)delimiter(')>operator(,)
    string<delimiter(')content(slateblue)delimiter(')>operator(:) string<delimiter(')content(#6a5acd)delimiter(')>operator(,)
    string<delimiter(')content(slateblue1)delimiter(')>operator(:) string<delimiter(')content(#836fff)delimiter(')>operator(,)
    string<delimiter(')content(slateblue2)delimiter(')>operator(:) string<delimiter(')content(#7a67ee)delimiter(')>operator(,)
    string<delimiter(')content(slateblue3)delimiter(')>operator(:) string<delimiter(')content(#6959cd)delimiter(')>operator(,)
    string<delimiter(')content(slateblue4)delimiter(')>operator(:) string<delimiter(')content(#473c8b)delimiter(')>operator(,)
    string<delimiter(')content(slategray)delimiter(')>operator(:) string<delimiter(')content(#708090)delimiter(')>operator(,)
    string<delimiter(')content(slategray1)delimiter(')>operator(:) string<delimiter(')content(#c6e2ff)delimiter(')>operator(,)
    string<delimiter(')content(slategray2)delimiter(')>operator(:) string<delimiter(')content(#b9d3ee)delimiter(')>operator(,)
    string<delimiter(')content(slategray3)delimiter(')>operator(:) string<delimiter(')content(#9fb6cd)delimiter(')>operator(,)
    string<delimiter(')content(slategray4)delimiter(')>operator(:) string<delimiter(')content(#6c7b8b)delimiter(')>operator(,)
    string<delimiter(')content(slategrey)delimiter(')>operator(:) string<delimiter(')content(#708090)delimiter(')>operator(,)
    string<delimiter(')content(snow)delimiter(')>operator(:) string<delimiter(')content(#fffafa)delimiter(')>operator(,)
    string<delimiter(')content(snow1)delimiter(')>operator(:) string<delimiter(')content(#fffafa)delimiter(')>operator(,)
    string<delimiter(')content(snow2)delimiter(')>operator(:) string<delimiter(')content(#eee9e9)delimiter(')>operator(,)
    string<delimiter(')content(snow3)delimiter(')>operator(:) string<delimiter(')content(#cdc9c9)delimiter(')>operator(,)
    string<delimiter(')content(snow4)delimiter(')>operator(:) string<delimiter(')content(#8b8989)delimiter(')>operator(,)
    string<delimiter(')content(spring)delimiter(')>operator(:) string<delimiter(')content(#00ff7f)delimiter(')>operator(,)
    string<delimiter(')content(springgreen)delimiter(')>operator(:) string<delimiter(')content(#00ff7f)delimiter(')>operator(,)
    string<delimiter(')content(springgreen1)delimiter(')>operator(:) string<delimiter(')content(#00ff7f)delimiter(')>operator(,)
    string<delimiter(')content(springgreen2)delimiter(')>operator(:) string<delimiter(')content(#00ee76)delimiter(')>operator(,)
    string<delimiter(')content(springgreen3)delimiter(')>operator(:) string<delimiter(')content(#00cd66)delimiter(')>operator(,)
    string<delimiter(')content(springgreen4)delimiter(')>operator(:) string<delimiter(')content(#008b45)delimiter(')>operator(,)
    string<delimiter(')content(steel)delimiter(')>operator(:) string<delimiter(')content(#4682b4)delimiter(')>operator(,)
    string<delimiter(')content(steelblue)delimiter(')>operator(:) string<delimiter(')content(#4682b4)delimiter(')>operator(,)
    string<delimiter(')content(steelblue1)delimiter(')>operator(:) string<delimiter(')content(#63b8ff)delimiter(')>operator(,)
    string<delimiter(')content(steelblue2)delimiter(')>operator(:) string<delimiter(')content(#5cacee)delimiter(')>operator(,)
    string<delimiter(')content(steelblue3)delimiter(')>operator(:) string<delimiter(')content(#4f94cd)delimiter(')>operator(,)
    string<delimiter(')content(steelblue4)delimiter(')>operator(:) string<delimiter(')content(#36648b)delimiter(')>operator(,)
    string<delimiter(')content(tan)delimiter(')>operator(:) string<delimiter(')content(#d2b48c)delimiter(')>operator(,)
    string<delimiter(')content(tan1)delimiter(')>operator(:) string<delimiter(')content(#ffa54f)delimiter(')>operator(,)
    string<delimiter(')content(tan2)delimiter(')>operator(:) string<delimiter(')content(#ee9a49)delimiter(')>operator(,)
    string<delimiter(')content(tan3)delimiter(')>operator(:) string<delimiter(')content(#cd853f)delimiter(')>operator(,)
    string<delimiter(')content(tan4)delimiter(')>operator(:) string<delimiter(')content(#8b5a2b)delimiter(')>operator(,)
    string<delimiter(')content(thistle)delimiter(')>operator(:) string<delimiter(')content(#d8bfd8)delimiter(')>operator(,)
    string<delimiter(')content(thistle1)delimiter(')>operator(:) string<delimiter(')content(#ffe1ff)delimiter(')>operator(,)
    string<delimiter(')content(thistle2)delimiter(')>operator(:) string<delimiter(')content(#eed2ee)delimiter(')>operator(,)
    string<delimiter(')content(thistle3)delimiter(')>operator(:) string<delimiter(')content(#cdb5cd)delimiter(')>operator(,)
    string<delimiter(')content(thistle4)delimiter(')>operator(:) string<delimiter(')content(#8b7b8b)delimiter(')>operator(,)
    string<delimiter(')content(tomato)delimiter(')>operator(:) string<delimiter(')content(#ff6347)delimiter(')>operator(,)
    string<delimiter(')content(tomato1)delimiter(')>operator(:) string<delimiter(')content(#ff6347)delimiter(')>operator(,)
    string<delimiter(')content(tomato2)delimiter(')>operator(:) string<delimiter(')content(#ee5c42)delimiter(')>operator(,)
    string<delimiter(')content(tomato3)delimiter(')>operator(:) string<delimiter(')content(#cd4f39)delimiter(')>operator(,)
    string<delimiter(')content(tomato4)delimiter(')>operator(:) string<delimiter(')content(#8b3626)delimiter(')>operator(,)
    string<delimiter(')content(turquoise)delimiter(')>operator(:) string<delimiter(')content(#40e0d0)delimiter(')>operator(,)
    string<delimiter(')content(turquoise1)delimiter(')>operator(:) string<delimiter(')content(#00f5ff)delimiter(')>operator(,)
    string<delimiter(')content(turquoise2)delimiter(')>operator(:) string<delimiter(')content(#00e5ee)delimiter(')>operator(,)
    string<delimiter(')content(turquoise3)delimiter(')>operator(:) string<delimiter(')content(#00c5cd)delimiter(')>operator(,)
    string<delimiter(')content(turquoise4)delimiter(')>operator(:) string<delimiter(')content(#00868b)delimiter(')>operator(,)
    string<delimiter(')content(violet)delimiter(')>operator(:) string<delimiter(')content(#ee82ee)delimiter(')>operator(,)
    string<delimiter(')content(violetred)delimiter(')>operator(:) string<delimiter(')content(#d02090)delimiter(')>operator(,)
    string<delimiter(')content(violetred1)delimiter(')>operator(:) string<delimiter(')content(#ff3e96)delimiter(')>operator(,)
    string<delimiter(')content(violetred2)delimiter(')>operator(:) string<delimiter(')content(#ee3a8c)delimiter(')>operator(,)
    string<delimiter(')content(violetred3)delimiter(')>operator(:) string<delimiter(')content(#cd3278)delimiter(')>operator(,)
    string<delimiter(')content(violetred4)delimiter(')>operator(:) string<delimiter(')content(#8b2252)delimiter(')>operator(,)
    string<delimiter(')content(wheat)delimiter(')>operator(:) string<delimiter(')content(#f5deb3)delimiter(')>operator(,)
    string<delimiter(')content(wheat1)delimiter(')>operator(:) string<delimiter(')content(#ffe7ba)delimiter(')>operator(,)
    string<delimiter(')content(wheat2)delimiter(')>operator(:) string<delimiter(')content(#eed8ae)delimiter(')>operator(,)
    string<delimiter(')content(wheat3)delimiter(')>operator(:) string<delimiter(')content(#cdba96)delimiter(')>operator(,)
    string<delimiter(')content(wheat4)delimiter(')>operator(:) string<delimiter(')content(#8b7e66)delimiter(')>operator(,)
    string<delimiter(')content(white)delimiter(')>operator(:) string<delimiter(')content(#ffffff)delimiter(')>operator(,)
    string<delimiter(')content(whitesmoke)delimiter(')>operator(:) string<delimiter(')content(#f5f5f5)delimiter(')>operator(,)
    string<delimiter(')content(yellow)delimiter(')>operator(:) string<delimiter(')content(#ffff00)delimiter(')>operator(,)
    string<delimiter(')content(yellow1)delimiter(')>operator(:) string<delimiter(')content(#ffff00)delimiter(')>operator(,)
    string<delimiter(')content(yellow2)delimiter(')>operator(:) string<delimiter(')content(#eeee00)delimiter(')>operator(,)
    string<delimiter(')content(yellow3)delimiter(')>operator(:) string<delimiter(')content(#cdcd00)delimiter(')>operator(,)
    string<delimiter(')content(yellow4)delimiter(')>operator(:) string<delimiter(')content(#8b8b00)delimiter(')>operator(,)
    string<delimiter(')content(yellowgreen)delimiter(')>operator(:) string<delimiter(')content(#9acd32)delimiter(')>
operator(})

ident(TOKENS) operator(=) operator({)
    string<delimiter(')content(normal)delimiter(')>operator(:)           string<delimiter(')delimiter(')>operator(,)
    string<delimiter(')content(string)delimiter(')>operator(:)           string<delimiter(')content(String)delimiter(')>operator(,)
    string<delimiter(')content(number)delimiter(')>operator(:)           string<delimiter(')content(Number)delimiter(')>operator(,)
    string<delimiter(')content(float)delimiter(')>operator(:)            string<delimiter(')content(Number.Float)delimiter(')>operator(,)
    string<delimiter(')content(constant)delimiter(')>operator(:)         string<delimiter(')content(Name.Constant)delimiter(')>operator(,)
    string<delimiter(')content(number)delimiter(')>operator(:)           string<delimiter(')content(Number)delimiter(')>operator(,)
    string<delimiter(')content(statement)delimiter(')>operator(:)        operator(()string<delimiter(')content(Keyword)delimiter(')>operator(,) string<delimiter(')content(Name.Tag)delimiter(')>operator(\))operator(,)
    string<delimiter(')content(identifier)delimiter(')>operator(:)       string<delimiter(')content(Name.Variable)delimiter(')>operator(,)
    string<delimiter(')content(operator)delimiter(')>operator(:)         string<delimiter(')content(Operator.Word)delimiter(')>operator(,)
    string<delimiter(')content(label)delimiter(')>operator(:)            string<delimiter(')content(Name.Label)delimiter(')>operator(,)
    string<delimiter(')content(exception)delimiter(')>operator(:)        string<delimiter(')content(Name.Exception)delimiter(')>operator(,)
    string<delimiter(')content(function)delimiter(')>operator(:)         operator(()string<delimiter(')content(Name.Function)delimiter(')>operator(,) string<delimiter(')content(Name.Attribute)delimiter(')>operator(\))operator(,)
    string<delimiter(')content(preproc)delimiter(')>operator(:)          string<delimiter(')content(Comment.Preproc)delimiter(')>operator(,)
    string<delimiter(')content(comment)delimiter(')>operator(:)          string<delimiter(')content(Comment)delimiter(')>operator(,)
    string<delimiter(')content(type)delimiter(')>operator(:)             string<delimiter(')content(Keyword.Type)delimiter(')>operator(,)
    string<delimiter(')content(diffadd)delimiter(')>operator(:)          string<delimiter(')content(Generic.Inserted)delimiter(')>operator(,)
    string<delimiter(')content(diffdelete)delimiter(')>operator(:)       string<delimiter(')content(Generic.Deleted)delimiter(')>operator(,)
    string<delimiter(')content(error)delimiter(')>operator(:)            string<delimiter(')content(Generic.Error)delimiter(')>operator(,)
    string<delimiter(')content(errormsg)delimiter(')>operator(:)         string<delimiter(')content(Generic.Traceback)delimiter(')>operator(,)
    string<delimiter(')content(title)delimiter(')>operator(:)            operator(()string<delimiter(')content(Generic.Heading)delimiter(')>operator(,) string<delimiter(')content(Generic.Subheading)delimiter(')>operator(\))operator(,)
    string<delimiter(')content(underlined)delimiter(')>operator(:)       string<delimiter(')content(Generic.Emph)delimiter(')>operator(,)
    string<delimiter(')content(special)delimiter(')>operator(:)          string<delimiter(')content(Name.Entity)delimiter(')>operator(,)
    string<delimiter(')content(nontext)delimiter(')>operator(:)          string<delimiter(')content(Generic.Output)delimiter(')>
operator(})

ident(TOKEN_TYPES) operator(=) predefined(set)operator(()operator(\))
keyword(for) ident(token) keyword(in) ident(TOKENS)operator(.)ident(itervalues)operator(()operator(\))operator(:)
    keyword(if) keyword(not) predefined(isinstance)operator(()ident(token)operator(,) predefined(tuple)operator(\))operator(:)
        ident(token) operator(=) operator(()ident(token)operator(,)operator(\))
    keyword(for) ident(token) keyword(in) ident(token)operator(:)
        keyword(if) ident(token)operator(:)
            ident(TOKEN_TYPES)operator(.)ident(add)operator(()ident(token)operator(.)ident(split)operator(()string<delimiter(')content(.)delimiter(')>operator(\))operator([)integer(0)operator(])operator(\))


keyword(def) method(get_vim_color)operator(()ident(color)operator(\))operator(:)
    keyword(if) ident(color)operator(.)ident(startswith)operator(()string<delimiter(')content(#)delimiter(')>operator(\))operator(:)
        keyword(if) predefined(len)operator(()ident(color)operator(\)) operator(==) integer(7)operator(:)
            keyword(return) ident(color)
        keyword(else)operator(:)
            keyword(return) string<delimiter(')content(#%s0)delimiter(')> operator(%) string<delimiter(')content(0)delimiter(')>operator(.)ident(join)operator(()ident(color)operator(\))operator([)integer(1)operator(:)operator(])
    keyword(return) ident(COLORS)operator(.)ident(get)operator(()ident(color)operator(.)ident(lower)operator(()operator(\))operator(\))


keyword(def) method(find_colors)operator(()ident(code)operator(\))operator(:)
    ident(colors) operator(=) operator({)string<delimiter(')content(Normal)delimiter(')>operator(:) operator({)operator(})operator(})
    ident(bg_color) operator(=) predefined_constant(None)
    keyword(def) method(set)operator(()ident(attrib)operator(,) ident(value)operator(\))operator(:)
        keyword(if) ident(token) keyword(not) keyword(in) ident(colors)operator(:)
            ident(colors)operator([)ident(token)operator(]) operator(=) operator({)operator(})
        keyword(if) ident(key)operator(.)ident(startswith)operator(()string<delimiter(')content(gui)delimiter(')>operator(\)) keyword(or) ident(attrib) keyword(not) keyword(in) ident(colors)operator([)ident(token)operator(])operator(:)
            ident(colors)operator([)ident(token)operator(])operator([)ident(attrib)operator(]) operator(=) ident(value)

    keyword(for) ident(line) keyword(in) ident(code)operator(.)ident(splitlines)operator(()operator(\))operator(:)
        keyword(if) ident(line)operator(.)ident(startswith)operator(()string<delimiter(')content(")delimiter(')>operator(\))operator(:)
            keyword(continue)
        ident(parts) operator(=) ident(split_re)operator(.)ident(split)operator(()ident(line)operator(.)ident(strip)operator(()operator(\))operator(\))
        keyword(if) predefined(len)operator(()ident(parts)operator(\)) operator(==) integer(2) keyword(and) ident(parts)operator([)integer(0)operator(]) operator(==) string<delimiter(')content(set)delimiter(')>operator(:)
            ident(p) operator(=) ident(parts)operator([)integer(1)operator(])operator(.)ident(split)operator(()operator(\))
            keyword(if) ident(p)operator([)integer(0)operator(]) operator(==) string<delimiter(')content(background)delimiter(')> keyword(and) ident(p)operator([)integer(1)operator(]) operator(==) string<delimiter(')content(dark)delimiter(')>operator(:)
                ident(token) operator(=) string<delimiter(')content(Normal)delimiter(')>
                ident(bg_color) operator(=) string<delimiter(')content(#000000)delimiter(')>
        keyword(elif) predefined(len)operator(()ident(parts)operator(\)) operator(>) integer(2) keyword(and) \
           predefined(len)operator(()ident(parts)operator([)integer(0)operator(])operator(\)) operator(>=) integer(2) keyword(and) \
           string<delimiter(')content(highlight)delimiter(')>operator(.)ident(startswith)operator(()ident(parts)operator([)integer(0)operator(])operator(\))operator(:)
            ident(token) operator(=) ident(parts)operator([)integer(1)operator(])operator(.)ident(lower)operator(()operator(\))
            keyword(if) ident(token) keyword(not) keyword(in) ident(TOKENS)operator(:)
                keyword(continue)
            keyword(for) ident(item) keyword(in) ident(parts)operator([)integer(2)operator(:)operator(])operator(:)
                ident(p) operator(=) ident(item)operator(.)ident(split)operator(()string<delimiter(')content(=)delimiter(')>operator(,) integer(1)operator(\))
                keyword(if) keyword(not) predefined(len)operator(()ident(p)operator(\)) operator(==) integer(2)operator(:)
                    keyword(continue)
                ident(key)operator(,) ident(value) operator(=) ident(p)
                keyword(if) ident(key) keyword(in) operator(()string<delimiter(')content(ctermfg)delimiter(')>operator(,) string<delimiter(')content(guifg)delimiter(')>operator(\))operator(:)
                    ident(color) operator(=) ident(get_vim_color)operator(()ident(value)operator(\))
                    keyword(if) ident(color)operator(:)
                        predefined(set)operator(()string<delimiter(')content(color)delimiter(')>operator(,) ident(color)operator(\))
                keyword(elif) ident(key) keyword(in) operator(()string<delimiter(')content(ctermbg)delimiter(')>operator(,) string<delimiter(')content(guibg)delimiter(')>operator(\))operator(:)
                    ident(color) operator(=) ident(get_vim_color)operator(()ident(value)operator(\))
                    keyword(if) ident(color)operator(:)
                        predefined(set)operator(()string<delimiter(')content(bgcolor)delimiter(')>operator(,) ident(color)operator(\))
                keyword(elif) ident(key) keyword(in) operator(()string<delimiter(')content(term)delimiter(')>operator(,) string<delimiter(')content(cterm)delimiter(')>operator(,) string<delimiter(')content(gui)delimiter(')>operator(\))operator(:)
                    ident(items) operator(=) ident(value)operator(.)ident(split)operator(()string<delimiter(')content(,)delimiter(')>operator(\))
                    keyword(for) ident(item) keyword(in) ident(items)operator(:)
                        ident(item) operator(=) ident(item)operator(.)ident(lower)operator(()operator(\))
                        keyword(if) ident(item) operator(==) string<delimiter(')content(none)delimiter(')>operator(:)
                            predefined(set)operator(()string<delimiter(')content(noinherit)delimiter(')>operator(,) predefined_constant(True)operator(\))
                        keyword(elif) ident(item) operator(==) string<delimiter(')content(bold)delimiter(')>operator(:)
                            predefined(set)operator(()string<delimiter(')content(bold)delimiter(')>operator(,) predefined_constant(True)operator(\))
                        keyword(elif) ident(item) operator(==) string<delimiter(')content(underline)delimiter(')>operator(:)
                            predefined(set)operator(()string<delimiter(')content(underline)delimiter(')>operator(,) predefined_constant(True)operator(\))
                        keyword(elif) ident(item) operator(==) string<delimiter(')content(italic)delimiter(')>operator(:)
                            predefined(set)operator(()string<delimiter(')content(italic)delimiter(')>operator(,) predefined_constant(True)operator(\))

    keyword(if) ident(bg_color) keyword(is) keyword(not) predefined_constant(None) keyword(and) keyword(not) ident(colors)operator([)string<delimiter(')content(Normal)delimiter(')>operator(])operator(.)ident(get)operator(()string<delimiter(')content(bgcolor)delimiter(')>operator(\))operator(:)
        ident(colors)operator([)string<delimiter(')content(Normal)delimiter(')>operator(])operator([)string<delimiter(')content(bgcolor)delimiter(')>operator(]) operator(=) ident(bg_color)

    ident(color_map) operator(=) operator({)operator(})
    keyword(for) ident(token)operator(,) ident(styles) keyword(in) ident(colors)operator(.)ident(iteritems)operator(()operator(\))operator(:)
        keyword(if) ident(token) keyword(in) ident(TOKENS)operator(:)
            ident(tmp) operator(=) operator([)operator(])
            keyword(if) ident(styles)operator(.)ident(get)operator(()string<delimiter(')content(noinherit)delimiter(')>operator(\))operator(:)
                ident(tmp)operator(.)ident(append)operator(()string<delimiter(')content(noinherit)delimiter(')>operator(\))
            keyword(if) string<delimiter(')content(color)delimiter(')> keyword(in) ident(styles)operator(:)
                ident(tmp)operator(.)ident(append)operator(()ident(styles)operator([)string<delimiter(')content(color)delimiter(')>operator(])operator(\))
            keyword(if) string<delimiter(')content(bgcolor)delimiter(')> keyword(in) ident(styles)operator(:)
                ident(tmp)operator(.)ident(append)operator(()string<delimiter(')content(bg:)delimiter(')> operator(+) ident(styles)operator([)string<delimiter(')content(bgcolor)delimiter(')>operator(])operator(\))
            keyword(if) ident(styles)operator(.)ident(get)operator(()string<delimiter(')content(bold)delimiter(')>operator(\))operator(:)
                ident(tmp)operator(.)ident(append)operator(()string<delimiter(')content(bold)delimiter(')>operator(\))
            keyword(if) ident(styles)operator(.)ident(get)operator(()string<delimiter(')content(italic)delimiter(')>operator(\))operator(:)
                ident(tmp)operator(.)ident(append)operator(()string<delimiter(')content(italic)delimiter(')>operator(\))
            keyword(if) ident(styles)operator(.)ident(get)operator(()string<delimiter(')content(underline)delimiter(')>operator(\))operator(:)
                ident(tmp)operator(.)ident(append)operator(()string<delimiter(')content(underline)delimiter(')>operator(\))
            ident(tokens) operator(=) ident(TOKENS)operator([)ident(token)operator(])
            keyword(if) keyword(not) predefined(isinstance)operator(()ident(tokens)operator(,) predefined(tuple)operator(\))operator(:)
                ident(tokens) operator(=) operator(()ident(tokens)operator(,)operator(\))
            keyword(for) ident(token) keyword(in) ident(tokens)operator(:)
                ident(color_map)operator([)ident(token)operator(]) operator(=) string<delimiter(')content( )delimiter(')>operator(.)ident(join)operator(()ident(tmp)operator(\))

    ident(default_token) operator(=) ident(color_map)operator(.)ident(pop)operator(()string<delimiter(')delimiter(')>operator(\))
    keyword(return) ident(default_token)operator(,) ident(color_map)


keyword(class) class(StyleWriter)operator(()predefined(object)operator(\))operator(:)

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) ident(code)operator(,) ident(name)operator(\))operator(:)
        predefined_constant(self)operator(.)ident(code) operator(=) ident(code)
        predefined_constant(self)operator(.)ident(name) operator(=) ident(name)operator(.)ident(lower)operator(()operator(\))

    keyword(def) method(write_header)operator(()predefined_constant(self)operator(,) ident(out)operator(\))operator(:)
        ident(out)operator(.)ident(write)operator(()string<delimiter(')content(# -*- coding: utf-8 -*-)char(\\n)content(""")char(\\n)delimiter(')>operator(\))
        ident(out)operator(.)ident(write)operator(()string<delimiter(')content(    %s Colorscheme)char(\\n)delimiter(')> operator(%) predefined_constant(self)operator(.)ident(name)operator(.)ident(title)operator(()operator(\))operator(\))
        ident(out)operator(.)ident(write)operator(()string<delimiter(')content(    %s)char(\\n)char(\\n)delimiter(')> operator(%) operator(()string<delimiter(')content(~)delimiter(')> operator(*) operator(()predefined(len)operator(()predefined_constant(self)operator(.)ident(name)operator(\)) operator(+) integer(12)operator(\))operator(\))operator(\))
        ident(out)operator(.)ident(write)operator(()string<delimiter(')content(    Converted by %s)char(\\n)delimiter(')> operator(%) ident(SCRIPT_NAME)operator(\))
        ident(out)operator(.)ident(write)operator(()string<delimiter(')content(""")char(\\n)content(from pygments.style import Style)char(\\n)delimiter(')>operator(\))
        ident(out)operator(.)ident(write)operator(()string<delimiter(')content(from pygments.token import Token, %s)char(\\n)char(\\n)delimiter(')> operator(%) string<delimiter(')content(, )delimiter(')>operator(.)ident(join)operator(()ident(TOKEN_TYPES)operator(\))operator(\))
        ident(out)operator(.)ident(write)operator(()string<delimiter(')content(class %sStyle(Style\):)char(\\n)char(\\n)delimiter(')> operator(%) predefined_constant(self)operator(.)ident(name)operator(.)ident(title)operator(()operator(\))operator(\))

    keyword(def) method(write)operator(()predefined_constant(self)operator(,) ident(out)operator(\))operator(:)
        predefined_constant(self)operator(.)ident(write_header)operator(()ident(out)operator(\))
        ident(default_token)operator(,) ident(tokens) operator(=) ident(find_colors)operator(()predefined_constant(self)operator(.)ident(code)operator(\))
        ident(tokens) operator(=) ident(tokens)operator(.)ident(items)operator(()operator(\))
        ident(tokens)operator(.)ident(sort)operator(()keyword(lambda) ident(a)operator(,) ident(b)operator(:) predefined(cmp)operator(()predefined(len)operator(()ident(a)operator([)integer(0)operator(])operator(\))operator(,) predefined(len)operator(()ident(a)operator([)integer(1)operator(])operator(\))operator(\))operator(\))
        ident(bg_color) operator(=) operator([)ident(x)operator([)integer(3)operator(:)operator(]) keyword(for) ident(x) keyword(in) ident(default_token)operator(.)ident(split)operator(()operator(\)) keyword(if) ident(x)operator(.)ident(startswith)operator(()string<delimiter(')content(bg:)delimiter(')>operator(\))operator(])
        keyword(if) ident(bg_color)operator(:)
            ident(out)operator(.)ident(write)operator(()string<delimiter(')content(    background_color = %r)char(\\n)delimiter(')> operator(%) ident(bg_color)operator([)integer(0)operator(])operator(\))
        ident(out)operator(.)ident(write)operator(()string<delimiter(')content(    styles = {)char(\\n)delimiter(')>operator(\))
        ident(out)operator(.)ident(write)operator(()string<delimiter(')content(        %-20s%r)char(\\n)delimiter(')> operator(%) operator(()string<delimiter(')content(Token:)delimiter(')>operator(,) ident(default_token)operator(\))operator(\))
        keyword(for) ident(token)operator(,) ident(definition) keyword(in) ident(tokens)operator(:)
            keyword(if) ident(definition)operator(:)
                ident(out)operator(.)ident(write)operator(()string<delimiter(')content(        %-20s%r)char(\\n)delimiter(')> operator(%) operator(()ident(token) operator(+) string<delimiter(')content(:)delimiter(')>operator(,) ident(definition)operator(\))operator(\))
        ident(out)operator(.)ident(write)operator(()string<delimiter(')content(    })delimiter(')>operator(\))

    keyword(def) method(__repr__)operator(()predefined_constant(self)operator(\))operator(:)
        ident(out) operator(=) ident(StringIO)operator(()operator(\))
        predefined_constant(self)operator(.)ident(write_style)operator(()ident(out)operator(\))
        keyword(return) ident(out)operator(.)ident(getvalue)operator(()operator(\))


keyword(def) method(convert)operator(()ident(filename)operator(,) ident(stream)operator(=)predefined_constant(None)operator(\))operator(:)
    ident(name) operator(=) ident(path)operator(.)ident(basename)operator(()ident(filename)operator(\))
    keyword(if) ident(name)operator(.)ident(endswith)operator(()string<delimiter(')content(.vim)delimiter(')>operator(\))operator(:)
        ident(name) operator(=) ident(name)operator([)operator(:)operator(-)integer(4)operator(])
    ident(f) operator(=) predefined(file)operator(()ident(filename)operator(\))
    ident(code) operator(=) ident(f)operator(.)ident(read)operator(()operator(\))
    ident(f)operator(.)ident(close)operator(()operator(\))
    ident(writer) operator(=) ident(StyleWriter)operator(()ident(code)operator(,) ident(name)operator(\))
    keyword(if) ident(stream) keyword(is) keyword(not) predefined_constant(None)operator(:)
        ident(out) operator(=) ident(stream)
    keyword(else)operator(:)
        ident(out) operator(=) ident(StringIO)operator(()operator(\))
    ident(writer)operator(.)ident(write)operator(()ident(out)operator(\))
    keyword(if) ident(stream) keyword(is) predefined_constant(None)operator(:)
        keyword(return) ident(out)operator(.)ident(getvalue)operator(()operator(\))


keyword(def) method(main)operator(()operator(\))operator(:)
    keyword(if) predefined(len)operator(()ident(sys)operator(.)ident(argv)operator(\)) operator(!=) integer(2) keyword(or) ident(sys)operator(.)ident(argv)operator([)integer(1)operator(]) keyword(in) operator(()string<delimiter(')content(-h)delimiter(')>operator(,) string<delimiter(')content(--help)delimiter(')>operator(\))operator(:)
        keyword(print) string<delimiter(')content(Usage: %s <filename.vim>)delimiter(')> operator(%) ident(sys)operator(.)ident(argv)operator([)integer(0)operator(])
        keyword(return) integer(2)
    keyword(if) ident(sys)operator(.)ident(argv)operator([)integer(1)operator(]) keyword(in) operator(()string<delimiter(')content(-v)delimiter(')>operator(,) string<delimiter(')content(--version)delimiter(')>operator(\))operator(:)
        keyword(print) string<delimiter(')content(%s %s)delimiter(')> operator(%) operator(()ident(SCRIPT_NAME)operator(,) ident(SCRIPT_VERSION)operator(\))
        keyword(return)
    ident(filename) operator(=) ident(sys)operator(.)ident(argv)operator([)integer(1)operator(])
    keyword(if) keyword(not) operator(()ident(path)operator(.)ident(exists)operator(()ident(filename)operator(\)) keyword(and) ident(path)operator(.)ident(isfile)operator(()ident(filename)operator(\))operator(\))operator(:)
        keyword(print) string<delimiter(')content(Error: %s not found)delimiter(')> operator(%) ident(filename)
        keyword(return) integer(1)
    ident(convert)operator(()ident(filename)operator(,) ident(sys)operator(.)ident(stdout)operator(\))
    ident(sys)operator(.)ident(stdout)operator(.)ident(write)operator(()string<delimiter(')char(\\n)delimiter(')>operator(\))


keyword(if) ident(__name__) operator(==) string<delimiter(')content(__main__)delimiter(')>operator(:)
    ident(sys)operator(.)ident(exit)operator(()ident(main)operator(()operator(\)) keyword(or) integer(0)operator(\))
comment(#!/usr/bin/env python)
comment(# -*- coding: utf-8 -*-)
docstring<delimiter(""")content(
)content(    Pygments)content(
)content(    ~~~~~~~~)content(
)content(
)content(    Pygments is a syntax highlighting package written in Python.)content(
)content(
)content(    It is a generic syntax highlighter for general use in all kinds of software)content(
)content(    such as forum systems, wikis or other applications that need to prettify)content(
)content(    source code. Highlights are:)content(
)content(
)content(    * a wide range of common languages and markup formats is supported)content(
)content(    * special attention is paid to details, increasing quality by a fair amount)content(
)content(    * support for new languages and formats are added easily)content(
)content(    * a number of output formats, presently HTML, LaTeX, RTF, SVG and ANSI sequences)content(
)content(    * it is usable as a command-line tool and as a library)content(
)content(    * ... and it highlights even Brainfuck!)content(
)content(
)content(    The `Pygments tip`_ is installable with ``easy_install Pygments==dev``.)content(
)content(
)content(    .. _Pygments tip: http://dev.pocoo.org/hg/pygments-main/archive/tip.tar.gz#egg=Pygments-dev)content(
)content(
)content(    :copyright: Copyright 2006-2009 by the Pygments team, see AUTHORS.)content(
)content(    :license: BSD, see LICENSE for details.)content(
)delimiter(""")>

keyword(try)operator(:)
    keyword(from) include(setuptools) keyword(import) include(setup)operator(,) include(find_packages)
keyword(except) exception(ImportError)operator(:)
    keyword(from) include(distutils.core) keyword(import) include(setup)
    keyword(def) method(find_packages)operator(()operator(\))operator(:)
        keyword(return) operator([)
            string<delimiter(')content(pygments)delimiter(')>operator(,)
            string<delimiter(')content(pygments.lexers)delimiter(')>operator(,)
            string<delimiter(')content(pygments.formatters)delimiter(')>operator(,)
            string<delimiter(')content(pygments.styles)delimiter(')>operator(,)
            string<delimiter(')content(pygments.filters)delimiter(')>operator(,)
        operator(])

keyword(try)operator(:)
    keyword(from) include(distutils.command.build_py) keyword(import) include(build_py_2to3) keyword(as) ident(build_py)
keyword(except) exception(ImportError)operator(:)
    keyword(from) include(distutils.command.build_py) keyword(import) include(build_py)

ident(setup)operator(()
    ident(name) operator(=) string<delimiter(')content(Pygments)delimiter(')>operator(,)
    ident(version) operator(=) string<delimiter(')content(1.1)delimiter(')>operator(,)
    ident(url) operator(=) string<delimiter(')content(http://pygments.org/)delimiter(')>operator(,)
    ident(license) operator(=) string<delimiter(')content(BSD License)delimiter(')>operator(,)
    ident(author) operator(=) string<delimiter(')content(Georg Brandl)delimiter(')>operator(,)
    ident(author_email) operator(=) string<delimiter(')content(georg@python.org)delimiter(')>operator(,)
    ident(description) operator(=) string<delimiter(')content(Pygments is a syntax highlighting package written in Python.)delimiter(')>operator(,)
    ident(long_description) operator(=) ident(__doc__)operator(,)
    ident(keywords) operator(=) string<delimiter(')content(syntax highlighting)delimiter(')>operator(,)
    ident(packages) operator(=) ident(find_packages)operator(()operator(\))operator(,)
    ident(scripts) operator(=) operator([)string<delimiter(')content(pygmentize)delimiter(')>operator(])operator(,)
    ident(platforms) operator(=) string<delimiter(')content(any)delimiter(')>operator(,)
    ident(zip_safe) operator(=) predefined_constant(False)operator(,)
    ident(include_package_data) operator(=) predefined_constant(True)operator(,)
    ident(classifiers) operator(=) operator([)
        string<delimiter(')content(License :: OSI Approved :: BSD License)delimiter(')>operator(,)
        string<delimiter(')content(Intended Audience :: Developers)delimiter(')>operator(,)
        string<delimiter(')content(Intended Audience :: End Users/Desktop)delimiter(')>operator(,)
        string<delimiter(')content(Intended Audience :: System Administrators)delimiter(')>operator(,)
        string<delimiter(')content(Development Status :: 5 - Production/Stable)delimiter(')>operator(,)
        string<delimiter(')content(Programming Language :: Python)delimiter(')>operator(,)
        string<delimiter(')content(Operating System :: OS Independent)delimiter(')>operator(,)
    operator(])operator(,)
    ident(cmdclass) operator(=) operator({)string<delimiter(')content(build_py)delimiter(')>operator(:) ident(build_py)operator(})operator(,)
operator(\))
comment(# -*- coding: utf-8 -*-)
docstring<delimiter(""")content(
)content(    Pygments unit tests)content(
)content(    ~~~~~~~~~~~~~~~~~~)content(
)content(
)content(    Usage::)content(
)content(
)content(        python run.py [testfile ...])content(
)content(
)content(
)content(    :copyright: Copyright 2006-2009 by the Pygments team, see AUTHORS.)content(
)content(    :license: BSD, see LICENSE for details.)content(
)delimiter(""")>

keyword(import) include(sys)operator(,) include(os)
keyword(import) include(unittest)

keyword(from) include(os.path) keyword(import) include(dirname)operator(,) include(basename)operator(,) include(join)operator(,) include(abspath)

keyword(import) include(pygments)

keyword(try)operator(:)
    keyword(import) include(coverage)
keyword(except) exception(ImportError)operator(:)
    ident(coverage) operator(=) predefined_constant(None)

ident(testdir) operator(=) ident(abspath)operator(()ident(dirname)operator(()ident(__file__)operator(\))operator(\))

ident(failed) operator(=) operator([)operator(])
ident(total_test_count) operator(=) integer(0)
ident(error_test_count) operator(=) integer(0)


keyword(def) method(err)operator(()predefined(file)operator(,) ident(what)operator(,) ident(exc)operator(\))operator(:)
    keyword(print) operator(>>)ident(sys)operator(.)ident(stderr)operator(,) predefined(file)operator(,) string<delimiter(')content(failed %s:)delimiter(')> operator(%) ident(what)operator(,)
    keyword(print) operator(>>)ident(sys)operator(.)ident(stderr)operator(,) ident(exc)
    ident(failed)operator(.)ident(append)operator(()predefined(file)operator([)operator(:)operator(-)integer(3)operator(])operator(\))


keyword(class) class(QuietTestRunner)operator(()predefined(object)operator(\))operator(:)
    docstring<delimiter(""")content(Customized test runner for relatively quiet output)delimiter(""")>

    keyword(def) method(__init__)operator(()predefined_constant(self)operator(,) ident(testname)operator(,) ident(stream)operator(=)ident(sys)operator(.)ident(stderr)operator(\))operator(:)
        predefined_constant(self)operator(.)ident(testname) operator(=) ident(testname)
        predefined_constant(self)operator(.)ident(stream) operator(=) ident(unittest)operator(.)ident(_WritelnDecorator)operator(()ident(stream)operator(\))

    keyword(def) method(run)operator(()predefined_constant(self)operator(,) ident(test)operator(\))operator(:)
        keyword(global) ident(total_test_count)
        keyword(global) ident(error_test_count)
        ident(result) operator(=) ident(unittest)operator(.)ident(_TextTestResult)operator(()predefined_constant(self)operator(.)ident(stream)operator(,) predefined_constant(True)operator(,) integer(1)operator(\))
        ident(test)operator(()ident(result)operator(\))
        keyword(if) keyword(not) ident(result)operator(.)ident(wasSuccessful)operator(()operator(\))operator(:)
            predefined_constant(self)operator(.)ident(stream)operator(.)ident(write)operator(()string<delimiter(')content( FAIL:)delimiter(')>operator(\))
            ident(result)operator(.)ident(printErrors)operator(()operator(\))
            ident(failed)operator(.)ident(append)operator(()predefined_constant(self)operator(.)ident(testname)operator(\))
        keyword(else)operator(:)
            predefined_constant(self)operator(.)ident(stream)operator(.)ident(write)operator(()string<delimiter(')content( ok)char(\\n)delimiter(')>operator(\))
        ident(total_test_count) operator(+=) ident(result)operator(.)ident(testsRun)
        ident(error_test_count) operator(+=) predefined(len)operator(()ident(result)operator(.)ident(errors)operator(\)) operator(+) predefined(len)operator(()ident(result)operator(.)ident(failures)operator(\))
        keyword(return) ident(result)


keyword(def) method(run_tests)operator(()ident(with_coverage)operator(=)predefined_constant(False)operator(\))operator(:)
    comment(# needed to avoid confusion involving atexit handlers)
    keyword(import) include(logging)

    keyword(if) ident(sys)operator(.)ident(argv)operator([)integer(1)operator(:)operator(])operator(:)
        comment(# test only files given on cmdline)
        ident(files) operator(=) operator([)ident(entry) operator(+) string<delimiter(')content(.py)delimiter(')> keyword(for) ident(entry) keyword(in) ident(sys)operator(.)ident(argv)operator([)integer(1)operator(:)operator(]) keyword(if) ident(entry)operator(.)ident(startswith)operator(()string<delimiter(')content(test_)delimiter(')>operator(\))operator(])
    keyword(else)operator(:)
        ident(files) operator(=) operator([)ident(entry) keyword(for) ident(entry) keyword(in) ident(os)operator(.)ident(listdir)operator(()ident(testdir)operator(\))
                 keyword(if) operator(()ident(entry)operator(.)ident(startswith)operator(()string<delimiter(')content(test_)delimiter(')>operator(\)) keyword(and) ident(entry)operator(.)ident(endswith)operator(()string<delimiter(')content(.py)delimiter(')>operator(\))operator(\))operator(])
        ident(files)operator(.)ident(sort)operator(()operator(\))

    ident(WIDTH) operator(=) integer(85)

    keyword(print) operator(>>)ident(sys)operator(.)ident(stderr)operator(,) \
        operator(()string<delimiter(')content(Pygments %s Test Suite running%s, stand by...)delimiter(')> operator(%)
         operator(()ident(pygments)operator(.)ident(__version__)operator(,)
          ident(with_coverage) keyword(and) string<delimiter(")content( with coverage analysis)delimiter(")> keyword(or) string<delimiter(")delimiter(")>operator(\))operator(\))operator(.)ident(center)operator(()ident(WIDTH)operator(\))
    keyword(print) operator(>>)ident(sys)operator(.)ident(stderr)operator(,) operator(()string<delimiter(')content((using Python %s\))delimiter(')> operator(%) ident(sys)operator(.)ident(version)operator(.)ident(split)operator(()operator(\))operator([)integer(0)operator(])operator(\))operator(.)ident(center)operator(()ident(WIDTH)operator(\))
    keyword(print) operator(>>)ident(sys)operator(.)ident(stderr)operator(,) string<delimiter(')content(=)delimiter(')>operator(*)ident(WIDTH)

    keyword(if) ident(with_coverage)operator(:)
        ident(coverage)operator(.)ident(erase)operator(()operator(\))
        ident(coverage)operator(.)ident(start)operator(()operator(\))

    keyword(for) ident(testfile) keyword(in) ident(files)operator(:)
        ident(globs) operator(=) operator({)string<delimiter(')content(__file__)delimiter(')>operator(:) ident(join)operator(()ident(testdir)operator(,) ident(testfile)operator(\))operator(})
        keyword(try)operator(:)
            predefined(execfile)operator(()ident(join)operator(()ident(testdir)operator(,) ident(testfile)operator(\))operator(,) ident(globs)operator(\))
        keyword(except) exception(Exception)operator(,) ident(exc)operator(:)
            keyword(raise)
            ident(err)operator(()ident(testfile)operator(,) string<delimiter(')content(execfile)delimiter(')>operator(,) ident(exc)operator(\))
            keyword(continue)
        ident(sys)operator(.)ident(stderr)operator(.)ident(write)operator(()ident(testfile)operator([)operator(:)operator(-)integer(3)operator(]) operator(+) string<delimiter(')content(: )delimiter(')>operator(\))
        keyword(try)operator(:)
            ident(runner) operator(=) ident(QuietTestRunner)operator(()ident(testfile)operator([)operator(:)operator(-)integer(3)operator(])operator(\))
            comment(# make a test suite of all TestCases in the file)
            ident(tests) operator(=) operator([)operator(])
            keyword(for) ident(name)operator(,) ident(thing) keyword(in) ident(globs)operator(.)ident(iteritems)operator(()operator(\))operator(:)
                keyword(if) ident(name)operator(.)ident(endswith)operator(()string<delimiter(')content(Test)delimiter(')>operator(\))operator(:)
                    ident(tests)operator(.)ident(append)operator(()operator(()ident(name)operator(,) ident(unittest)operator(.)ident(makeSuite)operator(()ident(thing)operator(\))operator(\))operator(\))
            ident(tests)operator(.)ident(sort)operator(()operator(\))
            ident(suite) operator(=) ident(unittest)operator(.)ident(TestSuite)operator(()operator(\))
            ident(suite)operator(.)ident(addTests)operator(()operator([)ident(x)operator([)integer(1)operator(]) keyword(for) ident(x) keyword(in) ident(tests)operator(])operator(\))
            ident(runner)operator(.)ident(run)operator(()ident(suite)operator(\))
        keyword(except) exception(Exception)operator(,) ident(exc)operator(:)
            ident(err)operator(()ident(testfile)operator(,) string<delimiter(')content(running test)delimiter(')>operator(,) ident(exc)operator(\))

    keyword(print) operator(>>)ident(sys)operator(.)ident(stderr)operator(,) string<delimiter(')content(=)delimiter(')>operator(*)ident(WIDTH)
    keyword(if) ident(failed)operator(:)
        keyword(print) operator(>>)ident(sys)operator(.)ident(stderr)operator(,) string<delimiter(')content(%d of %d tests failed.)delimiter(')> operator(%) \
              operator(()ident(error_test_count)operator(,) ident(total_test_count)operator(\))
        keyword(print) operator(>>)ident(sys)operator(.)ident(stderr)operator(,) string<delimiter(')content(Tests failed in:)delimiter(')>operator(,) string<delimiter(')content(, )delimiter(')>operator(.)ident(join)operator(()ident(failed)operator(\))
        ident(ret) operator(=) integer(1)
    keyword(else)operator(:)
        keyword(if) ident(total_test_count) operator(==) integer(1)operator(:)
            keyword(print) operator(>>)ident(sys)operator(.)ident(stderr)operator(,) string<delimiter(')content(1 test happy.)delimiter(')>
        keyword(else)operator(:)
            keyword(print) operator(>>)ident(sys)operator(.)ident(stderr)operator(,) string<delimiter(')content(All %d tests happy.)delimiter(')> operator(%) ident(total_test_count)
        ident(ret) operator(=) integer(0)

    keyword(if) ident(with_coverage)operator(:)
        ident(coverage)operator(.)ident(stop)operator(()operator(\))
        ident(modules) operator(=) operator([)ident(mod) keyword(for) ident(name)operator(,) ident(mod) keyword(in) ident(sys)operator(.)ident(modules)operator(.)ident(iteritems)operator(()operator(\))
                   keyword(if) ident(name)operator(.)ident(startswith)operator(()string<delimiter(')content(pygments.)delimiter(')>operator(\)) keyword(and) ident(mod)operator(])
        ident(coverage)operator(.)ident(report)operator(()ident(modules)operator(\))

    keyword(return) ident(ret)


keyword(if) ident(__name__) operator(==) string<delimiter(')content(__main__)delimiter(')>operator(:)
    ident(with_coverage) operator(=) predefined_constant(False)
    keyword(if) ident(sys)operator(.)ident(argv)operator([)integer(1)operator(:)integer(2)operator(]) operator(==) operator([)string<delimiter(')content(-C)delimiter(')>operator(])operator(:)
        ident(with_coverage) operator(=) predefined(bool)operator(()ident(coverage)operator(\))
        keyword(del) ident(sys)operator(.)ident(argv)operator([)integer(1)operator(])
    ident(sys)operator(.)ident(exit)operator(()ident(run_tests)operator(()ident(with_coverage)operator(\))operator(\))
comment(# -*- coding: utf-8 -*-)
docstring<delimiter(""")content(
)content(    Pygments unit tests)content(
)content(    ~~~~~~~~~~~~~~~~~~)content(
)content(
)content(    Usage::)content(
)content(
)content(        python run.py [testfile ...])content(
)content(
)content(
)content(    :copyright: Copyright 2006-2009 by the Pygments team, see AUTHORS.)content(
)content(    :license: BSD, see LICENSE for details.)content(
)delimiter(""")>

keyword(import) include(sys)operator(,) include(os)

keyword(if) ident(sys)operator(.)ident(version_info) operator(>=) operator(()integer(3)operator(,)operator(\))operator(:)
    comment(# copy test suite over to "build/lib" and convert it)
    keyword(print) operator(()string<delimiter(')content(Copying and converting sources to build/lib/test...)delimiter(')>operator(\))
    keyword(from) include(distutils.util) keyword(import) include(copydir_run_2to3)
    ident(testroot) operator(=) ident(os)operator(.)ident(path)operator(.)ident(dirname)operator(()ident(__file__)operator(\))
    ident(newroot) operator(=) ident(os)operator(.)ident(path)operator(.)ident(join)operator(()ident(testroot)operator(,) string<delimiter(')content(..)delimiter(')>operator(,) string<delimiter(')content(build/lib/test)delimiter(')>operator(\))
    ident(copydir_run_2to3)operator(()ident(testroot)operator(,) ident(newroot)operator(\))
    ident(os)operator(.)ident(chdir)operator(()ident(os)operator(.)ident(path)operator(.)ident(join)operator(()ident(newroot)operator(,) string<delimiter(')content(..)delimiter(')>operator(\))operator(\))

keyword(try)operator(:)
    keyword(import) include(nose)
keyword(except) exception(ImportError)operator(:)
    keyword(print) operator(()string<delimiter(")content(nose is required to run the test suites)delimiter(")>operator(\))
    ident(sys)operator(.)ident(exit)operator(()integer(1)operator(\))

ident(nose)operator(.)ident(main)operator(()operator(\))
comment(# coding: utf-8)
docstring<delimiter(""")content(
)content(Support for Pygments tests)content(
)delimiter(""")>

keyword(import) include(os)


keyword(def) method(location)operator(()ident(mod_name)operator(\))operator(:)
    docstring<delimiter(""")content(
)content(    Return the file and directory that the code for *mod_name* is in.)content(
)content(    )delimiter(""")>
    ident(source) operator(=) ident(mod_name)operator(.)ident(endswith)operator(()string<delimiter(")content(pyc)delimiter(")>operator(\)) keyword(and) ident(mod_name)operator([)operator(:)operator(-)integer(1)operator(]) keyword(or) ident(mod_name)
    ident(source) operator(=) ident(os)operator(.)ident(path)operator(.)ident(abspath)operator(()ident(source)operator(\))
    keyword(return) ident(source)operator(,) ident(os)operator(.)ident(path)operator(.)ident(dirname)operator(()ident(source)operator(\))
comment(# -*- coding: utf-8 -*-)
docstring<delimiter(""")content(
)content(    Pygments basic API tests)content(
)content(    ~~~~~~~~~~~~~~~~~~~~~~~~)content(
)content(
)content(    :copyright: Copyright 2006-2009 by the Pygments team, see AUTHORS.)content(
)content(    :license: BSD, see LICENSE for details.)content(
)delimiter(""")>

keyword(import) include(os)
keyword(import) include(unittest)
keyword(import) include(random)

keyword(from) include(pygments) keyword(import) include(lexers)operator(,) include(formatters)operator(,) include(filters)operator(,) include(format)
keyword(from) include(pygments.token) keyword(import) include(_TokenType)operator(,) include(Text)
keyword(from) include(pygments.lexer) keyword(import) include(RegexLexer)
keyword(from) include(pygments.formatters.img) keyword(import) include(FontNotFound)
keyword(from) include(pygments.util) keyword(import) include(BytesIO)operator(,) include(StringIO)operator(,) include(bytes)operator(,) include(b)

keyword(import) include(support)

ident(TESTFILE)operator(,) ident(TESTDIR) operator(=) ident(support)operator(.)ident(location)operator(()ident(__file__)operator(\))

ident(test_content) operator(=) operator([)predefined(chr)operator(()ident(i)operator(\)) keyword(for) ident(i) keyword(in) predefined(xrange)operator(()integer(33)operator(,) integer(128)operator(\))operator(]) operator(*) integer(5)
ident(random)operator(.)ident(shuffle)operator(()ident(test_content)operator(\))
ident(test_content) operator(=) string<delimiter(')delimiter(')>operator(.)ident(join)operator(()ident(test_content)operator(\)) operator(+) string<delimiter(')char(\\n)delimiter(')>

keyword(class) class(LexersTest)operator(()ident(unittest)operator(.)ident(TestCase)operator(\))operator(:)

    keyword(def) method(test_import_all)operator(()predefined_constant(self)operator(\))operator(:)
        comment(# instantiate every lexer, to see if the token type defs are correct)
        keyword(for) ident(x) keyword(in) ident(lexers)operator(.)ident(LEXERS)operator(.)ident(keys)operator(()operator(\))operator(:)
            ident(c) operator(=) predefined(getattr)operator(()ident(lexers)operator(,) ident(x)operator(\))operator(()operator(\))

    keyword(def) method(test_lexer_classes)operator(()predefined_constant(self)operator(\))operator(:)
        ident(a) operator(=) predefined_constant(self)operator(.)ident(assert_)
        ident(ae) operator(=) predefined_constant(self)operator(.)ident(assertEquals)
        comment(# test that every lexer class has the correct public API)
        keyword(for) ident(lexer) keyword(in) ident(lexers)operator(.)ident(_iter_lexerclasses)operator(()operator(\))operator(:)
            ident(a)operator(()predefined(type)operator(()ident(lexer)operator(.)ident(name)operator(\)) keyword(is) predefined(str)operator(\))
            keyword(for) ident(attr) keyword(in) string<delimiter(')content(aliases)delimiter(')>operator(,) string<delimiter(')content(filenames)delimiter(')>operator(,) string<delimiter(')content(alias_filenames)delimiter(')>operator(,) string<delimiter(')content(mimetypes)delimiter(')>operator(:)
                ident(a)operator(()predefined(hasattr)operator(()ident(lexer)operator(,) ident(attr)operator(\))operator(\))
                ident(a)operator(()predefined(type)operator(()predefined(getattr)operator(()ident(lexer)operator(,) ident(attr)operator(\))operator(\)) keyword(is) predefined(list)operator(,) string<delimiter(")content(%s: %s attribute wrong)delimiter(")> operator(%)
                                                      operator(()ident(lexer)operator(,) ident(attr)operator(\))operator(\))
            ident(result) operator(=) ident(lexer)operator(.)ident(analyse_text)operator(()string<delimiter(")content(abc)delimiter(")>operator(\))
            ident(a)operator(()predefined(isinstance)operator(()ident(result)operator(,) predefined(float)operator(\)) keyword(and) float(0.0) operator(<=) ident(result) operator(<=) float(1.0)operator(\))

            ident(inst) operator(=) ident(lexer)operator(()ident(opt1)operator(=)string<delimiter(")content(val1)delimiter(")>operator(,) ident(opt2)operator(=)string<delimiter(")content(val2)delimiter(")>operator(\))
            keyword(if) predefined(issubclass)operator(()ident(lexer)operator(,) ident(RegexLexer)operator(\))operator(:)
                keyword(if) keyword(not) predefined(hasattr)operator(()ident(lexer)operator(,) string<delimiter(')content(_tokens)delimiter(')>operator(\))operator(:)
                    comment(# if there's no "_tokens", the lexer has to be one with)
                    comment(# multiple tokendef variants)
                    ident(a)operator(()ident(lexer)operator(.)ident(token_variants)operator(\))
                    keyword(for) ident(variant) keyword(in) ident(lexer)operator(.)ident(tokens)operator(:)
                        ident(a)operator(()string<delimiter(')content(root)delimiter(')> keyword(in) ident(lexer)operator(.)ident(tokens)operator([)ident(variant)operator(])operator(\))
                keyword(else)operator(:)
                    ident(a)operator(()string<delimiter(')content(root)delimiter(')> keyword(in) ident(lexer)operator(.)ident(_tokens)operator(,) string<delimiter(')content(%s has no root state)delimiter(')> operator(%) ident(lexer)operator(\))

            ident(tokens) operator(=) predefined(list)operator(()ident(inst)operator(.)ident(get_tokens)operator(()ident(test_content)operator(\))operator(\))
            ident(txt) operator(=) string<delimiter(")delimiter(")>
            keyword(for) ident(token) keyword(in) ident(tokens)operator(:)
                ident(a)operator(()predefined(isinstance)operator(()ident(token)operator(,) predefined(tuple)operator(\))operator(\))
                ident(a)operator(()predefined(isinstance)operator(()ident(token)operator([)integer(0)operator(])operator(,) ident(_TokenType)operator(\))operator(\))
                keyword(if) predefined(isinstance)operator(()ident(token)operator([)integer(1)operator(])operator(,) predefined(str)operator(\))operator(:)
                    keyword(print) predefined(repr)operator(()ident(token)operator([)integer(1)operator(])operator(\))
                ident(a)operator(()predefined(isinstance)operator(()ident(token)operator([)integer(1)operator(])operator(,) predefined(unicode)operator(\))operator(\))
                ident(txt) operator(+=) ident(token)operator([)integer(1)operator(])
            ident(ae)operator(()ident(txt)operator(,) ident(test_content)operator(,) string<delimiter(")content(%s lexer roundtrip failed: %r != %r)delimiter(")> operator(%)
                    operator(()ident(lexer)operator(.)ident(name)operator(,) ident(test_content)operator(,) ident(txt)operator(\))operator(\))

    keyword(def) method(test_get_lexers)operator(()predefined_constant(self)operator(\))operator(:)
        ident(a) operator(=) predefined_constant(self)operator(.)ident(assert_)
        ident(ae) operator(=) predefined_constant(self)operator(.)ident(assertEquals)
        comment(# test that the lexers functions work)

        keyword(for) ident(func)operator(,) ident(args) keyword(in) operator([)operator(()ident(lexers)operator(.)ident(get_lexer_by_name)operator(,) operator(()string<delimiter(")content(python)delimiter(")>operator(,)operator(\))operator(\))operator(,)
                           operator(()ident(lexers)operator(.)ident(get_lexer_for_filename)operator(,) operator(()string<delimiter(")content(test.py)delimiter(")>operator(,)operator(\))operator(\))operator(,)
                           operator(()ident(lexers)operator(.)ident(get_lexer_for_mimetype)operator(,) operator(()string<delimiter(")content(text/x-python)delimiter(")>operator(,)operator(\))operator(\))operator(,)
                           operator(()ident(lexers)operator(.)ident(guess_lexer)operator(,) operator(()string<delimiter(")content(#!/usr/bin/python -O)char(\\n)content(print)delimiter(")>operator(,)operator(\))operator(\))operator(,)
                           operator(()ident(lexers)operator(.)ident(guess_lexer_for_filename)operator(,) operator(()string<delimiter(")content(a.py)delimiter(")>operator(,) string<delimiter(")content(<%= @foo %>)delimiter(")>operator(\))operator(\))
                           operator(])operator(:)
            ident(x) operator(=) ident(func)operator(()ident(opt)operator(=)string<delimiter(")content(val)delimiter(")>operator(,) operator(*)ident(args)operator(\))
            ident(a)operator(()predefined(isinstance)operator(()ident(x)operator(,) ident(lexers)operator(.)ident(PythonLexer)operator(\))operator(\))
            ident(ae)operator(()ident(x)operator(.)ident(options)operator([)string<delimiter(")content(opt)delimiter(")>operator(])operator(,) string<delimiter(")content(val)delimiter(")>operator(\))


keyword(class) class(FiltersTest)operator(()ident(unittest)operator(.)ident(TestCase)operator(\))operator(:)

    keyword(def) method(test_basic)operator(()predefined_constant(self)operator(\))operator(:)
        ident(filter_args) operator(=) operator({)
            string<delimiter(')content(whitespace)delimiter(')>operator(:) operator({)string<delimiter(')content(spaces)delimiter(')>operator(:) predefined_constant(True)operator(,) string<delimiter(')content(tabs)delimiter(')>operator(:) predefined_constant(True)operator(,) string<delimiter(')content(newlines)delimiter(')>operator(:) predefined_constant(True)operator(})operator(,)
            string<delimiter(')content(highlight)delimiter(')>operator(:) operator({)string<delimiter(')content(names)delimiter(')>operator(:) operator([)string<delimiter(')content(isinstance)delimiter(')>operator(,) string<delimiter(')content(lexers)delimiter(')>operator(,) string<delimiter(')content(x)delimiter(')>operator(])operator(})operator(,)
        operator(})
        keyword(for) ident(x) keyword(in) ident(filters)operator(.)ident(FILTERS)operator(.)ident(keys)operator(()operator(\))operator(:)
            ident(lx) operator(=) ident(lexers)operator(.)ident(PythonLexer)operator(()operator(\))
            ident(lx)operator(.)ident(add_filter)operator(()ident(x)operator(,) operator(**)ident(filter_args)operator(.)ident(get)operator(()ident(x)operator(,) operator({)operator(})operator(\))operator(\))
            ident(text) operator(=) predefined(open)operator(()ident(TESTFILE)operator(,) string<delimiter(')content(rb)delimiter(')>operator(\))operator(.)ident(read)operator(()operator(\))operator(.)ident(decode)operator(()string<delimiter(')content(utf-8)delimiter(')>operator(\))
            ident(tokens) operator(=) predefined(list)operator(()ident(lx)operator(.)ident(get_tokens)operator(()ident(text)operator(\))operator(\))
            ident(roundtext) operator(=) string<delimiter(')delimiter(')>operator(.)ident(join)operator(()operator([)ident(t)operator([)integer(1)operator(]) keyword(for) ident(t) keyword(in) ident(tokens)operator(])operator(\))
            keyword(if) ident(x) keyword(not) keyword(in) operator(()string<delimiter(')content(whitespace)delimiter(')>operator(,) string<delimiter(')content(keywordcase)delimiter(')>operator(\))operator(:)
                comment(# these filters change the text)
                predefined_constant(self)operator(.)ident(assertEquals)operator(()ident(roundtext)operator(,) ident(text)operator(,)
                                  string<delimiter(")content(lexer roundtrip with %s filter failed)delimiter(")> operator(%) ident(x)operator(\))

    keyword(def) method(test_raiseonerror)operator(()predefined_constant(self)operator(\))operator(:)
        ident(lx) operator(=) ident(lexers)operator(.)ident(PythonLexer)operator(()operator(\))
        ident(lx)operator(.)ident(add_filter)operator(()string<delimiter(')content(raiseonerror)delimiter(')>operator(,) ident(excclass)operator(=)exception(RuntimeError)operator(\))
        predefined_constant(self)operator(.)ident(assertRaises)operator(()exception(RuntimeError)operator(,) predefined(list)operator(,) ident(lx)operator(.)ident(get_tokens)operator(()string<delimiter(')content($)delimiter(')>operator(\))operator(\))

    keyword(def) method(test_whitespace)operator(()predefined_constant(self)operator(\))operator(:)
        ident(lx) operator(=) ident(lexers)operator(.)ident(PythonLexer)operator(()operator(\))
        ident(lx)operator(.)ident(add_filter)operator(()string<delimiter(')content(whitespace)delimiter(')>operator(,) ident(spaces)operator(=)string<delimiter(')content(%)delimiter(')>operator(\))
        ident(text) operator(=) predefined(open)operator(()ident(TESTFILE)operator(,) string<delimiter(')content(rb)delimiter(')>operator(\))operator(.)ident(read)operator(()operator(\))operator(.)ident(decode)operator(()string<delimiter(')content(utf-8)delimiter(')>operator(\))
        ident(lxtext) operator(=) string<delimiter(')delimiter(')>operator(.)ident(join)operator(()operator([)ident(t)operator([)integer(1)operator(]) keyword(for) ident(t) keyword(in) predefined(list)operator(()ident(lx)operator(.)ident(get_tokens)operator(()ident(text)operator(\))operator(\))operator(])operator(\))
        predefined_constant(self)operator(.)ident(failIf)operator(()string<delimiter(')content( )delimiter(')> keyword(in) ident(lxtext)operator(\))

    keyword(def) method(test_keywordcase)operator(()predefined_constant(self)operator(\))operator(:)
        ident(lx) operator(=) ident(lexers)operator(.)ident(PythonLexer)operator(()operator(\))
        ident(lx)operator(.)ident(add_filter)operator(()string<delimiter(')content(keywordcase)delimiter(')>operator(,) ident(case)operator(=)string<delimiter(')content(capitalize)delimiter(')>operator(\))
        ident(text) operator(=) predefined(open)operator(()ident(TESTFILE)operator(,) string<delimiter(')content(rb)delimiter(')>operator(\))operator(.)ident(read)operator(()operator(\))operator(.)ident(decode)operator(()string<delimiter(')content(utf-8)delimiter(')>operator(\))
        ident(lxtext) operator(=) string<delimiter(')delimiter(')>operator(.)ident(join)operator(()operator([)ident(t)operator([)integer(1)operator(]) keyword(for) ident(t) keyword(in) predefined(list)operator(()ident(lx)operator(.)ident(get_tokens)operator(()ident(text)operator(\))operator(\))operator(])operator(\))
        predefined_constant(self)operator(.)ident(assert_)operator(()string<delimiter(')content(Def)delimiter(')> keyword(in) ident(lxtext) keyword(and) string<delimiter(')content(Class)delimiter(')> keyword(in) ident(lxtext)operator(\))

    keyword(def) method(test_codetag)operator(()predefined_constant(self)operator(\))operator(:)
        ident(lx) operator(=) ident(lexers)operator(.)ident(PythonLexer)operator(()operator(\))
        ident(lx)operator(.)ident(add_filter)operator(()string<delimiter(')content(codetagify)delimiter(')>operator(\))
        ident(text) operator(=) string<modifier(u)delimiter(')content(# BUG: text)delimiter(')>
        ident(tokens) operator(=) predefined(list)operator(()ident(lx)operator(.)ident(get_tokens)operator(()ident(text)operator(\))operator(\))
        predefined_constant(self)operator(.)ident(assertEquals)operator(()string<delimiter(')content(# )delimiter(')>operator(,) ident(tokens)operator([)integer(0)operator(])operator([)integer(1)operator(])operator(\))
        predefined_constant(self)operator(.)ident(assertEquals)operator(()string<delimiter(')content(BUG)delimiter(')>operator(,) ident(tokens)operator([)integer(1)operator(])operator([)integer(1)operator(])operator(\))

    keyword(def) method(test_codetag_boundary)operator(()predefined_constant(self)operator(\))operator(:)
        comment(# http://dev.pocoo.org/projects/pygments/ticket/368)
        ident(lx) operator(=) ident(lexers)operator(.)ident(PythonLexer)operator(()operator(\))
        ident(lx)operator(.)ident(add_filter)operator(()string<delimiter(')content(codetagify)delimiter(')>operator(\))
        ident(text) operator(=) string<modifier(u)delimiter(')content(# DEBUG: text)delimiter(')>
        ident(tokens) operator(=) predefined(list)operator(()ident(lx)operator(.)ident(get_tokens)operator(()ident(text)operator(\))operator(\))
        predefined_constant(self)operator(.)ident(assertEquals)operator(()string<delimiter(')content(# DEBUG: text)delimiter(')>operator(,) ident(tokens)operator([)integer(0)operator(])operator([)integer(1)operator(])operator(\))


keyword(class) class(FormattersTest)operator(()ident(unittest)operator(.)ident(TestCase)operator(\))operator(:)

    keyword(def) method(test_public_api)operator(()predefined_constant(self)operator(\))operator(:)
        ident(a) operator(=) predefined_constant(self)operator(.)ident(assert_)
        ident(ae) operator(=) predefined_constant(self)operator(.)ident(assertEquals)
        ident(ts) operator(=) predefined(list)operator(()ident(lexers)operator(.)ident(PythonLexer)operator(()operator(\))operator(.)ident(get_tokens)operator(()string<delimiter(")content(def f(\): pass)delimiter(")>operator(\))operator(\))
        ident(out) operator(=) ident(StringIO)operator(()operator(\))
        comment(# test that every formatter class has the correct public API)
        keyword(for) ident(formatter)operator(,) ident(info) keyword(in) ident(formatters)operator(.)ident(FORMATTERS)operator(.)ident(iteritems)operator(()operator(\))operator(:)
            ident(a)operator(()predefined(len)operator(()ident(info)operator(\)) operator(==) integer(4)operator(\))
            ident(a)operator(()ident(info)operator([)integer(0)operator(])operator(,) string<delimiter(")content(missing formatter name)delimiter(")>operator(\)) comment(# name)
            ident(a)operator(()ident(info)operator([)integer(1)operator(])operator(,) string<delimiter(")content(missing formatter aliases)delimiter(")>operator(\)) comment(# aliases)
            ident(a)operator(()ident(info)operator([)integer(3)operator(])operator(,) string<delimiter(")content(missing formatter docstring)delimiter(")>operator(\)) comment(# doc)

            keyword(if) ident(formatter)operator(.)ident(name) operator(==) string<delimiter(')content(Raw tokens)delimiter(')>operator(:)
                comment(# will not work with Unicode output file)
                keyword(continue)

            keyword(try)operator(:)
                ident(inst) operator(=) ident(formatter)operator(()ident(opt1)operator(=)string<delimiter(")content(val1)delimiter(")>operator(\))
            keyword(except) operator(()exception(ImportError)operator(,) ident(FontNotFound)operator(\))operator(:)
                keyword(continue)
            keyword(try)operator(:)
                ident(inst)operator(.)ident(get_style_defs)operator(()operator(\))
            keyword(except) exception(NotImplementedError)operator(:)
                comment(# may be raised by formatters for which it doesn't make sense)
                keyword(pass)
            ident(inst)operator(.)ident(format)operator(()ident(ts)operator(,) ident(out)operator(\))

    keyword(def) method(test_encodings)operator(()predefined_constant(self)operator(\))operator(:)
        keyword(from) include(pygments.formatters) keyword(import) include(HtmlFormatter)

        comment(# unicode output)
        ident(fmt) operator(=) ident(HtmlFormatter)operator(()operator(\))
        ident(tokens) operator(=) operator([)operator(()ident(Text)operator(,) string<modifier(u)delimiter(")content(ä)delimiter(")>operator(\))operator(])
        ident(out) operator(=) ident(format)operator(()ident(tokens)operator(,) ident(fmt)operator(\))
        predefined_constant(self)operator(.)ident(assert_)operator(()predefined(type)operator(()ident(out)operator(\)) keyword(is) predefined(unicode)operator(\))
        predefined_constant(self)operator(.)ident(assert_)operator(()string<modifier(u)delimiter(")content(ä)delimiter(")> keyword(in) ident(out)operator(\))

        comment(# encoding option)
        ident(fmt) operator(=) ident(HtmlFormatter)operator(()ident(encoding)operator(=)string<delimiter(")content(latin1)delimiter(")>operator(\))
        ident(tokens) operator(=) operator([)operator(()ident(Text)operator(,) string<modifier(u)delimiter(")content(ä)delimiter(")>operator(\))operator(])
        predefined_constant(self)operator(.)ident(assert_)operator(()string<modifier(u)delimiter(")content(ä)delimiter(")>operator(.)ident(encode)operator(()string<delimiter(")content(latin1)delimiter(")>operator(\)) keyword(in) ident(format)operator(()ident(tokens)operator(,) ident(fmt)operator(\))operator(\))

        comment(# encoding and outencoding option)
        ident(fmt) operator(=) ident(HtmlFormatter)operator(()ident(encoding)operator(=)string<delimiter(")content(latin1)delimiter(")>operator(,) ident(outencoding)operator(=)string<delimiter(")content(utf8)delimiter(")>operator(\))
        ident(tokens) operator(=) operator([)operator(()ident(Text)operator(,) string<modifier(u)delimiter(")content(ä)delimiter(")>operator(\))operator(])
        predefined_constant(self)operator(.)ident(assert_)operator(()string<modifier(u)delimiter(")content(ä)delimiter(")>operator(.)ident(encode)operator(()string<delimiter(")content(utf8)delimiter(")>operator(\)) keyword(in) ident(format)operator(()ident(tokens)operator(,) ident(fmt)operator(\))operator(\))

    keyword(def) method(test_styles)operator(()predefined_constant(self)operator(\))operator(:)
        keyword(from) include(pygments.formatters) keyword(import) include(HtmlFormatter)
        ident(fmt) operator(=) ident(HtmlFormatter)operator(()ident(style)operator(=)string<delimiter(")content(pastie)delimiter(")>operator(\))

    keyword(def) method(test_unicode_handling)operator(()predefined_constant(self)operator(\))operator(:)
        comment(# test that the formatter supports encoding and Unicode)
        ident(tokens) operator(=) predefined(list)operator(()ident(lexers)operator(.)ident(PythonLexer)operator(()ident(encoding)operator(=)string<delimiter(')content(utf-8)delimiter(')>operator(\))operator(.)
                      ident(get_tokens)operator(()string<delimiter(")content(def f(\): 'ä')delimiter(")>operator(\))operator(\))
        keyword(for) ident(formatter)operator(,) ident(info) keyword(in) ident(formatters)operator(.)ident(FORMATTERS)operator(.)ident(iteritems)operator(()operator(\))operator(:)
            keyword(try)operator(:)
                ident(inst) operator(=) ident(formatter)operator(()ident(encoding)operator(=)predefined_constant(None)operator(\))
            keyword(except) operator(()exception(ImportError)operator(,) ident(FontNotFound)operator(\))operator(:)
                comment(# some dependency or font not installed)
                keyword(continue)

            keyword(if) ident(formatter)operator(.)ident(name) operator(!=) string<delimiter(')content(Raw tokens)delimiter(')>operator(:)
                ident(out) operator(=) ident(format)operator(()ident(tokens)operator(,) ident(inst)operator(\))
                keyword(if) ident(formatter)operator(.)ident(unicodeoutput)operator(:)
                    predefined_constant(self)operator(.)ident(assert_)operator(()predefined(type)operator(()ident(out)operator(\)) keyword(is) predefined(unicode)operator(\))

                ident(inst) operator(=) ident(formatter)operator(()ident(encoding)operator(=)string<delimiter(')content(utf-8)delimiter(')>operator(\))
                ident(out) operator(=) ident(format)operator(()ident(tokens)operator(,) ident(inst)operator(\))
                predefined_constant(self)operator(.)ident(assert_)operator(()predefined(type)operator(()ident(out)operator(\)) keyword(is) predefined(bytes)operator(,) string<delimiter(')content(%s: %r)delimiter(')> operator(%) operator(()ident(formatter)operator(,) ident(out)operator(\))operator(\))
                comment(# Cannot test for encoding, since formatters may have to escape)
                comment(# non-ASCII characters.)
            keyword(else)operator(:)
                ident(inst) operator(=) ident(formatter)operator(()operator(\))
                ident(out) operator(=) ident(format)operator(()ident(tokens)operator(,) ident(inst)operator(\))
                predefined_constant(self)operator(.)ident(assert_)operator(()predefined(type)operator(()ident(out)operator(\)) keyword(is) predefined(bytes)operator(,) string<delimiter(')content(%s: %r)delimiter(')> operator(%) operator(()ident(formatter)operator(,) ident(out)operator(\))operator(\))

    keyword(def) method(test_get_formatters)operator(()predefined_constant(self)operator(\))operator(:)
        ident(a) operator(=) predefined_constant(self)operator(.)ident(assert_)
        ident(ae) operator(=) predefined_constant(self)operator(.)ident(assertEquals)
        comment(# test that the formatters functions work)
        ident(x) operator(=) ident(formatters)operator(.)ident(get_formatter_by_name)operator(()string<delimiter(")content(html)delimiter(")>operator(,) ident(opt)operator(=)string<delimiter(")content(val)delimiter(")>operator(\))
        ident(a)operator(()predefined(isinstance)operator(()ident(x)operator(,) ident(formatters)operator(.)ident(HtmlFormatter)operator(\))operator(\))
        ident(ae)operator(()ident(x)operator(.)ident(options)operator([)string<delimiter(")content(opt)delimiter(")>operator(])operator(,) string<delimiter(")content(val)delimiter(")>operator(\))

        ident(x) operator(=) ident(formatters)operator(.)ident(get_formatter_for_filename)operator(()string<delimiter(")content(a.html)delimiter(")>operator(,) ident(opt)operator(=)string<delimiter(")content(val)delimiter(")>operator(\))
        ident(a)operator(()predefined(isinstance)operator(()ident(x)operator(,) ident(formatters)operator(.)ident(HtmlFormatter)operator(\))operator(\))
        ident(ae)operator(()ident(x)operator(.)ident(options)operator([)string<delimiter(")content(opt)delimiter(")>operator(])operator(,) string<delimiter(")content(val)delimiter(")>operator(\))
comment(# -*- coding: utf-8 -*-)
docstring<delimiter(""")content(
)content(    Basic CLexer Test)content(
)content(    ~~~~~~~~~~~~~~~~~)content(
)content(
)content(    :copyright: Copyright 2006-2009 by the Pygments team, see AUTHORS.)content(
)content(    :license: BSD, see LICENSE for details.)content(
)delimiter(""")>

keyword(import) include(unittest)
keyword(import) include(os)

keyword(from) include(pygments.token) keyword(import) include(Text)operator(,) include(Number)
keyword(from) include(pygments.lexers) keyword(import) include(CLexer)


keyword(class) class(CLexerTest)operator(()ident(unittest)operator(.)ident(TestCase)operator(\))operator(:)

    keyword(def) method(setUp)operator(()predefined_constant(self)operator(\))operator(:)
        predefined_constant(self)operator(.)ident(lexer) operator(=) ident(CLexer)operator(()operator(\))

    keyword(def) method(testNumbers)operator(()predefined_constant(self)operator(\))operator(:)
        ident(code) operator(=) string<delimiter(')content(42 23.42 23. .42 023 0xdeadbeef 23e+42 42e-23)delimiter(')>
        ident(wanted) operator(=) operator([)operator(])
        keyword(for) ident(item) keyword(in) predefined(zip)operator(()operator([)ident(Number)operator(.)ident(Integer)operator(,) ident(Number)operator(.)ident(Float)operator(,) ident(Number)operator(.)ident(Float)operator(,)
                         ident(Number)operator(.)ident(Float)operator(,) ident(Number)operator(.)ident(Oct)operator(,) ident(Number)operator(.)ident(Hex)operator(,)
                         ident(Number)operator(.)ident(Float)operator(,) ident(Number)operator(.)ident(Float)operator(])operator(,) ident(code)operator(.)ident(split)operator(()operator(\))operator(\))operator(:)
            ident(wanted)operator(.)ident(append)operator(()ident(item)operator(\))
            ident(wanted)operator(.)ident(append)operator(()operator(()ident(Text)operator(,) string<delimiter(')content( )delimiter(')>operator(\))operator(\))
        ident(wanted) operator(=) operator([)operator(()ident(Text)operator(,) string<delimiter(')delimiter(')>operator(\))operator(]) operator(+) ident(wanted)operator([)operator(:)operator(-)integer(1)operator(]) operator(+) operator([)operator(()ident(Text)operator(,) string<delimiter(')char(\\n)delimiter(')>operator(\))operator(])
        predefined_constant(self)operator(.)ident(assertEqual)operator(()predefined(list)operator(()predefined_constant(self)operator(.)ident(lexer)operator(.)ident(get_tokens)operator(()ident(code)operator(\))operator(\))operator(,) ident(wanted)operator(\))


keyword(if) ident(__name__) operator(==) string<delimiter(')content(__main__)delimiter(')>operator(:)
    ident(unittest)operator(.)ident(main)operator(()operator(\))
comment(# -*- coding: utf-8 -*-)
docstring<delimiter(""")content(
)content(    Command line test)content(
)content(    ~~~~~~~~~~~~~~~~~)content(
)content(
)content(    :copyright: Copyright 2006-2009 by the Pygments team, see AUTHORS.)content(
)content(    :license: BSD, see LICENSE for details.)content(
)delimiter(""")>

comment(# Test the command line interface)

keyword(import) include(sys)operator(,) include(os)
keyword(import) include(unittest)
keyword(import) include(StringIO)

keyword(from) include(pygments) keyword(import) include(highlight)
keyword(from) include(pygments.cmdline) keyword(import) include(main) keyword(as) ident(cmdline_main)

keyword(import) include(support)

ident(TESTFILE)operator(,) ident(TESTDIR) operator(=) ident(support)operator(.)ident(location)operator(()ident(__file__)operator(\))


keyword(def) method(run_cmdline)operator(()operator(*)ident(args)operator(\))operator(:)
    ident(saved_stdout) operator(=) ident(sys)operator(.)ident(stdout)
    ident(saved_stderr) operator(=) ident(sys)operator(.)ident(stderr)
    ident(new_stdout) operator(=) ident(sys)operator(.)ident(stdout) operator(=) ident(StringIO)operator(.)ident(StringIO)operator(()operator(\))
    ident(new_stderr) operator(=) ident(sys)operator(.)ident(stderr) operator(=) ident(StringIO)operator(.)ident(StringIO)operator(()operator(\))
    keyword(try)operator(:)
        ident(ret) operator(=) ident(cmdline_main)operator(()operator([)string<delimiter(")content(pygmentize)delimiter(")>operator(]) operator(+) predefined(list)operator(()ident(args)operator(\))operator(\))
    keyword(finally)operator(:)
        ident(sys)operator(.)ident(stdout) operator(=) ident(saved_stdout)
        ident(sys)operator(.)ident(stderr) operator(=) ident(saved_stderr)
    keyword(return) operator(()ident(ret)operator(,) ident(new_stdout)operator(.)ident(getvalue)operator(()operator(\))operator(,) ident(new_stderr)operator(.)ident(getvalue)operator(()operator(\))operator(\))


keyword(class) class(CmdLineTest)operator(()ident(unittest)operator(.)ident(TestCase)operator(\))operator(:)

    keyword(def) method(test_L_opt)operator(()predefined_constant(self)operator(\))operator(:)
        ident(c)operator(,) ident(o)operator(,) ident(e) operator(=) ident(run_cmdline)operator(()string<delimiter(")content(-L)delimiter(")>operator(\))
        predefined_constant(self)operator(.)ident(assertEquals)operator(()ident(c)operator(,) integer(0)operator(\))
        predefined_constant(self)operator(.)ident(assert_)operator(()string<delimiter(")content(Lexers)delimiter(")> keyword(in) ident(o) keyword(and) string<delimiter(")content(Formatters)delimiter(")> keyword(in) ident(o) keyword(and)
                     string<delimiter(")content(Filters)delimiter(")> keyword(in) ident(o) keyword(and) string<delimiter(")content(Styles)delimiter(")> keyword(in) ident(o)operator(\))
        ident(c)operator(,) ident(o)operator(,) ident(e) operator(=) ident(run_cmdline)operator(()string<delimiter(")content(-L)delimiter(")>operator(,) string<delimiter(")content(lexer)delimiter(")>operator(\))
        predefined_constant(self)operator(.)ident(assertEquals)operator(()ident(c)operator(,) integer(0)operator(\))
        predefined_constant(self)operator(.)ident(assert_)operator(()string<delimiter(")content(Lexers)delimiter(")> keyword(in) ident(o) keyword(and) string<delimiter(")content(Formatters)delimiter(")> keyword(not) keyword(in) ident(o)operator(\))
        ident(c)operator(,) ident(o)operator(,) ident(e) operator(=) ident(run_cmdline)operator(()string<delimiter(")content(-L)delimiter(")>operator(,) string<delimiter(")content(lexers)delimiter(")>operator(\))
        predefined_constant(self)operator(.)ident(assertEquals)operator(()ident(c)operator(,) integer(0)operator(\))

    keyword(def) method(test_O_opt)operator(()predefined_constant(self)operator(\))operator(:)
        ident(filename) operator(=) ident(TESTFILE)
        ident(c)operator(,) ident(o)operator(,) ident(e) operator(=) ident(run_cmdline)operator(()string<delimiter(")content(-Ofull=1,linenos=true,foo=bar)delimiter(")>operator(,)
                              string<delimiter(")content(-fhtml)delimiter(")>operator(,) ident(filename)operator(\))
        predefined_constant(self)operator(.)ident(assertEquals)operator(()ident(c)operator(,) integer(0)operator(\))
        predefined_constant(self)operator(.)ident(assert_)operator(()string<delimiter(")content(<html)delimiter(")> keyword(in) ident(o)operator(\))
        predefined_constant(self)operator(.)ident(assert_)operator(()string<delimiter(')content(class="linenos")delimiter(')> keyword(in) ident(o)operator(\))

    keyword(def) method(test_P_opt)operator(()predefined_constant(self)operator(\))operator(:)
        ident(filename) operator(=) ident(TESTFILE)
        ident(c)operator(,) ident(o)operator(,) ident(e) operator(=) ident(run_cmdline)operator(()string<delimiter(")content(-Pfull)delimiter(")>operator(,) string<delimiter(")content(-Ptitle=foo, bar=baz=,)delimiter(")>operator(,)
                              string<delimiter(")content(-fhtml)delimiter(")>operator(,) ident(filename)operator(\))
        predefined_constant(self)operator(.)ident(assertEquals)operator(()ident(c)operator(,) integer(0)operator(\))
        predefined_constant(self)operator(.)ident(assert_)operator(()string<delimiter(")content(<title>foo, bar=baz=,</title>)delimiter(")> keyword(in) ident(o)operator(\))

    keyword(def) method(test_F_opt)operator(()predefined_constant(self)operator(\))operator(:)
        ident(filename) operator(=) ident(TESTFILE)
        ident(c)operator(,) ident(o)operator(,) ident(e) operator(=) ident(run_cmdline)operator(()string<delimiter(")content(-Fhighlight:tokentype=Name.Blubb,)delimiter(")>
                              string<delimiter(")content(names=TESTFILE filename)delimiter(")>operator(,)
                              string<delimiter(")content(-fhtml)delimiter(")>operator(,) ident(filename)operator(\))
        predefined_constant(self)operator(.)ident(assertEquals)operator(()ident(c)operator(,) integer(0)operator(\))
        predefined_constant(self)operator(.)ident(assert_)operator(()string<delimiter(')content(<span class="n-Blubb)delimiter(')> keyword(in) ident(o)operator(\))

    keyword(def) method(test_H_opt)operator(()predefined_constant(self)operator(\))operator(:)
        ident(c)operator(,) ident(o)operator(,) ident(e) operator(=) ident(run_cmdline)operator(()string<delimiter(")content(-H)delimiter(")>operator(,) string<delimiter(")content(formatter)delimiter(")>operator(,) string<delimiter(")content(html)delimiter(")>operator(\))
        predefined_constant(self)operator(.)ident(assertEquals)operator(()ident(c)operator(,) integer(0)operator(\))
        predefined_constant(self)operator(.)ident(assert_)operator(()string<delimiter(')content(HTML)delimiter(')> keyword(in) ident(o)operator(\))

    keyword(def) method(test_S_opt)operator(()predefined_constant(self)operator(\))operator(:)
        ident(c)operator(,) ident(o)operator(,) ident(e) operator(=) ident(run_cmdline)operator(()string<delimiter(")content(-S)delimiter(")>operator(,) string<delimiter(")content(default)delimiter(")>operator(,) string<delimiter(")content(-f)delimiter(")>operator(,) string<delimiter(")content(html)delimiter(")>operator(,) string<delimiter(")content(-O)delimiter(")>operator(,) string<delimiter(")content(linenos=1)delimiter(")>operator(\))
        predefined_constant(self)operator(.)ident(assertEquals)operator(()ident(c)operator(,) integer(0)operator(\))

    keyword(def) method(test_invalid_opts)operator(()predefined_constant(self)operator(\))operator(:)
        keyword(for) ident(opts) keyword(in) operator([)operator(()string<delimiter(")content(-L)delimiter(")>operator(,) string<delimiter(")content(-lpy)delimiter(")>operator(\))operator(,) operator(()string<delimiter(")content(-L)delimiter(")>operator(,) string<delimiter(")content(-fhtml)delimiter(")>operator(\))operator(,) operator(()string<delimiter(")content(-L)delimiter(")>operator(,) string<delimiter(")content(-Ox)delimiter(")>operator(\))operator(,)
                     operator(()string<delimiter(")content(-a)delimiter(")>operator(,)operator(\))operator(,) operator(()string<delimiter(")content(-Sst)delimiter(")>operator(,) string<delimiter(")content(-lpy)delimiter(")>operator(\))operator(,) operator(()string<delimiter(")content(-H)delimiter(")>operator(,)operator(\))operator(,)
                     operator(()string<delimiter(")content(-H)delimiter(")>operator(,) string<delimiter(")content(formatter)delimiter(")>operator(\))operator(,)operator(])operator(:)
            predefined_constant(self)operator(.)ident(assert_)operator(()ident(run_cmdline)operator(()operator(*)ident(opts)operator(\))operator([)integer(0)operator(]) operator(==) integer(2)operator(\))

    keyword(def) method(test_normal)operator(()predefined_constant(self)operator(\))operator(:)
        comment(# test that cmdline gives the same output as library api)
        keyword(from) include(pygments.lexers) keyword(import) include(PythonLexer)
        keyword(from) include(pygments.formatters) keyword(import) include(HtmlFormatter)
        ident(filename) operator(=) ident(TESTFILE)
        ident(code) operator(=) predefined(open)operator(()ident(filename)operator(,) string<delimiter(')content(rb)delimiter(')>operator(\))operator(.)ident(read)operator(()operator(\))

        ident(output) operator(=) ident(highlight)operator(()ident(code)operator(,) ident(PythonLexer)operator(()operator(\))operator(,) ident(HtmlFormatter)operator(()operator(\))operator(\))

        ident(c)operator(,) ident(o)operator(,) ident(e) operator(=) ident(run_cmdline)operator(()string<delimiter(")content(-lpython)delimiter(")>operator(,) string<delimiter(")content(-fhtml)delimiter(")>operator(,) ident(filename)operator(\))

        predefined_constant(self)operator(.)ident(assertEquals)operator(()ident(o)operator(,) ident(output)operator(\))
        predefined_constant(self)operator(.)ident(assertEquals)operator(()ident(e)operator(,) string<delimiter(")delimiter(")>operator(\))
        predefined_constant(self)operator(.)ident(assertEquals)operator(()ident(c)operator(,) integer(0)operator(\))


keyword(if) ident(__name__) operator(==) string<delimiter(')content(__main__)delimiter(')>operator(:)
    ident(unittest)operator(.)ident(main)operator(()operator(\))
comment(# -*- coding: utf-8 -*-)
docstring<delimiter(""")content(
)content(    Pygments tests with example files)content(
)content(    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~)content(
)content(
)content(    :copyright: Copyright 2006-2009 by the Pygments team, see AUTHORS.)content(
)content(    :license: BSD, see LICENSE for details.)content(
)delimiter(""")>

keyword(import) include(os)
keyword(import) include(unittest)

keyword(from) include(pygments) keyword(import) include(highlight)
keyword(from) include(pygments.lexers) keyword(import) include(get_lexer_for_filename)operator(,) include(get_lexer_by_name)
keyword(from) include(pygments.token) keyword(import) include(Error)
keyword(from) include(pygments.util) keyword(import) include(ClassNotFound)operator(,) include(b)


comment(# generate methods)
keyword(def) method(test_example_files)operator(()operator(\))operator(:)
    ident(testdir) operator(=) ident(os)operator(.)ident(path)operator(.)ident(dirname)operator(()ident(__file__)operator(\))
    keyword(for) ident(fn) keyword(in) ident(os)operator(.)ident(listdir)operator(()ident(os)operator(.)ident(path)operator(.)ident(join)operator(()ident(testdir)operator(,) string<delimiter(')content(examplefiles)delimiter(')>operator(\))operator(\))operator(:)
        ident(absfn) operator(=) ident(os)operator(.)ident(path)operator(.)ident(join)operator(()ident(testdir)operator(,) string<delimiter(')content(examplefiles)delimiter(')>operator(,) ident(fn)operator(\))
        keyword(if) keyword(not) ident(os)operator(.)ident(path)operator(.)ident(isfile)operator(()ident(absfn)operator(\))operator(:)
            keyword(continue)

        keyword(try)operator(:)
            ident(lx) operator(=) ident(get_lexer_for_filename)operator(()ident(absfn)operator(\))
        keyword(except) ident(ClassNotFound)operator(:)
            keyword(if) string<delimiter(")content(_)delimiter(")> keyword(not) keyword(in) ident(fn)operator(:)
                keyword(raise) exception(AssertionError)operator(()string<delimiter(')content(file %r has no registered extension, )delimiter(')>
                                     string<delimiter(')content(nor is of the form <lexer>_filename )delimiter(')>
                                     string<delimiter(')content(for overriding, thus no lexer found.)delimiter(')>
                                    operator(%) ident(fn)operator(\))
            keyword(try)operator(:)
                ident(name)operator(,) ident(rest) operator(=) ident(fn)operator(.)ident(split)operator(()string<delimiter(")content(_)delimiter(")>operator(,) integer(1)operator(\))
                ident(lx) operator(=) ident(get_lexer_by_name)operator(()ident(name)operator(\))
            keyword(except) ident(ClassNotFound)operator(:)
                keyword(raise) exception(AssertionError)operator(()string<delimiter(')content(no lexer found for file %r)delimiter(')> operator(%) ident(fn)operator(\))
        keyword(yield) ident(check_lexer)operator(,) ident(lx)operator(,) ident(absfn)

keyword(def) method(check_lexer)operator(()ident(lx)operator(,) ident(absfn)operator(\))operator(:)
    ident(text) operator(=) predefined(open)operator(()ident(absfn)operator(,) string<delimiter(')content(rb)delimiter(')>operator(\))operator(.)ident(read)operator(()operator(\))
    ident(text) operator(=) ident(text)operator(.)ident(strip)operator(()ident(b)operator(()string<delimiter(')char(\\n)delimiter(')>operator(\))operator(\)) operator(+) ident(b)operator(()string<delimiter(')char(\\n)delimiter(')>operator(\))
    keyword(try)operator(:)
        ident(text) operator(=) ident(text)operator(.)ident(decode)operator(()string<delimiter(')content(utf-8)delimiter(')>operator(\))
    keyword(except) exception(UnicodeError)operator(:)
        ident(text) operator(=) ident(text)operator(.)ident(decode)operator(()string<delimiter(')content(latin1)delimiter(')>operator(\))
    ident(ntext) operator(=) operator([)operator(])
    keyword(for) predefined(type)operator(,) ident(val) keyword(in) ident(lx)operator(.)ident(get_tokens)operator(()ident(text)operator(\))operator(:)
        ident(ntext)operator(.)ident(append)operator(()ident(val)operator(\))
        keyword(assert) predefined(type) operator(!=) ident(Error)operator(,) string<delimiter(')content(lexer %s generated error token for %s)delimiter(')> operator(%) \
                operator(()ident(lx)operator(,) ident(absfn)operator(\))
    keyword(if) string<modifier(u)delimiter(')delimiter(')>operator(.)ident(join)operator(()ident(ntext)operator(\)) operator(!=) ident(text)operator(:)
        keyword(raise) exception(AssertionError)operator(()string<delimiter(')content(round trip failed for )delimiter(')> operator(+) ident(absfn)operator(\))
comment(# -*- coding: utf-8 -*-)
docstring<delimiter(""")content(
)content(    Pygments HTML formatter tests)content(
)content(    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~)content(
)content(
)content(    :copyright: Copyright 2006-2009 by the Pygments team, see AUTHORS.)content(
)content(    :license: BSD, see LICENSE for details.)content(
)delimiter(""")>

keyword(import) include(os)
keyword(import) include(re)
keyword(import) include(unittest)
keyword(import) include(StringIO)
keyword(import) include(tempfile)
keyword(from) include(os.path) keyword(import) include(join)operator(,) include(dirname)operator(,) include(isfile)operator(,) include(abspath)

keyword(from) include(pygments.lexers) keyword(import) include(PythonLexer)
keyword(from) include(pygments.formatters) keyword(import) include(HtmlFormatter)operator(,) include(NullFormatter)
keyword(from) include(pygments.formatters.html) keyword(import) include(escape_html)

keyword(import) include(support)

ident(TESTFILE)operator(,) ident(TESTDIR) operator(=) ident(support)operator(.)ident(location)operator(()ident(__file__)operator(\))

ident(tokensource) operator(=) predefined(list)operator(()ident(PythonLexer)operator(()ident(encoding)operator(=)string<delimiter(')content(utf-8)delimiter(')>operator(\))operator(.)ident(get_tokens)operator(()predefined(open)operator(()ident(TESTFILE)operator(\))operator(.)ident(read)operator(()operator(\))operator(\))operator(\))

keyword(class) class(HtmlFormatterTest)operator(()ident(unittest)operator(.)ident(TestCase)operator(\))operator(:)
    keyword(def) method(test_correct_output)operator(()predefined_constant(self)operator(\))operator(:)
        ident(hfmt) operator(=) ident(HtmlFormatter)operator(()ident(nowrap)operator(=)predefined_constant(True)operator(\))
        ident(houtfile) operator(=) ident(StringIO)operator(.)ident(StringIO)operator(()operator(\))
        ident(hfmt)operator(.)ident(format)operator(()ident(tokensource)operator(,) ident(houtfile)operator(\))

        ident(nfmt) operator(=) ident(NullFormatter)operator(()operator(\))
        ident(noutfile) operator(=) ident(StringIO)operator(.)ident(StringIO)operator(()operator(\))
        ident(nfmt)operator(.)ident(format)operator(()ident(tokensource)operator(,) ident(noutfile)operator(\))

        ident(stripped_html) operator(=) ident(re)operator(.)ident(sub)operator(()string<delimiter(')content(<.*?>)delimiter(')>operator(,) string<delimiter(')delimiter(')>operator(,) ident(houtfile)operator(.)ident(getvalue)operator(()operator(\))operator(\))
        ident(escaped_text) operator(=) ident(escape_html)operator(()ident(noutfile)operator(.)ident(getvalue)operator(()operator(\))operator(\))
        predefined_constant(self)operator(.)ident(assertEquals)operator(()ident(stripped_html)operator(,) ident(escaped_text)operator(\))

    keyword(def) method(test_external_css)operator(()predefined_constant(self)operator(\))operator(:)
        comment(# test correct behavior)
        comment(# CSS should be in /tmp directory)
        ident(fmt1) operator(=) ident(HtmlFormatter)operator(()ident(full)operator(=)predefined_constant(True)operator(,) ident(cssfile)operator(=)string<delimiter(')content(fmt1.css)delimiter(')>operator(,) ident(outencoding)operator(=)string<delimiter(')content(utf-8)delimiter(')>operator(\))
        comment(# CSS should be in TESTDIR (TESTDIR is absolute\))
        ident(fmt2) operator(=) ident(HtmlFormatter)operator(()ident(full)operator(=)predefined_constant(True)operator(,) ident(cssfile)operator(=)ident(join)operator(()ident(TESTDIR)operator(,) string<delimiter(')content(fmt2.css)delimiter(')>operator(\))operator(,)
                             ident(outencoding)operator(=)string<delimiter(')content(utf-8)delimiter(')>operator(\))
        ident(tfile) operator(=) ident(tempfile)operator(.)ident(NamedTemporaryFile)operator(()ident(suffix)operator(=)string<delimiter(')content(.html)delimiter(')>operator(\))
        ident(fmt1)operator(.)ident(format)operator(()ident(tokensource)operator(,) ident(tfile)operator(\))
        keyword(try)operator(:)
            ident(fmt2)operator(.)ident(format)operator(()ident(tokensource)operator(,) ident(tfile)operator(\))
            predefined_constant(self)operator(.)ident(assert_)operator(()ident(isfile)operator(()ident(join)operator(()ident(TESTDIR)operator(,) string<delimiter(')content(fmt2.css)delimiter(')>operator(\))operator(\))operator(\))
        keyword(except) exception(IOError)operator(:)
            comment(# test directory not writable)
            keyword(pass)
        ident(tfile)operator(.)ident(close)operator(()operator(\))

        predefined_constant(self)operator(.)ident(assert_)operator(()ident(isfile)operator(()ident(join)operator(()ident(dirname)operator(()ident(tfile)operator(.)ident(name)operator(\))operator(,) string<delimiter(')content(fmt1.css)delimiter(')>operator(\))operator(\))operator(\))
        ident(os)operator(.)ident(unlink)operator(()ident(join)operator(()ident(dirname)operator(()ident(tfile)operator(.)ident(name)operator(\))operator(,) string<delimiter(')content(fmt1.css)delimiter(')>operator(\))operator(\))
        keyword(try)operator(:)
            ident(os)operator(.)ident(unlink)operator(()ident(join)operator(()ident(TESTDIR)operator(,) string<delimiter(')content(fmt2.css)delimiter(')>operator(\))operator(\))
        keyword(except) exception(OSError)operator(:)
            keyword(pass)

    keyword(def) method(test_all_options)operator(()predefined_constant(self)operator(\))operator(:)
        keyword(for) ident(optdict) keyword(in) operator([)predefined(dict)operator(()ident(nowrap)operator(=)predefined_constant(True)operator(\))operator(,)
                        predefined(dict)operator(()ident(linenos)operator(=)predefined_constant(True)operator(\))operator(,)
                        predefined(dict)operator(()ident(linenos)operator(=)predefined_constant(True)operator(,) ident(full)operator(=)predefined_constant(True)operator(\))operator(,)
                        predefined(dict)operator(()ident(linenos)operator(=)predefined_constant(True)operator(,) ident(full)operator(=)predefined_constant(True)operator(,) ident(noclasses)operator(=)predefined_constant(True)operator(\))operator(])operator(:)

            ident(outfile) operator(=) ident(StringIO)operator(.)ident(StringIO)operator(()operator(\))
            ident(fmt) operator(=) ident(HtmlFormatter)operator(()operator(**)ident(optdict)operator(\))
            ident(fmt)operator(.)ident(format)operator(()ident(tokensource)operator(,) ident(outfile)operator(\))

    keyword(def) method(test_valid_output)operator(()predefined_constant(self)operator(\))operator(:)
        comment(# test all available wrappers)
        ident(fmt) operator(=) ident(HtmlFormatter)operator(()ident(full)operator(=)predefined_constant(True)operator(,) ident(linenos)operator(=)predefined_constant(True)operator(,) ident(noclasses)operator(=)predefined_constant(True)operator(,)
                            ident(outencoding)operator(=)string<delimiter(')content(utf-8)delimiter(')>operator(\))

        ident(handle)operator(,) ident(pathname) operator(=) ident(tempfile)operator(.)ident(mkstemp)operator(()string<delimiter(')content(.html)delimiter(')>operator(\))
        ident(tfile) operator(=) ident(os)operator(.)ident(fdopen)operator(()ident(handle)operator(,) string<delimiter(')content(w+b)delimiter(')>operator(\))
        ident(fmt)operator(.)ident(format)operator(()ident(tokensource)operator(,) ident(tfile)operator(\))
        ident(tfile)operator(.)ident(close)operator(()operator(\))
        ident(catname) operator(=) ident(os)operator(.)ident(path)operator(.)ident(join)operator(()ident(TESTDIR)operator(,) string<delimiter(')content(dtds)delimiter(')>operator(,) string<delimiter(')content(HTML4.soc)delimiter(')>operator(\))
        keyword(try)operator(:)
            keyword(try)operator(:)
                keyword(import) include(subprocess)
                ident(ret) operator(=) ident(subprocess)operator(.)ident(Popen)operator(()operator([)string<delimiter(')content(nsgmls)delimiter(')>operator(,) string<delimiter(')content(-s)delimiter(')>operator(,) string<delimiter(')content(-c)delimiter(')>operator(,) ident(catname)operator(,) ident(pathname)operator(])operator(,)
                                       ident(stdout)operator(=)ident(subprocess)operator(.)ident(PIPE)operator(\))operator(.)ident(wait)operator(()operator(\))
            keyword(except) exception(ImportError)operator(:)
                comment(# Python 2.3 - no subprocess module)
                ident(ret) operator(=) ident(os)operator(.)ident(popen)operator(()string<delimiter(')content(nsgmls -s -c "%s" "%s")delimiter(')> operator(%) operator(()ident(catname)operator(,) ident(pathname)operator(\))operator(\))operator(.)ident(close)operator(()operator(\))
                keyword(if) ident(ret) operator(==) integer(32512)operator(:) keyword(raise) exception(OSError)  comment(# not found)
        keyword(except) exception(OSError)operator(:)
            comment(# nsgmls not available)
            keyword(pass)
        keyword(else)operator(:)
            predefined_constant(self)operator(.)ident(failIf)operator(()ident(ret)operator(,) string<delimiter(')content(nsgmls run reported errors)delimiter(')>operator(\))

        ident(os)operator(.)ident(unlink)operator(()ident(pathname)operator(\))

    keyword(def) method(test_get_style_defs)operator(()predefined_constant(self)operator(\))operator(:)
        ident(fmt) operator(=) ident(HtmlFormatter)operator(()operator(\))
        ident(sd) operator(=) ident(fmt)operator(.)ident(get_style_defs)operator(()operator(\))
        predefined_constant(self)operator(.)ident(assert_)operator(()ident(sd)operator(.)ident(startswith)operator(()string<delimiter(')content(.)delimiter(')>operator(\))operator(\))

        ident(fmt) operator(=) ident(HtmlFormatter)operator(()ident(cssclass)operator(=)string<delimiter(')content(foo)delimiter(')>operator(\))
        ident(sd) operator(=) ident(fmt)operator(.)ident(get_style_defs)operator(()operator(\))
        predefined_constant(self)operator(.)ident(assert_)operator(()ident(sd)operator(.)ident(startswith)operator(()string<delimiter(')content(.foo)delimiter(')>operator(\))operator(\))
        ident(sd) operator(=) ident(fmt)operator(.)ident(get_style_defs)operator(()string<delimiter(')content(.bar)delimiter(')>operator(\))
        predefined_constant(self)operator(.)ident(assert_)operator(()ident(sd)operator(.)ident(startswith)operator(()string<delimiter(')content(.bar)delimiter(')>operator(\))operator(\))
        ident(sd) operator(=) ident(fmt)operator(.)ident(get_style_defs)operator(()operator([)string<delimiter(')content(.bar)delimiter(')>operator(,) string<delimiter(')content(.baz)delimiter(')>operator(])operator(\))
        ident(fl) operator(=) ident(sd)operator(.)ident(splitlines)operator(()operator(\))operator([)integer(0)operator(])
        predefined_constant(self)operator(.)ident(assert_)operator(()string<delimiter(')content(.bar)delimiter(')> keyword(in) ident(fl) keyword(and) string<delimiter(')content(.baz)delimiter(')> keyword(in) ident(fl)operator(\))

    keyword(def) method(test_unicode_options)operator(()predefined_constant(self)operator(\))operator(:)
        ident(fmt) operator(=) ident(HtmlFormatter)operator(()ident(title)operator(=)string<modifier(u)delimiter(')content(Föö)delimiter(')>operator(,)
                            ident(cssclass)operator(=)string<modifier(u)delimiter(')content(bär)delimiter(')>operator(,)
                            ident(cssstyles)operator(=)string<modifier(u)delimiter(')content(div:before { content: )char(\\')content(bäz)char(\\')content( })delimiter(')>operator(,)
                            ident(encoding)operator(=)string<delimiter(')content(utf-8)delimiter(')>operator(\))
        ident(handle)operator(,) ident(pathname) operator(=) ident(tempfile)operator(.)ident(mkstemp)operator(()string<delimiter(')content(.html)delimiter(')>operator(\))
        ident(tfile) operator(=) ident(os)operator(.)ident(fdopen)operator(()ident(handle)operator(,) string<delimiter(')content(w+b)delimiter(')>operator(\))
        ident(fmt)operator(.)ident(format)operator(()ident(tokensource)operator(,) ident(tfile)operator(\))
        ident(tfile)operator(.)ident(close)operator(()operator(\))
comment(# -*- coding: utf-8 -*-)
docstring<delimiter(""")content(
)content(    Pygments LaTeX formatter tests)content(
)content(    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~)content(
)content(
)content(    :copyright: Copyright 2006-2009 by the Pygments team, see AUTHORS.)content(
)content(    :license: BSD, see LICENSE for details.)content(
)delimiter(""")>

keyword(import) include(os)
keyword(import) include(unittest)
keyword(import) include(tempfile)

keyword(from) include(pygments.formatters) keyword(import) include(LatexFormatter)
keyword(from) include(pygments.lexers) keyword(import) include(PythonLexer)

keyword(import) include(support)

ident(TESTFILE)operator(,) ident(TESTDIR) operator(=) ident(support)operator(.)ident(location)operator(()ident(__file__)operator(\))


keyword(class) class(LatexFormatterTest)operator(()ident(unittest)operator(.)ident(TestCase)operator(\))operator(:)

    keyword(def) method(test_valid_output)operator(()predefined_constant(self)operator(\))operator(:)
        ident(tokensource) operator(=) predefined(list)operator(()ident(PythonLexer)operator(()operator(\))operator(.)ident(get_tokens)operator(()predefined(open)operator(()ident(TESTFILE)operator(\))operator(.)ident(read)operator(()operator(\))operator(\))operator(\))
        ident(fmt) operator(=) ident(LatexFormatter)operator(()ident(full)operator(=)predefined_constant(True)operator(,) ident(encoding)operator(=)string<delimiter(')content(latin1)delimiter(')>operator(\))

        ident(handle)operator(,) ident(pathname) operator(=) ident(tempfile)operator(.)ident(mkstemp)operator(()string<delimiter(')content(.tex)delimiter(')>operator(\))
        comment(# place all output files in /tmp too)
        ident(old_wd) operator(=) ident(os)operator(.)ident(getcwd)operator(()operator(\))
        ident(os)operator(.)ident(chdir)operator(()ident(os)operator(.)ident(path)operator(.)ident(dirname)operator(()ident(pathname)operator(\))operator(\))
        ident(tfile) operator(=) ident(os)operator(.)ident(fdopen)operator(()ident(handle)operator(,) string<delimiter(')content(wb)delimiter(')>operator(\))
        ident(fmt)operator(.)ident(format)operator(()ident(tokensource)operator(,) ident(tfile)operator(\))
        ident(tfile)operator(.)ident(close)operator(()operator(\))
        keyword(try)operator(:)
            keyword(try)operator(:)
                keyword(import) include(subprocess)
                ident(ret) operator(=) ident(subprocess)operator(.)ident(Popen)operator(()operator([)string<delimiter(')content(latex)delimiter(')>operator(,) string<delimiter(')content(-interaction=nonstopmode)delimiter(')>operator(,)
                                        ident(pathname)operator(])operator(,)
                                       ident(stdout)operator(=)ident(subprocess)operator(.)ident(PIPE)operator(\))operator(.)ident(wait)operator(()operator(\))
            keyword(except) exception(ImportError)operator(:)
                comment(# Python 2.3 - no subprocess module)
                ident(ret) operator(=) ident(os)operator(.)ident(popen)operator(()string<delimiter(')content(latex -interaction=nonstopmode "%s")delimiter(')>
                               operator(%) ident(pathname)operator(\))operator(.)ident(close)operator(()operator(\))
                keyword(if) ident(ret) operator(==) integer(32512)operator(:) keyword(raise) exception(OSError)  comment(# not found)
        keyword(except) exception(OSError)operator(:)
            comment(# latex not available)
            keyword(pass)
        keyword(else)operator(:)
            predefined_constant(self)operator(.)ident(failIf)operator(()ident(ret)operator(,) string<delimiter(')content(latex run reported errors)delimiter(')>operator(\))

        ident(os)operator(.)ident(unlink)operator(()ident(pathname)operator(\))
        ident(os)operator(.)ident(chdir)operator(()ident(old_wd)operator(\))
comment(# -*- coding: utf-8 -*-)
docstring<delimiter(""")content(
)content(    Pygments regex lexer tests)content(
)content(    ~~~~~~~~~~~~~~~~~~~~~~~~~~)content(
)content(
)content(    :copyright: Copyright 2006-2009 by the Pygments team, see AUTHORS.)content(
)content(    :license: BSD, see LICENSE for details.)content(
)delimiter(""")>

keyword(import) include(unittest)

keyword(from) include(pygments.token) keyword(import) include(Text)
keyword(from) include(pygments.lexer) keyword(import) include(RegexLexer)

keyword(class) class(TestLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    docstring<delimiter(""")content(Test tuple state transitions including #pop.)delimiter(""")>
    ident(tokens) operator(=) operator({)
        string<delimiter(')content(root)delimiter(')>operator(:) operator([)
            operator(()string<delimiter(')content(a)delimiter(')>operator(,) ident(Text)operator(.)ident(Root)operator(,) string<delimiter(')content(rag)delimiter(')>operator(\))operator(,)
            operator(()string<delimiter(')content(e)delimiter(')>operator(,) ident(Text)operator(.)ident(Root)operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(beer)delimiter(')>operator(:) operator([)
            operator(()string<delimiter(')content(d)delimiter(')>operator(,) ident(Text)operator(.)ident(Beer)operator(,) operator(()string<delimiter(')content(#pop)delimiter(')>operator(,) string<delimiter(')content(#pop)delimiter(')>operator(\))operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(rag)delimiter(')>operator(:) operator([)
            operator(()string<delimiter(')content(b)delimiter(')>operator(,) ident(Text)operator(.)ident(Rag)operator(,) string<delimiter(')content(#push)delimiter(')>operator(\))operator(,)
            operator(()string<delimiter(')content(c)delimiter(')>operator(,) ident(Text)operator(.)ident(Rag)operator(,) operator(()string<delimiter(')content(#pop)delimiter(')>operator(,) string<delimiter(')content(beer)delimiter(')>operator(\))operator(\))operator(,)
        operator(])operator(,)
    operator(})

keyword(class) class(TupleTransTest)operator(()ident(unittest)operator(.)ident(TestCase)operator(\))operator(:)
    keyword(def) method(test)operator(()predefined_constant(self)operator(\))operator(:)
        ident(lx) operator(=) ident(TestLexer)operator(()operator(\))
        ident(toks) operator(=) predefined(list)operator(()ident(lx)operator(.)ident(get_tokens_unprocessed)operator(()string<delimiter(')content(abcde)delimiter(')>operator(\))operator(\))
        predefined_constant(self)operator(.)ident(assertEquals)operator(()ident(toks)operator(,)
           operator([)operator(()integer(0)operator(,) ident(Text)operator(.)ident(Root)operator(,) string<delimiter(')content(a)delimiter(')>operator(\))operator(,) operator(()integer(1)operator(,) ident(Text)operator(.)ident(Rag)operator(,) string<delimiter(')content(b)delimiter(')>operator(\))operator(,) operator(()integer(2)operator(,) ident(Text)operator(.)ident(Rag)operator(,) string<delimiter(')content(c)delimiter(')>operator(\))operator(,)
            operator(()integer(3)operator(,) ident(Text)operator(.)ident(Beer)operator(,) string<delimiter(')content(d)delimiter(')>operator(\))operator(,) operator(()integer(4)operator(,) ident(Text)operator(.)ident(Root)operator(,) string<delimiter(')content(e)delimiter(')>operator(\))operator(])operator(\))
comment(# -*- coding: utf-8 -*-)
docstring<delimiter(""")content(
)content(    Test suite for the token module)content(
)content(    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~)content(
)content(
)content(    :copyright: Copyright 2006-2009 by the Pygments team, see AUTHORS.)content(
)content(    :license: BSD, see LICENSE for details.)content(
)delimiter(""")>

keyword(import) include(unittest)
keyword(import) include(StringIO)
keyword(import) include(sys)

keyword(from) include(pygments) keyword(import) include(token)


keyword(class) class(TokenTest)operator(()ident(unittest)operator(.)ident(TestCase)operator(\))operator(:)

    keyword(def) method(test_tokentype)operator(()predefined_constant(self)operator(\))operator(:)
        ident(e) operator(=) predefined_constant(self)operator(.)ident(assertEquals)
        ident(r) operator(=) predefined_constant(self)operator(.)ident(assertRaises)

        ident(t) operator(=) ident(token)operator(.)ident(String)

        ident(e)operator(()ident(t)operator(.)ident(split)operator(()operator(\))operator(,) operator([)ident(token)operator(.)ident(Token)operator(,) ident(token)operator(.)ident(Literal)operator(,) ident(token)operator(.)ident(String)operator(])operator(\))

        ident(e)operator(()ident(t)operator(.)ident(__class__)operator(,) ident(token)operator(.)ident(_TokenType)operator(\))

    keyword(def) method(test_functions)operator(()predefined_constant(self)operator(\))operator(:)
        predefined_constant(self)operator(.)ident(assert_)operator(()ident(token)operator(.)ident(is_token_subtype)operator(()ident(token)operator(.)ident(String)operator(,) ident(token)operator(.)ident(String)operator(\))operator(\))
        predefined_constant(self)operator(.)ident(assert_)operator(()ident(token)operator(.)ident(is_token_subtype)operator(()ident(token)operator(.)ident(String)operator(,) ident(token)operator(.)ident(Literal)operator(\))operator(\))
        predefined_constant(self)operator(.)ident(failIf)operator(()ident(token)operator(.)ident(is_token_subtype)operator(()ident(token)operator(.)ident(Literal)operator(,) ident(token)operator(.)ident(String)operator(\))operator(\))

        predefined_constant(self)operator(.)ident(assert_)operator(()ident(token)operator(.)ident(string_to_tokentype)operator(()ident(token)operator(.)ident(String)operator(\)) keyword(is) ident(token)operator(.)ident(String)operator(\))
        predefined_constant(self)operator(.)ident(assert_)operator(()ident(token)operator(.)ident(string_to_tokentype)operator(()string<delimiter(')delimiter(')>operator(\)) keyword(is) ident(token)operator(.)ident(Token)operator(\))
        predefined_constant(self)operator(.)ident(assert_)operator(()ident(token)operator(.)ident(string_to_tokentype)operator(()string<delimiter(')content(String)delimiter(')>operator(\)) keyword(is) ident(token)operator(.)ident(String)operator(\))

    keyword(def) method(test_sanity_check)operator(()predefined_constant(self)operator(\))operator(:)
        ident(stp) operator(=) ident(token)operator(.)ident(STANDARD_TYPES)operator(.)ident(copy)operator(()operator(\))
        ident(stp)operator([)ident(token)operator(.)ident(Token)operator(]) operator(=) string<delimiter(')content(---)delimiter(')> comment(# Token and Text do conflict, that is okay)
        ident(t) operator(=) operator({)operator(})
        keyword(for) ident(k)operator(,) ident(v) keyword(in) ident(stp)operator(.)ident(iteritems)operator(()operator(\))operator(:)
            ident(t)operator(.)ident(setdefault)operator(()ident(v)operator(,) operator([)operator(])operator(\))operator(.)ident(append)operator(()ident(k)operator(\))
        keyword(if) predefined(len)operator(()ident(t)operator(\)) operator(==) predefined(len)operator(()ident(stp)operator(\))operator(:)
            keyword(return) comment(# Okay)

        keyword(for) ident(k)operator(,) ident(v) keyword(in) ident(t)operator(.)ident(iteritems)operator(()operator(\))operator(:)
            keyword(if) predefined(len)operator(()ident(v)operator(\)) operator(>) integer(1)operator(:)
                predefined_constant(self)operator(.)ident(fail)operator(()string<delimiter(")content(%r has more than one key: %r)delimiter(")> operator(%) operator(()ident(k)operator(,) ident(v)operator(\))operator(\))


keyword(if) ident(__name__) operator(==) string<delimiter(')content(__main__)delimiter(')>operator(:)
    ident(unittest)operator(.)ident(main)operator(()operator(\))
keyword(import) include(unittest)
keyword(from) include(pygments.lexer) keyword(import) include(using)operator(,) include(bygroups)operator(,) include(this)operator(,) include(RegexLexer)
keyword(from) include(pygments.token) keyword(import) include(String)operator(,) include(Text)operator(,) include(Keyword)

keyword(class) class(TestLexer)operator(()ident(RegexLexer)operator(\))operator(:)
    ident(tokens) operator(=) operator({)
        string<delimiter(')content(root)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(#.*)delimiter(')>operator(,) ident(using)operator(()ident(this)operator(,) ident(state)operator(=)string<delimiter(')content(invalid)delimiter(')>operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content(("\)(.+?\)("\))delimiter(')>operator(,) ident(bygroups)operator(()ident(String)operator(,) ident(using)operator(()ident(this)operator(,) ident(state)operator(=)string<delimiter(')content(string)delimiter(')>operator(\))operator(,) ident(String)operator(\))operator(\))operator(,)
            operator(()string<modifier(r)delimiter(')content([^"]+)delimiter(')>operator(,) ident(Text)operator(\))operator(,)
        operator(])operator(,)
        string<delimiter(')content(string)delimiter(')>operator(:) operator([)
            operator(()string<modifier(r)delimiter(')content(.+)delimiter(')>operator(,) ident(Keyword)operator(\))operator(,)
        operator(])operator(,)
    operator(})

keyword(class) class(UsingStateTest)operator(()ident(unittest)operator(.)ident(TestCase)operator(\))operator(:)
    keyword(def) method(test_basic)operator(()predefined_constant(self)operator(\))operator(:)
        ident(expected) operator(=) operator([)operator(()ident(Text)operator(,) string<delimiter(')content(a)delimiter(')>operator(\))operator(,) operator(()ident(String)operator(,) string<delimiter(')content(")delimiter(')>operator(\))operator(,) operator(()ident(Keyword)operator(,) string<delimiter(')content(bcd)delimiter(')>operator(\))operator(,)
                    operator(()ident(String)operator(,) string<delimiter(')content(")delimiter(')>operator(\))operator(,) operator(()ident(Text)operator(,) string<delimiter(')content(e)char(\\n)delimiter(')>operator(\))operator(])
        ident(t) operator(=) predefined(list)operator(()ident(TestLexer)operator(()operator(\))operator(.)ident(get_tokens)operator(()string<delimiter(')content(a"bcd"e)delimiter(')>operator(\))operator(\))
        predefined_constant(self)operator(.)ident(assertEquals)operator(()ident(t)operator(,) ident(expected)operator(\))
    keyword(def) method(test_error)operator(()predefined_constant(self)operator(\))operator(:)
        keyword(def) method(gen)operator(()operator(\))operator(:)
            ident(x) operator(=) predefined(list)operator(()ident(TestLexer)operator(()operator(\))operator(.)ident(get_tokens)operator(()string<delimiter(')content(#a)delimiter(')>operator(\))operator(\))
        comment(#XXX: should probably raise a more specific exception if the state)
        comment(#     doesn't exist.)
        predefined_constant(self)operator(.)ident(assertRaises)operator(()exception(Exception)operator(,) ident(gen)operator(\))

keyword(if) ident(__name__) operator(==) string<delimiter(")content(__main__)delimiter(")>operator(:)
    ident(unittest)operator(.)ident(main)operator(()operator(\))
comment(# -*- coding: utf-8 -*-)
docstring<delimiter(""")content(
)content(    Test suite for the util module)content(
)content(    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~)content(
)content(
)content(    :copyright: Copyright 2006-2009 by the Pygments team, see AUTHORS.)content(
)content(    :license: BSD, see LICENSE for details.)content(
)delimiter(""")>

keyword(import) include(unittest)
keyword(import) include(os)

keyword(from) include(pygments) keyword(import) include(util)


keyword(class) class(UtilTest)operator(()ident(unittest)operator(.)ident(TestCase)operator(\))operator(:)

    keyword(def) method(test_getoptions)operator(()predefined_constant(self)operator(\))operator(:)
        ident(raises) operator(=) predefined_constant(self)operator(.)ident(assertRaises)
        ident(equals) operator(=) predefined_constant(self)operator(.)ident(assertEquals)

        ident(equals)operator(()ident(util)operator(.)ident(get_bool_opt)operator(()operator({)operator(})operator(,) string<delimiter(')content(a)delimiter(')>operator(,) predefined_constant(True)operator(\))operator(,) predefined_constant(True)operator(\))
        ident(equals)operator(()ident(util)operator(.)ident(get_bool_opt)operator(()operator({)operator(})operator(,) string<delimiter(')content(a)delimiter(')>operator(,) integer(1)operator(\))operator(,) predefined_constant(True)operator(\))
        ident(equals)operator(()ident(util)operator(.)ident(get_bool_opt)operator(()operator({)operator(})operator(,) string<delimiter(')content(a)delimiter(')>operator(,) string<delimiter(')content(true)delimiter(')>operator(\))operator(,) predefined_constant(True)operator(\))
        ident(equals)operator(()ident(util)operator(.)ident(get_bool_opt)operator(()operator({)operator(})operator(,) string<delimiter(')content(a)delimiter(')>operator(,) string<delimiter(')content(no)delimiter(')>operator(\))operator(,) predefined_constant(False)operator(\))
        ident(raises)operator(()ident(util)operator(.)ident(OptionError)operator(,) ident(util)operator(.)ident(get_bool_opt)operator(,) operator({)operator(})operator(,) string<delimiter(')content(a)delimiter(')>operator(,) operator([)operator(])operator(\))
        ident(raises)operator(()ident(util)operator(.)ident(OptionError)operator(,) ident(util)operator(.)ident(get_bool_opt)operator(,) operator({)operator(})operator(,) string<delimiter(')content(a)delimiter(')>operator(,) string<delimiter(')content(foo)delimiter(')>operator(\))

        ident(equals)operator(()ident(util)operator(.)ident(get_int_opt)operator(()operator({)operator(})operator(,) string<delimiter(')content(a)delimiter(')>operator(,) integer(1)operator(\))operator(,) integer(1)operator(\))
        ident(raises)operator(()ident(util)operator(.)ident(OptionError)operator(,) ident(util)operator(.)ident(get_int_opt)operator(,) operator({)operator(})operator(,) string<delimiter(')content(a)delimiter(')>operator(,) operator([)operator(])operator(\))
        ident(raises)operator(()ident(util)operator(.)ident(OptionError)operator(,) ident(util)operator(.)ident(get_int_opt)operator(,) operator({)operator(})operator(,) string<delimiter(')content(a)delimiter(')>operator(,) string<delimiter(')content(bar)delimiter(')>operator(\))

        ident(equals)operator(()ident(util)operator(.)ident(get_list_opt)operator(()operator({)operator(})operator(,) string<delimiter(')content(a)delimiter(')>operator(,) operator([)integer(1)operator(])operator(\))operator(,) operator([)integer(1)operator(])operator(\))
        ident(equals)operator(()ident(util)operator(.)ident(get_list_opt)operator(()operator({)operator(})operator(,) string<delimiter(')content(a)delimiter(')>operator(,) string<delimiter(')content(1 2)delimiter(')>operator(\))operator(,) operator([)string<delimiter(')content(1)delimiter(')>operator(,) string<delimiter(')content(2)delimiter(')>operator(])operator(\))
        ident(raises)operator(()ident(util)operator(.)ident(OptionError)operator(,) ident(util)operator(.)ident(get_list_opt)operator(,) operator({)operator(})operator(,) string<delimiter(')content(a)delimiter(')>operator(,) integer(1)operator(\))


    keyword(def) method(test_docstring_headline)operator(()predefined_constant(self)operator(\))operator(:)
        keyword(def) method(f1)operator(()operator(\))operator(:)
            docstring<delimiter(""")content(
)content(            docstring headline)content(
)content(
)content(            other text)content(
)content(            )delimiter(""")>
        keyword(def) method(f2)operator(()operator(\))operator(:)
            docstring<delimiter(""")content(
)content(            docstring)content(
)content(            headline)content(
)content(
)content(            other text)content(
)content(            )delimiter(""")>

        predefined_constant(self)operator(.)ident(assertEquals)operator(()ident(util)operator(.)ident(docstring_headline)operator(()ident(f1)operator(\))operator(,) string<delimiter(")content(docstring headline)delimiter(")>operator(\))
        predefined_constant(self)operator(.)ident(assertEquals)operator(()ident(util)operator(.)ident(docstring_headline)operator(()ident(f2)operator(\))operator(,) string<delimiter(")content(docstring headline)delimiter(")>operator(\))

    keyword(def) method(test_analysator)operator(()predefined_constant(self)operator(\))operator(:)
        keyword(class) class(X)operator(()predefined(object)operator(\))operator(:)
            keyword(def) method(analyse)operator(()ident(text)operator(\))operator(:)
                keyword(return) float(0.5)
            ident(analyse) operator(=) ident(util)operator(.)ident(make_analysator)operator(()ident(analyse)operator(\))
        predefined_constant(self)operator(.)ident(assertEquals)operator(()ident(X)operator(.)ident(analyse)operator(()string<delimiter(')delimiter(')>operator(\))operator(,) float(0.5)operator(\))

    keyword(def) method(test_shebang_matches)operator(()predefined_constant(self)operator(\))operator(:)
        predefined_constant(self)operator(.)ident(assert_)operator(()ident(util)operator(.)ident(shebang_matches)operator(()string<delimiter(')content(#!/usr/bin/env python)delimiter(')>operator(,) string<modifier(r)delimiter(')content(python(2)content(\\.)content(\\d)content(\)?)delimiter(')>operator(\))operator(\))
        predefined_constant(self)operator(.)ident(assert_)operator(()ident(util)operator(.)ident(shebang_matches)operator(()string<delimiter(')content(#!/usr/bin/python2.4)delimiter(')>operator(,) string<modifier(r)delimiter(')content(python(2)content(\\.)content(\\d)content(\)?)delimiter(')>operator(\))operator(\))
        predefined_constant(self)operator(.)ident(assert_)operator(()ident(util)operator(.)ident(shebang_matches)operator(()string<delimiter(')content(#!/usr/bin/startsomethingwith python)delimiter(')>operator(,)
                                          string<modifier(r)delimiter(')content(python(2)content(\\.)content(\\d)content(\)?)delimiter(')>operator(\))operator(\))
        predefined_constant(self)operator(.)ident(assert_)operator(()ident(util)operator(.)ident(shebang_matches)operator(()string<delimiter(')content(#!C:)char(\\\\)content(Python2.4)char(\\\\)content(Python.exe)delimiter(')>operator(,)
                                          string<modifier(r)delimiter(')content(python(2)content(\\.)content(\\d)content(\)?)delimiter(')>operator(\))operator(\))

        predefined_constant(self)operator(.)ident(failIf)operator(()ident(util)operator(.)ident(shebang_matches)operator(()string<delimiter(')content(#!/usr/bin/python-ruby)delimiter(')>operator(,) string<modifier(r)delimiter(')content(python(2)content(\\.)content(\\d)content(\)?)delimiter(')>operator(\))operator(\))
        predefined_constant(self)operator(.)ident(failIf)operator(()ident(util)operator(.)ident(shebang_matches)operator(()string<delimiter(')content(#!/usr/bin/python/ruby)delimiter(')>operator(,) string<modifier(r)delimiter(')content(python(2)content(\\.)content(\\d)content(\)?)delimiter(')>operator(\))operator(\))
        predefined_constant(self)operator(.)ident(failIf)operator(()ident(util)operator(.)ident(shebang_matches)operator(()string<delimiter(')content(#!)delimiter(')>operator(,) string<modifier(r)delimiter(')content(python)delimiter(')>operator(\))operator(\))

    keyword(def) method(test_doctype_matches)operator(()predefined_constant(self)operator(\))operator(:)
        predefined_constant(self)operator(.)ident(assert_)operator(()ident(util)operator(.)ident(doctype_matches)operator(()string<delimiter(')content(<!DOCTYPE html PUBLIC "a"> <html>)delimiter(')>operator(,)
                                          string<delimiter(')content(html.*)delimiter(')>operator(\))operator(\))
        predefined_constant(self)operator(.)ident(failIf)operator(()ident(util)operator(.)ident(doctype_matches)operator(()string<delimiter(')content(<?xml ?> <DOCTYPE html PUBLIC "a"> <html>)delimiter(')>operator(,)
                                         string<delimiter(')content(html.*)delimiter(')>operator(\))operator(\))
        predefined_constant(self)operator(.)ident(assert_)operator(()ident(util)operator(.)ident(html_doctype_matches)operator(()
            string<delimiter(')content(<?xml ?><!DOCTYPE html PUBLIC  "-//W3C//DTD XHTML 1.0 Strict//EN">)delimiter(')>operator(\))operator(\))

    keyword(def) method(test_xml)operator(()predefined_constant(self)operator(\))operator(:)
        predefined_constant(self)operator(.)ident(assert_)operator(()ident(util)operator(.)ident(looks_like_xml)operator(()
            string<delimiter(')content(<?xml ?><!DOCTYPE html PUBLIC  "-//W3C//DTD XHTML 1.0 Strict//EN">)delimiter(')>operator(\))operator(\))
        predefined_constant(self)operator(.)ident(assert_)operator(()ident(util)operator(.)ident(looks_like_xml)operator(()string<delimiter(')content(<html xmlns>abc</html>)delimiter(')>operator(\))operator(\))
        predefined_constant(self)operator(.)ident(failIf)operator(()ident(util)operator(.)ident(looks_like_xml)operator(()string<delimiter(')content(<html>)delimiter(')>operator(\))operator(\))

keyword(if) ident(__name__) operator(==) string<delimiter(')content(__main__)delimiter(')>operator(:)
    ident(unittest)operator(.)ident(main)operator(()operator(\))
