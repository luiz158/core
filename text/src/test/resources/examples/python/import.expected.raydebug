keyword(import) include(YourModule)             comment(# Import the module into my package)
                              comment(#  (does not import any of its symbols\))

keyword(import) include(YourModule) keyword(as) ident(Module)   comment(# Use a different name for the module)

keyword(from) include(YourModule) keyword(import) include(*)      comment(# Import all module symbols not starting)
                              comment(#  with an underscore (default\); if __all__)
                              comment(#  is defined, only imports those symbols.)
                              comment(# Using this is discouraged unless the )
                              comment(#  module is specifically designed for it.)

keyword(from) include(YourModule) keyword(import) include(name1)operator(,) include(name2)operator(,) include(xxx)
                              comment(# Import the named symbols from the module)

keyword(from) include(YourModule) keyword(import) include(name1) keyword(as) ident(name2)
                              comment(# Import the named object, but use a)
                              comment(#  different name to access it locally.)

comment(#-----------------------------)
ident(__all__) operator(=) operator([)string<delimiter(")content(F1)delimiter(")>operator(,) string<delimiter(")content(F2)delimiter(")>operator(,) string<delimiter(")content(List)delimiter(")>operator(])
comment(#-----------------------------)
ident(__all__) operator(=) operator([)string<delimiter(")content(Op_Func)delimiter(")>operator(,) string<delimiter(")content(Table)delimiter(")>operator(])
comment(#-----------------------------)
keyword(from) include(YourModule) keyword(import) include(Op_Func)operator(,) include(Table)operator(,) include(F1)
comment(#-----------------------------)
keyword(from) include(YourModule) keyword(import) include(Functions)operator(,) include(Table)