comment(/*  Prototype JavaScript framework, version 1.6.0.3
 *  (c\) 2005-2008 Sam Stephenson
 *
 *  Prototype is freely distributable under the terms of an MIT-style license.
 *  For details, see the Prototype web site: http://www.prototypejs.org/
 *
 *--------------------------------------------------------------------------*/)

keyword(var) ident(Prototype) operator(=) operator({)
  key(Version)operator(:) string<delimiter(')content(1.6.0.3)delimiter(')>operator(,)

  key(Browser)operator(:) operator({)
    key(IE)operator(:)     operator(!!()ident(window)operator(.)ident(attachEvent) operator(&&)
      ident(navigator)operator(.)ident(userAgent)operator(.)ident(indexOf)operator(()string<delimiter(')content(Opera)delimiter(')>operator(\)) operator(===) operator(-)integer(1)operator(\))operator(,)
    key(Opera)operator(:)  ident(navigator)operator(.)ident(userAgent)operator(.)ident(indexOf)operator(()string<delimiter(')content(Opera)delimiter(')>operator(\)) operator(>) operator(-)integer(1)operator(,)
    key(WebKit)operator(:) ident(navigator)operator(.)ident(userAgent)operator(.)ident(indexOf)operator(()string<delimiter(')content(AppleWebKit/)delimiter(')>operator(\)) operator(>) operator(-)integer(1)operator(,)
    key(Gecko)operator(:)  ident(navigator)operator(.)ident(userAgent)operator(.)ident(indexOf)operator(()string<delimiter(')content(Gecko)delimiter(')>operator(\)) operator(>) operator(-)integer(1) operator(&&)
      ident(navigator)operator(.)ident(userAgent)operator(.)ident(indexOf)operator(()string<delimiter(')content(KHTML)delimiter(')>operator(\)) operator(===) operator(-)integer(1)operator(,)
    key(MobileSafari)operator(:) operator(!!)ident(navigator)operator(.)ident(userAgent)operator(.)ident(match)operator(()regexp<delimiter(/)content(Apple.*Mobile.*Safari)delimiter(/)>operator(\))
  operator(})operator(,)

  key(BrowserFeatures)operator(:) operator({)
    key(XPath)operator(:) operator(!!)ident(document)operator(.)ident(evaluate)operator(,)
    key(SelectorsAPI)operator(:) operator(!!)ident(document)operator(.)ident(querySelector)operator(,)
    key(ElementExtensions)operator(:) operator(!!)ident(window)operator(.)ident(HTMLElement)operator(,)
    key(SpecificElementExtensions)operator(:)
      ident(document)operator(.)ident(createElement)operator(()string<delimiter(')content(div)delimiter(')>operator(\))operator([)string<delimiter(')content(__proto__)delimiter(')>operator(]) operator(&&)
      ident(document)operator(.)ident(createElement)operator(()string<delimiter(')content(div)delimiter(')>operator(\))operator([)string<delimiter(')content(__proto__)delimiter(')>operator(]) operator(!==)
        ident(document)operator(.)ident(createElement)operator(()string<delimiter(')content(form)delimiter(')>operator(\))operator([)string<delimiter(')content(__proto__)delimiter(')>operator(])
  operator(})operator(,)

  key(ScriptFragment)operator(:) string<delimiter(')content(<script[^>]*>([)char(\\\\)content(S)char(\\\\)content(s]*?\)<)content(\\/)content(script>)delimiter(')>operator(,)
  key(JSONFilter)operator(:) regexp<delimiter(/)content(^)content(\\/)content(\\*)content(-secure-([)char(\\s)char(\\S)content(]*\))content(\\*)content(\\/)char(\\s)content(*$)delimiter(/)>operator(,)

  function(emptyFunction)operator(:) keyword(function)operator(()operator(\)) operator({) operator(})operator(,)
  function(K)operator(:) keyword(function)operator(()ident(x)operator(\)) operator({) keyword(return) ident(x) operator(})
operator(})operator(;)

keyword(if) operator(()ident(Prototype)operator(.)ident(Browser)operator(.)ident(MobileSafari)operator(\))
  ident(Prototype)operator(.)ident(BrowserFeatures)operator(.)ident(SpecificElementExtensions) operator(=) predefined_constant(false)operator(;)


comment(/* Based on Alex Arnell's inheritance implementation. */)
keyword(var) ident(Class) operator(=) operator({)
  function(create)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(var) ident(parent) operator(=) predefined_constant(null)operator(,) ident(properties) operator(=) predefined($A)operator(()local_variable(arguments)operator(\))operator(;)
    keyword(if) operator(()ident(Object)operator(.)ident(isFunction)operator(()ident(properties)operator([)integer(0)operator(]\)\))
      ident(parent) operator(=) ident(properties)operator(.)ident(shift)operator(()operator(\))operator(;)

    keyword(function) function(klass)operator(()operator(\)) operator({)
      local_variable(this)operator(.)ident(initialize)operator(.)ident(apply)operator(()local_variable(this)operator(,) local_variable(arguments)operator(\))operator(;)
    operator(})

    ident(Object)operator(.)ident(extend)operator(()ident(klass)operator(,) ident(Class)operator(.)ident(Methods)operator(\))operator(;)
    ident(klass)operator(.)ident(superclass) operator(=) ident(parent)operator(;)
    ident(klass)operator(.)ident(subclasses) operator(=) operator([)operator(])operator(;)

    keyword(if) operator(()ident(parent)operator(\)) operator({)
      keyword(var) function(subclass) operator(=) keyword(function)operator(()operator(\)) operator({) operator(})operator(;)
      ident(subclass)operator(.)ident(prototype) operator(=) ident(parent)operator(.)ident(prototype)operator(;)
      ident(klass)operator(.)ident(prototype) operator(=) keyword(new) ident(subclass)operator(;)
      ident(parent)operator(.)ident(subclasses)operator(.)ident(push)operator(()ident(klass)operator(\))operator(;)
    operator(})

    keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(;) ident(i) operator(<) ident(properties)operator(.)ident(length)operator(;) ident(i)operator(++)operator(\))
      ident(klass)operator(.)ident(addMethods)operator(()ident(properties)operator([)ident(i)operator(]\))operator(;)

    keyword(if) operator((!)ident(klass)operator(.)ident(prototype)operator(.)ident(initialize)operator(\))
      ident(klass)operator(.)ident(prototype)operator(.)ident(initialize) operator(=) ident(Prototype)operator(.)ident(emptyFunction)operator(;)

    ident(klass)operator(.)ident(prototype)operator(.)ident(constructor) operator(=) ident(klass)operator(;)

    keyword(return) ident(klass)operator(;)
  operator(})
operator(})operator(;)

ident(Class)operator(.)ident(Methods) operator(=) operator({)
  function(addMethods)operator(:) keyword(function)operator(()ident(source)operator(\)) operator({)
    keyword(var) ident(ancestor)   operator(=) local_variable(this)operator(.)ident(superclass) operator(&&) local_variable(this)operator(.)ident(superclass)operator(.)ident(prototype)operator(;)
    keyword(var) ident(properties) operator(=) ident(Object)operator(.)ident(keys)operator(()ident(source)operator(\))operator(;)

    keyword(if) operator((!)ident(Object)operator(.)ident(keys)operator(({) key(toString)operator(:) predefined_constant(true) operator(}\))operator(.)ident(length)operator(\))
      ident(properties)operator(.)ident(push)operator(()string<delimiter(")content(toString)delimiter(")>operator(,) string<delimiter(")content(valueOf)delimiter(")>operator(\))operator(;)

    keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(,) ident(length) operator(=) ident(properties)operator(.)ident(length)operator(;) ident(i) operator(<) ident(length)operator(;) ident(i)operator(++)operator(\)) operator({)
      keyword(var) ident(property) operator(=) ident(properties)operator([)ident(i)operator(])operator(,) ident(value) operator(=) ident(source)operator([)ident(property)operator(])operator(;)
      keyword(if) operator(()ident(ancestor) operator(&&) ident(Object)operator(.)ident(isFunction)operator(()ident(value)operator(\)) operator(&&)
          ident(value)operator(.)ident(argumentNames)operator(()operator(\))operator(.)ident(first)operator(()operator(\)) operator(==) string<delimiter(")content($super)delimiter(")>operator(\)) operator({)
        keyword(var) ident(method) operator(=) ident(value)operator(;)
        ident(value) operator(=) operator(()keyword(function)operator(()ident(m)operator(\)) operator({)
          keyword(return) keyword(function)operator(()operator(\)) operator({) keyword(return) ident(ancestor)operator([)ident(m)operator(])operator(.)ident(apply)operator(()local_variable(this)operator(,) local_variable(arguments)operator(\)) operator(})operator(;)
        operator(}\))operator(()ident(property)operator(\))operator(.)ident(wrap)operator(()ident(method)operator(\))operator(;)

        ident(value)operator(.)ident(valueOf) operator(=) ident(method)operator(.)ident(valueOf)operator(.)ident(bind)operator(()ident(method)operator(\))operator(;)
        ident(value)operator(.)ident(toString) operator(=) ident(method)operator(.)ident(toString)operator(.)ident(bind)operator(()ident(method)operator(\))operator(;)
      operator(})
      local_variable(this)operator(.)ident(prototype)operator([)ident(property)operator(]) operator(=) ident(value)operator(;)
    operator(})

    keyword(return) local_variable(this)operator(;)
  operator(})
operator(})operator(;)

keyword(var) ident(Abstract) operator(=) operator({) operator(})operator(;)

ident(Object)operator(.)function(extend) operator(=) keyword(function)operator(()ident(destination)operator(,) ident(source)operator(\)) operator({)
  keyword(for) operator(()keyword(var) ident(property) keyword(in) ident(source)operator(\))
    ident(destination)operator([)ident(property)operator(]) operator(=) ident(source)operator([)ident(property)operator(])operator(;)
  keyword(return) ident(destination)operator(;)
operator(})operator(;)

ident(Object)operator(.)ident(extend)operator(()ident(Object)operator(,) operator({)
  function(inspect)operator(:) keyword(function)operator(()ident(object)operator(\)) operator({)
    keyword(try) operator({)
      keyword(if) operator(()ident(Object)operator(.)ident(isUndefined)operator(()ident(object)operator(\)\)) keyword(return) string<delimiter(')content(undefined)delimiter(')>operator(;)
      keyword(if) operator(()ident(object) operator(===) predefined_constant(null)operator(\)) keyword(return) string<delimiter(')content(null)delimiter(')>operator(;)
      keyword(return) ident(object)operator(.)ident(inspect) operator(?) ident(object)operator(.)ident(inspect)operator(()operator(\)) operator(:) ident(String)operator(()ident(object)operator(\))operator(;)
    operator(}) keyword(catch) operator(()ident(e)operator(\)) operator({)
      keyword(if) operator(()ident(e) keyword(instanceof) ident(RangeError)operator(\)) keyword(return) string<delimiter(')content(...)delimiter(')>operator(;)
      keyword(throw) ident(e)operator(;)
    operator(})
  operator(})operator(,)

  function(toJSON)operator(:) keyword(function)operator(()ident(object)operator(\)) operator({)
    keyword(var) ident(type) operator(=) keyword(typeof) ident(object)operator(;)
    keyword(switch) operator(()ident(type)operator(\)) operator({)
      keyword(case) string<delimiter(')content(undefined)delimiter(')>operator(:)
      keyword(case) string<delimiter(')content(function)delimiter(')>operator(:)
      keyword(case) string<delimiter(')content(unknown)delimiter(')>operator(:) keyword(return)operator(;)
      keyword(case) string<delimiter(')content(boolean)delimiter(')>operator(:) keyword(return) ident(object)operator(.)ident(toString)operator(()operator(\))operator(;)
    operator(})

    keyword(if) operator(()ident(object) operator(===) predefined_constant(null)operator(\)) keyword(return) string<delimiter(')content(null)delimiter(')>operator(;)
    keyword(if) operator(()ident(object)operator(.)ident(toJSON)operator(\)) keyword(return) ident(object)operator(.)ident(toJSON)operator(()operator(\))operator(;)
    keyword(if) operator(()ident(Object)operator(.)ident(isElement)operator(()ident(object)operator(\)\)) keyword(return)operator(;)

    keyword(var) ident(results) operator(=) operator([)operator(])operator(;)
    keyword(for) operator(()keyword(var) ident(property) keyword(in) ident(object)operator(\)) operator({)
      keyword(var) ident(value) operator(=) ident(Object)operator(.)ident(toJSON)operator(()ident(object)operator([)ident(property)operator(]\))operator(;)
      keyword(if) operator((!)ident(Object)operator(.)ident(isUndefined)operator(()ident(value)operator(\)\))
        ident(results)operator(.)ident(push)operator(()ident(property)operator(.)ident(toJSON)operator(()operator(\)) operator(+) string<delimiter(')content(: )delimiter(')> operator(+) ident(value)operator(\))operator(;)
    operator(})

    keyword(return) string<delimiter(')content({)delimiter(')> operator(+) ident(results)operator(.)ident(join)operator(()string<delimiter(')content(, )delimiter(')>operator(\)) operator(+) string<delimiter(')content(})delimiter(')>operator(;)
  operator(})operator(,)

  function(toQueryString)operator(:) keyword(function)operator(()ident(object)operator(\)) operator({)
    keyword(return) predefined($H)operator(()ident(object)operator(\))operator(.)ident(toQueryString)operator(()operator(\))operator(;)
  operator(})operator(,)

  function(toHTML)operator(:) keyword(function)operator(()ident(object)operator(\)) operator({)
    keyword(return) ident(object) operator(&&) ident(object)operator(.)ident(toHTML) operator(?) ident(object)operator(.)ident(toHTML)operator(()operator(\)) operator(:) ident(String)operator(.)ident(interpret)operator(()ident(object)operator(\))operator(;)
  operator(})operator(,)

  function(keys)operator(:) keyword(function)operator(()ident(object)operator(\)) operator({)
    keyword(var) ident(keys) operator(=) operator([)operator(])operator(;)
    keyword(for) operator(()keyword(var) ident(property) keyword(in) ident(object)operator(\))
      ident(keys)operator(.)ident(push)operator(()ident(property)operator(\))operator(;)
    keyword(return) ident(keys)operator(;)
  operator(})operator(,)

  function(values)operator(:) keyword(function)operator(()ident(object)operator(\)) operator({)
    keyword(var) ident(values) operator(=) operator([)operator(])operator(;)
    keyword(for) operator(()keyword(var) ident(property) keyword(in) ident(object)operator(\))
      ident(values)operator(.)ident(push)operator(()ident(object)operator([)ident(property)operator(]\))operator(;)
    keyword(return) ident(values)operator(;)
  operator(})operator(,)

  function(clone)operator(:) keyword(function)operator(()ident(object)operator(\)) operator({)
    keyword(return) ident(Object)operator(.)ident(extend)operator(({) operator(})operator(,) ident(object)operator(\))operator(;)
  operator(})operator(,)

  function(isElement)operator(:) keyword(function)operator(()ident(object)operator(\)) operator({)
    keyword(return) operator(!!()ident(object) operator(&&) ident(object)operator(.)ident(nodeType) operator(==) integer(1)operator(\))operator(;)
  operator(})operator(,)

  function(isArray)operator(:) keyword(function)operator(()ident(object)operator(\)) operator({)
    keyword(return) ident(object) operator(!=) predefined_constant(null) operator(&&) keyword(typeof) ident(object) operator(==) string<delimiter(")content(object)delimiter(")> operator(&&)
      string<delimiter(')content(splice)delimiter(')> keyword(in) ident(object) operator(&&) string<delimiter(')content(join)delimiter(')> keyword(in) ident(object)operator(;)
  operator(})operator(,)

  function(isHash)operator(:) keyword(function)operator(()ident(object)operator(\)) operator({)
    keyword(return) ident(object) keyword(instanceof) ident(Hash)operator(;)
  operator(})operator(,)

  function(isFunction)operator(:) keyword(function)operator(()ident(object)operator(\)) operator({)
    keyword(return) keyword(typeof) ident(object) operator(==) string<delimiter(")content(function)delimiter(")>operator(;)
  operator(})operator(,)

  function(isString)operator(:) keyword(function)operator(()ident(object)operator(\)) operator({)
    keyword(return) keyword(typeof) ident(object) operator(==) string<delimiter(")content(string)delimiter(")>operator(;)
  operator(})operator(,)

  function(isNumber)operator(:) keyword(function)operator(()ident(object)operator(\)) operator({)
    keyword(return) keyword(typeof) ident(object) operator(==) string<delimiter(")content(number)delimiter(")>operator(;)
  operator(})operator(,)

  function(isUndefined)operator(:) keyword(function)operator(()ident(object)operator(\)) operator({)
    keyword(return) keyword(typeof) ident(object) operator(==) string<delimiter(")content(undefined)delimiter(")>operator(;)
  operator(})
operator(}\))operator(;)

ident(Object)operator(.)ident(extend)operator(()ident(Function)operator(.)ident(prototype)operator(,) operator({)
  function(argumentNames)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(var) ident(names) operator(=) local_variable(this)operator(.)ident(toString)operator(()operator(\))operator(.)ident(match)operator(()regexp<delimiter(/)content(^[)char(\\s)content(\\()content(]*function[^(]*)content(\\()content(([^)content(\\\))content(]*\))content(\\\))delimiter(/)>operator(\))operator([)integer(1)operator(])
      operator(.)ident(replace)operator(()regexp<delimiter(/)char(\\s)content(+)delimiter(/)modifier(g)>operator(,) string<delimiter(')delimiter(')>operator(\))operator(.)ident(split)operator(()string<delimiter(')content(,)delimiter(')>operator(\))operator(;)
    keyword(return) ident(names)operator(.)ident(length) operator(==) integer(1) operator(&&) operator(!)ident(names)operator([)integer(0)operator(]) operator(?) operator([)operator(]) operator(:) ident(names)operator(;)
  operator(})operator(,)

  function(bind)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(if) operator(()local_variable(arguments)operator(.)ident(length) operator(<) integer(2) operator(&&) ident(Object)operator(.)ident(isUndefined)operator(()local_variable(arguments)operator([)integer(0)operator(]\)\)) keyword(return) local_variable(this)operator(;)
    keyword(var) ident(__method) operator(=) local_variable(this)operator(,) ident(args) operator(=) predefined($A)operator(()local_variable(arguments)operator(\))operator(,) ident(object) operator(=) ident(args)operator(.)ident(shift)operator(()operator(\))operator(;)
    keyword(return) keyword(function)operator(()operator(\)) operator({)
      keyword(return) ident(__method)operator(.)ident(apply)operator(()ident(object)operator(,) ident(args)operator(.)ident(concat)operator(()predefined($A)operator(()local_variable(arguments)operator(\)\)\))operator(;)
    operator(})
  operator(})operator(,)

  function(bindAsEventListener)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(var) ident(__method) operator(=) local_variable(this)operator(,) ident(args) operator(=) predefined($A)operator(()local_variable(arguments)operator(\))operator(,) ident(object) operator(=) ident(args)operator(.)ident(shift)operator(()operator(\))operator(;)
    keyword(return) keyword(function)operator(()ident(event)operator(\)) operator({)
      keyword(return) ident(__method)operator(.)ident(apply)operator(()ident(object)operator(,) operator([)ident(event) operator(||) ident(window)operator(.)ident(event)operator(])operator(.)ident(concat)operator(()ident(args)operator(\)\))operator(;)
    operator(})
  operator(})operator(,)

  function(curry)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(if) operator((!)local_variable(arguments)operator(.)ident(length)operator(\)) keyword(return) local_variable(this)operator(;)
    keyword(var) ident(__method) operator(=) local_variable(this)operator(,) ident(args) operator(=) predefined($A)operator(()local_variable(arguments)operator(\))operator(;)
    keyword(return) keyword(function)operator(()operator(\)) operator({)
      keyword(return) ident(__method)operator(.)ident(apply)operator(()local_variable(this)operator(,) ident(args)operator(.)ident(concat)operator(()predefined($A)operator(()local_variable(arguments)operator(\)\)\))operator(;)
    operator(})
  operator(})operator(,)

  function(delay)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(var) ident(__method) operator(=) local_variable(this)operator(,) ident(args) operator(=) predefined($A)operator(()local_variable(arguments)operator(\))operator(,) ident(timeout) operator(=) ident(args)operator(.)ident(shift)operator(()operator(\)) operator(*) integer(1000)operator(;)
    keyword(return) ident(window)operator(.)ident(setTimeout)operator(()keyword(function)operator(()operator(\)) operator({)
      keyword(return) ident(__method)operator(.)ident(apply)operator(()ident(__method)operator(,) ident(args)operator(\))operator(;)
    operator(})operator(,) ident(timeout)operator(\))operator(;)
  operator(})operator(,)

  function(defer)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(var) ident(args) operator(=) operator([)float(0.01)operator(])operator(.)ident(concat)operator(()predefined($A)operator(()local_variable(arguments)operator(\)\))operator(;)
    keyword(return) local_variable(this)operator(.)ident(delay)operator(.)ident(apply)operator(()local_variable(this)operator(,) ident(args)operator(\))operator(;)
  operator(})operator(,)

  function(wrap)operator(:) keyword(function)operator(()ident(wrapper)operator(\)) operator({)
    keyword(var) ident(__method) operator(=) local_variable(this)operator(;)
    keyword(return) keyword(function)operator(()operator(\)) operator({)
      keyword(return) ident(wrapper)operator(.)ident(apply)operator(()local_variable(this)operator(,) operator([)ident(__method)operator(.)ident(bind)operator(()local_variable(this)operator(\)])operator(.)ident(concat)operator(()predefined($A)operator(()local_variable(arguments)operator(\)\)\))operator(;)
    operator(})
  operator(})operator(,)

  function(methodize)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(if) operator(()local_variable(this)operator(.)ident(_methodized)operator(\)) keyword(return) local_variable(this)operator(.)ident(_methodized)operator(;)
    keyword(var) ident(__method) operator(=) local_variable(this)operator(;)
    keyword(return) local_variable(this)operator(.)function(_methodized) operator(=) keyword(function)operator(()operator(\)) operator({)
      keyword(return) ident(__method)operator(.)ident(apply)operator(()predefined_constant(null)operator(,) operator([)local_variable(this)operator(])operator(.)ident(concat)operator(()predefined($A)operator(()local_variable(arguments)operator(\)\)\))operator(;)
    operator(})operator(;)
  operator(})
operator(}\))operator(;)

ident(Date)operator(.)ident(prototype)operator(.)function(toJSON) operator(=) keyword(function)operator(()operator(\)) operator({)
  keyword(return) string<delimiter(')content(")delimiter(')> operator(+) local_variable(this)operator(.)ident(getUTCFullYear)operator(()operator(\)) operator(+) string<delimiter(')content(-)delimiter(')> operator(+)
    operator(()local_variable(this)operator(.)ident(getUTCMonth)operator(()operator(\)) operator(+) integer(1)operator(\))operator(.)ident(toPaddedString)operator(()integer(2)operator(\)) operator(+) string<delimiter(')content(-)delimiter(')> operator(+)
    local_variable(this)operator(.)ident(getUTCDate)operator(()operator(\))operator(.)ident(toPaddedString)operator(()integer(2)operator(\)) operator(+) string<delimiter(')content(T)delimiter(')> operator(+)
    local_variable(this)operator(.)ident(getUTCHours)operator(()operator(\))operator(.)ident(toPaddedString)operator(()integer(2)operator(\)) operator(+) string<delimiter(')content(:)delimiter(')> operator(+)
    local_variable(this)operator(.)ident(getUTCMinutes)operator(()operator(\))operator(.)ident(toPaddedString)operator(()integer(2)operator(\)) operator(+) string<delimiter(')content(:)delimiter(')> operator(+)
    local_variable(this)operator(.)ident(getUTCSeconds)operator(()operator(\))operator(.)ident(toPaddedString)operator(()integer(2)operator(\)) operator(+) string<delimiter(')content(Z")delimiter(')>operator(;)
operator(})operator(;)

keyword(var) ident(Try) operator(=) operator({)
  function(these)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(var) ident(returnValue)operator(;)

    keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(,) ident(length) operator(=) local_variable(arguments)operator(.)ident(length)operator(;) ident(i) operator(<) ident(length)operator(;) ident(i)operator(++)operator(\)) operator({)
      keyword(var) ident(lambda) operator(=) local_variable(arguments)operator([)ident(i)operator(])operator(;)
      keyword(try) operator({)
        ident(returnValue) operator(=) ident(lambda)operator(()operator(\))operator(;)
        keyword(break)operator(;)
      operator(}) keyword(catch) operator(()ident(e)operator(\)) operator({) operator(})
    operator(})

    keyword(return) ident(returnValue)operator(;)
  operator(})
operator(})operator(;)

ident(RegExp)operator(.)ident(prototype)operator(.)ident(match) operator(=) ident(RegExp)operator(.)ident(prototype)operator(.)ident(test)operator(;)

ident(RegExp)operator(.)function(escape) operator(=) keyword(function)operator(()ident(str)operator(\)) operator({)
  keyword(return) ident(String)operator(()ident(str)operator(\))operator(.)ident(replace)operator(()regexp<delimiter(/)content(([.*+?^=!:${}(\)|[)content(\\])content(\\/)char(\\\\)content(]\))delimiter(/)modifier(g)>operator(,) string<delimiter(')char(\\\\)content($1)delimiter(')>operator(\))operator(;)
operator(})operator(;)

comment(/*--------------------------------------------------------------------------*/)

keyword(var) ident(PeriodicalExecuter) operator(=) ident(Class)operator(.)ident(create)operator(({)
  function(initialize)operator(:) keyword(function)operator(()ident(callback)operator(,) ident(frequency)operator(\)) operator({)
    local_variable(this)operator(.)ident(callback) operator(=) ident(callback)operator(;)
    local_variable(this)operator(.)ident(frequency) operator(=) ident(frequency)operator(;)
    local_variable(this)operator(.)ident(currentlyExecuting) operator(=) predefined_constant(false)operator(;)

    local_variable(this)operator(.)ident(registerCallback)operator(()operator(\))operator(;)
  operator(})operator(,)

  function(registerCallback)operator(:) keyword(function)operator(()operator(\)) operator({)
    local_variable(this)operator(.)ident(timer) operator(=) ident(setInterval)operator(()local_variable(this)operator(.)ident(onTimerEvent)operator(.)ident(bind)operator(()local_variable(this)operator(\))operator(,) local_variable(this)operator(.)ident(frequency) operator(*) integer(1000)operator(\))operator(;)
  operator(})operator(,)

  function(execute)operator(:) keyword(function)operator(()operator(\)) operator({)
    local_variable(this)operator(.)ident(callback)operator(()local_variable(this)operator(\))operator(;)
  operator(})operator(,)

  function(stop)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(if) operator((!)local_variable(this)operator(.)ident(timer)operator(\)) keyword(return)operator(;)
    ident(clearInterval)operator(()local_variable(this)operator(.)ident(timer)operator(\))operator(;)
    local_variable(this)operator(.)ident(timer) operator(=) predefined_constant(null)operator(;)
  operator(})operator(,)

  function(onTimerEvent)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(if) operator((!)local_variable(this)operator(.)ident(currentlyExecuting)operator(\)) operator({)
      keyword(try) operator({)
        local_variable(this)operator(.)ident(currentlyExecuting) operator(=) predefined_constant(true)operator(;)
        local_variable(this)operator(.)ident(execute)operator(()operator(\))operator(;)
      operator(}) keyword(finally) operator({)
        local_variable(this)operator(.)ident(currentlyExecuting) operator(=) predefined_constant(false)operator(;)
      operator(})
    operator(})
  operator(})
operator(}\))operator(;)
ident(Object)operator(.)ident(extend)operator(()ident(String)operator(,) operator({)
  function(interpret)operator(:) keyword(function)operator(()ident(value)operator(\)) operator({)
    keyword(return) ident(value) operator(==) predefined_constant(null) operator(?) string<delimiter(')delimiter(')> operator(:) ident(String)operator(()ident(value)operator(\))operator(;)
  operator(})operator(,)
  key(specialChar)operator(:) operator({)
    key<delimiter(')content(\\b)delimiter(')>operator(:) string<delimiter(')char(\\\\)content(b)delimiter(')>operator(,)
    key<delimiter(')content(\\t)delimiter(')>operator(:) string<delimiter(')char(\\\\)content(t)delimiter(')>operator(,)
    key<delimiter(')content(\\n)delimiter(')>operator(:) string<delimiter(')char(\\\\)content(n)delimiter(')>operator(,)
    key<delimiter(')content(\\f)delimiter(')>operator(:) string<delimiter(')char(\\\\)content(f)delimiter(')>operator(,)
    key<delimiter(')content(\\r)delimiter(')>operator(:) string<delimiter(')char(\\\\)content(r)delimiter(')>operator(,)
    key<delimiter(')char(\\\\)delimiter(')>operator(:) string<delimiter(')char(\\\\)char(\\\\)delimiter(')>
  operator(})
operator(}\))operator(;)

ident(Object)operator(.)ident(extend)operator(()ident(String)operator(.)ident(prototype)operator(,) operator({)
  function(gsub)operator(:) keyword(function)operator(()ident(pattern)operator(,) ident(replacement)operator(\)) operator({)
    keyword(var) ident(result) operator(=) string<delimiter(')delimiter(')>operator(,) ident(source) operator(=) local_variable(this)operator(,) ident(match)operator(;)
    ident(replacement) operator(=) local_variable(arguments)operator(.)ident(callee)operator(.)ident(prepareReplacement)operator(()ident(replacement)operator(\))operator(;)

    keyword(while) operator(()ident(source)operator(.)ident(length) operator(>) integer(0)operator(\)) operator({)
      keyword(if) operator(()ident(match) operator(=) ident(source)operator(.)ident(match)operator(()ident(pattern)operator(\)\)) operator({)
        ident(result) operator(+=) ident(source)operator(.)ident(slice)operator(()integer(0)operator(,) ident(match)operator(.)ident(index)operator(\))operator(;)
        ident(result) operator(+=) ident(String)operator(.)ident(interpret)operator(()ident(replacement)operator(()ident(match)operator(\)\))operator(;)
        ident(source)  operator(=) ident(source)operator(.)ident(slice)operator(()ident(match)operator(.)ident(index) operator(+) ident(match)operator([)integer(0)operator(])operator(.)ident(length)operator(\))operator(;)
      operator(}) keyword(else) operator({)
        ident(result) operator(+=) ident(source)operator(,) ident(source) operator(=) string<delimiter(')delimiter(')>operator(;)
      operator(})
    operator(})
    keyword(return) ident(result)operator(;)
  operator(})operator(,)

  function(sub)operator(:) keyword(function)operator(()ident(pattern)operator(,) ident(replacement)operator(,) ident(count)operator(\)) operator({)
    ident(replacement) operator(=) local_variable(this)operator(.)ident(gsub)operator(.)ident(prepareReplacement)operator(()ident(replacement)operator(\))operator(;)
    ident(count) operator(=) ident(Object)operator(.)ident(isUndefined)operator(()ident(count)operator(\)) operator(?) integer(1) operator(:) ident(count)operator(;)

    keyword(return) local_variable(this)operator(.)ident(gsub)operator(()ident(pattern)operator(,) keyword(function)operator(()ident(match)operator(\)) operator({)
      keyword(if) operator((--)ident(count) operator(<) integer(0)operator(\)) keyword(return) ident(match)operator([)integer(0)operator(])operator(;)
      keyword(return) ident(replacement)operator(()ident(match)operator(\))operator(;)
    operator(}\))operator(;)
  operator(})operator(,)

  function(scan)operator(:) keyword(function)operator(()ident(pattern)operator(,) ident(iterator)operator(\)) operator({)
    local_variable(this)operator(.)ident(gsub)operator(()ident(pattern)operator(,) ident(iterator)operator(\))operator(;)
    keyword(return) ident(String)operator(()local_variable(this)operator(\))operator(;)
  operator(})operator(,)

  function(truncate)operator(:) keyword(function)operator(()ident(length)operator(,) ident(truncation)operator(\)) operator({)
    ident(length) operator(=) ident(length) operator(||) integer(30)operator(;)
    ident(truncation) operator(=) ident(Object)operator(.)ident(isUndefined)operator(()ident(truncation)operator(\)) operator(?) string<delimiter(')content(...)delimiter(')> operator(:) ident(truncation)operator(;)
    keyword(return) local_variable(this)operator(.)ident(length) operator(>) ident(length) operator(?)
      local_variable(this)operator(.)ident(slice)operator(()integer(0)operator(,) ident(length) operator(-) ident(truncation)operator(.)ident(length)operator(\)) operator(+) ident(truncation) operator(:) ident(String)operator(()local_variable(this)operator(\))operator(;)
  operator(})operator(,)

  function(strip)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(return) local_variable(this)operator(.)ident(replace)operator(()regexp<delimiter(/)content(^)char(\\s)content(+)delimiter(/)>operator(,) string<delimiter(')delimiter(')>operator(\))operator(.)ident(replace)operator(()regexp<delimiter(/)char(\\s)content(+$)delimiter(/)>operator(,) string<delimiter(')delimiter(')>operator(\))operator(;)
  operator(})operator(,)

  function(stripTags)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(return) local_variable(this)operator(.)ident(replace)operator(()regexp<delimiter(/)content(<)content(\\/)content(?[^>]+>)delimiter(/)modifier(gi)>operator(,) string<delimiter(')delimiter(')>operator(\))operator(;)
  operator(})operator(,)

  function(stripScripts)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(return) local_variable(this)operator(.)ident(replace)operator(()keyword(new) ident(RegExp)operator(()ident(Prototype)operator(.)ident(ScriptFragment)operator(,) string<delimiter(')content(img)delimiter(')>operator(\))operator(,) string<delimiter(')delimiter(')>operator(\))operator(;)
  operator(})operator(,)

  function(extractScripts)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(var) ident(matchAll) operator(=) keyword(new) ident(RegExp)operator(()ident(Prototype)operator(.)ident(ScriptFragment)operator(,) string<delimiter(')content(img)delimiter(')>operator(\))operator(;)
    keyword(var) ident(matchOne) operator(=) keyword(new) ident(RegExp)operator(()ident(Prototype)operator(.)ident(ScriptFragment)operator(,) string<delimiter(')content(im)delimiter(')>operator(\))operator(;)
    keyword(return) operator(()local_variable(this)operator(.)ident(match)operator(()ident(matchAll)operator(\)) operator(||) operator([)operator(]\))operator(.)ident(map)operator(()keyword(function)operator(()ident(scriptTag)operator(\)) operator({)
      keyword(return) operator(()ident(scriptTag)operator(.)ident(match)operator(()ident(matchOne)operator(\)) operator(||) operator([)string<delimiter(')delimiter(')>operator(,) string<delimiter(')delimiter(')>operator(]\))operator([)integer(1)operator(])operator(;)
    operator(}\))operator(;)
  operator(})operator(,)

  function(evalScripts)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(return) local_variable(this)operator(.)ident(extractScripts)operator(()operator(\))operator(.)ident(map)operator(()keyword(function)operator(()ident(script)operator(\)) operator({) keyword(return) ident(eval)operator(()ident(script)operator(\)) operator(}\))operator(;)
  operator(})operator(,)

  function(escapeHTML)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(var) ident(self) operator(=) local_variable(arguments)operator(.)ident(callee)operator(;)
    ident(self)operator(.)ident(text)operator(.)ident(data) operator(=) local_variable(this)operator(;)
    keyword(return) ident(self)operator(.)ident(div)operator(.)ident(innerHTML)operator(;)
  operator(})operator(,)

  function(unescapeHTML)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(var) ident(div) operator(=) keyword(new) ident(Element)operator(()string<delimiter(')content(div)delimiter(')>operator(\))operator(;)
    ident(div)operator(.)ident(innerHTML) operator(=) local_variable(this)operator(.)ident(stripTags)operator(()operator(\))operator(;)
    keyword(return) ident(div)operator(.)ident(childNodes)operator([)integer(0)operator(]) operator(?) operator(()ident(div)operator(.)ident(childNodes)operator(.)ident(length) operator(>) integer(1) operator(?)
      predefined($A)operator(()ident(div)operator(.)ident(childNodes)operator(\))operator(.)ident(inject)operator(()string<delimiter(')delimiter(')>operator(,) keyword(function)operator(()ident(memo)operator(,) ident(node)operator(\)) operator({) keyword(return) ident(memo)operator(+)ident(node)operator(.)ident(nodeValue) operator(}\)) operator(:)
      ident(div)operator(.)ident(childNodes)operator([)integer(0)operator(])operator(.)ident(nodeValue)operator(\)) operator(:) string<delimiter(')delimiter(')>operator(;)
  operator(})operator(,)

  function(toQueryParams)operator(:) keyword(function)operator(()ident(separator)operator(\)) operator({)
    keyword(var) ident(match) operator(=) local_variable(this)operator(.)ident(strip)operator(()operator(\))operator(.)ident(match)operator(()regexp<delimiter(/)content(([^?#]*\)(#.*\)?$)delimiter(/)>operator(\))operator(;)
    keyword(if) operator((!)ident(match)operator(\)) keyword(return) operator({) operator(})operator(;)

    keyword(return) ident(match)operator([)integer(1)operator(])operator(.)ident(split)operator(()ident(separator) operator(||) string<delimiter(')content(&)delimiter(')>operator(\))operator(.)ident(inject)operator(({) operator(})operator(,) keyword(function)operator(()ident(hash)operator(,) ident(pair)operator(\)) operator({)
      keyword(if) operator((()ident(pair) operator(=) ident(pair)operator(.)ident(split)operator(()string<delimiter(')content(=)delimiter(')>operator(\)\))operator([)integer(0)operator(]\)) operator({)
        keyword(var) ident(key) operator(=) ident(decodeURIComponent)operator(()ident(pair)operator(.)ident(shift)operator(()operator(\)\))operator(;)
        keyword(var) ident(value) operator(=) ident(pair)operator(.)ident(length) operator(>) integer(1) operator(?) ident(pair)operator(.)ident(join)operator(()string<delimiter(')content(=)delimiter(')>operator(\)) operator(:) ident(pair)operator([)integer(0)operator(])operator(;)
        keyword(if) operator(()ident(value) operator(!=) predefined_constant(undefined)operator(\)) ident(value) operator(=) ident(decodeURIComponent)operator(()ident(value)operator(\))operator(;)

        keyword(if) operator(()ident(key) keyword(in) ident(hash)operator(\)) operator({)
          keyword(if) operator((!)ident(Object)operator(.)ident(isArray)operator(()ident(hash)operator([)ident(key)operator(]\)\)) ident(hash)operator([)ident(key)operator(]) operator(=) operator([)ident(hash)operator([)ident(key)operator(]])operator(;)
          ident(hash)operator([)ident(key)operator(])operator(.)ident(push)operator(()ident(value)operator(\))operator(;)
        operator(})
        keyword(else) ident(hash)operator([)ident(key)operator(]) operator(=) ident(value)operator(;)
      operator(})
      keyword(return) ident(hash)operator(;)
    operator(}\))operator(;)
  operator(})operator(,)

  function(toArray)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(return) local_variable(this)operator(.)ident(split)operator(()string<delimiter(')delimiter(')>operator(\))operator(;)
  operator(})operator(,)

  function(succ)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(return) local_variable(this)operator(.)ident(slice)operator(()integer(0)operator(,) local_variable(this)operator(.)ident(length) operator(-) integer(1)operator(\)) operator(+)
      ident(String)operator(.)ident(fromCharCode)operator(()local_variable(this)operator(.)ident(charCodeAt)operator(()local_variable(this)operator(.)ident(length) operator(-) integer(1)operator(\)) operator(+) integer(1)operator(\))operator(;)
  operator(})operator(,)

  function(times)operator(:) keyword(function)operator(()ident(count)operator(\)) operator({)
    keyword(return) ident(count) operator(<) integer(1) operator(?) string<delimiter(')delimiter(')> operator(:) keyword(new) ident(Array)operator(()ident(count) operator(+) integer(1)operator(\))operator(.)ident(join)operator(()local_variable(this)operator(\))operator(;)
  operator(})operator(,)

  function(camelize)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(var) ident(parts) operator(=) local_variable(this)operator(.)ident(split)operator(()string<delimiter(')content(-)delimiter(')>operator(\))operator(,) ident(len) operator(=) ident(parts)operator(.)ident(length)operator(;)
    keyword(if) operator(()ident(len) operator(==) integer(1)operator(\)) keyword(return) ident(parts)operator([)integer(0)operator(])operator(;)

    keyword(var) ident(camelized) operator(=) local_variable(this)operator(.)ident(charAt)operator(()integer(0)operator(\)) operator(==) string<delimiter(')content(-)delimiter(')>
      operator(?) ident(parts)operator([)integer(0)operator(])operator(.)ident(charAt)operator(()integer(0)operator(\))operator(.)ident(toUpperCase)operator(()operator(\)) operator(+) ident(parts)operator([)integer(0)operator(])operator(.)ident(substring)operator(()integer(1)operator(\))
      operator(:) ident(parts)operator([)integer(0)operator(])operator(;)

    keyword(for) operator(()keyword(var) ident(i) operator(=) integer(1)operator(;) ident(i) operator(<) ident(len)operator(;) ident(i)operator(++)operator(\))
      ident(camelized) operator(+=) ident(parts)operator([)ident(i)operator(])operator(.)ident(charAt)operator(()integer(0)operator(\))operator(.)ident(toUpperCase)operator(()operator(\)) operator(+) ident(parts)operator([)ident(i)operator(])operator(.)ident(substring)operator(()integer(1)operator(\))operator(;)

    keyword(return) ident(camelized)operator(;)
  operator(})operator(,)

  function(capitalize)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(return) local_variable(this)operator(.)ident(charAt)operator(()integer(0)operator(\))operator(.)ident(toUpperCase)operator(()operator(\)) operator(+) local_variable(this)operator(.)ident(substring)operator(()integer(1)operator(\))operator(.)ident(toLowerCase)operator(()operator(\))operator(;)
  operator(})operator(,)

  function(underscore)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(return) local_variable(this)operator(.)ident(gsub)operator(()regexp<delimiter(/)content(::)delimiter(/)>operator(,) string<delimiter(')content(/)delimiter(')>operator(\))operator(.)ident(gsub)operator(()regexp<delimiter(/)content(([A-Z]+\)([A-Z][a-z]\))delimiter(/)>operator(,)string<delimiter(')content(#{1}_#{2})delimiter(')>operator(\))operator(.)ident(gsub)operator(()regexp<delimiter(/)content(([a-z)char(\\d)content(]\)([A-Z]\))delimiter(/)>operator(,)string<delimiter(')content(#{1}_#{2})delimiter(')>operator(\))operator(.)ident(gsub)operator(()regexp<delimiter(/)content(-)delimiter(/)>operator(,)string<delimiter(')content(_)delimiter(')>operator(\))operator(.)ident(toLowerCase)operator(()operator(\))operator(;)
  operator(})operator(,)

  function(dasherize)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(return) local_variable(this)operator(.)ident(gsub)operator(()regexp<delimiter(/)content(_)delimiter(/)>operator(,)string<delimiter(')content(-)delimiter(')>operator(\))operator(;)
  operator(})operator(,)

  function(inspect)operator(:) keyword(function)operator(()ident(useDoubleQuotes)operator(\)) operator({)
    keyword(var) ident(escapedString) operator(=) local_variable(this)operator(.)ident(gsub)operator(()regexp<delimiter(/)content([)char(\\x00)content(-)char(\\x1f)char(\\\\)content(])delimiter(/)>operator(,) keyword(function)operator(()ident(match)operator(\)) operator({)
      keyword(var) ident(character) operator(=) ident(String)operator(.)ident(specialChar)operator([)ident(match)operator([)integer(0)operator(]])operator(;)
      keyword(return) ident(character) operator(?) ident(character) operator(:) string<delimiter(')char(\\\\)content(u00)delimiter(')> operator(+) ident(match)operator([)integer(0)operator(])operator(.)ident(charCodeAt)operator(()operator(\))operator(.)ident(toPaddedString)operator(()integer(2)operator(,) integer(16)operator(\))operator(;)
    operator(}\))operator(;)
    keyword(if) operator(()ident(useDoubleQuotes)operator(\)) keyword(return) string<delimiter(')content(")delimiter(')> operator(+) ident(escapedString)operator(.)ident(replace)operator(()regexp<delimiter(/)content(")delimiter(/)modifier(g)>operator(,) string<delimiter(')char(\\\\)content(")delimiter(')>operator(\)) operator(+) string<delimiter(')content(")delimiter(')>operator(;)
    keyword(return) string<delimiter(")content(')delimiter(")> operator(+) ident(escapedString)operator(.)ident(replace)operator(()regexp<delimiter(/)content(')delimiter(/)modifier(g)>operator(,) string<delimiter(')char(\\\\)char(\\')delimiter(')>operator(\)) operator(+) string<delimiter(")content(')delimiter(")>operator(;)
  operator(})operator(,)

  function(toJSON)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(return) local_variable(this)operator(.)ident(inspect)operator(()predefined_constant(true)operator(\))operator(;)
  operator(})operator(,)

  function(unfilterJSON)operator(:) keyword(function)operator(()ident(filter)operator(\)) operator({)
    keyword(return) local_variable(this)operator(.)ident(sub)operator(()ident(filter) operator(||) ident(Prototype)operator(.)ident(JSONFilter)operator(,) string<delimiter(')content(#{1})delimiter(')>operator(\))operator(;)
  operator(})operator(,)

  function(isJSON)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(var) ident(str) operator(=) local_variable(this)operator(;)
    keyword(if) operator(()ident(str)operator(.)ident(blank)operator(()operator(\)\)) keyword(return) predefined_constant(false)operator(;)
    ident(str) operator(=) local_variable(this)operator(.)ident(replace)operator(()regexp<delimiter(/)char(\\\\)content(.)delimiter(/)modifier(g)>operator(,) string<delimiter(')content(@)delimiter(')>operator(\))operator(.)ident(replace)operator(()regexp<delimiter(/)content("[^")char(\\\\)char(\\n)char(\\r)content(]*")delimiter(/)modifier(g)>operator(,) string<delimiter(')delimiter(')>operator(\))operator(;)
    keyword(return) operator(()regexp<delimiter(/)content(^[,:{})content(\\[)content(\\])content(0-9.)content(\\-)content(+Eaeflnr-u )char(\\n)char(\\r)char(\\t)content(]*$)delimiter(/)>operator(\))operator(.)ident(test)operator(()ident(str)operator(\))operator(;)
  operator(})operator(,)

  function(evalJSON)operator(:) keyword(function)operator(()ident(sanitize)operator(\)) operator({)
    keyword(var) ident(json) operator(=) local_variable(this)operator(.)ident(unfilterJSON)operator(()operator(\))operator(;)
    keyword(try) operator({)
      keyword(if) operator((!)ident(sanitize) operator(||) ident(json)operator(.)ident(isJSON)operator(()operator(\)\)) keyword(return) ident(eval)operator(()string<delimiter(')content(()delimiter(')> operator(+) ident(json) operator(+) string<delimiter(')content(\))delimiter(')>operator(\))operator(;)
    operator(}) keyword(catch) operator(()ident(e)operator(\)) operator({) operator(})
    keyword(throw) keyword(new) ident(SyntaxError)operator(()string<delimiter(')content(Badly formed JSON string: )delimiter(')> operator(+) local_variable(this)operator(.)ident(inspect)operator(()operator(\)\))operator(;)
  operator(})operator(,)

  function(include)operator(:) keyword(function)operator(()ident(pattern)operator(\)) operator({)
    keyword(return) local_variable(this)operator(.)ident(indexOf)operator(()ident(pattern)operator(\)) operator(>) operator(-)integer(1)operator(;)
  operator(})operator(,)

  function(startsWith)operator(:) keyword(function)operator(()ident(pattern)operator(\)) operator({)
    keyword(return) local_variable(this)operator(.)ident(indexOf)operator(()ident(pattern)operator(\)) operator(===) integer(0)operator(;)
  operator(})operator(,)

  function(endsWith)operator(:) keyword(function)operator(()ident(pattern)operator(\)) operator({)
    keyword(var) ident(d) operator(=) local_variable(this)operator(.)ident(length) operator(-) ident(pattern)operator(.)ident(length)operator(;)
    keyword(return) ident(d) operator(>=) integer(0) operator(&&) local_variable(this)operator(.)ident(lastIndexOf)operator(()ident(pattern)operator(\)) operator(===) ident(d)operator(;)
  operator(})operator(,)

  function(empty)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(return) local_variable(this) operator(==) string<delimiter(')delimiter(')>operator(;)
  operator(})operator(,)

  function(blank)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(return) regexp<delimiter(/)content(^)char(\\s)content(*$)delimiter(/)>operator(.)ident(test)operator(()local_variable(this)operator(\))operator(;)
  operator(})operator(,)

  function(interpolate)operator(:) keyword(function)operator(()ident(object)operator(,) ident(pattern)operator(\)) operator({)
    keyword(return) keyword(new) ident(Template)operator(()local_variable(this)operator(,) ident(pattern)operator(\))operator(.)ident(evaluate)operator(()ident(object)operator(\))operator(;)
  operator(})
operator(}\))operator(;)

keyword(if) operator(()ident(Prototype)operator(.)ident(Browser)operator(.)ident(WebKit) operator(||) ident(Prototype)operator(.)ident(Browser)operator(.)ident(IE)operator(\)) ident(Object)operator(.)ident(extend)operator(()ident(String)operator(.)ident(prototype)operator(,) operator({)
  function(escapeHTML)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(return) local_variable(this)operator(.)ident(replace)operator(()regexp<delimiter(/)content(&)delimiter(/)modifier(g)>operator(,)string<delimiter(')content(&amp;)delimiter(')>operator(\))operator(.)ident(replace)operator(()regexp<delimiter(/)content(<)delimiter(/)modifier(g)>operator(,)string<delimiter(')content(&lt;)delimiter(')>operator(\))operator(.)ident(replace)operator(()regexp<delimiter(/)content(>)delimiter(/)modifier(g)>operator(,)string<delimiter(')content(&gt;)delimiter(')>operator(\))operator(;)
  operator(})operator(,)
  function(unescapeHTML)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(return) local_variable(this)operator(.)ident(stripTags)operator(()operator(\))operator(.)ident(replace)operator(()regexp<delimiter(/)content(&amp;)delimiter(/)modifier(g)>operator(,)string<delimiter(')content(&)delimiter(')>operator(\))operator(.)ident(replace)operator(()regexp<delimiter(/)content(&lt;)delimiter(/)modifier(g)>operator(,)string<delimiter(')content(<)delimiter(')>operator(\))operator(.)ident(replace)operator(()regexp<delimiter(/)content(&gt;)delimiter(/)modifier(g)>operator(,)string<delimiter(')content(>)delimiter(')>operator(\))operator(;)
  operator(})
operator(}\))operator(;)

ident(String)operator(.)ident(prototype)operator(.)ident(gsub)operator(.)function(prepareReplacement) operator(=) keyword(function)operator(()ident(replacement)operator(\)) operator({)
  keyword(if) operator(()ident(Object)operator(.)ident(isFunction)operator(()ident(replacement)operator(\)\)) keyword(return) ident(replacement)operator(;)
  keyword(var) ident(template) operator(=) keyword(new) ident(Template)operator(()ident(replacement)operator(\))operator(;)
  keyword(return) keyword(function)operator(()ident(match)operator(\)) operator({) keyword(return) ident(template)operator(.)ident(evaluate)operator(()ident(match)operator(\)) operator(})operator(;)
operator(})operator(;)

ident(String)operator(.)ident(prototype)operator(.)ident(parseQuery) operator(=) ident(String)operator(.)ident(prototype)operator(.)ident(toQueryParams)operator(;)

ident(Object)operator(.)ident(extend)operator(()ident(String)operator(.)ident(prototype)operator(.)ident(escapeHTML)operator(,) operator({)
  key(div)operator(:)  ident(document)operator(.)ident(createElement)operator(()string<delimiter(')content(div)delimiter(')>operator(\))operator(,)
  key(text)operator(:) ident(document)operator(.)ident(createTextNode)operator(()string<delimiter(')delimiter(')>operator(\))
operator(}\))operator(;)

ident(String)operator(.)ident(prototype)operator(.)ident(escapeHTML)operator(.)ident(div)operator(.)ident(appendChild)operator(()ident(String)operator(.)ident(prototype)operator(.)ident(escapeHTML)operator(.)ident(text)operator(\))operator(;)

keyword(var) ident(Template) operator(=) ident(Class)operator(.)ident(create)operator(({)
  function(initialize)operator(:) keyword(function)operator(()ident(template)operator(,) ident(pattern)operator(\)) operator({)
    local_variable(this)operator(.)ident(template) operator(=) ident(template)operator(.)ident(toString)operator(()operator(\))operator(;)
    local_variable(this)operator(.)ident(pattern) operator(=) ident(pattern) operator(||) ident(Template)operator(.)ident(Pattern)operator(;)
  operator(})operator(,)

  function(evaluate)operator(:) keyword(function)operator(()ident(object)operator(\)) operator({)
    keyword(if) operator(()ident(Object)operator(.)ident(isFunction)operator(()ident(object)operator(.)ident(toTemplateReplacements)operator(\)\))
      ident(object) operator(=) ident(object)operator(.)ident(toTemplateReplacements)operator(()operator(\))operator(;)

    keyword(return) local_variable(this)operator(.)ident(template)operator(.)ident(gsub)operator(()local_variable(this)operator(.)ident(pattern)operator(,) keyword(function)operator(()ident(match)operator(\)) operator({)
      keyword(if) operator(()ident(object) operator(==) predefined_constant(null)operator(\)) keyword(return) string<delimiter(')delimiter(')>operator(;)

      keyword(var) ident(before) operator(=) ident(match)operator([)integer(1)operator(]) operator(||) string<delimiter(')delimiter(')>operator(;)
      keyword(if) operator(()ident(before) operator(==) string<delimiter(')char(\\\\)delimiter(')>operator(\)) keyword(return) ident(match)operator([)integer(2)operator(])operator(;)

      keyword(var) ident(ctx) operator(=) ident(object)operator(,) ident(expr) operator(=) ident(match)operator([)integer(3)operator(])operator(;)
      keyword(var) ident(pattern) operator(=) regexp<delimiter(/)content(^([^.[]+|)content(\\[)content(((?:.*?[^)char(\\\\)content(]\)?\))content(\\])content(\)()content(\\.)content(|)content(\\[)content(|$\))delimiter(/)>operator(;)
      ident(match) operator(=) ident(pattern)operator(.)ident(exec)operator(()ident(expr)operator(\))operator(;)
      keyword(if) operator(()ident(match) operator(==) predefined_constant(null)operator(\)) keyword(return) ident(before)operator(;)

      keyword(while) operator(()ident(match) operator(!=) predefined_constant(null)operator(\)) operator({)
        keyword(var) ident(comp) operator(=) ident(match)operator([)integer(1)operator(])operator(.)ident(startsWith)operator(()string<delimiter(')content([)delimiter(')>operator(\)) operator(?) ident(match)operator([)integer(2)operator(])operator(.)ident(gsub)operator(()string<delimiter(')char(\\\\)char(\\\\)content(])delimiter(')>operator(,) string<delimiter(')content(])delimiter(')>operator(\)) operator(:) ident(match)operator([)integer(1)operator(])operator(;)
        ident(ctx) operator(=) ident(ctx)operator([)ident(comp)operator(])operator(;)
        keyword(if) operator(()predefined_constant(null) operator(==) ident(ctx) operator(||) string<delimiter(')delimiter(')> operator(==) ident(match)operator([)integer(3)operator(]\)) keyword(break)operator(;)
        ident(expr) operator(=) ident(expr)operator(.)ident(substring)operator(()string<delimiter(')content([)delimiter(')> operator(==) ident(match)operator([)integer(3)operator(]) operator(?) ident(match)operator([)integer(1)operator(])operator(.)ident(length) operator(:) ident(match)operator([)integer(0)operator(])operator(.)ident(length)operator(\))operator(;)
        ident(match) operator(=) ident(pattern)operator(.)ident(exec)operator(()ident(expr)operator(\))operator(;)
      operator(})

      keyword(return) ident(before) operator(+) ident(String)operator(.)ident(interpret)operator(()ident(ctx)operator(\))operator(;)
    operator(}\))operator(;)
  operator(})
operator(}\))operator(;)
ident(Template)operator(.)ident(Pattern) operator(=) regexp<delimiter(/)content((^|.|)char(\\r)content(|)char(\\n)content(\)(#)content(\\{)content((.*?\))content(\\})content(\))delimiter(/)>operator(;)

keyword(var) predefined($break) operator(=) operator({) operator(})operator(;)

keyword(var) ident(Enumerable) operator(=) operator({)
  function(each)operator(:) keyword(function)operator(()ident(iterator)operator(,) ident(context)operator(\)) operator({)
    keyword(var) ident(index) operator(=) integer(0)operator(;)
    keyword(try) operator({)
      local_variable(this)operator(.)ident(_each)operator(()keyword(function)operator(()ident(value)operator(\)) operator({)
        ident(iterator)operator(.)ident(call)operator(()ident(context)operator(,) ident(value)operator(,) ident(index)operator(++)operator(\))operator(;)
      operator(}\))operator(;)
    operator(}) keyword(catch) operator(()ident(e)operator(\)) operator({)
      keyword(if) operator(()ident(e) operator(!=) predefined($break)operator(\)) keyword(throw) ident(e)operator(;)
    operator(})
    keyword(return) local_variable(this)operator(;)
  operator(})operator(,)

  function(eachSlice)operator(:) keyword(function)operator(()ident(number)operator(,) ident(iterator)operator(,) ident(context)operator(\)) operator({)
    keyword(var) ident(index) operator(=) operator(-)ident(number)operator(,) ident(slices) operator(=) operator([)operator(])operator(,) ident(array) operator(=) local_variable(this)operator(.)ident(toArray)operator(()operator(\))operator(;)
    keyword(if) operator(()ident(number) operator(<) integer(1)operator(\)) keyword(return) ident(array)operator(;)
    keyword(while) operator((()ident(index) operator(+=) ident(number)operator(\)) operator(<) ident(array)operator(.)ident(length)operator(\))
      ident(slices)operator(.)ident(push)operator(()ident(array)operator(.)ident(slice)operator(()ident(index)operator(,) ident(index)operator(+)ident(number)operator(\)\))operator(;)
    keyword(return) ident(slices)operator(.)ident(collect)operator(()ident(iterator)operator(,) ident(context)operator(\))operator(;)
  operator(})operator(,)

  function(all)operator(:) keyword(function)operator(()ident(iterator)operator(,) ident(context)operator(\)) operator({)
    ident(iterator) operator(=) ident(iterator) operator(||) ident(Prototype)operator(.)ident(K)operator(;)
    keyword(var) ident(result) operator(=) predefined_constant(true)operator(;)
    local_variable(this)operator(.)ident(each)operator(()keyword(function)operator(()ident(value)operator(,) ident(index)operator(\)) operator({)
      ident(result) operator(=) ident(result) operator(&&) operator(!!)ident(iterator)operator(.)ident(call)operator(()ident(context)operator(,) ident(value)operator(,) ident(index)operator(\))operator(;)
      keyword(if) operator((!)ident(result)operator(\)) keyword(throw) predefined($break)operator(;)
    operator(}\))operator(;)
    keyword(return) ident(result)operator(;)
  operator(})operator(,)

  function(any)operator(:) keyword(function)operator(()ident(iterator)operator(,) ident(context)operator(\)) operator({)
    ident(iterator) operator(=) ident(iterator) operator(||) ident(Prototype)operator(.)ident(K)operator(;)
    keyword(var) ident(result) operator(=) predefined_constant(false)operator(;)
    local_variable(this)operator(.)ident(each)operator(()keyword(function)operator(()ident(value)operator(,) ident(index)operator(\)) operator({)
      keyword(if) operator(()ident(result) operator(=) operator(!!)ident(iterator)operator(.)ident(call)operator(()ident(context)operator(,) ident(value)operator(,) ident(index)operator(\)\))
        keyword(throw) predefined($break)operator(;)
    operator(}\))operator(;)
    keyword(return) ident(result)operator(;)
  operator(})operator(,)

  function(collect)operator(:) keyword(function)operator(()ident(iterator)operator(,) ident(context)operator(\)) operator({)
    ident(iterator) operator(=) ident(iterator) operator(||) ident(Prototype)operator(.)ident(K)operator(;)
    keyword(var) ident(results) operator(=) operator([)operator(])operator(;)
    local_variable(this)operator(.)ident(each)operator(()keyword(function)operator(()ident(value)operator(,) ident(index)operator(\)) operator({)
      ident(results)operator(.)ident(push)operator(()ident(iterator)operator(.)ident(call)operator(()ident(context)operator(,) ident(value)operator(,) ident(index)operator(\)\))operator(;)
    operator(}\))operator(;)
    keyword(return) ident(results)operator(;)
  operator(})operator(,)

  function(detect)operator(:) keyword(function)operator(()ident(iterator)operator(,) ident(context)operator(\)) operator({)
    keyword(var) ident(result)operator(;)
    local_variable(this)operator(.)ident(each)operator(()keyword(function)operator(()ident(value)operator(,) ident(index)operator(\)) operator({)
      keyword(if) operator(()ident(iterator)operator(.)ident(call)operator(()ident(context)operator(,) ident(value)operator(,) ident(index)operator(\)\)) operator({)
        ident(result) operator(=) ident(value)operator(;)
        keyword(throw) predefined($break)operator(;)
      operator(})
    operator(}\))operator(;)
    keyword(return) ident(result)operator(;)
  operator(})operator(,)

  function(findAll)operator(:) keyword(function)operator(()ident(iterator)operator(,) ident(context)operator(\)) operator({)
    keyword(var) ident(results) operator(=) operator([)operator(])operator(;)
    local_variable(this)operator(.)ident(each)operator(()keyword(function)operator(()ident(value)operator(,) ident(index)operator(\)) operator({)
      keyword(if) operator(()ident(iterator)operator(.)ident(call)operator(()ident(context)operator(,) ident(value)operator(,) ident(index)operator(\)\))
        ident(results)operator(.)ident(push)operator(()ident(value)operator(\))operator(;)
    operator(}\))operator(;)
    keyword(return) ident(results)operator(;)
  operator(})operator(,)

  function(grep)operator(:) keyword(function)operator(()ident(filter)operator(,) ident(iterator)operator(,) ident(context)operator(\)) operator({)
    ident(iterator) operator(=) ident(iterator) operator(||) ident(Prototype)operator(.)ident(K)operator(;)
    keyword(var) ident(results) operator(=) operator([)operator(])operator(;)

    keyword(if) operator(()ident(Object)operator(.)ident(isString)operator(()ident(filter)operator(\)\))
      ident(filter) operator(=) keyword(new) ident(RegExp)operator(()ident(filter)operator(\))operator(;)

    local_variable(this)operator(.)ident(each)operator(()keyword(function)operator(()ident(value)operator(,) ident(index)operator(\)) operator({)
      keyword(if) operator(()ident(filter)operator(.)ident(match)operator(()ident(value)operator(\)\))
        ident(results)operator(.)ident(push)operator(()ident(iterator)operator(.)ident(call)operator(()ident(context)operator(,) ident(value)operator(,) ident(index)operator(\)\))operator(;)
    operator(}\))operator(;)
    keyword(return) ident(results)operator(;)
  operator(})operator(,)

  function(include)operator(:) keyword(function)operator(()ident(object)operator(\)) operator({)
    keyword(if) operator(()ident(Object)operator(.)ident(isFunction)operator(()local_variable(this)operator(.)ident(indexOf)operator(\)\))
      keyword(if) operator(()local_variable(this)operator(.)ident(indexOf)operator(()ident(object)operator(\)) operator(!=) operator(-)integer(1)operator(\)) keyword(return) predefined_constant(true)operator(;)

    keyword(var) ident(found) operator(=) predefined_constant(false)operator(;)
    local_variable(this)operator(.)ident(each)operator(()keyword(function)operator(()ident(value)operator(\)) operator({)
      keyword(if) operator(()ident(value) operator(==) ident(object)operator(\)) operator({)
        ident(found) operator(=) predefined_constant(true)operator(;)
        keyword(throw) predefined($break)operator(;)
      operator(})
    operator(}\))operator(;)
    keyword(return) ident(found)operator(;)
  operator(})operator(,)

  function(inGroupsOf)operator(:) keyword(function)operator(()ident(number)operator(,) ident(fillWith)operator(\)) operator({)
    ident(fillWith) operator(=) ident(Object)operator(.)ident(isUndefined)operator(()ident(fillWith)operator(\)) operator(?) predefined_constant(null) operator(:) ident(fillWith)operator(;)
    keyword(return) local_variable(this)operator(.)ident(eachSlice)operator(()ident(number)operator(,) keyword(function)operator(()ident(slice)operator(\)) operator({)
      keyword(while)operator(()ident(slice)operator(.)ident(length) operator(<) ident(number)operator(\)) ident(slice)operator(.)ident(push)operator(()ident(fillWith)operator(\))operator(;)
      keyword(return) ident(slice)operator(;)
    operator(}\))operator(;)
  operator(})operator(,)

  function(inject)operator(:) keyword(function)operator(()ident(memo)operator(,) ident(iterator)operator(,) ident(context)operator(\)) operator({)
    local_variable(this)operator(.)ident(each)operator(()keyword(function)operator(()ident(value)operator(,) ident(index)operator(\)) operator({)
      ident(memo) operator(=) ident(iterator)operator(.)ident(call)operator(()ident(context)operator(,) ident(memo)operator(,) ident(value)operator(,) ident(index)operator(\))operator(;)
    operator(}\))operator(;)
    keyword(return) ident(memo)operator(;)
  operator(})operator(,)

  function(invoke)operator(:) keyword(function)operator(()ident(method)operator(\)) operator({)
    keyword(var) ident(args) operator(=) predefined($A)operator(()local_variable(arguments)operator(\))operator(.)ident(slice)operator(()integer(1)operator(\))operator(;)
    keyword(return) local_variable(this)operator(.)ident(map)operator(()keyword(function)operator(()ident(value)operator(\)) operator({)
      keyword(return) ident(value)operator([)ident(method)operator(])operator(.)ident(apply)operator(()ident(value)operator(,) ident(args)operator(\))operator(;)
    operator(}\))operator(;)
  operator(})operator(,)

  function(max)operator(:) keyword(function)operator(()ident(iterator)operator(,) ident(context)operator(\)) operator({)
    ident(iterator) operator(=) ident(iterator) operator(||) ident(Prototype)operator(.)ident(K)operator(;)
    keyword(var) ident(result)operator(;)
    local_variable(this)operator(.)ident(each)operator(()keyword(function)operator(()ident(value)operator(,) ident(index)operator(\)) operator({)
      ident(value) operator(=) ident(iterator)operator(.)ident(call)operator(()ident(context)operator(,) ident(value)operator(,) ident(index)operator(\))operator(;)
      keyword(if) operator(()ident(result) operator(==) predefined_constant(null) operator(||) ident(value) operator(>=) ident(result)operator(\))
        ident(result) operator(=) ident(value)operator(;)
    operator(}\))operator(;)
    keyword(return) ident(result)operator(;)
  operator(})operator(,)

  function(min)operator(:) keyword(function)operator(()ident(iterator)operator(,) ident(context)operator(\)) operator({)
    ident(iterator) operator(=) ident(iterator) operator(||) ident(Prototype)operator(.)ident(K)operator(;)
    keyword(var) ident(result)operator(;)
    local_variable(this)operator(.)ident(each)operator(()keyword(function)operator(()ident(value)operator(,) ident(index)operator(\)) operator({)
      ident(value) operator(=) ident(iterator)operator(.)ident(call)operator(()ident(context)operator(,) ident(value)operator(,) ident(index)operator(\))operator(;)
      keyword(if) operator(()ident(result) operator(==) predefined_constant(null) operator(||) ident(value) operator(<) ident(result)operator(\))
        ident(result) operator(=) ident(value)operator(;)
    operator(}\))operator(;)
    keyword(return) ident(result)operator(;)
  operator(})operator(,)

  function(partition)operator(:) keyword(function)operator(()ident(iterator)operator(,) ident(context)operator(\)) operator({)
    ident(iterator) operator(=) ident(iterator) operator(||) ident(Prototype)operator(.)ident(K)operator(;)
    keyword(var) ident(trues) operator(=) operator([)operator(])operator(,) ident(falses) operator(=) operator([)operator(])operator(;)
    local_variable(this)operator(.)ident(each)operator(()keyword(function)operator(()ident(value)operator(,) ident(index)operator(\)) operator({)
      operator(()ident(iterator)operator(.)ident(call)operator(()ident(context)operator(,) ident(value)operator(,) ident(index)operator(\)) operator(?)
        ident(trues) operator(:) ident(falses)operator(\))operator(.)ident(push)operator(()ident(value)operator(\))operator(;)
    operator(}\))operator(;)
    keyword(return) operator([)ident(trues)operator(,) ident(falses)operator(])operator(;)
  operator(})operator(,)

  function(pluck)operator(:) keyword(function)operator(()ident(property)operator(\)) operator({)
    keyword(var) ident(results) operator(=) operator([)operator(])operator(;)
    local_variable(this)operator(.)ident(each)operator(()keyword(function)operator(()ident(value)operator(\)) operator({)
      ident(results)operator(.)ident(push)operator(()ident(value)operator([)ident(property)operator(]\))operator(;)
    operator(}\))operator(;)
    keyword(return) ident(results)operator(;)
  operator(})operator(,)

  function(reject)operator(:) keyword(function)operator(()ident(iterator)operator(,) ident(context)operator(\)) operator({)
    keyword(var) ident(results) operator(=) operator([)operator(])operator(;)
    local_variable(this)operator(.)ident(each)operator(()keyword(function)operator(()ident(value)operator(,) ident(index)operator(\)) operator({)
      keyword(if) operator((!)ident(iterator)operator(.)ident(call)operator(()ident(context)operator(,) ident(value)operator(,) ident(index)operator(\)\))
        ident(results)operator(.)ident(push)operator(()ident(value)operator(\))operator(;)
    operator(}\))operator(;)
    keyword(return) ident(results)operator(;)
  operator(})operator(,)

  function(sortBy)operator(:) keyword(function)operator(()ident(iterator)operator(,) ident(context)operator(\)) operator({)
    keyword(return) local_variable(this)operator(.)ident(map)operator(()keyword(function)operator(()ident(value)operator(,) ident(index)operator(\)) operator({)
      keyword(return) operator({)
        key(value)operator(:) ident(value)operator(,)
        key(criteria)operator(:) ident(iterator)operator(.)ident(call)operator(()ident(context)operator(,) ident(value)operator(,) ident(index)operator(\))
      operator(})operator(;)
    operator(}\))operator(.)ident(sort)operator(()keyword(function)operator(()ident(left)operator(,) ident(right)operator(\)) operator({)
      keyword(var) ident(a) operator(=) ident(left)operator(.)ident(criteria)operator(,) ident(b) operator(=) ident(right)operator(.)ident(criteria)operator(;)
      keyword(return) ident(a) operator(<) ident(b) operator(?) operator(-)integer(1) operator(:) ident(a) operator(>) ident(b) operator(?) integer(1) operator(:) integer(0)operator(;)
    operator(}\))operator(.)ident(pluck)operator(()string<delimiter(')content(value)delimiter(')>operator(\))operator(;)
  operator(})operator(,)

  function(toArray)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(return) local_variable(this)operator(.)ident(map)operator(()operator(\))operator(;)
  operator(})operator(,)

  function(zip)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(var) ident(iterator) operator(=) ident(Prototype)operator(.)ident(K)operator(,) ident(args) operator(=) predefined($A)operator(()local_variable(arguments)operator(\))operator(;)
    keyword(if) operator(()ident(Object)operator(.)ident(isFunction)operator(()ident(args)operator(.)ident(last)operator(()operator(\)\)\))
      ident(iterator) operator(=) ident(args)operator(.)ident(pop)operator(()operator(\))operator(;)

    keyword(var) ident(collections) operator(=) operator([)local_variable(this)operator(])operator(.)ident(concat)operator(()ident(args)operator(\))operator(.)ident(map)operator(()predefined($A)operator(\))operator(;)
    keyword(return) local_variable(this)operator(.)ident(map)operator(()keyword(function)operator(()ident(value)operator(,) ident(index)operator(\)) operator({)
      keyword(return) ident(iterator)operator(()ident(collections)operator(.)ident(pluck)operator(()ident(index)operator(\)\))operator(;)
    operator(}\))operator(;)
  operator(})operator(,)

  function(size)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(return) local_variable(this)operator(.)ident(toArray)operator(()operator(\))operator(.)ident(length)operator(;)
  operator(})operator(,)

  function(inspect)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(return) string<delimiter(')content(#<Enumerable:)delimiter(')> operator(+) local_variable(this)operator(.)ident(toArray)operator(()operator(\))operator(.)ident(inspect)operator(()operator(\)) operator(+) string<delimiter(')content(>)delimiter(')>operator(;)
  operator(})
operator(})operator(;)

ident(Object)operator(.)ident(extend)operator(()ident(Enumerable)operator(,) operator({)
  key(map)operator(:)     ident(Enumerable)operator(.)ident(collect)operator(,)
  key(find)operator(:)    ident(Enumerable)operator(.)ident(detect)operator(,)
  key(select)operator(:)  ident(Enumerable)operator(.)ident(findAll)operator(,)
  key(filter)operator(:)  ident(Enumerable)operator(.)ident(findAll)operator(,)
  key(member)operator(:)  ident(Enumerable)operator(.)ident(include)operator(,)
  key(entries)operator(:) ident(Enumerable)operator(.)ident(toArray)operator(,)
  key(every)operator(:)   ident(Enumerable)operator(.)ident(all)operator(,)
  key(some)operator(:)    ident(Enumerable)operator(.)ident(any)
operator(}\))operator(;)
keyword(function) predefined($A)operator(()ident(iterable)operator(\)) operator({)
  keyword(if) operator((!)ident(iterable)operator(\)) keyword(return) operator([)operator(])operator(;)
  keyword(if) operator(()ident(iterable)operator(.)ident(toArray)operator(\)) keyword(return) ident(iterable)operator(.)ident(toArray)operator(()operator(\))operator(;)
  keyword(var) ident(length) operator(=) ident(iterable)operator(.)ident(length) operator(||) integer(0)operator(,) ident(results) operator(=) keyword(new) ident(Array)operator(()ident(length)operator(\))operator(;)
  keyword(while) operator(()ident(length)operator(--)operator(\)) ident(results)operator([)ident(length)operator(]) operator(=) ident(iterable)operator([)ident(length)operator(])operator(;)
  keyword(return) ident(results)operator(;)
operator(})

keyword(if) operator(()ident(Prototype)operator(.)ident(Browser)operator(.)ident(WebKit)operator(\)) operator({)
  predefined($A) operator(=) keyword(function)operator(()ident(iterable)operator(\)) operator({)
    keyword(if) operator((!)ident(iterable)operator(\)) keyword(return) operator([)operator(])operator(;)
    comment(// In Safari, only use the `toArray` method if it's not a NodeList.)
    comment(// A NodeList is a function, has an function `item` property, and a numeric)
    comment(// `length` property. Adapted from Google Doctype.)
    keyword(if) operator((!()keyword(typeof) ident(iterable) operator(===) string<delimiter(')content(function)delimiter(')> operator(&&) keyword(typeof) ident(iterable)operator(.)ident(length) operator(===)
        string<delimiter(')content(number)delimiter(')> operator(&&) keyword(typeof) ident(iterable)operator(.)ident(item) operator(===) string<delimiter(')content(function)delimiter(')>operator(\)) operator(&&) ident(iterable)operator(.)ident(toArray)operator(\))
      keyword(return) ident(iterable)operator(.)ident(toArray)operator(()operator(\))operator(;)
    keyword(var) ident(length) operator(=) ident(iterable)operator(.)ident(length) operator(||) integer(0)operator(,) ident(results) operator(=) keyword(new) ident(Array)operator(()ident(length)operator(\))operator(;)
    keyword(while) operator(()ident(length)operator(--)operator(\)) ident(results)operator([)ident(length)operator(]) operator(=) ident(iterable)operator([)ident(length)operator(])operator(;)
    keyword(return) ident(results)operator(;)
  operator(})operator(;)
operator(})

ident(Array)operator(.)ident(from) operator(=) predefined($A)operator(;)

ident(Object)operator(.)ident(extend)operator(()ident(Array)operator(.)ident(prototype)operator(,) ident(Enumerable)operator(\))operator(;)

keyword(if) operator((!)ident(Array)operator(.)ident(prototype)operator(.)ident(_reverse)operator(\)) ident(Array)operator(.)ident(prototype)operator(.)ident(_reverse) operator(=) ident(Array)operator(.)ident(prototype)operator(.)ident(reverse)operator(;)

ident(Object)operator(.)ident(extend)operator(()ident(Array)operator(.)ident(prototype)operator(,) operator({)
  function(_each)operator(:) keyword(function)operator(()ident(iterator)operator(\)) operator({)
    keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(,) ident(length) operator(=) local_variable(this)operator(.)ident(length)operator(;) ident(i) operator(<) ident(length)operator(;) ident(i)operator(++)operator(\))
      ident(iterator)operator(()local_variable(this)operator([)ident(i)operator(]\))operator(;)
  operator(})operator(,)

  function(clear)operator(:) keyword(function)operator(()operator(\)) operator({)
    local_variable(this)operator(.)ident(length) operator(=) integer(0)operator(;)
    keyword(return) local_variable(this)operator(;)
  operator(})operator(,)

  function(first)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(return) local_variable(this)operator([)integer(0)operator(])operator(;)
  operator(})operator(,)

  function(last)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(return) local_variable(this)operator([)local_variable(this)operator(.)ident(length) operator(-) integer(1)operator(])operator(;)
  operator(})operator(,)

  function(compact)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(return) local_variable(this)operator(.)ident(select)operator(()keyword(function)operator(()ident(value)operator(\)) operator({)
      keyword(return) ident(value) operator(!=) predefined_constant(null)operator(;)
    operator(}\))operator(;)
  operator(})operator(,)

  function(flatten)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(return) local_variable(this)operator(.)ident(inject)operator(([)operator(])operator(,) keyword(function)operator(()ident(array)operator(,) ident(value)operator(\)) operator({)
      keyword(return) ident(array)operator(.)ident(concat)operator(()ident(Object)operator(.)ident(isArray)operator(()ident(value)operator(\)) operator(?)
        ident(value)operator(.)ident(flatten)operator(()operator(\)) operator(:) operator([)ident(value)operator(]\))operator(;)
    operator(}\))operator(;)
  operator(})operator(,)

  function(without)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(var) ident(values) operator(=) predefined($A)operator(()local_variable(arguments)operator(\))operator(;)
    keyword(return) local_variable(this)operator(.)ident(select)operator(()keyword(function)operator(()ident(value)operator(\)) operator({)
      keyword(return) operator(!)ident(values)operator(.)ident(include)operator(()ident(value)operator(\))operator(;)
    operator(}\))operator(;)
  operator(})operator(,)

  function(reverse)operator(:) keyword(function)operator(()ident(inline)operator(\)) operator({)
    keyword(return) operator(()ident(inline) operator(!==) predefined_constant(false) operator(?) local_variable(this) operator(:) local_variable(this)operator(.)ident(toArray)operator(()operator(\)\))operator(.)ident(_reverse)operator(()operator(\))operator(;)
  operator(})operator(,)

  function(reduce)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(return) local_variable(this)operator(.)ident(length) operator(>) integer(1) operator(?) local_variable(this) operator(:) local_variable(this)operator([)integer(0)operator(])operator(;)
  operator(})operator(,)

  function(uniq)operator(:) keyword(function)operator(()ident(sorted)operator(\)) operator({)
    keyword(return) local_variable(this)operator(.)ident(inject)operator(([)operator(])operator(,) keyword(function)operator(()ident(array)operator(,) ident(value)operator(,) ident(index)operator(\)) operator({)
      keyword(if) operator(()integer(0) operator(==) ident(index) operator(||) operator(()ident(sorted) operator(?) ident(array)operator(.)ident(last)operator(()operator(\)) operator(!=) ident(value) operator(:) operator(!)ident(array)operator(.)ident(include)operator(()ident(value)operator(\)\)\))
        ident(array)operator(.)ident(push)operator(()ident(value)operator(\))operator(;)
      keyword(return) ident(array)operator(;)
    operator(}\))operator(;)
  operator(})operator(,)

  function(intersect)operator(:) keyword(function)operator(()ident(array)operator(\)) operator({)
    keyword(return) local_variable(this)operator(.)ident(uniq)operator(()operator(\))operator(.)ident(findAll)operator(()keyword(function)operator(()ident(item)operator(\)) operator({)
      keyword(return) ident(array)operator(.)ident(detect)operator(()keyword(function)operator(()ident(value)operator(\)) operator({) keyword(return) ident(item) operator(===) ident(value) operator(}\))operator(;)
    operator(}\))operator(;)
  operator(})operator(,)

  function(clone)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(return) operator([)operator(])operator(.)ident(concat)operator(()local_variable(this)operator(\))operator(;)
  operator(})operator(,)

  function(size)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(return) local_variable(this)operator(.)ident(length)operator(;)
  operator(})operator(,)

  function(inspect)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(return) string<delimiter(')content([)delimiter(')> operator(+) local_variable(this)operator(.)ident(map)operator(()ident(Object)operator(.)ident(inspect)operator(\))operator(.)ident(join)operator(()string<delimiter(')content(, )delimiter(')>operator(\)) operator(+) string<delimiter(')content(])delimiter(')>operator(;)
  operator(})operator(,)

  function(toJSON)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(var) ident(results) operator(=) operator([)operator(])operator(;)
    local_variable(this)operator(.)ident(each)operator(()keyword(function)operator(()ident(object)operator(\)) operator({)
      keyword(var) ident(value) operator(=) ident(Object)operator(.)ident(toJSON)operator(()ident(object)operator(\))operator(;)
      keyword(if) operator((!)ident(Object)operator(.)ident(isUndefined)operator(()ident(value)operator(\)\)) ident(results)operator(.)ident(push)operator(()ident(value)operator(\))operator(;)
    operator(}\))operator(;)
    keyword(return) string<delimiter(')content([)delimiter(')> operator(+) ident(results)operator(.)ident(join)operator(()string<delimiter(')content(, )delimiter(')>operator(\)) operator(+) string<delimiter(')content(])delimiter(')>operator(;)
  operator(})
operator(}\))operator(;)

comment(// use native browser JS 1.6 implementation if available)
keyword(if) operator(()ident(Object)operator(.)ident(isFunction)operator(()ident(Array)operator(.)ident(prototype)operator(.)ident(forEach)operator(\)\))
  ident(Array)operator(.)ident(prototype)operator(.)ident(_each) operator(=) ident(Array)operator(.)ident(prototype)operator(.)ident(forEach)operator(;)

keyword(if) operator((!)ident(Array)operator(.)ident(prototype)operator(.)ident(indexOf)operator(\)) ident(Array)operator(.)ident(prototype)operator(.)function(indexOf) operator(=) keyword(function)operator(()ident(item)operator(,) ident(i)operator(\)) operator({)
  ident(i) operator(||) operator(()ident(i) operator(=) integer(0)operator(\))operator(;)
  keyword(var) ident(length) operator(=) local_variable(this)operator(.)ident(length)operator(;)
  keyword(if) operator(()ident(i) operator(<) integer(0)operator(\)) ident(i) operator(=) ident(length) operator(+) ident(i)operator(;)
  keyword(for) operator((;) ident(i) operator(<) ident(length)operator(;) ident(i)operator(++)operator(\))
    keyword(if) operator(()local_variable(this)operator([)ident(i)operator(]) operator(===) ident(item)operator(\)) keyword(return) ident(i)operator(;)
  keyword(return) operator(-)integer(1)operator(;)
operator(})operator(;)

keyword(if) operator((!)ident(Array)operator(.)ident(prototype)operator(.)ident(lastIndexOf)operator(\)) ident(Array)operator(.)ident(prototype)operator(.)function(lastIndexOf) operator(=) keyword(function)operator(()ident(item)operator(,) ident(i)operator(\)) operator({)
  ident(i) operator(=) ident(isNaN)operator(()ident(i)operator(\)) operator(?) local_variable(this)operator(.)ident(length) operator(:) operator(()ident(i) operator(<) integer(0) operator(?) local_variable(this)operator(.)ident(length) operator(+) ident(i) operator(:) ident(i)operator(\)) operator(+) integer(1)operator(;)
  keyword(var) ident(n) operator(=) local_variable(this)operator(.)ident(slice)operator(()integer(0)operator(,) ident(i)operator(\))operator(.)ident(reverse)operator(()operator(\))operator(.)ident(indexOf)operator(()ident(item)operator(\))operator(;)
  keyword(return) operator(()ident(n) operator(<) integer(0)operator(\)) operator(?) ident(n) operator(:) ident(i) operator(-) ident(n) operator(-) integer(1)operator(;)
operator(})operator(;)

ident(Array)operator(.)ident(prototype)operator(.)ident(toArray) operator(=) ident(Array)operator(.)ident(prototype)operator(.)ident(clone)operator(;)

keyword(function) predefined($w)operator(()ident(string)operator(\)) operator({)
  keyword(if) operator((!)ident(Object)operator(.)ident(isString)operator(()ident(string)operator(\)\)) keyword(return) operator([)operator(])operator(;)
  ident(string) operator(=) ident(string)operator(.)ident(strip)operator(()operator(\))operator(;)
  keyword(return) ident(string) operator(?) ident(string)operator(.)ident(split)operator(()regexp<delimiter(/)char(\\s)content(+)delimiter(/)>operator(\)) operator(:) operator([)operator(])operator(;)
operator(})

keyword(if) operator(()ident(Prototype)operator(.)ident(Browser)operator(.)ident(Opera)operator(\))operator({)
  ident(Array)operator(.)ident(prototype)operator(.)function(concat) operator(=) keyword(function)operator(()operator(\)) operator({)
    keyword(var) ident(array) operator(=) operator([)operator(])operator(;)
    keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(,) ident(length) operator(=) local_variable(this)operator(.)ident(length)operator(;) ident(i) operator(<) ident(length)operator(;) ident(i)operator(++)operator(\)) ident(array)operator(.)ident(push)operator(()local_variable(this)operator([)ident(i)operator(]\))operator(;)
    keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(,) ident(length) operator(=) local_variable(arguments)operator(.)ident(length)operator(;) ident(i) operator(<) ident(length)operator(;) ident(i)operator(++)operator(\)) operator({)
      keyword(if) operator(()ident(Object)operator(.)ident(isArray)operator(()local_variable(arguments)operator([)ident(i)operator(]\)\)) operator({)
        keyword(for) operator(()keyword(var) ident(j) operator(=) integer(0)operator(,) ident(arrayLength) operator(=) local_variable(arguments)operator([)ident(i)operator(])operator(.)ident(length)operator(;) ident(j) operator(<) ident(arrayLength)operator(;) ident(j)operator(++)operator(\))
          ident(array)operator(.)ident(push)operator(()local_variable(arguments)operator([)ident(i)operator(])operator([)ident(j)operator(]\))operator(;)
      operator(}) keyword(else) operator({)
        ident(array)operator(.)ident(push)operator(()local_variable(arguments)operator([)ident(i)operator(]\))operator(;)
      operator(})
    operator(})
    keyword(return) ident(array)operator(;)
  operator(})operator(;)
operator(})
ident(Object)operator(.)ident(extend)operator(()ident(Number)operator(.)ident(prototype)operator(,) operator({)
  function(toColorPart)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(return) local_variable(this)operator(.)ident(toPaddedString)operator(()integer(2)operator(,) integer(16)operator(\))operator(;)
  operator(})operator(,)

  function(succ)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(return) local_variable(this) operator(+) integer(1)operator(;)
  operator(})operator(,)

  function(times)operator(:) keyword(function)operator(()ident(iterator)operator(,) ident(context)operator(\)) operator({)
    predefined($R)operator(()integer(0)operator(,) local_variable(this)operator(,) predefined_constant(true)operator(\))operator(.)ident(each)operator(()ident(iterator)operator(,) ident(context)operator(\))operator(;)
    keyword(return) local_variable(this)operator(;)
  operator(})operator(,)

  function(toPaddedString)operator(:) keyword(function)operator(()ident(length)operator(,) ident(radix)operator(\)) operator({)
    keyword(var) ident(string) operator(=) local_variable(this)operator(.)ident(toString)operator(()ident(radix) operator(||) integer(10)operator(\))operator(;)
    keyword(return) string<delimiter(')content(0)delimiter(')>operator(.)ident(times)operator(()ident(length) operator(-) ident(string)operator(.)ident(length)operator(\)) operator(+) ident(string)operator(;)
  operator(})operator(,)

  function(toJSON)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(return) ident(isFinite)operator(()local_variable(this)operator(\)) operator(?) local_variable(this)operator(.)ident(toString)operator(()operator(\)) operator(:) string<delimiter(')content(null)delimiter(')>operator(;)
  operator(})
operator(}\))operator(;)

predefined($w)operator(()string<delimiter(')content(abs round ceil floor)delimiter(')>operator(\))operator(.)ident(each)operator(()keyword(function)operator(()ident(method)operator(\))operator({)
  ident(Number)operator(.)ident(prototype)operator([)ident(method)operator(]) operator(=) ident(Math)operator([)ident(method)operator(])operator(.)ident(methodize)operator(()operator(\))operator(;)
operator(}\))operator(;)
keyword(function) predefined($H)operator(()ident(object)operator(\)) operator({)
  keyword(return) keyword(new) ident(Hash)operator(()ident(object)operator(\))operator(;)
operator(})operator(;)

keyword(var) ident(Hash) operator(=) ident(Class)operator(.)ident(create)operator(()ident(Enumerable)operator(,) operator(()keyword(function)operator(()operator(\)) operator({)

  keyword(function) function(toQueryPair)operator(()ident(key)operator(,) ident(value)operator(\)) operator({)
    keyword(if) operator(()ident(Object)operator(.)ident(isUndefined)operator(()ident(value)operator(\)\)) keyword(return) ident(key)operator(;)
    keyword(return) ident(key) operator(+) string<delimiter(')content(=)delimiter(')> operator(+) ident(encodeURIComponent)operator(()ident(String)operator(.)ident(interpret)operator(()ident(value)operator(\)\))operator(;)
  operator(})

  keyword(return) operator({)
    function(initialize)operator(:) keyword(function)operator(()ident(object)operator(\)) operator({)
      local_variable(this)operator(.)ident(_object) operator(=) ident(Object)operator(.)ident(isHash)operator(()ident(object)operator(\)) operator(?) ident(object)operator(.)ident(toObject)operator(()operator(\)) operator(:) ident(Object)operator(.)ident(clone)operator(()ident(object)operator(\))operator(;)
    operator(})operator(,)

    function(_each)operator(:) keyword(function)operator(()ident(iterator)operator(\)) operator({)
      keyword(for) operator(()keyword(var) ident(key) keyword(in) local_variable(this)operator(.)ident(_object)operator(\)) operator({)
        keyword(var) ident(value) operator(=) local_variable(this)operator(.)ident(_object)operator([)ident(key)operator(])operator(,) ident(pair) operator(=) operator([)ident(key)operator(,) ident(value)operator(])operator(;)
        ident(pair)operator(.)ident(key) operator(=) ident(key)operator(;)
        ident(pair)operator(.)ident(value) operator(=) ident(value)operator(;)
        ident(iterator)operator(()ident(pair)operator(\))operator(;)
      operator(})
    operator(})operator(,)

    function(set)operator(:) keyword(function)operator(()ident(key)operator(,) ident(value)operator(\)) operator({)
      keyword(return) local_variable(this)operator(.)ident(_object)operator([)ident(key)operator(]) operator(=) ident(value)operator(;)
    operator(})operator(,)

    function(get)operator(:) keyword(function)operator(()ident(key)operator(\)) operator({)
      comment(// simulating poorly supported hasOwnProperty)
      keyword(if) operator(()local_variable(this)operator(.)ident(_object)operator([)ident(key)operator(]) operator(!==) ident(Object)operator(.)ident(prototype)operator([)ident(key)operator(]\))
        keyword(return) local_variable(this)operator(.)ident(_object)operator([)ident(key)operator(])operator(;)
    operator(})operator(,)

    function(unset)operator(:) keyword(function)operator(()ident(key)operator(\)) operator({)
      keyword(var) ident(value) operator(=) local_variable(this)operator(.)ident(_object)operator([)ident(key)operator(])operator(;)
      keyword(delete) local_variable(this)operator(.)ident(_object)operator([)ident(key)operator(])operator(;)
      keyword(return) ident(value)operator(;)
    operator(})operator(,)

    function(toObject)operator(:) keyword(function)operator(()operator(\)) operator({)
      keyword(return) ident(Object)operator(.)ident(clone)operator(()local_variable(this)operator(.)ident(_object)operator(\))operator(;)
    operator(})operator(,)

    function(keys)operator(:) keyword(function)operator(()operator(\)) operator({)
      keyword(return) local_variable(this)operator(.)ident(pluck)operator(()string<delimiter(')content(key)delimiter(')>operator(\))operator(;)
    operator(})operator(,)

    function(values)operator(:) keyword(function)operator(()operator(\)) operator({)
      keyword(return) local_variable(this)operator(.)ident(pluck)operator(()string<delimiter(')content(value)delimiter(')>operator(\))operator(;)
    operator(})operator(,)

    function(index)operator(:) keyword(function)operator(()ident(value)operator(\)) operator({)
      keyword(var) ident(match) operator(=) local_variable(this)operator(.)ident(detect)operator(()keyword(function)operator(()ident(pair)operator(\)) operator({)
        keyword(return) ident(pair)operator(.)ident(value) operator(===) ident(value)operator(;)
      operator(}\))operator(;)
      keyword(return) ident(match) operator(&&) ident(match)operator(.)ident(key)operator(;)
    operator(})operator(,)

    function(merge)operator(:) keyword(function)operator(()ident(object)operator(\)) operator({)
      keyword(return) local_variable(this)operator(.)ident(clone)operator(()operator(\))operator(.)ident(update)operator(()ident(object)operator(\))operator(;)
    operator(})operator(,)

    function(update)operator(:) keyword(function)operator(()ident(object)operator(\)) operator({)
      keyword(return) keyword(new) ident(Hash)operator(()ident(object)operator(\))operator(.)ident(inject)operator(()local_variable(this)operator(,) keyword(function)operator(()ident(result)operator(,) ident(pair)operator(\)) operator({)
        ident(result)operator(.)ident(set)operator(()ident(pair)operator(.)ident(key)operator(,) ident(pair)operator(.)ident(value)operator(\))operator(;)
        keyword(return) ident(result)operator(;)
      operator(}\))operator(;)
    operator(})operator(,)

    function(toQueryString)operator(:) keyword(function)operator(()operator(\)) operator({)
      keyword(return) local_variable(this)operator(.)ident(inject)operator(([)operator(])operator(,) keyword(function)operator(()ident(results)operator(,) ident(pair)operator(\)) operator({)
        keyword(var) ident(key) operator(=) ident(encodeURIComponent)operator(()ident(pair)operator(.)ident(key)operator(\))operator(,) ident(values) operator(=) ident(pair)operator(.)ident(value)operator(;)

        keyword(if) operator(()ident(values) operator(&&) keyword(typeof) ident(values) operator(==) string<delimiter(')content(object)delimiter(')>operator(\)) operator({)
          keyword(if) operator(()ident(Object)operator(.)ident(isArray)operator(()ident(values)operator(\)\))
            keyword(return) ident(results)operator(.)ident(concat)operator(()ident(values)operator(.)ident(map)operator(()ident(toQueryPair)operator(.)ident(curry)operator(()ident(key)operator(\)\)\))operator(;)
        operator(}) keyword(else) ident(results)operator(.)ident(push)operator(()ident(toQueryPair)operator(()ident(key)operator(,) ident(values)operator(\)\))operator(;)
        keyword(return) ident(results)operator(;)
      operator(}\))operator(.)ident(join)operator(()string<delimiter(')content(&)delimiter(')>operator(\))operator(;)
    operator(})operator(,)

    function(inspect)operator(:) keyword(function)operator(()operator(\)) operator({)
      keyword(return) string<delimiter(')content(#<Hash:{)delimiter(')> operator(+) local_variable(this)operator(.)ident(map)operator(()keyword(function)operator(()ident(pair)operator(\)) operator({)
        keyword(return) ident(pair)operator(.)ident(map)operator(()ident(Object)operator(.)ident(inspect)operator(\))operator(.)ident(join)operator(()string<delimiter(')content(: )delimiter(')>operator(\))operator(;)
      operator(}\))operator(.)ident(join)operator(()string<delimiter(')content(, )delimiter(')>operator(\)) operator(+) string<delimiter(')content(}>)delimiter(')>operator(;)
    operator(})operator(,)

    function(toJSON)operator(:) keyword(function)operator(()operator(\)) operator({)
      keyword(return) ident(Object)operator(.)ident(toJSON)operator(()local_variable(this)operator(.)ident(toObject)operator(()operator(\)\))operator(;)
    operator(})operator(,)

    function(clone)operator(:) keyword(function)operator(()operator(\)) operator({)
      keyword(return) keyword(new) ident(Hash)operator(()local_variable(this)operator(\))operator(;)
    operator(})
  operator(})
operator(}\))operator(()operator(\)\))operator(;)

ident(Hash)operator(.)ident(prototype)operator(.)ident(toTemplateReplacements) operator(=) ident(Hash)operator(.)ident(prototype)operator(.)ident(toObject)operator(;)
ident(Hash)operator(.)ident(from) operator(=) predefined($H)operator(;)
keyword(var) ident(ObjectRange) operator(=) ident(Class)operator(.)ident(create)operator(()ident(Enumerable)operator(,) operator({)
  function(initialize)operator(:) keyword(function)operator(()ident(start)operator(,) ident(end)operator(,) ident(exclusive)operator(\)) operator({)
    local_variable(this)operator(.)ident(start) operator(=) ident(start)operator(;)
    local_variable(this)operator(.)ident(end) operator(=) ident(end)operator(;)
    local_variable(this)operator(.)ident(exclusive) operator(=) ident(exclusive)operator(;)
  operator(})operator(,)

  function(_each)operator(:) keyword(function)operator(()ident(iterator)operator(\)) operator({)
    keyword(var) ident(value) operator(=) local_variable(this)operator(.)ident(start)operator(;)
    keyword(while) operator(()local_variable(this)operator(.)ident(include)operator(()ident(value)operator(\)\)) operator({)
      ident(iterator)operator(()ident(value)operator(\))operator(;)
      ident(value) operator(=) ident(value)operator(.)ident(succ)operator(()operator(\))operator(;)
    operator(})
  operator(})operator(,)

  function(include)operator(:) keyword(function)operator(()ident(value)operator(\)) operator({)
    keyword(if) operator(()ident(value) operator(<) local_variable(this)operator(.)ident(start)operator(\))
      keyword(return) predefined_constant(false)operator(;)
    keyword(if) operator(()local_variable(this)operator(.)ident(exclusive)operator(\))
      keyword(return) ident(value) operator(<) local_variable(this)operator(.)ident(end)operator(;)
    keyword(return) ident(value) operator(<=) local_variable(this)operator(.)ident(end)operator(;)
  operator(})
operator(}\))operator(;)

keyword(var) predefined($R) operator(=) keyword(function)operator(()ident(start)operator(,) ident(end)operator(,) ident(exclusive)operator(\)) operator({)
  keyword(return) keyword(new) ident(ObjectRange)operator(()ident(start)operator(,) ident(end)operator(,) ident(exclusive)operator(\))operator(;)
operator(})operator(;)

keyword(var) ident(Ajax) operator(=) operator({)
  function(getTransport)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(return) ident(Try)operator(.)ident(these)operator(()
      keyword(function)operator(()operator(\)) operator({)keyword(return) keyword(new) ident(XMLHttpRequest)operator(()operator(\)})operator(,)
      keyword(function)operator(()operator(\)) operator({)keyword(return) keyword(new) ident(ActiveXObject)operator(()string<delimiter(')content(Msxml2.XMLHTTP)delimiter(')>operator(\)})operator(,)
      keyword(function)operator(()operator(\)) operator({)keyword(return) keyword(new) ident(ActiveXObject)operator(()string<delimiter(')content(Microsoft.XMLHTTP)delimiter(')>operator(\)})
    operator(\)) operator(||) predefined_constant(false)operator(;)
  operator(})operator(,)

  key(activeRequestCount)operator(:) integer(0)
operator(})operator(;)

ident(Ajax)operator(.)ident(Responders) operator(=) operator({)
  key(responders)operator(:) operator([)operator(])operator(,)

  function(_each)operator(:) keyword(function)operator(()ident(iterator)operator(\)) operator({)
    local_variable(this)operator(.)ident(responders)operator(.)ident(_each)operator(()ident(iterator)operator(\))operator(;)
  operator(})operator(,)

  function(register)operator(:) keyword(function)operator(()ident(responder)operator(\)) operator({)
    keyword(if) operator((!)local_variable(this)operator(.)ident(include)operator(()ident(responder)operator(\)\))
      local_variable(this)operator(.)ident(responders)operator(.)ident(push)operator(()ident(responder)operator(\))operator(;)
  operator(})operator(,)

  function(unregister)operator(:) keyword(function)operator(()ident(responder)operator(\)) operator({)
    local_variable(this)operator(.)ident(responders) operator(=) local_variable(this)operator(.)ident(responders)operator(.)ident(without)operator(()ident(responder)operator(\))operator(;)
  operator(})operator(,)

  function(dispatch)operator(:) keyword(function)operator(()ident(callback)operator(,) ident(request)operator(,) ident(transport)operator(,) ident(json)operator(\)) operator({)
    local_variable(this)operator(.)ident(each)operator(()keyword(function)operator(()ident(responder)operator(\)) operator({)
      keyword(if) operator(()ident(Object)operator(.)ident(isFunction)operator(()ident(responder)operator([)ident(callback)operator(]\)\)) operator({)
        keyword(try) operator({)
          ident(responder)operator([)ident(callback)operator(])operator(.)ident(apply)operator(()ident(responder)operator(,) operator([)ident(request)operator(,) ident(transport)operator(,) ident(json)operator(]\))operator(;)
        operator(}) keyword(catch) operator(()ident(e)operator(\)) operator({) operator(})
      operator(})
    operator(}\))operator(;)
  operator(})
operator(})operator(;)

ident(Object)operator(.)ident(extend)operator(()ident(Ajax)operator(.)ident(Responders)operator(,) ident(Enumerable)operator(\))operator(;)

ident(Ajax)operator(.)ident(Responders)operator(.)ident(register)operator(({)
  function(onCreate)operator(:)   keyword(function)operator(()operator(\)) operator({) ident(Ajax)operator(.)ident(activeRequestCount)operator(++) operator(})operator(,)
  function(onComplete)operator(:) keyword(function)operator(()operator(\)) operator({) ident(Ajax)operator(.)ident(activeRequestCount)operator(--) operator(})
operator(}\))operator(;)

ident(Ajax)operator(.)ident(Base) operator(=) ident(Class)operator(.)ident(create)operator(({)
  function(initialize)operator(:) keyword(function)operator(()ident(options)operator(\)) operator({)
    local_variable(this)operator(.)ident(options) operator(=) operator({)
      key(method)operator(:)       string<delimiter(')content(post)delimiter(')>operator(,)
      key(asynchronous)operator(:) predefined_constant(true)operator(,)
      key(contentType)operator(:)  string<delimiter(')content(application/x-www-form-urlencoded)delimiter(')>operator(,)
      key(encoding)operator(:)     string<delimiter(')content(UTF-8)delimiter(')>operator(,)
      key(parameters)operator(:)   string<delimiter(')delimiter(')>operator(,)
      key(evalJSON)operator(:)     predefined_constant(true)operator(,)
      key(evalJS)operator(:)       predefined_constant(true)
    operator(})operator(;)
    ident(Object)operator(.)ident(extend)operator(()local_variable(this)operator(.)ident(options)operator(,) ident(options) operator(||) operator({) operator(}\))operator(;)

    local_variable(this)operator(.)ident(options)operator(.)ident(method) operator(=) local_variable(this)operator(.)ident(options)operator(.)ident(method)operator(.)ident(toLowerCase)operator(()operator(\))operator(;)

    keyword(if) operator(()ident(Object)operator(.)ident(isString)operator(()local_variable(this)operator(.)ident(options)operator(.)ident(parameters)operator(\)\))
      local_variable(this)operator(.)ident(options)operator(.)ident(parameters) operator(=) local_variable(this)operator(.)ident(options)operator(.)ident(parameters)operator(.)ident(toQueryParams)operator(()operator(\))operator(;)
    keyword(else) keyword(if) operator(()ident(Object)operator(.)ident(isHash)operator(()local_variable(this)operator(.)ident(options)operator(.)ident(parameters)operator(\)\))
      local_variable(this)operator(.)ident(options)operator(.)ident(parameters) operator(=) local_variable(this)operator(.)ident(options)operator(.)ident(parameters)operator(.)ident(toObject)operator(()operator(\))operator(;)
  operator(})
operator(}\))operator(;)

ident(Ajax)operator(.)ident(Request) operator(=) ident(Class)operator(.)ident(create)operator(()ident(Ajax)operator(.)ident(Base)operator(,) operator({)
  key(_complete)operator(:) predefined_constant(false)operator(,)

  function(initialize)operator(:) keyword(function)operator(()predefined($super)operator(,) ident(url)operator(,) ident(options)operator(\)) operator({)
    predefined($super)operator(()ident(options)operator(\))operator(;)
    local_variable(this)operator(.)ident(transport) operator(=) ident(Ajax)operator(.)ident(getTransport)operator(()operator(\))operator(;)
    local_variable(this)operator(.)ident(request)operator(()ident(url)operator(\))operator(;)
  operator(})operator(,)

  function(request)operator(:) keyword(function)operator(()ident(url)operator(\)) operator({)
    local_variable(this)operator(.)ident(url) operator(=) ident(url)operator(;)
    local_variable(this)operator(.)ident(method) operator(=) local_variable(this)operator(.)ident(options)operator(.)ident(method)operator(;)
    keyword(var) ident(params) operator(=) ident(Object)operator(.)ident(clone)operator(()local_variable(this)operator(.)ident(options)operator(.)ident(parameters)operator(\))operator(;)

    keyword(if) operator((![)string<delimiter(')content(get)delimiter(')>operator(,) string<delimiter(')content(post)delimiter(')>operator(])operator(.)ident(include)operator(()local_variable(this)operator(.)ident(method)operator(\)\)) operator({)
      comment(// simulate other verbs over post)
      ident(params)operator([)string<delimiter(')content(_method)delimiter(')>operator(]) operator(=) local_variable(this)operator(.)ident(method)operator(;)
      local_variable(this)operator(.)ident(method) operator(=) string<delimiter(')content(post)delimiter(')>operator(;)
    operator(})

    local_variable(this)operator(.)ident(parameters) operator(=) ident(params)operator(;)

    keyword(if) operator(()ident(params) operator(=) ident(Object)operator(.)ident(toQueryString)operator(()ident(params)operator(\)\)) operator({)
      comment(// when GET, append parameters to URL)
      keyword(if) operator(()local_variable(this)operator(.)ident(method) operator(==) string<delimiter(')content(get)delimiter(')>operator(\))
        local_variable(this)operator(.)ident(url) operator(+=) operator(()local_variable(this)operator(.)ident(url)operator(.)ident(include)operator(()string<delimiter(')content(?)delimiter(')>operator(\)) operator(?) string<delimiter(')content(&)delimiter(')> operator(:) string<delimiter(')content(?)delimiter(')>operator(\)) operator(+) ident(params)operator(;)
      keyword(else) keyword(if) operator(()regexp<delimiter(/)content(Konqueror|Safari|KHTML)delimiter(/)>operator(.)ident(test)operator(()ident(navigator)operator(.)ident(userAgent)operator(\)\))
        ident(params) operator(+=) string<delimiter(')content(&_=)delimiter(')>operator(;)
    operator(})

    keyword(try) operator({)
      keyword(var) ident(response) operator(=) keyword(new) ident(Ajax)operator(.)ident(Response)operator(()local_variable(this)operator(\))operator(;)
      keyword(if) operator(()local_variable(this)operator(.)ident(options)operator(.)ident(onCreate)operator(\)) local_variable(this)operator(.)ident(options)operator(.)ident(onCreate)operator(()ident(response)operator(\))operator(;)
      ident(Ajax)operator(.)ident(Responders)operator(.)ident(dispatch)operator(()string<delimiter(')content(onCreate)delimiter(')>operator(,) local_variable(this)operator(,) ident(response)operator(\))operator(;)

      local_variable(this)operator(.)ident(transport)operator(.)ident(open)operator(()local_variable(this)operator(.)ident(method)operator(.)ident(toUpperCase)operator(()operator(\))operator(,) local_variable(this)operator(.)ident(url)operator(,)
        local_variable(this)operator(.)ident(options)operator(.)ident(asynchronous)operator(\))operator(;)

      keyword(if) operator(()local_variable(this)operator(.)ident(options)operator(.)ident(asynchronous)operator(\)) local_variable(this)operator(.)ident(respondToReadyState)operator(.)ident(bind)operator(()local_variable(this)operator(\))operator(.)ident(defer)operator(()integer(1)operator(\))operator(;)

      local_variable(this)operator(.)ident(transport)operator(.)ident(onreadystatechange) operator(=) local_variable(this)operator(.)ident(onStateChange)operator(.)ident(bind)operator(()local_variable(this)operator(\))operator(;)
      local_variable(this)operator(.)ident(setRequestHeaders)operator(()operator(\))operator(;)

      local_variable(this)operator(.)ident(body) operator(=) local_variable(this)operator(.)ident(method) operator(==) string<delimiter(')content(post)delimiter(')> operator(?) operator(()local_variable(this)operator(.)ident(options)operator(.)ident(postBody) operator(||) ident(params)operator(\)) operator(:) predefined_constant(null)operator(;)
      local_variable(this)operator(.)ident(transport)operator(.)ident(send)operator(()local_variable(this)operator(.)ident(body)operator(\))operator(;)

      comment(/* Force Firefox to handle ready state 4 for synchronous requests */)
      keyword(if) operator((!)local_variable(this)operator(.)ident(options)operator(.)ident(asynchronous) operator(&&) local_variable(this)operator(.)ident(transport)operator(.)ident(overrideMimeType)operator(\))
        local_variable(this)operator(.)ident(onStateChange)operator(()operator(\))operator(;)

    operator(})
    keyword(catch) operator(()ident(e)operator(\)) operator({)
      local_variable(this)operator(.)ident(dispatchException)operator(()ident(e)operator(\))operator(;)
    operator(})
  operator(})operator(,)

  function(onStateChange)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(var) ident(readyState) operator(=) local_variable(this)operator(.)ident(transport)operator(.)ident(readyState)operator(;)
    keyword(if) operator(()ident(readyState) operator(>) integer(1) operator(&&) operator(!(()ident(readyState) operator(==) integer(4)operator(\)) operator(&&) local_variable(this)operator(.)ident(_complete)operator(\)\))
      local_variable(this)operator(.)ident(respondToReadyState)operator(()local_variable(this)operator(.)ident(transport)operator(.)ident(readyState)operator(\))operator(;)
  operator(})operator(,)

  function(setRequestHeaders)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(var) ident(headers) operator(=) operator({)
      key<delimiter(')content(X-Requested-With)delimiter(')>operator(:) string<delimiter(')content(XMLHttpRequest)delimiter(')>operator(,)
      key<delimiter(')content(X-Prototype-Version)delimiter(')>operator(:) ident(Prototype)operator(.)ident(Version)operator(,)
      key<delimiter(')content(Accept)delimiter(')>operator(:) string<delimiter(')content(text/javascript, text/html, application/xml, text/xml, */*)delimiter(')>
    operator(})operator(;)

    keyword(if) operator(()local_variable(this)operator(.)ident(method) operator(==) string<delimiter(')content(post)delimiter(')>operator(\)) operator({)
      ident(headers)operator([)string<delimiter(')content(Content-type)delimiter(')>operator(]) operator(=) local_variable(this)operator(.)ident(options)operator(.)ident(contentType) operator(+)
        operator(()local_variable(this)operator(.)ident(options)operator(.)ident(encoding) operator(?) string<delimiter(')content(; charset=)delimiter(')> operator(+) local_variable(this)operator(.)ident(options)operator(.)ident(encoding) operator(:) string<delimiter(')delimiter(')>operator(\))operator(;)

      comment(/* Force "Connection: close" for older Mozilla browsers to work
       * around a bug where XMLHttpRequest sends an incorrect
       * Content-length header. See Mozilla Bugzilla #246651.
       */)
      keyword(if) operator(()local_variable(this)operator(.)ident(transport)operator(.)ident(overrideMimeType) operator(&&)
          operator(()ident(navigator)operator(.)ident(userAgent)operator(.)ident(match)operator(()regexp<delimiter(/)content(Gecko)content(\\/)content(()char(\\d)content({4}\))delimiter(/)>operator(\)) operator(||) operator([)integer(0)operator(,)integer(2005)operator(]\))operator([)integer(1)operator(]) operator(<) integer(2005)operator(\))
            ident(headers)operator([)string<delimiter(')content(Connection)delimiter(')>operator(]) operator(=) string<delimiter(')content(close)delimiter(')>operator(;)
    operator(})

    comment(// user-defined headers)
    keyword(if) operator(()keyword(typeof) local_variable(this)operator(.)ident(options)operator(.)ident(requestHeaders) operator(==) string<delimiter(')content(object)delimiter(')>operator(\)) operator({)
      keyword(var) ident(extras) operator(=) local_variable(this)operator(.)ident(options)operator(.)ident(requestHeaders)operator(;)

      keyword(if) operator(()ident(Object)operator(.)ident(isFunction)operator(()ident(extras)operator(.)ident(push)operator(\)\))
        keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(,) ident(length) operator(=) ident(extras)operator(.)ident(length)operator(;) ident(i) operator(<) ident(length)operator(;) ident(i) operator(+=) integer(2)operator(\))
          ident(headers)operator([)ident(extras)operator([)ident(i)operator(]]) operator(=) ident(extras)operator([)ident(i)operator(+)integer(1)operator(])operator(;)
      keyword(else)
        predefined($H)operator(()ident(extras)operator(\))operator(.)ident(each)operator(()keyword(function)operator(()ident(pair)operator(\)) operator({) ident(headers)operator([)ident(pair)operator(.)ident(key)operator(]) operator(=) ident(pair)operator(.)ident(value) operator(}\))operator(;)
    operator(})

    keyword(for) operator(()keyword(var) ident(name) keyword(in) ident(headers)operator(\))
      local_variable(this)operator(.)ident(transport)operator(.)ident(setRequestHeader)operator(()ident(name)operator(,) ident(headers)operator([)ident(name)operator(]\))operator(;)
  operator(})operator(,)

  function(success)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(var) ident(status) operator(=) local_variable(this)operator(.)ident(getStatus)operator(()operator(\))operator(;)
    keyword(return) operator(!)ident(status) operator(||) operator(()ident(status) operator(>=) integer(200) operator(&&) ident(status) operator(<) integer(300)operator(\))operator(;)
  operator(})operator(,)

  function(getStatus)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(try) operator({)
      keyword(return) local_variable(this)operator(.)ident(transport)operator(.)ident(status) operator(||) integer(0)operator(;)
    operator(}) keyword(catch) operator(()ident(e)operator(\)) operator({) keyword(return) integer(0) operator(})
  operator(})operator(,)

  function(respondToReadyState)operator(:) keyword(function)operator(()ident(readyState)operator(\)) operator({)
    keyword(var) ident(state) operator(=) ident(Ajax)operator(.)ident(Request)operator(.)ident(Events)operator([)ident(readyState)operator(])operator(,) ident(response) operator(=) keyword(new) ident(Ajax)operator(.)ident(Response)operator(()local_variable(this)operator(\))operator(;)

    keyword(if) operator(()ident(state) operator(==) string<delimiter(')content(Complete)delimiter(')>operator(\)) operator({)
      keyword(try) operator({)
        local_variable(this)operator(.)ident(_complete) operator(=) predefined_constant(true)operator(;)
        operator(()local_variable(this)operator(.)ident(options)operator([)string<delimiter(')content(on)delimiter(')> operator(+) ident(response)operator(.)ident(status)operator(])
         operator(||) local_variable(this)operator(.)ident(options)operator([)string<delimiter(')content(on)delimiter(')> operator(+) operator(()local_variable(this)operator(.)ident(success)operator(()operator(\)) operator(?) string<delimiter(')content(Success)delimiter(')> operator(:) string<delimiter(')content(Failure)delimiter(')>operator(\)])
         operator(||) ident(Prototype)operator(.)ident(emptyFunction)operator(\))operator(()ident(response)operator(,) ident(response)operator(.)ident(headerJSON)operator(\))operator(;)
      operator(}) keyword(catch) operator(()ident(e)operator(\)) operator({)
        local_variable(this)operator(.)ident(dispatchException)operator(()ident(e)operator(\))operator(;)
      operator(})

      keyword(var) ident(contentType) operator(=) ident(response)operator(.)ident(getHeader)operator(()string<delimiter(')content(Content-type)delimiter(')>operator(\))operator(;)
      keyword(if) operator(()local_variable(this)operator(.)ident(options)operator(.)ident(evalJS) operator(==) string<delimiter(')content(force)delimiter(')>
          operator(||) operator(()local_variable(this)operator(.)ident(options)operator(.)ident(evalJS) operator(&&) local_variable(this)operator(.)ident(isSameOrigin)operator(()operator(\)) operator(&&) ident(contentType)
          operator(&&) ident(contentType)operator(.)ident(match)operator(()regexp<delimiter(/)content(^)char(\\s)content(*(text|application\))content(\\/)content((x-\)?(java|ecma\)script(;.*\)?)char(\\s)content(*$)delimiter(/)modifier(i)>operator(\)\)\))
        local_variable(this)operator(.)ident(evalResponse)operator(()operator(\))operator(;)
    operator(})

    keyword(try) operator({)
      operator(()local_variable(this)operator(.)ident(options)operator([)string<delimiter(')content(on)delimiter(')> operator(+) ident(state)operator(]) operator(||) ident(Prototype)operator(.)ident(emptyFunction)operator(\))operator(()ident(response)operator(,) ident(response)operator(.)ident(headerJSON)operator(\))operator(;)
      ident(Ajax)operator(.)ident(Responders)operator(.)ident(dispatch)operator(()string<delimiter(')content(on)delimiter(')> operator(+) ident(state)operator(,) local_variable(this)operator(,) ident(response)operator(,) ident(response)operator(.)ident(headerJSON)operator(\))operator(;)
    operator(}) keyword(catch) operator(()ident(e)operator(\)) operator({)
      local_variable(this)operator(.)ident(dispatchException)operator(()ident(e)operator(\))operator(;)
    operator(})

    keyword(if) operator(()ident(state) operator(==) string<delimiter(')content(Complete)delimiter(')>operator(\)) operator({)
      comment(// avoid memory leak in MSIE: clean up)
      local_variable(this)operator(.)ident(transport)operator(.)ident(onreadystatechange) operator(=) ident(Prototype)operator(.)ident(emptyFunction)operator(;)
    operator(})
  operator(})operator(,)

  function(isSameOrigin)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(var) ident(m) operator(=) local_variable(this)operator(.)ident(url)operator(.)ident(match)operator(()regexp<delimiter(/)content(^)char(\\s)content(*https?:)content(\\/)content(\\/)content([^)content(\\/)content(]*)delimiter(/)>operator(\))operator(;)
    keyword(return) operator(!)ident(m) operator(||) operator(()ident(m)operator([)integer(0)operator(]) operator(==) string<delimiter(')content(#{protocol}//#{domain}#{port})delimiter(')>operator(.)ident(interpolate)operator(({)
      key(protocol)operator(:) ident(location)operator(.)ident(protocol)operator(,)
      key(domain)operator(:) ident(document)operator(.)ident(domain)operator(,)
      key(port)operator(:) ident(location)operator(.)ident(port) operator(?) string<delimiter(')content(:)delimiter(')> operator(+) ident(location)operator(.)ident(port) operator(:) string<delimiter(')delimiter(')>
    operator(}\)\))operator(;)
  operator(})operator(,)

  function(getHeader)operator(:) keyword(function)operator(()ident(name)operator(\)) operator({)
    keyword(try) operator({)
      keyword(return) local_variable(this)operator(.)ident(transport)operator(.)ident(getResponseHeader)operator(()ident(name)operator(\)) operator(||) predefined_constant(null)operator(;)
    operator(}) keyword(catch) operator(()ident(e)operator(\)) operator({) keyword(return) predefined_constant(null) operator(})
  operator(})operator(,)

  function(evalResponse)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(try) operator({)
      keyword(return) ident(eval)operator((()local_variable(this)operator(.)ident(transport)operator(.)ident(responseText) operator(||) string<delimiter(')delimiter(')>operator(\))operator(.)ident(unfilterJSON)operator(()operator(\)\))operator(;)
    operator(}) keyword(catch) operator(()ident(e)operator(\)) operator({)
      local_variable(this)operator(.)ident(dispatchException)operator(()ident(e)operator(\))operator(;)
    operator(})
  operator(})operator(,)

  function(dispatchException)operator(:) keyword(function)operator(()ident(exception)operator(\)) operator({)
    operator(()local_variable(this)operator(.)ident(options)operator(.)ident(onException) operator(||) ident(Prototype)operator(.)ident(emptyFunction)operator(\))operator(()local_variable(this)operator(,) ident(exception)operator(\))operator(;)
    ident(Ajax)operator(.)ident(Responders)operator(.)ident(dispatch)operator(()string<delimiter(')content(onException)delimiter(')>operator(,) local_variable(this)operator(,) ident(exception)operator(\))operator(;)
  operator(})
operator(}\))operator(;)

ident(Ajax)operator(.)ident(Request)operator(.)ident(Events) operator(=)
  operator([)string<delimiter(')content(Uninitialized)delimiter(')>operator(,) string<delimiter(')content(Loading)delimiter(')>operator(,) string<delimiter(')content(Loaded)delimiter(')>operator(,) string<delimiter(')content(Interactive)delimiter(')>operator(,) string<delimiter(')content(Complete)delimiter(')>operator(])operator(;)

ident(Ajax)operator(.)ident(Response) operator(=) ident(Class)operator(.)ident(create)operator(({)
  function(initialize)operator(:) keyword(function)operator(()ident(request)operator(\))operator({)
    local_variable(this)operator(.)ident(request) operator(=) ident(request)operator(;)
    keyword(var) ident(transport)  operator(=) local_variable(this)operator(.)ident(transport)  operator(=) ident(request)operator(.)ident(transport)operator(,)
        ident(readyState) operator(=) local_variable(this)operator(.)ident(readyState) operator(=) ident(transport)operator(.)ident(readyState)operator(;)

    keyword(if)operator((()ident(readyState) operator(>) integer(2) operator(&&) operator(!)ident(Prototype)operator(.)ident(Browser)operator(.)ident(IE)operator(\)) operator(||) ident(readyState) operator(==) integer(4)operator(\)) operator({)
      local_variable(this)operator(.)ident(status)       operator(=) local_variable(this)operator(.)ident(getStatus)operator(()operator(\))operator(;)
      local_variable(this)operator(.)ident(statusText)   operator(=) local_variable(this)operator(.)ident(getStatusText)operator(()operator(\))operator(;)
      local_variable(this)operator(.)ident(responseText) operator(=) ident(String)operator(.)ident(interpret)operator(()ident(transport)operator(.)ident(responseText)operator(\))operator(;)
      local_variable(this)operator(.)ident(headerJSON)   operator(=) local_variable(this)operator(.)ident(_getHeaderJSON)operator(()operator(\))operator(;)
    operator(})

    keyword(if)operator(()ident(readyState) operator(==) integer(4)operator(\)) operator({)
      keyword(var) ident(xml) operator(=) ident(transport)operator(.)ident(responseXML)operator(;)
      local_variable(this)operator(.)ident(responseXML)  operator(=) ident(Object)operator(.)ident(isUndefined)operator(()ident(xml)operator(\)) operator(?) predefined_constant(null) operator(:) ident(xml)operator(;)
      local_variable(this)operator(.)ident(responseJSON) operator(=) local_variable(this)operator(.)ident(_getResponseJSON)operator(()operator(\))operator(;)
    operator(})
  operator(})operator(,)

  key(status)operator(:)      integer(0)operator(,)
  key(statusText)operator(:) string<delimiter(')delimiter(')>operator(,)

  key(getStatus)operator(:) ident(Ajax)operator(.)ident(Request)operator(.)ident(prototype)operator(.)ident(getStatus)operator(,)

  function(getStatusText)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(try) operator({)
      keyword(return) local_variable(this)operator(.)ident(transport)operator(.)ident(statusText) operator(||) string<delimiter(')delimiter(')>operator(;)
    operator(}) keyword(catch) operator(()ident(e)operator(\)) operator({) keyword(return) string<delimiter(')delimiter(')> operator(})
  operator(})operator(,)

  key(getHeader)operator(:) ident(Ajax)operator(.)ident(Request)operator(.)ident(prototype)operator(.)ident(getHeader)operator(,)

  function(getAllHeaders)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(try) operator({)
      keyword(return) local_variable(this)operator(.)ident(getAllResponseHeaders)operator(()operator(\))operator(;)
    operator(}) keyword(catch) operator(()ident(e)operator(\)) operator({) keyword(return) predefined_constant(null) operator(})
  operator(})operator(,)

  function(getResponseHeader)operator(:) keyword(function)operator(()ident(name)operator(\)) operator({)
    keyword(return) local_variable(this)operator(.)ident(transport)operator(.)ident(getResponseHeader)operator(()ident(name)operator(\))operator(;)
  operator(})operator(,)

  function(getAllResponseHeaders)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(return) local_variable(this)operator(.)ident(transport)operator(.)ident(getAllResponseHeaders)operator(()operator(\))operator(;)
  operator(})operator(,)

  function(_getHeaderJSON)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(var) ident(json) operator(=) local_variable(this)operator(.)ident(getHeader)operator(()string<delimiter(')content(X-JSON)delimiter(')>operator(\))operator(;)
    keyword(if) operator((!)ident(json)operator(\)) keyword(return) predefined_constant(null)operator(;)
    ident(json) operator(=) ident(decodeURIComponent)operator(()ident(escape)operator(()ident(json)operator(\)\))operator(;)
    keyword(try) operator({)
      keyword(return) ident(json)operator(.)ident(evalJSON)operator(()local_variable(this)operator(.)ident(request)operator(.)ident(options)operator(.)ident(sanitizeJSON) operator(||)
        operator(!)local_variable(this)operator(.)ident(request)operator(.)ident(isSameOrigin)operator(()operator(\)\))operator(;)
    operator(}) keyword(catch) operator(()ident(e)operator(\)) operator({)
      local_variable(this)operator(.)ident(request)operator(.)ident(dispatchException)operator(()ident(e)operator(\))operator(;)
    operator(})
  operator(})operator(,)

  function(_getResponseJSON)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(var) ident(options) operator(=) local_variable(this)operator(.)ident(request)operator(.)ident(options)operator(;)
    keyword(if) operator((!)ident(options)operator(.)ident(evalJSON) operator(||) operator(()ident(options)operator(.)ident(evalJSON) operator(!=) string<delimiter(')content(force)delimiter(')> operator(&&)
      operator(!()local_variable(this)operator(.)ident(getHeader)operator(()string<delimiter(')content(Content-type)delimiter(')>operator(\)) operator(||) string<delimiter(')delimiter(')>operator(\))operator(.)ident(include)operator(()string<delimiter(')content(application/json)delimiter(')>operator(\)\)) operator(||)
        local_variable(this)operator(.)ident(responseText)operator(.)ident(blank)operator(()operator(\)\))
          keyword(return) predefined_constant(null)operator(;)
    keyword(try) operator({)
      keyword(return) local_variable(this)operator(.)ident(responseText)operator(.)ident(evalJSON)operator(()ident(options)operator(.)ident(sanitizeJSON) operator(||)
        operator(!)local_variable(this)operator(.)ident(request)operator(.)ident(isSameOrigin)operator(()operator(\)\))operator(;)
    operator(}) keyword(catch) operator(()ident(e)operator(\)) operator({)
      local_variable(this)operator(.)ident(request)operator(.)ident(dispatchException)operator(()ident(e)operator(\))operator(;)
    operator(})
  operator(})
operator(}\))operator(;)

ident(Ajax)operator(.)ident(Updater) operator(=) ident(Class)operator(.)ident(create)operator(()ident(Ajax)operator(.)ident(Request)operator(,) operator({)
  function(initialize)operator(:) keyword(function)operator(()predefined($super)operator(,) ident(container)operator(,) ident(url)operator(,) ident(options)operator(\)) operator({)
    local_variable(this)operator(.)ident(container) operator(=) operator({)
      key(success)operator(:) operator(()ident(container)operator(.)ident(success) operator(||) ident(container)operator(\))operator(,)
      key(failure)operator(:) operator(()ident(container)operator(.)ident(failure) operator(||) operator(()ident(container)operator(.)ident(success) operator(?) predefined_constant(null) operator(:) ident(container)operator(\)\))
    operator(})operator(;)

    ident(options) operator(=) ident(Object)operator(.)ident(clone)operator(()ident(options)operator(\))operator(;)
    keyword(var) ident(onComplete) operator(=) ident(options)operator(.)ident(onComplete)operator(;)
    ident(options)operator(.)ident(onComplete) operator(=) operator(()keyword(function)operator(()ident(response)operator(,) ident(json)operator(\)) operator({)
      local_variable(this)operator(.)ident(updateContent)operator(()ident(response)operator(.)ident(responseText)operator(\))operator(;)
      keyword(if) operator(()ident(Object)operator(.)ident(isFunction)operator(()ident(onComplete)operator(\)\)) ident(onComplete)operator(()ident(response)operator(,) ident(json)operator(\))operator(;)
    operator(}\))operator(.)ident(bind)operator(()local_variable(this)operator(\))operator(;)

    predefined($super)operator(()ident(url)operator(,) ident(options)operator(\))operator(;)
  operator(})operator(,)

  function(updateContent)operator(:) keyword(function)operator(()ident(responseText)operator(\)) operator({)
    keyword(var) ident(receiver) operator(=) local_variable(this)operator(.)ident(container)operator([)local_variable(this)operator(.)ident(success)operator(()operator(\)) operator(?) string<delimiter(')content(success)delimiter(')> operator(:) string<delimiter(')content(failure)delimiter(')>operator(])operator(,)
        ident(options) operator(=) local_variable(this)operator(.)ident(options)operator(;)

    keyword(if) operator((!)ident(options)operator(.)ident(evalScripts)operator(\)) ident(responseText) operator(=) ident(responseText)operator(.)ident(stripScripts)operator(()operator(\))operator(;)

    keyword(if) operator(()ident(receiver) operator(=) predefined($)operator(()ident(receiver)operator(\)\)) operator({)
      keyword(if) operator(()ident(options)operator(.)ident(insertion)operator(\)) operator({)
        keyword(if) operator(()ident(Object)operator(.)ident(isString)operator(()ident(options)operator(.)ident(insertion)operator(\)\)) operator({)
          keyword(var) ident(insertion) operator(=) operator({) operator(})operator(;) ident(insertion)operator([)ident(options)operator(.)ident(insertion)operator(]) operator(=) ident(responseText)operator(;)
          ident(receiver)operator(.)ident(insert)operator(()ident(insertion)operator(\))operator(;)
        operator(})
        keyword(else) ident(options)operator(.)ident(insertion)operator(()ident(receiver)operator(,) ident(responseText)operator(\))operator(;)
      operator(})
      keyword(else) ident(receiver)operator(.)ident(update)operator(()ident(responseText)operator(\))operator(;)
    operator(})
  operator(})
operator(}\))operator(;)

ident(Ajax)operator(.)ident(PeriodicalUpdater) operator(=) ident(Class)operator(.)ident(create)operator(()ident(Ajax)operator(.)ident(Base)operator(,) operator({)
  function(initialize)operator(:) keyword(function)operator(()predefined($super)operator(,) ident(container)operator(,) ident(url)operator(,) ident(options)operator(\)) operator({)
    predefined($super)operator(()ident(options)operator(\))operator(;)
    local_variable(this)operator(.)ident(onComplete) operator(=) local_variable(this)operator(.)ident(options)operator(.)ident(onComplete)operator(;)

    local_variable(this)operator(.)ident(frequency) operator(=) operator(()local_variable(this)operator(.)ident(options)operator(.)ident(frequency) operator(||) integer(2)operator(\))operator(;)
    local_variable(this)operator(.)ident(decay) operator(=) operator(()local_variable(this)operator(.)ident(options)operator(.)ident(decay) operator(||) integer(1)operator(\))operator(;)

    local_variable(this)operator(.)ident(updater) operator(=) operator({) operator(})operator(;)
    local_variable(this)operator(.)ident(container) operator(=) ident(container)operator(;)
    local_variable(this)operator(.)ident(url) operator(=) ident(url)operator(;)

    local_variable(this)operator(.)ident(start)operator(()operator(\))operator(;)
  operator(})operator(,)

  function(start)operator(:) keyword(function)operator(()operator(\)) operator({)
    local_variable(this)operator(.)ident(options)operator(.)ident(onComplete) operator(=) local_variable(this)operator(.)ident(updateComplete)operator(.)ident(bind)operator(()local_variable(this)operator(\))operator(;)
    local_variable(this)operator(.)ident(onTimerEvent)operator(()operator(\))operator(;)
  operator(})operator(,)

  function(stop)operator(:) keyword(function)operator(()operator(\)) operator({)
    local_variable(this)operator(.)ident(updater)operator(.)ident(options)operator(.)ident(onComplete) operator(=) predefined_constant(undefined)operator(;)
    ident(clearTimeout)operator(()local_variable(this)operator(.)ident(timer)operator(\))operator(;)
    operator(()local_variable(this)operator(.)ident(onComplete) operator(||) ident(Prototype)operator(.)ident(emptyFunction)operator(\))operator(.)ident(apply)operator(()local_variable(this)operator(,) local_variable(arguments)operator(\))operator(;)
  operator(})operator(,)

  function(updateComplete)operator(:) keyword(function)operator(()ident(response)operator(\)) operator({)
    keyword(if) operator(()local_variable(this)operator(.)ident(options)operator(.)ident(decay)operator(\)) operator({)
      local_variable(this)operator(.)ident(decay) operator(=) operator(()ident(response)operator(.)ident(responseText) operator(==) local_variable(this)operator(.)ident(lastText) operator(?)
        local_variable(this)operator(.)ident(decay) operator(*) local_variable(this)operator(.)ident(options)operator(.)ident(decay) operator(:) integer(1)operator(\))operator(;)

      local_variable(this)operator(.)ident(lastText) operator(=) ident(response)operator(.)ident(responseText)operator(;)
    operator(})
    local_variable(this)operator(.)ident(timer) operator(=) local_variable(this)operator(.)ident(onTimerEvent)operator(.)ident(bind)operator(()local_variable(this)operator(\))operator(.)ident(delay)operator(()local_variable(this)operator(.)ident(decay) operator(*) local_variable(this)operator(.)ident(frequency)operator(\))operator(;)
  operator(})operator(,)

  function(onTimerEvent)operator(:) keyword(function)operator(()operator(\)) operator({)
    local_variable(this)operator(.)ident(updater) operator(=) keyword(new) ident(Ajax)operator(.)ident(Updater)operator(()local_variable(this)operator(.)ident(container)operator(,) local_variable(this)operator(.)ident(url)operator(,) local_variable(this)operator(.)ident(options)operator(\))operator(;)
  operator(})
operator(}\))operator(;)
keyword(function) predefined($)operator(()ident(element)operator(\)) operator({)
  keyword(if) operator(()local_variable(arguments)operator(.)ident(length) operator(>) integer(1)operator(\)) operator({)
    keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(,) ident(elements) operator(=) operator([)operator(])operator(,) ident(length) operator(=) local_variable(arguments)operator(.)ident(length)operator(;) ident(i) operator(<) ident(length)operator(;) ident(i)operator(++)operator(\))
      ident(elements)operator(.)ident(push)operator(()predefined($)operator(()local_variable(arguments)operator([)ident(i)operator(]\)\))operator(;)
    keyword(return) ident(elements)operator(;)
  operator(})
  keyword(if) operator(()ident(Object)operator(.)ident(isString)operator(()ident(element)operator(\)\))
    ident(element) operator(=) ident(document)operator(.)ident(getElementById)operator(()ident(element)operator(\))operator(;)
  keyword(return) ident(Element)operator(.)ident(extend)operator(()ident(element)operator(\))operator(;)
operator(})

keyword(if) operator(()ident(Prototype)operator(.)ident(BrowserFeatures)operator(.)ident(XPath)operator(\)) operator({)
  ident(document)operator(.)function(_getElementsByXPath) operator(=) keyword(function)operator(()ident(expression)operator(,) ident(parentElement)operator(\)) operator({)
    keyword(var) ident(results) operator(=) operator([)operator(])operator(;)
    keyword(var) ident(query) operator(=) ident(document)operator(.)ident(evaluate)operator(()ident(expression)operator(,) predefined($)operator(()ident(parentElement)operator(\)) operator(||) ident(document)operator(,)
      predefined_constant(null)operator(,) ident(XPathResult)operator(.)ident(ORDERED_NODE_SNAPSHOT_TYPE)operator(,) predefined_constant(null)operator(\))operator(;)
    keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(,) ident(length) operator(=) ident(query)operator(.)ident(snapshotLength)operator(;) ident(i) operator(<) ident(length)operator(;) ident(i)operator(++)operator(\))
      ident(results)operator(.)ident(push)operator(()ident(Element)operator(.)ident(extend)operator(()ident(query)operator(.)ident(snapshotItem)operator(()ident(i)operator(\)\)\))operator(;)
    keyword(return) ident(results)operator(;)
  operator(})operator(;)
operator(})

comment(/*--------------------------------------------------------------------------*/)

keyword(if) operator((!)ident(window)operator(.)ident(Node)operator(\)) keyword(var) ident(Node) operator(=) operator({) operator(})operator(;)

keyword(if) operator((!)ident(Node)operator(.)ident(ELEMENT_NODE)operator(\)) operator({)
  comment(// DOM level 2 ECMAScript Language Binding)
  ident(Object)operator(.)ident(extend)operator(()ident(Node)operator(,) operator({)
    key(ELEMENT_NODE)operator(:) integer(1)operator(,)
    key(ATTRIBUTE_NODE)operator(:) integer(2)operator(,)
    key(TEXT_NODE)operator(:) integer(3)operator(,)
    key(CDATA_SECTION_NODE)operator(:) integer(4)operator(,)
    key(ENTITY_REFERENCE_NODE)operator(:) integer(5)operator(,)
    key(ENTITY_NODE)operator(:) integer(6)operator(,)
    key(PROCESSING_INSTRUCTION_NODE)operator(:) integer(7)operator(,)
    key(COMMENT_NODE)operator(:) integer(8)operator(,)
    key(DOCUMENT_NODE)operator(:) integer(9)operator(,)
    key(DOCUMENT_TYPE_NODE)operator(:) integer(10)operator(,)
    key(DOCUMENT_FRAGMENT_NODE)operator(:) integer(11)operator(,)
    key(NOTATION_NODE)operator(:) integer(12)
  operator(}\))operator(;)
operator(})

operator(()keyword(function)operator(()operator(\)) operator({)
  keyword(var) ident(element) operator(=) local_variable(this)operator(.)ident(Element)operator(;)
  local_variable(this)operator(.)function(Element) operator(=) keyword(function)operator(()ident(tagName)operator(,) ident(attributes)operator(\)) operator({)
    ident(attributes) operator(=) ident(attributes) operator(||) operator({) operator(})operator(;)
    ident(tagName) operator(=) ident(tagName)operator(.)ident(toLowerCase)operator(()operator(\))operator(;)
    keyword(var) ident(cache) operator(=) ident(Element)operator(.)ident(cache)operator(;)
    keyword(if) operator(()ident(Prototype)operator(.)ident(Browser)operator(.)ident(IE) operator(&&) ident(attributes)operator(.)ident(name)operator(\)) operator({)
      ident(tagName) operator(=) string<delimiter(')content(<)delimiter(')> operator(+) ident(tagName) operator(+) string<delimiter(')content( name=")delimiter(')> operator(+) ident(attributes)operator(.)ident(name) operator(+) string<delimiter(')content(">)delimiter(')>operator(;)
      keyword(delete) ident(attributes)operator(.)ident(name)operator(;)
      keyword(return) ident(Element)operator(.)ident(writeAttribute)operator(()ident(document)operator(.)ident(createElement)operator(()ident(tagName)operator(\))operator(,) ident(attributes)operator(\))operator(;)
    operator(})
    keyword(if) operator((!)ident(cache)operator([)ident(tagName)operator(]\)) ident(cache)operator([)ident(tagName)operator(]) operator(=) ident(Element)operator(.)ident(extend)operator(()ident(document)operator(.)ident(createElement)operator(()ident(tagName)operator(\)\))operator(;)
    keyword(return) ident(Element)operator(.)ident(writeAttribute)operator(()ident(cache)operator([)ident(tagName)operator(])operator(.)ident(cloneNode)operator(()predefined_constant(false)operator(\))operator(,) ident(attributes)operator(\))operator(;)
  operator(})operator(;)
  ident(Object)operator(.)ident(extend)operator(()local_variable(this)operator(.)ident(Element)operator(,) ident(element) operator(||) operator({) operator(}\))operator(;)
  keyword(if) operator(()ident(element)operator(\)) local_variable(this)operator(.)ident(Element)operator(.)ident(prototype) operator(=) ident(element)operator(.)ident(prototype)operator(;)
operator(}\))operator(.)ident(call)operator(()ident(window)operator(\))operator(;)

ident(Element)operator(.)ident(cache) operator(=) operator({) operator(})operator(;)

ident(Element)operator(.)ident(Methods) operator(=) operator({)
  function(visible)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    keyword(return) predefined($)operator(()ident(element)operator(\))operator(.)ident(style)operator(.)ident(display) operator(!=) string<delimiter(')content(none)delimiter(')>operator(;)
  operator(})operator(,)

  function(toggle)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    ident(Element)operator([)ident(Element)operator(.)ident(visible)operator(()ident(element)operator(\)) operator(?) string<delimiter(')content(hide)delimiter(')> operator(:) string<delimiter(')content(show)delimiter(')>operator(])operator(()ident(element)operator(\))operator(;)
    keyword(return) ident(element)operator(;)
  operator(})operator(,)

  function(hide)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    ident(element)operator(.)ident(style)operator(.)ident(display) operator(=) string<delimiter(')content(none)delimiter(')>operator(;)
    keyword(return) ident(element)operator(;)
  operator(})operator(,)

  function(show)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    ident(element)operator(.)ident(style)operator(.)ident(display) operator(=) string<delimiter(')delimiter(')>operator(;)
    keyword(return) ident(element)operator(;)
  operator(})operator(,)

  function(remove)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    ident(element)operator(.)ident(parentNode)operator(.)ident(removeChild)operator(()ident(element)operator(\))operator(;)
    keyword(return) ident(element)operator(;)
  operator(})operator(,)

  function(update)operator(:) keyword(function)operator(()ident(element)operator(,) ident(content)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    keyword(if) operator(()ident(content) operator(&&) ident(content)operator(.)ident(toElement)operator(\)) ident(content) operator(=) ident(content)operator(.)ident(toElement)operator(()operator(\))operator(;)
    keyword(if) operator(()ident(Object)operator(.)ident(isElement)operator(()ident(content)operator(\)\)) keyword(return) ident(element)operator(.)ident(update)operator(()operator(\))operator(.)ident(insert)operator(()ident(content)operator(\))operator(;)
    ident(content) operator(=) ident(Object)operator(.)ident(toHTML)operator(()ident(content)operator(\))operator(;)
    ident(element)operator(.)ident(innerHTML) operator(=) ident(content)operator(.)ident(stripScripts)operator(()operator(\))operator(;)
    ident(content)operator(.)ident(evalScripts)operator(.)ident(bind)operator(()ident(content)operator(\))operator(.)ident(defer)operator(()operator(\))operator(;)
    keyword(return) ident(element)operator(;)
  operator(})operator(,)

  function(replace)operator(:) keyword(function)operator(()ident(element)operator(,) ident(content)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    keyword(if) operator(()ident(content) operator(&&) ident(content)operator(.)ident(toElement)operator(\)) ident(content) operator(=) ident(content)operator(.)ident(toElement)operator(()operator(\))operator(;)
    keyword(else) keyword(if) operator((!)ident(Object)operator(.)ident(isElement)operator(()ident(content)operator(\)\)) operator({)
      ident(content) operator(=) ident(Object)operator(.)ident(toHTML)operator(()ident(content)operator(\))operator(;)
      keyword(var) ident(range) operator(=) ident(element)operator(.)ident(ownerDocument)operator(.)ident(createRange)operator(()operator(\))operator(;)
      ident(range)operator(.)ident(selectNode)operator(()ident(element)operator(\))operator(;)
      ident(content)operator(.)ident(evalScripts)operator(.)ident(bind)operator(()ident(content)operator(\))operator(.)ident(defer)operator(()operator(\))operator(;)
      ident(content) operator(=) ident(range)operator(.)ident(createContextualFragment)operator(()ident(content)operator(.)ident(stripScripts)operator(()operator(\)\))operator(;)
    operator(})
    ident(element)operator(.)ident(parentNode)operator(.)ident(replaceChild)operator(()ident(content)operator(,) ident(element)operator(\))operator(;)
    keyword(return) ident(element)operator(;)
  operator(})operator(,)

  function(insert)operator(:) keyword(function)operator(()ident(element)operator(,) ident(insertions)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)

    keyword(if) operator(()ident(Object)operator(.)ident(isString)operator(()ident(insertions)operator(\)) operator(||) ident(Object)operator(.)ident(isNumber)operator(()ident(insertions)operator(\)) operator(||)
        ident(Object)operator(.)ident(isElement)operator(()ident(insertions)operator(\)) operator(||) operator(()ident(insertions) operator(&&) operator(()ident(insertions)operator(.)ident(toElement) operator(||) ident(insertions)operator(.)ident(toHTML)operator(\)\)\))
          ident(insertions) operator(=) operator({)key(bottom)operator(:)ident(insertions)operator(})operator(;)

    keyword(var) ident(content)operator(,) ident(insert)operator(,) ident(tagName)operator(,) ident(childNodes)operator(;)

    keyword(for) operator(()keyword(var) ident(position) keyword(in) ident(insertions)operator(\)) operator({)
      ident(content)  operator(=) ident(insertions)operator([)ident(position)operator(])operator(;)
      ident(position) operator(=) ident(position)operator(.)ident(toLowerCase)operator(()operator(\))operator(;)
      ident(insert) operator(=) ident(Element)operator(.)ident(_insertionTranslations)operator([)ident(position)operator(])operator(;)

      keyword(if) operator(()ident(content) operator(&&) ident(content)operator(.)ident(toElement)operator(\)) ident(content) operator(=) ident(content)operator(.)ident(toElement)operator(()operator(\))operator(;)
      keyword(if) operator(()ident(Object)operator(.)ident(isElement)operator(()ident(content)operator(\)\)) operator({)
        ident(insert)operator(()ident(element)operator(,) ident(content)operator(\))operator(;)
        keyword(continue)operator(;)
      operator(})

      ident(content) operator(=) ident(Object)operator(.)ident(toHTML)operator(()ident(content)operator(\))operator(;)

      ident(tagName) operator(=) operator((()ident(position) operator(==) string<delimiter(')content(before)delimiter(')> operator(||) ident(position) operator(==) string<delimiter(')content(after)delimiter(')>operator(\))
        operator(?) ident(element)operator(.)ident(parentNode) operator(:) ident(element)operator(\))operator(.)ident(tagName)operator(.)ident(toUpperCase)operator(()operator(\))operator(;)

      ident(childNodes) operator(=) ident(Element)operator(.)ident(_getContentFromAnonymousElement)operator(()ident(tagName)operator(,) ident(content)operator(.)ident(stripScripts)operator(()operator(\)\))operator(;)

      keyword(if) operator(()ident(position) operator(==) string<delimiter(')content(top)delimiter(')> operator(||) ident(position) operator(==) string<delimiter(')content(after)delimiter(')>operator(\)) ident(childNodes)operator(.)ident(reverse)operator(()operator(\))operator(;)
      ident(childNodes)operator(.)ident(each)operator(()ident(insert)operator(.)ident(curry)operator(()ident(element)operator(\)\))operator(;)

      ident(content)operator(.)ident(evalScripts)operator(.)ident(bind)operator(()ident(content)operator(\))operator(.)ident(defer)operator(()operator(\))operator(;)
    operator(})

    keyword(return) ident(element)operator(;)
  operator(})operator(,)

  function(wrap)operator(:) keyword(function)operator(()ident(element)operator(,) ident(wrapper)operator(,) ident(attributes)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    keyword(if) operator(()ident(Object)operator(.)ident(isElement)operator(()ident(wrapper)operator(\)\))
      predefined($)operator(()ident(wrapper)operator(\))operator(.)ident(writeAttribute)operator(()ident(attributes) operator(||) operator({) operator(}\))operator(;)
    keyword(else) keyword(if) operator(()ident(Object)operator(.)ident(isString)operator(()ident(wrapper)operator(\)\)) ident(wrapper) operator(=) keyword(new) ident(Element)operator(()ident(wrapper)operator(,) ident(attributes)operator(\))operator(;)
    keyword(else) ident(wrapper) operator(=) keyword(new) ident(Element)operator(()string<delimiter(')content(div)delimiter(')>operator(,) ident(wrapper)operator(\))operator(;)
    keyword(if) operator(()ident(element)operator(.)ident(parentNode)operator(\))
      ident(element)operator(.)ident(parentNode)operator(.)ident(replaceChild)operator(()ident(wrapper)operator(,) ident(element)operator(\))operator(;)
    ident(wrapper)operator(.)ident(appendChild)operator(()ident(element)operator(\))operator(;)
    keyword(return) ident(wrapper)operator(;)
  operator(})operator(,)

  function(inspect)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    keyword(var) ident(result) operator(=) string<delimiter(')content(<)delimiter(')> operator(+) ident(element)operator(.)ident(tagName)operator(.)ident(toLowerCase)operator(()operator(\))operator(;)
    predefined($H)operator(({)key<delimiter(')content(id)delimiter(')>operator(:) string<delimiter(')content(id)delimiter(')>operator(,) key<delimiter(')content(className)delimiter(')>operator(:) string<delimiter(')content(class)delimiter(')>operator(}\))operator(.)ident(each)operator(()keyword(function)operator(()ident(pair)operator(\)) operator({)
      keyword(var) ident(property) operator(=) ident(pair)operator(.)ident(first)operator(()operator(\))operator(,) ident(attribute) operator(=) ident(pair)operator(.)ident(last)operator(()operator(\))operator(;)
      keyword(var) ident(value) operator(=) operator(()ident(element)operator([)ident(property)operator(]) operator(||) string<delimiter(')delimiter(')>operator(\))operator(.)ident(toString)operator(()operator(\))operator(;)
      keyword(if) operator(()ident(value)operator(\)) ident(result) operator(+=) string<delimiter(')content( )delimiter(')> operator(+) ident(attribute) operator(+) string<delimiter(')content(=)delimiter(')> operator(+) ident(value)operator(.)ident(inspect)operator(()predefined_constant(true)operator(\))operator(;)
    operator(}\))operator(;)
    keyword(return) ident(result) operator(+) string<delimiter(')content(>)delimiter(')>operator(;)
  operator(})operator(,)

  function(recursivelyCollect)operator(:) keyword(function)operator(()ident(element)operator(,) ident(property)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    keyword(var) ident(elements) operator(=) operator([)operator(])operator(;)
    keyword(while) operator(()ident(element) operator(=) ident(element)operator([)ident(property)operator(]\))
      keyword(if) operator(()ident(element)operator(.)ident(nodeType) operator(==) integer(1)operator(\))
        ident(elements)operator(.)ident(push)operator(()ident(Element)operator(.)ident(extend)operator(()ident(element)operator(\)\))operator(;)
    keyword(return) ident(elements)operator(;)
  operator(})operator(,)

  function(ancestors)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    keyword(return) predefined($)operator(()ident(element)operator(\))operator(.)ident(recursivelyCollect)operator(()string<delimiter(')content(parentNode)delimiter(')>operator(\))operator(;)
  operator(})operator(,)

  function(descendants)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    keyword(return) predefined($)operator(()ident(element)operator(\))operator(.)ident(select)operator(()string<delimiter(")content(*)delimiter(")>operator(\))operator(;)
  operator(})operator(,)

  function(firstDescendant)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(.)ident(firstChild)operator(;)
    keyword(while) operator(()ident(element) operator(&&) ident(element)operator(.)ident(nodeType) operator(!=) integer(1)operator(\)) ident(element) operator(=) ident(element)operator(.)ident(nextSibling)operator(;)
    keyword(return) predefined($)operator(()ident(element)operator(\))operator(;)
  operator(})operator(,)

  function(immediateDescendants)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    keyword(if) operator((!()ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(.)ident(firstChild)operator(\)\)) keyword(return) operator([)operator(])operator(;)
    keyword(while) operator(()ident(element) operator(&&) ident(element)operator(.)ident(nodeType) operator(!=) integer(1)operator(\)) ident(element) operator(=) ident(element)operator(.)ident(nextSibling)operator(;)
    keyword(if) operator(()ident(element)operator(\)) keyword(return) operator([)ident(element)operator(])operator(.)ident(concat)operator(()predefined($)operator(()ident(element)operator(\))operator(.)ident(nextSiblings)operator(()operator(\)\))operator(;)
    keyword(return) operator([)operator(])operator(;)
  operator(})operator(,)

  function(previousSiblings)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    keyword(return) predefined($)operator(()ident(element)operator(\))operator(.)ident(recursivelyCollect)operator(()string<delimiter(')content(previousSibling)delimiter(')>operator(\))operator(;)
  operator(})operator(,)

  function(nextSiblings)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    keyword(return) predefined($)operator(()ident(element)operator(\))operator(.)ident(recursivelyCollect)operator(()string<delimiter(')content(nextSibling)delimiter(')>operator(\))operator(;)
  operator(})operator(,)

  function(siblings)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    keyword(return) ident(element)operator(.)ident(previousSiblings)operator(()operator(\))operator(.)ident(reverse)operator(()operator(\))operator(.)ident(concat)operator(()ident(element)operator(.)ident(nextSiblings)operator(()operator(\)\))operator(;)
  operator(})operator(,)

  function(match)operator(:) keyword(function)operator(()ident(element)operator(,) ident(selector)operator(\)) operator({)
    keyword(if) operator(()ident(Object)operator(.)ident(isString)operator(()ident(selector)operator(\)\))
      ident(selector) operator(=) keyword(new) ident(Selector)operator(()ident(selector)operator(\))operator(;)
    keyword(return) ident(selector)operator(.)ident(match)operator(()predefined($)operator(()ident(element)operator(\)\))operator(;)
  operator(})operator(,)

  function(up)operator(:) keyword(function)operator(()ident(element)operator(,) ident(expression)operator(,) ident(index)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    keyword(if) operator(()local_variable(arguments)operator(.)ident(length) operator(==) integer(1)operator(\)) keyword(return) predefined($)operator(()ident(element)operator(.)ident(parentNode)operator(\))operator(;)
    keyword(var) ident(ancestors) operator(=) ident(element)operator(.)ident(ancestors)operator(()operator(\))operator(;)
    keyword(return) ident(Object)operator(.)ident(isNumber)operator(()ident(expression)operator(\)) operator(?) ident(ancestors)operator([)ident(expression)operator(]) operator(:)
      ident(Selector)operator(.)ident(findElement)operator(()ident(ancestors)operator(,) ident(expression)operator(,) ident(index)operator(\))operator(;)
  operator(})operator(,)

  function(down)operator(:) keyword(function)operator(()ident(element)operator(,) ident(expression)operator(,) ident(index)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    keyword(if) operator(()local_variable(arguments)operator(.)ident(length) operator(==) integer(1)operator(\)) keyword(return) ident(element)operator(.)ident(firstDescendant)operator(()operator(\))operator(;)
    keyword(return) ident(Object)operator(.)ident(isNumber)operator(()ident(expression)operator(\)) operator(?) ident(element)operator(.)ident(descendants)operator(()operator(\))operator([)ident(expression)operator(]) operator(:)
      ident(Element)operator(.)ident(select)operator(()ident(element)operator(,) ident(expression)operator(\))operator([)ident(index) operator(||) integer(0)operator(])operator(;)
  operator(})operator(,)

  function(previous)operator(:) keyword(function)operator(()ident(element)operator(,) ident(expression)operator(,) ident(index)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    keyword(if) operator(()local_variable(arguments)operator(.)ident(length) operator(==) integer(1)operator(\)) keyword(return) predefined($)operator(()ident(Selector)operator(.)ident(handlers)operator(.)ident(previousElementSibling)operator(()ident(element)operator(\)\))operator(;)
    keyword(var) ident(previousSiblings) operator(=) ident(element)operator(.)ident(previousSiblings)operator(()operator(\))operator(;)
    keyword(return) ident(Object)operator(.)ident(isNumber)operator(()ident(expression)operator(\)) operator(?) ident(previousSiblings)operator([)ident(expression)operator(]) operator(:)
      ident(Selector)operator(.)ident(findElement)operator(()ident(previousSiblings)operator(,) ident(expression)operator(,) ident(index)operator(\))operator(;)
  operator(})operator(,)

  function(next)operator(:) keyword(function)operator(()ident(element)operator(,) ident(expression)operator(,) ident(index)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    keyword(if) operator(()local_variable(arguments)operator(.)ident(length) operator(==) integer(1)operator(\)) keyword(return) predefined($)operator(()ident(Selector)operator(.)ident(handlers)operator(.)ident(nextElementSibling)operator(()ident(element)operator(\)\))operator(;)
    keyword(var) ident(nextSiblings) operator(=) ident(element)operator(.)ident(nextSiblings)operator(()operator(\))operator(;)
    keyword(return) ident(Object)operator(.)ident(isNumber)operator(()ident(expression)operator(\)) operator(?) ident(nextSiblings)operator([)ident(expression)operator(]) operator(:)
      ident(Selector)operator(.)ident(findElement)operator(()ident(nextSiblings)operator(,) ident(expression)operator(,) ident(index)operator(\))operator(;)
  operator(})operator(,)

  function(select)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(var) ident(args) operator(=) predefined($A)operator(()local_variable(arguments)operator(\))operator(,) ident(element) operator(=) predefined($)operator(()ident(args)operator(.)ident(shift)operator(()operator(\)\))operator(;)
    keyword(return) ident(Selector)operator(.)ident(findChildElements)operator(()ident(element)operator(,) ident(args)operator(\))operator(;)
  operator(})operator(,)

  function(adjacent)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(var) ident(args) operator(=) predefined($A)operator(()local_variable(arguments)operator(\))operator(,) ident(element) operator(=) predefined($)operator(()ident(args)operator(.)ident(shift)operator(()operator(\)\))operator(;)
    keyword(return) ident(Selector)operator(.)ident(findChildElements)operator(()ident(element)operator(.)ident(parentNode)operator(,) ident(args)operator(\))operator(.)ident(without)operator(()ident(element)operator(\))operator(;)
  operator(})operator(,)

  function(identify)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    keyword(var) ident(id) operator(=) ident(element)operator(.)ident(readAttribute)operator(()string<delimiter(')content(id)delimiter(')>operator(\))operator(,) ident(self) operator(=) local_variable(arguments)operator(.)ident(callee)operator(;)
    keyword(if) operator(()ident(id)operator(\)) keyword(return) ident(id)operator(;)
    keyword(do) operator({) ident(id) operator(=) string<delimiter(')content(anonymous_element_)delimiter(')> operator(+) ident(self)operator(.)ident(counter)operator(++) operator(}) keyword(while) operator(()predefined($)operator(()ident(id)operator(\)\))operator(;)
    ident(element)operator(.)ident(writeAttribute)operator(()string<delimiter(')content(id)delimiter(')>operator(,) ident(id)operator(\))operator(;)
    keyword(return) ident(id)operator(;)
  operator(})operator(,)

  function(readAttribute)operator(:) keyword(function)operator(()ident(element)operator(,) ident(name)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    keyword(if) operator(()ident(Prototype)operator(.)ident(Browser)operator(.)ident(IE)operator(\)) operator({)
      keyword(var) ident(t) operator(=) ident(Element)operator(.)ident(_attributeTranslations)operator(.)ident(read)operator(;)
      keyword(if) operator(()ident(t)operator(.)ident(values)operator([)ident(name)operator(]\)) keyword(return) ident(t)operator(.)ident(values)operator([)ident(name)operator(])operator(()ident(element)operator(,) ident(name)operator(\))operator(;)
      keyword(if) operator(()ident(t)operator(.)ident(names)operator([)ident(name)operator(]\)) ident(name) operator(=) ident(t)operator(.)ident(names)operator([)ident(name)operator(])operator(;)
      keyword(if) operator(()ident(name)operator(.)ident(include)operator(()string<delimiter(')content(:)delimiter(')>operator(\)\)) operator({)
        keyword(return) operator((!)ident(element)operator(.)ident(attributes) operator(||) operator(!)ident(element)operator(.)ident(attributes)operator([)ident(name)operator(]\)) operator(?) predefined_constant(null) operator(:)
         ident(element)operator(.)ident(attributes)operator([)ident(name)operator(])operator(.)ident(value)operator(;)
      operator(})
    operator(})
    keyword(return) ident(element)operator(.)ident(getAttribute)operator(()ident(name)operator(\))operator(;)
  operator(})operator(,)

  function(writeAttribute)operator(:) keyword(function)operator(()ident(element)operator(,) ident(name)operator(,) ident(value)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    keyword(var) ident(attributes) operator(=) operator({) operator(})operator(,) ident(t) operator(=) ident(Element)operator(.)ident(_attributeTranslations)operator(.)ident(write)operator(;)

    keyword(if) operator(()keyword(typeof) ident(name) operator(==) string<delimiter(')content(object)delimiter(')>operator(\)) ident(attributes) operator(=) ident(name)operator(;)
    keyword(else) ident(attributes)operator([)ident(name)operator(]) operator(=) ident(Object)operator(.)ident(isUndefined)operator(()ident(value)operator(\)) operator(?) predefined_constant(true) operator(:) ident(value)operator(;)

    keyword(for) operator(()keyword(var) ident(attr) keyword(in) ident(attributes)operator(\)) operator({)
      ident(name) operator(=) ident(t)operator(.)ident(names)operator([)ident(attr)operator(]) operator(||) ident(attr)operator(;)
      ident(value) operator(=) ident(attributes)operator([)ident(attr)operator(])operator(;)
      keyword(if) operator(()ident(t)operator(.)ident(values)operator([)ident(attr)operator(]\)) ident(name) operator(=) ident(t)operator(.)ident(values)operator([)ident(attr)operator(])operator(()ident(element)operator(,) ident(value)operator(\))operator(;)
      keyword(if) operator(()ident(value) operator(===) predefined_constant(false) operator(||) ident(value) operator(===) predefined_constant(null)operator(\))
        ident(element)operator(.)ident(removeAttribute)operator(()ident(name)operator(\))operator(;)
      keyword(else) keyword(if) operator(()ident(value) operator(===) predefined_constant(true)operator(\))
        ident(element)operator(.)ident(setAttribute)operator(()ident(name)operator(,) ident(name)operator(\))operator(;)
      keyword(else) ident(element)operator(.)ident(setAttribute)operator(()ident(name)operator(,) ident(value)operator(\))operator(;)
    operator(})
    keyword(return) ident(element)operator(;)
  operator(})operator(,)

  function(getHeight)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    keyword(return) predefined($)operator(()ident(element)operator(\))operator(.)ident(getDimensions)operator(()operator(\))operator(.)ident(height)operator(;)
  operator(})operator(,)

  function(getWidth)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    keyword(return) predefined($)operator(()ident(element)operator(\))operator(.)ident(getDimensions)operator(()operator(\))operator(.)ident(width)operator(;)
  operator(})operator(,)

  function(classNames)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    keyword(return) keyword(new) ident(Element)operator(.)ident(ClassNames)operator(()ident(element)operator(\))operator(;)
  operator(})operator(,)

  function(hasClassName)operator(:) keyword(function)operator(()ident(element)operator(,) ident(className)operator(\)) operator({)
    keyword(if) operator((!()ident(element) operator(=) predefined($)operator(()ident(element)operator(\)\)\)) keyword(return)operator(;)
    keyword(var) ident(elementClassName) operator(=) ident(element)operator(.)ident(className)operator(;)
    keyword(return) operator(()ident(elementClassName)operator(.)ident(length) operator(>) integer(0) operator(&&) operator(()ident(elementClassName) operator(==) ident(className) operator(||)
      keyword(new) ident(RegExp)operator(()string<delimiter(")content((^|)char(\\\\)content(s\))delimiter(")> operator(+) ident(className) operator(+) string<delimiter(")content(()char(\\\\)content(s|$\))delimiter(")>operator(\))operator(.)ident(test)operator(()ident(elementClassName)operator(\)\)\))operator(;)
  operator(})operator(,)

  function(addClassName)operator(:) keyword(function)operator(()ident(element)operator(,) ident(className)operator(\)) operator({)
    keyword(if) operator((!()ident(element) operator(=) predefined($)operator(()ident(element)operator(\)\)\)) keyword(return)operator(;)
    keyword(if) operator((!)ident(element)operator(.)ident(hasClassName)operator(()ident(className)operator(\)\))
      ident(element)operator(.)ident(className) operator(+=) operator(()ident(element)operator(.)ident(className) operator(?) string<delimiter(')content( )delimiter(')> operator(:) string<delimiter(')delimiter(')>operator(\)) operator(+) ident(className)operator(;)
    keyword(return) ident(element)operator(;)
  operator(})operator(,)

  function(removeClassName)operator(:) keyword(function)operator(()ident(element)operator(,) ident(className)operator(\)) operator({)
    keyword(if) operator((!()ident(element) operator(=) predefined($)operator(()ident(element)operator(\)\)\)) keyword(return)operator(;)
    ident(element)operator(.)ident(className) operator(=) ident(element)operator(.)ident(className)operator(.)ident(replace)operator(()
      keyword(new) ident(RegExp)operator(()string<delimiter(")content((^|)char(\\\\)content(s+\))delimiter(")> operator(+) ident(className) operator(+) string<delimiter(")content(()char(\\\\)content(s+|$\))delimiter(")>operator(\))operator(,) string<delimiter(')content( )delimiter(')>operator(\))operator(.)ident(strip)operator(()operator(\))operator(;)
    keyword(return) ident(element)operator(;)
  operator(})operator(,)

  function(toggleClassName)operator(:) keyword(function)operator(()ident(element)operator(,) ident(className)operator(\)) operator({)
    keyword(if) operator((!()ident(element) operator(=) predefined($)operator(()ident(element)operator(\)\)\)) keyword(return)operator(;)
    keyword(return) ident(element)operator([)ident(element)operator(.)ident(hasClassName)operator(()ident(className)operator(\)) operator(?)
      string<delimiter(')content(removeClassName)delimiter(')> operator(:) string<delimiter(')content(addClassName)delimiter(')>operator(])operator(()ident(className)operator(\))operator(;)
  operator(})operator(,)

  comment(// removes whitespace-only text node children)
  function(cleanWhitespace)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    keyword(var) ident(node) operator(=) ident(element)operator(.)ident(firstChild)operator(;)
    keyword(while) operator(()ident(node)operator(\)) operator({)
      keyword(var) ident(nextNode) operator(=) ident(node)operator(.)ident(nextSibling)operator(;)
      keyword(if) operator(()ident(node)operator(.)ident(nodeType) operator(==) integer(3) operator(&&) operator(!)regexp<delimiter(/)char(\\S)delimiter(/)>operator(.)ident(test)operator(()ident(node)operator(.)ident(nodeValue)operator(\)\))
        ident(element)operator(.)ident(removeChild)operator(()ident(node)operator(\))operator(;)
      ident(node) operator(=) ident(nextNode)operator(;)
    operator(})
    keyword(return) ident(element)operator(;)
  operator(})operator(,)

  function(empty)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    keyword(return) predefined($)operator(()ident(element)operator(\))operator(.)ident(innerHTML)operator(.)ident(blank)operator(()operator(\))operator(;)
  operator(})operator(,)

  function(descendantOf)operator(:) keyword(function)operator(()ident(element)operator(,) ident(ancestor)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(,) ident(ancestor) operator(=) predefined($)operator(()ident(ancestor)operator(\))operator(;)

    keyword(if) operator(()ident(element)operator(.)ident(compareDocumentPosition)operator(\))
      keyword(return) operator(()ident(element)operator(.)ident(compareDocumentPosition)operator(()ident(ancestor)operator(\)) operator(&) integer(8)operator(\)) operator(===) integer(8)operator(;)

    keyword(if) operator(()ident(ancestor)operator(.)ident(contains)operator(\))
      keyword(return) ident(ancestor)operator(.)ident(contains)operator(()ident(element)operator(\)) operator(&&) ident(ancestor) operator(!==) ident(element)operator(;)

    keyword(while) operator(()ident(element) operator(=) ident(element)operator(.)ident(parentNode)operator(\))
      keyword(if) operator(()ident(element) operator(==) ident(ancestor)operator(\)) keyword(return) predefined_constant(true)operator(;)

    keyword(return) predefined_constant(false)operator(;)
  operator(})operator(,)

  function(scrollTo)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    keyword(var) ident(pos) operator(=) ident(element)operator(.)ident(cumulativeOffset)operator(()operator(\))operator(;)
    ident(window)operator(.)ident(scrollTo)operator(()ident(pos)operator([)integer(0)operator(])operator(,) ident(pos)operator([)integer(1)operator(]\))operator(;)
    keyword(return) ident(element)operator(;)
  operator(})operator(,)

  function(getStyle)operator(:) keyword(function)operator(()ident(element)operator(,) ident(style)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    ident(style) operator(=) ident(style) operator(==) string<delimiter(')content(float)delimiter(')> operator(?) string<delimiter(')content(cssFloat)delimiter(')> operator(:) ident(style)operator(.)ident(camelize)operator(()operator(\))operator(;)
    keyword(var) ident(value) operator(=) ident(element)operator(.)ident(style)operator([)ident(style)operator(])operator(;)
    keyword(if) operator((!)ident(value) operator(||) ident(value) operator(==) string<delimiter(')content(auto)delimiter(')>operator(\)) operator({)
      keyword(var) ident(css) operator(=) ident(document)operator(.)ident(defaultView)operator(.)ident(getComputedStyle)operator(()ident(element)operator(,) predefined_constant(null)operator(\))operator(;)
      ident(value) operator(=) ident(css) operator(?) ident(css)operator([)ident(style)operator(]) operator(:) predefined_constant(null)operator(;)
    operator(})
    keyword(if) operator(()ident(style) operator(==) string<delimiter(')content(opacity)delimiter(')>operator(\)) keyword(return) ident(value) operator(?) ident(parseFloat)operator(()ident(value)operator(\)) operator(:) float(1.0)operator(;)
    keyword(return) ident(value) operator(==) string<delimiter(')content(auto)delimiter(')> operator(?) predefined_constant(null) operator(:) ident(value)operator(;)
  operator(})operator(,)

  function(getOpacity)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    keyword(return) predefined($)operator(()ident(element)operator(\))operator(.)ident(getStyle)operator(()string<delimiter(')content(opacity)delimiter(')>operator(\))operator(;)
  operator(})operator(,)

  function(setStyle)operator(:) keyword(function)operator(()ident(element)operator(,) ident(styles)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    keyword(var) ident(elementStyle) operator(=) ident(element)operator(.)ident(style)operator(,) ident(match)operator(;)
    keyword(if) operator(()ident(Object)operator(.)ident(isString)operator(()ident(styles)operator(\)\)) operator({)
      ident(element)operator(.)ident(style)operator(.)ident(cssText) operator(+=) string<delimiter(')content(;)delimiter(')> operator(+) ident(styles)operator(;)
      keyword(return) ident(styles)operator(.)ident(include)operator(()string<delimiter(')content(opacity)delimiter(')>operator(\)) operator(?)
        ident(element)operator(.)ident(setOpacity)operator(()ident(styles)operator(.)ident(match)operator(()regexp<delimiter(/)content(opacity:)char(\\s)content(*()char(\\d)content(?)content(\\.)content(?)char(\\d)content(*\))delimiter(/)>operator(\))operator([)integer(1)operator(]\)) operator(:) ident(element)operator(;)
    operator(})
    keyword(for) operator(()keyword(var) ident(property) keyword(in) ident(styles)operator(\))
      keyword(if) operator(()ident(property) operator(==) string<delimiter(')content(opacity)delimiter(')>operator(\)) ident(element)operator(.)ident(setOpacity)operator(()ident(styles)operator([)ident(property)operator(]\))operator(;)
      keyword(else)
        ident(elementStyle)operator([()ident(property) operator(==) string<delimiter(')content(float)delimiter(')> operator(||) ident(property) operator(==) string<delimiter(')content(cssFloat)delimiter(')>operator(\)) operator(?)
          operator(()ident(Object)operator(.)ident(isUndefined)operator(()ident(elementStyle)operator(.)ident(styleFloat)operator(\)) operator(?) string<delimiter(')content(cssFloat)delimiter(')> operator(:) string<delimiter(')content(styleFloat)delimiter(')>operator(\)) operator(:)
            ident(property)operator(]) operator(=) ident(styles)operator([)ident(property)operator(])operator(;)

    keyword(return) ident(element)operator(;)
  operator(})operator(,)

  function(setOpacity)operator(:) keyword(function)operator(()ident(element)operator(,) ident(value)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    ident(element)operator(.)ident(style)operator(.)ident(opacity) operator(=) operator(()ident(value) operator(==) integer(1) operator(||) ident(value) operator(===) string<delimiter(')delimiter(')>operator(\)) operator(?) string<delimiter(')delimiter(')> operator(:)
      operator(()ident(value) operator(<) float(0.00001)operator(\)) operator(?) integer(0) operator(:) ident(value)operator(;)
    keyword(return) ident(element)operator(;)
  operator(})operator(,)

  function(getDimensions)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    keyword(var) ident(display) operator(=) ident(element)operator(.)ident(getStyle)operator(()string<delimiter(')content(display)delimiter(')>operator(\))operator(;)
    keyword(if) operator(()ident(display) operator(!=) string<delimiter(')content(none)delimiter(')> operator(&&) ident(display) operator(!=) predefined_constant(null)operator(\)) comment(// Safari bug)
      keyword(return) operator({)key(width)operator(:) ident(element)operator(.)ident(offsetWidth)operator(,) key(height)operator(:) ident(element)operator(.)ident(offsetHeight)operator(})operator(;)

    comment(// All *Width and *Height properties give 0 on elements with display none,)
    comment(// so enable the element temporarily)
    keyword(var) ident(els) operator(=) ident(element)operator(.)ident(style)operator(;)
    keyword(var) ident(originalVisibility) operator(=) ident(els)operator(.)ident(visibility)operator(;)
    keyword(var) ident(originalPosition) operator(=) ident(els)operator(.)ident(position)operator(;)
    keyword(var) ident(originalDisplay) operator(=) ident(els)operator(.)ident(display)operator(;)
    ident(els)operator(.)ident(visibility) operator(=) string<delimiter(')content(hidden)delimiter(')>operator(;)
    ident(els)operator(.)ident(position) operator(=) string<delimiter(')content(absolute)delimiter(')>operator(;)
    ident(els)operator(.)ident(display) operator(=) string<delimiter(')content(block)delimiter(')>operator(;)
    keyword(var) ident(originalWidth) operator(=) ident(element)operator(.)ident(clientWidth)operator(;)
    keyword(var) ident(originalHeight) operator(=) ident(element)operator(.)ident(clientHeight)operator(;)
    ident(els)operator(.)ident(display) operator(=) ident(originalDisplay)operator(;)
    ident(els)operator(.)ident(position) operator(=) ident(originalPosition)operator(;)
    ident(els)operator(.)ident(visibility) operator(=) ident(originalVisibility)operator(;)
    keyword(return) operator({)key(width)operator(:) ident(originalWidth)operator(,) key(height)operator(:) ident(originalHeight)operator(})operator(;)
  operator(})operator(,)

  function(makePositioned)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    keyword(var) ident(pos) operator(=) ident(Element)operator(.)ident(getStyle)operator(()ident(element)operator(,) string<delimiter(')content(position)delimiter(')>operator(\))operator(;)
    keyword(if) operator(()ident(pos) operator(==) string<delimiter(')content(static)delimiter(')> operator(||) operator(!)ident(pos)operator(\)) operator({)
      ident(element)operator(.)ident(_madePositioned) operator(=) predefined_constant(true)operator(;)
      ident(element)operator(.)ident(style)operator(.)ident(position) operator(=) string<delimiter(')content(relative)delimiter(')>operator(;)
      comment(// Opera returns the offset relative to the positioning context, when an)
      comment(// element is position relative but top and left have not been defined)
      keyword(if) operator(()ident(Prototype)operator(.)ident(Browser)operator(.)ident(Opera)operator(\)) operator({)
        ident(element)operator(.)ident(style)operator(.)ident(top) operator(=) integer(0)operator(;)
        ident(element)operator(.)ident(style)operator(.)ident(left) operator(=) integer(0)operator(;)
      operator(})
    operator(})
    keyword(return) ident(element)operator(;)
  operator(})operator(,)

  function(undoPositioned)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    keyword(if) operator(()ident(element)operator(.)ident(_madePositioned)operator(\)) operator({)
      ident(element)operator(.)ident(_madePositioned) operator(=) predefined_constant(undefined)operator(;)
      ident(element)operator(.)ident(style)operator(.)ident(position) operator(=)
        ident(element)operator(.)ident(style)operator(.)ident(top) operator(=)
        ident(element)operator(.)ident(style)operator(.)ident(left) operator(=)
        ident(element)operator(.)ident(style)operator(.)ident(bottom) operator(=)
        ident(element)operator(.)ident(style)operator(.)ident(right) operator(=) string<delimiter(')delimiter(')>operator(;)
    operator(})
    keyword(return) ident(element)operator(;)
  operator(})operator(,)

  function(makeClipping)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    keyword(if) operator(()ident(element)operator(.)ident(_overflow)operator(\)) keyword(return) ident(element)operator(;)
    ident(element)operator(.)ident(_overflow) operator(=) ident(Element)operator(.)ident(getStyle)operator(()ident(element)operator(,) string<delimiter(')content(overflow)delimiter(')>operator(\)) operator(||) string<delimiter(')content(auto)delimiter(')>operator(;)
    keyword(if) operator(()ident(element)operator(.)ident(_overflow) operator(!==) string<delimiter(')content(hidden)delimiter(')>operator(\))
      ident(element)operator(.)ident(style)operator(.)ident(overflow) operator(=) string<delimiter(')content(hidden)delimiter(')>operator(;)
    keyword(return) ident(element)operator(;)
  operator(})operator(,)

  function(undoClipping)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    keyword(if) operator((!)ident(element)operator(.)ident(_overflow)operator(\)) keyword(return) ident(element)operator(;)
    ident(element)operator(.)ident(style)operator(.)ident(overflow) operator(=) ident(element)operator(.)ident(_overflow) operator(==) string<delimiter(')content(auto)delimiter(')> operator(?) string<delimiter(')delimiter(')> operator(:) ident(element)operator(.)ident(_overflow)operator(;)
    ident(element)operator(.)ident(_overflow) operator(=) predefined_constant(null)operator(;)
    keyword(return) ident(element)operator(;)
  operator(})operator(,)

  function(cumulativeOffset)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    keyword(var) ident(valueT) operator(=) integer(0)operator(,) ident(valueL) operator(=) integer(0)operator(;)
    keyword(do) operator({)
      ident(valueT) operator(+=) ident(element)operator(.)ident(offsetTop)  operator(||) integer(0)operator(;)
      ident(valueL) operator(+=) ident(element)operator(.)ident(offsetLeft) operator(||) integer(0)operator(;)
      ident(element) operator(=) ident(element)operator(.)ident(offsetParent)operator(;)
    operator(}) keyword(while) operator(()ident(element)operator(\))operator(;)
    keyword(return) ident(Element)operator(.)ident(_returnOffset)operator(()ident(valueL)operator(,) ident(valueT)operator(\))operator(;)
  operator(})operator(,)

  function(positionedOffset)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    keyword(var) ident(valueT) operator(=) integer(0)operator(,) ident(valueL) operator(=) integer(0)operator(;)
    keyword(do) operator({)
      ident(valueT) operator(+=) ident(element)operator(.)ident(offsetTop)  operator(||) integer(0)operator(;)
      ident(valueL) operator(+=) ident(element)operator(.)ident(offsetLeft) operator(||) integer(0)operator(;)
      ident(element) operator(=) ident(element)operator(.)ident(offsetParent)operator(;)
      keyword(if) operator(()ident(element)operator(\)) operator({)
        keyword(if) operator(()ident(element)operator(.)ident(tagName)operator(.)ident(toUpperCase)operator(()operator(\)) operator(==) string<delimiter(')content(BODY)delimiter(')>operator(\)) keyword(break)operator(;)
        keyword(var) ident(p) operator(=) ident(Element)operator(.)ident(getStyle)operator(()ident(element)operator(,) string<delimiter(')content(position)delimiter(')>operator(\))operator(;)
        keyword(if) operator(()ident(p) operator(!==) string<delimiter(')content(static)delimiter(')>operator(\)) keyword(break)operator(;)
      operator(})
    operator(}) keyword(while) operator(()ident(element)operator(\))operator(;)
    keyword(return) ident(Element)operator(.)ident(_returnOffset)operator(()ident(valueL)operator(,) ident(valueT)operator(\))operator(;)
  operator(})operator(,)

  function(absolutize)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    keyword(if) operator(()ident(element)operator(.)ident(getStyle)operator(()string<delimiter(')content(position)delimiter(')>operator(\)) operator(==) string<delimiter(')content(absolute)delimiter(')>operator(\)) keyword(return) ident(element)operator(;)
    comment(// Position.prepare(\); // To be done manually by Scripty when it needs it.)

    keyword(var) ident(offsets) operator(=) ident(element)operator(.)ident(positionedOffset)operator(()operator(\))operator(;)
    keyword(var) ident(top)     operator(=) ident(offsets)operator([)integer(1)operator(])operator(;)
    keyword(var) ident(left)    operator(=) ident(offsets)operator([)integer(0)operator(])operator(;)
    keyword(var) ident(width)   operator(=) ident(element)operator(.)ident(clientWidth)operator(;)
    keyword(var) ident(height)  operator(=) ident(element)operator(.)ident(clientHeight)operator(;)

    ident(element)operator(.)ident(_originalLeft)   operator(=) ident(left) operator(-) ident(parseFloat)operator(()ident(element)operator(.)ident(style)operator(.)ident(left)  operator(||) integer(0)operator(\))operator(;)
    ident(element)operator(.)ident(_originalTop)    operator(=) ident(top)  operator(-) ident(parseFloat)operator(()ident(element)operator(.)ident(style)operator(.)ident(top) operator(||) integer(0)operator(\))operator(;)
    ident(element)operator(.)ident(_originalWidth)  operator(=) ident(element)operator(.)ident(style)operator(.)ident(width)operator(;)
    ident(element)operator(.)ident(_originalHeight) operator(=) ident(element)operator(.)ident(style)operator(.)ident(height)operator(;)

    ident(element)operator(.)ident(style)operator(.)ident(position) operator(=) string<delimiter(')content(absolute)delimiter(')>operator(;)
    ident(element)operator(.)ident(style)operator(.)ident(top)    operator(=) ident(top) operator(+) string<delimiter(')content(px)delimiter(')>operator(;)
    ident(element)operator(.)ident(style)operator(.)ident(left)   operator(=) ident(left) operator(+) string<delimiter(')content(px)delimiter(')>operator(;)
    ident(element)operator(.)ident(style)operator(.)ident(width)  operator(=) ident(width) operator(+) string<delimiter(')content(px)delimiter(')>operator(;)
    ident(element)operator(.)ident(style)operator(.)ident(height) operator(=) ident(height) operator(+) string<delimiter(')content(px)delimiter(')>operator(;)
    keyword(return) ident(element)operator(;)
  operator(})operator(,)

  function(relativize)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    keyword(if) operator(()ident(element)operator(.)ident(getStyle)operator(()string<delimiter(')content(position)delimiter(')>operator(\)) operator(==) string<delimiter(')content(relative)delimiter(')>operator(\)) keyword(return) ident(element)operator(;)
    comment(// Position.prepare(\); // To be done manually by Scripty when it needs it.)

    ident(element)operator(.)ident(style)operator(.)ident(position) operator(=) string<delimiter(')content(relative)delimiter(')>operator(;)
    keyword(var) ident(top)  operator(=) ident(parseFloat)operator(()ident(element)operator(.)ident(style)operator(.)ident(top)  operator(||) integer(0)operator(\)) operator(-) operator(()ident(element)operator(.)ident(_originalTop) operator(||) integer(0)operator(\))operator(;)
    keyword(var) ident(left) operator(=) ident(parseFloat)operator(()ident(element)operator(.)ident(style)operator(.)ident(left) operator(||) integer(0)operator(\)) operator(-) operator(()ident(element)operator(.)ident(_originalLeft) operator(||) integer(0)operator(\))operator(;)

    ident(element)operator(.)ident(style)operator(.)ident(top)    operator(=) ident(top) operator(+) string<delimiter(')content(px)delimiter(')>operator(;)
    ident(element)operator(.)ident(style)operator(.)ident(left)   operator(=) ident(left) operator(+) string<delimiter(')content(px)delimiter(')>operator(;)
    ident(element)operator(.)ident(style)operator(.)ident(height) operator(=) ident(element)operator(.)ident(_originalHeight)operator(;)
    ident(element)operator(.)ident(style)operator(.)ident(width)  operator(=) ident(element)operator(.)ident(_originalWidth)operator(;)
    keyword(return) ident(element)operator(;)
  operator(})operator(,)

  function(cumulativeScrollOffset)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    keyword(var) ident(valueT) operator(=) integer(0)operator(,) ident(valueL) operator(=) integer(0)operator(;)
    keyword(do) operator({)
      ident(valueT) operator(+=) ident(element)operator(.)ident(scrollTop)  operator(||) integer(0)operator(;)
      ident(valueL) operator(+=) ident(element)operator(.)ident(scrollLeft) operator(||) integer(0)operator(;)
      ident(element) operator(=) ident(element)operator(.)ident(parentNode)operator(;)
    operator(}) keyword(while) operator(()ident(element)operator(\))operator(;)
    keyword(return) ident(Element)operator(.)ident(_returnOffset)operator(()ident(valueL)operator(,) ident(valueT)operator(\))operator(;)
  operator(})operator(,)

  function(getOffsetParent)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    keyword(if) operator(()ident(element)operator(.)ident(offsetParent)operator(\)) keyword(return) predefined($)operator(()ident(element)operator(.)ident(offsetParent)operator(\))operator(;)
    keyword(if) operator(()ident(element) operator(==) ident(document)operator(.)ident(body)operator(\)) keyword(return) predefined($)operator(()ident(element)operator(\))operator(;)

    keyword(while) operator((()ident(element) operator(=) ident(element)operator(.)ident(parentNode)operator(\)) operator(&&) ident(element) operator(!=) ident(document)operator(.)ident(body)operator(\))
      keyword(if) operator(()ident(Element)operator(.)ident(getStyle)operator(()ident(element)operator(,) string<delimiter(')content(position)delimiter(')>operator(\)) operator(!=) string<delimiter(')content(static)delimiter(')>operator(\))
        keyword(return) predefined($)operator(()ident(element)operator(\))operator(;)

    keyword(return) predefined($)operator(()ident(document)operator(.)ident(body)operator(\))operator(;)
  operator(})operator(,)

  function(viewportOffset)operator(:) keyword(function)operator(()ident(forElement)operator(\)) operator({)
    keyword(var) ident(valueT) operator(=) integer(0)operator(,) ident(valueL) operator(=) integer(0)operator(;)

    keyword(var) ident(element) operator(=) ident(forElement)operator(;)
    keyword(do) operator({)
      ident(valueT) operator(+=) ident(element)operator(.)ident(offsetTop)  operator(||) integer(0)operator(;)
      ident(valueL) operator(+=) ident(element)operator(.)ident(offsetLeft) operator(||) integer(0)operator(;)

      comment(// Safari fix)
      keyword(if) operator(()ident(element)operator(.)ident(offsetParent) operator(==) ident(document)operator(.)ident(body) operator(&&)
        ident(Element)operator(.)ident(getStyle)operator(()ident(element)operator(,) string<delimiter(')content(position)delimiter(')>operator(\)) operator(==) string<delimiter(')content(absolute)delimiter(')>operator(\)) keyword(break)operator(;)

    operator(}) keyword(while) operator(()ident(element) operator(=) ident(element)operator(.)ident(offsetParent)operator(\))operator(;)

    ident(element) operator(=) ident(forElement)operator(;)
    keyword(do) operator({)
      keyword(if) operator((!)ident(Prototype)operator(.)ident(Browser)operator(.)ident(Opera) operator(||) operator(()ident(element)operator(.)ident(tagName) operator(&&) operator(()ident(element)operator(.)ident(tagName)operator(.)ident(toUpperCase)operator(()operator(\)) operator(==) string<delimiter(')content(BODY)delimiter(')>operator(\)\)\)) operator({)
        ident(valueT) operator(-=) ident(element)operator(.)ident(scrollTop)  operator(||) integer(0)operator(;)
        ident(valueL) operator(-=) ident(element)operator(.)ident(scrollLeft) operator(||) integer(0)operator(;)
      operator(})
    operator(}) keyword(while) operator(()ident(element) operator(=) ident(element)operator(.)ident(parentNode)operator(\))operator(;)

    keyword(return) ident(Element)operator(.)ident(_returnOffset)operator(()ident(valueL)operator(,) ident(valueT)operator(\))operator(;)
  operator(})operator(,)

  function(clonePosition)operator(:) keyword(function)operator(()ident(element)operator(,) ident(source)operator(\)) operator({)
    keyword(var) ident(options) operator(=) ident(Object)operator(.)ident(extend)operator(({)
      key(setLeft)operator(:)    predefined_constant(true)operator(,)
      key(setTop)operator(:)     predefined_constant(true)operator(,)
      key(setWidth)operator(:)   predefined_constant(true)operator(,)
      key(setHeight)operator(:)  predefined_constant(true)operator(,)
      key(offsetTop)operator(:)  integer(0)operator(,)
      key(offsetLeft)operator(:) integer(0)
    operator(})operator(,) local_variable(arguments)operator([)integer(2)operator(]) operator(||) operator({) operator(}\))operator(;)

    comment(// find page position of source)
    ident(source) operator(=) predefined($)operator(()ident(source)operator(\))operator(;)
    keyword(var) ident(p) operator(=) ident(source)operator(.)ident(viewportOffset)operator(()operator(\))operator(;)

    comment(// find coordinate system to use)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    keyword(var) ident(delta) operator(=) operator([)integer(0)operator(,) integer(0)operator(])operator(;)
    keyword(var) ident(parent) operator(=) predefined_constant(null)operator(;)
    comment(// delta [0,0] will do fine with position: fixed elements,)
    comment(// position:absolute needs offsetParent deltas)
    keyword(if) operator(()ident(Element)operator(.)ident(getStyle)operator(()ident(element)operator(,) string<delimiter(')content(position)delimiter(')>operator(\)) operator(==) string<delimiter(')content(absolute)delimiter(')>operator(\)) operator({)
      ident(parent) operator(=) ident(element)operator(.)ident(getOffsetParent)operator(()operator(\))operator(;)
      ident(delta) operator(=) ident(parent)operator(.)ident(viewportOffset)operator(()operator(\))operator(;)
    operator(})

    comment(// correct by body offsets (fixes Safari\))
    keyword(if) operator(()ident(parent) operator(==) ident(document)operator(.)ident(body)operator(\)) operator({)
      ident(delta)operator([)integer(0)operator(]) operator(-=) ident(document)operator(.)ident(body)operator(.)ident(offsetLeft)operator(;)
      ident(delta)operator([)integer(1)operator(]) operator(-=) ident(document)operator(.)ident(body)operator(.)ident(offsetTop)operator(;)
    operator(})

    comment(// set position)
    keyword(if) operator(()ident(options)operator(.)ident(setLeft)operator(\))   ident(element)operator(.)ident(style)operator(.)ident(left)  operator(=) operator(()ident(p)operator([)integer(0)operator(]) operator(-) ident(delta)operator([)integer(0)operator(]) operator(+) ident(options)operator(.)ident(offsetLeft)operator(\)) operator(+) string<delimiter(')content(px)delimiter(')>operator(;)
    keyword(if) operator(()ident(options)operator(.)ident(setTop)operator(\))    ident(element)operator(.)ident(style)operator(.)ident(top)   operator(=) operator(()ident(p)operator([)integer(1)operator(]) operator(-) ident(delta)operator([)integer(1)operator(]) operator(+) ident(options)operator(.)ident(offsetTop)operator(\)) operator(+) string<delimiter(')content(px)delimiter(')>operator(;)
    keyword(if) operator(()ident(options)operator(.)ident(setWidth)operator(\))  ident(element)operator(.)ident(style)operator(.)ident(width) operator(=) ident(source)operator(.)ident(offsetWidth) operator(+) string<delimiter(')content(px)delimiter(')>operator(;)
    keyword(if) operator(()ident(options)operator(.)ident(setHeight)operator(\)) ident(element)operator(.)ident(style)operator(.)ident(height) operator(=) ident(source)operator(.)ident(offsetHeight) operator(+) string<delimiter(')content(px)delimiter(')>operator(;)
    keyword(return) ident(element)operator(;)
  operator(})
operator(})operator(;)

ident(Element)operator(.)ident(Methods)operator(.)ident(identify)operator(.)ident(counter) operator(=) integer(1)operator(;)

ident(Object)operator(.)ident(extend)operator(()ident(Element)operator(.)ident(Methods)operator(,) operator({)
  key(getElementsBySelector)operator(:) ident(Element)operator(.)ident(Methods)operator(.)ident(select)operator(,)
  key(childElements)operator(:) ident(Element)operator(.)ident(Methods)operator(.)ident(immediateDescendants)
operator(}\))operator(;)

ident(Element)operator(.)ident(_attributeTranslations) operator(=) operator({)
  key(write)operator(:) operator({)
    key(names)operator(:) operator({)
      key(className)operator(:) string<delimiter(')content(class)delimiter(')>operator(,)
      key(htmlFor)operator(:)   string<delimiter(')content(for)delimiter(')>
    operator(})operator(,)
    key(values)operator(:) operator({) operator(})
  operator(})
operator(})operator(;)

keyword(if) operator(()ident(Prototype)operator(.)ident(Browser)operator(.)ident(Opera)operator(\)) operator({)
  ident(Element)operator(.)ident(Methods)operator(.)ident(getStyle) operator(=) ident(Element)operator(.)ident(Methods)operator(.)ident(getStyle)operator(.)ident(wrap)operator(()
    keyword(function)operator(()ident(proceed)operator(,) ident(element)operator(,) ident(style)operator(\)) operator({)
      keyword(switch) operator(()ident(style)operator(\)) operator({)
        keyword(case) string<delimiter(')content(left)delimiter(')>operator(:) keyword(case) string<delimiter(')content(top)delimiter(')>operator(:) keyword(case) string<delimiter(')content(right)delimiter(')>operator(:) keyword(case) string<delimiter(')content(bottom)delimiter(')>operator(:)
          keyword(if) operator(()ident(proceed)operator(()ident(element)operator(,) string<delimiter(')content(position)delimiter(')>operator(\)) operator(===) string<delimiter(')content(static)delimiter(')>operator(\)) keyword(return) predefined_constant(null)operator(;)
        keyword(case) string<delimiter(')content(height)delimiter(')>operator(:) keyword(case) string<delimiter(')content(width)delimiter(')>operator(:)
          comment(// returns '0px' for hidden elements; we want it to return null)
          keyword(if) operator((!)ident(Element)operator(.)ident(visible)operator(()ident(element)operator(\)\)) keyword(return) predefined_constant(null)operator(;)

          comment(// returns the border-box dimensions rather than the content-box)
          comment(// dimensions, so we subtract padding and borders from the value)
          keyword(var) ident(dim) operator(=) ident(parseInt)operator(()ident(proceed)operator(()ident(element)operator(,) ident(style)operator(\))operator(,) integer(10)operator(\))operator(;)

          keyword(if) operator(()ident(dim) operator(!==) ident(element)operator([)string<delimiter(')content(offset)delimiter(')> operator(+) ident(style)operator(.)ident(capitalize)operator(()operator(\)]\))
            keyword(return) ident(dim) operator(+) string<delimiter(')content(px)delimiter(')>operator(;)

          keyword(var) ident(properties)operator(;)
          keyword(if) operator(()ident(style) operator(===) string<delimiter(')content(height)delimiter(')>operator(\)) operator({)
            ident(properties) operator(=) operator([)string<delimiter(')content(border-top-width)delimiter(')>operator(,) string<delimiter(')content(padding-top)delimiter(')>operator(,)
             string<delimiter(')content(padding-bottom)delimiter(')>operator(,) string<delimiter(')content(border-bottom-width)delimiter(')>operator(])operator(;)
          operator(})
          keyword(else) operator({)
            ident(properties) operator(=) operator([)string<delimiter(')content(border-left-width)delimiter(')>operator(,) string<delimiter(')content(padding-left)delimiter(')>operator(,)
             string<delimiter(')content(padding-right)delimiter(')>operator(,) string<delimiter(')content(border-right-width)delimiter(')>operator(])operator(;)
          operator(})
          keyword(return) ident(properties)operator(.)ident(inject)operator(()ident(dim)operator(,) keyword(function)operator(()ident(memo)operator(,) ident(property)operator(\)) operator({)
            keyword(var) ident(val) operator(=) ident(proceed)operator(()ident(element)operator(,) ident(property)operator(\))operator(;)
            keyword(return) ident(val) operator(===) predefined_constant(null) operator(?) ident(memo) operator(:) ident(memo) operator(-) ident(parseInt)operator(()ident(val)operator(,) integer(10)operator(\))operator(;)
          operator(}\)) operator(+) string<delimiter(')content(px)delimiter(')>operator(;)
        keyword(default)operator(:) keyword(return) ident(proceed)operator(()ident(element)operator(,) ident(style)operator(\))operator(;)
      operator(})
    operator(})
  operator(\))operator(;)

  ident(Element)operator(.)ident(Methods)operator(.)ident(readAttribute) operator(=) ident(Element)operator(.)ident(Methods)operator(.)ident(readAttribute)operator(.)ident(wrap)operator(()
    keyword(function)operator(()ident(proceed)operator(,) ident(element)operator(,) ident(attribute)operator(\)) operator({)
      keyword(if) operator(()ident(attribute) operator(===) string<delimiter(')content(title)delimiter(')>operator(\)) keyword(return) ident(element)operator(.)ident(title)operator(;)
      keyword(return) ident(proceed)operator(()ident(element)operator(,) ident(attribute)operator(\))operator(;)
    operator(})
  operator(\))operator(;)
operator(})

keyword(else) keyword(if) operator(()ident(Prototype)operator(.)ident(Browser)operator(.)ident(IE)operator(\)) operator({)
  comment(// IE doesn't report offsets correctly for static elements, so we change them)
  comment(// to "relative" to get the values, then change them back.)
  ident(Element)operator(.)ident(Methods)operator(.)ident(getOffsetParent) operator(=) ident(Element)operator(.)ident(Methods)operator(.)ident(getOffsetParent)operator(.)ident(wrap)operator(()
    keyword(function)operator(()ident(proceed)operator(,) ident(element)operator(\)) operator({)
      ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
      comment(// IE throws an error if element is not in document)
      keyword(try) operator({) ident(element)operator(.)ident(offsetParent) operator(})
      keyword(catch)operator(()ident(e)operator(\)) operator({) keyword(return) predefined($)operator(()ident(document)operator(.)ident(body)operator(\)) operator(})
      keyword(var) ident(position) operator(=) ident(element)operator(.)ident(getStyle)operator(()string<delimiter(')content(position)delimiter(')>operator(\))operator(;)
      keyword(if) operator(()ident(position) operator(!==) string<delimiter(')content(static)delimiter(')>operator(\)) keyword(return) ident(proceed)operator(()ident(element)operator(\))operator(;)
      ident(element)operator(.)ident(setStyle)operator(({) key(position)operator(:) string<delimiter(')content(relative)delimiter(')> operator(}\))operator(;)
      keyword(var) ident(value) operator(=) ident(proceed)operator(()ident(element)operator(\))operator(;)
      ident(element)operator(.)ident(setStyle)operator(({) key(position)operator(:) ident(position) operator(}\))operator(;)
      keyword(return) ident(value)operator(;)
    operator(})
  operator(\))operator(;)

  predefined($w)operator(()string<delimiter(')content(positionedOffset viewportOffset)delimiter(')>operator(\))operator(.)ident(each)operator(()keyword(function)operator(()ident(method)operator(\)) operator({)
    ident(Element)operator(.)ident(Methods)operator([)ident(method)operator(]) operator(=) ident(Element)operator(.)ident(Methods)operator([)ident(method)operator(])operator(.)ident(wrap)operator(()
      keyword(function)operator(()ident(proceed)operator(,) ident(element)operator(\)) operator({)
        ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
        keyword(try) operator({) ident(element)operator(.)ident(offsetParent) operator(})
        keyword(catch)operator(()ident(e)operator(\)) operator({) keyword(return) ident(Element)operator(.)ident(_returnOffset)operator(()integer(0)operator(,)integer(0)operator(\)) operator(})
        keyword(var) ident(position) operator(=) ident(element)operator(.)ident(getStyle)operator(()string<delimiter(')content(position)delimiter(')>operator(\))operator(;)
        keyword(if) operator(()ident(position) operator(!==) string<delimiter(')content(static)delimiter(')>operator(\)) keyword(return) ident(proceed)operator(()ident(element)operator(\))operator(;)
        comment(// Trigger hasLayout on the offset parent so that IE6 reports)
        comment(// accurate offsetTop and offsetLeft values for position: fixed.)
        keyword(var) ident(offsetParent) operator(=) ident(element)operator(.)ident(getOffsetParent)operator(()operator(\))operator(;)
        keyword(if) operator(()ident(offsetParent) operator(&&) ident(offsetParent)operator(.)ident(getStyle)operator(()string<delimiter(')content(position)delimiter(')>operator(\)) operator(===) string<delimiter(')content(fixed)delimiter(')>operator(\))
          ident(offsetParent)operator(.)ident(setStyle)operator(({) key(zoom)operator(:) integer(1) operator(}\))operator(;)
        ident(element)operator(.)ident(setStyle)operator(({) key(position)operator(:) string<delimiter(')content(relative)delimiter(')> operator(}\))operator(;)
        keyword(var) ident(value) operator(=) ident(proceed)operator(()ident(element)operator(\))operator(;)
        ident(element)operator(.)ident(setStyle)operator(({) key(position)operator(:) ident(position) operator(}\))operator(;)
        keyword(return) ident(value)operator(;)
      operator(})
    operator(\))operator(;)
  operator(}\))operator(;)

  ident(Element)operator(.)ident(Methods)operator(.)ident(cumulativeOffset) operator(=) ident(Element)operator(.)ident(Methods)operator(.)ident(cumulativeOffset)operator(.)ident(wrap)operator(()
    keyword(function)operator(()ident(proceed)operator(,) ident(element)operator(\)) operator({)
      keyword(try) operator({) ident(element)operator(.)ident(offsetParent) operator(})
      keyword(catch)operator(()ident(e)operator(\)) operator({) keyword(return) ident(Element)operator(.)ident(_returnOffset)operator(()integer(0)operator(,)integer(0)operator(\)) operator(})
      keyword(return) ident(proceed)operator(()ident(element)operator(\))operator(;)
    operator(})
  operator(\))operator(;)

  ident(Element)operator(.)ident(Methods)operator(.)function(getStyle) operator(=) keyword(function)operator(()ident(element)operator(,) ident(style)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    ident(style) operator(=) operator(()ident(style) operator(==) string<delimiter(')content(float)delimiter(')> operator(||) ident(style) operator(==) string<delimiter(')content(cssFloat)delimiter(')>operator(\)) operator(?) string<delimiter(')content(styleFloat)delimiter(')> operator(:) ident(style)operator(.)ident(camelize)operator(()operator(\))operator(;)
    keyword(var) ident(value) operator(=) ident(element)operator(.)ident(style)operator([)ident(style)operator(])operator(;)
    keyword(if) operator((!)ident(value) operator(&&) ident(element)operator(.)ident(currentStyle)operator(\)) ident(value) operator(=) ident(element)operator(.)ident(currentStyle)operator([)ident(style)operator(])operator(;)

    keyword(if) operator(()ident(style) operator(==) string<delimiter(')content(opacity)delimiter(')>operator(\)) operator({)
      keyword(if) operator(()ident(value) operator(=) operator(()ident(element)operator(.)ident(getStyle)operator(()string<delimiter(')content(filter)delimiter(')>operator(\)) operator(||) string<delimiter(')delimiter(')>operator(\))operator(.)ident(match)operator(()regexp<delimiter(/)content(alpha)content(\\()content(opacity=(.*\))content(\\\))delimiter(/)>operator(\)\))
        keyword(if) operator(()ident(value)operator([)integer(1)operator(]\)) keyword(return) ident(parseFloat)operator(()ident(value)operator([)integer(1)operator(]\)) operator(/) integer(100)operator(;)
      keyword(return) float(1.0)operator(;)
    operator(})

    keyword(if) operator(()ident(value) operator(==) string<delimiter(')content(auto)delimiter(')>operator(\)) operator({)
      keyword(if) operator((()ident(style) operator(==) string<delimiter(')content(width)delimiter(')> operator(||) ident(style) operator(==) string<delimiter(')content(height)delimiter(')>operator(\)) operator(&&) operator(()ident(element)operator(.)ident(getStyle)operator(()string<delimiter(')content(display)delimiter(')>operator(\)) operator(!=) string<delimiter(')content(none)delimiter(')>operator(\)\))
        keyword(return) ident(element)operator([)string<delimiter(')content(offset)delimiter(')> operator(+) ident(style)operator(.)ident(capitalize)operator(()operator(\)]) operator(+) string<delimiter(')content(px)delimiter(')>operator(;)
      keyword(return) predefined_constant(null)operator(;)
    operator(})
    keyword(return) ident(value)operator(;)
  operator(})operator(;)

  ident(Element)operator(.)ident(Methods)operator(.)function(setOpacity) operator(=) keyword(function)operator(()ident(element)operator(,) ident(value)operator(\)) operator({)
    keyword(function) function(stripAlpha)operator(()ident(filter)operator(\))operator({)
      keyword(return) ident(filter)operator(.)ident(replace)operator(()regexp<delimiter(/)content(alpha)content(\\()content([^)content(\\\))content(]*)content(\\\))delimiter(/)modifier(gi)>operator(,)string<delimiter(')delimiter(')>operator(\))operator(;)
    operator(})
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    keyword(var) ident(currentStyle) operator(=) ident(element)operator(.)ident(currentStyle)operator(;)
    keyword(if) operator((()ident(currentStyle) operator(&&) operator(!)ident(currentStyle)operator(.)ident(hasLayout)operator(\)) operator(||)
      operator((!)ident(currentStyle) operator(&&) ident(element)operator(.)ident(style)operator(.)ident(zoom) operator(==) string<delimiter(')content(normal)delimiter(')>operator(\)\))
        ident(element)operator(.)ident(style)operator(.)ident(zoom) operator(=) integer(1)operator(;)

    keyword(var) ident(filter) operator(=) ident(element)operator(.)ident(getStyle)operator(()string<delimiter(')content(filter)delimiter(')>operator(\))operator(,) ident(style) operator(=) ident(element)operator(.)ident(style)operator(;)
    keyword(if) operator(()ident(value) operator(==) integer(1) operator(||) ident(value) operator(===) string<delimiter(')delimiter(')>operator(\)) operator({)
      operator(()ident(filter) operator(=) ident(stripAlpha)operator(()ident(filter)operator(\)\)) operator(?)
        ident(style)operator(.)ident(filter) operator(=) ident(filter) operator(:) ident(style)operator(.)ident(removeAttribute)operator(()string<delimiter(')content(filter)delimiter(')>operator(\))operator(;)
      keyword(return) ident(element)operator(;)
    operator(}) keyword(else) keyword(if) operator(()ident(value) operator(<) float(0.00001)operator(\)) ident(value) operator(=) integer(0)operator(;)
    ident(style)operator(.)ident(filter) operator(=) ident(stripAlpha)operator(()ident(filter)operator(\)) operator(+)
      string<delimiter(')content(alpha(opacity=)delimiter(')> operator(+) operator(()ident(value) operator(*) integer(100)operator(\)) operator(+) string<delimiter(')content(\))delimiter(')>operator(;)
    keyword(return) ident(element)operator(;)
  operator(})operator(;)

  ident(Element)operator(.)ident(_attributeTranslations) operator(=) operator({)
    key(read)operator(:) operator({)
      key(names)operator(:) operator({)
        key<delimiter(')content(class)delimiter(')>operator(:) string<delimiter(')content(className)delimiter(')>operator(,)
        key<delimiter(')content(for)delimiter(')>operator(:)   string<delimiter(')content(htmlFor)delimiter(')>
      operator(})operator(,)
      key(values)operator(:) operator({)
        function(_getAttr)operator(:) keyword(function)operator(()ident(element)operator(,) ident(attribute)operator(\)) operator({)
          keyword(return) ident(element)operator(.)ident(getAttribute)operator(()ident(attribute)operator(,) integer(2)operator(\))operator(;)
        operator(})operator(,)
        function(_getAttrNode)operator(:) keyword(function)operator(()ident(element)operator(,) ident(attribute)operator(\)) operator({)
          keyword(var) ident(node) operator(=) ident(element)operator(.)ident(getAttributeNode)operator(()ident(attribute)operator(\))operator(;)
          keyword(return) ident(node) operator(?) ident(node)operator(.)ident(value) operator(:) string<delimiter(")delimiter(")>operator(;)
        operator(})operator(,)
        function(_getEv)operator(:) keyword(function)operator(()ident(element)operator(,) ident(attribute)operator(\)) operator({)
          ident(attribute) operator(=) ident(element)operator(.)ident(getAttribute)operator(()ident(attribute)operator(\))operator(;)
          keyword(return) ident(attribute) operator(?) ident(attribute)operator(.)ident(toString)operator(()operator(\))operator(.)ident(slice)operator(()integer(23)operator(,) operator(-)integer(2)operator(\)) operator(:) predefined_constant(null)operator(;)
        operator(})operator(,)
        function(_flag)operator(:) keyword(function)operator(()ident(element)operator(,) ident(attribute)operator(\)) operator({)
          keyword(return) predefined($)operator(()ident(element)operator(\))operator(.)ident(hasAttribute)operator(()ident(attribute)operator(\)) operator(?) ident(attribute) operator(:) predefined_constant(null)operator(;)
        operator(})operator(,)
        function(style)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
          keyword(return) ident(element)operator(.)ident(style)operator(.)ident(cssText)operator(.)ident(toLowerCase)operator(()operator(\))operator(;)
        operator(})operator(,)
        function(title)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
          keyword(return) ident(element)operator(.)ident(title)operator(;)
        operator(})
      operator(})
    operator(})
  operator(})operator(;)

  ident(Element)operator(.)ident(_attributeTranslations)operator(.)ident(write) operator(=) operator({)
    key(names)operator(:) ident(Object)operator(.)ident(extend)operator(({)
      key(cellpadding)operator(:) string<delimiter(')content(cellPadding)delimiter(')>operator(,)
      key(cellspacing)operator(:) string<delimiter(')content(cellSpacing)delimiter(')>
    operator(})operator(,) ident(Element)operator(.)ident(_attributeTranslations)operator(.)ident(read)operator(.)ident(names)operator(\))operator(,)
    key(values)operator(:) operator({)
      function(checked)operator(:) keyword(function)operator(()ident(element)operator(,) ident(value)operator(\)) operator({)
        ident(element)operator(.)ident(checked) operator(=) operator(!!)ident(value)operator(;)
      operator(})operator(,)

      function(style)operator(:) keyword(function)operator(()ident(element)operator(,) ident(value)operator(\)) operator({)
        ident(element)operator(.)ident(style)operator(.)ident(cssText) operator(=) ident(value) operator(?) ident(value) operator(:) string<delimiter(')delimiter(')>operator(;)
      operator(})
    operator(})
  operator(})operator(;)

  ident(Element)operator(.)ident(_attributeTranslations)operator(.)ident(has) operator(=) operator({)operator(})operator(;)

  predefined($w)operator(()string<delimiter(')content(colSpan rowSpan vAlign dateTime accessKey tabIndex )delimiter(')> operator(+)
      string<delimiter(')content(encType maxLength readOnly longDesc frameBorder)delimiter(')>operator(\))operator(.)ident(each)operator(()keyword(function)operator(()ident(attr)operator(\)) operator({)
    ident(Element)operator(.)ident(_attributeTranslations)operator(.)ident(write)operator(.)ident(names)operator([)ident(attr)operator(.)ident(toLowerCase)operator(()operator(\)]) operator(=) ident(attr)operator(;)
    ident(Element)operator(.)ident(_attributeTranslations)operator(.)ident(has)operator([)ident(attr)operator(.)ident(toLowerCase)operator(()operator(\)]) operator(=) ident(attr)operator(;)
  operator(}\))operator(;)

  operator(()keyword(function)operator(()ident(v)operator(\)) operator({)
    ident(Object)operator(.)ident(extend)operator(()ident(v)operator(,) operator({)
      key(href)operator(:)        ident(v)operator(.)ident(_getAttr)operator(,)
      key(src)operator(:)         ident(v)operator(.)ident(_getAttr)operator(,)
      key(type)operator(:)        ident(v)operator(.)ident(_getAttr)operator(,)
      key(action)operator(:)      ident(v)operator(.)ident(_getAttrNode)operator(,)
      key(disabled)operator(:)    ident(v)operator(.)ident(_flag)operator(,)
      key(checked)operator(:)     ident(v)operator(.)ident(_flag)operator(,)
      key(readonly)operator(:)    ident(v)operator(.)ident(_flag)operator(,)
      key(multiple)operator(:)    ident(v)operator(.)ident(_flag)operator(,)
      key(onload)operator(:)      ident(v)operator(.)ident(_getEv)operator(,)
      key(onunload)operator(:)    ident(v)operator(.)ident(_getEv)operator(,)
      key(onclick)operator(:)     ident(v)operator(.)ident(_getEv)operator(,)
      key(ondblclick)operator(:)  ident(v)operator(.)ident(_getEv)operator(,)
      key(onmousedown)operator(:) ident(v)operator(.)ident(_getEv)operator(,)
      key(onmouseup)operator(:)   ident(v)operator(.)ident(_getEv)operator(,)
      key(onmouseover)operator(:) ident(v)operator(.)ident(_getEv)operator(,)
      key(onmousemove)operator(:) ident(v)operator(.)ident(_getEv)operator(,)
      key(onmouseout)operator(:)  ident(v)operator(.)ident(_getEv)operator(,)
      key(onfocus)operator(:)     ident(v)operator(.)ident(_getEv)operator(,)
      key(onblur)operator(:)      ident(v)operator(.)ident(_getEv)operator(,)
      key(onkeypress)operator(:)  ident(v)operator(.)ident(_getEv)operator(,)
      key(onkeydown)operator(:)   ident(v)operator(.)ident(_getEv)operator(,)
      key(onkeyup)operator(:)     ident(v)operator(.)ident(_getEv)operator(,)
      key(onsubmit)operator(:)    ident(v)operator(.)ident(_getEv)operator(,)
      key(onreset)operator(:)     ident(v)operator(.)ident(_getEv)operator(,)
      key(onselect)operator(:)    ident(v)operator(.)ident(_getEv)operator(,)
      key(onchange)operator(:)    ident(v)operator(.)ident(_getEv)
    operator(}\))operator(;)
  operator(}\))operator(()ident(Element)operator(.)ident(_attributeTranslations)operator(.)ident(read)operator(.)ident(values)operator(\))operator(;)
operator(})

keyword(else) keyword(if) operator(()ident(Prototype)operator(.)ident(Browser)operator(.)ident(Gecko) operator(&&) regexp<delimiter(/)content(rv:1)content(\\.)content(8)content(\\.)content(0)delimiter(/)>operator(.)ident(test)operator(()ident(navigator)operator(.)ident(userAgent)operator(\)\)) operator({)
  ident(Element)operator(.)ident(Methods)operator(.)function(setOpacity) operator(=) keyword(function)operator(()ident(element)operator(,) ident(value)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    ident(element)operator(.)ident(style)operator(.)ident(opacity) operator(=) operator(()ident(value) operator(==) integer(1)operator(\)) operator(?) float(0.999999) operator(:)
      operator(()ident(value) operator(===) string<delimiter(')delimiter(')>operator(\)) operator(?) string<delimiter(')delimiter(')> operator(:) operator(()ident(value) operator(<) float(0.00001)operator(\)) operator(?) integer(0) operator(:) ident(value)operator(;)
    keyword(return) ident(element)operator(;)
  operator(})operator(;)
operator(})

keyword(else) keyword(if) operator(()ident(Prototype)operator(.)ident(Browser)operator(.)ident(WebKit)operator(\)) operator({)
  ident(Element)operator(.)ident(Methods)operator(.)function(setOpacity) operator(=) keyword(function)operator(()ident(element)operator(,) ident(value)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    ident(element)operator(.)ident(style)operator(.)ident(opacity) operator(=) operator(()ident(value) operator(==) integer(1) operator(||) ident(value) operator(===) string<delimiter(')delimiter(')>operator(\)) operator(?) string<delimiter(')delimiter(')> operator(:)
      operator(()ident(value) operator(<) float(0.00001)operator(\)) operator(?) integer(0) operator(:) ident(value)operator(;)

    keyword(if) operator(()ident(value) operator(==) integer(1)operator(\))
      keyword(if)operator(()ident(element)operator(.)ident(tagName)operator(.)ident(toUpperCase)operator(()operator(\)) operator(==) string<delimiter(')content(IMG)delimiter(')> operator(&&) ident(element)operator(.)ident(width)operator(\)) operator({)
        ident(element)operator(.)ident(width)operator(++;) ident(element)operator(.)ident(width)operator(--;)
      operator(}) keyword(else) keyword(try) operator({)
        keyword(var) ident(n) operator(=) ident(document)operator(.)ident(createTextNode)operator(()string<delimiter(')content( )delimiter(')>operator(\))operator(;)
        ident(element)operator(.)ident(appendChild)operator(()ident(n)operator(\))operator(;)
        ident(element)operator(.)ident(removeChild)operator(()ident(n)operator(\))operator(;)
      operator(}) keyword(catch) operator(()ident(e)operator(\)) operator({) operator(})

    keyword(return) ident(element)operator(;)
  operator(})operator(;)

  comment(// Safari returns margins on body which is incorrect if the child is absolutely)
  comment(// positioned.  For performance reasons, redefine Element#cumulativeOffset for)
  comment(// KHTML/WebKit only.)
  ident(Element)operator(.)ident(Methods)operator(.)function(cumulativeOffset) operator(=) keyword(function)operator(()ident(element)operator(\)) operator({)
    keyword(var) ident(valueT) operator(=) integer(0)operator(,) ident(valueL) operator(=) integer(0)operator(;)
    keyword(do) operator({)
      ident(valueT) operator(+=) ident(element)operator(.)ident(offsetTop)  operator(||) integer(0)operator(;)
      ident(valueL) operator(+=) ident(element)operator(.)ident(offsetLeft) operator(||) integer(0)operator(;)
      keyword(if) operator(()ident(element)operator(.)ident(offsetParent) operator(==) ident(document)operator(.)ident(body)operator(\))
        keyword(if) operator(()ident(Element)operator(.)ident(getStyle)operator(()ident(element)operator(,) string<delimiter(')content(position)delimiter(')>operator(\)) operator(==) string<delimiter(')content(absolute)delimiter(')>operator(\)) keyword(break)operator(;)

      ident(element) operator(=) ident(element)operator(.)ident(offsetParent)operator(;)
    operator(}) keyword(while) operator(()ident(element)operator(\))operator(;)

    keyword(return) ident(Element)operator(.)ident(_returnOffset)operator(()ident(valueL)operator(,) ident(valueT)operator(\))operator(;)
  operator(})operator(;)
operator(})

keyword(if) operator(()ident(Prototype)operator(.)ident(Browser)operator(.)ident(IE) operator(||) ident(Prototype)operator(.)ident(Browser)operator(.)ident(Opera)operator(\)) operator({)
  comment(// IE and Opera are missing .innerHTML support for TABLE-related and SELECT elements)
  ident(Element)operator(.)ident(Methods)operator(.)function(update) operator(=) keyword(function)operator(()ident(element)operator(,) ident(content)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)

    keyword(if) operator(()ident(content) operator(&&) ident(content)operator(.)ident(toElement)operator(\)) ident(content) operator(=) ident(content)operator(.)ident(toElement)operator(()operator(\))operator(;)
    keyword(if) operator(()ident(Object)operator(.)ident(isElement)operator(()ident(content)operator(\)\)) keyword(return) ident(element)operator(.)ident(update)operator(()operator(\))operator(.)ident(insert)operator(()ident(content)operator(\))operator(;)

    ident(content) operator(=) ident(Object)operator(.)ident(toHTML)operator(()ident(content)operator(\))operator(;)
    keyword(var) ident(tagName) operator(=) ident(element)operator(.)ident(tagName)operator(.)ident(toUpperCase)operator(()operator(\))operator(;)

    keyword(if) operator(()ident(tagName) keyword(in) ident(Element)operator(.)ident(_insertionTranslations)operator(.)ident(tags)operator(\)) operator({)
      predefined($A)operator(()ident(element)operator(.)ident(childNodes)operator(\))operator(.)ident(each)operator(()keyword(function)operator(()ident(node)operator(\)) operator({) ident(element)operator(.)ident(removeChild)operator(()ident(node)operator(\)) operator(}\))operator(;)
      ident(Element)operator(.)ident(_getContentFromAnonymousElement)operator(()ident(tagName)operator(,) ident(content)operator(.)ident(stripScripts)operator(()operator(\)\))
        operator(.)ident(each)operator(()keyword(function)operator(()ident(node)operator(\)) operator({) ident(element)operator(.)ident(appendChild)operator(()ident(node)operator(\)) operator(}\))operator(;)
    operator(})
    keyword(else) ident(element)operator(.)ident(innerHTML) operator(=) ident(content)operator(.)ident(stripScripts)operator(()operator(\))operator(;)

    ident(content)operator(.)ident(evalScripts)operator(.)ident(bind)operator(()ident(content)operator(\))operator(.)ident(defer)operator(()operator(\))operator(;)
    keyword(return) ident(element)operator(;)
  operator(})operator(;)
operator(})

keyword(if) operator(()string<delimiter(')content(outerHTML)delimiter(')> keyword(in) ident(document)operator(.)ident(createElement)operator(()string<delimiter(')content(div)delimiter(')>operator(\)\)) operator({)
  ident(Element)operator(.)ident(Methods)operator(.)function(replace) operator(=) keyword(function)operator(()ident(element)operator(,) ident(content)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)

    keyword(if) operator(()ident(content) operator(&&) ident(content)operator(.)ident(toElement)operator(\)) ident(content) operator(=) ident(content)operator(.)ident(toElement)operator(()operator(\))operator(;)
    keyword(if) operator(()ident(Object)operator(.)ident(isElement)operator(()ident(content)operator(\)\)) operator({)
      ident(element)operator(.)ident(parentNode)operator(.)ident(replaceChild)operator(()ident(content)operator(,) ident(element)operator(\))operator(;)
      keyword(return) ident(element)operator(;)
    operator(})

    ident(content) operator(=) ident(Object)operator(.)ident(toHTML)operator(()ident(content)operator(\))operator(;)
    keyword(var) ident(parent) operator(=) ident(element)operator(.)ident(parentNode)operator(,) ident(tagName) operator(=) ident(parent)operator(.)ident(tagName)operator(.)ident(toUpperCase)operator(()operator(\))operator(;)

    keyword(if) operator(()ident(Element)operator(.)ident(_insertionTranslations)operator(.)ident(tags)operator([)ident(tagName)operator(]\)) operator({)
      keyword(var) ident(nextSibling) operator(=) ident(element)operator(.)ident(next)operator(()operator(\))operator(;)
      keyword(var) ident(fragments) operator(=) ident(Element)operator(.)ident(_getContentFromAnonymousElement)operator(()ident(tagName)operator(,) ident(content)operator(.)ident(stripScripts)operator(()operator(\)\))operator(;)
      ident(parent)operator(.)ident(removeChild)operator(()ident(element)operator(\))operator(;)
      keyword(if) operator(()ident(nextSibling)operator(\))
        ident(fragments)operator(.)ident(each)operator(()keyword(function)operator(()ident(node)operator(\)) operator({) ident(parent)operator(.)ident(insertBefore)operator(()ident(node)operator(,) ident(nextSibling)operator(\)) operator(}\))operator(;)
      keyword(else)
        ident(fragments)operator(.)ident(each)operator(()keyword(function)operator(()ident(node)operator(\)) operator({) ident(parent)operator(.)ident(appendChild)operator(()ident(node)operator(\)) operator(}\))operator(;)
    operator(})
    keyword(else) ident(element)operator(.)ident(outerHTML) operator(=) ident(content)operator(.)ident(stripScripts)operator(()operator(\))operator(;)

    ident(content)operator(.)ident(evalScripts)operator(.)ident(bind)operator(()ident(content)operator(\))operator(.)ident(defer)operator(()operator(\))operator(;)
    keyword(return) ident(element)operator(;)
  operator(})operator(;)
operator(})

ident(Element)operator(.)function(_returnOffset) operator(=) keyword(function)operator(()ident(l)operator(,) ident(t)operator(\)) operator({)
  keyword(var) ident(result) operator(=) operator([)ident(l)operator(,) ident(t)operator(])operator(;)
  ident(result)operator(.)ident(left) operator(=) ident(l)operator(;)
  ident(result)operator(.)ident(top) operator(=) ident(t)operator(;)
  keyword(return) ident(result)operator(;)
operator(})operator(;)

ident(Element)operator(.)function(_getContentFromAnonymousElement) operator(=) keyword(function)operator(()ident(tagName)operator(,) ident(html)operator(\)) operator({)
  keyword(var) ident(div) operator(=) keyword(new) ident(Element)operator(()string<delimiter(')content(div)delimiter(')>operator(\))operator(,) ident(t) operator(=) ident(Element)operator(.)ident(_insertionTranslations)operator(.)ident(tags)operator([)ident(tagName)operator(])operator(;)
  keyword(if) operator(()ident(t)operator(\)) operator({)
    ident(div)operator(.)ident(innerHTML) operator(=) ident(t)operator([)integer(0)operator(]) operator(+) ident(html) operator(+) ident(t)operator([)integer(1)operator(])operator(;)
    ident(t)operator([)integer(2)operator(])operator(.)ident(times)operator(()keyword(function)operator(()operator(\)) operator({) ident(div) operator(=) ident(div)operator(.)ident(firstChild) operator(}\))operator(;)
  operator(}) keyword(else) ident(div)operator(.)ident(innerHTML) operator(=) ident(html)operator(;)
  keyword(return) predefined($A)operator(()ident(div)operator(.)ident(childNodes)operator(\))operator(;)
operator(})operator(;)

ident(Element)operator(.)ident(_insertionTranslations) operator(=) operator({)
  function(before)operator(:) keyword(function)operator(()ident(element)operator(,) ident(node)operator(\)) operator({)
    ident(element)operator(.)ident(parentNode)operator(.)ident(insertBefore)operator(()ident(node)operator(,) ident(element)operator(\))operator(;)
  operator(})operator(,)
  function(top)operator(:) keyword(function)operator(()ident(element)operator(,) ident(node)operator(\)) operator({)
    ident(element)operator(.)ident(insertBefore)operator(()ident(node)operator(,) ident(element)operator(.)ident(firstChild)operator(\))operator(;)
  operator(})operator(,)
  function(bottom)operator(:) keyword(function)operator(()ident(element)operator(,) ident(node)operator(\)) operator({)
    ident(element)operator(.)ident(appendChild)operator(()ident(node)operator(\))operator(;)
  operator(})operator(,)
  function(after)operator(:) keyword(function)operator(()ident(element)operator(,) ident(node)operator(\)) operator({)
    ident(element)operator(.)ident(parentNode)operator(.)ident(insertBefore)operator(()ident(node)operator(,) ident(element)operator(.)ident(nextSibling)operator(\))operator(;)
  operator(})operator(,)
  key(tags)operator(:) operator({)
    key(TABLE)operator(:)  operator([)string<delimiter(')content(<table>)delimiter(')>operator(,)                string<delimiter(')content(</table>)delimiter(')>operator(,)                   integer(1)operator(])operator(,)
    key(TBODY)operator(:)  operator([)string<delimiter(')content(<table><tbody>)delimiter(')>operator(,)         string<delimiter(')content(</tbody></table>)delimiter(')>operator(,)           integer(2)operator(])operator(,)
    key(TR)operator(:)     operator([)string<delimiter(')content(<table><tbody><tr>)delimiter(')>operator(,)     string<delimiter(')content(</tr></tbody></table>)delimiter(')>operator(,)      integer(3)operator(])operator(,)
    key(TD)operator(:)     operator([)string<delimiter(')content(<table><tbody><tr><td>)delimiter(')>operator(,) string<delimiter(')content(</td></tr></tbody></table>)delimiter(')>operator(,) integer(4)operator(])operator(,)
    key(SELECT)operator(:) operator([)string<delimiter(')content(<select>)delimiter(')>operator(,)               string<delimiter(')content(</select>)delimiter(')>operator(,)                  integer(1)operator(])
  operator(})
operator(})operator(;)

operator(()keyword(function)operator(()operator(\)) operator({)
  ident(Object)operator(.)ident(extend)operator(()local_variable(this)operator(.)ident(tags)operator(,) operator({)
    key(THEAD)operator(:) local_variable(this)operator(.)ident(tags)operator(.)ident(TBODY)operator(,)
    key(TFOOT)operator(:) local_variable(this)operator(.)ident(tags)operator(.)ident(TBODY)operator(,)
    key(TH)operator(:)    local_variable(this)operator(.)ident(tags)operator(.)ident(TD)
  operator(}\))operator(;)
operator(}\))operator(.)ident(call)operator(()ident(Element)operator(.)ident(_insertionTranslations)operator(\))operator(;)

ident(Element)operator(.)ident(Methods)operator(.)ident(Simulated) operator(=) operator({)
  function(hasAttribute)operator(:) keyword(function)operator(()ident(element)operator(,) ident(attribute)operator(\)) operator({)
    ident(attribute) operator(=) ident(Element)operator(.)ident(_attributeTranslations)operator(.)ident(has)operator([)ident(attribute)operator(]) operator(||) ident(attribute)operator(;)
    keyword(var) ident(node) operator(=) predefined($)operator(()ident(element)operator(\))operator(.)ident(getAttributeNode)operator(()ident(attribute)operator(\))operator(;)
    keyword(return) operator(!!()ident(node) operator(&&) ident(node)operator(.)ident(specified)operator(\))operator(;)
  operator(})
operator(})operator(;)

ident(Element)operator(.)ident(Methods)operator(.)ident(ByTag) operator(=) operator({) operator(})operator(;)

ident(Object)operator(.)ident(extend)operator(()ident(Element)operator(,) ident(Element)operator(.)ident(Methods)operator(\))operator(;)

keyword(if) operator((!)ident(Prototype)operator(.)ident(BrowserFeatures)operator(.)ident(ElementExtensions) operator(&&)
    ident(document)operator(.)ident(createElement)operator(()string<delimiter(')content(div)delimiter(')>operator(\))operator([)string<delimiter(')content(__proto__)delimiter(')>operator(]\)) operator({)
  ident(window)operator(.)ident(HTMLElement) operator(=) operator({) operator(})operator(;)
  ident(window)operator(.)ident(HTMLElement)operator(.)ident(prototype) operator(=) ident(document)operator(.)ident(createElement)operator(()string<delimiter(')content(div)delimiter(')>operator(\))operator([)string<delimiter(')content(__proto__)delimiter(')>operator(])operator(;)
  ident(Prototype)operator(.)ident(BrowserFeatures)operator(.)ident(ElementExtensions) operator(=) predefined_constant(true)operator(;)
operator(})

ident(Element)operator(.)ident(extend) operator(=) operator(()keyword(function)operator(()operator(\)) operator({)
  keyword(if) operator(()ident(Prototype)operator(.)ident(BrowserFeatures)operator(.)ident(SpecificElementExtensions)operator(\))
    keyword(return) ident(Prototype)operator(.)ident(K)operator(;)

  keyword(var) ident(Methods) operator(=) operator({) operator(})operator(,) ident(ByTag) operator(=) ident(Element)operator(.)ident(Methods)operator(.)ident(ByTag)operator(;)

  keyword(var) ident(extend) operator(=) ident(Object)operator(.)ident(extend)operator(()keyword(function)operator(()ident(element)operator(\)) operator({)
    keyword(if) operator((!)ident(element) operator(||) ident(element)operator(.)ident(_extendedByPrototype) operator(||)
        ident(element)operator(.)ident(nodeType) operator(!=) integer(1) operator(||) ident(element) operator(==) ident(window)operator(\)) keyword(return) ident(element)operator(;)

    keyword(var) ident(methods) operator(=) ident(Object)operator(.)ident(clone)operator(()ident(Methods)operator(\))operator(,)
      ident(tagName) operator(=) ident(element)operator(.)ident(tagName)operator(.)ident(toUpperCase)operator(()operator(\))operator(,) ident(property)operator(,) ident(value)operator(;)

    comment(// extend methods for specific tags)
    keyword(if) operator(()ident(ByTag)operator([)ident(tagName)operator(]\)) ident(Object)operator(.)ident(extend)operator(()ident(methods)operator(,) ident(ByTag)operator([)ident(tagName)operator(]\))operator(;)

    keyword(for) operator(()ident(property) keyword(in) ident(methods)operator(\)) operator({)
      ident(value) operator(=) ident(methods)operator([)ident(property)operator(])operator(;)
      keyword(if) operator(()ident(Object)operator(.)ident(isFunction)operator(()ident(value)operator(\)) operator(&&) operator(!()ident(property) keyword(in) ident(element)operator(\)\))
        ident(element)operator([)ident(property)operator(]) operator(=) ident(value)operator(.)ident(methodize)operator(()operator(\))operator(;)
    operator(})

    ident(element)operator(.)ident(_extendedByPrototype) operator(=) ident(Prototype)operator(.)ident(emptyFunction)operator(;)
    keyword(return) ident(element)operator(;)

  operator(})operator(,) operator({)
    function(refresh)operator(:) keyword(function)operator(()operator(\)) operator({)
      comment(// extend methods for all tags (Safari doesn't need this\))
      keyword(if) operator((!)ident(Prototype)operator(.)ident(BrowserFeatures)operator(.)ident(ElementExtensions)operator(\)) operator({)
        ident(Object)operator(.)ident(extend)operator(()ident(Methods)operator(,) ident(Element)operator(.)ident(Methods)operator(\))operator(;)
        ident(Object)operator(.)ident(extend)operator(()ident(Methods)operator(,) ident(Element)operator(.)ident(Methods)operator(.)ident(Simulated)operator(\))operator(;)
      operator(})
    operator(})
  operator(}\))operator(;)

  ident(extend)operator(.)ident(refresh)operator(()operator(\))operator(;)
  keyword(return) ident(extend)operator(;)
operator(}\))operator(()operator(\))operator(;)

ident(Element)operator(.)function(hasAttribute) operator(=) keyword(function)operator(()ident(element)operator(,) ident(attribute)operator(\)) operator({)
  keyword(if) operator(()ident(element)operator(.)ident(hasAttribute)operator(\)) keyword(return) ident(element)operator(.)ident(hasAttribute)operator(()ident(attribute)operator(\))operator(;)
  keyword(return) ident(Element)operator(.)ident(Methods)operator(.)ident(Simulated)operator(.)ident(hasAttribute)operator(()ident(element)operator(,) ident(attribute)operator(\))operator(;)
operator(})operator(;)

ident(Element)operator(.)function(addMethods) operator(=) keyword(function)operator(()ident(methods)operator(\)) operator({)
  keyword(var) ident(F) operator(=) ident(Prototype)operator(.)ident(BrowserFeatures)operator(,) ident(T) operator(=) ident(Element)operator(.)ident(Methods)operator(.)ident(ByTag)operator(;)

  keyword(if) operator((!)ident(methods)operator(\)) operator({)
    ident(Object)operator(.)ident(extend)operator(()ident(Form)operator(,) ident(Form)operator(.)ident(Methods)operator(\))operator(;)
    ident(Object)operator(.)ident(extend)operator(()ident(Form)operator(.)ident(Element)operator(,) ident(Form)operator(.)ident(Element)operator(.)ident(Methods)operator(\))operator(;)
    ident(Object)operator(.)ident(extend)operator(()ident(Element)operator(.)ident(Methods)operator(.)ident(ByTag)operator(,) operator({)
      key<delimiter(")content(FORM)delimiter(")>operator(:)     ident(Object)operator(.)ident(clone)operator(()ident(Form)operator(.)ident(Methods)operator(\))operator(,)
      key<delimiter(")content(INPUT)delimiter(")>operator(:)    ident(Object)operator(.)ident(clone)operator(()ident(Form)operator(.)ident(Element)operator(.)ident(Methods)operator(\))operator(,)
      key<delimiter(")content(SELECT)delimiter(")>operator(:)   ident(Object)operator(.)ident(clone)operator(()ident(Form)operator(.)ident(Element)operator(.)ident(Methods)operator(\))operator(,)
      key<delimiter(")content(TEXTAREA)delimiter(")>operator(:) ident(Object)operator(.)ident(clone)operator(()ident(Form)operator(.)ident(Element)operator(.)ident(Methods)operator(\))
    operator(}\))operator(;)
  operator(})

  keyword(if) operator(()local_variable(arguments)operator(.)ident(length) operator(==) integer(2)operator(\)) operator({)
    keyword(var) ident(tagName) operator(=) ident(methods)operator(;)
    ident(methods) operator(=) local_variable(arguments)operator([)integer(1)operator(])operator(;)
  operator(})

  keyword(if) operator((!)ident(tagName)operator(\)) ident(Object)operator(.)ident(extend)operator(()ident(Element)operator(.)ident(Methods)operator(,) ident(methods) operator(||) operator({) operator(}\))operator(;)
  keyword(else) operator({)
    keyword(if) operator(()ident(Object)operator(.)ident(isArray)operator(()ident(tagName)operator(\)\)) ident(tagName)operator(.)ident(each)operator(()ident(extend)operator(\))operator(;)
    keyword(else) ident(extend)operator(()ident(tagName)operator(\))operator(;)
  operator(})

  keyword(function) function(extend)operator(()ident(tagName)operator(\)) operator({)
    ident(tagName) operator(=) ident(tagName)operator(.)ident(toUpperCase)operator(()operator(\))operator(;)
    keyword(if) operator((!)ident(Element)operator(.)ident(Methods)operator(.)ident(ByTag)operator([)ident(tagName)operator(]\))
      ident(Element)operator(.)ident(Methods)operator(.)ident(ByTag)operator([)ident(tagName)operator(]) operator(=) operator({) operator(})operator(;)
    ident(Object)operator(.)ident(extend)operator(()ident(Element)operator(.)ident(Methods)operator(.)ident(ByTag)operator([)ident(tagName)operator(])operator(,) ident(methods)operator(\))operator(;)
  operator(})

  keyword(function) function(copy)operator(()ident(methods)operator(,) ident(destination)operator(,) ident(onlyIfAbsent)operator(\)) operator({)
    ident(onlyIfAbsent) operator(=) ident(onlyIfAbsent) operator(||) predefined_constant(false)operator(;)
    keyword(for) operator(()keyword(var) ident(property) keyword(in) ident(methods)operator(\)) operator({)
      keyword(var) ident(value) operator(=) ident(methods)operator([)ident(property)operator(])operator(;)
      keyword(if) operator((!)ident(Object)operator(.)ident(isFunction)operator(()ident(value)operator(\)\)) keyword(continue)operator(;)
      keyword(if) operator((!)ident(onlyIfAbsent) operator(||) operator(!()ident(property) keyword(in) ident(destination)operator(\)\))
        ident(destination)operator([)ident(property)operator(]) operator(=) ident(value)operator(.)ident(methodize)operator(()operator(\))operator(;)
    operator(})
  operator(})

  keyword(function) function(findDOMClass)operator(()ident(tagName)operator(\)) operator({)
    keyword(var) ident(klass)operator(;)
    keyword(var) ident(trans) operator(=) operator({)
      key<delimiter(")content(OPTGROUP)delimiter(")>operator(:) string<delimiter(")content(OptGroup)delimiter(")>operator(,) key<delimiter(")content(TEXTAREA)delimiter(")>operator(:) string<delimiter(")content(TextArea)delimiter(")>operator(,) key<delimiter(")content(P)delimiter(")>operator(:) string<delimiter(")content(Paragraph)delimiter(")>operator(,)
      key<delimiter(")content(FIELDSET)delimiter(")>operator(:) string<delimiter(")content(FieldSet)delimiter(")>operator(,) key<delimiter(")content(UL)delimiter(")>operator(:) string<delimiter(")content(UList)delimiter(")>operator(,) key<delimiter(")content(OL)delimiter(")>operator(:) string<delimiter(")content(OList)delimiter(")>operator(,) key<delimiter(")content(DL)delimiter(")>operator(:) string<delimiter(")content(DList)delimiter(")>operator(,)
      key<delimiter(")content(DIR)delimiter(")>operator(:) string<delimiter(")content(Directory)delimiter(")>operator(,) key<delimiter(")content(H1)delimiter(")>operator(:) string<delimiter(")content(Heading)delimiter(")>operator(,) key<delimiter(")content(H2)delimiter(")>operator(:) string<delimiter(")content(Heading)delimiter(")>operator(,) key<delimiter(")content(H3)delimiter(")>operator(:) string<delimiter(")content(Heading)delimiter(")>operator(,)
      key<delimiter(")content(H4)delimiter(")>operator(:) string<delimiter(")content(Heading)delimiter(")>operator(,) key<delimiter(")content(H5)delimiter(")>operator(:) string<delimiter(")content(Heading)delimiter(")>operator(,) key<delimiter(")content(H6)delimiter(")>operator(:) string<delimiter(")content(Heading)delimiter(")>operator(,) key<delimiter(")content(Q)delimiter(")>operator(:) string<delimiter(")content(Quote)delimiter(")>operator(,)
      key<delimiter(")content(INS)delimiter(")>operator(:) string<delimiter(")content(Mod)delimiter(")>operator(,) key<delimiter(")content(DEL)delimiter(")>operator(:) string<delimiter(")content(Mod)delimiter(")>operator(,) key<delimiter(")content(A)delimiter(")>operator(:) string<delimiter(")content(Anchor)delimiter(")>operator(,) key<delimiter(")content(IMG)delimiter(")>operator(:) string<delimiter(")content(Image)delimiter(")>operator(,) key<delimiter(")content(CAPTION)delimiter(")>operator(:)
      string<delimiter(")content(TableCaption)delimiter(")>operator(,) key<delimiter(")content(COL)delimiter(")>operator(:) string<delimiter(")content(TableCol)delimiter(")>operator(,) key<delimiter(")content(COLGROUP)delimiter(")>operator(:) string<delimiter(")content(TableCol)delimiter(")>operator(,) key<delimiter(")content(THEAD)delimiter(")>operator(:)
      string<delimiter(")content(TableSection)delimiter(")>operator(,) key<delimiter(")content(TFOOT)delimiter(")>operator(:) string<delimiter(")content(TableSection)delimiter(")>operator(,) key<delimiter(")content(TBODY)delimiter(")>operator(:) string<delimiter(")content(TableSection)delimiter(")>operator(,) key<delimiter(")content(TR)delimiter(")>operator(:)
      string<delimiter(")content(TableRow)delimiter(")>operator(,) key<delimiter(")content(TH)delimiter(")>operator(:) string<delimiter(")content(TableCell)delimiter(")>operator(,) key<delimiter(")content(TD)delimiter(")>operator(:) string<delimiter(")content(TableCell)delimiter(")>operator(,) key<delimiter(")content(FRAMESET)delimiter(")>operator(:)
      string<delimiter(")content(FrameSet)delimiter(")>operator(,) key<delimiter(")content(IFRAME)delimiter(")>operator(:) string<delimiter(")content(IFrame)delimiter(")>
    operator(})operator(;)
    keyword(if) operator(()ident(trans)operator([)ident(tagName)operator(]\)) ident(klass) operator(=) string<delimiter(')content(HTML)delimiter(')> operator(+) ident(trans)operator([)ident(tagName)operator(]) operator(+) string<delimiter(')content(Element)delimiter(')>operator(;)
    keyword(if) operator(()ident(window)operator([)ident(klass)operator(]\)) keyword(return) ident(window)operator([)ident(klass)operator(])operator(;)
    ident(klass) operator(=) string<delimiter(')content(HTML)delimiter(')> operator(+) ident(tagName) operator(+) string<delimiter(')content(Element)delimiter(')>operator(;)
    keyword(if) operator(()ident(window)operator([)ident(klass)operator(]\)) keyword(return) ident(window)operator([)ident(klass)operator(])operator(;)
    ident(klass) operator(=) string<delimiter(')content(HTML)delimiter(')> operator(+) ident(tagName)operator(.)ident(capitalize)operator(()operator(\)) operator(+) string<delimiter(')content(Element)delimiter(')>operator(;)
    keyword(if) operator(()ident(window)operator([)ident(klass)operator(]\)) keyword(return) ident(window)operator([)ident(klass)operator(])operator(;)

    ident(window)operator([)ident(klass)operator(]) operator(=) operator({) operator(})operator(;)
    ident(window)operator([)ident(klass)operator(])operator(.)ident(prototype) operator(=) ident(document)operator(.)ident(createElement)operator(()ident(tagName)operator(\))operator([)string<delimiter(')content(__proto__)delimiter(')>operator(])operator(;)
    keyword(return) ident(window)operator([)ident(klass)operator(])operator(;)
  operator(})

  keyword(if) operator(()ident(F)operator(.)ident(ElementExtensions)operator(\)) operator({)
    ident(copy)operator(()ident(Element)operator(.)ident(Methods)operator(,) ident(HTMLElement)operator(.)ident(prototype)operator(\))operator(;)
    ident(copy)operator(()ident(Element)operator(.)ident(Methods)operator(.)ident(Simulated)operator(,) ident(HTMLElement)operator(.)ident(prototype)operator(,) predefined_constant(true)operator(\))operator(;)
  operator(})

  keyword(if) operator(()ident(F)operator(.)ident(SpecificElementExtensions)operator(\)) operator({)
    keyword(for) operator(()keyword(var) ident(tag) keyword(in) ident(Element)operator(.)ident(Methods)operator(.)ident(ByTag)operator(\)) operator({)
      keyword(var) ident(klass) operator(=) ident(findDOMClass)operator(()ident(tag)operator(\))operator(;)
      keyword(if) operator(()ident(Object)operator(.)ident(isUndefined)operator(()ident(klass)operator(\)\)) keyword(continue)operator(;)
      ident(copy)operator(()ident(T)operator([)ident(tag)operator(])operator(,) ident(klass)operator(.)ident(prototype)operator(\))operator(;)
    operator(})
  operator(})

  ident(Object)operator(.)ident(extend)operator(()ident(Element)operator(,) ident(Element)operator(.)ident(Methods)operator(\))operator(;)
  keyword(delete) ident(Element)operator(.)ident(ByTag)operator(;)

  keyword(if) operator(()ident(Element)operator(.)ident(extend)operator(.)ident(refresh)operator(\)) ident(Element)operator(.)ident(extend)operator(.)ident(refresh)operator(()operator(\))operator(;)
  ident(Element)operator(.)ident(cache) operator(=) operator({) operator(})operator(;)
operator(})operator(;)

ident(document)operator(.)ident(viewport) operator(=) operator({)
  function(getDimensions)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(var) ident(dimensions) operator(=) operator({) operator(})operator(,) ident(B) operator(=) ident(Prototype)operator(.)ident(Browser)operator(;)
    predefined($w)operator(()string<delimiter(')content(width height)delimiter(')>operator(\))operator(.)ident(each)operator(()keyword(function)operator(()ident(d)operator(\)) operator({)
      keyword(var) ident(D) operator(=) ident(d)operator(.)ident(capitalize)operator(()operator(\))operator(;)
      keyword(if) operator(()ident(B)operator(.)ident(WebKit) operator(&&) operator(!)ident(document)operator(.)ident(evaluate)operator(\)) operator({)
        comment(// Safari <3.0 needs self.innerWidth/Height)
        ident(dimensions)operator([)ident(d)operator(]) operator(=) ident(self)operator([)string<delimiter(')content(inner)delimiter(')> operator(+) ident(D)operator(])operator(;)
      operator(}) keyword(else) keyword(if) operator(()ident(B)operator(.)ident(Opera) operator(&&) ident(parseFloat)operator(()ident(window)operator(.)ident(opera)operator(.)ident(version)operator(()operator(\)\)) operator(<) float(9.5)operator(\)) operator({)
        comment(// Opera <9.5 needs document.body.clientWidth/Height)
        ident(dimensions)operator([)ident(d)operator(]) operator(=) ident(document)operator(.)ident(body)operator([)string<delimiter(')content(client)delimiter(')> operator(+) ident(D)operator(])
      operator(}) keyword(else) operator({)
        ident(dimensions)operator([)ident(d)operator(]) operator(=) ident(document)operator(.)ident(documentElement)operator([)string<delimiter(')content(client)delimiter(')> operator(+) ident(D)operator(])operator(;)
      operator(})
    operator(}\))operator(;)
    keyword(return) ident(dimensions)operator(;)
  operator(})operator(,)

  function(getWidth)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(return) local_variable(this)operator(.)ident(getDimensions)operator(()operator(\))operator(.)ident(width)operator(;)
  operator(})operator(,)

  function(getHeight)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(return) local_variable(this)operator(.)ident(getDimensions)operator(()operator(\))operator(.)ident(height)operator(;)
  operator(})operator(,)

  function(getScrollOffsets)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(return) ident(Element)operator(.)ident(_returnOffset)operator(()
      ident(window)operator(.)ident(pageXOffset) operator(||) ident(document)operator(.)ident(documentElement)operator(.)ident(scrollLeft) operator(||) ident(document)operator(.)ident(body)operator(.)ident(scrollLeft)operator(,)
      ident(window)operator(.)ident(pageYOffset) operator(||) ident(document)operator(.)ident(documentElement)operator(.)ident(scrollTop) operator(||) ident(document)operator(.)ident(body)operator(.)ident(scrollTop)operator(\))operator(;)
  operator(})
operator(})operator(;)
comment(/* Portions of the Selector class are derived from Jack Slocum's DomQuery,
 * part of YUI-Ext version 0.40, distributed under the terms of an MIT-style
 * license.  Please see http://www.yui-ext.com/ for more information. */)

keyword(var) ident(Selector) operator(=) ident(Class)operator(.)ident(create)operator(({)
  function(initialize)operator(:) keyword(function)operator(()ident(expression)operator(\)) operator({)
    local_variable(this)operator(.)ident(expression) operator(=) ident(expression)operator(.)ident(strip)operator(()operator(\))operator(;)

    keyword(if) operator(()local_variable(this)operator(.)ident(shouldUseSelectorsAPI)operator(()operator(\)\)) operator({)
      local_variable(this)operator(.)ident(mode) operator(=) string<delimiter(')content(selectorsAPI)delimiter(')>operator(;)
    operator(}) keyword(else) keyword(if) operator(()local_variable(this)operator(.)ident(shouldUseXPath)operator(()operator(\)\)) operator({)
      local_variable(this)operator(.)ident(mode) operator(=) string<delimiter(')content(xpath)delimiter(')>operator(;)
      local_variable(this)operator(.)ident(compileXPathMatcher)operator(()operator(\))operator(;)
    operator(}) keyword(else) operator({)
      local_variable(this)operator(.)ident(mode) operator(=) string<delimiter(")content(normal)delimiter(")>operator(;)
      local_variable(this)operator(.)ident(compileMatcher)operator(()operator(\))operator(;)
    operator(})

  operator(})operator(,)

  function(shouldUseXPath)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(if) operator((!)ident(Prototype)operator(.)ident(BrowserFeatures)operator(.)ident(XPath)operator(\)) keyword(return) predefined_constant(false)operator(;)

    keyword(var) ident(e) operator(=) local_variable(this)operator(.)ident(expression)operator(;)

    comment(// Safari 3 chokes on :*-of-type and :empty)
    keyword(if) operator(()ident(Prototype)operator(.)ident(Browser)operator(.)ident(WebKit) operator(&&)
     operator(()ident(e)operator(.)ident(include)operator(()string<delimiter(")content(-of-type)delimiter(")>operator(\)) operator(||) ident(e)operator(.)ident(include)operator(()string<delimiter(")content(:empty)delimiter(")>operator(\)\)\))
      keyword(return) predefined_constant(false)operator(;)

    comment(// XPath can't do namespaced attributes, nor can it read)
    comment(// the "checked" property from DOM nodes)
    keyword(if) operator((()regexp<delimiter(/)content(()content(\\[)content([)char(\\w)content(-]*?:|:checked\))delimiter(/)>operator(\))operator(.)ident(test)operator(()ident(e)operator(\)\))
      keyword(return) predefined_constant(false)operator(;)

    keyword(return) predefined_constant(true)operator(;)
  operator(})operator(,)

  function(shouldUseSelectorsAPI)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(if) operator((!)ident(Prototype)operator(.)ident(BrowserFeatures)operator(.)ident(SelectorsAPI)operator(\)) keyword(return) predefined_constant(false)operator(;)

    keyword(if) operator((!)ident(Selector)operator(.)ident(_div)operator(\)) ident(Selector)operator(.)ident(_div) operator(=) keyword(new) ident(Element)operator(()string<delimiter(')content(div)delimiter(')>operator(\))operator(;)

    comment(// Make sure the browser treats the selector as valid. Test on an)
    comment(// isolated element to minimize cost of this check.)
    keyword(try) operator({)
      ident(Selector)operator(.)ident(_div)operator(.)ident(querySelector)operator(()local_variable(this)operator(.)ident(expression)operator(\))operator(;)
    operator(}) keyword(catch)operator(()ident(e)operator(\)) operator({)
      keyword(return) predefined_constant(false)operator(;)
    operator(})

    keyword(return) predefined_constant(true)operator(;)
  operator(})operator(,)

  function(compileMatcher)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(var) ident(e) operator(=) local_variable(this)operator(.)ident(expression)operator(,) ident(ps) operator(=) ident(Selector)operator(.)ident(patterns)operator(,) ident(h) operator(=) ident(Selector)operator(.)ident(handlers)operator(,)
        ident(c) operator(=) ident(Selector)operator(.)ident(criteria)operator(,) ident(le)operator(,) ident(p)operator(,) ident(m)operator(;)

    keyword(if) operator(()ident(Selector)operator(.)ident(_cache)operator([)ident(e)operator(]\)) operator({)
      local_variable(this)operator(.)ident(matcher) operator(=) ident(Selector)operator(.)ident(_cache)operator([)ident(e)operator(])operator(;)
      keyword(return)operator(;)
    operator(})

    local_variable(this)operator(.)ident(matcher) operator(=) operator([)string<delimiter(")content(this.matcher = function(root\) {)delimiter(")>operator(,)
                    string<delimiter(")content(var r = root, h = Selector.handlers, c = false, n;)delimiter(")>operator(])operator(;)

    keyword(while) operator(()ident(e) operator(&&) ident(le) operator(!=) ident(e) operator(&&) operator(()regexp<delimiter(/)char(\\S)delimiter(/)>operator(\))operator(.)ident(test)operator(()ident(e)operator(\)\)) operator({)
      ident(le) operator(=) ident(e)operator(;)
      keyword(for) operator(()keyword(var) ident(i) keyword(in) ident(ps)operator(\)) operator({)
        ident(p) operator(=) ident(ps)operator([)ident(i)operator(])operator(;)
        keyword(if) operator(()ident(m) operator(=) ident(e)operator(.)ident(match)operator(()ident(p)operator(\)\)) operator({)
          local_variable(this)operator(.)ident(matcher)operator(.)ident(push)operator(()ident(Object)operator(.)ident(isFunction)operator(()ident(c)operator([)ident(i)operator(]\)) operator(?) ident(c)operator([)ident(i)operator(])operator(()ident(m)operator(\)) operator(:)
            keyword(new) ident(Template)operator(()ident(c)operator([)ident(i)operator(]\))operator(.)ident(evaluate)operator(()ident(m)operator(\)\))operator(;)
          ident(e) operator(=) ident(e)operator(.)ident(replace)operator(()ident(m)operator([)integer(0)operator(])operator(,) string<delimiter(')delimiter(')>operator(\))operator(;)
          keyword(break)operator(;)
        operator(})
      operator(})
    operator(})

    local_variable(this)operator(.)ident(matcher)operator(.)ident(push)operator(()string<delimiter(")content(return h.unique(n\);)char(\\n)content(})delimiter(")>operator(\))operator(;)
    ident(eval)operator(()local_variable(this)operator(.)ident(matcher)operator(.)ident(join)operator(()string<delimiter(')content(\\n)delimiter(')>operator(\)\))operator(;)
    ident(Selector)operator(.)ident(_cache)operator([)local_variable(this)operator(.)ident(expression)operator(]) operator(=) local_variable(this)operator(.)ident(matcher)operator(;)
  operator(})operator(,)

  function(compileXPathMatcher)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(var) ident(e) operator(=) local_variable(this)operator(.)ident(expression)operator(,) ident(ps) operator(=) ident(Selector)operator(.)ident(patterns)operator(,)
        ident(x) operator(=) ident(Selector)operator(.)ident(xpath)operator(,) ident(le)operator(,) ident(m)operator(;)

    keyword(if) operator(()ident(Selector)operator(.)ident(_cache)operator([)ident(e)operator(]\)) operator({)
      local_variable(this)operator(.)ident(xpath) operator(=) ident(Selector)operator(.)ident(_cache)operator([)ident(e)operator(])operator(;) keyword(return)operator(;)
    operator(})

    local_variable(this)operator(.)ident(matcher) operator(=) operator([)string<delimiter(')content(.//*)delimiter(')>operator(])operator(;)
    keyword(while) operator(()ident(e) operator(&&) ident(le) operator(!=) ident(e) operator(&&) operator(()regexp<delimiter(/)char(\\S)delimiter(/)>operator(\))operator(.)ident(test)operator(()ident(e)operator(\)\)) operator({)
      ident(le) operator(=) ident(e)operator(;)
      keyword(for) operator(()keyword(var) ident(i) keyword(in) ident(ps)operator(\)) operator({)
        keyword(if) operator(()ident(m) operator(=) ident(e)operator(.)ident(match)operator(()ident(ps)operator([)ident(i)operator(]\)\)) operator({)
          local_variable(this)operator(.)ident(matcher)operator(.)ident(push)operator(()ident(Object)operator(.)ident(isFunction)operator(()ident(x)operator([)ident(i)operator(]\)) operator(?) ident(x)operator([)ident(i)operator(])operator(()ident(m)operator(\)) operator(:)
            keyword(new) ident(Template)operator(()ident(x)operator([)ident(i)operator(]\))operator(.)ident(evaluate)operator(()ident(m)operator(\)\))operator(;)
          ident(e) operator(=) ident(e)operator(.)ident(replace)operator(()ident(m)operator([)integer(0)operator(])operator(,) string<delimiter(')delimiter(')>operator(\))operator(;)
          keyword(break)operator(;)
        operator(})
      operator(})
    operator(})

    local_variable(this)operator(.)ident(xpath) operator(=) local_variable(this)operator(.)ident(matcher)operator(.)ident(join)operator(()string<delimiter(')delimiter(')>operator(\))operator(;)
    ident(Selector)operator(.)ident(_cache)operator([)local_variable(this)operator(.)ident(expression)operator(]) operator(=) local_variable(this)operator(.)ident(xpath)operator(;)
  operator(})operator(,)

  function(findElements)operator(:) keyword(function)operator(()ident(root)operator(\)) operator({)
    ident(root) operator(=) ident(root) operator(||) ident(document)operator(;)
    keyword(var) ident(e) operator(=) local_variable(this)operator(.)ident(expression)operator(,) ident(results)operator(;)

    keyword(switch) operator(()local_variable(this)operator(.)ident(mode)operator(\)) operator({)
      keyword(case) string<delimiter(')content(selectorsAPI)delimiter(')>operator(:)
        comment(// querySelectorAll queries document-wide, then filters to descendants)
        comment(// of the context element. That's not what we want.)
        comment(// Add an explicit context to the selector if necessary.)
        keyword(if) operator(()ident(root) operator(!==) ident(document)operator(\)) operator({)
          keyword(var) ident(oldId) operator(=) ident(root)operator(.)ident(id)operator(,) ident(id) operator(=) predefined($)operator(()ident(root)operator(\))operator(.)ident(identify)operator(()operator(\))operator(;)
          ident(e) operator(=) string<delimiter(")content(#)delimiter(")> operator(+) ident(id) operator(+) string<delimiter(")content( )delimiter(")> operator(+) ident(e)operator(;)
        operator(})

        ident(results) operator(=) predefined($A)operator(()ident(root)operator(.)ident(querySelectorAll)operator(()ident(e)operator(\)\))operator(.)ident(map)operator(()ident(Element)operator(.)ident(extend)operator(\))operator(;)
        ident(root)operator(.)ident(id) operator(=) ident(oldId)operator(;)

        keyword(return) ident(results)operator(;)
      keyword(case) string<delimiter(')content(xpath)delimiter(')>operator(:)
        keyword(return) ident(document)operator(.)ident(_getElementsByXPath)operator(()local_variable(this)operator(.)ident(xpath)operator(,) ident(root)operator(\))operator(;)
      keyword(default)operator(:)
       keyword(return) local_variable(this)operator(.)ident(matcher)operator(()ident(root)operator(\))operator(;)
    operator(})
  operator(})operator(,)

  function(match)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    local_variable(this)operator(.)ident(tokens) operator(=) operator([)operator(])operator(;)

    keyword(var) ident(e) operator(=) local_variable(this)operator(.)ident(expression)operator(,) ident(ps) operator(=) ident(Selector)operator(.)ident(patterns)operator(,) ident(as) operator(=) ident(Selector)operator(.)ident(assertions)operator(;)
    keyword(var) ident(le)operator(,) ident(p)operator(,) ident(m)operator(;)

    keyword(while) operator(()ident(e) operator(&&) ident(le) operator(!==) ident(e) operator(&&) operator(()regexp<delimiter(/)char(\\S)delimiter(/)>operator(\))operator(.)ident(test)operator(()ident(e)operator(\)\)) operator({)
      ident(le) operator(=) ident(e)operator(;)
      keyword(for) operator(()keyword(var) ident(i) keyword(in) ident(ps)operator(\)) operator({)
        ident(p) operator(=) ident(ps)operator([)ident(i)operator(])operator(;)
        keyword(if) operator(()ident(m) operator(=) ident(e)operator(.)ident(match)operator(()ident(p)operator(\)\)) operator({)
          comment(// use the Selector.assertions methods unless the selector)
          comment(// is too complex.)
          keyword(if) operator(()ident(as)operator([)ident(i)operator(]\)) operator({)
            local_variable(this)operator(.)ident(tokens)operator(.)ident(push)operator(([)ident(i)operator(,) ident(Object)operator(.)ident(clone)operator(()ident(m)operator(\)]\))operator(;)
            ident(e) operator(=) ident(e)operator(.)ident(replace)operator(()ident(m)operator([)integer(0)operator(])operator(,) string<delimiter(')delimiter(')>operator(\))operator(;)
          operator(}) keyword(else) operator({)
            comment(// reluctantly do a document-wide search)
            comment(// and look for a match in the array)
            keyword(return) local_variable(this)operator(.)ident(findElements)operator(()ident(document)operator(\))operator(.)ident(include)operator(()ident(element)operator(\))operator(;)
          operator(})
        operator(})
      operator(})
    operator(})

    keyword(var) ident(match) operator(=) predefined_constant(true)operator(,) ident(name)operator(,) ident(matches)operator(;)
    keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(,) ident(token)operator(;) ident(token) operator(=) local_variable(this)operator(.)ident(tokens)operator([)ident(i)operator(])operator(;) ident(i)operator(++)operator(\)) operator({)
      ident(name) operator(=) ident(token)operator([)integer(0)operator(])operator(,) ident(matches) operator(=) ident(token)operator([)integer(1)operator(])operator(;)
      keyword(if) operator((!)ident(Selector)operator(.)ident(assertions)operator([)ident(name)operator(])operator(()ident(element)operator(,) ident(matches)operator(\)\)) operator({)
        ident(match) operator(=) predefined_constant(false)operator(;) keyword(break)operator(;)
      operator(})
    operator(})

    keyword(return) ident(match)operator(;)
  operator(})operator(,)

  function(toString)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(return) local_variable(this)operator(.)ident(expression)operator(;)
  operator(})operator(,)

  function(inspect)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(return) string<delimiter(")content(#<Selector:)delimiter(")> operator(+) local_variable(this)operator(.)ident(expression)operator(.)ident(inspect)operator(()operator(\)) operator(+) string<delimiter(")content(>)delimiter(")>operator(;)
  operator(})
operator(}\))operator(;)

ident(Object)operator(.)ident(extend)operator(()ident(Selector)operator(,) operator({)
  key(_cache)operator(:) operator({) operator(})operator(,)

  key(xpath)operator(:) operator({)
    key(descendant)operator(:)   string<delimiter(")content(//*)delimiter(")>operator(,)
    key(child)operator(:)        string<delimiter(")content(/*)delimiter(")>operator(,)
    key(adjacent)operator(:)     string<delimiter(")content(/following-sibling::*[1])delimiter(")>operator(,)
    key(laterSibling)operator(:) string<delimiter(')content(/following-sibling::*)delimiter(')>operator(,)
    function(tagName)operator(:)      keyword(function)operator(()ident(m)operator(\)) operator({)
      keyword(if) operator(()ident(m)operator([)integer(1)operator(]) operator(==) string<delimiter(')content(*)delimiter(')>operator(\)) keyword(return) string<delimiter(')delimiter(')>operator(;)
      keyword(return) string<delimiter(")content([local-name(\)=')delimiter(")> operator(+) ident(m)operator([)integer(1)operator(])operator(.)ident(toLowerCase)operator(()operator(\)) operator(+)
             string<delimiter(")content(' or local-name(\)=')delimiter(")> operator(+) ident(m)operator([)integer(1)operator(])operator(.)ident(toUpperCase)operator(()operator(\)) operator(+) string<delimiter(")content('])delimiter(")>operator(;)
    operator(})operator(,)
    key(className)operator(:)    string<delimiter(")content([contains(concat(' ', @class, ' '\), ' #{1} '\)])delimiter(")>operator(,)
    key(id)operator(:)           string<delimiter(")content([@id='#{1}'])delimiter(")>operator(,)
    function(attrPresence)operator(:) keyword(function)operator(()ident(m)operator(\)) operator({)
      ident(m)operator([)integer(1)operator(]) operator(=) ident(m)operator([)integer(1)operator(])operator(.)ident(toLowerCase)operator(()operator(\))operator(;)
      keyword(return) keyword(new) ident(Template)operator(()string<delimiter(")content([@#{1}])delimiter(")>operator(\))operator(.)ident(evaluate)operator(()ident(m)operator(\))operator(;)
    operator(})operator(,)
    function(attr)operator(:) keyword(function)operator(()ident(m)operator(\)) operator({)
      ident(m)operator([)integer(1)operator(]) operator(=) ident(m)operator([)integer(1)operator(])operator(.)ident(toLowerCase)operator(()operator(\))operator(;)
      ident(m)operator([)integer(3)operator(]) operator(=) ident(m)operator([)integer(5)operator(]) operator(||) ident(m)operator([)integer(6)operator(])operator(;)
      keyword(return) keyword(new) ident(Template)operator(()ident(Selector)operator(.)ident(xpath)operator(.)ident(operators)operator([)ident(m)operator([)integer(2)operator(]]\))operator(.)ident(evaluate)operator(()ident(m)operator(\))operator(;)
    operator(})operator(,)
    function(pseudo)operator(:) keyword(function)operator(()ident(m)operator(\)) operator({)
      keyword(var) ident(h) operator(=) ident(Selector)operator(.)ident(xpath)operator(.)ident(pseudos)operator([)ident(m)operator([)integer(1)operator(]])operator(;)
      keyword(if) operator((!)ident(h)operator(\)) keyword(return) string<delimiter(')delimiter(')>operator(;)
      keyword(if) operator(()ident(Object)operator(.)ident(isFunction)operator(()ident(h)operator(\)\)) keyword(return) ident(h)operator(()ident(m)operator(\))operator(;)
      keyword(return) keyword(new) ident(Template)operator(()ident(Selector)operator(.)ident(xpath)operator(.)ident(pseudos)operator([)ident(m)operator([)integer(1)operator(]]\))operator(.)ident(evaluate)operator(()ident(m)operator(\))operator(;)
    operator(})operator(,)
    key(operators)operator(:) operator({)
      key<delimiter(')content(=)delimiter(')>operator(:)  string<delimiter(")content([@#{1}='#{3}'])delimiter(")>operator(,)
      key<delimiter(')content(!=)delimiter(')>operator(:) string<delimiter(")content([@#{1}!='#{3}'])delimiter(")>operator(,)
      key<delimiter(')content(^=)delimiter(')>operator(:) string<delimiter(")content([starts-with(@#{1}, '#{3}'\)])delimiter(")>operator(,)
      key<delimiter(')content($=)delimiter(')>operator(:) string<delimiter(")content([substring(@#{1}, (string-length(@#{1}\) - string-length('#{3}'\) + 1\)\)='#{3}'])delimiter(")>operator(,)
      key<delimiter(')content(*=)delimiter(')>operator(:) string<delimiter(")content([contains(@#{1}, '#{3}'\)])delimiter(")>operator(,)
      key<delimiter(')content(~=)delimiter(')>operator(:) string<delimiter(")content([contains(concat(' ', @#{1}, ' '\), ' #{3} '\)])delimiter(")>operator(,)
      key<delimiter(')content(|=)delimiter(')>operator(:) string<delimiter(")content([contains(concat('-', @#{1}, '-'\), '-#{3}-'\)])delimiter(")>
    operator(})operator(,)
    key(pseudos)operator(:) operator({)
      key<delimiter(')content(first-child)delimiter(')>operator(:) string<delimiter(')content([not(preceding-sibling::*\)])delimiter(')>operator(,)
      key<delimiter(')content(last-child)delimiter(')>operator(:)  string<delimiter(')content([not(following-sibling::*\)])delimiter(')>operator(,)
      key<delimiter(')content(only-child)delimiter(')>operator(:)  string<delimiter(')content([not(preceding-sibling::* or following-sibling::*\)])delimiter(')>operator(,)
      key<delimiter(')content(empty)delimiter(')>operator(:)       string<delimiter(")content([count(*\) = 0 and (count(text(\)\) = 0\)])delimiter(")>operator(,)
      key<delimiter(')content(checked)delimiter(')>operator(:)     string<delimiter(")content([@checked])delimiter(")>operator(,)
      key<delimiter(')content(disabled)delimiter(')>operator(:)    string<delimiter(")content([(@disabled\) and (@type!='hidden'\)])delimiter(")>operator(,)
      key<delimiter(')content(enabled)delimiter(')>operator(:)     string<delimiter(")content([not(@disabled\) and (@type!='hidden'\)])delimiter(")>operator(,)
      key<delimiter(')content(not)delimiter(')>operator(:) keyword(function)operator(()ident(m)operator(\)) operator({)
        keyword(var) ident(e) operator(=) ident(m)operator([)integer(6)operator(])operator(,) ident(p) operator(=) ident(Selector)operator(.)ident(patterns)operator(,)
            ident(x) operator(=) ident(Selector)operator(.)ident(xpath)operator(,) ident(le)operator(,) ident(v)operator(;)

        keyword(var) ident(exclusion) operator(=) operator([)operator(])operator(;)
        keyword(while) operator(()ident(e) operator(&&) ident(le) operator(!=) ident(e) operator(&&) operator(()regexp<delimiter(/)char(\\S)delimiter(/)>operator(\))operator(.)ident(test)operator(()ident(e)operator(\)\)) operator({)
          ident(le) operator(=) ident(e)operator(;)
          keyword(for) operator(()keyword(var) ident(i) keyword(in) ident(p)operator(\)) operator({)
            keyword(if) operator(()ident(m) operator(=) ident(e)operator(.)ident(match)operator(()ident(p)operator([)ident(i)operator(]\)\)) operator({)
              ident(v) operator(=) ident(Object)operator(.)ident(isFunction)operator(()ident(x)operator([)ident(i)operator(]\)) operator(?) ident(x)operator([)ident(i)operator(])operator(()ident(m)operator(\)) operator(:) keyword(new) ident(Template)operator(()ident(x)operator([)ident(i)operator(]\))operator(.)ident(evaluate)operator(()ident(m)operator(\))operator(;)
              ident(exclusion)operator(.)ident(push)operator(()string<delimiter(")content(()delimiter(")> operator(+) ident(v)operator(.)ident(substring)operator(()integer(1)operator(,) ident(v)operator(.)ident(length) operator(-) integer(1)operator(\)) operator(+) string<delimiter(")content(\))delimiter(")>operator(\))operator(;)
              ident(e) operator(=) ident(e)operator(.)ident(replace)operator(()ident(m)operator([)integer(0)operator(])operator(,) string<delimiter(')delimiter(')>operator(\))operator(;)
              keyword(break)operator(;)
            operator(})
          operator(})
        operator(})
        keyword(return) string<delimiter(")content([not()delimiter(")> operator(+) ident(exclusion)operator(.)ident(join)operator(()string<delimiter(")content( and )delimiter(")>operator(\)) operator(+) string<delimiter(")content(\)])delimiter(")>operator(;)
      operator(})operator(,)
      key<delimiter(')content(nth-child)delimiter(')>operator(:)      keyword(function)operator(()ident(m)operator(\)) operator({)
        keyword(return) ident(Selector)operator(.)ident(xpath)operator(.)ident(pseudos)operator(.)ident(nth)operator(()string<delimiter(")content((count(./preceding-sibling::*\) + 1\) )delimiter(")>operator(,) ident(m)operator(\))operator(;)
      operator(})operator(,)
      key<delimiter(')content(nth-last-child)delimiter(')>operator(:) keyword(function)operator(()ident(m)operator(\)) operator({)
        keyword(return) ident(Selector)operator(.)ident(xpath)operator(.)ident(pseudos)operator(.)ident(nth)operator(()string<delimiter(")content((count(./following-sibling::*\) + 1\) )delimiter(")>operator(,) ident(m)operator(\))operator(;)
      operator(})operator(,)
      key<delimiter(')content(nth-of-type)delimiter(')>operator(:)    keyword(function)operator(()ident(m)operator(\)) operator({)
        keyword(return) ident(Selector)operator(.)ident(xpath)operator(.)ident(pseudos)operator(.)ident(nth)operator(()string<delimiter(")content(position(\) )delimiter(")>operator(,) ident(m)operator(\))operator(;)
      operator(})operator(,)
      key<delimiter(')content(nth-last-of-type)delimiter(')>operator(:) keyword(function)operator(()ident(m)operator(\)) operator({)
        keyword(return) ident(Selector)operator(.)ident(xpath)operator(.)ident(pseudos)operator(.)ident(nth)operator(()string<delimiter(")content((last(\) + 1 - position(\)\) )delimiter(")>operator(,) ident(m)operator(\))operator(;)
      operator(})operator(,)
      key<delimiter(')content(first-of-type)delimiter(')>operator(:)  keyword(function)operator(()ident(m)operator(\)) operator({)
        ident(m)operator([)integer(6)operator(]) operator(=) string<delimiter(")content(1)delimiter(")>operator(;) keyword(return) ident(Selector)operator(.)ident(xpath)operator(.)ident(pseudos)operator([)string<delimiter(')content(nth-of-type)delimiter(')>operator(])operator(()ident(m)operator(\))operator(;)
      operator(})operator(,)
      key<delimiter(')content(last-of-type)delimiter(')>operator(:)   keyword(function)operator(()ident(m)operator(\)) operator({)
        ident(m)operator([)integer(6)operator(]) operator(=) string<delimiter(")content(1)delimiter(")>operator(;) keyword(return) ident(Selector)operator(.)ident(xpath)operator(.)ident(pseudos)operator([)string<delimiter(')content(nth-last-of-type)delimiter(')>operator(])operator(()ident(m)operator(\))operator(;)
      operator(})operator(,)
      key<delimiter(')content(only-of-type)delimiter(')>operator(:)   keyword(function)operator(()ident(m)operator(\)) operator({)
        keyword(var) ident(p) operator(=) ident(Selector)operator(.)ident(xpath)operator(.)ident(pseudos)operator(;) keyword(return) ident(p)operator([)string<delimiter(')content(first-of-type)delimiter(')>operator(])operator(()ident(m)operator(\)) operator(+) ident(p)operator([)string<delimiter(')content(last-of-type)delimiter(')>operator(])operator(()ident(m)operator(\))operator(;)
      operator(})operator(,)
      function(nth)operator(:) keyword(function)operator(()ident(fragment)operator(,) ident(m)operator(\)) operator({)
        keyword(var) ident(mm)operator(,) ident(formula) operator(=) ident(m)operator([)integer(6)operator(])operator(,) ident(predicate)operator(;)
        keyword(if) operator(()ident(formula) operator(==) string<delimiter(')content(even)delimiter(')>operator(\)) ident(formula) operator(=) string<delimiter(')content(2n+0)delimiter(')>operator(;)
        keyword(if) operator(()ident(formula) operator(==) string<delimiter(')content(odd)delimiter(')>operator(\))  ident(formula) operator(=) string<delimiter(')content(2n+1)delimiter(')>operator(;)
        keyword(if) operator(()ident(mm) operator(=) ident(formula)operator(.)ident(match)operator(()regexp<delimiter(/)content(^()char(\\d)content(+\)$)delimiter(/)>operator(\)\)) comment(// digit only)
          keyword(return) string<delimiter(')content([)delimiter(')> operator(+) ident(fragment) operator(+) string<delimiter(")content(= )delimiter(")> operator(+) ident(mm)operator([)integer(1)operator(]) operator(+) string<delimiter(')content(])delimiter(')>operator(;)
        keyword(if) operator(()ident(mm) operator(=) ident(formula)operator(.)ident(match)operator(()regexp<delimiter(/)content(^(-?)char(\\d)content(*\)?n(([+-]\)()char(\\d)content(+\)\)?)delimiter(/)>operator(\)\)) operator({) comment(// an+b)
          keyword(if) operator(()ident(mm)operator([)integer(1)operator(]) operator(==) string<delimiter(")content(-)delimiter(")>operator(\)) ident(mm)operator([)integer(1)operator(]) operator(=) operator(-)integer(1)operator(;)
          keyword(var) ident(a) operator(=) ident(mm)operator([)integer(1)operator(]) operator(?) ident(Number)operator(()ident(mm)operator([)integer(1)operator(]\)) operator(:) integer(1)operator(;)
          keyword(var) ident(b) operator(=) ident(mm)operator([)integer(2)operator(]) operator(?) ident(Number)operator(()ident(mm)operator([)integer(2)operator(]\)) operator(:) integer(0)operator(;)
          ident(predicate) operator(=) string<delimiter(")content([((#{fragment} - #{b}\) mod #{a} = 0\) and )delimiter(")> operator(+)
          string<delimiter(")content(((#{fragment} - #{b}\) div #{a} >= 0\)])delimiter(")>operator(;)
          keyword(return) keyword(new) ident(Template)operator(()ident(predicate)operator(\))operator(.)ident(evaluate)operator(({)
            key(fragment)operator(:) ident(fragment)operator(,) key(a)operator(:) ident(a)operator(,) key(b)operator(:) ident(b) operator(}\))operator(;)
        operator(})
      operator(})
    operator(})
  operator(})operator(,)

  key(criteria)operator(:) operator({)
    key(tagName)operator(:)      string<delimiter(')content(n = h.tagName(n, r, "#{1}", c\);      c = false;)delimiter(')>operator(,)
    key(className)operator(:)    string<delimiter(')content(n = h.className(n, r, "#{1}", c\);    c = false;)delimiter(')>operator(,)
    key(id)operator(:)           string<delimiter(')content(n = h.id(n, r, "#{1}", c\);           c = false;)delimiter(')>operator(,)
    key(attrPresence)operator(:) string<delimiter(')content(n = h.attrPresence(n, r, "#{1}", c\); c = false;)delimiter(')>operator(,)
    function(attr)operator(:) keyword(function)operator(()ident(m)operator(\)) operator({)
      ident(m)operator([)integer(3)operator(]) operator(=) operator(()ident(m)operator([)integer(5)operator(]) operator(||) ident(m)operator([)integer(6)operator(]\))operator(;)
      keyword(return) keyword(new) ident(Template)operator(()string<delimiter(')content(n = h.attr(n, r, "#{1}", "#{3}", "#{2}", c\); c = false;)delimiter(')>operator(\))operator(.)ident(evaluate)operator(()ident(m)operator(\))operator(;)
    operator(})operator(,)
    function(pseudo)operator(:) keyword(function)operator(()ident(m)operator(\)) operator({)
      keyword(if) operator(()ident(m)operator([)integer(6)operator(]\)) ident(m)operator([)integer(6)operator(]) operator(=) ident(m)operator([)integer(6)operator(])operator(.)ident(replace)operator(()regexp<delimiter(/)content(")delimiter(/)modifier(g)>operator(,) string<delimiter(')char(\\\\)content(")delimiter(')>operator(\))operator(;)
      keyword(return) keyword(new) ident(Template)operator(()string<delimiter(')content(n = h.pseudo(n, "#{1}", "#{6}", r, c\); c = false;)delimiter(')>operator(\))operator(.)ident(evaluate)operator(()ident(m)operator(\))operator(;)
    operator(})operator(,)
    key(descendant)operator(:)   string<delimiter(')content(c = "descendant";)delimiter(')>operator(,)
    key(child)operator(:)        string<delimiter(')content(c = "child";)delimiter(')>operator(,)
    key(adjacent)operator(:)     string<delimiter(')content(c = "adjacent";)delimiter(')>operator(,)
    key(laterSibling)operator(:) string<delimiter(')content(c = "laterSibling";)delimiter(')>
  operator(})operator(,)

  key(patterns)operator(:) operator({)
    comment(// combinators must be listed first)
    comment(// (and descendant needs to be last combinator\))
    key(laterSibling)operator(:) regexp<delimiter(/)content(^)char(\\s)content(*~)char(\\s)content(*)delimiter(/)>operator(,)
    key(child)operator(:)        regexp<delimiter(/)content(^)char(\\s)content(*>)char(\\s)content(*)delimiter(/)>operator(,)
    key(adjacent)operator(:)     regexp<delimiter(/)content(^)char(\\s)content(*)content(\\+)char(\\s)content(*)delimiter(/)>operator(,)
    key(descendant)operator(:)   regexp<delimiter(/)content(^)char(\\s)delimiter(/)>operator(,)

    comment(// selectors follow)
    key(tagName)operator(:)      regexp<delimiter(/)content(^)char(\\s)content(*()content(\\*)content(|[)char(\\w)content(\\-)content(]+\)()char(\\b)content(|$\)?)delimiter(/)>operator(,)
    key(id)operator(:)           regexp<delimiter(/)content(^#([)char(\\w)content(\\-)content(\\*)content(]+\)()char(\\b)content(|$\))delimiter(/)>operator(,)
    key(className)operator(:)    regexp<delimiter(/)content(^)content(\\.)content(([)char(\\w)content(\\-)content(\\*)content(]+\)()char(\\b)content(|$\))delimiter(/)>operator(,)
    key(pseudo)operator(:)
regexp<delimiter(/)content(^:((first|last|nth|nth-last|only\)(-child|-of-type\)|empty|checked|(en|dis\)abled|not\)()content(\\()content((.*?\))content(\\\))content(\)?()char(\\b)content(|$|(?=)char(\\s)content(|[:+~>]\)\))delimiter(/)>operator(,)
    key(attrPresence)operator(:) regexp<delimiter(/)content(^)content(\\[)content(((?:[)char(\\w)content(]+:\)?[)char(\\w)content(]+\))content(\\])delimiter(/)>operator(,)
    key(attr)operator(:)         regexp<delimiter(/)content(\\[)content(((?:[)char(\\w)content(-]*:\)?[)char(\\w)content(-]+\))char(\\s)content(*(?:([!^$*~|]?=\))char(\\s)content(*((['"]\)([^)char(\\4)content(]*?\))char(\\4)content(|([^'"][^)content(\\])content(]*?\)\)\)?)content(\\])delimiter(/)>
  operator(})operator(,)

  comment(// for Selector.match and Element#match)
  key(assertions)operator(:) operator({)
    function(tagName)operator(:) keyword(function)operator(()ident(element)operator(,) ident(matches)operator(\)) operator({)
      keyword(return) ident(matches)operator([)integer(1)operator(])operator(.)ident(toUpperCase)operator(()operator(\)) operator(==) ident(element)operator(.)ident(tagName)operator(.)ident(toUpperCase)operator(()operator(\))operator(;)
    operator(})operator(,)

    function(className)operator(:) keyword(function)operator(()ident(element)operator(,) ident(matches)operator(\)) operator({)
      keyword(return) ident(Element)operator(.)ident(hasClassName)operator(()ident(element)operator(,) ident(matches)operator([)integer(1)operator(]\))operator(;)
    operator(})operator(,)

    function(id)operator(:) keyword(function)operator(()ident(element)operator(,) ident(matches)operator(\)) operator({)
      keyword(return) ident(element)operator(.)ident(id) operator(===) ident(matches)operator([)integer(1)operator(])operator(;)
    operator(})operator(,)

    function(attrPresence)operator(:) keyword(function)operator(()ident(element)operator(,) ident(matches)operator(\)) operator({)
      keyword(return) ident(Element)operator(.)ident(hasAttribute)operator(()ident(element)operator(,) ident(matches)operator([)integer(1)operator(]\))operator(;)
    operator(})operator(,)

    function(attr)operator(:) keyword(function)operator(()ident(element)operator(,) ident(matches)operator(\)) operator({)
      keyword(var) ident(nodeValue) operator(=) ident(Element)operator(.)ident(readAttribute)operator(()ident(element)operator(,) ident(matches)operator([)integer(1)operator(]\))operator(;)
      keyword(return) ident(nodeValue) operator(&&) ident(Selector)operator(.)ident(operators)operator([)ident(matches)operator([)integer(2)operator(]])operator(()ident(nodeValue)operator(,) ident(matches)operator([)integer(5)operator(]) operator(||) ident(matches)operator([)integer(6)operator(]\))operator(;)
    operator(})
  operator(})operator(,)

  key(handlers)operator(:) operator({)
    comment(// UTILITY FUNCTIONS)
    comment(// joins two collections)
    function(concat)operator(:) keyword(function)operator(()ident(a)operator(,) ident(b)operator(\)) operator({)
      keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(,) ident(node)operator(;) ident(node) operator(=) ident(b)operator([)ident(i)operator(])operator(;) ident(i)operator(++)operator(\))
        ident(a)operator(.)ident(push)operator(()ident(node)operator(\))operator(;)
      keyword(return) ident(a)operator(;)
    operator(})operator(,)

    comment(// marks an array of nodes for counting)
    function(mark)operator(:) keyword(function)operator(()ident(nodes)operator(\)) operator({)
      keyword(var) ident(_true) operator(=) ident(Prototype)operator(.)ident(emptyFunction)operator(;)
      keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(,) ident(node)operator(;) ident(node) operator(=) ident(nodes)operator([)ident(i)operator(])operator(;) ident(i)operator(++)operator(\))
        ident(node)operator(.)ident(_countedByPrototype) operator(=) ident(_true)operator(;)
      keyword(return) ident(nodes)operator(;)
    operator(})operator(,)

    function(unmark)operator(:) keyword(function)operator(()ident(nodes)operator(\)) operator({)
      keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(,) ident(node)operator(;) ident(node) operator(=) ident(nodes)operator([)ident(i)operator(])operator(;) ident(i)operator(++)operator(\))
        ident(node)operator(.)ident(_countedByPrototype) operator(=) predefined_constant(undefined)operator(;)
      keyword(return) ident(nodes)operator(;)
    operator(})operator(,)

    comment(// mark each child node with its position (for nth calls\))
    comment(// "ofType" flag indicates whether we're indexing for nth-of-type)
    comment(// rather than nth-child)
    function(index)operator(:) keyword(function)operator(()ident(parentNode)operator(,) ident(reverse)operator(,) ident(ofType)operator(\)) operator({)
      ident(parentNode)operator(.)ident(_countedByPrototype) operator(=) ident(Prototype)operator(.)ident(emptyFunction)operator(;)
      keyword(if) operator(()ident(reverse)operator(\)) operator({)
        keyword(for) operator(()keyword(var) ident(nodes) operator(=) ident(parentNode)operator(.)ident(childNodes)operator(,) ident(i) operator(=) ident(nodes)operator(.)ident(length) operator(-) integer(1)operator(,) ident(j) operator(=) integer(1)operator(;) ident(i) operator(>=) integer(0)operator(;) ident(i)operator(--)operator(\)) operator({)
          keyword(var) ident(node) operator(=) ident(nodes)operator([)ident(i)operator(])operator(;)
          keyword(if) operator(()ident(node)operator(.)ident(nodeType) operator(==) integer(1) operator(&&) operator((!)ident(ofType) operator(||) ident(node)operator(.)ident(_countedByPrototype)operator(\)\)) ident(node)operator(.)ident(nodeIndex) operator(=) ident(j)operator(++;)
        operator(})
      operator(}) keyword(else) operator({)
        keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(,) ident(j) operator(=) integer(1)operator(,) ident(nodes) operator(=) ident(parentNode)operator(.)ident(childNodes)operator(;) ident(node) operator(=) ident(nodes)operator([)ident(i)operator(])operator(;) ident(i)operator(++)operator(\))
          keyword(if) operator(()ident(node)operator(.)ident(nodeType) operator(==) integer(1) operator(&&) operator((!)ident(ofType) operator(||) ident(node)operator(.)ident(_countedByPrototype)operator(\)\)) ident(node)operator(.)ident(nodeIndex) operator(=) ident(j)operator(++;)
      operator(})
    operator(})operator(,)

    comment(// filters out duplicates and extends all nodes)
    function(unique)operator(:) keyword(function)operator(()ident(nodes)operator(\)) operator({)
      keyword(if) operator(()ident(nodes)operator(.)ident(length) operator(==) integer(0)operator(\)) keyword(return) ident(nodes)operator(;)
      keyword(var) ident(results) operator(=) operator([)operator(])operator(,) ident(n)operator(;)
      keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(,) ident(l) operator(=) ident(nodes)operator(.)ident(length)operator(;) ident(i) operator(<) ident(l)operator(;) ident(i)operator(++)operator(\))
        keyword(if) operator((!()ident(n) operator(=) ident(nodes)operator([)ident(i)operator(]\))operator(.)ident(_countedByPrototype)operator(\)) operator({)
          ident(n)operator(.)ident(_countedByPrototype) operator(=) ident(Prototype)operator(.)ident(emptyFunction)operator(;)
          ident(results)operator(.)ident(push)operator(()ident(Element)operator(.)ident(extend)operator(()ident(n)operator(\)\))operator(;)
        operator(})
      keyword(return) ident(Selector)operator(.)ident(handlers)operator(.)ident(unmark)operator(()ident(results)operator(\))operator(;)
    operator(})operator(,)

    comment(// COMBINATOR FUNCTIONS)
    function(descendant)operator(:) keyword(function)operator(()ident(nodes)operator(\)) operator({)
      keyword(var) ident(h) operator(=) ident(Selector)operator(.)ident(handlers)operator(;)
      keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(,) ident(results) operator(=) operator([)operator(])operator(,) ident(node)operator(;) ident(node) operator(=) ident(nodes)operator([)ident(i)operator(])operator(;) ident(i)operator(++)operator(\))
        ident(h)operator(.)ident(concat)operator(()ident(results)operator(,) ident(node)operator(.)ident(getElementsByTagName)operator(()string<delimiter(')content(*)delimiter(')>operator(\)\))operator(;)
      keyword(return) ident(results)operator(;)
    operator(})operator(,)

    function(child)operator(:) keyword(function)operator(()ident(nodes)operator(\)) operator({)
      keyword(var) ident(h) operator(=) ident(Selector)operator(.)ident(handlers)operator(;)
      keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(,) ident(results) operator(=) operator([)operator(])operator(,) ident(node)operator(;) ident(node) operator(=) ident(nodes)operator([)ident(i)operator(])operator(;) ident(i)operator(++)operator(\)) operator({)
        keyword(for) operator(()keyword(var) ident(j) operator(=) integer(0)operator(,) ident(child)operator(;) ident(child) operator(=) ident(node)operator(.)ident(childNodes)operator([)ident(j)operator(])operator(;) ident(j)operator(++)operator(\))
          keyword(if) operator(()ident(child)operator(.)ident(nodeType) operator(==) integer(1) operator(&&) ident(child)operator(.)ident(tagName) operator(!=) string<delimiter(')content(!)delimiter(')>operator(\)) ident(results)operator(.)ident(push)operator(()ident(child)operator(\))operator(;)
      operator(})
      keyword(return) ident(results)operator(;)
    operator(})operator(,)

    function(adjacent)operator(:) keyword(function)operator(()ident(nodes)operator(\)) operator({)
      keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(,) ident(results) operator(=) operator([)operator(])operator(,) ident(node)operator(;) ident(node) operator(=) ident(nodes)operator([)ident(i)operator(])operator(;) ident(i)operator(++)operator(\)) operator({)
        keyword(var) ident(next) operator(=) local_variable(this)operator(.)ident(nextElementSibling)operator(()ident(node)operator(\))operator(;)
        keyword(if) operator(()ident(next)operator(\)) ident(results)operator(.)ident(push)operator(()ident(next)operator(\))operator(;)
      operator(})
      keyword(return) ident(results)operator(;)
    operator(})operator(,)

    function(laterSibling)operator(:) keyword(function)operator(()ident(nodes)operator(\)) operator({)
      keyword(var) ident(h) operator(=) ident(Selector)operator(.)ident(handlers)operator(;)
      keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(,) ident(results) operator(=) operator([)operator(])operator(,) ident(node)operator(;) ident(node) operator(=) ident(nodes)operator([)ident(i)operator(])operator(;) ident(i)operator(++)operator(\))
        ident(h)operator(.)ident(concat)operator(()ident(results)operator(,) ident(Element)operator(.)ident(nextSiblings)operator(()ident(node)operator(\)\))operator(;)
      keyword(return) ident(results)operator(;)
    operator(})operator(,)

    function(nextElementSibling)operator(:) keyword(function)operator(()ident(node)operator(\)) operator({)
      keyword(while) operator(()ident(node) operator(=) ident(node)operator(.)ident(nextSibling)operator(\))
        keyword(if) operator(()ident(node)operator(.)ident(nodeType) operator(==) integer(1)operator(\)) keyword(return) ident(node)operator(;)
      keyword(return) predefined_constant(null)operator(;)
    operator(})operator(,)

    function(previousElementSibling)operator(:) keyword(function)operator(()ident(node)operator(\)) operator({)
      keyword(while) operator(()ident(node) operator(=) ident(node)operator(.)ident(previousSibling)operator(\))
        keyword(if) operator(()ident(node)operator(.)ident(nodeType) operator(==) integer(1)operator(\)) keyword(return) ident(node)operator(;)
      keyword(return) predefined_constant(null)operator(;)
    operator(})operator(,)

    comment(// TOKEN FUNCTIONS)
    function(tagName)operator(:) keyword(function)operator(()ident(nodes)operator(,) ident(root)operator(,) ident(tagName)operator(,) ident(combinator)operator(\)) operator({)
      keyword(var) ident(uTagName) operator(=) ident(tagName)operator(.)ident(toUpperCase)operator(()operator(\))operator(;)
      keyword(var) ident(results) operator(=) operator([)operator(])operator(,) ident(h) operator(=) ident(Selector)operator(.)ident(handlers)operator(;)
      keyword(if) operator(()ident(nodes)operator(\)) operator({)
        keyword(if) operator(()ident(combinator)operator(\)) operator({)
          comment(// fastlane for ordinary descendant combinators)
          keyword(if) operator(()ident(combinator) operator(==) string<delimiter(")content(descendant)delimiter(")>operator(\)) operator({)
            keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(,) ident(node)operator(;) ident(node) operator(=) ident(nodes)operator([)ident(i)operator(])operator(;) ident(i)operator(++)operator(\))
              ident(h)operator(.)ident(concat)operator(()ident(results)operator(,) ident(node)operator(.)ident(getElementsByTagName)operator(()ident(tagName)operator(\)\))operator(;)
            keyword(return) ident(results)operator(;)
          operator(}) keyword(else) ident(nodes) operator(=) local_variable(this)operator([)ident(combinator)operator(])operator(()ident(nodes)operator(\))operator(;)
          keyword(if) operator(()ident(tagName) operator(==) string<delimiter(")content(*)delimiter(")>operator(\)) keyword(return) ident(nodes)operator(;)
        operator(})
        keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(,) ident(node)operator(;) ident(node) operator(=) ident(nodes)operator([)ident(i)operator(])operator(;) ident(i)operator(++)operator(\))
          keyword(if) operator(()ident(node)operator(.)ident(tagName)operator(.)ident(toUpperCase)operator(()operator(\)) operator(===) ident(uTagName)operator(\)) ident(results)operator(.)ident(push)operator(()ident(node)operator(\))operator(;)
        keyword(return) ident(results)operator(;)
      operator(}) keyword(else) keyword(return) ident(root)operator(.)ident(getElementsByTagName)operator(()ident(tagName)operator(\))operator(;)
    operator(})operator(,)

    function(id)operator(:) keyword(function)operator(()ident(nodes)operator(,) ident(root)operator(,) ident(id)operator(,) ident(combinator)operator(\)) operator({)
      keyword(var) ident(targetNode) operator(=) predefined($)operator(()ident(id)operator(\))operator(,) ident(h) operator(=) ident(Selector)operator(.)ident(handlers)operator(;)
      keyword(if) operator((!)ident(targetNode)operator(\)) keyword(return) operator([)operator(])operator(;)
      keyword(if) operator((!)ident(nodes) operator(&&) ident(root) operator(==) ident(document)operator(\)) keyword(return) operator([)ident(targetNode)operator(])operator(;)
      keyword(if) operator(()ident(nodes)operator(\)) operator({)
        keyword(if) operator(()ident(combinator)operator(\)) operator({)
          keyword(if) operator(()ident(combinator) operator(==) string<delimiter(')content(child)delimiter(')>operator(\)) operator({)
            keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(,) ident(node)operator(;) ident(node) operator(=) ident(nodes)operator([)ident(i)operator(])operator(;) ident(i)operator(++)operator(\))
              keyword(if) operator(()ident(targetNode)operator(.)ident(parentNode) operator(==) ident(node)operator(\)) keyword(return) operator([)ident(targetNode)operator(])operator(;)
          operator(}) keyword(else) keyword(if) operator(()ident(combinator) operator(==) string<delimiter(')content(descendant)delimiter(')>operator(\)) operator({)
            keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(,) ident(node)operator(;) ident(node) operator(=) ident(nodes)operator([)ident(i)operator(])operator(;) ident(i)operator(++)operator(\))
              keyword(if) operator(()ident(Element)operator(.)ident(descendantOf)operator(()ident(targetNode)operator(,) ident(node)operator(\)\)) keyword(return) operator([)ident(targetNode)operator(])operator(;)
          operator(}) keyword(else) keyword(if) operator(()ident(combinator) operator(==) string<delimiter(')content(adjacent)delimiter(')>operator(\)) operator({)
            keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(,) ident(node)operator(;) ident(node) operator(=) ident(nodes)operator([)ident(i)operator(])operator(;) ident(i)operator(++)operator(\))
              keyword(if) operator(()ident(Selector)operator(.)ident(handlers)operator(.)ident(previousElementSibling)operator(()ident(targetNode)operator(\)) operator(==) ident(node)operator(\))
                keyword(return) operator([)ident(targetNode)operator(])operator(;)
          operator(}) keyword(else) ident(nodes) operator(=) ident(h)operator([)ident(combinator)operator(])operator(()ident(nodes)operator(\))operator(;)
        operator(})
        keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(,) ident(node)operator(;) ident(node) operator(=) ident(nodes)operator([)ident(i)operator(])operator(;) ident(i)operator(++)operator(\))
          keyword(if) operator(()ident(node) operator(==) ident(targetNode)operator(\)) keyword(return) operator([)ident(targetNode)operator(])operator(;)
        keyword(return) operator([)operator(])operator(;)
      operator(})
      keyword(return) operator(()ident(targetNode) operator(&&) ident(Element)operator(.)ident(descendantOf)operator(()ident(targetNode)operator(,) ident(root)operator(\)\)) operator(?) operator([)ident(targetNode)operator(]) operator(:) operator([)operator(])operator(;)
    operator(})operator(,)

    function(className)operator(:) keyword(function)operator(()ident(nodes)operator(,) ident(root)operator(,) ident(className)operator(,) ident(combinator)operator(\)) operator({)
      keyword(if) operator(()ident(nodes) operator(&&) ident(combinator)operator(\)) ident(nodes) operator(=) local_variable(this)operator([)ident(combinator)operator(])operator(()ident(nodes)operator(\))operator(;)
      keyword(return) ident(Selector)operator(.)ident(handlers)operator(.)ident(byClassName)operator(()ident(nodes)operator(,) ident(root)operator(,) ident(className)operator(\))operator(;)
    operator(})operator(,)

    function(byClassName)operator(:) keyword(function)operator(()ident(nodes)operator(,) ident(root)operator(,) ident(className)operator(\)) operator({)
      keyword(if) operator((!)ident(nodes)operator(\)) ident(nodes) operator(=) ident(Selector)operator(.)ident(handlers)operator(.)ident(descendant)operator(([)ident(root)operator(]\))operator(;)
      keyword(var) ident(needle) operator(=) string<delimiter(')content( )delimiter(')> operator(+) ident(className) operator(+) string<delimiter(')content( )delimiter(')>operator(;)
      keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(,) ident(results) operator(=) operator([)operator(])operator(,) ident(node)operator(,) ident(nodeClassName)operator(;) ident(node) operator(=) ident(nodes)operator([)ident(i)operator(])operator(;) ident(i)operator(++)operator(\)) operator({)
        ident(nodeClassName) operator(=) ident(node)operator(.)ident(className)operator(;)
        keyword(if) operator(()ident(nodeClassName)operator(.)ident(length) operator(==) integer(0)operator(\)) keyword(continue)operator(;)
        keyword(if) operator(()ident(nodeClassName) operator(==) ident(className) operator(||) operator(()string<delimiter(')content( )delimiter(')> operator(+) ident(nodeClassName) operator(+) string<delimiter(')content( )delimiter(')>operator(\))operator(.)ident(include)operator(()ident(needle)operator(\)\))
          ident(results)operator(.)ident(push)operator(()ident(node)operator(\))operator(;)
      operator(})
      keyword(return) ident(results)operator(;)
    operator(})operator(,)

    function(attrPresence)operator(:) keyword(function)operator(()ident(nodes)operator(,) ident(root)operator(,) ident(attr)operator(,) ident(combinator)operator(\)) operator({)
      keyword(if) operator((!)ident(nodes)operator(\)) ident(nodes) operator(=) ident(root)operator(.)ident(getElementsByTagName)operator(()string<delimiter(")content(*)delimiter(")>operator(\))operator(;)
      keyword(if) operator(()ident(nodes) operator(&&) ident(combinator)operator(\)) ident(nodes) operator(=) local_variable(this)operator([)ident(combinator)operator(])operator(()ident(nodes)operator(\))operator(;)
      keyword(var) ident(results) operator(=) operator([)operator(])operator(;)
      keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(,) ident(node)operator(;) ident(node) operator(=) ident(nodes)operator([)ident(i)operator(])operator(;) ident(i)operator(++)operator(\))
        keyword(if) operator(()ident(Element)operator(.)ident(hasAttribute)operator(()ident(node)operator(,) ident(attr)operator(\)\)) ident(results)operator(.)ident(push)operator(()ident(node)operator(\))operator(;)
      keyword(return) ident(results)operator(;)
    operator(})operator(,)

    function(attr)operator(:) keyword(function)operator(()ident(nodes)operator(,) ident(root)operator(,) ident(attr)operator(,) ident(value)operator(,) ident(operator)operator(,) ident(combinator)operator(\)) operator({)
      keyword(if) operator((!)ident(nodes)operator(\)) ident(nodes) operator(=) ident(root)operator(.)ident(getElementsByTagName)operator(()string<delimiter(")content(*)delimiter(")>operator(\))operator(;)
      keyword(if) operator(()ident(nodes) operator(&&) ident(combinator)operator(\)) ident(nodes) operator(=) local_variable(this)operator([)ident(combinator)operator(])operator(()ident(nodes)operator(\))operator(;)
      keyword(var) ident(handler) operator(=) ident(Selector)operator(.)ident(operators)operator([)ident(operator)operator(])operator(,) ident(results) operator(=) operator([)operator(])operator(;)
      keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(,) ident(node)operator(;) ident(node) operator(=) ident(nodes)operator([)ident(i)operator(])operator(;) ident(i)operator(++)operator(\)) operator({)
        keyword(var) ident(nodeValue) operator(=) ident(Element)operator(.)ident(readAttribute)operator(()ident(node)operator(,) ident(attr)operator(\))operator(;)
        keyword(if) operator(()ident(nodeValue) operator(===) predefined_constant(null)operator(\)) keyword(continue)operator(;)
        keyword(if) operator(()ident(handler)operator(()ident(nodeValue)operator(,) ident(value)operator(\)\)) ident(results)operator(.)ident(push)operator(()ident(node)operator(\))operator(;)
      operator(})
      keyword(return) ident(results)operator(;)
    operator(})operator(,)

    function(pseudo)operator(:) keyword(function)operator(()ident(nodes)operator(,) ident(name)operator(,) ident(value)operator(,) ident(root)operator(,) ident(combinator)operator(\)) operator({)
      keyword(if) operator(()ident(nodes) operator(&&) ident(combinator)operator(\)) ident(nodes) operator(=) local_variable(this)operator([)ident(combinator)operator(])operator(()ident(nodes)operator(\))operator(;)
      keyword(if) operator((!)ident(nodes)operator(\)) ident(nodes) operator(=) ident(root)operator(.)ident(getElementsByTagName)operator(()string<delimiter(")content(*)delimiter(")>operator(\))operator(;)
      keyword(return) ident(Selector)operator(.)ident(pseudos)operator([)ident(name)operator(])operator(()ident(nodes)operator(,) ident(value)operator(,) ident(root)operator(\))operator(;)
    operator(})
  operator(})operator(,)

  key(pseudos)operator(:) operator({)
    key<delimiter(')content(first-child)delimiter(')>operator(:) keyword(function)operator(()ident(nodes)operator(,) ident(value)operator(,) ident(root)operator(\)) operator({)
      keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(,) ident(results) operator(=) operator([)operator(])operator(,) ident(node)operator(;) ident(node) operator(=) ident(nodes)operator([)ident(i)operator(])operator(;) ident(i)operator(++)operator(\)) operator({)
        keyword(if) operator(()ident(Selector)operator(.)ident(handlers)operator(.)ident(previousElementSibling)operator(()ident(node)operator(\)\)) keyword(continue)operator(;)
          ident(results)operator(.)ident(push)operator(()ident(node)operator(\))operator(;)
      operator(})
      keyword(return) ident(results)operator(;)
    operator(})operator(,)
    key<delimiter(')content(last-child)delimiter(')>operator(:) keyword(function)operator(()ident(nodes)operator(,) ident(value)operator(,) ident(root)operator(\)) operator({)
      keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(,) ident(results) operator(=) operator([)operator(])operator(,) ident(node)operator(;) ident(node) operator(=) ident(nodes)operator([)ident(i)operator(])operator(;) ident(i)operator(++)operator(\)) operator({)
        keyword(if) operator(()ident(Selector)operator(.)ident(handlers)operator(.)ident(nextElementSibling)operator(()ident(node)operator(\)\)) keyword(continue)operator(;)
          ident(results)operator(.)ident(push)operator(()ident(node)operator(\))operator(;)
      operator(})
      keyword(return) ident(results)operator(;)
    operator(})operator(,)
    key<delimiter(')content(only-child)delimiter(')>operator(:) keyword(function)operator(()ident(nodes)operator(,) ident(value)operator(,) ident(root)operator(\)) operator({)
      keyword(var) ident(h) operator(=) ident(Selector)operator(.)ident(handlers)operator(;)
      keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(,) ident(results) operator(=) operator([)operator(])operator(,) ident(node)operator(;) ident(node) operator(=) ident(nodes)operator([)ident(i)operator(])operator(;) ident(i)operator(++)operator(\))
        keyword(if) operator((!)ident(h)operator(.)ident(previousElementSibling)operator(()ident(node)operator(\)) operator(&&) operator(!)ident(h)operator(.)ident(nextElementSibling)operator(()ident(node)operator(\)\))
          ident(results)operator(.)ident(push)operator(()ident(node)operator(\))operator(;)
      keyword(return) ident(results)operator(;)
    operator(})operator(,)
    key<delimiter(')content(nth-child)delimiter(')>operator(:)        keyword(function)operator(()ident(nodes)operator(,) ident(formula)operator(,) ident(root)operator(\)) operator({)
      keyword(return) ident(Selector)operator(.)ident(pseudos)operator(.)ident(nth)operator(()ident(nodes)operator(,) ident(formula)operator(,) ident(root)operator(\))operator(;)
    operator(})operator(,)
    key<delimiter(')content(nth-last-child)delimiter(')>operator(:)   keyword(function)operator(()ident(nodes)operator(,) ident(formula)operator(,) ident(root)operator(\)) operator({)
      keyword(return) ident(Selector)operator(.)ident(pseudos)operator(.)ident(nth)operator(()ident(nodes)operator(,) ident(formula)operator(,) ident(root)operator(,) predefined_constant(true)operator(\))operator(;)
    operator(})operator(,)
    key<delimiter(')content(nth-of-type)delimiter(')>operator(:)      keyword(function)operator(()ident(nodes)operator(,) ident(formula)operator(,) ident(root)operator(\)) operator({)
      keyword(return) ident(Selector)operator(.)ident(pseudos)operator(.)ident(nth)operator(()ident(nodes)operator(,) ident(formula)operator(,) ident(root)operator(,) predefined_constant(false)operator(,) predefined_constant(true)operator(\))operator(;)
    operator(})operator(,)
    key<delimiter(')content(nth-last-of-type)delimiter(')>operator(:) keyword(function)operator(()ident(nodes)operator(,) ident(formula)operator(,) ident(root)operator(\)) operator({)
      keyword(return) ident(Selector)operator(.)ident(pseudos)operator(.)ident(nth)operator(()ident(nodes)operator(,) ident(formula)operator(,) ident(root)operator(,) predefined_constant(true)operator(,) predefined_constant(true)operator(\))operator(;)
    operator(})operator(,)
    key<delimiter(')content(first-of-type)delimiter(')>operator(:)    keyword(function)operator(()ident(nodes)operator(,) ident(formula)operator(,) ident(root)operator(\)) operator({)
      keyword(return) ident(Selector)operator(.)ident(pseudos)operator(.)ident(nth)operator(()ident(nodes)operator(,) string<delimiter(")content(1)delimiter(")>operator(,) ident(root)operator(,) predefined_constant(false)operator(,) predefined_constant(true)operator(\))operator(;)
    operator(})operator(,)
    key<delimiter(')content(last-of-type)delimiter(')>operator(:)     keyword(function)operator(()ident(nodes)operator(,) ident(formula)operator(,) ident(root)operator(\)) operator({)
      keyword(return) ident(Selector)operator(.)ident(pseudos)operator(.)ident(nth)operator(()ident(nodes)operator(,) string<delimiter(")content(1)delimiter(")>operator(,) ident(root)operator(,) predefined_constant(true)operator(,) predefined_constant(true)operator(\))operator(;)
    operator(})operator(,)
    key<delimiter(')content(only-of-type)delimiter(')>operator(:)     keyword(function)operator(()ident(nodes)operator(,) ident(formula)operator(,) ident(root)operator(\)) operator({)
      keyword(var) ident(p) operator(=) ident(Selector)operator(.)ident(pseudos)operator(;)
      keyword(return) ident(p)operator([)string<delimiter(')content(last-of-type)delimiter(')>operator(])operator(()ident(p)operator([)string<delimiter(')content(first-of-type)delimiter(')>operator(])operator(()ident(nodes)operator(,) ident(formula)operator(,) ident(root)operator(\))operator(,) ident(formula)operator(,) ident(root)operator(\))operator(;)
    operator(})operator(,)

    comment(// handles the an+b logic)
    function(getIndices)operator(:) keyword(function)operator(()ident(a)operator(,) ident(b)operator(,) ident(total)operator(\)) operator({)
      keyword(if) operator(()ident(a) operator(==) integer(0)operator(\)) keyword(return) ident(b) operator(>) integer(0) operator(?) operator([)ident(b)operator(]) operator(:) operator([)operator(])operator(;)
      keyword(return) predefined($R)operator(()integer(1)operator(,) ident(total)operator(\))operator(.)ident(inject)operator(([)operator(])operator(,) keyword(function)operator(()ident(memo)operator(,) ident(i)operator(\)) operator({)
        keyword(if) operator(()integer(0) operator(==) operator(()ident(i) operator(-) ident(b)operator(\)) operator(%) ident(a) operator(&&) operator(()ident(i) operator(-) ident(b)operator(\)) operator(/) ident(a) operator(>=) integer(0)operator(\)) ident(memo)operator(.)ident(push)operator(()ident(i)operator(\))operator(;)
        keyword(return) ident(memo)operator(;)
      operator(}\))operator(;)
    operator(})operator(,)

    comment(// handles nth(-last\)-child, nth(-last\)-of-type, and (first|last\)-of-type)
    function(nth)operator(:) keyword(function)operator(()ident(nodes)operator(,) ident(formula)operator(,) ident(root)operator(,) ident(reverse)operator(,) ident(ofType)operator(\)) operator({)
      keyword(if) operator(()ident(nodes)operator(.)ident(length) operator(==) integer(0)operator(\)) keyword(return) operator([)operator(])operator(;)
      keyword(if) operator(()ident(formula) operator(==) string<delimiter(')content(even)delimiter(')>operator(\)) ident(formula) operator(=) string<delimiter(')content(2n+0)delimiter(')>operator(;)
      keyword(if) operator(()ident(formula) operator(==) string<delimiter(')content(odd)delimiter(')>operator(\))  ident(formula) operator(=) string<delimiter(')content(2n+1)delimiter(')>operator(;)
      keyword(var) ident(h) operator(=) ident(Selector)operator(.)ident(handlers)operator(,) ident(results) operator(=) operator([)operator(])operator(,) ident(indexed) operator(=) operator([)operator(])operator(,) ident(m)operator(;)
      ident(h)operator(.)ident(mark)operator(()ident(nodes)operator(\))operator(;)
      keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(,) ident(node)operator(;) ident(node) operator(=) ident(nodes)operator([)ident(i)operator(])operator(;) ident(i)operator(++)operator(\)) operator({)
        keyword(if) operator((!)ident(node)operator(.)ident(parentNode)operator(.)ident(_countedByPrototype)operator(\)) operator({)
          ident(h)operator(.)ident(index)operator(()ident(node)operator(.)ident(parentNode)operator(,) ident(reverse)operator(,) ident(ofType)operator(\))operator(;)
          ident(indexed)operator(.)ident(push)operator(()ident(node)operator(.)ident(parentNode)operator(\))operator(;)
        operator(})
      operator(})
      keyword(if) operator(()ident(formula)operator(.)ident(match)operator(()regexp<delimiter(/)content(^)char(\\d)content(+$)delimiter(/)>operator(\)\)) operator({) comment(// just a number)
        ident(formula) operator(=) ident(Number)operator(()ident(formula)operator(\))operator(;)
        keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(,) ident(node)operator(;) ident(node) operator(=) ident(nodes)operator([)ident(i)operator(])operator(;) ident(i)operator(++)operator(\))
          keyword(if) operator(()ident(node)operator(.)ident(nodeIndex) operator(==) ident(formula)operator(\)) ident(results)operator(.)ident(push)operator(()ident(node)operator(\))operator(;)
      operator(}) keyword(else) keyword(if) operator(()ident(m) operator(=) ident(formula)operator(.)ident(match)operator(()regexp<delimiter(/)content(^(-?)char(\\d)content(*\)?n(([+-]\)()char(\\d)content(+\)\)?)delimiter(/)>operator(\)\)) operator({) comment(// an+b)
        keyword(if) operator(()ident(m)operator([)integer(1)operator(]) operator(==) string<delimiter(")content(-)delimiter(")>operator(\)) ident(m)operator([)integer(1)operator(]) operator(=) operator(-)integer(1)operator(;)
        keyword(var) ident(a) operator(=) ident(m)operator([)integer(1)operator(]) operator(?) ident(Number)operator(()ident(m)operator([)integer(1)operator(]\)) operator(:) integer(1)operator(;)
        keyword(var) ident(b) operator(=) ident(m)operator([)integer(2)operator(]) operator(?) ident(Number)operator(()ident(m)operator([)integer(2)operator(]\)) operator(:) integer(0)operator(;)
        keyword(var) ident(indices) operator(=) ident(Selector)operator(.)ident(pseudos)operator(.)ident(getIndices)operator(()ident(a)operator(,) ident(b)operator(,) ident(nodes)operator(.)ident(length)operator(\))operator(;)
        keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(,) ident(node)operator(,) ident(l) operator(=) ident(indices)operator(.)ident(length)operator(;) ident(node) operator(=) ident(nodes)operator([)ident(i)operator(])operator(;) ident(i)operator(++)operator(\)) operator({)
          keyword(for) operator(()keyword(var) ident(j) operator(=) integer(0)operator(;) ident(j) operator(<) ident(l)operator(;) ident(j)operator(++)operator(\))
            keyword(if) operator(()ident(node)operator(.)ident(nodeIndex) operator(==) ident(indices)operator([)ident(j)operator(]\)) ident(results)operator(.)ident(push)operator(()ident(node)operator(\))operator(;)
        operator(})
      operator(})
      ident(h)operator(.)ident(unmark)operator(()ident(nodes)operator(\))operator(;)
      ident(h)operator(.)ident(unmark)operator(()ident(indexed)operator(\))operator(;)
      keyword(return) ident(results)operator(;)
    operator(})operator(,)

    key<delimiter(')content(empty)delimiter(')>operator(:) keyword(function)operator(()ident(nodes)operator(,) ident(value)operator(,) ident(root)operator(\)) operator({)
      keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(,) ident(results) operator(=) operator([)operator(])operator(,) ident(node)operator(;) ident(node) operator(=) ident(nodes)operator([)ident(i)operator(])operator(;) ident(i)operator(++)operator(\)) operator({)
        comment(// IE treats comments as element nodes)
        keyword(if) operator(()ident(node)operator(.)ident(tagName) operator(==) string<delimiter(')content(!)delimiter(')> operator(||) ident(node)operator(.)ident(firstChild)operator(\)) keyword(continue)operator(;)
        ident(results)operator(.)ident(push)operator(()ident(node)operator(\))operator(;)
      operator(})
      keyword(return) ident(results)operator(;)
    operator(})operator(,)

    key<delimiter(')content(not)delimiter(')>operator(:) keyword(function)operator(()ident(nodes)operator(,) ident(selector)operator(,) ident(root)operator(\)) operator({)
      keyword(var) ident(h) operator(=) ident(Selector)operator(.)ident(handlers)operator(,) ident(selectorType)operator(,) ident(m)operator(;)
      keyword(var) ident(exclusions) operator(=) keyword(new) ident(Selector)operator(()ident(selector)operator(\))operator(.)ident(findElements)operator(()ident(root)operator(\))operator(;)
      ident(h)operator(.)ident(mark)operator(()ident(exclusions)operator(\))operator(;)
      keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(,) ident(results) operator(=) operator([)operator(])operator(,) ident(node)operator(;) ident(node) operator(=) ident(nodes)operator([)ident(i)operator(])operator(;) ident(i)operator(++)operator(\))
        keyword(if) operator((!)ident(node)operator(.)ident(_countedByPrototype)operator(\)) ident(results)operator(.)ident(push)operator(()ident(node)operator(\))operator(;)
      ident(h)operator(.)ident(unmark)operator(()ident(exclusions)operator(\))operator(;)
      keyword(return) ident(results)operator(;)
    operator(})operator(,)

    key<delimiter(')content(enabled)delimiter(')>operator(:) keyword(function)operator(()ident(nodes)operator(,) ident(value)operator(,) ident(root)operator(\)) operator({)
      keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(,) ident(results) operator(=) operator([)operator(])operator(,) ident(node)operator(;) ident(node) operator(=) ident(nodes)operator([)ident(i)operator(])operator(;) ident(i)operator(++)operator(\))
        keyword(if) operator((!)ident(node)operator(.)ident(disabled) operator(&&) operator((!)ident(node)operator(.)ident(type) operator(||) ident(node)operator(.)ident(type) operator(!==) string<delimiter(')content(hidden)delimiter(')>operator(\)\))
          ident(results)operator(.)ident(push)operator(()ident(node)operator(\))operator(;)
      keyword(return) ident(results)operator(;)
    operator(})operator(,)

    key<delimiter(')content(disabled)delimiter(')>operator(:) keyword(function)operator(()ident(nodes)operator(,) ident(value)operator(,) ident(root)operator(\)) operator({)
      keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(,) ident(results) operator(=) operator([)operator(])operator(,) ident(node)operator(;) ident(node) operator(=) ident(nodes)operator([)ident(i)operator(])operator(;) ident(i)operator(++)operator(\))
        keyword(if) operator(()ident(node)operator(.)ident(disabled)operator(\)) ident(results)operator(.)ident(push)operator(()ident(node)operator(\))operator(;)
      keyword(return) ident(results)operator(;)
    operator(})operator(,)

    key<delimiter(')content(checked)delimiter(')>operator(:) keyword(function)operator(()ident(nodes)operator(,) ident(value)operator(,) ident(root)operator(\)) operator({)
      keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(,) ident(results) operator(=) operator([)operator(])operator(,) ident(node)operator(;) ident(node) operator(=) ident(nodes)operator([)ident(i)operator(])operator(;) ident(i)operator(++)operator(\))
        keyword(if) operator(()ident(node)operator(.)ident(checked)operator(\)) ident(results)operator(.)ident(push)operator(()ident(node)operator(\))operator(;)
      keyword(return) ident(results)operator(;)
    operator(})
  operator(})operator(,)

  key(operators)operator(:) operator({)
    key<delimiter(')content(=)delimiter(')>operator(:)  keyword(function)operator(()ident(nv)operator(,) ident(v)operator(\)) operator({) keyword(return) ident(nv) operator(==) ident(v)operator(;) operator(})operator(,)
    key<delimiter(')content(!=)delimiter(')>operator(:) keyword(function)operator(()ident(nv)operator(,) ident(v)operator(\)) operator({) keyword(return) ident(nv) operator(!=) ident(v)operator(;) operator(})operator(,)
    key<delimiter(')content(^=)delimiter(')>operator(:) keyword(function)operator(()ident(nv)operator(,) ident(v)operator(\)) operator({) keyword(return) ident(nv) operator(==) ident(v) operator(||) ident(nv) operator(&&) ident(nv)operator(.)ident(startsWith)operator(()ident(v)operator(\))operator(;) operator(})operator(,)
    key<delimiter(')content($=)delimiter(')>operator(:) keyword(function)operator(()ident(nv)operator(,) ident(v)operator(\)) operator({) keyword(return) ident(nv) operator(==) ident(v) operator(||) ident(nv) operator(&&) ident(nv)operator(.)ident(endsWith)operator(()ident(v)operator(\))operator(;) operator(})operator(,)
    key<delimiter(')content(*=)delimiter(')>operator(:) keyword(function)operator(()ident(nv)operator(,) ident(v)operator(\)) operator({) keyword(return) ident(nv) operator(==) ident(v) operator(||) ident(nv) operator(&&) ident(nv)operator(.)ident(include)operator(()ident(v)operator(\))operator(;) operator(})operator(,)
    key<delimiter(')content($=)delimiter(')>operator(:) keyword(function)operator(()ident(nv)operator(,) ident(v)operator(\)) operator({) keyword(return) ident(nv)operator(.)ident(endsWith)operator(()ident(v)operator(\))operator(;) operator(})operator(,)
    key<delimiter(')content(*=)delimiter(')>operator(:) keyword(function)operator(()ident(nv)operator(,) ident(v)operator(\)) operator({) keyword(return) ident(nv)operator(.)ident(include)operator(()ident(v)operator(\))operator(;) operator(})operator(,)
    key<delimiter(')content(~=)delimiter(')>operator(:) keyword(function)operator(()ident(nv)operator(,) ident(v)operator(\)) operator({) keyword(return) operator(()string<delimiter(')content( )delimiter(')> operator(+) ident(nv) operator(+) string<delimiter(')content( )delimiter(')>operator(\))operator(.)ident(include)operator(()string<delimiter(')content( )delimiter(')> operator(+) ident(v) operator(+) string<delimiter(')content( )delimiter(')>operator(\))operator(;) operator(})operator(,)
    key<delimiter(')content(|=)delimiter(')>operator(:) keyword(function)operator(()ident(nv)operator(,) ident(v)operator(\)) operator({) keyword(return) operator(()string<delimiter(')content(-)delimiter(')> operator(+) operator(()ident(nv) operator(||) string<delimiter(")delimiter(")>operator(\))operator(.)ident(toUpperCase)operator(()operator(\)) operator(+)
     string<delimiter(')content(-)delimiter(')>operator(\))operator(.)ident(include)operator(()string<delimiter(')content(-)delimiter(')> operator(+) operator(()ident(v) operator(||) string<delimiter(")delimiter(")>operator(\))operator(.)ident(toUpperCase)operator(()operator(\)) operator(+) string<delimiter(')content(-)delimiter(')>operator(\))operator(;) operator(})
  operator(})operator(,)

  function(split)operator(:) keyword(function)operator(()ident(expression)operator(\)) operator({)
    keyword(var) ident(expressions) operator(=) operator([)operator(])operator(;)
    ident(expression)operator(.)ident(scan)operator(()regexp<delimiter(/)content((([)char(\\w)content(#:.~>+(\))char(\\s)content(-]+|)content(\\*)content(|)content(\\[)content(.*?)content(\\])content(\)+\))char(\\s)content(*(,|$\))delimiter(/)>operator(,) keyword(function)operator(()ident(m)operator(\)) operator({)
      ident(expressions)operator(.)ident(push)operator(()ident(m)operator([)integer(1)operator(])operator(.)ident(strip)operator(()operator(\)\))operator(;)
    operator(}\))operator(;)
    keyword(return) ident(expressions)operator(;)
  operator(})operator(,)

  function(matchElements)operator(:) keyword(function)operator(()ident(elements)operator(,) ident(expression)operator(\)) operator({)
    keyword(var) ident(matches) operator(=) predefined($$)operator(()ident(expression)operator(\))operator(,) ident(h) operator(=) ident(Selector)operator(.)ident(handlers)operator(;)
    ident(h)operator(.)ident(mark)operator(()ident(matches)operator(\))operator(;)
    keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(,) ident(results) operator(=) operator([)operator(])operator(,) ident(element)operator(;) ident(element) operator(=) ident(elements)operator([)ident(i)operator(])operator(;) ident(i)operator(++)operator(\))
      keyword(if) operator(()ident(element)operator(.)ident(_countedByPrototype)operator(\)) ident(results)operator(.)ident(push)operator(()ident(element)operator(\))operator(;)
    ident(h)operator(.)ident(unmark)operator(()ident(matches)operator(\))operator(;)
    keyword(return) ident(results)operator(;)
  operator(})operator(,)

  function(findElement)operator(:) keyword(function)operator(()ident(elements)operator(,) ident(expression)operator(,) ident(index)operator(\)) operator({)
    keyword(if) operator(()ident(Object)operator(.)ident(isNumber)operator(()ident(expression)operator(\)\)) operator({)
      ident(index) operator(=) ident(expression)operator(;) ident(expression) operator(=) predefined_constant(false)operator(;)
    operator(})
    keyword(return) ident(Selector)operator(.)ident(matchElements)operator(()ident(elements)operator(,) ident(expression) operator(||) string<delimiter(')content(*)delimiter(')>operator(\))operator([)ident(index) operator(||) integer(0)operator(])operator(;)
  operator(})operator(,)

  function(findChildElements)operator(:) keyword(function)operator(()ident(element)operator(,) ident(expressions)operator(\)) operator({)
    ident(expressions) operator(=) ident(Selector)operator(.)ident(split)operator(()ident(expressions)operator(.)ident(join)operator(()string<delimiter(')content(,)delimiter(')>operator(\)\))operator(;)
    keyword(var) ident(results) operator(=) operator([)operator(])operator(,) ident(h) operator(=) ident(Selector)operator(.)ident(handlers)operator(;)
    keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(,) ident(l) operator(=) ident(expressions)operator(.)ident(length)operator(,) ident(selector)operator(;) ident(i) operator(<) ident(l)operator(;) ident(i)operator(++)operator(\)) operator({)
      ident(selector) operator(=) keyword(new) ident(Selector)operator(()ident(expressions)operator([)ident(i)operator(])operator(.)ident(strip)operator(()operator(\)\))operator(;)
      ident(h)operator(.)ident(concat)operator(()ident(results)operator(,) ident(selector)operator(.)ident(findElements)operator(()ident(element)operator(\)\))operator(;)
    operator(})
    keyword(return) operator(()ident(l) operator(>) integer(1)operator(\)) operator(?) ident(h)operator(.)ident(unique)operator(()ident(results)operator(\)) operator(:) ident(results)operator(;)
  operator(})
operator(}\))operator(;)

keyword(if) operator(()ident(Prototype)operator(.)ident(Browser)operator(.)ident(IE)operator(\)) operator({)
  ident(Object)operator(.)ident(extend)operator(()ident(Selector)operator(.)ident(handlers)operator(,) operator({)
    comment(// IE returns comment nodes on getElementsByTagName("*"\).)
    comment(// Filter them out.)
    function(concat)operator(:) keyword(function)operator(()ident(a)operator(,) ident(b)operator(\)) operator({)
      keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(,) ident(node)operator(;) ident(node) operator(=) ident(b)operator([)ident(i)operator(])operator(;) ident(i)operator(++)operator(\))
        keyword(if) operator(()ident(node)operator(.)ident(tagName) operator(!==) string<delimiter(")content(!)delimiter(")>operator(\)) ident(a)operator(.)ident(push)operator(()ident(node)operator(\))operator(;)
      keyword(return) ident(a)operator(;)
    operator(})operator(,)

    comment(// IE improperly serializes _countedByPrototype in (inner|outer\)HTML.)
    function(unmark)operator(:) keyword(function)operator(()ident(nodes)operator(\)) operator({)
      keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(,) ident(node)operator(;) ident(node) operator(=) ident(nodes)operator([)ident(i)operator(])operator(;) ident(i)operator(++)operator(\))
        ident(node)operator(.)ident(removeAttribute)operator(()string<delimiter(')content(_countedByPrototype)delimiter(')>operator(\))operator(;)
      keyword(return) ident(nodes)operator(;)
    operator(})
  operator(}\))operator(;)
operator(})

keyword(function) predefined($$)operator(()operator(\)) operator({)
  keyword(return) ident(Selector)operator(.)ident(findChildElements)operator(()ident(document)operator(,) predefined($A)operator(()local_variable(arguments)operator(\)\))operator(;)
operator(})
keyword(var) ident(Form) operator(=) operator({)
  function(reset)operator(:) keyword(function)operator(()ident(form)operator(\)) operator({)
    predefined($)operator(()ident(form)operator(\))operator(.)ident(reset)operator(()operator(\))operator(;)
    keyword(return) ident(form)operator(;)
  operator(})operator(,)

  function(serializeElements)operator(:) keyword(function)operator(()ident(elements)operator(,) ident(options)operator(\)) operator({)
    keyword(if) operator(()keyword(typeof) ident(options) operator(!=) string<delimiter(')content(object)delimiter(')>operator(\)) ident(options) operator(=) operator({) key(hash)operator(:) operator(!!)ident(options) operator(})operator(;)
    keyword(else) keyword(if) operator(()ident(Object)operator(.)ident(isUndefined)operator(()ident(options)operator(.)ident(hash)operator(\)\)) ident(options)operator(.)ident(hash) operator(=) predefined_constant(true)operator(;)
    keyword(var) ident(key)operator(,) ident(value)operator(,) ident(submitted) operator(=) predefined_constant(false)operator(,) ident(submit) operator(=) ident(options)operator(.)ident(submit)operator(;)

    keyword(var) ident(data) operator(=) ident(elements)operator(.)ident(inject)operator(({) operator(})operator(,) keyword(function)operator(()ident(result)operator(,) ident(element)operator(\)) operator({)
      keyword(if) operator((!)ident(element)operator(.)ident(disabled) operator(&&) ident(element)operator(.)ident(name)operator(\)) operator({)
        ident(key) operator(=) ident(element)operator(.)ident(name)operator(;) ident(value) operator(=) predefined($)operator(()ident(element)operator(\))operator(.)ident(getValue)operator(()operator(\))operator(;)
        keyword(if) operator(()ident(value) operator(!=) predefined_constant(null) operator(&&) ident(element)operator(.)ident(type) operator(!=) string<delimiter(')content(file)delimiter(')> operator(&&) operator(()ident(element)operator(.)ident(type) operator(!=) string<delimiter(')content(submit)delimiter(')> operator(||) operator((!)ident(submitted) operator(&&)
            ident(submit) operator(!==) predefined_constant(false) operator(&&) operator((!)ident(submit) operator(||) ident(key) operator(==) ident(submit)operator(\)) operator(&&) operator(()ident(submitted) operator(=) predefined_constant(true)operator(\)\)\)\)) operator({)
          keyword(if) operator(()ident(key) keyword(in) ident(result)operator(\)) operator({)
            comment(// a key is already present; construct an array of values)
            keyword(if) operator((!)ident(Object)operator(.)ident(isArray)operator(()ident(result)operator([)ident(key)operator(]\)\)) ident(result)operator([)ident(key)operator(]) operator(=) operator([)ident(result)operator([)ident(key)operator(]])operator(;)
            ident(result)operator([)ident(key)operator(])operator(.)ident(push)operator(()ident(value)operator(\))operator(;)
          operator(})
          keyword(else) ident(result)operator([)ident(key)operator(]) operator(=) ident(value)operator(;)
        operator(})
      operator(})
      keyword(return) ident(result)operator(;)
    operator(}\))operator(;)

    keyword(return) ident(options)operator(.)ident(hash) operator(?) ident(data) operator(:) ident(Object)operator(.)ident(toQueryString)operator(()ident(data)operator(\))operator(;)
  operator(})
operator(})operator(;)

ident(Form)operator(.)ident(Methods) operator(=) operator({)
  function(serialize)operator(:) keyword(function)operator(()ident(form)operator(,) ident(options)operator(\)) operator({)
    keyword(return) ident(Form)operator(.)ident(serializeElements)operator(()ident(Form)operator(.)ident(getElements)operator(()ident(form)operator(\))operator(,) ident(options)operator(\))operator(;)
  operator(})operator(,)

  function(getElements)operator(:) keyword(function)operator(()ident(form)operator(\)) operator({)
    keyword(return) predefined($A)operator(()predefined($)operator(()ident(form)operator(\))operator(.)ident(getElementsByTagName)operator(()string<delimiter(')content(*)delimiter(')>operator(\)\))operator(.)ident(inject)operator(([)operator(])operator(,)
      keyword(function)operator(()ident(elements)operator(,) ident(child)operator(\)) operator({)
        keyword(if) operator(()ident(Form)operator(.)ident(Element)operator(.)ident(Serializers)operator([)ident(child)operator(.)ident(tagName)operator(.)ident(toLowerCase)operator(()operator(\)]\))
          ident(elements)operator(.)ident(push)operator(()ident(Element)operator(.)ident(extend)operator(()ident(child)operator(\)\))operator(;)
        keyword(return) ident(elements)operator(;)
      operator(})
    operator(\))operator(;)
  operator(})operator(,)

  function(getInputs)operator(:) keyword(function)operator(()ident(form)operator(,) ident(typeName)operator(,) ident(name)operator(\)) operator({)
    ident(form) operator(=) predefined($)operator(()ident(form)operator(\))operator(;)
    keyword(var) ident(inputs) operator(=) ident(form)operator(.)ident(getElementsByTagName)operator(()string<delimiter(')content(input)delimiter(')>operator(\))operator(;)

    keyword(if) operator((!)ident(typeName) operator(&&) operator(!)ident(name)operator(\)) keyword(return) predefined($A)operator(()ident(inputs)operator(\))operator(.)ident(map)operator(()ident(Element)operator(.)ident(extend)operator(\))operator(;)

    keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(,) ident(matchingInputs) operator(=) operator([)operator(])operator(,) ident(length) operator(=) ident(inputs)operator(.)ident(length)operator(;) ident(i) operator(<) ident(length)operator(;) ident(i)operator(++)operator(\)) operator({)
      keyword(var) ident(input) operator(=) ident(inputs)operator([)ident(i)operator(])operator(;)
      keyword(if) operator((()ident(typeName) operator(&&) ident(input)operator(.)ident(type) operator(!=) ident(typeName)operator(\)) operator(||) operator(()ident(name) operator(&&) ident(input)operator(.)ident(name) operator(!=) ident(name)operator(\)\))
        keyword(continue)operator(;)
      ident(matchingInputs)operator(.)ident(push)operator(()ident(Element)operator(.)ident(extend)operator(()ident(input)operator(\)\))operator(;)
    operator(})

    keyword(return) ident(matchingInputs)operator(;)
  operator(})operator(,)

  function(disable)operator(:) keyword(function)operator(()ident(form)operator(\)) operator({)
    ident(form) operator(=) predefined($)operator(()ident(form)operator(\))operator(;)
    ident(Form)operator(.)ident(getElements)operator(()ident(form)operator(\))operator(.)ident(invoke)operator(()string<delimiter(')content(disable)delimiter(')>operator(\))operator(;)
    keyword(return) ident(form)operator(;)
  operator(})operator(,)

  function(enable)operator(:) keyword(function)operator(()ident(form)operator(\)) operator({)
    ident(form) operator(=) predefined($)operator(()ident(form)operator(\))operator(;)
    ident(Form)operator(.)ident(getElements)operator(()ident(form)operator(\))operator(.)ident(invoke)operator(()string<delimiter(')content(enable)delimiter(')>operator(\))operator(;)
    keyword(return) ident(form)operator(;)
  operator(})operator(,)

  function(findFirstElement)operator(:) keyword(function)operator(()ident(form)operator(\)) operator({)
    keyword(var) ident(elements) operator(=) predefined($)operator(()ident(form)operator(\))operator(.)ident(getElements)operator(()operator(\))operator(.)ident(findAll)operator(()keyword(function)operator(()ident(element)operator(\)) operator({)
      keyword(return) string<delimiter(')content(hidden)delimiter(')> operator(!=) ident(element)operator(.)ident(type) operator(&&) operator(!)ident(element)operator(.)ident(disabled)operator(;)
    operator(}\))operator(;)
    keyword(var) ident(firstByIndex) operator(=) ident(elements)operator(.)ident(findAll)operator(()keyword(function)operator(()ident(element)operator(\)) operator({)
      keyword(return) ident(element)operator(.)ident(hasAttribute)operator(()string<delimiter(')content(tabIndex)delimiter(')>operator(\)) operator(&&) ident(element)operator(.)ident(tabIndex) operator(>=) integer(0)operator(;)
    operator(}\))operator(.)ident(sortBy)operator(()keyword(function)operator(()ident(element)operator(\)) operator({) keyword(return) ident(element)operator(.)ident(tabIndex) operator(}\))operator(.)ident(first)operator(()operator(\))operator(;)

    keyword(return) ident(firstByIndex) operator(?) ident(firstByIndex) operator(:) ident(elements)operator(.)ident(find)operator(()keyword(function)operator(()ident(element)operator(\)) operator({)
      keyword(return) operator([)string<delimiter(')content(input)delimiter(')>operator(,) string<delimiter(')content(select)delimiter(')>operator(,) string<delimiter(')content(textarea)delimiter(')>operator(])operator(.)ident(include)operator(()ident(element)operator(.)ident(tagName)operator(.)ident(toLowerCase)operator(()operator(\)\))operator(;)
    operator(}\))operator(;)
  operator(})operator(,)

  function(focusFirstElement)operator(:) keyword(function)operator(()ident(form)operator(\)) operator({)
    ident(form) operator(=) predefined($)operator(()ident(form)operator(\))operator(;)
    ident(form)operator(.)ident(findFirstElement)operator(()operator(\))operator(.)ident(activate)operator(()operator(\))operator(;)
    keyword(return) ident(form)operator(;)
  operator(})operator(,)

  function(request)operator(:) keyword(function)operator(()ident(form)operator(,) ident(options)operator(\)) operator({)
    ident(form) operator(=) predefined($)operator(()ident(form)operator(\))operator(,) ident(options) operator(=) ident(Object)operator(.)ident(clone)operator(()ident(options) operator(||) operator({) operator(}\))operator(;)

    keyword(var) ident(params) operator(=) ident(options)operator(.)ident(parameters)operator(,) ident(action) operator(=) ident(form)operator(.)ident(readAttribute)operator(()string<delimiter(')content(action)delimiter(')>operator(\)) operator(||) string<delimiter(')delimiter(')>operator(;)
    keyword(if) operator(()ident(action)operator(.)ident(blank)operator(()operator(\)\)) ident(action) operator(=) ident(window)operator(.)ident(location)operator(.)ident(href)operator(;)
    ident(options)operator(.)ident(parameters) operator(=) ident(form)operator(.)ident(serialize)operator(()predefined_constant(true)operator(\))operator(;)

    keyword(if) operator(()ident(params)operator(\)) operator({)
      keyword(if) operator(()ident(Object)operator(.)ident(isString)operator(()ident(params)operator(\)\)) ident(params) operator(=) ident(params)operator(.)ident(toQueryParams)operator(()operator(\))operator(;)
      ident(Object)operator(.)ident(extend)operator(()ident(options)operator(.)ident(parameters)operator(,) ident(params)operator(\))operator(;)
    operator(})

    keyword(if) operator(()ident(form)operator(.)ident(hasAttribute)operator(()string<delimiter(')content(method)delimiter(')>operator(\)) operator(&&) operator(!)ident(options)operator(.)ident(method)operator(\))
      ident(options)operator(.)ident(method) operator(=) ident(form)operator(.)ident(method)operator(;)

    keyword(return) keyword(new) ident(Ajax)operator(.)ident(Request)operator(()ident(action)operator(,) ident(options)operator(\))operator(;)
  operator(})
operator(})operator(;)

comment(/*--------------------------------------------------------------------------*/)

ident(Form)operator(.)ident(Element) operator(=) operator({)
  function(focus)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    predefined($)operator(()ident(element)operator(\))operator(.)ident(focus)operator(()operator(\))operator(;)
    keyword(return) ident(element)operator(;)
  operator(})operator(,)

  function(select)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    predefined($)operator(()ident(element)operator(\))operator(.)ident(select)operator(()operator(\))operator(;)
    keyword(return) ident(element)operator(;)
  operator(})
operator(})operator(;)

ident(Form)operator(.)ident(Element)operator(.)ident(Methods) operator(=) operator({)
  function(serialize)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    keyword(if) operator((!)ident(element)operator(.)ident(disabled) operator(&&) ident(element)operator(.)ident(name)operator(\)) operator({)
      keyword(var) ident(value) operator(=) ident(element)operator(.)ident(getValue)operator(()operator(\))operator(;)
      keyword(if) operator(()ident(value) operator(!=) predefined_constant(undefined)operator(\)) operator({)
        keyword(var) ident(pair) operator(=) operator({) operator(})operator(;)
        ident(pair)operator([)ident(element)operator(.)ident(name)operator(]) operator(=) ident(value)operator(;)
        keyword(return) ident(Object)operator(.)ident(toQueryString)operator(()ident(pair)operator(\))operator(;)
      operator(})
    operator(})
    keyword(return) string<delimiter(')delimiter(')>operator(;)
  operator(})operator(,)

  function(getValue)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    keyword(var) ident(method) operator(=) ident(element)operator(.)ident(tagName)operator(.)ident(toLowerCase)operator(()operator(\))operator(;)
    keyword(return) ident(Form)operator(.)ident(Element)operator(.)ident(Serializers)operator([)ident(method)operator(])operator(()ident(element)operator(\))operator(;)
  operator(})operator(,)

  function(setValue)operator(:) keyword(function)operator(()ident(element)operator(,) ident(value)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    keyword(var) ident(method) operator(=) ident(element)operator(.)ident(tagName)operator(.)ident(toLowerCase)operator(()operator(\))operator(;)
    ident(Form)operator(.)ident(Element)operator(.)ident(Serializers)operator([)ident(method)operator(])operator(()ident(element)operator(,) ident(value)operator(\))operator(;)
    keyword(return) ident(element)operator(;)
  operator(})operator(,)

  function(clear)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    predefined($)operator(()ident(element)operator(\))operator(.)ident(value) operator(=) string<delimiter(')delimiter(')>operator(;)
    keyword(return) ident(element)operator(;)
  operator(})operator(,)

  function(present)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    keyword(return) predefined($)operator(()ident(element)operator(\))operator(.)ident(value) operator(!=) string<delimiter(')delimiter(')>operator(;)
  operator(})operator(,)

  function(activate)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    keyword(try) operator({)
      ident(element)operator(.)ident(focus)operator(()operator(\))operator(;)
      keyword(if) operator(()ident(element)operator(.)ident(select) operator(&&) operator(()ident(element)operator(.)ident(tagName)operator(.)ident(toLowerCase)operator(()operator(\)) operator(!=) string<delimiter(')content(input)delimiter(')> operator(||)
          operator(![)string<delimiter(')content(button)delimiter(')>operator(,) string<delimiter(')content(reset)delimiter(')>operator(,) string<delimiter(')content(submit)delimiter(')>operator(])operator(.)ident(include)operator(()ident(element)operator(.)ident(type)operator(\)\)\))
        ident(element)operator(.)ident(select)operator(()operator(\))operator(;)
    operator(}) keyword(catch) operator(()ident(e)operator(\)) operator({) operator(})
    keyword(return) ident(element)operator(;)
  operator(})operator(,)

  function(disable)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    ident(element)operator(.)ident(disabled) operator(=) predefined_constant(true)operator(;)
    keyword(return) ident(element)operator(;)
  operator(})operator(,)

  function(enable)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    ident(element)operator(.)ident(disabled) operator(=) predefined_constant(false)operator(;)
    keyword(return) ident(element)operator(;)
  operator(})
operator(})operator(;)

comment(/*--------------------------------------------------------------------------*/)

keyword(var) ident(Field) operator(=) ident(Form)operator(.)ident(Element)operator(;)
keyword(var) predefined($F) operator(=) ident(Form)operator(.)ident(Element)operator(.)ident(Methods)operator(.)ident(getValue)operator(;)

comment(/*--------------------------------------------------------------------------*/)

ident(Form)operator(.)ident(Element)operator(.)ident(Serializers) operator(=) operator({)
  function(input)operator(:) keyword(function)operator(()ident(element)operator(,) ident(value)operator(\)) operator({)
    keyword(switch) operator(()ident(element)operator(.)ident(type)operator(.)ident(toLowerCase)operator(()operator(\)\)) operator({)
      keyword(case) string<delimiter(')content(checkbox)delimiter(')>operator(:)
      keyword(case) string<delimiter(')content(radio)delimiter(')>operator(:)
        keyword(return) ident(Form)operator(.)ident(Element)operator(.)ident(Serializers)operator(.)ident(inputSelector)operator(()ident(element)operator(,) ident(value)operator(\))operator(;)
      keyword(default)operator(:)
        keyword(return) ident(Form)operator(.)ident(Element)operator(.)ident(Serializers)operator(.)ident(textarea)operator(()ident(element)operator(,) ident(value)operator(\))operator(;)
    operator(})
  operator(})operator(,)

  function(inputSelector)operator(:) keyword(function)operator(()ident(element)operator(,) ident(value)operator(\)) operator({)
    keyword(if) operator(()ident(Object)operator(.)ident(isUndefined)operator(()ident(value)operator(\)\)) keyword(return) ident(element)operator(.)ident(checked) operator(?) ident(element)operator(.)ident(value) operator(:) predefined_constant(null)operator(;)
    keyword(else) ident(element)operator(.)ident(checked) operator(=) operator(!!)ident(value)operator(;)
  operator(})operator(,)

  function(textarea)operator(:) keyword(function)operator(()ident(element)operator(,) ident(value)operator(\)) operator({)
    keyword(if) operator(()ident(Object)operator(.)ident(isUndefined)operator(()ident(value)operator(\)\)) keyword(return) ident(element)operator(.)ident(value)operator(;)
    keyword(else) ident(element)operator(.)ident(value) operator(=) ident(value)operator(;)
  operator(})operator(,)

  function(select)operator(:) keyword(function)operator(()ident(element)operator(,) ident(value)operator(\)) operator({)
    keyword(if) operator(()ident(Object)operator(.)ident(isUndefined)operator(()ident(value)operator(\)\))
      keyword(return) local_variable(this)operator([)ident(element)operator(.)ident(type) operator(==) string<delimiter(')content(select-one)delimiter(')> operator(?)
        string<delimiter(')content(selectOne)delimiter(')> operator(:) string<delimiter(')content(selectMany)delimiter(')>operator(])operator(()ident(element)operator(\))operator(;)
    keyword(else) operator({)
      keyword(var) ident(opt)operator(,) ident(currentValue)operator(,) ident(single) operator(=) operator(!)ident(Object)operator(.)ident(isArray)operator(()ident(value)operator(\))operator(;)
      keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(,) ident(length) operator(=) ident(element)operator(.)ident(length)operator(;) ident(i) operator(<) ident(length)operator(;) ident(i)operator(++)operator(\)) operator({)
        ident(opt) operator(=) ident(element)operator(.)ident(options)operator([)ident(i)operator(])operator(;)
        ident(currentValue) operator(=) local_variable(this)operator(.)ident(optionValue)operator(()ident(opt)operator(\))operator(;)
        keyword(if) operator(()ident(single)operator(\)) operator({)
          keyword(if) operator(()ident(currentValue) operator(==) ident(value)operator(\)) operator({)
            ident(opt)operator(.)ident(selected) operator(=) predefined_constant(true)operator(;)
            keyword(return)operator(;)
          operator(})
        operator(})
        keyword(else) ident(opt)operator(.)ident(selected) operator(=) ident(value)operator(.)ident(include)operator(()ident(currentValue)operator(\))operator(;)
      operator(})
    operator(})
  operator(})operator(,)

  function(selectOne)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    keyword(var) ident(index) operator(=) ident(element)operator(.)ident(selectedIndex)operator(;)
    keyword(return) ident(index) operator(>=) integer(0) operator(?) local_variable(this)operator(.)ident(optionValue)operator(()ident(element)operator(.)ident(options)operator([)ident(index)operator(]\)) operator(:) predefined_constant(null)operator(;)
  operator(})operator(,)

  function(selectMany)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    keyword(var) ident(values)operator(,) ident(length) operator(=) ident(element)operator(.)ident(length)operator(;)
    keyword(if) operator((!)ident(length)operator(\)) keyword(return) predefined_constant(null)operator(;)

    keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(,) ident(values) operator(=) operator([)operator(])operator(;) ident(i) operator(<) ident(length)operator(;) ident(i)operator(++)operator(\)) operator({)
      keyword(var) ident(opt) operator(=) ident(element)operator(.)ident(options)operator([)ident(i)operator(])operator(;)
      keyword(if) operator(()ident(opt)operator(.)ident(selected)operator(\)) ident(values)operator(.)ident(push)operator(()local_variable(this)operator(.)ident(optionValue)operator(()ident(opt)operator(\)\))operator(;)
    operator(})
    keyword(return) ident(values)operator(;)
  operator(})operator(,)

  function(optionValue)operator(:) keyword(function)operator(()ident(opt)operator(\)) operator({)
    comment(// extend element because hasAttribute may not be native)
    keyword(return) ident(Element)operator(.)ident(extend)operator(()ident(opt)operator(\))operator(.)ident(hasAttribute)operator(()string<delimiter(')content(value)delimiter(')>operator(\)) operator(?) ident(opt)operator(.)ident(value) operator(:) ident(opt)operator(.)ident(text)operator(;)
  operator(})
operator(})operator(;)

comment(/*--------------------------------------------------------------------------*/)

ident(Abstract)operator(.)ident(TimedObserver) operator(=) ident(Class)operator(.)ident(create)operator(()ident(PeriodicalExecuter)operator(,) operator({)
  function(initialize)operator(:) keyword(function)operator(()predefined($super)operator(,) ident(element)operator(,) ident(frequency)operator(,) ident(callback)operator(\)) operator({)
    predefined($super)operator(()ident(callback)operator(,) ident(frequency)operator(\))operator(;)
    local_variable(this)operator(.)ident(element)   operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    local_variable(this)operator(.)ident(lastValue) operator(=) local_variable(this)operator(.)ident(getValue)operator(()operator(\))operator(;)
  operator(})operator(,)

  function(execute)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(var) ident(value) operator(=) local_variable(this)operator(.)ident(getValue)operator(()operator(\))operator(;)
    keyword(if) operator(()ident(Object)operator(.)ident(isString)operator(()local_variable(this)operator(.)ident(lastValue)operator(\)) operator(&&) ident(Object)operator(.)ident(isString)operator(()ident(value)operator(\)) operator(?)
        local_variable(this)operator(.)ident(lastValue) operator(!=) ident(value) operator(:) ident(String)operator(()local_variable(this)operator(.)ident(lastValue)operator(\)) operator(!=) ident(String)operator(()ident(value)operator(\)\)) operator({)
      local_variable(this)operator(.)ident(callback)operator(()local_variable(this)operator(.)ident(element)operator(,) ident(value)operator(\))operator(;)
      local_variable(this)operator(.)ident(lastValue) operator(=) ident(value)operator(;)
    operator(})
  operator(})
operator(}\))operator(;)

ident(Form)operator(.)ident(Element)operator(.)ident(Observer) operator(=) ident(Class)operator(.)ident(create)operator(()ident(Abstract)operator(.)ident(TimedObserver)operator(,) operator({)
  function(getValue)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(return) ident(Form)operator(.)ident(Element)operator(.)ident(getValue)operator(()local_variable(this)operator(.)ident(element)operator(\))operator(;)
  operator(})
operator(}\))operator(;)

ident(Form)operator(.)ident(Observer) operator(=) ident(Class)operator(.)ident(create)operator(()ident(Abstract)operator(.)ident(TimedObserver)operator(,) operator({)
  function(getValue)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(return) ident(Form)operator(.)ident(serialize)operator(()local_variable(this)operator(.)ident(element)operator(\))operator(;)
  operator(})
operator(}\))operator(;)

comment(/*--------------------------------------------------------------------------*/)

ident(Abstract)operator(.)ident(EventObserver) operator(=) ident(Class)operator(.)ident(create)operator(({)
  function(initialize)operator(:) keyword(function)operator(()ident(element)operator(,) ident(callback)operator(\)) operator({)
    local_variable(this)operator(.)ident(element)  operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
    local_variable(this)operator(.)ident(callback) operator(=) ident(callback)operator(;)

    local_variable(this)operator(.)ident(lastValue) operator(=) local_variable(this)operator(.)ident(getValue)operator(()operator(\))operator(;)
    keyword(if) operator(()local_variable(this)operator(.)ident(element)operator(.)ident(tagName)operator(.)ident(toLowerCase)operator(()operator(\)) operator(==) string<delimiter(')content(form)delimiter(')>operator(\))
      local_variable(this)operator(.)ident(registerFormCallbacks)operator(()operator(\))operator(;)
    keyword(else)
      local_variable(this)operator(.)ident(registerCallback)operator(()local_variable(this)operator(.)ident(element)operator(\))operator(;)
  operator(})operator(,)

  function(onElementEvent)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(var) ident(value) operator(=) local_variable(this)operator(.)ident(getValue)operator(()operator(\))operator(;)
    keyword(if) operator(()local_variable(this)operator(.)ident(lastValue) operator(!=) ident(value)operator(\)) operator({)
      local_variable(this)operator(.)ident(callback)operator(()local_variable(this)operator(.)ident(element)operator(,) ident(value)operator(\))operator(;)
      local_variable(this)operator(.)ident(lastValue) operator(=) ident(value)operator(;)
    operator(})
  operator(})operator(,)

  function(registerFormCallbacks)operator(:) keyword(function)operator(()operator(\)) operator({)
    ident(Form)operator(.)ident(getElements)operator(()local_variable(this)operator(.)ident(element)operator(\))operator(.)ident(each)operator(()local_variable(this)operator(.)ident(registerCallback)operator(,) local_variable(this)operator(\))operator(;)
  operator(})operator(,)

  function(registerCallback)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    keyword(if) operator(()ident(element)operator(.)ident(type)operator(\)) operator({)
      keyword(switch) operator(()ident(element)operator(.)ident(type)operator(.)ident(toLowerCase)operator(()operator(\)\)) operator({)
        keyword(case) string<delimiter(')content(checkbox)delimiter(')>operator(:)
        keyword(case) string<delimiter(')content(radio)delimiter(')>operator(:)
          ident(Event)operator(.)ident(observe)operator(()ident(element)operator(,) string<delimiter(')content(click)delimiter(')>operator(,) local_variable(this)operator(.)ident(onElementEvent)operator(.)ident(bind)operator(()local_variable(this)operator(\)\))operator(;)
          keyword(break)operator(;)
        keyword(default)operator(:)
          ident(Event)operator(.)ident(observe)operator(()ident(element)operator(,) string<delimiter(')content(change)delimiter(')>operator(,) local_variable(this)operator(.)ident(onElementEvent)operator(.)ident(bind)operator(()local_variable(this)operator(\)\))operator(;)
          keyword(break)operator(;)
      operator(})
    operator(})
  operator(})
operator(}\))operator(;)

ident(Form)operator(.)ident(Element)operator(.)ident(EventObserver) operator(=) ident(Class)operator(.)ident(create)operator(()ident(Abstract)operator(.)ident(EventObserver)operator(,) operator({)
  function(getValue)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(return) ident(Form)operator(.)ident(Element)operator(.)ident(getValue)operator(()local_variable(this)operator(.)ident(element)operator(\))operator(;)
  operator(})
operator(}\))operator(;)

ident(Form)operator(.)ident(EventObserver) operator(=) ident(Class)operator(.)ident(create)operator(()ident(Abstract)operator(.)ident(EventObserver)operator(,) operator({)
  function(getValue)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(return) ident(Form)operator(.)ident(serialize)operator(()local_variable(this)operator(.)ident(element)operator(\))operator(;)
  operator(})
operator(}\))operator(;)
keyword(if) operator((!)ident(window)operator(.)ident(Event)operator(\)) keyword(var) ident(Event) operator(=) operator({) operator(})operator(;)

ident(Object)operator(.)ident(extend)operator(()ident(Event)operator(,) operator({)
  key(KEY_BACKSPACE)operator(:) integer(8)operator(,)
  key(KEY_TAB)operator(:)       integer(9)operator(,)
  key(KEY_RETURN)operator(:)   integer(13)operator(,)
  key(KEY_ESC)operator(:)      integer(27)operator(,)
  key(KEY_LEFT)operator(:)     integer(37)operator(,)
  key(KEY_UP)operator(:)       integer(38)operator(,)
  key(KEY_RIGHT)operator(:)    integer(39)operator(,)
  key(KEY_DOWN)operator(:)     integer(40)operator(,)
  key(KEY_DELETE)operator(:)   integer(46)operator(,)
  key(KEY_HOME)operator(:)     integer(36)operator(,)
  key(KEY_END)operator(:)      integer(35)operator(,)
  key(KEY_PAGEUP)operator(:)   integer(33)operator(,)
  key(KEY_PAGEDOWN)operator(:) integer(34)operator(,)
  key(KEY_INSERT)operator(:)   integer(45)operator(,)

  key(cache)operator(:) operator({) operator(})operator(,)

  function(relatedTarget)operator(:) keyword(function)operator(()ident(event)operator(\)) operator({)
    keyword(var) ident(element)operator(;)
    keyword(switch)operator(()ident(event)operator(.)ident(type)operator(\)) operator({)
      keyword(case) string<delimiter(')content(mouseover)delimiter(')>operator(:) ident(element) operator(=) ident(event)operator(.)ident(fromElement)operator(;) keyword(break)operator(;)
      keyword(case) string<delimiter(')content(mouseout)delimiter(')>operator(:)  ident(element) operator(=) ident(event)operator(.)ident(toElement)operator(;)   keyword(break)operator(;)
      keyword(default)operator(:) keyword(return) predefined_constant(null)operator(;)
    operator(})
    keyword(return) ident(Element)operator(.)ident(extend)operator(()ident(element)operator(\))operator(;)
  operator(})
operator(}\))operator(;)

ident(Event)operator(.)ident(Methods) operator(=) operator(()keyword(function)operator(()operator(\)) operator({)
  keyword(var) ident(isButton)operator(;)

  keyword(if) operator(()ident(Prototype)operator(.)ident(Browser)operator(.)ident(IE)operator(\)) operator({)
    keyword(var) ident(buttonMap) operator(=) operator({) integer(0)operator(:) integer(1)operator(,) integer(1)operator(:) integer(4)operator(,) integer(2)operator(:) integer(2) operator(})operator(;)
    function(isButton) operator(=) keyword(function)operator(()ident(event)operator(,) ident(code)operator(\)) operator({)
      keyword(return) ident(event)operator(.)ident(button) operator(==) ident(buttonMap)operator([)ident(code)operator(])operator(;)
    operator(})operator(;)

  operator(}) keyword(else) keyword(if) operator(()ident(Prototype)operator(.)ident(Browser)operator(.)ident(WebKit)operator(\)) operator({)
    function(isButton) operator(=) keyword(function)operator(()ident(event)operator(,) ident(code)operator(\)) operator({)
      keyword(switch) operator(()ident(code)operator(\)) operator({)
        keyword(case) integer(0)operator(:) keyword(return) ident(event)operator(.)ident(which) operator(==) integer(1) operator(&&) operator(!)ident(event)operator(.)ident(metaKey)operator(;)
        keyword(case) integer(1)operator(:) keyword(return) ident(event)operator(.)ident(which) operator(==) integer(1) operator(&&) ident(event)operator(.)ident(metaKey)operator(;)
        keyword(default)operator(:) keyword(return) predefined_constant(false)operator(;)
      operator(})
    operator(})operator(;)

  operator(}) keyword(else) operator({)
    function(isButton) operator(=) keyword(function)operator(()ident(event)operator(,) ident(code)operator(\)) operator({)
      keyword(return) ident(event)operator(.)ident(which) operator(?) operator(()ident(event)operator(.)ident(which) operator(===) ident(code) operator(+) integer(1)operator(\)) operator(:) operator(()ident(event)operator(.)ident(button) operator(===) ident(code)operator(\))operator(;)
    operator(})operator(;)
  operator(})

  keyword(return) operator({)
    function(isLeftClick)operator(:)   keyword(function)operator(()ident(event)operator(\)) operator({) keyword(return) ident(isButton)operator(()ident(event)operator(,) integer(0)operator(\)) operator(})operator(,)
    function(isMiddleClick)operator(:) keyword(function)operator(()ident(event)operator(\)) operator({) keyword(return) ident(isButton)operator(()ident(event)operator(,) integer(1)operator(\)) operator(})operator(,)
    function(isRightClick)operator(:)  keyword(function)operator(()ident(event)operator(\)) operator({) keyword(return) ident(isButton)operator(()ident(event)operator(,) integer(2)operator(\)) operator(})operator(,)

    function(element)operator(:) keyword(function)operator(()ident(event)operator(\)) operator({)
      ident(event) operator(=) ident(Event)operator(.)ident(extend)operator(()ident(event)operator(\))operator(;)

      keyword(var) ident(node)          operator(=) ident(event)operator(.)ident(target)operator(,)
          ident(type)          operator(=) ident(event)operator(.)ident(type)operator(,)
          ident(currentTarget) operator(=) ident(event)operator(.)ident(currentTarget)operator(;)

      keyword(if) operator(()ident(currentTarget) operator(&&) ident(currentTarget)operator(.)ident(tagName)operator(\)) operator({)
        comment(// Firefox screws up the "click" event when moving between radio buttons)
        comment(// via arrow keys. It also screws up the "load" and "error" events on images,)
        comment(// reporting the document as the target instead of the original image.)
        keyword(if) operator(()ident(type) operator(===) string<delimiter(')content(load)delimiter(')> operator(||) ident(type) operator(===) string<delimiter(')content(error)delimiter(')> operator(||)
          operator(()ident(type) operator(===) string<delimiter(')content(click)delimiter(')> operator(&&) ident(currentTarget)operator(.)ident(tagName)operator(.)ident(toLowerCase)operator(()operator(\)) operator(===) string<delimiter(')content(input)delimiter(')>
            operator(&&) ident(currentTarget)operator(.)ident(type) operator(===) string<delimiter(')content(radio)delimiter(')>operator(\)\))
              ident(node) operator(=) ident(currentTarget)operator(;)
      operator(})
      keyword(if) operator(()ident(node)operator(.)ident(nodeType) operator(==) ident(Node)operator(.)ident(TEXT_NODE)operator(\)) ident(node) operator(=) ident(node)operator(.)ident(parentNode)operator(;)
      keyword(return) ident(Element)operator(.)ident(extend)operator(()ident(node)operator(\))operator(;)
    operator(})operator(,)

    function(findElement)operator(:) keyword(function)operator(()ident(event)operator(,) ident(expression)operator(\)) operator({)
      keyword(var) ident(element) operator(=) ident(Event)operator(.)ident(element)operator(()ident(event)operator(\))operator(;)
      keyword(if) operator((!)ident(expression)operator(\)) keyword(return) ident(element)operator(;)
      keyword(var) ident(elements) operator(=) operator([)ident(element)operator(])operator(.)ident(concat)operator(()ident(element)operator(.)ident(ancestors)operator(()operator(\)\))operator(;)
      keyword(return) ident(Selector)operator(.)ident(findElement)operator(()ident(elements)operator(,) ident(expression)operator(,) integer(0)operator(\))operator(;)
    operator(})operator(,)

    function(pointer)operator(:) keyword(function)operator(()ident(event)operator(\)) operator({)
      keyword(var) ident(docElement) operator(=) ident(document)operator(.)ident(documentElement)operator(,)
      ident(body) operator(=) ident(document)operator(.)ident(body) operator(||) operator({) key(scrollLeft)operator(:) integer(0)operator(,) key(scrollTop)operator(:) integer(0) operator(})operator(;)
      keyword(return) operator({)
        key(x)operator(:) ident(event)operator(.)ident(pageX) operator(||) operator(()ident(event)operator(.)ident(clientX) operator(+)
          operator(()ident(docElement)operator(.)ident(scrollLeft) operator(||) ident(body)operator(.)ident(scrollLeft)operator(\)) operator(-)
          operator(()ident(docElement)operator(.)ident(clientLeft) operator(||) integer(0)operator(\)\))operator(,)
        key(y)operator(:) ident(event)operator(.)ident(pageY) operator(||) operator(()ident(event)operator(.)ident(clientY) operator(+)
          operator(()ident(docElement)operator(.)ident(scrollTop) operator(||) ident(body)operator(.)ident(scrollTop)operator(\)) operator(-)
          operator(()ident(docElement)operator(.)ident(clientTop) operator(||) integer(0)operator(\)\))
      operator(})operator(;)
    operator(})operator(,)

    function(pointerX)operator(:) keyword(function)operator(()ident(event)operator(\)) operator({) keyword(return) ident(Event)operator(.)ident(pointer)operator(()ident(event)operator(\))operator(.)ident(x) operator(})operator(,)
    function(pointerY)operator(:) keyword(function)operator(()ident(event)operator(\)) operator({) keyword(return) ident(Event)operator(.)ident(pointer)operator(()ident(event)operator(\))operator(.)ident(y) operator(})operator(,)

    function(stop)operator(:) keyword(function)operator(()ident(event)operator(\)) operator({)
      ident(Event)operator(.)ident(extend)operator(()ident(event)operator(\))operator(;)
      ident(event)operator(.)ident(preventDefault)operator(()operator(\))operator(;)
      ident(event)operator(.)ident(stopPropagation)operator(()operator(\))operator(;)
      ident(event)operator(.)ident(stopped) operator(=) predefined_constant(true)operator(;)
    operator(})
  operator(})operator(;)
operator(}\))operator(()operator(\))operator(;)

ident(Event)operator(.)ident(extend) operator(=) operator(()keyword(function)operator(()operator(\)) operator({)
  keyword(var) ident(methods) operator(=) ident(Object)operator(.)ident(keys)operator(()ident(Event)operator(.)ident(Methods)operator(\))operator(.)ident(inject)operator(({) operator(})operator(,) keyword(function)operator(()ident(m)operator(,) ident(name)operator(\)) operator({)
    ident(m)operator([)ident(name)operator(]) operator(=) ident(Event)operator(.)ident(Methods)operator([)ident(name)operator(])operator(.)ident(methodize)operator(()operator(\))operator(;)
    keyword(return) ident(m)operator(;)
  operator(}\))operator(;)

  keyword(if) operator(()ident(Prototype)operator(.)ident(Browser)operator(.)ident(IE)operator(\)) operator({)
    ident(Object)operator(.)ident(extend)operator(()ident(methods)operator(,) operator({)
      function(stopPropagation)operator(:) keyword(function)operator(()operator(\)) operator({) local_variable(this)operator(.)ident(cancelBubble) operator(=) predefined_constant(true) operator(})operator(,)
      function(preventDefault)operator(:)  keyword(function)operator(()operator(\)) operator({) local_variable(this)operator(.)ident(returnValue) operator(=) predefined_constant(false) operator(})operator(,)
      function(inspect)operator(:) keyword(function)operator(()operator(\)) operator({) keyword(return) string<delimiter(")content([object Event])delimiter(")> operator(})
    operator(}\))operator(;)

    keyword(return) keyword(function)operator(()ident(event)operator(\)) operator({)
      keyword(if) operator((!)ident(event)operator(\)) keyword(return) predefined_constant(false)operator(;)
      keyword(if) operator(()ident(event)operator(.)ident(_extendedByPrototype)operator(\)) keyword(return) ident(event)operator(;)

      ident(event)operator(.)ident(_extendedByPrototype) operator(=) ident(Prototype)operator(.)ident(emptyFunction)operator(;)
      keyword(var) ident(pointer) operator(=) ident(Event)operator(.)ident(pointer)operator(()ident(event)operator(\))operator(;)
      ident(Object)operator(.)ident(extend)operator(()ident(event)operator(,) operator({)
        key(target)operator(:) ident(event)operator(.)ident(srcElement)operator(,)
        key(relatedTarget)operator(:) ident(Event)operator(.)ident(relatedTarget)operator(()ident(event)operator(\))operator(,)
        key(pageX)operator(:)  ident(pointer)operator(.)ident(x)operator(,)
        key(pageY)operator(:)  ident(pointer)operator(.)ident(y)
      operator(}\))operator(;)
      keyword(return) ident(Object)operator(.)ident(extend)operator(()ident(event)operator(,) ident(methods)operator(\))operator(;)
    operator(})operator(;)

  operator(}) keyword(else) operator({)
    ident(Event)operator(.)ident(prototype) operator(=) ident(Event)operator(.)ident(prototype) operator(||) ident(document)operator(.)ident(createEvent)operator(()string<delimiter(")content(HTMLEvents)delimiter(")>operator(\))operator([)string<delimiter(')content(__proto__)delimiter(')>operator(])operator(;)
    ident(Object)operator(.)ident(extend)operator(()ident(Event)operator(.)ident(prototype)operator(,) ident(methods)operator(\))operator(;)
    keyword(return) ident(Prototype)operator(.)ident(K)operator(;)
  operator(})
operator(}\))operator(()operator(\))operator(;)

ident(Object)operator(.)ident(extend)operator(()ident(Event)operator(,) operator(()keyword(function)operator(()operator(\)) operator({)
  keyword(var) ident(cache) operator(=) ident(Event)operator(.)ident(cache)operator(;)

  keyword(function) function(getEventID)operator(()ident(element)operator(\)) operator({)
    keyword(if) operator(()ident(element)operator(.)ident(_prototypeEventID)operator(\)) keyword(return) ident(element)operator(.)ident(_prototypeEventID)operator([)integer(0)operator(])operator(;)
    local_variable(arguments)operator(.)ident(callee)operator(.)ident(id) operator(=) local_variable(arguments)operator(.)ident(callee)operator(.)ident(id) operator(||) integer(1)operator(;)
    keyword(return) ident(element)operator(.)ident(_prototypeEventID) operator(=) operator([++)local_variable(arguments)operator(.)ident(callee)operator(.)ident(id)operator(])operator(;)
  operator(})

  keyword(function) function(getDOMEventName)operator(()ident(eventName)operator(\)) operator({)
    keyword(if) operator(()ident(eventName) operator(&&) ident(eventName)operator(.)ident(include)operator(()string<delimiter(')content(:)delimiter(')>operator(\)\)) keyword(return) string<delimiter(")content(dataavailable)delimiter(")>operator(;)
    keyword(return) ident(eventName)operator(;)
  operator(})

  keyword(function) function(getCacheForID)operator(()ident(id)operator(\)) operator({)
    keyword(return) ident(cache)operator([)ident(id)operator(]) operator(=) ident(cache)operator([)ident(id)operator(]) operator(||) operator({) operator(})operator(;)
  operator(})

  keyword(function) function(getWrappersForEventName)operator(()ident(id)operator(,) ident(eventName)operator(\)) operator({)
    keyword(var) ident(c) operator(=) ident(getCacheForID)operator(()ident(id)operator(\))operator(;)
    keyword(return) ident(c)operator([)ident(eventName)operator(]) operator(=) ident(c)operator([)ident(eventName)operator(]) operator(||) operator([)operator(])operator(;)
  operator(})

  keyword(function) function(createWrapper)operator(()ident(element)operator(,) ident(eventName)operator(,) ident(handler)operator(\)) operator({)
    keyword(var) ident(id) operator(=) ident(getEventID)operator(()ident(element)operator(\))operator(;)
    keyword(var) ident(c) operator(=) ident(getWrappersForEventName)operator(()ident(id)operator(,) ident(eventName)operator(\))operator(;)
    keyword(if) operator(()ident(c)operator(.)ident(pluck)operator(()string<delimiter(")content(handler)delimiter(")>operator(\))operator(.)ident(include)operator(()ident(handler)operator(\)\)) keyword(return) predefined_constant(false)operator(;)

    keyword(var) function(wrapper) operator(=) keyword(function)operator(()ident(event)operator(\)) operator({)
      keyword(if) operator((!)ident(Event) operator(||) operator(!)ident(Event)operator(.)ident(extend) operator(||)
        operator(()ident(event)operator(.)ident(eventName) operator(&&) ident(event)operator(.)ident(eventName) operator(!=) ident(eventName)operator(\)\))
          keyword(return) predefined_constant(false)operator(;)

      ident(Event)operator(.)ident(extend)operator(()ident(event)operator(\))operator(;)
      ident(handler)operator(.)ident(call)operator(()ident(element)operator(,) ident(event)operator(\))operator(;)
    operator(})operator(;)

    ident(wrapper)operator(.)ident(handler) operator(=) ident(handler)operator(;)
    ident(c)operator(.)ident(push)operator(()ident(wrapper)operator(\))operator(;)
    keyword(return) ident(wrapper)operator(;)
  operator(})

  keyword(function) function(findWrapper)operator(()ident(id)operator(,) ident(eventName)operator(,) ident(handler)operator(\)) operator({)
    keyword(var) ident(c) operator(=) ident(getWrappersForEventName)operator(()ident(id)operator(,) ident(eventName)operator(\))operator(;)
    keyword(return) ident(c)operator(.)ident(find)operator(()keyword(function)operator(()ident(wrapper)operator(\)) operator({) keyword(return) ident(wrapper)operator(.)ident(handler) operator(==) ident(handler) operator(}\))operator(;)
  operator(})

  keyword(function) function(destroyWrapper)operator(()ident(id)operator(,) ident(eventName)operator(,) ident(handler)operator(\)) operator({)
    keyword(var) ident(c) operator(=) ident(getCacheForID)operator(()ident(id)operator(\))operator(;)
    keyword(if) operator((!)ident(c)operator([)ident(eventName)operator(]\)) keyword(return) predefined_constant(false)operator(;)
    ident(c)operator([)ident(eventName)operator(]) operator(=) ident(c)operator([)ident(eventName)operator(])operator(.)ident(without)operator(()ident(findWrapper)operator(()ident(id)operator(,) ident(eventName)operator(,) ident(handler)operator(\)\))operator(;)
  operator(})

  keyword(function) function(destroyCache)operator(()operator(\)) operator({)
    keyword(for) operator(()keyword(var) ident(id) keyword(in) ident(cache)operator(\))
      keyword(for) operator(()keyword(var) ident(eventName) keyword(in) ident(cache)operator([)ident(id)operator(]\))
        ident(cache)operator([)ident(id)operator(])operator([)ident(eventName)operator(]) operator(=) predefined_constant(null)operator(;)
  operator(})


  comment(// Internet Explorer needs to remove event handlers on page unload)
  comment(// in order to avoid memory leaks.)
  keyword(if) operator(()ident(window)operator(.)ident(attachEvent)operator(\)) operator({)
    ident(window)operator(.)ident(attachEvent)operator(()string<delimiter(")content(onunload)delimiter(")>operator(,) ident(destroyCache)operator(\))operator(;)
  operator(})

  comment(// Safari has a dummy event handler on page unload so that it won't)
  comment(// use its bfcache. Safari <= 3.1 has an issue with restoring the "document")
  comment(// object when page is returned to via the back button using its bfcache.)
  keyword(if) operator(()ident(Prototype)operator(.)ident(Browser)operator(.)ident(WebKit)operator(\)) operator({)
    ident(window)operator(.)ident(addEventListener)operator(()string<delimiter(')content(unload)delimiter(')>operator(,) ident(Prototype)operator(.)ident(emptyFunction)operator(,) predefined_constant(false)operator(\))operator(;)
  operator(})

  keyword(return) operator({)
    function(observe)operator(:) keyword(function)operator(()ident(element)operator(,) ident(eventName)operator(,) ident(handler)operator(\)) operator({)
      ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
      keyword(var) ident(name) operator(=) ident(getDOMEventName)operator(()ident(eventName)operator(\))operator(;)

      keyword(var) ident(wrapper) operator(=) ident(createWrapper)operator(()ident(element)operator(,) ident(eventName)operator(,) ident(handler)operator(\))operator(;)
      keyword(if) operator((!)ident(wrapper)operator(\)) keyword(return) ident(element)operator(;)

      keyword(if) operator(()ident(element)operator(.)ident(addEventListener)operator(\)) operator({)
        ident(element)operator(.)ident(addEventListener)operator(()ident(name)operator(,) ident(wrapper)operator(,) predefined_constant(false)operator(\))operator(;)
      operator(}) keyword(else) operator({)
        ident(element)operator(.)ident(attachEvent)operator(()string<delimiter(")content(on)delimiter(")> operator(+) ident(name)operator(,) ident(wrapper)operator(\))operator(;)
      operator(})

      keyword(return) ident(element)operator(;)
    operator(})operator(,)

    function(stopObserving)operator(:) keyword(function)operator(()ident(element)operator(,) ident(eventName)operator(,) ident(handler)operator(\)) operator({)
      ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
      keyword(var) ident(id) operator(=) ident(getEventID)operator(()ident(element)operator(\))operator(,) ident(name) operator(=) ident(getDOMEventName)operator(()ident(eventName)operator(\))operator(;)

      keyword(if) operator((!)ident(handler) operator(&&) ident(eventName)operator(\)) operator({)
        ident(getWrappersForEventName)operator(()ident(id)operator(,) ident(eventName)operator(\))operator(.)ident(each)operator(()keyword(function)operator(()ident(wrapper)operator(\)) operator({)
          ident(element)operator(.)ident(stopObserving)operator(()ident(eventName)operator(,) ident(wrapper)operator(.)ident(handler)operator(\))operator(;)
        operator(}\))operator(;)
        keyword(return) ident(element)operator(;)

      operator(}) keyword(else) keyword(if) operator((!)ident(eventName)operator(\)) operator({)
        ident(Object)operator(.)ident(keys)operator(()ident(getCacheForID)operator(()ident(id)operator(\)\))operator(.)ident(each)operator(()keyword(function)operator(()ident(eventName)operator(\)) operator({)
          ident(element)operator(.)ident(stopObserving)operator(()ident(eventName)operator(\))operator(;)
        operator(}\))operator(;)
        keyword(return) ident(element)operator(;)
      operator(})

      keyword(var) ident(wrapper) operator(=) ident(findWrapper)operator(()ident(id)operator(,) ident(eventName)operator(,) ident(handler)operator(\))operator(;)
      keyword(if) operator((!)ident(wrapper)operator(\)) keyword(return) ident(element)operator(;)

      keyword(if) operator(()ident(element)operator(.)ident(removeEventListener)operator(\)) operator({)
        ident(element)operator(.)ident(removeEventListener)operator(()ident(name)operator(,) ident(wrapper)operator(,) predefined_constant(false)operator(\))operator(;)
      operator(}) keyword(else) operator({)
        ident(element)operator(.)ident(detachEvent)operator(()string<delimiter(")content(on)delimiter(")> operator(+) ident(name)operator(,) ident(wrapper)operator(\))operator(;)
      operator(})

      ident(destroyWrapper)operator(()ident(id)operator(,) ident(eventName)operator(,) ident(handler)operator(\))operator(;)

      keyword(return) ident(element)operator(;)
    operator(})operator(,)

    function(fire)operator(:) keyword(function)operator(()ident(element)operator(,) ident(eventName)operator(,) ident(memo)operator(\)) operator({)
      ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
      keyword(if) operator(()ident(element) operator(==) ident(document) operator(&&) ident(document)operator(.)ident(createEvent) operator(&&) operator(!)ident(element)operator(.)ident(dispatchEvent)operator(\))
        ident(element) operator(=) ident(document)operator(.)ident(documentElement)operator(;)

      keyword(var) ident(event)operator(;)
      keyword(if) operator(()ident(document)operator(.)ident(createEvent)operator(\)) operator({)
        ident(event) operator(=) ident(document)operator(.)ident(createEvent)operator(()string<delimiter(")content(HTMLEvents)delimiter(")>operator(\))operator(;)
        ident(event)operator(.)ident(initEvent)operator(()string<delimiter(")content(dataavailable)delimiter(")>operator(,) predefined_constant(true)operator(,) predefined_constant(true)operator(\))operator(;)
      operator(}) keyword(else) operator({)
        ident(event) operator(=) ident(document)operator(.)ident(createEventObject)operator(()operator(\))operator(;)
        ident(event)operator(.)ident(eventType) operator(=) string<delimiter(")content(ondataavailable)delimiter(")>operator(;)
      operator(})

      ident(event)operator(.)ident(eventName) operator(=) ident(eventName)operator(;)
      ident(event)operator(.)ident(memo) operator(=) ident(memo) operator(||) operator({) operator(})operator(;)

      keyword(if) operator(()ident(document)operator(.)ident(createEvent)operator(\)) operator({)
        ident(element)operator(.)ident(dispatchEvent)operator(()ident(event)operator(\))operator(;)
      operator(}) keyword(else) operator({)
        ident(element)operator(.)ident(fireEvent)operator(()ident(event)operator(.)ident(eventType)operator(,) ident(event)operator(\))operator(;)
      operator(})

      keyword(return) ident(Event)operator(.)ident(extend)operator(()ident(event)operator(\))operator(;)
    operator(})
  operator(})operator(;)
operator(}\))operator(()operator(\)\))operator(;)

ident(Object)operator(.)ident(extend)operator(()ident(Event)operator(,) ident(Event)operator(.)ident(Methods)operator(\))operator(;)

ident(Element)operator(.)ident(addMethods)operator(({)
  key(fire)operator(:)          ident(Event)operator(.)ident(fire)operator(,)
  key(observe)operator(:)       ident(Event)operator(.)ident(observe)operator(,)
  key(stopObserving)operator(:) ident(Event)operator(.)ident(stopObserving)
operator(}\))operator(;)

ident(Object)operator(.)ident(extend)operator(()ident(document)operator(,) operator({)
  key(fire)operator(:)          ident(Element)operator(.)ident(Methods)operator(.)ident(fire)operator(.)ident(methodize)operator(()operator(\))operator(,)
  key(observe)operator(:)       ident(Element)operator(.)ident(Methods)operator(.)ident(observe)operator(.)ident(methodize)operator(()operator(\))operator(,)
  key(stopObserving)operator(:) ident(Element)operator(.)ident(Methods)operator(.)ident(stopObserving)operator(.)ident(methodize)operator(()operator(\))operator(,)
  key(loaded)operator(:)        predefined_constant(false)
operator(}\))operator(;)

operator(()keyword(function)operator(()operator(\)) operator({)
  comment(/* Support for the DOMContentLoaded event is based on work by Dan Webb,
     Matthias Miller, Dean Edwards and John Resig. */)

  keyword(var) ident(timer)operator(;)

  keyword(function) function(fireContentLoadedEvent)operator(()operator(\)) operator({)
    keyword(if) operator(()ident(document)operator(.)ident(loaded)operator(\)) keyword(return)operator(;)
    keyword(if) operator(()ident(timer)operator(\)) ident(window)operator(.)ident(clearInterval)operator(()ident(timer)operator(\))operator(;)
    ident(document)operator(.)ident(fire)operator(()string<delimiter(")content(dom:loaded)delimiter(")>operator(\))operator(;)
    ident(document)operator(.)ident(loaded) operator(=) predefined_constant(true)operator(;)
  operator(})

  keyword(if) operator(()ident(document)operator(.)ident(addEventListener)operator(\)) operator({)
    keyword(if) operator(()ident(Prototype)operator(.)ident(Browser)operator(.)ident(WebKit)operator(\)) operator({)
      ident(timer) operator(=) ident(window)operator(.)ident(setInterval)operator(()keyword(function)operator(()operator(\)) operator({)
        keyword(if) operator(()regexp<delimiter(/)content(loaded|complete)delimiter(/)>operator(.)ident(test)operator(()ident(document)operator(.)ident(readyState)operator(\)\))
          ident(fireContentLoadedEvent)operator(()operator(\))operator(;)
      operator(})operator(,) integer(0)operator(\))operator(;)

      ident(Event)operator(.)ident(observe)operator(()ident(window)operator(,) string<delimiter(")content(load)delimiter(")>operator(,) ident(fireContentLoadedEvent)operator(\))operator(;)

    operator(}) keyword(else) operator({)
      ident(document)operator(.)ident(addEventListener)operator(()string<delimiter(")content(DOMContentLoaded)delimiter(")>operator(,)
        ident(fireContentLoadedEvent)operator(,) predefined_constant(false)operator(\))operator(;)
    operator(})

  operator(}) keyword(else) operator({)
    ident(document)operator(.)ident(write)operator(()string<delimiter(")content(<script id=__onDOMContentLoaded defer src=//:><)content(\\/)content(script>)delimiter(")>operator(\))operator(;)
    predefined($)operator(()string<delimiter(")content(__onDOMContentLoaded)delimiter(")>operator(\))operator(.)function(onreadystatechange) operator(=) keyword(function)operator(()operator(\)) operator({)
      keyword(if) operator(()local_variable(this)operator(.)ident(readyState) operator(==) string<delimiter(")content(complete)delimiter(")>operator(\)) operator({)
        local_variable(this)operator(.)ident(onreadystatechange) operator(=) predefined_constant(null)operator(;)
        ident(fireContentLoadedEvent)operator(()operator(\))operator(;)
      operator(})
    operator(})operator(;)
  operator(})
operator(}\))operator(()operator(\))operator(;)
comment(/*------------------------------- DEPRECATED -------------------------------*/)

ident(Hash)operator(.)ident(toQueryString) operator(=) ident(Object)operator(.)ident(toQueryString)operator(;)

keyword(var) ident(Toggle) operator(=) operator({) key(display)operator(:) ident(Element)operator(.)ident(toggle) operator(})operator(;)

ident(Element)operator(.)ident(Methods)operator(.)ident(childOf) operator(=) ident(Element)operator(.)ident(Methods)operator(.)ident(descendantOf)operator(;)

keyword(var) ident(Insertion) operator(=) operator({)
  function(Before)operator(:) keyword(function)operator(()ident(element)operator(,) ident(content)operator(\)) operator({)
    keyword(return) ident(Element)operator(.)ident(insert)operator(()ident(element)operator(,) operator({)key(before)operator(:)ident(content)operator(}\))operator(;)
  operator(})operator(,)

  function(Top)operator(:) keyword(function)operator(()ident(element)operator(,) ident(content)operator(\)) operator({)
    keyword(return) ident(Element)operator(.)ident(insert)operator(()ident(element)operator(,) operator({)key(top)operator(:)ident(content)operator(}\))operator(;)
  operator(})operator(,)

  function(Bottom)operator(:) keyword(function)operator(()ident(element)operator(,) ident(content)operator(\)) operator({)
    keyword(return) ident(Element)operator(.)ident(insert)operator(()ident(element)operator(,) operator({)key(bottom)operator(:)ident(content)operator(}\))operator(;)
  operator(})operator(,)

  function(After)operator(:) keyword(function)operator(()ident(element)operator(,) ident(content)operator(\)) operator({)
    keyword(return) ident(Element)operator(.)ident(insert)operator(()ident(element)operator(,) operator({)key(after)operator(:)ident(content)operator(}\))operator(;)
  operator(})
operator(})operator(;)

keyword(var) predefined($continue) operator(=) keyword(new) ident(Error)operator(()string<delimiter(')content("throw $continue" is deprecated, use "return" instead)delimiter(')>operator(\))operator(;)

comment(// This should be moved to script.aculo.us; notice the deprecated methods)
comment(// further below, that map to the newer Element methods.)
keyword(var) ident(Position) operator(=) operator({)
  comment(// set to true if needed, warning: firefox performance problems)
  comment(// NOT neeeded for page scrolling, only if draggable contained in)
  comment(// scrollable elements)
  key(includeScrollOffsets)operator(:) predefined_constant(false)operator(,)

  comment(// must be called before calling withinIncludingScrolloffset, every time the)
  comment(// page is scrolled)
  function(prepare)operator(:) keyword(function)operator(()operator(\)) operator({)
    local_variable(this)operator(.)ident(deltaX) operator(=)  ident(window)operator(.)ident(pageXOffset)
                operator(||) ident(document)operator(.)ident(documentElement)operator(.)ident(scrollLeft)
                operator(||) ident(document)operator(.)ident(body)operator(.)ident(scrollLeft)
                operator(||) integer(0)operator(;)
    local_variable(this)operator(.)ident(deltaY) operator(=)  ident(window)operator(.)ident(pageYOffset)
                operator(||) ident(document)operator(.)ident(documentElement)operator(.)ident(scrollTop)
                operator(||) ident(document)operator(.)ident(body)operator(.)ident(scrollTop)
                operator(||) integer(0)operator(;)
  operator(})operator(,)

  comment(// caches x/y coordinate pair to use with overlap)
  function(within)operator(:) keyword(function)operator(()ident(element)operator(,) ident(x)operator(,) ident(y)operator(\)) operator({)
    keyword(if) operator(()local_variable(this)operator(.)ident(includeScrollOffsets)operator(\))
      keyword(return) local_variable(this)operator(.)ident(withinIncludingScrolloffsets)operator(()ident(element)operator(,) ident(x)operator(,) ident(y)operator(\))operator(;)
    local_variable(this)operator(.)ident(xcomp) operator(=) ident(x)operator(;)
    local_variable(this)operator(.)ident(ycomp) operator(=) ident(y)operator(;)
    local_variable(this)operator(.)ident(offset) operator(=) ident(Element)operator(.)ident(cumulativeOffset)operator(()ident(element)operator(\))operator(;)

    keyword(return) operator(()ident(y) operator(>=) local_variable(this)operator(.)ident(offset)operator([)integer(1)operator(]) operator(&&)
            ident(y) operator(<)  local_variable(this)operator(.)ident(offset)operator([)integer(1)operator(]) operator(+) ident(element)operator(.)ident(offsetHeight) operator(&&)
            ident(x) operator(>=) local_variable(this)operator(.)ident(offset)operator([)integer(0)operator(]) operator(&&)
            ident(x) operator(<)  local_variable(this)operator(.)ident(offset)operator([)integer(0)operator(]) operator(+) ident(element)operator(.)ident(offsetWidth)operator(\))operator(;)
  operator(})operator(,)

  function(withinIncludingScrolloffsets)operator(:) keyword(function)operator(()ident(element)operator(,) ident(x)operator(,) ident(y)operator(\)) operator({)
    keyword(var) ident(offsetcache) operator(=) ident(Element)operator(.)ident(cumulativeScrollOffset)operator(()ident(element)operator(\))operator(;)

    local_variable(this)operator(.)ident(xcomp) operator(=) ident(x) operator(+) ident(offsetcache)operator([)integer(0)operator(]) operator(-) local_variable(this)operator(.)ident(deltaX)operator(;)
    local_variable(this)operator(.)ident(ycomp) operator(=) ident(y) operator(+) ident(offsetcache)operator([)integer(1)operator(]) operator(-) local_variable(this)operator(.)ident(deltaY)operator(;)
    local_variable(this)operator(.)ident(offset) operator(=) ident(Element)operator(.)ident(cumulativeOffset)operator(()ident(element)operator(\))operator(;)

    keyword(return) operator(()local_variable(this)operator(.)ident(ycomp) operator(>=) local_variable(this)operator(.)ident(offset)operator([)integer(1)operator(]) operator(&&)
            local_variable(this)operator(.)ident(ycomp) operator(<)  local_variable(this)operator(.)ident(offset)operator([)integer(1)operator(]) operator(+) ident(element)operator(.)ident(offsetHeight) operator(&&)
            local_variable(this)operator(.)ident(xcomp) operator(>=) local_variable(this)operator(.)ident(offset)operator([)integer(0)operator(]) operator(&&)
            local_variable(this)operator(.)ident(xcomp) operator(<)  local_variable(this)operator(.)ident(offset)operator([)integer(0)operator(]) operator(+) ident(element)operator(.)ident(offsetWidth)operator(\))operator(;)
  operator(})operator(,)

  comment(// within must be called directly before)
  function(overlap)operator(:) keyword(function)operator(()ident(mode)operator(,) ident(element)operator(\)) operator({)
    keyword(if) operator((!)ident(mode)operator(\)) keyword(return) integer(0)operator(;)
    keyword(if) operator(()ident(mode) operator(==) string<delimiter(')content(vertical)delimiter(')>operator(\))
      keyword(return) operator((()local_variable(this)operator(.)ident(offset)operator([)integer(1)operator(]) operator(+) ident(element)operator(.)ident(offsetHeight)operator(\)) operator(-) local_variable(this)operator(.)ident(ycomp)operator(\)) operator(/)
        ident(element)operator(.)ident(offsetHeight)operator(;)
    keyword(if) operator(()ident(mode) operator(==) string<delimiter(')content(horizontal)delimiter(')>operator(\))
      keyword(return) operator((()local_variable(this)operator(.)ident(offset)operator([)integer(0)operator(]) operator(+) ident(element)operator(.)ident(offsetWidth)operator(\)) operator(-) local_variable(this)operator(.)ident(xcomp)operator(\)) operator(/)
        ident(element)operator(.)ident(offsetWidth)operator(;)
  operator(})operator(,)

  comment(// Deprecation layer -- use newer Element methods now (1.5.2\).)

  key(cumulativeOffset)operator(:) ident(Element)operator(.)ident(Methods)operator(.)ident(cumulativeOffset)operator(,)

  key(positionedOffset)operator(:) ident(Element)operator(.)ident(Methods)operator(.)ident(positionedOffset)operator(,)

  function(absolutize)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    ident(Position)operator(.)ident(prepare)operator(()operator(\))operator(;)
    keyword(return) ident(Element)operator(.)ident(absolutize)operator(()ident(element)operator(\))operator(;)
  operator(})operator(,)

  function(relativize)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    ident(Position)operator(.)ident(prepare)operator(()operator(\))operator(;)
    keyword(return) ident(Element)operator(.)ident(relativize)operator(()ident(element)operator(\))operator(;)
  operator(})operator(,)

  key(realOffset)operator(:) ident(Element)operator(.)ident(Methods)operator(.)ident(cumulativeScrollOffset)operator(,)

  key(offsetParent)operator(:) ident(Element)operator(.)ident(Methods)operator(.)ident(getOffsetParent)operator(,)

  key(page)operator(:) ident(Element)operator(.)ident(Methods)operator(.)ident(viewportOffset)operator(,)

  function(clone)operator(:) keyword(function)operator(()ident(source)operator(,) ident(target)operator(,) ident(options)operator(\)) operator({)
    ident(options) operator(=) ident(options) operator(||) operator({) operator(})operator(;)
    keyword(return) ident(Element)operator(.)ident(clonePosition)operator(()ident(target)operator(,) ident(source)operator(,) ident(options)operator(\))operator(;)
  operator(})
operator(})operator(;)

comment(/*--------------------------------------------------------------------------*/)

keyword(if) operator((!)ident(document)operator(.)ident(getElementsByClassName)operator(\)) ident(document)operator(.)function(getElementsByClassName) operator(=) keyword(function)operator(()ident(instanceMethods)operator(\))operator({)
  keyword(function) function(iter)operator(()ident(name)operator(\)) operator({)
    keyword(return) ident(name)operator(.)ident(blank)operator(()operator(\)) operator(?) predefined_constant(null) operator(:) string<delimiter(")content([contains(concat(' ', @class, ' '\), ' )delimiter(")> operator(+) ident(name) operator(+) string<delimiter(")content( '\)])delimiter(")>operator(;)
  operator(})

  ident(instanceMethods)operator(.)ident(getElementsByClassName) operator(=) ident(Prototype)operator(.)ident(BrowserFeatures)operator(.)ident(XPath) operator(?)
  keyword(function)operator(()ident(element)operator(,) ident(className)operator(\)) operator({)
    ident(className) operator(=) ident(className)operator(.)ident(toString)operator(()operator(\))operator(.)ident(strip)operator(()operator(\))operator(;)
    keyword(var) ident(cond) operator(=) regexp<delimiter(/)char(\\s)delimiter(/)>operator(.)ident(test)operator(()ident(className)operator(\)) operator(?) predefined($w)operator(()ident(className)operator(\))operator(.)ident(map)operator(()ident(iter)operator(\))operator(.)ident(join)operator(()string<delimiter(')delimiter(')>operator(\)) operator(:) ident(iter)operator(()ident(className)operator(\))operator(;)
    keyword(return) ident(cond) operator(?) ident(document)operator(.)ident(_getElementsByXPath)operator(()string<delimiter(')content(.//*)delimiter(')> operator(+) ident(cond)operator(,) ident(element)operator(\)) operator(:) operator([)operator(])operator(;)
  operator(}) operator(:) keyword(function)operator(()ident(element)operator(,) ident(className)operator(\)) operator({)
    ident(className) operator(=) ident(className)operator(.)ident(toString)operator(()operator(\))operator(.)ident(strip)operator(()operator(\))operator(;)
    keyword(var) ident(elements) operator(=) operator([)operator(])operator(,) ident(classNames) operator(=) operator(()regexp<delimiter(/)char(\\s)delimiter(/)>operator(.)ident(test)operator(()ident(className)operator(\)) operator(?) predefined($w)operator(()ident(className)operator(\)) operator(:) predefined_constant(null)operator(\))operator(;)
    keyword(if) operator((!)ident(classNames) operator(&&) operator(!)ident(className)operator(\)) keyword(return) ident(elements)operator(;)

    keyword(var) ident(nodes) operator(=) predefined($)operator(()ident(element)operator(\))operator(.)ident(getElementsByTagName)operator(()string<delimiter(')content(*)delimiter(')>operator(\))operator(;)
    ident(className) operator(=) string<delimiter(')content( )delimiter(')> operator(+) ident(className) operator(+) string<delimiter(')content( )delimiter(')>operator(;)

    keyword(for) operator(()keyword(var) ident(i) operator(=) integer(0)operator(,) ident(child)operator(,) ident(cn)operator(;) ident(child) operator(=) ident(nodes)operator([)ident(i)operator(])operator(;) ident(i)operator(++)operator(\)) operator({)
      keyword(if) operator(()ident(child)operator(.)ident(className) operator(&&) operator(()ident(cn) operator(=) string<delimiter(')content( )delimiter(')> operator(+) ident(child)operator(.)ident(className) operator(+) string<delimiter(')content( )delimiter(')>operator(\)) operator(&&) operator(()ident(cn)operator(.)ident(include)operator(()ident(className)operator(\)) operator(||)
          operator(()ident(classNames) operator(&&) ident(classNames)operator(.)ident(all)operator(()keyword(function)operator(()ident(name)operator(\)) operator({)
            keyword(return) operator(!)ident(name)operator(.)ident(toString)operator(()operator(\))operator(.)ident(blank)operator(()operator(\)) operator(&&) ident(cn)operator(.)ident(include)operator(()string<delimiter(')content( )delimiter(')> operator(+) ident(name) operator(+) string<delimiter(')content( )delimiter(')>operator(\))operator(;)
          operator(}\)\)\)\))
        ident(elements)operator(.)ident(push)operator(()ident(Element)operator(.)ident(extend)operator(()ident(child)operator(\)\))operator(;)
    operator(})
    keyword(return) ident(elements)operator(;)
  operator(})operator(;)

  keyword(return) keyword(function)operator(()ident(className)operator(,) ident(parentElement)operator(\)) operator({)
    keyword(return) predefined($)operator(()ident(parentElement) operator(||) ident(document)operator(.)ident(body)operator(\))operator(.)ident(getElementsByClassName)operator(()ident(className)operator(\))operator(;)
  operator(})operator(;)
operator(})operator(()ident(Element)operator(.)ident(Methods)operator(\))operator(;)

comment(/*--------------------------------------------------------------------------*/)

ident(Element)operator(.)ident(ClassNames) operator(=) ident(Class)operator(.)ident(create)operator(()operator(\))operator(;)
ident(Element)operator(.)ident(ClassNames)operator(.)ident(prototype) operator(=) operator({)
  function(initialize)operator(:) keyword(function)operator(()ident(element)operator(\)) operator({)
    local_variable(this)operator(.)ident(element) operator(=) predefined($)operator(()ident(element)operator(\))operator(;)
  operator(})operator(,)

  function(_each)operator(:) keyword(function)operator(()ident(iterator)operator(\)) operator({)
    local_variable(this)operator(.)ident(element)operator(.)ident(className)operator(.)ident(split)operator(()regexp<delimiter(/)char(\\s)content(+)delimiter(/)>operator(\))operator(.)ident(select)operator(()keyword(function)operator(()ident(name)operator(\)) operator({)
      keyword(return) ident(name)operator(.)ident(length) operator(>) integer(0)operator(;)
    operator(}\))operator(.)ident(_each)operator(()ident(iterator)operator(\))operator(;)
  operator(})operator(,)

  function(set)operator(:) keyword(function)operator(()ident(className)operator(\)) operator({)
    local_variable(this)operator(.)ident(element)operator(.)ident(className) operator(=) ident(className)operator(;)
  operator(})operator(,)

  function(add)operator(:) keyword(function)operator(()ident(classNameToAdd)operator(\)) operator({)
    keyword(if) operator(()local_variable(this)operator(.)ident(include)operator(()ident(classNameToAdd)operator(\)\)) keyword(return)operator(;)
    local_variable(this)operator(.)ident(set)operator(()predefined($A)operator(()local_variable(this)operator(\))operator(.)ident(concat)operator(()ident(classNameToAdd)operator(\))operator(.)ident(join)operator(()string<delimiter(')content( )delimiter(')>operator(\)\))operator(;)
  operator(})operator(,)

  function(remove)operator(:) keyword(function)operator(()ident(classNameToRemove)operator(\)) operator({)
    keyword(if) operator((!)local_variable(this)operator(.)ident(include)operator(()ident(classNameToRemove)operator(\)\)) keyword(return)operator(;)
    local_variable(this)operator(.)ident(set)operator(()predefined($A)operator(()local_variable(this)operator(\))operator(.)ident(without)operator(()ident(classNameToRemove)operator(\))operator(.)ident(join)operator(()string<delimiter(')content( )delimiter(')>operator(\)\))operator(;)
  operator(})operator(,)

  function(toString)operator(:) keyword(function)operator(()operator(\)) operator({)
    keyword(return) predefined($A)operator(()local_variable(this)operator(\))operator(.)ident(join)operator(()string<delimiter(')content( )delimiter(')>operator(\))operator(;)
  operator(})
operator(})operator(;)

ident(Object)operator(.)ident(extend)operator(()ident(Element)operator(.)ident(ClassNames)operator(.)ident(prototype)operator(,) ident(Enumerable)operator(\))operator(;)

comment(/*--------------------------------------------------------------------------*/)

ident(Element)operator(.)ident(addMethods)operator(()operator(\))operator(;)