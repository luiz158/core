operator(()keyword(ns) namespace(clj-swing.example)
  operator(()symbol(:use) operator([)ident(clj-swing)  ident(core) ident(frame) ident(label) ident(button) ident(combo-box) keyword(list) ident(panel) ident(document) ident(text-field) ident(tree)operator(])operator(\))operator(\))

operator(()keyword(import) operator(')operator(()ident(javax.swing)  ident(UIManager)operator(\))
	operator(')operator(()ident(java.awt) ident(BasicStroke) ident(Color) ident(Dimension) ident(Graphics) ident(Graphics2D) ident(RenderingHints)operator(\))
	operator(')operator(()ident(java.awt.geom) ident(AffineTransform) ident(Ellipse2D)operator(\))
	operator(')operator(()ident(java.awt) ident(GridBagLayout) ident(FlowLayout) ident(GridLayout) ident(GridBagConstraints)operator(\))
	ident(clj-swing.tree.Pathed)operator(\))

operator(()keyword(def) function(sr) operator(()keyword(ref) operator(')operator([)string<delimiter(")content(Quick sort)delimiter(")> string<delimiter(")content(Bubble Sort)delimiter(")>operator(])operator(\))operator(\))
operator(()keyword(def) function(lm) operator(()keyword(ref) operator(')operator([)string<delimiter(")content(Bla)delimiter(")> string<delimiter(")content(Blubb)delimiter(")>operator(])operator(\))operator(\))
operator(()keyword(def) function(str-ref) operator(()keyword(ref) string<delimiter(")content(A String!)delimiter(")>operator(\))operator(\))

operator(()keyword(def) function(selected) operator(()keyword(atom) predefined_constant(nil)operator(\))operator(\))
operator(()keyword(def) function(nativeLF) operator(()keyword(.) ident(UIManager) ident(getSystemLookAndFeelClassName)operator(\))operator(\))

operator(()keyword(.) ident(UIManager) ident(setLookAndFeel) ident(nativeLF)operator(\))

operator(()keyword(defn) function(paint-donut) operator([)ident(g)operator(])
  operator(()keyword(let) operator([)ident(width) integer(360)
	ident(height) integer(310)
	ident(ellipse) operator(()keyword(new) ident(java.awt.geom.Ellipse2D$Double) integer(0) integer(0) integer(80) integer(130)operator(\))
	ident(at) operator(()ident(AffineTransform/getTranslateInstance) operator(()keyword(/) ident(width) integer(2)operator(\)) operator(()keyword(/) ident(height) integer(2)operator(\))operator(\))operator(])
    operator(()keyword(doto) ident(g)
      operator(()keyword(.)ident(setStroke) operator(()ident(BasicStroke.) integer(1)operator(\))operator(\))
      operator(()keyword(.)ident(setColor) operator(()keyword(.) ident(Color) ident(gray)operator(\))operator(\))operator(\))
    operator(()keyword(doseq) operator([)ident(i) operator(()keyword(range) integer(0) integer(361) integer(5)operator(\))operator(])
      operator(()keyword(.)ident(rotate) ident(g) operator(()ident(Math/toRadians) ident(i)operator(\))operator(\))
      operator(()keyword(.)ident(draw) ident(g) operator(()keyword(.)ident(createTransformedShape) ident(at) ident(ellipse)operator(\))operator(\))operator(\))operator(\))operator(\))

operator(()keyword(defn) function(graphics-example) operator([)operator(])
  operator(()ident(frame)
   symbol(:title) string<delimiter(")content(Graphics example)delimiter(")> 
   symbol(:show) predefined_constant(true) symbol(:pack) predefined_constant(true)
   operator([)ident(p) operator(()ident(panel)
       symbol(:preferred-size) operator([)integer(360) integer(310)operator(])
       symbol(:focusable) predefined_constant(true)
       symbol(:paint) operator(()operator([)ident(g)operator(])
		 operator(()keyword(proxy-super) ident(paintComponent) ident(g)operator(\))
		 operator(()ident(paint-donut) ident(g)operator(\))operator(\))operator(\))operator(])operator(\))operator(\))

operator(()keyword(defn) function(grid-bag-example) operator([)operator(])
  operator(()ident(frame) symbol(:title) string<delimiter(")content(Sort Visualizer)delimiter(")> symbol(:layout) operator(()ident(GridBagLayout.)operator(\)) symbol(:constrains) operator(()ident(java.awt.GridBagConstraints.)operator(\)) symbol(:name) ident(fr)
	 symbol(:show) predefined_constant(true) symbol(:pack) predefined_constant(true)
		  operator([)symbol(:gridx) integer(0) symbol(:gridy) integer(0) symbol(:anchor) symbol(:LINE_END)
		   ident(_) operator(()ident(label) string<delimiter(")content(Algorithms)delimiter(")>operator(\))
		   symbol(:gridy) integer(1)
		   ident(_) operator(()ident(label) string<delimiter(")content(Button)delimiter(")>operator(\))
		   symbol(:gridx) integer(1) symbol(:gridy) integer(0) symbol(:anchor) symbol(:LINE_START)
		   ident(_) operator(()ident(combo-box) operator([)operator(]) symbol(:model) operator(()ident(seq-ref-combobox-model) ident(sr) ident(selected)operator(\))operator(\))
		   symbol(:gridy) integer(1)
		   ident(_) operator(()ident(button) string<delimiter(")content(Run Algorithm)delimiter(")> 
			     symbol(:action) operator(()operator([)ident(_)operator(]) operator(()keyword(if) operator(@)ident(selected) operator(()keyword(dosync) operator(()keyword(alter) ident(lm) keyword(conj) operator(@)ident(selected)operator(\))operator(\))operator(\))operator(\))operator(\))
		   symbol(:gridx) integer(0) symbol(:gridy) integer(2) symbol(:gridwidth) integer(2) symbol(:anchor) symbol(:LINE_START)
		   ident(_) operator(()ident(text-field) symbol(:str-ref) ident(str-ref) symbol(:columns) integer(10)operator(\))
		   symbol(:gridx) integer(3) symbol(:gridy) integer(0) symbol(:gridheight) integer(3) symbol(:anchor) symbol(:CENTER)
		   ident(_) operator(()ident(scroll-panel) operator(()ident(jlist) symbol(:model) operator(()ident(seq-ref-list-model) ident(lm)operator(\))operator(\)) symbol(:preferred-size) operator([)integer(150) integer(100)operator(])operator(\))operator(])operator(\))operator(\))

operator(()keyword(defn) function(button-example) operator([)operator(])
  operator(()ident(frame) symbol(:title) string<delimiter(")content(A Button Example)delimiter(")>
	 symbol(:layout) operator(()ident(FlowLayout.)operator(\))
	 symbol(:size) operator([)integer(220) integer(90)operator(])
	 symbol(:show) predefined_constant(true)
	 operator([)ident(b1) operator(()ident(button) string<delimiter(")content(First)delimiter(")>operator(\))
	  ident(b2) operator(()ident(button) string<delimiter(")content(Second)delimiter(")>operator(\))
	  ident(lab) operator(()ident(label) string<delimiter(")content(Press a button)delimiter(")>operator(\))operator(])
	 operator(()ident(add-action-listener) ident(b1) operator(()operator([)ident(e)operator(]) operator(()keyword(println) string<delimiter(")content(listener called)delimiter(")>operator(\))operator(\))operator(\))operator(\))operator(\))

operator(()keyword(defn) function(tree-example) operator([)operator(])
  operator(()keyword(let) operator([)ident(sr) operator(()keyword(ref) string<delimiter(")delimiter(")>operator(\))
	ident(m) operator(()keyword(ref) operator({)operator({)symbol(:name) string<delimiter(")content(Cookies)delimiter(")>operator(}) operator({)operator({)symbol(:name) string<delimiter(")content(Chocolat)delimiter(")>operator(}) integer(1) operator({)symbol(:name) string<delimiter(")content(Vanilla)delimiter(")>operator(}) operator({) operator({)symbol(:name) string<delimiter(")content(with sparkles)delimiter(")>operator(}) integer(2) operator({)symbol(:name) string<delimiter(")content(without sparkles)delimiter(")>operator(}) integer(3)operator(})operator(})operator(})operator(\))
	ident(path) operator(()keyword(atom) predefined_constant(nil)operator(\))operator(])
  operator(()ident(frame) symbol(:title) string<delimiter(")content(Tree example)delimiter(")> symbol(:show) predefined_constant(true) symbol(:size) operator([)integer(400) integer(200)operator(])
	 operator([)ident(_) operator(()ident(stack)
	     operator([)ident(tf) operator(()ident(text-field) symbol(:str-ref) ident(sr)operator(\))
	      ident(_) operator(()ident(tree)
		 symbol(:name) ident(tr)
		 symbol(:action) operator(()operator([)ident(old) keyword(new)operator(])
			    operator(()keyword(prn) operator(()keyword(.)ident(getSelectionPath) ident(tr)operator(\))operator(\))
			    operator(()keyword(if) keyword(new)
			      operator(()keyword(dosync)
			       operator(()keyword(swap!) ident(path) operator(()keyword(constantly) keyword(new)operator(\))operator(\))
			       operator(()keyword(alter) ident(sr) operator(()keyword(constantly) operator(()symbol(:name) operator(()keyword(last) keyword(new)operator(\))operator(\))operator(\))operator(\))operator(\))operator(\))operator(\))
		 symbol(:model) operator(()ident(mapref-tree-model) ident(m) operator({)symbol(:name) string<delimiter(")content(Food)delimiter(")>operator(})
					   symbol(:node-wrapper) operator(()keyword(fn) operator([)ident(node) ident(path)operator(]) operator(()ident(Pathed.) ident(node) operator(()keyword(str) operator(()symbol(:name) ident(node)operator(\))operator(\)) ident(path)operator(\))operator(\))operator(\))operator(\))operator(])
	     operator(()ident(add-action-listener)
	      ident(tf)
	      operator(()operator([)ident(_)operator(])
		 operator(()keyword(dosync)
		  operator(()keyword(let) operator([)ident(c) operator(()keyword(get-in) operator(@)ident(m) operator(@)ident(path)operator(\))operator(])
		    operator(()keyword(prn) integer(10) ident(c) operator(@)ident(sr) operator(@)ident(m)operator(\))
		    operator(()keyword(if-let) operator([)ident(r) operator(()keyword(butlast) operator(@)ident(path)operator(\))operator(])
		      operator(()keyword(do)
			operator(()keyword(alter) ident(m) keyword(update-in) ident(r) keyword(dissoc) operator(()keyword(last) operator(@)ident(path)operator(\))operator(\))
			operator(()keyword(alter) ident(m) keyword(update-in) ident(r) keyword(assoc) operator({)symbol(:name) operator(@)ident(sr)operator(}) ident(c)operator(\))operator(\))
		      operator(()keyword(do)
			operator(()keyword(alter) ident(m) keyword(dissoc) operator(()keyword(last) operator(@)ident(path)operator(\))operator(\))
			operator(()keyword(alter) ident(m) keyword(assoc) operator({)symbol(:name) operator(@)ident(sr)operator(}) ident(c)operator(\))operator(\))operator(\))operator(\))operator(\))
		 operator(()keyword(prn) operator(@)ident(m)operator(\))operator(\))operator(\))operator(\))operator(])operator(\))operator(\))operator(\))