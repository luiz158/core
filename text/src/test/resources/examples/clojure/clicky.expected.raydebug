operator(()keyword(ns) namespace(clicky)
  operator(()symbol(:use) ident(compojure)operator(\))
  operator(()symbol(:use) ident(net.licenser.sandbox)operator(\))
  operator(()symbol(:use) ident(net.licenser.sandbox.matchers)operator(\))
  operator(()symbol(:require)  operator([)ident(clojure.contrib.str-utils2) symbol(:as) ident(su)operator(])operator(\))
  operator(()symbol(:use) ident(clojure.contrib.duck-streams)operator(\))
  operator(()symbol(:gen-class)operator(\))operator(\))
  
  
operator(()keyword(def) function(*data-dir*) string<delimiter(")content(./data)delimiter(")>operator(\))

operator(()keyword(def) function(*base-name*) string<delimiter(")content(clicky.sandbox)delimiter(")>operator(\))

operator(()keyword(defn) function(parital-namespace-matcher)
  string<delimiter(")content(Creates a tester that whitelists all functions within a namespace.)delimiter(")>
  operator([)ident(&) ident(namespaces)operator(])
  operator(()keyword(fn) operator([)ident(form)operator(])
    operator(()keyword(cond)
     operator(()keyword(=) operator(()keyword(type) ident(form)operator(\)) ident(clojure.lang.Var)operator(\))
     operator(()keyword(let) operator([)keyword(ns) operator(()keyword(str) operator(()keyword(ns-name) operator(()symbol(:ns) operator(()keyword(meta) ident(form)operator(\))operator(\))operator(\))operator(\))operator(])
       operator(()keyword(map) operator(#()keyword(zero?) operator(()keyword(.)ident(indexOf) keyword(ns) operator(()keyword(str) ident(%)operator(\))operator(\))operator(\)) ident(namespaces)operator(\))operator(\))
     operator(()keyword(=) operator(()keyword(type) ident(form)operator(\)) ident(java.lang.Class)operator(\))
     operator(()keyword(let) operator([)keyword(ns) operator(()keyword(second) operator(()keyword(re-find) regexp<delimiter(#")content(^class (.*\))content(\\.)content(\\w)content(+$)delimiter(")> operator(()keyword(str) ident(form)operator(\))operator(\))operator(\))operator(])
       operator(()keyword(map) operator(#()keyword(zero?) operator(()keyword(.)ident(indexOf) keyword(ns) operator(()keyword(str) ident(%)operator(\))operator(\))operator(\)) ident(namespaces)operator(\))operator(\))
     predefined_constant(true)
      operator(')operator(()operator(\))operator(\))operator(\))operator(\))

operator(()keyword(def) function(*tester*) operator(()ident(extend-tester) ident(secure-tester) operator(()ident(whitelist) operator(()ident(function-matcher) operator(')keyword(def) operator(')keyword(require) operator(')keyword(use)operator(\)) operator(()ident(parital-namespace-matcher) operator(')ident(clicky.sandbox)operator(\))operator(\))operator(\))operator(\))

operator(()keyword(defn) function(page)
  operator([)ident(&) ident(body)operator(])
  operator(()ident(html) operator([)symbol(:title) string<delimiter(")content(Clicky! Bunti!)delimiter(")>operator(]) operator(()keyword(vec) operator(()keyword(concat) operator([)symbol(:body)operator(]) ident(body)operator(\))operator(\))operator(\))operator(\))

operator(()keyword(defn) function(uri-to-ns)
  operator([)ident(uri)operator(])
  operator(()keyword(symbol) operator(()ident(su/replace) operator(()ident(su/drop) ident(uri) integer(1)operator(\)) char(\\/) char(\\.)operator(\))operator(\))operator(\))

operator(()keyword(defn) function(exec-file)
  operator([)ident(file) keyword(ns)operator(])
  operator(()keyword(let) operator([)ident(sb) operator(()ident(new-sandbox-compiler) symbol(:namespace) keyword(ns) symbol(:tester) ident(*tester*) symbol(:timeout) integer(500)operator(\))operator(])
    operator(()keyword(with-open) operator([)ident(r) operator(()ident(java.io.PushbackReader.) operator(()ident(reader) ident(file)operator(\))operator(\))operator(]) operator(()operator(()ident(sb) operator(()keyword(read) ident(r)operator(\))operator(\)) operator({)operator(})operator(\))operator(\))operator(\))operator(\))

operator(()keyword(defn) function(run-file)
  operator([)keyword(ns) namespace(file) ident(uri)operator(])
  operator(()keyword(let) operator([)keyword(ns) operator(()keyword(symbol) operator(()keyword(str) ident(*base-name*) string<delimiter(")content(.)delimiter(")> keyword(ns)operator(\))operator(\))operator(])
    operator(()keyword(try)
     operator(()keyword(let) operator([)ident(res) operator(()ident(exec-file) ident(file) keyword(ns)operator(\))operator(])
      operator(()ident(page) operator([)symbol(:body) ident(res) operator([)symbol(:p) operator([)symbol(:a) operator({)symbol(:href) operator(()keyword(str) ident(uri) string<delimiter(")content(?edit=)delimiter(")>operator(\)) operator(}) string<delimiter(")content(edit)delimiter(")>operator(])operator(])operator(])operator(\))operator(\))
     operator(()keyword(catch) ident(Exception) ident(e)
       operator(()ident(page) operator([)symbol(:body) ident(e)operator(])operator(\))operator(\))operator(\))operator(\))operator(\))

operator(()keyword(defn) function(clicly-handler) operator([)ident(request)operator(])
  operator(()ident(html)operator(\))operator(\))
  
operator(()keyword(defn) function(uri-to-file-name)
  operator([)ident(uri)operator(])
  operator(()keyword(str) ident(*data-dir*)  ident(uri) string<delimiter(")content(.clj)delimiter(")>operator(\))operator(\))

operator(()ident(defroutes) ident(my-app)
  operator(()ident(GET) string<delimiter(")content(/)delimiter(")>
       operator(()ident(html) operator([)symbol(:h1) string<delimiter(")content(Hello World)delimiter(")>operator(])operator(\))operator(\))
  operator(()ident(GET) string<delimiter(")content(*)delimiter(")>
       operator(()keyword(let) operator([)ident(uri) operator(()symbol(:uri) ident(request)operator(\))
	     ident(file-name) operator(()ident(uri-to-file-name) ident(uri)operator(\))
	     ident(file) operator(()ident(java.io.File.) ident(file-name)operator(\))operator(])
	 operator(()keyword(if) operator(()keyword(or) operator(()symbol(:edit) ident(params)operator(\)) operator(()keyword(not) operator(()keyword(.)ident(exists) ident(file)operator(\))operator(\))operator(\))
	   operator(()ident(page) operator([)symbol(:form) operator({)symbol(:action) operator(()symbol(:uri) ident(request)operator(\)) symbol(:method) symbol(:post)operator(})
		  operator([)symbol(:textarea) operator({)symbol(:name) string<delimiter(")content(code)delimiter(")>operator(}) operator(()keyword(if) operator(()keyword(.)ident(exists) ident(file)operator(\)) operator(()ident(read-lines) ident(file-name)operator(\))operator(\))operator(]) symbol(:br) operator([)symbol(:input)  operator({)symbol(:type) string<delimiter(")content(submit)delimiter(")> symbol(:value) string<delimiter(")content(Save)delimiter(")>operator(})operator(])operator(])operator(\))
	   operator(()ident(run-file) operator(()ident(uri-to-ns) ident(uri)operator(\)) ident(file) ident(uri)operator(\))operator(\))operator(\))operator(\))
  operator(()ident(POST) string<delimiter(")content(*)delimiter(")>
	operator(()keyword(let) operator([)ident(uri) operator(()symbol(:uri) ident(request)operator(\))
	      ident(file-name) operator(()ident(uri-to-file-name) ident(uri)operator(\))
	      ident(file) operator(()ident(java.io.File.) ident(file-name)operator(\))
	      ident(code) operator(()symbol(:code) operator(()symbol(:form-params) ident(request)operator(\))operator(\))operator(])
	  operator(()keyword(try)
	   operator(()keyword(read-string) ident(code)operator(\))
	   operator(()keyword(.)ident(mkdirs) operator(()keyword(.)ident(getParentFile) ident(file)operator(\))operator(\))
	   operator(()ident(spit) ident(file-name) ident(code)operator(\))
	   operator(()ident(run-file) operator(()ident(uri-to-ns) ident(uri)operator(\)) ident(file) ident(uri)operator(\))
	   operator(()keyword(catch) ident(Exception) ident(e) operator(()ident(page) operator([)symbol(:h1) string<delimiter(")content(Ohhh no! The code could not be read!)delimiter(")>operator(]) operator([)symbol(:pre) ident(code)operator(]) ident(e)operator(\))operator(\))operator(\))operator(\))operator(\))operator(\))

operator(()keyword(defn) function(first-update) operator([)operator(])
  operator(()keyword(let) operator([)ident(files) operator(()keyword(filter) operator(#()keyword(.)ident(isFile) ident(%)operator(\)) operator(()keyword(file-seq) operator(()ident(java.io.File.) ident(*data-dir*)operator(\))operator(\))operator(\))operator(])
    operator(()keyword(loop) operator([)ident(c) operator(()keyword(*) operator(()keyword(count) ident(files)operator(\)) operator(()keyword(count) ident(files)operator(\))operator(\))operator(])
      operator(()keyword(if) 
	  operator(()keyword(try)
	   operator(()keyword(dorun)
	    operator(()keyword(map) operator(#()keyword(apply) ident(exec-file) ident(%)operator(\))
		 operator(()keyword(sort-by) operator(()keyword(fn) operator([)ident(&) ident(_)operator(]) operator(()keyword(rand-int) integer(42)operator(\))operator(\)) operator(()keyword(map) 
						    operator(()keyword(fn) operator([)ident(file)operator(]) operator(()keyword(vector) ident(file) operator(()keyword(symbol) operator(()keyword(str) ident(*base-name*) string<delimiter(")content(.)delimiter(")> operator(()ident(su/replace) operator(()keyword(second) operator(()keyword(re-find) regexp<delimiter(#")content(^)content(\\.)content(/data/(.*\))content(\\.)content(clj$)delimiter(")> operator(()keyword(str) ident(file)operator(\))operator(\))operator(\)) char(\\/) char(\\.)operator(\))operator(\))operator(\))operator(\))operator(\))
						    ident(files)operator(\))operator(\))operator(\))operator(\))
	   predefined_constant(true)
	   operator(()keyword(catch) ident(Exception) ident(e) predefined_constant(false)operator(\))operator(\))
	predefined_constant(true) operator(()keyword(if) operator(()keyword(>) ident(c) integer(0)operator(\)) operator(()keyword(recur) operator(()keyword(dec) ident(c)operator(\))operator(\))operator(\))operator(\))operator(\))operator(\))operator(\))

operator(()keyword(defn) function(-main) operator([)operator(])
  operator(()ident(first-update)operator(\))
  operator(()ident(run-server) operator({)symbol(:port) integer(8080)operator(})
	      string<delimiter(")content(/*)delimiter(")> operator(()ident(servlet) ident(my-app)operator(\))operator(\))operator(\))
