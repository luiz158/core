operator(()keyword(ns) namespace(clj-highlight.core)
  operator(()symbol(:use) ident(clj-highlight.mangler)operator(\))
  operator(()symbol(:import) ident(java.util.Scanner)operator(\))operator(\))


operator(()keyword(defn-) function(next-token) operator([)ident(s) ident(idx) ident(token-def) ident(defs) ident(states)operator(])
  operator(()keyword(if) operator(()keyword(empty?) ident(defs)operator(\))
    operator([)operator([)symbol(:error) operator(()keyword(str) operator(()keyword(first) operator(()keyword(subs) ident(s) ident(idx)operator(\))operator(\))operator(\))  operator({)symbol(:state) ident(states) symbol(:index) ident(idx)operator(})operator(]) ident(states) ident(token-def) operator(()keyword(get) ident(token-def) operator(()keyword(first) ident(states)operator(\))operator(\))operator(])
    operator(()keyword(let) operator([)operator([)ident(matcher) ident(&) ident(defs)operator(]) ident(defs)operator(]) 
      operator(()keyword(if-let) operator([)ident(result) operator(()ident(matcher) ident(s) ident(idx) ident(states) ident(token-def)operator(\))operator(])
	ident(result)
	operator(()keyword(recur) ident(s) ident(idx) ident(token-def) ident(defs) ident(states)operator(\))operator(\))operator(\))operator(\))operator(\))

operator(()keyword(defn-) function(token-seq*) operator([)ident(s) ident(idx) ident(size) ident(token-def) ident(defs) ident(states)operator(]) 
  operator(()keyword(lazy-seq)
   operator(()keyword(if) operator(()keyword(=) ident(idx) ident(size)operator(\))
     operator(')operator(()operator(\))
     operator(()keyword(let) operator([)operator([)ident(token) ident(states) ident(token-def) ident(defs)operator(]) operator(()ident(next-token) ident(s) ident(idx) ident(token-def) ident(defs) ident(states)operator(\))operator(])
       operator(()keyword(cons) ident(token) operator(()ident(token-seq*) ident(s) operator(()keyword(+) ident(idx) operator(()keyword(count) operator(()keyword(fnext) ident(token)operator(\))operator(\))operator(\)) ident(size) ident(token-def) ident(defs) ident(states)operator(\))operator(\))operator(\))operator(\))operator(\))operator(\))

operator(()keyword(defn) function(tokenizer) 
  string<delimiter(")content(Creates a tokenizer for a given syntax definition.)delimiter(")>
  operator([)ident(syntax)operator(])
  operator(()keyword(let) operator([)ident(tkn)
    	operator(()keyword(fn) ident(tokenizer*)
	  operator(()operator([)ident(string) ident(state)operator(])
	     operator(()ident(token-seq*) ident(string) integer(0) operator(()keyword(count) ident(string)operator(\)) ident(syntax) operator(()keyword(get) ident(syntax) ident(state)operator(\)) operator(()keyword(list) ident(state)operator(\))operator(\))operator(\))
	  operator(()operator([)ident(string)operator(])
	  operator(()ident(tokenizer*) ident(string) symbol(:initial)operator(\))operator(\))operator(\))operator(])
    operator(()keyword(if-let) operator([)ident(keywords) operator(()symbol(:keywords) ident(syntax)operator(\))operator(])
      operator(()ident(mangle-tokens) symbol(:identifier) operator(()keyword(fn) operator([)ident(k) ident(t) ident(s)operator(]) operator(()keyword(if) operator(()ident(keywords) ident(t)operator(\)) operator([)symbol(:keyword) ident(t) ident(s)operator(]) operator([)ident(k) ident(t) ident(s)operator(])operator(\))operator(\)) ident(tkn)operator(\))
      ident(tkn)operator(\))operator(\))operator(\))

operator(()keyword(defn) function(highlighter)
  string<delimiter(")content(Creates a highlighter consisting of a given syntax, a output generator and a set of manglers.
The manglers are applied to the token stream in the order before it is passed to the output generator.)delimiter(")>
  operator([)ident(syntax) ident(output) ident(&) ident(manglers)operator(])
  operator(()keyword(let) operator([)ident(tkn) operator(()keyword(reduce) operator(()keyword(fn) operator([)ident(tkn) ident(mgl)operator(]) operator(()ident(mgl) ident(tkn)operator(\))operator(\)) operator(()ident(tokenizer) ident(syntax)operator(\)) ident(manglers)operator(\))operator(])
    operator(()keyword(fn) ident(highlighter*) operator([)ident(code)operator(])
      operator(()ident(output) operator(()ident(tkn) ident(code)operator(\))operator(\))operator(\))operator(\))operator(\))

       operator(()keyword(ns) namespace(clj-highlight.mangler)operator(\))

operator(()keyword(defn) function(mangle-tokens) operator([)ident(kind) ident(mangle-fn) ident(tokenizer)operator(])
  operator(()keyword(fn) ident(mangle-tokens*)
    operator(()operator([)ident(string) ident(state)operator(])
       operator(()keyword(map) operator(()keyword(fn) operator([)operator([)ident(k) ident(t) ident(s)operator(])operator(])
	 operator(()keyword(if) operator(()keyword(or) operator(()keyword(nil?) ident(kind)operator(\)) operator(()keyword(=) ident(k) ident(kind)operator(\))operator(\))
	   operator(()ident(mangle-fn) ident(k) ident(t) ident(s)operator(\))
	   operator([)ident(k) ident(t) ident(s)operator(])operator(\))operator(\))
	    operator(()ident(tokenizer) ident(string) ident(state)operator(\))operator(\))operator(\))
    operator(()operator([)ident(string)operator(])
       operator(()ident(mangle-tokens*) ident(string) symbol(:initial)operator(\))operator(\))operator(\))operator(\))

operator(()keyword(defn) function(new-mangler) operator([)ident(kind) ident(mangle-fn)operator(])
  operator(()keyword(fn) operator([)ident(tokenizer)operator(])
    operator(()ident(mangle-tokens) ident(kind) ident(mangle-fn) ident(tokenizer)operator(\))operator(\))operator(\))
operator(()keyword(ns) namespace(clj-highlight.output.hiccup)
  operator(()symbol(:use) ident(clj-highlight.mangler)operator(\))operator(\))

comment(; Copied from hiccup.)
operator(()keyword(defn-) function(escape-html)
  string<delimiter(")content(Change special characters into HTML character entities.)delimiter(")>
  operator([)ident(text)operator(])
  operator(()keyword(..) type(#^String) operator(()keyword(str) ident(text)operator(\))
    operator(()keyword(replace) string<delimiter(")content(&)delimiter(")>  string<delimiter(")content(&amp;)delimiter(")>operator(\))
    operator(()keyword(replace) string<delimiter(")content(<)delimiter(")>  string<delimiter(")content(&lt;)delimiter(")>operator(\))
    operator(()keyword(replace) string<delimiter(")content(>)delimiter(")>  string<delimiter(")content(&gt;)delimiter(")>operator(\))
    operator(()keyword(replace) string<delimiter(")content(\\")delimiter(")> string<delimiter(")content(&quot;)delimiter(")>operator(\))operator(\))operator(\))

operator(()keyword(def) function(default-stype-map)
     operator({)symbol(:identifier) predefined_constant(nil)
      symbol(:keyword)     string<delimiter(")content(r)delimiter(")>
      symbol(:symbol)     string<delimiter(")content(sy)delimiter(")>
      symbol(:string)     string<delimiter(")content(s)delimiter(")>
      symbol(:paren)      string<delimiter(")content(of)delimiter(")>
      symbol(:comment)    string<delimiter(")content(c)delimiter(")>
      symbol(:operator)   string<delimiter(")content(cl)delimiter(")>
      symbol(:number)     string<delimiter(")content(i)delimiter(")>
      operator(})operator(\))

operator(()keyword(defn-) function(hiccupify-tokens) operator([)ident(style-map) ident(tokens) keyword(last) ident(last-cl)operator(])
  operator(()keyword(lazy-seq) 
   operator(()keyword(if) operator(()keyword(empty?) ident(tokens)operator(\))
     operator(()keyword(list) operator(()keyword(if) ident(last-cl) operator([)symbol(:span) operator({)symbol(:class) ident(last-cl)operator(}) keyword(last)operator(]) keyword(last)operator(\))operator(\))
     operator(()keyword(let) operator([)operator([)ident(k) ident(t) ident(_)operator(]) operator(()keyword(first) ident(tokens)operator(\))
	   ident(cl) operator(()ident(style-map) ident(k)operator(\))operator(])
       operator(()keyword(cond)
	operator(()keyword(nil?) keyword(last)operator(\))
	operator(()ident(hiccupify-tokens) ident(style-map) operator(()keyword(rest) ident(tokens)operator(\)) ident(t) ident(cl)operator(\))
	operator(()keyword(=) ident(last-cl) ident(cl)operator(\))
	operator(()ident(hiccupify-tokens) ident(style-map) operator(()keyword(rest) ident(tokens)operator(\)) operator(()keyword(str) keyword(last) ident(t)operator(\)) ident(cl)operator(\))
	symbol(:else)
	operator(()keyword(cons) operator(()keyword(if) ident(last-cl) operator([)symbol(:span) operator({)symbol(:class) ident(last-cl)operator(}) keyword(last)operator(]) keyword(last)operator(\)) operator(()ident(hiccupify-tokens) ident(style-map) operator(()keyword(rest) ident(tokens)operator(\)) ident(t) ident(cl)operator(\))operator(\))operator(\))operator(\))operator(\))operator(\))operator(\))

  
operator(()keyword(defn) function(to-hiccup) 
  operator(()operator([)ident(style-map) ident(root-class)operator(])
     operator(()keyword(fn) operator([)ident(tokens)operator(])
       operator(()keyword(vec) operator(()keyword(concat) operator([)symbol(:span) operator({)symbol(:class) ident(root-class)operator(})operator(]) operator(()ident(hiccupify-tokens) ident(style-map) ident(tokens) predefined_constant(nil) predefined_constant(nil)operator(\))operator(\))operator(\))operator(\))operator(\))
  operator(()operator([)operator(])
     operator(()ident(to-hiccup) ident(default-stype-map) string<delimiter(")content(code)delimiter(")> operator(\))operator(\))operator(\))


operator(()keyword(def) function(newline-to-br-mangler) 
     operator(()ident(new-mangler)
      symbol(:space)
      operator(()keyword(fn) operator([)ident(k) ident(t) ident(s)operator(])
	operator([)ident(k) operator(()keyword(.)keyword(replace) ident(t) string<delimiter(")content(\\n)delimiter(")> string<delimiter(")content(<br/>)delimiter(")>operator(\)) ident(s)operator(])operator(\))operator(\))operator(\))

operator(()keyword(def) function(html-escape-mangler) 
     operator(()ident(new-mangler)
      symbol(:space)
      operator(()keyword(fn) operator([)ident(k) ident(t) ident(s)operator(])
	operator([)ident(k) operator(()ident(escape-html) ident(t)operator(\)) ident(s)operator(])operator(\))operator(\))operator(\))operator(()keyword(ns) namespace(clj-highlight.output.html)
  operator(()symbol(:use) ident(clj-highlight.mangler) ident(clj-highlight.output.hiccup)operator(\))operator(\))


operator(()keyword(defn) function(span) operator([)ident(c) ident(content)operator(])
  operator(()keyword(str) string<delimiter(")content(<span class=')delimiter(")> ident(c) string<delimiter(")content('>)delimiter(")> operator(()ident(escape-html) ident(content)operator(\)) string<delimiter(")content(</span>)delimiter(")>operator(\))operator(\))

operator(()keyword(defn) function(html-to-stream) operator([)ident(stream) ident(root-class) ident(style-map) ident(tokenstream)operator(])
  operator(()keyword(binding) operator([)predefined_constant(*out*) ident(stream)operator(])
    operator(()keyword(print) operator(()keyword(str) string<delimiter(")content(<span class=')delimiter(")> ident(root-class) string<delimiter(")content('>)delimiter(")>operator(\))operator(\))
    operator(()keyword(loop) operator([)operator([)ident(kind) ident(token) ident(&) ident(_)operator(]) operator(()keyword(first) ident(tokenstream)operator(\)) ident(tkns) operator(()keyword(next) ident(tokenstream)operator(\))operator(])
      operator(()keyword(let) operator([)ident(style) operator(()keyword(get) ident(style-map) ident(kind) operator(()keyword(name) ident(kind)operator(\))operator(\))operator(])
	operator(()keyword(print) operator(()ident(span) ident(style) ident(token)operator(\))operator(\))
	operator(()keyword(if-let) operator([)operator([)ident(f) ident(&) ident(n)operator(]) operator(()keyword(next) ident(tokenstream)operator(\))operator(])
	  operator(()keyword(recur) ident(f) ident(n)operator(\))operator(\))operator(\))operator(\))
    operator(()keyword(print) string<delimiter(")content(</span>)delimiter(")>operator(\))operator(\))operator(\))operator(()keyword(ns) namespace(clj-highlight.syntax.clojure)
  operator(()symbol(:use) ident(clj-highlight.syntax.general)operator(\))operator(\))

operator(()keyword(def) function(clojure-keywords)
     operator(#{)string<delimiter(")content(def)delimiter(")>, string<delimiter(")content(if)delimiter(")>, string<delimiter(")content(do)delimiter(")>, string<delimiter(")content(let)delimiter(")>, string<delimiter(")content(quote)delimiter(")>, string<delimiter(")content(var)delimiter(")>, string<delimiter(")content(fn)delimiter(")>, string<delimiter(")content(loop)delimiter(")>, string<delimiter(")content(recur)delimiter(")>, string<delimiter(")content(throw)delimiter(")>, string<delimiter(")content(try)delimiter(")>, string<delimiter(")content(catch)delimiter(")>, string<delimiter(")content(monitor-enter)delimiter(")>, string<delimiter(")content(monitor-exit)delimiter(")>, string<delimiter(")content(.)delimiter(")>, string<delimiter(")content(new)delimiter(")>, string<delimiter(")content(nil)delimiter(")>
       string<delimiter(")content(+)delimiter(")>, string<delimiter(")content(-)delimiter(")>, string<delimiter(")content(->)delimiter(")>, string<delimiter(")content(->>)delimiter(")>, string<delimiter(")content(..)delimiter(")>, string<delimiter(")content(/)delimiter(")>, string<delimiter(")content(<)delimiter(")>, string<delimiter(")content(<=)delimiter(")>, string<delimiter(")content(=)delimiter(")>, string<delimiter(")content(==)delimiter(")>, string<delimiter(")content(>)delimiter(")>, string<delimiter(")content(>=)delimiter(")>, string<delimiter(")content(accessor)delimiter(")>, string<delimiter(")content(aclone)delimiter(")>, string<delimiter(")content(add-classpath)delimiter(")>, string<delimiter(")content(add-watch)delimiter(")>, string<delimiter(")content(agent)delimiter(")>, string<delimiter(")content(agent-error)delimiter(")>, string<delimiter(")content(agent-errors)delimiter(")>, string<delimiter(")content(aget)delimiter(")>, string<delimiter(")content(alength)delimiter(")>, string<delimiter(")content(alias)delimiter(")>, string<delimiter(")content(all-ns)delimiter(")>, string<delimiter(")content(alter)delimiter(")>, string<delimiter(")content(alter-meta!)delimiter(")>, string<delimiter(")content(alter-var-root)delimiter(")>, string<delimiter(")content(amap)delimiter(")>, string<delimiter(")content(ancestors)delimiter(")>, string<delimiter(")content(and)delimiter(")>, string<delimiter(")content(apply)delimiter(")>, string<delimiter(")content(areduce)delimiter(")>, string<delimiter(")content(array-map)delimiter(")>, string<delimiter(")content(aset)delimiter(")>, string<delimiter(")content(aset-boolean)delimiter(")>, string<delimiter(")content(aset-byte)delimiter(")>, string<delimiter(")content(aset-char)delimiter(")>, string<delimiter(")content(aset-double)delimiter(")>, string<delimiter(")content(aset-float)delimiter(")>, string<delimiter(")content(aset-int)delimiter(")>, string<delimiter(")content(aset-long)delimiter(")>, string<delimiter(")content(aset-short)delimiter(")>, string<delimiter(")content(assert)delimiter(")>, string<delimiter(")content(assoc)delimiter(")>, string<delimiter(")content(assoc!)delimiter(")>, string<delimiter(")content(assoc-in)delimiter(")>, string<delimiter(")content(associative?)delimiter(")>, string<delimiter(")content(atom)delimiter(")>, string<delimiter(")content(await)delimiter(")>, string<delimiter(")content(await-for)delimiter(")>, string<delimiter(")content(bases)delimiter(")>, string<delimiter(")content(bean)delimiter(")>, string<delimiter(")content(bigdec)delimiter(")>, string<delimiter(")content(bigint)delimiter(")>, string<delimiter(")content(binding)delimiter(")>, string<delimiter(")content(bit-and)delimiter(")>, string<delimiter(")content(bit-and-not)delimiter(")>, string<delimiter(")content(bit-clear)delimiter(")>, string<delimiter(")content(bit-flip)delimiter(")>, string<delimiter(")content(bit-not)delimiter(")>, string<delimiter(")content(bit-or)delimiter(")>, string<delimiter(")content(bit-set)delimiter(")>, string<delimiter(")content(bit-shift-left)delimiter(")>, string<delimiter(")content(bit-shift-right)delimiter(")>, string<delimiter(")content(bit-test)delimiter(")>, string<delimiter(")content(bit-xor)delimiter(")>, string<delimiter(")content(boolean)delimiter(")>, string<delimiter(")content(boolean-array)delimiter(")>, string<delimiter(")content(booleans)delimiter(")>, string<delimiter(")content(bound-fn)delimiter(")>, string<delimiter(")content(bound-fn*)delimiter(")>, string<delimiter(")content(bound?)delimiter(")>, string<delimiter(")content(butlast)delimiter(")>, string<delimiter(")content(byte)delimiter(")>, string<delimiter(")content(byte-array)delimiter(")>, string<delimiter(")content(bytes)delimiter(")>, string<delimiter(")content(case)delimiter(")>, string<delimiter(")content(cast)delimiter(")>, string<delimiter(")content(char)delimiter(")>, string<delimiter(")content(char-array)delimiter(")>, string<delimiter(")content(char-escape-string)delimiter(")>, string<delimiter(")content(char-name-string)delimiter(")>, string<delimiter(")content(char?)delimiter(")>, string<delimiter(")content(chars)delimiter(")>, string<delimiter(")content(class)delimiter(")>, string<delimiter(")content(class?)delimiter(")>, string<delimiter(")content(clear-agent-errors)delimiter(")>, string<delimiter(")content(clojure-version)delimiter(")>, string<delimiter(")content(coll?)delimiter(")>, string<delimiter(")content(comment)delimiter(")>, string<delimiter(")content(commute)delimiter(")>, string<delimiter(")content(comp)delimiter(")>, string<delimiter(")content(comparator)delimiter(")>, string<delimiter(")content(compare)delimiter(")>, string<delimiter(")content(compare-and-set!)delimiter(")>, string<delimiter(")content(compile)delimiter(")>, string<delimiter(")content(complement)delimiter(")>, string<delimiter(")content(concat)delimiter(")>, string<delimiter(")content(cond)delimiter(")>, string<delimiter(")content(condp)delimiter(")>, string<delimiter(")content(conj)delimiter(")>, string<delimiter(")content(conj!)delimiter(")>, string<delimiter(")content(cons)delimiter(")>, string<delimiter(")content(constantly)delimiter(")>, string<delimiter(")content(construct-proxy)delimiter(")>, string<delimiter(")content(contains?)delimiter(")>, string<delimiter(")content(count)delimiter(")>, string<delimiter(")content(counted?)delimiter(")>, string<delimiter(")content(create-ns)delimiter(")>, string<delimiter(")content(create-struct)delimiter(")>, string<delimiter(")content(cycle)delimiter(")>, string<delimiter(")content(dec)delimiter(")>, string<delimiter(")content(decimal?)delimiter(")>, string<delimiter(")content(declare)delimiter(")>, string<delimiter(")content(definline)delimiter(")>, string<delimiter(")content(defmacro)delimiter(")>, string<delimiter(")content(defmethod)delimiter(")>, string<delimiter(")content(defmulti)delimiter(")>, string<delimiter(")content(defn)delimiter(")>, string<delimiter(")content(defn-)delimiter(")>, string<delimiter(")content(defonce)delimiter(")>, string<delimiter(")content(defprotocol)delimiter(")>, string<delimiter(")content(defrecord)delimiter(")>, string<delimiter(")content(defstruct)delimiter(")>, string<delimiter(")content(deftype)delimiter(")>, string<delimiter(")content(delay)delimiter(")>, string<delimiter(")content(delay?)delimiter(")>, string<delimiter(")content(deliver)delimiter(")>, string<delimiter(")content(denominator)delimiter(")>, string<delimiter(")content(deref)delimiter(")>, string<delimiter(")content(derive)delimiter(")>, string<delimiter(")content(descendants)delimiter(")>, string<delimiter(")content(disj)delimiter(")>, string<delimiter(")content(disj!)delimiter(")>, string<delimiter(")content(dissoc)delimiter(")>, string<delimiter(")content(dissoc!)delimiter(")>, string<delimiter(")content(distinct)delimiter(")>, string<delimiter(")content(distinct?)delimiter(")>, string<delimiter(")content(doall)delimiter(")>, string<delimiter(")content(doc)delimiter(")>, string<delimiter(")content(dorun)delimiter(")>, string<delimiter(")content(doseq)delimiter(")>, string<delimiter(")content(dosync)delimiter(")>, string<delimiter(")content(dotimes)delimiter(")>, string<delimiter(")content(doto)delimiter(")>, string<delimiter(")content(double)delimiter(")>, string<delimiter(")content(double-array)delimiter(")>, string<delimiter(")content(doubles)delimiter(")>, string<delimiter(")content(drop)delimiter(")>, string<delimiter(")content(drop-last)delimiter(")>, string<delimiter(")content(drop-while)delimiter(")>, string<delimiter(")content(empty)delimiter(")>, string<delimiter(")content(empty?)delimiter(")>, string<delimiter(")content(ensure)delimiter(")>, string<delimiter(")content(enumeration-seq)delimiter(")>, string<delimiter(")content(error-handler)delimiter(")>, string<delimiter(")content(error-mode)delimiter(")>, string<delimiter(")content(eval)delimiter(")>, string<delimiter(")content(even?)delimiter(")>, string<delimiter(")content(every?)delimiter(")>, string<delimiter(")content(extend)delimiter(")>, string<delimiter(")content(extend-protocol)delimiter(")>, string<delimiter(")content(extend-type)delimiter(")>, string<delimiter(")content(extenders)delimiter(")>, string<delimiter(")content(extends?)delimiter(")>, string<delimiter(")content(false?)delimiter(")>, string<delimiter(")content(ffirst)delimiter(")>, string<delimiter(")content(file-seq)delimiter(")>, string<delimiter(")content(filter)delimiter(")>, string<delimiter(")content(find)delimiter(")>, string<delimiter(")content(find-doc)delimiter(")>, string<delimiter(")content(find-ns)delimiter(")>, string<delimiter(")content(find-var)delimiter(")>, string<delimiter(")content(first)delimiter(")>, string<delimiter(")content(float)delimiter(")>, string<delimiter(")content(float-array)delimiter(")>, string<delimiter(")content(float?)delimiter(")>, string<delimiter(")content(floats)delimiter(")>, string<delimiter(")content(flush)delimiter(")>, string<delimiter(")content(fn?)delimiter(")>, string<delimiter(")content(fnext)delimiter(")>, string<delimiter(")content(for)delimiter(")>, string<delimiter(")content(force)delimiter(")>, string<delimiter(")content(format)delimiter(")>, string<delimiter(")content(future)delimiter(")>, string<delimiter(")content(future-call)delimiter(")>, string<delimiter(")content(future-cancel)delimiter(")>, string<delimiter(")content(future-cancelled?)delimiter(")>, string<delimiter(")content(future-done?)delimiter(")>, string<delimiter(")content(future?)delimiter(")>, string<delimiter(")content(gen-class)delimiter(")>, string<delimiter(")content(gen-interface)delimiter(")>, string<delimiter(")content(gensym)delimiter(")>, string<delimiter(")content(get)delimiter(")>, string<delimiter(")content(get-in)delimiter(")>, string<delimiter(")content(get-method)delimiter(")>, string<delimiter(")content(get-proxy-class)delimiter(")>, string<delimiter(")content(get-thread-bindings)delimiter(")>, string<delimiter(")content(get-validator)delimiter(")>, string<delimiter(")content(hash)delimiter(")>, string<delimiter(")content(hash-map)delimiter(")>, string<delimiter(")content(hash-set)delimiter(")>, string<delimiter(")content(identical?)delimiter(")>, string<delimiter(")content(identity)delimiter(")>, string<delimiter(")content(if-let)delimiter(")>, string<delimiter(")content(if-not)delimiter(")>, string<delimiter(")content(ifn?)delimiter(")>, string<delimiter(")content(import)delimiter(")>, string<delimiter(")content(in-ns)delimiter(")>, string<delimiter(")content(inc)delimiter(")>, string<delimiter(")content(init-proxy)delimiter(")>, string<delimiter(")content(instance?)delimiter(")>, string<delimiter(")content(int)delimiter(")>, string<delimiter(")content(int-array)delimiter(")>, string<delimiter(")content(integer?)delimiter(")>, string<delimiter(")content(interleave)delimiter(")>, string<delimiter(")content(intern)delimiter(")>, string<delimiter(")content(interpose)delimiter(")>, string<delimiter(")content(into)delimiter(")>, string<delimiter(")content(into-array)delimiter(")>, string<delimiter(")content(ints)delimiter(")>, string<delimiter(")content(io!)delimiter(")>, string<delimiter(")content(isa?)delimiter(")>, string<delimiter(")content(iterate)delimiter(")>, string<delimiter(")content(iterator-seq)delimiter(")>, string<delimiter(")content(juxt)delimiter(")>, string<delimiter(")content(key)delimiter(")>, string<delimiter(")content(keys)delimiter(")>, string<delimiter(")content(keyword)delimiter(")>, string<delimiter(")content(keyword?)delimiter(")>, string<delimiter(")content(last)delimiter(")>, string<delimiter(")content(lazy-cat)delimiter(")>, string<delimiter(")content(lazy-seq)delimiter(")>, string<delimiter(")content(letfn)delimiter(")>, string<delimiter(")content(line-seq)delimiter(")>, string<delimiter(")content(list)delimiter(")>, string<delimiter(")content(list*)delimiter(")>, string<delimiter(")content(list?)delimiter(")>, string<delimiter(")content(load)delimiter(")>, string<delimiter(")content(load-file)delimiter(")>, string<delimiter(")content(load-reader)delimiter(")>, string<delimiter(")content(load-string)delimiter(")>, string<delimiter(")content(loaded-libs)delimiter(")>, string<delimiter(")content(locking)delimiter(")>, string<delimiter(")content(long)delimiter(")>, string<delimiter(")content(long-array)delimiter(")>, string<delimiter(")content(longs)delimiter(")>, string<delimiter(")content(macroexpand)delimiter(")>, string<delimiter(")content(macroexpand-1)delimiter(")>, string<delimiter(")content(make-array)delimiter(")>, string<delimiter(")content(make-hierarchy)delimiter(")>, string<delimiter(")content(map)delimiter(")>, string<delimiter(")content(map?)delimiter(")>, string<delimiter(")content(mapcat)delimiter(")>, string<delimiter(")content(max)delimiter(")>, string<delimiter(")content(max-key)delimiter(")>, string<delimiter(")content(memfn)delimiter(")>, string<delimiter(")content(memoize)delimiter(")>, string<delimiter(")content(merge)delimiter(")>, string<delimiter(")content(merge-with)delimiter(")>, string<delimiter(")content(meta)delimiter(")>, string<delimiter(")content(methods)delimiter(")>, string<delimiter(")content(min)delimiter(")>, string<delimiter(")content(min-key)delimiter(")>, string<delimiter(")content(mod)delimiter(")>, string<delimiter(")content(name)delimiter(")>, string<delimiter(")content(namespace)delimiter(")>, string<delimiter(")content(neg?)delimiter(")>, string<delimiter(")content(newline)delimiter(")>, string<delimiter(")content(next)delimiter(")>, string<delimiter(")content(nfirst)delimiter(")>, string<delimiter(")content(nil?)delimiter(")>, string<delimiter(")content(nnext)delimiter(")>, string<delimiter(")content(not)delimiter(")>, string<delimiter(")content(not-any?)delimiter(")>, string<delimiter(")content(not-empty)delimiter(")>, string<delimiter(")content(not-every?)delimiter(")>, string<delimiter(")content(not=)delimiter(")>, string<delimiter(")content(ns)delimiter(")>, string<delimiter(")content(ns-aliases)delimiter(")>, string<delimiter(")content(ns-imports)delimiter(")>, string<delimiter(")content(ns-interns)delimiter(")>, string<delimiter(")content(ns-map)delimiter(")>, string<delimiter(")content(ns-name)delimiter(")>, string<delimiter(")content(ns-publics)delimiter(")>, string<delimiter(")content(ns-refers)delimiter(")>, string<delimiter(")content(ns-resolve)delimiter(")>, string<delimiter(")content(ns-unalias)delimiter(")>, string<delimiter(")content(ns-unmap)delimiter(")>, string<delimiter(")content(nth)delimiter(")>, string<delimiter(")content(nthnext)delimiter(")>, string<delimiter(")content(num)delimiter(")>, string<delimiter(")content(number?)delimiter(")>, string<delimiter(")content(numerator)delimiter(")>, string<delimiter(")content(object-array)delimiter(")>, string<delimiter(")content(odd?)delimiter(")>, string<delimiter(")content(or)delimiter(")>, string<delimiter(")content(parents)delimiter(")>, string<delimiter(")content(partial)delimiter(")>, string<delimiter(")content(partition)delimiter(")>, string<delimiter(")content(pcalls)delimiter(")>, string<delimiter(")content(peek)delimiter(")>, string<delimiter(")content(persistent!)delimiter(")>, string<delimiter(")content(pmap)delimiter(")>, string<delimiter(")content(pop)delimiter(")>, string<delimiter(")content(pop!)delimiter(")>, string<delimiter(")content(pop-thread-bindings)delimiter(")>, string<delimiter(")content(pos?)delimiter(")>, string<delimiter(")content(pr)delimiter(")>, string<delimiter(")content(pr-str)delimiter(")>, string<delimiter(")content(prefer-method)delimiter(")>, string<delimiter(")content(prefers)delimiter(")>, string<delimiter(")content(print)delimiter(")>, string<delimiter(")content(print-namespace-doc)delimiter(")>, string<delimiter(")content(print-str)delimiter(")>, string<delimiter(")content(printf)delimiter(")>, string<delimiter(")content(println)delimiter(")>, string<delimiter(")content(println-str)delimiter(")>, string<delimiter(")content(prn)delimiter(")>, string<delimiter(")content(prn-str)delimiter(")>, string<delimiter(")content(promise)delimiter(")>, string<delimiter(")content(proxy)delimiter(")>, string<delimiter(")content(proxy-mappings)delimiter(")>, string<delimiter(")content(proxy-super)delimiter(")>, string<delimiter(")content(push-thread-bindings)delimiter(")>, string<delimiter(")content(pvalues)delimiter(")>, string<delimiter(")content(quot)delimiter(")>, string<delimiter(")content(rand)delimiter(")>, string<delimiter(")content(rand-int)delimiter(")>, string<delimiter(")content(range)delimiter(")>, string<delimiter(")content(ratio?)delimiter(")>, string<delimiter(")content(rationalize)delimiter(")>, string<delimiter(")content(re-find)delimiter(")>, string<delimiter(")content(re-groups)delimiter(")>, string<delimiter(")content(re-matcher)delimiter(")>, string<delimiter(")content(re-matches)delimiter(")>, string<delimiter(")content(re-pattern)delimiter(")>, string<delimiter(")content(re-seq)delimiter(")>, string<delimiter(")content(read)delimiter(")>, string<delimiter(")content(read-line)delimiter(")>, string<delimiter(")content(read-string)delimiter(")>, string<delimiter(")content(reduce)delimiter(")>, string<delimiter(")content(ref)delimiter(")>, string<delimiter(")content(ref-history-count)delimiter(")>, string<delimiter(")content(ref-max-history)delimiter(")>, string<delimiter(")content(ref-min-history)delimiter(")>, string<delimiter(")content(ref-set)delimiter(")>, string<delimiter(")content(refer)delimiter(")>, string<delimiter(")content(refer-clojure)delimiter(")>, string<delimiter(")content(reify)delimiter(")>, string<delimiter(")content(release-pending-sends)delimiter(")>, string<delimiter(")content(rem)delimiter(")>, string<delimiter(")content(remove)delimiter(")>, string<delimiter(")content(remove-all-methods)delimiter(")>, string<delimiter(")content(remove-method)delimiter(")>, string<delimiter(")content(remove-ns)delimiter(")>, string<delimiter(")content(remove-watch)delimiter(")>, string<delimiter(")content(repeat)delimiter(")>, string<delimiter(")content(repeatedly)delimiter(")>, string<delimiter(")content(replace)delimiter(")>, string<delimiter(")content(replicate)delimiter(")>, string<delimiter(")content(require)delimiter(")>, string<delimiter(")content(reset!)delimiter(")>, string<delimiter(")content(reset-meta!)delimiter(")>, string<delimiter(")content(resolve)delimiter(")>, string<delimiter(")content(rest)delimiter(")>, string<delimiter(")content(restart-agent)delimiter(")>, string<delimiter(")content(resultset-seq)delimiter(")>, string<delimiter(")content(reverse)delimiter(")>, string<delimiter(")content(reversible?)delimiter(")>, string<delimiter(")content(rseq)delimiter(")>, string<delimiter(")content(rsubseq)delimiter(")>, string<delimiter(")content(satisfies?)delimiter(")>, string<delimiter(")content(second)delimiter(")>, string<delimiter(")content(select-keys)delimiter(")>, string<delimiter(")content(send)delimiter(")>, string<delimiter(")content(send-off)delimiter(")>, string<delimiter(")content(seq)delimiter(")>, string<delimiter(")content(seq?)delimiter(")>, string<delimiter(")content(seque)delimiter(")>, string<delimiter(")content(sequence)delimiter(")>, string<delimiter(")content(sequential?)delimiter(")>, string<delimiter(")content(set)delimiter(")>, string<delimiter(")content(set-error-handler!)delimiter(")>, string<delimiter(")content(set-error-mode!)delimiter(")>, string<delimiter(")content(set-validator!)delimiter(")>, string<delimiter(")content(set?)delimiter(")>, string<delimiter(")content(short)delimiter(")>, string<delimiter(")content(short-array)delimiter(")>, string<delimiter(")content(shorts)delimiter(")>, string<delimiter(")content(shutdown-agents)delimiter(")>, string<delimiter(")content(slurp)delimiter(")>, string<delimiter(")content(some)delimiter(")>, string<delimiter(")content(sort)delimiter(")>, string<delimiter(")content(sort-by)delimiter(")>, string<delimiter(")content(sorted-map)delimiter(")>, string<delimiter(")content(sorted-map-by)delimiter(")>, string<delimiter(")content(sorted-set)delimiter(")>, string<delimiter(")content(sorted-set-by)delimiter(")>, string<delimiter(")content(sorted?)delimiter(")>, string<delimiter(")content(special-form-anchor)delimiter(")>, string<delimiter(")content(special-symbol?)delimiter(")>, string<delimiter(")content(split-at)delimiter(")>, string<delimiter(")content(split-with)delimiter(")>, string<delimiter(")content(str)delimiter(")>, string<delimiter(")content(string?)delimiter(")>, string<delimiter(")content(struct)delimiter(")>, string<delimiter(")content(struct-map)delimiter(")>, string<delimiter(")content(subs)delimiter(")>, string<delimiter(")content(subseq)delimiter(")>, string<delimiter(")content(subvec)delimiter(")>, string<delimiter(")content(supers)delimiter(")>, string<delimiter(")content(swap!)delimiter(")>, string<delimiter(")content(symbol)delimiter(")>, string<delimiter(")content(symbol?)delimiter(")>, string<delimiter(")content(sync)delimiter(")>, string<delimiter(")content(syntax-symbol-anchor)delimiter(")>, string<delimiter(")content(take)delimiter(")>, string<delimiter(")content(take-last)delimiter(")>, string<delimiter(")content(take-nth)delimiter(")>, string<delimiter(")content(take-while)delimiter(")>, string<delimiter(")content(test)delimiter(")>, string<delimiter(")content(the-ns)delimiter(")>, string<delimiter(")content(thread-bound?)delimiter(")>, string<delimiter(")content(time)delimiter(")>, string<delimiter(")content(to-array)delimiter(")>, string<delimiter(")content(to-array-2d)delimiter(")>, string<delimiter(")content(trampoline)delimiter(")>, string<delimiter(")content(transient)delimiter(")>, string<delimiter(")content(tree-seq)delimiter(")>, string<delimiter(")content(true?)delimiter(")>, string<delimiter(")content(type)delimiter(")>, string<delimiter(")content(unchecked-add)delimiter(")>, string<delimiter(")content(unchecked-dec)delimiter(")>, string<delimiter(")content(unchecked-divide)delimiter(")>, string<delimiter(")content(unchecked-inc)delimiter(")>, string<delimiter(")content(unchecked-multiply)delimiter(")>, string<delimiter(")content(unchecked-negate)delimiter(")>, string<delimiter(")content(unchecked-remainder)delimiter(")>, string<delimiter(")content(unchecked-subtract)delimiter(")>, string<delimiter(")content(underive)delimiter(")>, string<delimiter(")content(update-in)delimiter(")>, string<delimiter(")content(update-proxy)delimiter(")>, string<delimiter(")content(use)delimiter(")>, string<delimiter(")content(val)delimiter(")>, string<delimiter(")content(vals)delimiter(")>, string<delimiter(")content(var-get)delimiter(")>, string<delimiter(")content(var-set)delimiter(")>, string<delimiter(")content(var?)delimiter(")>, string<delimiter(")content(vary-meta)delimiter(")>, string<delimiter(")content(vec)delimiter(")>, string<delimiter(")content(vector)delimiter(")>, string<delimiter(")content(vector-of)delimiter(")>, string<delimiter(")content(vector?)delimiter(")>, string<delimiter(")content(when)delimiter(")>, string<delimiter(")content(when-first)delimiter(")>, string<delimiter(")content(when-let)delimiter(")>, string<delimiter(")content(when-not)delimiter(")>, string<delimiter(")content(while)delimiter(")>, string<delimiter(")content(with-bindings)delimiter(")>, string<delimiter(")content(with-bindings*)delimiter(")>, string<delimiter(")content(with-in-str)delimiter(")>, string<delimiter(")content(with-local-vars)delimiter(")>, string<delimiter(")content(with-meta)delimiter(")>, string<delimiter(")content(with-open)delimiter(")>, string<delimiter(")content(with-out-str)delimiter(")>, string<delimiter(")content(with-precision)delimiter(")>, string<delimiter(")content(xml-seq)delimiter(")>, string<delimiter(")content(zero?)delimiter(")>, string<delimiter(")content(zipmap)delimiter(")>, string<delimiter(")content(true)delimiter(")>, string<delimiter(")content(false)delimiter(")>, string<delimiter(")content(*)delimiter(")>, string<delimiter(")content(*1)delimiter(")>, string<delimiter(")content(*2)delimiter(")>, string<delimiter(")content(*3)delimiter(")>, string<delimiter(")content(*agent*)delimiter(")>, string<delimiter(")content(*clojure-version*)delimiter(")>, string<delimiter(")content(*command-line-args*)delimiter(")>, string<delimiter(")content(*compile-files*)delimiter(")>, string<delimiter(")content(*compile-path*)delimiter(")>, string<delimiter(")content(*e)delimiter(")>, string<delimiter(")content(*err*)delimiter(")>, string<delimiter(")content(*file*)delimiter(")>, string<delimiter(")content(*flush-on-newline*)delimiter(")>, string<delimiter(")content(*in*)delimiter(")>, string<delimiter(")content(*ns*)delimiter(")>, string<delimiter(")content(*out*)delimiter(")>, string<delimiter(")content(*print-dup*)delimiter(")>, string<delimiter(")content(*print-length*)delimiter(")>, string<delimiter(")content(*print-level*)delimiter(")>, string<delimiter(")content(*print-meta*)delimiter(")>, string<delimiter(")content(*print-readably*)delimiter(")>, string<delimiter(")content(*read-eval*)delimiter(")>, string<delimiter(")content(*warn-on-reflection*)delimiter(")>operator(})operator(\)) 

operator(()keyword(let) operator([)ident(basic-identifier*) string<delimiter(")content([a-zA-Z$%$*_+!?&<>=-][a-zA-Z0-9§$&*=+!_?<>-]*)delimiter(")>
      ident(identifier*) operator(()keyword(str) ident(basic-identifier*)string<delimiter(")content((?:)content(\\\\)content(.)delimiter(")>ident(basic-identifier*)string<delimiter(")content(\)*+(?:/)delimiter(")>ident(basic-identifier*)string<delimiter(")content(\)?+)delimiter(")>operator(\))
      ident(symbol*) operator(()keyword(str) string<delimiter(")content(::?)delimiter(")>ident(identifier*)string<delimiter(")content(\\\\)content(.?+)delimiter(")>operator(\))
      ident(number-matcher) operator(()keyword(fn) operator([)ident(s) ident(idx)operator(])
		       operator(()keyword(let) operator([)ident(s) operator(()keyword(subs) ident(s) ident(idx)operator(\))operator(])
			 operator(()keyword(if-let) operator([)ident(p) operator(()keyword(re-find) regexp<delimiter(#")content(^()content(\\d)content(+\)r)delimiter(")> ident(s)operator(\))operator(])
			   operator(()keyword(let) operator([)operator([)ident(prefix) ident(precision)operator(]) ident(p)
				 ident(precision) operator(()ident(Integer/parseInt) ident(precision)operator(\))
				 ident(number-re) operator(()keyword(re-pattern) operator(()keyword(str) string<delimiter(")content(^)delimiter(")> ident(prefix) string<delimiter(")content([)delimiter(")> operator(()keyword(subs) ident(didgets) integer(0) ident(precision)operator(\)) string<delimiter(")content(]++)delimiter(")>operator(\))operator(\))operator(])
			     operator(()keyword(if-let) operator([)keyword(num) operator(()keyword(re-find) ident(number-re) ident(s)operator(\))operator(])
			       keyword(num)
			       predefined_constant(nil)operator(\))operator(\))
			   operator(()keyword(if-let) operator([)keyword(num) operator(()keyword(re-find) regexp<delimiter(#")content(^)content(\\d)content(+(?:(?:/)content(\\d)content(+\)|(?:(?:)content(\\.)content(\\d)content(*\)?(?:e[+-])content(\\d)content(+\)?\)\))delimiter(")> ident(s)operator(\))operator(])
			     keyword(num)
			     predefined_constant(nil)operator(\))operator(\))operator(\))operator(\))
      operator(])
  operator(()keyword(def) function(clj-syntax)
       operator({)symbol(:keywords) ident(clojure-keywords)
	symbol(:initial)
	operator(()keyword(list)
comment(;	 (fn space-token [string idx states token-def] ()
	 operator(()ident(re-token) regexp<delimiter(#")content([)content(\\s)content(\\n)content(,]++)delimiter(")> symbol(:space)operator(\))
comment(;							string idx states token-def\)\))
comment(;	 (fn paren-token [string idx states token-def] ()
	 operator(()ident(re-token) regexp<delimiter(#")content([)content(\\()content(\\\))content(\\[)content(\\])content({}])delimiter(")> symbol(:paren)operator(\))
comment(;							string idx states token-def\)\))
comment(;	 (fn ident-token [string idx states token-def] ()
	 operator(()ident(re-token) ident(identifier*) symbol(:identifier)operator(\)) 
comment(;							string idx states token-def\)\))
comment(;	 (fn ident2-token [string idx states token-def] ()
	 operator(()ident(re-token) regexp<delimiter(#")content(\\.)content(++)delimiter(")> symbol(:identifier)operator(\))
comment(;							 string idx states token-def\)\))
comment(;	 (fn sym-token [string idx states token-def] ()
	 operator(()ident(re-token) ident(symbol*) symbol(:symbol)operator(\))
comment(;						      string idx states token-def\)\))
comment(;	 (fn sym2-token [string idx states token-def] ()
	 operator(()ident(re-token) regexp<delimiter(#")content(::?)content(\\()content(.++)delimiter(")> symbol(:symbol)operator(\))
comment(;						       string idx states token-def\)\))
comment(;	 (fn num-token [string idx states token-def] ()
	 operator(()ident(token) ident(number-matcher) symbol(:number)operator(\))
comment(;						      string idx states token-def\)\))
comment(;	 (fn op-token [string idx states token-def] ()
	 operator(()ident(re-token) regexp<delimiter(#")content([#.'`~@^]++)delimiter(")> symbol(:operator)operator(\))
comment(;						     string idx states token-def\)\))
comment(;	 (fn char-token [string idx states token-def] ()
	 operator(()ident(re-token) regexp<delimiter(#")content(\\")content([^)content(\\")content(\\\\)content(]*(?:[^)content(\\")content(\\\\)content(]|)content(\\\\)content(.\)*+)content(\\")delimiter(")> symbol(:string)operator(\))
comment(;						       string idx states token-def\)\))
comment(;	 (fn ident3-token [string idx states token-def] ()
	 operator(()ident(re-token) regexp<delimiter(#")content(/)delimiter(")> symbol(:identifier)operator(\))
comment(;							 string idx states token-def\)\))
comment(;	 (fn comm-token [string idx states token-def] ()
	 operator(()ident(re-token) regexp<delimiter(#")content(;[^)content(\\n)content(]*+)delimiter(")> symbol(:comment)operator(\))
comment(;						       string idx states token-def\)\))
comment(;	 (fn str-token [string idx states token-def] ()
	 operator(()ident(re-token) regexp<delimiter(#")content(\\\\)content((?:.|[a-z]++\))delimiter(")> symbol(:string)operator(\))
comment(;						      string idx states token-def\)\))
	 operator(\))operator(})operator(\))operator(\))
operator(()keyword(ns) namespace(clj-highlight.syntax.general)operator(\))

operator(()keyword(def) function(didgets) string<delimiter(")content(0123456789abcdefghijklmnopqrstuvwxyz)delimiter(")>operator(\))

operator(()keyword(def) function(*do-profile*) predefined_constant(false)operator(\))

operator(()keyword(def) function(*profile*) operator(()keyword(agent) operator({)operator(})operator(\))operator(\))

operator(()keyword(defn-) function(prof) operator([)ident(a) ident(idx) keyword(time)operator(])
  operator(()keyword(update-in) ident(a) operator([)ident(idx)operator(]) keyword(conj) keyword(time)operator(\))operator(\))

operator(()keyword(defn) function(report-profileing) operator([)ident(profiling)operator(])
  operator(()keyword(sort-by) keyword(second) operator(()keyword(map) operator(()keyword(fn) operator([)operator([)ident(idx) ident(times)operator(])operator(]) 
	 operator(()keyword(let) operator([)ident(cnt) operator(()keyword(count) ident(times)operator(\))operator(])
	   operator([)ident(idx) ident(cnt) operator(()keyword(reduce) keyword(+) ident(times)operator(\)) operator(()keyword(apply) keyword(min) ident(times)operator(\)) operator(()keyword(apply) keyword(max) ident(times)operator(\))operator(])operator(\))operator(\)) ident(profiling)operator(\))operator(\))operator(\))

operator(()keyword(defmacro) function(benchmark) 
  operator(()operator([)ident(idx) ident(form)operator(])
     operator(()keyword(if) ident(*do-profile*)
       operator(`)operator(()keyword(let) operator([)ident(t0#) operator(()keyword(.) ident(System) ident(currentTimeMillis)operator(\))
	      ident(r#) operator(~)ident(form)
	      ident(t1#) operator(()keyword(.) ident(System) ident(currentTimeMillis)operator(\))operator(])
	  operator(()keyword(send) ident(*profile*) ident(prof) operator(~)ident(idx) operator(()keyword(-) ident(t1#) ident(t0#)operator(\))operator(\))
	  ident(r#)operator(\))operator(\))operator(\))
  operator(()operator([)ident(form)operator(]) 
     operator(()keyword(if) ident(*do-profile*)
       operator(`)operator(()keyword(let) operator([)ident(t0#) operator(()keyword(.) ident(System) ident(currentTimeMillis)operator(\))
	      ident(r#) operator(~)ident(form)
	      ident(t1#) operator(()keyword(.) ident(System) ident(currentTimeMillis)operator(\))operator(])
	  operator(()keyword(send) ident(*profile*) ident(prof) operator(()keyword(first) operator(')operator(~)ident(form)operator(\)) operator(()keyword(-) ident(t1#) ident(t0#)operator(\))operator(\))
	  ident(r#)operator(\))operator(\))operator(\))operator(\))

operator(()keyword(defmacro) function(profiled) operator([)ident(form)operator(])
  operator(`)operator(()keyword(binding) operator([)ident(*do-profile*) predefined_constant(true)operator(])
     operator(~)ident(form)operator(\))operator(\))
	   

operator(()keyword(defn) function(token) operator([)ident(matcher) ident(kind) ident(&) operator([)ident(new-state) ident(info-fn)operator(])operator(])
  operator(()keyword(cond)
   operator(()keyword(nil?) ident(new-state)operator(\))
   operator(()keyword(fn) operator([)ident(string) ident(idx) ident(states) ident(token-def)operator(])
     operator(()keyword(if-let) operator([)ident(token) operator(()ident(matcher) ident(string) ident(idx)operator(\))operator(])
       operator([)operator([)ident(kind) ident(token) operator(()keyword(if) ident(info-fn) operator(()ident(info-fn) ident(kind) ident(token) ident(states)operator(\)) operator({)symbol(:state) ident(states) symbol(:index) ident(idx)operator(})operator(\))operator(]) ident(states) ident(token-def) operator(()operator(()keyword(first) ident(states)operator(\)) ident(token-def)operator(\))operator(])operator(\))operator(\))
   operator(()keyword(=) ident(new-state) symbol(:pop)operator(\))
   operator(()keyword(fn) operator([)ident(string) ident(idx) ident(states) ident(token-def)operator(])
     operator(()keyword(if-let) operator([)ident(token) operator(()ident(matcher) ident(string) ident(idx)operator(\))operator(])
       operator(()keyword(let) operator([)ident(sts) operator(()keyword(next) ident(states)operator(\))operator(])
	 operator([)operator([)ident(kind) ident(token) operator(()keyword(if) ident(info-fn) operator(()ident(info-fn) ident(kind) ident(token) ident(states)operator(\)) operator({)symbol(:state) ident(states) symbol(:index) ident(idx)operator(})operator(\))operator(]) ident(sts) ident(token-def) operator(()operator(()keyword(first) ident(sts)operator(\)) ident(token-def)operator(\))operator(])operator(\))operator(\))operator(\))
   symbol(:else)
   operator(()keyword(fn) operator([)ident(string) ident(idx) ident(states) ident(token-def)operator(])
     operator(()keyword(if-let) operator([)ident(token) operator(()ident(matcher) ident(string) ident(idx)operator(\))operator(])
       operator(()keyword(let) operator([)ident(sts) operator(()keyword(conj) ident(states) ident(new-state)operator(\))operator(])
	 operator([)operator([)ident(kind) ident(token) operator(()keyword(if) ident(info-fn) operator(()ident(info-fn) ident(kind) ident(token) ident(states)operator(\)) operator({)symbol(:state) ident(states) symbol(:index) ident(idx)operator(})operator(\))operator(]) ident(sts) ident(token-def) operator(()operator(()keyword(first) ident(sts)operator(\)) ident(token-def)operator(\))operator(])operator(\))operator(\))operator(\))operator(\))operator(\))


operator(()keyword(defn) function(re-token) operator([)ident(re) ident(kind) ident(&) operator([)ident(new-state)operator(])operator(])
  operator(()keyword(let) operator([)ident(pattern) operator(()keyword(re-pattern) operator(()keyword(str) string<delimiter(")content(^(?:)delimiter(")> ident(re) string<delimiter(")content(\))delimiter(")>operator(\))operator(\))operator(])
    operator(()ident(token) 
     operator(()keyword(fn) operator([)ident(string) ident(idx)operator(])
       operator(()ident(benchmark) ident(pattern) operator(()keyword(re-find) ident(pattern) operator(()keyword(subs) ident(string) ident(idx)operator(\))operator(\))operator(\))operator(\))
     ident(kind)
     ident(new-state)operator(\))operator(\))operator(\))operator(()keyword(ns) namespace(clj-highlight.syntax.java)
  operator(()symbol(:use) ident(clj-highlight.syntax.general)operator(\))operator(\))

operator(()keyword(def) function(java-keywords) operator(#{)operator(})operator(\))

operator(()keyword(defn) function(str-matcher) operator([)ident(token)operator(])
  operator(()keyword(fn) operator([)ident(string) ident(idx)operator(])
    operator(()keyword(if) operator(()keyword(.)ident(startsWith) ident(string) ident(token) ident(idx)operator(\))
      ident(token)operator(\))operator(\))operator(\))

operator(()keyword(defn) function(java-ident-token) 
  operator([)ident(default-kind)operator(])
  operator(()keyword(fn) ident(java-ident-token*) operator([)ident(string) ident(idx) ident(states) ident(token-def)operator(])   
    operator(()keyword(if-let) operator([)ident(token) operator(()keyword(re-find) regexp<delimiter(#")content(^[a-zA-Z_][a-zA-Z_0-9]*)delimiter(")> operator(()keyword(subs) ident(string) ident(idx)operator(\))operator(\))operator(])
      operator(()keyword(let) operator([)ident(token) operator(()keyword(str) ident(token)operator(\))operator(])
	operator(()keyword(condp) keyword(=) ident(token)
	  string<delimiter(")content(import)delimiter(")>
	  operator(()keyword(let) operator([)ident(states) operator(()keyword(conj) ident(states) symbol(:include)operator(\))operator(])
	    operator([)operator([)symbol(:keyword) ident(token) operator({)symbol(:state) ident(states)operator(})operator(]) ident(states) ident(token-def) operator(()operator(()keyword(first) ident(states)operator(\)) ident(token-def)operator(\))operator(])operator(\))
	  string<delimiter(")content(package)delimiter(")>
	  operator(()keyword(let) operator([)ident(states) operator(()keyword(conj) ident(states) symbol(:namespace)operator(\))operator(])
	    operator([)operator([)symbol(:keyword) ident(token) operator({)symbol(:state) ident(states)operator(})operator(]) ident(states) ident(token-def) operator(()operator(()keyword(first) ident(states)operator(\)) ident(token-def)operator(\))operator(])operator(\))
	  string<delimiter(")content(class)delimiter(")>
	  operator(()keyword(let) operator([)ident(states) operator(()keyword(conj) ident(states) symbol(:class)operator(\))operator(])
	    operator([)operator([)symbol(:keyword) ident(token) operator({)symbol(:state) ident(states)operator(})operator(]) ident(states) ident(token-def) operator(()operator(()keyword(first) ident(states)operator(\)) ident(token-def)operator(\))operator(])operator(\))
	  string<delimiter(")content(interface)delimiter(")>
	  operator(()keyword(let) operator([)ident(states) operator(()keyword(conj) ident(states) symbol(:class)operator(\))operator(])
	    operator([)operator([)symbol(:keyword) ident(token) operator({)symbol(:state) ident(states)operator(})operator(]) ident(states) ident(token-def) operator(()operator(()keyword(first) ident(states)operator(\)) ident(token-def)operator(\))operator(])operator(\))
	  ident(token)
	  operator([)operator([)ident(default-kind) ident(token) operator({)symbol(:state) ident(states)operator(})operator(]) ident(states) ident(token-def) operator(()operator(()keyword(first) ident(states)operator(\)) ident(token-def)operator(\))operator(])operator(\))operator(\))operator(\))operator(\))operator(\))


operator(()keyword(defn) function(java-number-token) operator([)ident(string) ident(idx) ident(states) ident(token-def)operator(])
     operator(()keyword(let) operator([)ident(s) operator(()keyword(subs) ident(string) ident(idx)operator(\))operator(])
       operator(()keyword(if) operator(()keyword(re-find) regexp<delimiter(#")content(^[)content(\\d)content(.])delimiter(")> ident(s)operator(\))
	 operator(()keyword(if-let) operator([)ident(token) operator(()keyword(re-find) regexp<delimiter(#")content(^)content(\\d)content(+[fFdD]|)content(\\d)content(*)content(\\.)content(\\d)content(+(?:[eE][+-]?)content(\\d)content(+\)?[fFdD]?|)content(\\d)content(+[eE][+-]?)content(\\d)content(+[fFdD]?)delimiter(")> ident(s)operator(\))operator(])
	   operator([)operator([)symbol(:float) ident(token) operator({)symbol(:state) ident(states)operator(})operator(]) ident(states) ident(token-def) operator(()operator(()keyword(first) ident(states)operator(\)) ident(token-def)operator(\))operator(])
	   operator(()keyword(if-let) operator([)ident(token) operator(()keyword(re-find) regexp<delimiter(#")content(^0[xX][0-9A-Fa-f]+)delimiter(")> ident(s)operator(\))operator(])
	     operator([)operator([)symbol(:hex) ident(token) operator({)symbol(:state) ident(states)operator(})operator(]) ident(states) ident(token-def) operator(()operator(()keyword(first) ident(states)operator(\)) ident(token-def)operator(\))operator(])
	     operator(()keyword(if-let) operator([)ident(token) operator(()keyword(re-find) regexp<delimiter(#")content(^(?>0[0-7]+\)(?![89.eEfF]\))delimiter(")> ident(s)operator(\))operator(])
	       operator([)operator([)symbol(:oct) ident(token) operator({)symbol(:state) ident(states)operator(})operator(]) ident(states) ident(token-def) operator(()operator(()keyword(first) ident(states)operator(\)) ident(token-def)operator(\))operator(])
	       operator(()keyword(if-let) operator([)ident(token) operator(()keyword(re-find) regexp<delimiter(#")content(^)content(\\d)content(+[lL]?)delimiter(")> ident(s)operator(\))operator(])
		 operator([)operator([)symbol(:integer) ident(token) operator({)symbol(:state) ident(states)operator(})operator(]) ident(states) ident(token-def) operator(()operator(()keyword(first) ident(states)operator(\)) ident(token-def)operator(\))operator(])
		 predefined_constant(nil)operator(\))operator(\))operator(\))operator(\))operator(\))operator(\))operator(\))

operator(()keyword(def)  function(java-default-tokens)
     operator(()keyword(list)
      operator(()ident(re-token) regexp<delimiter(#")content(\\s)content(+|)content(\\n)delimiter(")> symbol(:space)operator(\))
      operator(()ident(re-token) regexp<delimiter(#")content(\\.)content((?!)content(\\d)content(\)|[,?:(\))content(\\[)content(\\])content({};]|--|)content(\\+)content(\\+)content(|&&|)content(\\|)content(\\|)content(|)content(\\*)content(\\*)content(=?|[-+*)content(\\/)content(%^~&|<>=!]=?|<<<?=?|>>>?=?)delimiter(")> symbol(:opperator)operator(\))
      ident(java-number-token)
      operator(()ident(token) operator(()ident(str-matcher) string<delimiter(")content(\\")delimiter(")>operator(\)) symbol(:string) symbol(:string1)operator(\))
      operator(()ident(token) operator(()ident(str-matcher) string<delimiter(")content(')delimiter(")>operator(\)) symbol(:string) symbol(:string2)operator(\))
      operator(()ident(re-token) regexp<delimiter(#")content(//[^)content(\\n)content(\\\\)content(]*(?:)content(\\\\)content(.[^)content(\\n)content(\\\\)content(]*\)*)delimiter(")> symbol(:comment)operator(\))
      operator(()ident(re-token) regexp<delimiter(#")content(/)content(\\*)content((?s:.*?\))content(\\*)content(/)delimiter(")> symbol(:comment)operator(\))
      operator(()ident(re-token) regexp<delimiter(#")content(@[a-zA-Z_][A-Za-z_0-9]*)delimiter(")> symbol(:annotation)operator(\))
      operator(\))operator(\))

operator(()keyword(def) function(java-sub-tokens)
     operator(()keyword(list) operator(()ident(token) operator(()ident(str-matcher) string<delimiter(")content(;)delimiter(")>operator(\)) symbol(:opperator) symbol(:pop)operator(\))
	   operator(()ident(token) operator(()ident(str-matcher) string<delimiter(")content({)delimiter(")>operator(\)) symbol(:opperator) symbol(:pop)operator(\))
	   operator(()ident(java-ident-token) symbol(:ident)operator(\))operator(\))operator(\))

operator(()keyword(def) function(java-syntax)
     operator({)symbol(:keywords) ident(java-keywords)
      symbol(:initial) operator(()keyword(concat) ident(java-default-tokens) 
		       operator(()keyword(list)
			operator(()ident(re-token) regexp<delimiter(#")content([{;])delimiter(")> symbol(:opperator)operator(\))
			operator(()ident(java-ident-token) symbol(:ident)operator(\))operator(\))operator(\))
      symbol(:include) 
      operator(()keyword(concat) operator(()keyword(list) operator(()ident(re-token) regexp<delimiter(#")content([a-zA-Z_][A-Za-z_0-9]*+(?:)content(\\.)content([a-zA-Z_][A-Za-z_0-9]*+\)*+(?:)content(\\.)content(\\*)content(\)?)delimiter(")> symbol(:include)operator(\))operator(\))
	      ident(java-sub-tokens)
	      ident(java-default-tokens)operator(\))
      symbol(:namespace) 
      operator(()keyword(concat) operator(()keyword(list) operator(()ident(re-token) regexp<delimiter(#")content([a-zA-Z_][A-Za-z_0-9]*+(?:)content(\\.)content([a-zA-Z_][A-Za-z_0-9]*+\)*+)delimiter(")> symbol(:namespace)operator(\))operator(\))
	      ident(java-sub-tokens)
	      ident(java-default-tokens)operator(\))
      symbol(:class) 
      operator(()keyword(concat) operator(()keyword(list) 
	       operator(()ident(re-token) regexp<delimiter(#")content([a-zA-Z_][A-Za-z_0-9]*)delimiter(")> symbol(:class)operator(\))operator(\))
	      ident(java-sub-tokens)
	      ident(java-default-tokens)operator(\))
     symbol(:string1) operator(()keyword(list)
	       operator(()ident(re-token) regexp<delimiter(#")content([^)content(\\")content(\\\\)content(]+)delimiter(")> symbol(:string)operator(\))
	       operator(()ident(token) operator(()ident(str-matcher) string<delimiter(")content(\\")delimiter(")>operator(\)) symbol(:string) symbol(:pop)operator(\))
	       operator(()ident(re-token) regexp<delimiter(#")content(\\\\)content((?:[bfnrtv)content(\\n)content(\\")content(')content(\\\\)content(]|x[a-fA-F0-9]{1,2}|[0-7]{1,3}|u[a-fA-F0-9]{4}|U[a-fA-F0-9]{8}\))delimiter(")> symbol(:string)operator(\))operator(\))
     symbol(:string2) operator(()keyword(list)
	       operator(()ident(re-token) regexp<delimiter(#")content([^')content(\\\\)content(]+)delimiter(")> symbol(:string)operator(\))
	       operator(()ident(token) operator(()ident(str-matcher) string<delimiter(")content(')delimiter(")>operator(\)) symbol(:string) symbol(:pop)operator(\))
	       operator(()ident(re-token) regexp<delimiter(#")content(\\\\)content((?:[bfnrtv)content(\\n)content(\\")content(')content(\\\\)content(]|x[a-fA-F0-9]{1,2}|[0-7]{1,3}|u[a-fA-F0-9]{4}|U[a-fA-F0-9]{8}\))delimiter(")> symbol(:string)operator(\))operator(\))operator(})operator(\))operator(()keyword(ns) namespace(clj-highlight.test)
  operator(()symbol(:use) ident(clj-highlight.core) 
	operator([)ident(clj-highlight.syntax) ident(java) ident(clojure)operator(])operator(\))
  operator(()symbol(:gen-class)operator(\))operator(\))


operator(()keyword(defn) function(time-method) operator([)ident(fun)operator(])
  operator(()keyword(let) operator([)ident(_) operator(()keyword(dotimes) operator([)ident(n) integer(1)operator(]) operator(()ident(fun)operator(\)) operator(()keyword(print) string<delimiter(")content(.)delimiter(")>operator(\)) operator(()keyword(flush)operator(\))operator(\))
	ident(a) operator(()keyword(.) ident(System) ident(currentTimeMillis)operator(\))
	ident(r) operator(()ident(fun)operator(\))
	ident(b) operator(()keyword(.) ident(System) ident(currentTimeMillis)operator(\))operator(])
    operator([)ident(r) operator(()keyword(int) operator(()keyword(/) operator(()keyword(-) ident(b) ident(a)operator(\)) integer(2)operator(\))operator(\))operator(])operator(\))operator(\))

operator(()keyword(defn) function(test-scanner) operator([)ident(syntax) ident(in-file)operator(])
     operator(()keyword(let) operator([)ident(code) operator(()keyword(slurp) ident(in-file)operator(\))
	   ident(tkn) operator(()ident(highlighter) ident(syntax) keyword(identity)operator(\))
	   ident(_)operator(()keyword(print) string<delimiter(")content(Timing scanner)delimiter(")>operator(\))
	   operator([)operator([)ident(c) ident(e)operator(]) ident(t)operator(]) operator(()ident(time-method) operator(()keyword(fn) operator([)operator(]) operator([)operator(()keyword(count) operator(()ident(tkn) ident(code)operator(\))operator(\)) operator(()keyword(count) operator(()keyword(filter) operator(#()keyword(=) symbol(:error) operator(()keyword(first) ident(%)operator(\))operator(\)) operator(()ident(tkn) ident(code)operator(\))operator(\))operator(\))operator(])operator(\))operator(\))
	   ident(_) operator(()keyword(println) string<delimiter(")content(done.)delimiter(")>operator(\))operator(])
       operator(()keyword(println) string<delimiter(")content(Parsed)delimiter(")> ident(in-file) string<delimiter(")content(with)delimiter(")> ident(c) string<delimiter(")content(tokens )delimiter(")> operator(()keyword(str) string<delimiter(")content(()delimiter(")> ident(e) string<delimiter(")content( errors\))delimiter(")>operator(\)) string<delimiter(")content(in)delimiter(")> operator(()keyword(str) ident(t) string<delimiter(")content(ms ()delimiter(")> operator(()keyword(int) operator(()keyword(/) ident(c) ident(t)operator(\))operator(\)) string<delimiter(")content( kTok/s\).)delimiter(")> operator(\))operator(\))operator(\))operator(\))

operator(()keyword(defn) function(-main) operator([)operator(])
  operator(()ident(test-scanner) ident(java-syntax) string<delimiter(")content(benchmarks/jruby.in.java)delimiter(")>operator(\))
  operator(()ident(test-scanner) ident(clj-syntax) string<delimiter(")content(benchmarks/core.clj)delimiter(")>operator(\))operator(\))



comment(;(comment )
comment(;  (def code (slurp "src/clj_highlight/syntax/clojure.clj"\)\))
comment(;  (use 'clj-highlight.core 'clj-highlight.syntax.clojure :reload-all\))
comment(;  (def tkn (highlighter clj-syntax identity\)\))
comment(;  clj_highlight.**)
comment(;  , sun.rmi.transport.*, clojure.*, swank.*, sun.rmi.*)
comment(;  (time (dotimes [i 10] (count (tkn code\)\)\)\))
comment(;\))
  