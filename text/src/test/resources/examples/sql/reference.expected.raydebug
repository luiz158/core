comment(# All of the values below are valid MySQL syntax accoring to)
comment(# the Reference Manual:)
comment(#   http://dev.mysql.com/doc/refman/5.1/en/language-structure.html)
comment(# unless stated otherwise.)

comment(# strings)
class(SELECT) string<delimiter(')content(a string)delimiter(')>operator(;)
class(SELECT) string<delimiter(")content(another string)delimiter(")>operator(;)

class(SELECT) string<modifier(_latin1)delimiter(')content(string)delimiter(')>operator(;)
class(SELECT) string<modifier(_latin1)delimiter(')content(string)delimiter(')> keyword(COLLATE) ident(latin1_danish_ci)operator(;)

class(SELECT) string<modifier(N)delimiter(')content(some text)delimiter(')>operator(;)
class(SELECT) string<modifier(n)delimiter(')content(some text)delimiter(')>operator(;)
class(SELECT) string<modifier(_utf8)delimiter(')content(some text)delimiter(')>operator(;)

class(SELECT) string<delimiter(")char(\\0)char(\\')char(\\")content(''"")char(\\b)char(\\n)char(\\r)char(\\t)char(\\Z)char(\\\\)char(\\%)char(\\_)delimiter(")>operator(;)  comment(# ")
class(SELECT) string<delimiter(')char(\\0)char(\\')char(\\")content(''"")char(\\b)char(\\n)char(\\r)char(\\t)char(\\Z)char(\\\\)char(\\%)char(\\_)delimiter(')>operator(;)  comment(# ')

class(SELECT) string<delimiter(")char(\\B)char(\\x)delimiter(")>operator(;)  comment(# ")
class(SELECT) string<delimiter(')char(\\B)char(\\x)delimiter(')>operator(;)  comment(# ')

class(SELECT) string<delimiter(')content(hello)delimiter(')>operator(,) string<delimiter(')content("hello")delimiter(')>operator(,) string<delimiter(')content(""hello"")delimiter(')>operator(,) string<delimiter(')content(hel''lo)delimiter(')>operator(,) string<delimiter(')char(\\')content(hello)delimiter(')>operator(;)  comment(-- ')
class(SELECT) string<delimiter(")content(hello)delimiter(")>operator(,) string<delimiter(")content('hello')delimiter(")>operator(,) string<delimiter(")content(''hello'')delimiter(")>operator(,) string<delimiter(")content(hel""lo)delimiter(")>operator(,) string<delimiter(")char(\\")content(hello)delimiter(")>operator(;)  comment(-- ")

class(SELECT) string<delimiter(')content(This)char(\\n)content(Is)char(\\n)content(Four)char(\\n)content(Lines)delimiter(')>operator(;)
class(SELECT) string<delimiter(')content(disappearing)char(\\ )content(backslash)delimiter(')>operator(;)

comment(# numbers)
class(select) integer(1221)operator(;)
class(select) integer(0)operator(;)
class(select) integer(-32)operator(:)

class(select) float(294.42)operator(:)
class(select) float(-32032.6809e+10)operator(;)
class(select) float(148.00)operator(;)

class(select) float(10e+10)operator(;)
class(select) float(10e10)operator(;)

comment(# hexadecimal)
class(SELECT) string<modifier(X)delimiter(')content(4D7953514C)delimiter(')>operator(;)
class(SELECT) hex(0x0a)integer(+0)operator(;)
class(SELECT) hex(0x5061756c)operator(;)
class(SELECT) hex(0x41)operator(,) predefined(CAST)operator(()hex(0x41) keyword(AS) predefined_type(UNSIGNED)operator(\))operator(;)
class(SELECT) predefined_type(HEX)operator(()string<delimiter(')content(cat)delimiter(')>operator(\))operator(;)
class(SELECT) hex(0x636174)operator(;)
class(insert) class(into) ident(t) operator(()ident(md5)operator(\)) keyword(values) operator(()hex(0xad65)operator(\))operator(;)
class(SELECT) operator(*) keyword(FROM) ident(SomeTable) keyword(WHERE) ident(BinaryColumn) operator(=) predefined(CAST)operator(() string<modifier(x)delimiter(')content(a0f44ef7a52411de)delimiter(')> keyword(AS) predefined_type(BINARY) operator(\))operator(;)
class(select) string<modifier(x)delimiter(')content(000bdddc0e9153f5a93447fc3310f710)delimiter(')>operator(,) string<modifier(x)delimiter(')content(0bdddc0e9153f5a93447fc3310f710)delimiter(')>operator(;)

class(SELECT) predefined_constant(TRUE)operator(,) predefined_constant(true)operator(,) predefined_constant(FALSE)operator(,) predefined_constant(false)operator(;)
class(SELECT) predefined_constant(NULL)operator(,) predefined_constant(null)operator(,) predefined_constant(nuLL)operator(,) predefined_constant(\\N)operator(;)
class(SELECT) error(\\)ident(n)operator(;)  comment(# invalid!)

comment(# bit-field)
class(CREATE) type(TABLE) ident(t) operator(()ident(b) predefined_type(BIT)operator(()integer(8)operator(\))operator(\))operator(;)
class(INSERT) class(INTO) ident(t) class(SET) ident(b) operator(=) string<modifier(b)delimiter(')content(11111111)delimiter(')>operator(;)
class(INSERT) class(INTO) ident(t) class(SET) ident(b) operator(=) string<modifier(b)delimiter(')content(1010)delimiter(')>operator(;)
class(INSERT) class(INTO) ident(t) class(SET) ident(b) operator(=) string<modifier(b)delimiter(')content(0101)delimiter(')>operator(;)
class(SELECT) ident(b)integer(+0)operator(,) predefined_type(BIN)operator(()ident(b)integer(+0)operator(\))operator(,) predefined_type(OCT)operator(()ident(b)integer(+0)operator(\))operator(,) predefined_type(HEX)operator(()ident(b)integer(+0)operator(\)) keyword(FROM) ident(t)operator(;)

class(SET) variable(@v1) operator(=) string<modifier(b)delimiter(')content(1000001)delimiter(')>operator(;)
class(SET) variable(@v2) operator(=) predefined(CAST)operator(()string<modifier(b)delimiter(')content(1000001)delimiter(')> keyword(AS) predefined_type(UNSIGNED)operator(\))operator(,) variable(@v3) operator(=) string<modifier(b)delimiter(')content(1000001)delimiter(')>integer(+0)operator(;)
class(SELECT) variable(@v1)operator(,) variable(@v2)operator(,) variable(@v3)operator(;)

class(INSERT) class(INTO) ident(my_table) operator(()ident(phone)operator(\)) keyword(VALUES) operator(()predefined_constant(NULL)operator(\))operator(;)
class(INSERT) class(INTO) ident(my_table) operator(()ident(phone)operator(\)) keyword(VALUES) operator(()string<delimiter(')delimiter(')>operator(\))operator(;)

comment(# schema object names)
class(SELECT) operator(*) keyword(FROM) string<delimiter(`)content(select)delimiter(`)> keyword(WHERE) string<delimiter(`)content(select)delimiter(`)>operator(.)ident(id) operator(>) integer(100)operator(;)

class(CREATE) type(TABLE) string<delimiter(`)content(a``b)delimiter(`)> operator(()string<delimiter(`)content(c"d)delimiter(`)> predefined_type(INT)operator(\))operator(;)
class(SELECT) integer(1) keyword(AS) string<delimiter(`)content(one)delimiter(`)>operator(,) integer(2) keyword(AS) string<delimiter(')content(two)delimiter(')>operator(;)

class(select) ident(foo) keyword(from) ident(foo)operator(;)
class(select) string<delimiter(`)content(foo)delimiter(`)> keyword(from) ident(foo)operator(;)
class(select) ident(foo)operator(.)ident(bar) keyword(from) ident(foo)operator(;)
class(select) string<delimiter(`)content(foo)delimiter(`)>operator(.)ident(bar) keyword(from) ident(foo)operator(;)
class(select) ident(foo)operator(.)string<delimiter(`)content(bar)delimiter(`)> keyword(from) ident(foo)operator(;)
class(select) string<delimiter(`)content(foo.bar)delimiter(`)> keyword(from) ident(foo)operator(;)
class(select) string<delimiter(`)content(foo)delimiter(`)>operator(.)string<delimiter(`)content(bar)delimiter(`)> keyword(from) ident(foo)operator(;)

comment(# How to handle ANSI_QUOTES?)
class(CREATE) type(TABLE) string<delimiter(")content(test)delimiter(")> operator(()ident(col) predefined_type(INT)operator(\))operator(;)
class(SET) ident(sql_mode)operator(=)string<delimiter(')content(ANSI_QUOTES)delimiter(')>operator(;)
class(CREATE) type(TABLE) string<delimiter(")content(test)delimiter(")> operator(()ident(col) predefined_type(INT)operator(\))operator(;)

comment(# identifiers)
class(SELECT) operator(*) keyword(FROM) ident(my_table) keyword(WHERE) ident(MY_TABLE)operator(.)ident(col)operator(=)integer(1)operator(;)
class(SHOW) type(COLUMNS) keyword(FROM) string<delimiter(`)content(#mysql50#a@b)delimiter(`)>operator(;)

comment(# Function Name Parsing and Resolution)


class(SELECT) predefined(COUNT)operator(()operator(*)operator(\)) keyword(FROM) ident(mytable)operator(;)  comment(-- the first reference to count is a function call)
class(CREATE) type(TABLE) predefined(count) operator(()ident(i) predefined_type(INT)operator(\))operator(;)  comment(-- whereas the second reference is a table name)
class(CREATE) type(TABLE) string<delimiter(`)content(count)delimiter(`)>operator(()ident(i) predefined_type(INT)operator(\))operator(;)  comment(-- this too)
class(CREATE) type(TABLE) string<delimiter(`)content(count)delimiter(`)> operator(()ident(i) predefined_type(INT)operator(\))operator(;)  comment(-- this too)

comment(# IGNORE_SPACE)
class(SELECT) predefined(COUNT)operator(()operator(*)operator(\)) keyword(FROM) ident(mytable)operator(;)
class(SELECT) predefined(COUNT) operator(()operator(*)operator(\)) keyword(FROM) ident(mytable)operator(;)

comment(# reserved words)
class(CREATE) type(TABLE) ident(interval) operator(()class(begin) predefined_type(INT)operator(,) keyword(end) predefined_type(INT)operator(\))operator(;)  comment(-- errror)
class(CREATE) type(TABLE) string<delimiter(`)content(interval)delimiter(`)> operator(()class(begin) predefined_type(INT)operator(,) keyword(end) predefined_type(INT)operator(\))operator(;)  comment(-- valid)
class(CREATE) type(TABLE) ident(mydb)operator(.)ident(interval) operator(()class(begin) predefined_type(INT)operator(,) keyword(end) predefined_type(INT)operator(\))operator(;)  comment(-- valid)
class(SELECT) string<delimiter(`)content(foo)delimiter(`)>operator(,) string<delimiter(`)content(bar)delimiter(`)> keyword(FROM) string<delimiter(`)content(baz)delimiter(`)> keyword(WHERE) string<delimiter(`)content(bal)delimiter(`)> operator(=) string<delimiter(`)content(quiche)delimiter(`)>operator(;)  comment(-- valid)
