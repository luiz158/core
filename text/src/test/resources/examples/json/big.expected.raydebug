operator([)
  operator({)
    key<delimiter(")content(import_url)delimiter(")>operator(:) string<delimiter(")content(http:)char(\\/)char(\\/)content(localhost:3000)char(\\/)content(neighbourhoods)char(\\/)content(Neighbourhoods::Storage)char(\\/)content(import)delimiter(")>operator(,)
    key<delimiter(")content(type)delimiter(")>operator(:) string<delimiter(")content(Neighbourhood)delimiter(")>operator(,)
    key<delimiter(")content(reflected)delimiter(")>operator(:) value(false)operator(,)
    key<delimiter(")content(selected)delimiter(")>operator(:) value(true)operator(,)
    key<delimiter(")content(export_url)delimiter(")>operator(:) string<delimiter(")content(http:)char(\\/)char(\\/)content(localhost:3000)char(\\/)content(neighbourhoods)char(\\/)content(Neighbourhoods::Storage)char(\\/)content(export)delimiter(")>operator(,)
    key<delimiter(")content(snapshots_url)delimiter(")>operator(:) string<delimiter(")content(http:)char(\\/)char(\\/)content(localhost:3000)char(\\/)content(snapshots)delimiter(")>operator(,)
    key<delimiter(")content(uri)delimiter(")>operator(:) string<delimiter(")content(http:)char(\\/)char(\\/)content(localhost:3000)char(\\/)content(neighbourhoods)char(\\/)content(Neighbourhoods::Storage)char(\\/)content(lists)delimiter(")>operator(,)
    key<delimiter(")content(print_url)delimiter(")>operator(:) string<delimiter(")content(http:)char(\\/)char(\\/)content(localhost:3000)char(\\/)content(neighbourhoods)char(\\/)content(Neighbourhoods::Storage)char(\\/)content(print)delimiter(")>operator(,)
    key<delimiter(")content(locked)delimiter(")>operator(:) value(false)operator(,)
    key<delimiter(")content(name)delimiter(")>operator(:) string<delimiter(")content(Lager)delimiter(")>operator(,)
    key<delimiter(")content(lists)delimiter(")>operator(:) operator([)
      operator({)
        key<delimiter(")content(type)delimiter(")>operator(:) string<delimiter(")content(List)delimiter(")>operator(,)
        key<delimiter(")content(sort_keys)delimiter(")>operator(:) operator({)
          key<delimiter(")content(options)delimiter(")>operator(:) operator([)
            operator({)
              key<delimiter(")content(name)delimiter(")>operator(:) string<delimiter(")content(Standardsortierung)delimiter(")>operator(,)
              key<delimiter(")content(id)delimiter(")>operator(:) value(null)
            operator(})
          operator(])
        operator(})operator(,)
        key<delimiter(")content(uri)delimiter(")>operator(:) string<delimiter(")content(http:)char(\\/)char(\\/)content(localhost:3000)char(\\/)content(lists)char(\\/)content(Lists::Manufacturers)char(\\/)content(elements.json)delimiter(")>operator(,)
        key<delimiter(")content(sort_key_uri)delimiter(")>operator(:) string<delimiter(")content(http:)char(\\/)char(\\/)content(localhost:3000)char(\\/)content(lists)char(\\/)content(Lists::Manufacturers)char(\\/)content(sort_key)delimiter(")>operator(,)
        key<delimiter(")content(name)delimiter(")>operator(:) string<delimiter(")content(Hersteller)delimiter(")>operator(,)
        key<delimiter(")content(readable)delimiter(")>operator(:) value(true)operator(,)
        key<delimiter(")content(id)delimiter(")>operator(:) string<delimiter(")content(Lists::Manufacturers)delimiter(")>operator(,)
        key<delimiter(")content(element_types)delimiter(")>operator(:) operator([)
          operator({)
            key<delimiter(")content(create_element_url)delimiter(")>operator(:) string<delimiter(")content(http:)char(\\/)char(\\/)content(localhost:3000)char(\\/)content(elements?list=Lists%3A%3AManufacturers&type=Elements%3A%3AManufacturer)delimiter(")>operator(,)
            key<delimiter(")content(essential_attributes)delimiter(")>operator(:) operator([)
            operator(])operator(,)
            key<delimiter(")content(name)delimiter(")>operator(:) string<delimiter(")content(Hersteller)delimiter(")>operator(,)
            key<delimiter(")content(ask_for_email)delimiter(")>operator(:) value(false)operator(,)
            key<delimiter(")content(id)delimiter(")>operator(:) string<delimiter(")content(Elements::Manufacturer)delimiter(")>
          operator(})
        operator(])operator(,)
        key<delimiter(")content(writable)delimiter(")>operator(:) value(true)
      operator(})operator(,)
      operator({)
        key<delimiter(")content(type)delimiter(")>operator(:) string<delimiter(")content(List)delimiter(")>operator(,)
        key<delimiter(")content(sort_keys)delimiter(")>operator(:) operator({)
          key<delimiter(")content(options)delimiter(")>operator(:) operator([)
            operator({)
              key<delimiter(")content(name)delimiter(")>operator(:) string<delimiter(")content(Standardsortierung)delimiter(")>operator(,)
              key<delimiter(")content(id)delimiter(")>operator(:) value(null)
            operator(})
          operator(])
        operator(})operator(,)
        key<delimiter(")content(uri)delimiter(")>operator(:) string<delimiter(")content(http:)char(\\/)char(\\/)content(localhost:3000)char(\\/)content(lists)char(\\/)content(Lists::Categories)char(\\/)content(elements.json)delimiter(")>operator(,)
        key<delimiter(")content(sort_key_uri)delimiter(")>operator(:) string<delimiter(")content(http:)char(\\/)char(\\/)content(localhost:3000)char(\\/)content(lists)char(\\/)content(Lists::Categories)char(\\/)content(sort_key)delimiter(")>operator(,)
        key<delimiter(")content(name)delimiter(")>operator(:) string<delimiter(")content(Rubriken)delimiter(")>operator(,)
        key<delimiter(")content(readable)delimiter(")>operator(:) value(true)operator(,)
        key<delimiter(")content(id)delimiter(")>operator(:) string<delimiter(")content(Lists::Categories)delimiter(")>operator(,)
        key<delimiter(")content(element_types)delimiter(")>operator(:) operator([)
          operator({)
            key<delimiter(")content(create_element_url)delimiter(")>operator(:) string<delimiter(")content(http:)char(\\/)char(\\/)content(localhost:3000)char(\\/)content(elements?list=Lists%3A%3ACategories&type=Elements%3A%3ACategory)delimiter(")>operator(,)
            key<delimiter(")content(essential_attributes)delimiter(")>operator(:) operator([)
            operator(])operator(,)
            key<delimiter(")content(name)delimiter(")>operator(:) string<delimiter(")content(Rubrik)delimiter(")>operator(,)
            key<delimiter(")content(ask_for_email)delimiter(")>operator(:) value(false)operator(,)
            key<delimiter(")content(id)delimiter(")>operator(:) string<delimiter(")content(Elements::Category)delimiter(")>
          operator(})
        operator(])operator(,)
        key<delimiter(")content(writable)delimiter(")>operator(:) value(true)
      operator(})operator(,)
      operator({)
        key<delimiter(")content(type)delimiter(")>operator(:) string<delimiter(")content(List)delimiter(")>operator(,)
        key<delimiter(")content(sort_keys)delimiter(")>operator(:) operator({)
          key<delimiter(")content(options)delimiter(")>operator(:) operator([)
            operator({)
              key<delimiter(")content(name)delimiter(")>operator(:) string<delimiter(")content(Standardsortierung)delimiter(")>operator(,)
              key<delimiter(")content(id)delimiter(")>operator(:) value(null)
            operator(})
          operator(])
        operator(})operator(,)
        key<delimiter(")content(uri)delimiter(")>operator(:) string<delimiter(")content(http:)char(\\/)char(\\/)content(localhost:3000)char(\\/)content(lists)char(\\/)content(Lists::ArticlesList)char(\\/)content(elements.json)delimiter(")>operator(,)
        key<delimiter(")content(sort_key_uri)delimiter(")>operator(:) string<delimiter(")content(http:)char(\\/)char(\\/)content(localhost:3000)char(\\/)content(lists)char(\\/)content(Lists::ArticlesList)char(\\/)content(sort_key)delimiter(")>operator(,)
        key<delimiter(")content(name)delimiter(")>operator(:) string<delimiter(")content(Artikel)delimiter(")>operator(,)
        key<delimiter(")content(readable)delimiter(")>operator(:) value(true)operator(,)
        key<delimiter(")content(id)delimiter(")>operator(:) string<delimiter(")content(Lists::ArticlesList)delimiter(")>operator(,)
        key<delimiter(")content(element_types)delimiter(")>operator(:) operator([)
          operator({)
            key<delimiter(")content(create_element_url)delimiter(")>operator(:) string<delimiter(")content(http:)char(\\/)char(\\/)content(localhost:3000)char(\\/)content(elements?list=Lists%3A%3AArticlesList&type=Elements%3A%3AArticle)delimiter(")>operator(,)
            key<delimiter(")content(essential_attributes)delimiter(")>operator(:) operator([)
            operator(])operator(,)
            key<delimiter(")content(name)delimiter(")>operator(:) string<delimiter(")content(Artikel)delimiter(")>operator(,)
            key<delimiter(")content(ask_for_email)delimiter(")>operator(:) value(false)operator(,)
            key<delimiter(")content(id)delimiter(")>operator(:) string<delimiter(")content(Elements::Article)delimiter(")>
          operator(})
        operator(])operator(,)
        key<delimiter(")content(writable)delimiter(")>operator(:) value(true)
      operator(})operator(,)
      operator({)
        key<delimiter(")content(type)delimiter(")>operator(:) string<delimiter(")content(List)delimiter(")>operator(,)
        key<delimiter(")content(sort_keys)delimiter(")>operator(:) operator({)
          key<delimiter(")content(options)delimiter(")>operator(:) operator([)
            operator({)
              key<delimiter(")content(name)delimiter(")>operator(:) string<delimiter(")content(Standardsortierung)delimiter(")>operator(,)
              key<delimiter(")content(id)delimiter(")>operator(:) value(null)
            operator(})operator(,)
            operator({)
              key<delimiter(")content(name)delimiter(")>operator(:) string<delimiter(")content(Bestelldatum)delimiter(")>operator(,)
              key<delimiter(")content(id)delimiter(")>operator(:) string<delimiter(")content(Date)delimiter(")>
            operator(})operator(,)
            operator({)
              key<delimiter(")content(name)delimiter(")>operator(:) string<delimiter(")content(bestellt von)delimiter(")>operator(,)
              key<delimiter(")content(id)delimiter(")>operator(:) string<delimiter(")content(OrderedBy)delimiter(")>
            operator(})operator(,)
            operator({)
              key<delimiter(")content(name)delimiter(")>operator(:) string<delimiter(")content(Summe)delimiter(")>operator(,)
              key<delimiter(")content(id)delimiter(")>operator(:) string<delimiter(")content(Total)delimiter(")>
            operator(})
          operator(])
        operator(})operator(,)
        key<delimiter(")content(uri)delimiter(")>operator(:) string<delimiter(")content(http:)char(\\/)char(\\/)content(localhost:3000)char(\\/)content(lists)char(\\/)content(Lists::Orders)char(\\/)content(elements.json)delimiter(")>operator(,)
        key<delimiter(")content(sort_key_uri)delimiter(")>operator(:) string<delimiter(")content(http:)char(\\/)char(\\/)content(localhost:3000)char(\\/)content(lists)char(\\/)content(Lists::Orders)char(\\/)content(sort_key)delimiter(")>operator(,)
        key<delimiter(")content(name)delimiter(")>operator(:) string<delimiter(")content(Bestellungen)delimiter(")>operator(,)
        key<delimiter(")content(readable)delimiter(")>operator(:) value(true)operator(,)
        key<delimiter(")content(id)delimiter(")>operator(:) string<delimiter(")content(Lists::Orders)delimiter(")>operator(,)
        key<delimiter(")content(element_types)delimiter(")>operator(:) operator([)
          operator({)
            key<delimiter(")content(create_element_url)delimiter(")>operator(:) string<delimiter(")content(http:)char(\\/)char(\\/)content(localhost:3000)char(\\/)content(elements?list=Lists%3A%3AOrders&type=Elements%3A%3AOrder)delimiter(")>operator(,)
            key<delimiter(")content(essential_attributes)delimiter(")>operator(:) operator([)
            operator(])operator(,)
            key<delimiter(")content(name)delimiter(")>operator(:) string<delimiter(")content(Bestellung)delimiter(")>operator(,)
            key<delimiter(")content(ask_for_email)delimiter(")>operator(:) value(false)operator(,)
            key<delimiter(")content(id)delimiter(")>operator(:) string<delimiter(")content(Elements::Order)delimiter(")>
          operator(})
        operator(])operator(,)
        key<delimiter(")content(writable)delimiter(")>operator(:) value(true)
      operator(})
    operator(])operator(,)
    key<delimiter(")content(release_export_lock_url)delimiter(")>operator(:) string<delimiter(")content(http:)char(\\/)char(\\/)content(localhost:3000)char(\\/)content(neighbourhoods)char(\\/)content(Neighbourhoods::Storage)char(\\/)content(release_export_lock)delimiter(")>operator(,)
    key<delimiter(")content(readable)delimiter(")>operator(:) value(true)operator(,)
    key<delimiter(")content(replay_latest_snapshot_url)delimiter(")>operator(:) string<delimiter(")content(http:)char(\\/)char(\\/)content(localhost:3000)char(\\/)content(snapshots)char(\\/)content(replay_latest)delimiter(")>operator(,)
    key<delimiter(")content(id)delimiter(")>operator(:) string<delimiter(")content(Neighbourhoods::Storage)delimiter(")>operator(,)
    key<delimiter(")content(writable)delimiter(")>operator(:) value(true)
  operator(})operator(,)
  operator({)
    key<delimiter(")content(import_url)delimiter(")>operator(:) string<delimiter(")content(http:)char(\\/)char(\\/)content(localhost:3000)char(\\/)content(neighbourhoods)char(\\/)content(Neighbourhoods::Administration)char(\\/)content(import)delimiter(")>operator(,)
    key<delimiter(")content(type)delimiter(")>operator(:) string<delimiter(")content(Neighbourhood)delimiter(")>operator(,)
    key<delimiter(")content(reflected)delimiter(")>operator(:) value(true)operator(,)
    key<delimiter(")content(selected)delimiter(")>operator(:) value(false)operator(,)
    key<delimiter(")content(export_url)delimiter(")>operator(:) string<delimiter(")content(http:)char(\\/)char(\\/)content(localhost:3000)char(\\/)content(neighbourhoods)char(\\/)content(Neighbourhoods::Administration)char(\\/)content(export)delimiter(")>operator(,)
    key<delimiter(")content(snapshots_url)delimiter(")>operator(:) string<delimiter(")content(http:)char(\\/)char(\\/)content(localhost:3000)char(\\/)content(snapshots)delimiter(")>operator(,)
    key<delimiter(")content(uri)delimiter(")>operator(:) string<delimiter(")content(http:)char(\\/)char(\\/)content(localhost:3000)char(\\/)content(neighbourhoods)char(\\/)content(Neighbourhoods::Administration)char(\\/)content(lists)delimiter(")>operator(,)
    key<delimiter(")content(print_url)delimiter(")>operator(:) string<delimiter(")content(http:)char(\\/)char(\\/)content(localhost:3000)char(\\/)content(neighbourhoods)char(\\/)content(Neighbourhoods::Administration)char(\\/)content(print)delimiter(")>operator(,)
    key<delimiter(")content(locked)delimiter(")>operator(:) value(false)operator(,)
    key<delimiter(")content(name)delimiter(")>operator(:) string<delimiter(")content(Verwaltung)delimiter(")>operator(,)
    key<delimiter(")content(lists)delimiter(")>operator(:) operator([)
      operator({)
        key<delimiter(")content(type)delimiter(")>operator(:) string<delimiter(")content(List)delimiter(")>operator(,)
        key<delimiter(")content(sort_keys)delimiter(")>operator(:) operator({)
          key<delimiter(")content(options)delimiter(")>operator(:) operator([)
            operator({)
              key<delimiter(")content(name)delimiter(")>operator(:) string<delimiter(")content(Standardsortierung)delimiter(")>operator(,)
              key<delimiter(")content(id)delimiter(")>operator(:) value(null)
            operator(})
          operator(])
        operator(})operator(,)
        key<delimiter(")content(uri)delimiter(")>operator(:) string<delimiter(")content(http:)char(\\/)char(\\/)content(localhost:3000)char(\\/)content(lists)char(\\/)content(Lists::Employees)char(\\/)content(elements.json)delimiter(")>operator(,)
        key<delimiter(")content(sort_key_uri)delimiter(")>operator(:) string<delimiter(")content(http:)char(\\/)char(\\/)content(localhost:3000)char(\\/)content(lists)char(\\/)content(Lists::Employees)char(\\/)content(sort_key)delimiter(")>operator(,)
        key<delimiter(")content(name)delimiter(")>operator(:) string<delimiter(")content(Mitarbeiter)delimiter(")>operator(,)
        key<delimiter(")content(readable)delimiter(")>operator(:) value(true)operator(,)
        key<delimiter(")content(id)delimiter(")>operator(:) string<delimiter(")content(Lists::Employees)delimiter(")>operator(,)
        key<delimiter(")content(element_types)delimiter(")>operator(:) operator([)
          operator({)
            key<delimiter(")content(create_element_url)delimiter(")>operator(:) string<delimiter(")content(http:)char(\\/)char(\\/)content(localhost:3000)char(\\/)content(elements?list=Lists%3A%3AEmployees&type=Elements%3A%3APerson)delimiter(")>operator(,)
            key<delimiter(")content(essential_attributes)delimiter(")>operator(:) operator([)
            operator(])operator(,)
            key<delimiter(")content(name)delimiter(")>operator(:) string<delimiter(")content(Person)delimiter(")>operator(,)
            key<delimiter(")content(ask_for_email)delimiter(")>operator(:) value(true)operator(,)
            key<delimiter(")content(id)delimiter(")>operator(:) string<delimiter(")content(Elements::Person)delimiter(")>
          operator(})
        operator(])operator(,)
        key<delimiter(")content(writable)delimiter(")>operator(:) value(true)
      operator(})operator(,)
      operator({)
        key<delimiter(")content(type)delimiter(")>operator(:) string<delimiter(")content(List)delimiter(")>operator(,)
        key<delimiter(")content(sort_keys)delimiter(")>operator(:) operator({)
          key<delimiter(")content(options)delimiter(")>operator(:) operator([)
            operator({)
              key<delimiter(")content(name)delimiter(")>operator(:) string<delimiter(")content(Standardsortierung)delimiter(")>operator(,)
              key<delimiter(")content(id)delimiter(")>operator(:) value(null)
            operator(})
          operator(])
        operator(})operator(,)
        key<delimiter(")content(uri)delimiter(")>operator(:) string<delimiter(")content(http:)char(\\/)char(\\/)content(localhost:3000)char(\\/)content(lists)char(\\/)content(Lists::Departments)char(\\/)content(elements.json)delimiter(")>operator(,)
        key<delimiter(")content(sort_key_uri)delimiter(")>operator(:) string<delimiter(")content(http:)char(\\/)char(\\/)content(localhost:3000)char(\\/)content(lists)char(\\/)content(Lists::Departments)char(\\/)content(sort_key)delimiter(")>operator(,)
        key<delimiter(")content(name)delimiter(")>operator(:) string<delimiter(")content(Abteilungen)delimiter(")>operator(,)
        key<delimiter(")content(readable)delimiter(")>operator(:) value(true)operator(,)
        key<delimiter(")content(id)delimiter(")>operator(:) string<delimiter(")content(Lists::Departments)delimiter(")>operator(,)
        key<delimiter(")content(element_types)delimiter(")>operator(:) operator([)
          operator({)
            key<delimiter(")content(create_element_url)delimiter(")>operator(:) string<delimiter(")content(http:)char(\\/)char(\\/)content(localhost:3000)char(\\/)content(elements?list=Lists%3A%3ADepartments&type=Elements%3A%3ADepartment)delimiter(")>operator(,)
            key<delimiter(")content(essential_attributes)delimiter(")>operator(:) operator([)
            operator(])operator(,)
            key<delimiter(")content(name)delimiter(")>operator(:) string<delimiter(")content(Abteilung)delimiter(")>operator(,)
            key<delimiter(")content(ask_for_email)delimiter(")>operator(:) value(false)operator(,)
            key<delimiter(")content(id)delimiter(")>operator(:) string<delimiter(")content(Elements::Department)delimiter(")>
          operator(})
        operator(])operator(,)
        key<delimiter(")content(writable)delimiter(")>operator(:) value(true)
      operator(})operator(,)
      operator({)
        key<delimiter(")content(type)delimiter(")>operator(:) string<delimiter(")content(List)delimiter(")>operator(,)
        key<delimiter(")content(sort_keys)delimiter(")>operator(:) operator({)
          key<delimiter(")content(options)delimiter(")>operator(:) operator([)
            operator({)
              key<delimiter(")content(name)delimiter(")>operator(:) string<delimiter(")content(Standardsortierung)delimiter(")>operator(,)
              key<delimiter(")content(id)delimiter(")>operator(:) value(null)
            operator(})
          operator(])
        operator(})operator(,)
        key<delimiter(")content(uri)delimiter(")>operator(:) string<delimiter(")content(http:)char(\\/)char(\\/)content(localhost:3000)char(\\/)content(lists)char(\\/)content(Lists::Locations)char(\\/)content(elements.json)delimiter(")>operator(,)
        key<delimiter(")content(sort_key_uri)delimiter(")>operator(:) string<delimiter(")content(http:)char(\\/)char(\\/)content(localhost:3000)char(\\/)content(lists)char(\\/)content(Lists::Locations)char(\\/)content(sort_key)delimiter(")>operator(,)
        key<delimiter(")content(name)delimiter(")>operator(:) string<delimiter(")content(Standorte)delimiter(")>operator(,)
        key<delimiter(")content(readable)delimiter(")>operator(:) value(true)operator(,)
        key<delimiter(")content(id)delimiter(")>operator(:) string<delimiter(")content(Lists::Locations)delimiter(")>operator(,)
        key<delimiter(")content(element_types)delimiter(")>operator(:) operator([)
          operator({)
            key<delimiter(")content(create_element_url)delimiter(")>operator(:) string<delimiter(")content(http:)char(\\/)char(\\/)content(localhost:3000)char(\\/)content(elements?list=Lists%3A%3ALocations&type=Elements%3A%3ALocation)delimiter(")>operator(,)
            key<delimiter(")content(essential_attributes)delimiter(")>operator(:) operator([)
            operator(])operator(,)
            key<delimiter(")content(name)delimiter(")>operator(:) string<delimiter(")content(Standort)delimiter(")>operator(,)
            key<delimiter(")content(ask_for_email)delimiter(")>operator(:) value(false)operator(,)
            key<delimiter(")content(id)delimiter(")>operator(:) string<delimiter(")content(Elements::Location)delimiter(")>
          operator(})
        operator(])operator(,)
        key<delimiter(")content(writable)delimiter(")>operator(:) value(true)
      operator(})operator(,)
      operator({)
        key<delimiter(")content(type)delimiter(")>operator(:) string<delimiter(")content(List)delimiter(")>operator(,)
        key<delimiter(")content(sort_keys)delimiter(")>operator(:) operator({)
          key<delimiter(")content(options)delimiter(")>operator(:) operator([)
            operator({)
              key<delimiter(")content(name)delimiter(")>operator(:) string<delimiter(")content(Standardsortierung)delimiter(")>operator(,)
              key<delimiter(")content(id)delimiter(")>operator(:) value(null)
            operator(})
          operator(])
        operator(})operator(,)
        key<delimiter(")content(uri)delimiter(")>operator(:) string<delimiter(")content(http:)char(\\/)char(\\/)content(localhost:3000)char(\\/)content(lists)char(\\/)content(Lists::Stocktakings)char(\\/)content(elements.json)delimiter(")>operator(,)
        key<delimiter(")content(sort_key_uri)delimiter(")>operator(:) string<delimiter(")content(http:)char(\\/)char(\\/)content(localhost:3000)char(\\/)content(lists)char(\\/)content(Lists::Stocktakings)char(\\/)content(sort_key)delimiter(")>operator(,)
        key<delimiter(")content(name)delimiter(")>operator(:) string<delimiter(")content(Inventuren)delimiter(")>operator(,)
        key<delimiter(")content(readable)delimiter(")>operator(:) value(true)operator(,)
        key<delimiter(")content(id)delimiter(")>operator(:) string<delimiter(")content(Lists::Stocktakings)delimiter(")>operator(,)
        key<delimiter(")content(element_types)delimiter(")>operator(:) operator([)
          operator({)
            key<delimiter(")content(create_element_url)delimiter(")>operator(:) string<delimiter(")content(http:)char(\\/)char(\\/)content(localhost:3000)char(\\/)content(elements?list=Lists%3A%3AStocktakings&type=Elements%3A%3AStocktaking)delimiter(")>operator(,)
            key<delimiter(")content(essential_attributes)delimiter(")>operator(:) operator([)
            operator(])operator(,)
            key<delimiter(")content(name)delimiter(")>operator(:) string<delimiter(")content(Inventur)delimiter(")>operator(,)
            key<delimiter(")content(ask_for_email)delimiter(")>operator(:) value(false)operator(,)
            key<delimiter(")content(id)delimiter(")>operator(:) string<delimiter(")content(Elements::Stocktaking)delimiter(")>
          operator(})
        operator(])operator(,)
        key<delimiter(")content(writable)delimiter(")>operator(:) value(true)
      operator(})operator(,)
      operator({)
        key<delimiter(")content(type)delimiter(")>operator(:) string<delimiter(")content(List)delimiter(")>operator(,)
        key<delimiter(")content(sort_keys)delimiter(")>operator(:) operator({)
          key<delimiter(")content(options)delimiter(")>operator(:) operator([)
            operator({)
              key<delimiter(")content(name)delimiter(")>operator(:) string<delimiter(")content(Standardsortierung)delimiter(")>operator(,)
              key<delimiter(")content(id)delimiter(")>operator(:) value(null)
            operator(})
          operator(])
        operator(})operator(,)
        key<delimiter(")content(uri)delimiter(")>operator(:) string<delimiter(")content(http:)char(\\/)char(\\/)content(localhost:3000)char(\\/)content(lists)char(\\/)content(Lists::Invoices)char(\\/)content(elements.json)delimiter(")>operator(,)
        key<delimiter(")content(sort_key_uri)delimiter(")>operator(:) string<delimiter(")content(http:)char(\\/)char(\\/)content(localhost:3000)char(\\/)content(lists)char(\\/)content(Lists::Invoices)char(\\/)content(sort_key)delimiter(")>operator(,)
        key<delimiter(")content(name)delimiter(")>operator(:) string<delimiter(")content(Abrechnungen)delimiter(")>operator(,)
        key<delimiter(")content(readable)delimiter(")>operator(:) value(true)operator(,)
        key<delimiter(")content(id)delimiter(")>operator(:) string<delimiter(")content(Lists::Invoices)delimiter(")>operator(,)
        key<delimiter(")content(element_types)delimiter(")>operator(:) operator([)
          operator({)
            key<delimiter(")content(create_element_url)delimiter(")>operator(:) string<delimiter(")content(http:)char(\\/)char(\\/)content(localhost:3000)char(\\/)content(elements?list=Lists%3A%3AInvoices&type=Elements%3A%3AInvoice)delimiter(")>operator(,)
            key<delimiter(")content(essential_attributes)delimiter(")>operator(:) operator([)
            operator(])operator(,)
            key<delimiter(")content(name)delimiter(")>operator(:) string<delimiter(")content(Abrechnung)delimiter(")>operator(,)
            key<delimiter(")content(ask_for_email)delimiter(")>operator(:) value(false)operator(,)
            key<delimiter(")content(id)delimiter(")>operator(:) string<delimiter(")content(Elements::Invoice)delimiter(")>
          operator(})
        operator(])operator(,)
        key<delimiter(")content(writable)delimiter(")>operator(:) value(true)
      operator(})
    operator(])operator(,)
    key<delimiter(")content(release_export_lock_url)delimiter(")>operator(:) string<delimiter(")content(http:)char(\\/)char(\\/)content(localhost:3000)char(\\/)content(neighbourhoods)char(\\/)content(Neighbourhoods::Administration)char(\\/)content(release_export_lock)delimiter(")>operator(,)
    key<delimiter(")content(readable)delimiter(")>operator(:) value(true)operator(,)
    key<delimiter(")content(replay_latest_snapshot_url)delimiter(")>operator(:) string<delimiter(")content(http:)char(\\/)char(\\/)content(localhost:3000)char(\\/)content(snapshots)char(\\/)content(replay_latest)delimiter(")>operator(,)
    key<delimiter(")content(id)delimiter(")>operator(:) string<delimiter(")content(Neighbourhoods::Administration)delimiter(")>operator(,)
    key<delimiter(")content(writable)delimiter(")>operator(:) value(true)
  operator(})
operator(])