
operator(()string<delimiter(")delimiter(")>operator(\))
operator(()ident(string=?) string<delimiter(")content(K. Harper, M.D.)delimiter(")> comment(;; Taken from Section 6.3.3. (Symbols\) of the R5RS)
          operator(()ident(symbol->string)
           operator(()ident(string->symbol) string<delimiter(")content(K. Harper, M.D.)delimiter(")>operator(\))operator(\))operator(\))
comment(;; BEGIN Factorial)
operator(()keyword(define) ident(factorial)
  operator(()keyword(lambda) operator(()ident(n)operator(\))
    operator(()keyword(if) operator(()ident(=) ident(n) integer(1)operator(\))
        integer(1)
        operator(()ident(*) ident(n) operator(()ident(factorial) operator(()ident(-) ident(n) integer(1)operator(\))operator(\))operator(\))operator(\))operator(\))operator(\))
comment(;; END Factorial)

           comment(;; BEGIN Square)
           operator(()keyword(define) ident(square)
             operator(()keyword(lambda) operator(()ident(n)operator(\))  comment(;; My first lambda)
               operator(()keyword(if) operator(()ident(=) ident(n) integer(0)operator(\))
                   integer(0)
           comment(;; BEGIN Recursive_Call)
                   operator(()ident(+) operator(()ident(square) operator(()ident(-) ident(n) integer(1)operator(\))operator(\))
                      operator(()ident(-) operator(()ident(+) ident(n) ident(n)operator(\)) integer(1)operator(\))operator(\))operator(\))operator(\))operator(\))
           comment(;; END Recursive_Call)
           comment(;; END Square)
           
comment(;;LIST OF NUMBERS)
operator(()integer(#b-1111) integer(#xffa12) integer(#o755) integer(#o-755) ident(+)ident(i) ident(-)ident(i) ident(+)integer(2)ident(i) ident(-)integer(2)ident(i) integer(3+4i) integer(1.6440287493492101)ident(i+2) integer(1.344) integer(3/4) integer(#i23/70)operator(\))

comment(;;a vector)
operator(#()operator(')operator(()integer(1) integer(2) integer(3)operator(\)) char(#\\\\)ident(a) integer(3) predefined_constant(#t) predefined_constant(#f)operator(\))

comment(;;macros (USELESS AND INCORRECT, JUST TO CHECK THAT IDENTIFIERS ARE RECOGNIZED RIGHT\))
operator(()keyword(syntax-case) operator(()operator(\))
  operator(()operator(()ident(_) ident(name) ident(field) ident(...)operator(\))
   operator(()ident(with-syntax)
     operator(()operator(()ident(constructor) operator(()ident(gen-id) operator(()ident(syntax) ident(name)operator(\)) string<delimiter(")content(make-)delimiter(")> operator(()ident(syntax) ident(name)operator(\))operator(\))operator(\))
     operator(()ident(predicate) operator(()ident(gen-id) operator(()ident(syntax) ident(name)operator(\)) operator(()ident(syntax) ident(name)operator(\)) string<delimiter(")content(?)delimiter(")>operator(\))operator(\))
     operator(()operator(()ident(access) ident(...)operator(\))
     operator(()ident(map) operator(()keyword(lambda) operator(()ident(x)operator(\)) operator(()ident(gen-id) ident(x) string<delimiter(")content(set-)delimiter(")> operator(()ident(syntax) ident(name)operator(\)) string<delimiter(")content(-)delimiter(")> ident(x) string<delimiter(")content(!)delimiter(")>operator(\))operator(\))operator(\))operator(\))operator(\))operator(\))operator(\))operator(\))