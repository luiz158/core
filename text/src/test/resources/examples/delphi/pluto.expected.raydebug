keyword(unit) ident(FindTH)operator(;)

keyword(interface)

keyword(uses)
  ident(Classes)operator(,) ident(windows)operator(,) ident(Dialogs)operator(,) ident(ComCtrls)operator(,) ident(CompEx)operator(,) ident(SysUtils)operator(,) ident(YTools)operator(,) ident(YTypes)operator(,)
  ident(clock)operator(,) ident(plutoconst)operator(,) ident(StdCtrls)operator(,) ident(Masks)operator(,) ident(Forms)operator(,) ident(XReg)operator(;)

keyword(const)
  ident(RegMoleVersion) operator(=) string<delimiter(')content(1.1)delimiter(')>operator(;)

keyword(type)
  ident(TFindThreadProgress) operator(=) operator(()ident(fpNone)operator(,) ident(fpEvery512th)operator(,) ident(fpEach)operator(\))operator(;)

  ident(TRegFindThread) operator(=) keyword(class)operator(()ident(TThread)operator(\))
  directive(private)
    ident(SearchText)operator(:) keyword(string)operator(;)
    ident(SearchFor)operator(:) ident(TSearchOptions)operator(;)
    ident(Progress)operator(:) ident(TFindThreadProgress)operator(;)
    ident(FindNodeText)operator(:) keyword(string)operator(;)
    ident(TimeElapsed)operator(:) ident(Double)operator(;)
    ident(syncIcon)operator(:) ident(Integer)operator(;)
    ident(syncStatusText)operator(:) keyword(string)operator(;)
    ident(CurrentPath)operator(:) keyword(string)operator(;)
    ident(KeysScanned)operator(:) ident(Integer)operator(;)
    ident(Mask)operator(:) ident(TMask)operator(;)
    ident(dwordVal)operator(:) ident(DWORD)operator(;)
    ident(SearchForValues)operator(:) ident(Boolean)operator(;)

    keyword(procedure) ident(Find)operator(;)

    comment(//Synchronizers)
    keyword(procedure) ident(Start)operator(;)
    keyword(procedure) ident(Add)operator(;)
    keyword(procedure) ident(UpdateStatus)operator(;)
    keyword(procedure) ident(Finish)operator(;)
  directive(protected)
    keyword(procedure) ident(Execute)operator(;) directive(override)operator(;)
  directive(public)
    ident(SpecialPath)operator(:) keyword(string)operator(;)
    ident(FindNode)operator(:) ident(TTreeNode)operator(;)
    ident(ListTV)operator(:) ident(TTreeView)operator(;)
    ident(ObjectsFound)operator(,) ident(KeysFound)operator(,) ident(ValuesFound)operator(,) ident(DataFound)operator(:) ident(Integer)operator(;)
    ident(Ranges)operator(:) ident(TRanges)operator(;)
    keyword(destructor) ident(Destroy)operator(;) directive(override)operator(;)
    keyword(constructor) ident(CreateIt)operator(()ident(PriorityLevel)operator(:) ident(TThreadPriority)operator(;) ident(s)operator(:) keyword(string)operator(;)
      ident(SearchFor)operator(:) ident(TSearchOptions)operator(;) ident(Progress)operator(:) ident(TFindThreadProgress)operator(\))operator(;)
  keyword(end)operator(;)

keyword(implementation)

keyword(uses)
  ident(ValuesU)operator(,) ident(StrUtils)operator(;)

comment({ TRegFindThread })

keyword(procedure) ident(TRegFindThread)operator(.)ident(Add)operator(;)
keyword(var)
  ident(Node)operator(:) ident(TTreeNode)operator(;)
keyword(begin)
  keyword(with) ident(ListTV) keyword(do) keyword(begin)
    comment(//Items.BeginUpdate;)
    ident(Node) operator(:=) ident(TTreeNode)operator(.)ident(Create)operator(()ident(Items)operator(\))operator(;)
    ident(SetTNImage)operator(()ident(Node)operator(,) ident(syncIcon)operator(\))operator(;)
    ident(Items)operator(.)ident(AddNode)operator(()ident(Node)operator(,) ident(FindNode)operator(,) ident(Copy)operator(()ident(CurrentPath)operator(,) integer(1)operator(,) integer(255)operator(\))operator(,) keyword(nil)operator(,)
      ident(naAddChildFirst)operator(\))operator(;)
    keyword(if) keyword(not) ident(FindNode)operator(.)ident(Expanded) keyword(and) operator(()ident(FindNode)operator(.)ident(Count) operator(=) integer(1)operator(\)) keyword(then) comment(//First Node)
      ident(FindNode)operator(.)ident(Expand)operator(()ident(False)operator(\))operator(;)
    comment(//Items.EndUpdate;)
  keyword(end)operator(;)
keyword(end)operator(;)

keyword(constructor) ident(TRegFindThread)operator(.)ident(CreateIt)operator(()ident(PriorityLevel)operator(:) ident(TThreadPriority)operator(;) ident(s)operator(:) keyword(string)operator(;)
  ident(SearchFor)operator(:) ident(TSearchOptions)operator(;) ident(Progress)operator(:) ident(TFindThreadProgress)operator(\))operator(;)
keyword(begin)
  keyword(inherited) ident(Create)operator(()ident(True)operator(\))operator(;)      comment(// Create thread suspended)
  ident(Priority) operator(:=) ident(PriorityLevel)operator(;) comment(// Set Priority Level)
  ident(FreeOnTerminate) operator(:=) ident(True)operator(;) comment(// Thread Free Itself when terminated)

  ident(SearchText) operator(:=) ident(s)operator(;)
  ident(Ranges) operator(:=) keyword(nil)operator(;)
  ident(Self)operator(.)ident(SearchFor) operator(:=) ident(SearchFor)operator(;)
  ident(Self)operator(.)ident(Progress) operator(:=) ident(Progress)operator(;)
keyword(end)operator(;)

keyword(destructor) ident(TRegFindThread)operator(.)ident(Destroy)operator(;)
keyword(begin)
  keyword(if) ident(Assigned)operator(()ident(FindNode)operator(\)) keyword(then)
    ident(FindNode)operator(.)ident(Data) operator(:=) keyword(nil)operator(;)
  keyword(inherited)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TRegFindThread)operator(.)ident(Execute)operator(;)
keyword(begin)
  ident(Synchronize)operator(()ident(Start)operator(\))operator(;)
  ident(Find)operator(;)
  ident(Synchronize)operator(()ident(Finish)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TRegFindThread)operator(.)ident(Find)operator(;)
keyword(var)
  ident(SpecialKey)operator(:) ident(HKEY)operator(;)

  keyword(procedure) ident(Add)operator(()keyword(const) ident(Path)operator(:) keyword(string)operator(;) keyword(const) ident(Icon)operator(:) ident(Integer)operator(\))operator(;)
  keyword(var)
    ident(zCurrentPath)operator(:) keyword(string)operator(;)
  keyword(begin)
    ident(zCurrentPath) operator(:=) ident(CurrentPath)operator(;)

    ident(CurrentPath) operator(:=) ident(Path)operator(;)
    ident(syncIcon) operator(:=) ident(Icon)operator(;)
    ident(Synchronize)operator(()ident(Self)operator(.)ident(Add)operator(\))operator(;)

    ident(CurrentPath) operator(:=) ident(zCurrentPath)operator(;)
  keyword(end)operator(;)

  keyword(procedure) ident(AddValueName)operator(()keyword(const) ident(ValueName)operator(:) keyword(string)operator(;) ident(Typ)operator(:) ident(TRegDataType)operator(\))operator(;)
  keyword(begin)
    ident(Add)operator(()ident(CurrentPath) operator(+) string<delimiter(')content(\\\\)delimiter(')> operator(+) ident(ValueName)operator(,) ident(IconOfDataType)operator(()ident(Typ)operator(\))operator(\))operator(;)
  keyword(end)operator(;)

  keyword(procedure) ident(AddValueData)operator(()keyword(const) ident(ValueName)operator(:) keyword(string)operator(;) ident(Context)operator(:) ident(TRegContext)operator(\))operator(;)
  keyword(begin)
    ident(Add)operator(()ident(CurrentPath) operator(+) string<delimiter(')content(\\\\)delimiter(')> operator(+) ident(ValueName) operator(+) string<delimiter(')content( = )delimiter(')> operator(+) ident(DataPreviewOfContext)operator(()ident(Context)operator(\))operator(,)
      ident(IconOfDataType)operator(()ident(Context)operator(.)ident(Typ)operator(\))operator(\))operator(;)
  keyword(end)operator(;)

  keyword(function) ident(FoundInStr)operator(()keyword(const) ident(Data)operator(:) keyword(string)operator(\))operator(:) ident(Boolean)operator(;)
  keyword(begin)
    ident(Result) operator(:=) ident(False)operator(;)
    keyword(if) ident(SearchText) operator(=) string<delimiter(')delimiter(')> keyword(then)
      ident(Exit)operator(;)

    keyword(if) operator(()ident(Data) operator(=) string<delimiter(')delimiter(')>operator(\)) keyword(and) keyword(not) operator(()ident(sfWildCards) keyword(in) ident(SearchFor)operator(\)) keyword(then)
      ident(Exit)operator(;)

    keyword(if) ident(sfWildCards) keyword(in) ident(SearchFor) keyword(then) keyword(begin)
      keyword(if) ident(Assigned)operator(()ident(Mask)operator(\)) keyword(then)
        ident(Result) operator(:=) ident(Mask)operator(.)ident(Matches)operator(()ident(Data)operator(\))operator(;)
    keyword(end) keyword(else) keyword(begin)
      comment({if not (sfFileNames in SearchFor\) then begin
        if TextBegin(SearchText, UntilChar(Data, '~'\)\) and FileExists(Data\) then
          Result :=  SameFileName(SearchText, GetFileNew(Data\)\);
        Exit;
      end; })

      keyword(if) operator([)ident(sfParts)operator(,) ident(sfIgnoreCase)operator(]) operator(<=) ident(SearchFor) keyword(then)
        keyword(if) ident(SfUseLocales) keyword(in) ident(SearchFor) keyword(then)
          ident(Result) operator(:=) integer(0)operator(<)ident(PosEx)operator(()ident(SearchText)operator(,) ident(AnsiLowerCase)operator(()ident(Data)operator(\))operator(\))
        keyword(else)
          ident(Result) operator(:=) integer(0)operator(<)ident(PosExText)operator(()ident(SearchText)operator(,) ident(Data)operator(\))
      keyword(else) keyword(if) ident(sfParts) keyword(in) ident(SearchFor) keyword(then)
        ident(Result) operator(:=) integer(0)operator(<)ident(PosEx)operator(()ident(SearchText)operator(,) ident(Data)operator(\))
      keyword(else) keyword(if) ident(sfIgnoreCase) keyword(in) ident(SearchFor) keyword(then)
        keyword(if) ident(SfUseLocales) keyword(in) ident(SearchFor) keyword(then)
          ident(Result) operator(:=) operator(()ident(AnsiLowerCase)operator(()ident(Data)operator(\)) operator(=) ident(SearchText)operator(\))
        keyword(else)
          ident(Result) operator(:=) ident(SameText)operator(()ident(Data)operator(,) ident(SearchText)operator(\))
      keyword(else)
        ident(Result) operator(:=) operator(()ident(SearchText) operator(=) ident(Data)operator(\))operator(;)
    keyword(end)operator(;)
  keyword(end)operator(;)

  keyword(function) ident(FoundInByteA)operator(()keyword(const) ident(Data)operator(:) ident(TByteA)operator(\))operator(:) ident(Boolean)operator(;)
  keyword(begin)
    ident(Result) operator(:=) ident(FoundInStr)operator(()ident(StrOfByteA)operator(()ident(Data)operator(\))operator(\))operator(;)
  keyword(end)operator(;)

  keyword(procedure) ident(ScanValues)operator(()ident(Key)operator(:) ident(HKEY)operator(;) ident(Info)operator(:) ident(TRegKeyInfo)operator(\))operator(;)
  keyword(var)
    ident(i)operator(:) ident(Integer)operator(;)
    ident(MaxLen)operator(,) ident(NameLen)operator(,) ident(Len)operator(,) ident(Typ)operator(:) ident(Cardinal)operator(;)
    ident(Buffer)operator(:) ident(PByte)operator(;)
    ident(ValueName)operator(:) ident(PChar)operator(;)

    keyword(procedure) ident(ScanValue)operator(()keyword(const) ident(ValueName)operator(:) keyword(string)operator(;) keyword(const) ident(Typ)operator(:) ident(TRegDataType)operator(;)
      keyword(const) ident(Data)operator(:) keyword(string)operator(\))operator(;)
    keyword(begin)
      keyword(if) operator(()ident(sfSpecialTypes) keyword(in) ident(SearchFor)operator(\)) keyword(and) keyword(not) ident(InRanges)operator(()ident(Ranges)operator(,) ident(Typ)operator(\)) keyword(then)
        ident(Exit)operator(;)

      keyword(case) ident(Typ) keyword(of)
        ident(rdString)operator(,) ident(rdExpandString)operator(:) keyword(if) ident(sfString) keyword(in) ident(SearchFor) keyword(then) keyword(begin)
          keyword(if) ident(FoundInStr)operator(()ident(Data)operator(\)) keyword(then) keyword(begin)
            ident(Inc)operator(()ident(DataFound)operator(\))operator(;)
            ident(AddValueData)operator(()ident(ValueName)operator(,)
              ident(RegContext)operator(()ident(Typ)operator(,) ident(TByteA)operator(()ident(Copy)operator(()ident(Data)operator(,) integer(1)operator(,) ident(Length)operator(()ident(Data)operator(\))operator(-)integer(1)operator(\))operator(\))operator(\))operator(\))operator(;)
          keyword(end)operator(;)
        keyword(end)operator(;)

        ident(rdCardinal)operator(,) ident(rdCardBigEndian)operator(:) keyword(if) ident(sfDWord) keyword(in) ident(SearchFor) keyword(then) keyword(begin)
          keyword(if) operator(()ident(Length)operator(()ident(Data)operator(\)) operator(>=) ident(SizeOf)operator(()ident(Cardinal)operator(\))operator(\)) keyword(and)
          operator(()ident(dwordVal) operator(=) ident(PCardinal)operator(()ident(Copy)operator(()ident(Data)operator(,) integer(1)operator(,) ident(SizeOf)operator(()ident(Cardinal)operator(\))operator(\))operator(\))operator(^)operator(\)) keyword(then) keyword(begin)
            ident(Inc)operator(()ident(DataFound)operator(\))operator(;)
            ident(AddValueData)operator(()ident(ValueName)operator(,)
              ident(RegContext)operator(()ident(Typ)operator(,) ident(ByteAOfStr)operator(()ident(Data)operator(\))operator(\))operator(\))operator(;)
          keyword(end)operator(;)
        keyword(end)operator(;)

      keyword(else)
        keyword(if) ident(sfOtherTypes) keyword(in) ident(SearchFor) keyword(then) keyword(begin)
          keyword(if) ident(FoundInStr)operator(()ident(Data)operator(\)) keyword(then) keyword(begin)
            ident(Inc)operator(()ident(DataFound)operator(\))operator(;)
            ident(AddValueData)operator(()ident(ValueName)operator(,)
              ident(RegContext)operator(()ident(Typ)operator(,) ident(ByteAOfStr)operator(()ident(Data)operator(\))operator(\))operator(\))operator(;)
          keyword(end)operator(;)
        keyword(end)operator(;)
      keyword(end)operator(;)
    keyword(end)operator(;)

  keyword(begin)
    ident(MaxLen) operator(:=) ident(Info)operator(.)ident(MaxValueLen) operator(+) integer(1)operator(;) comment(//Include Nullbyte)

    ident(Buffer) operator(:=) keyword(nil)operator(;)
    keyword(if) ident(sfValueData) keyword(in) ident(SearchFor) keyword(then)
      ident(GetMem)operator(()ident(Buffer)operator(,) ident(Info)operator(.)ident(MaxDataLen)operator(\))operator(;)

    ident(GetMem)operator(()ident(ValueName)operator(,) ident(MaxLen)operator(\))operator(;)
    keyword(for) ident(i) operator(:=) integer(0) keyword(to) ident(Info)operator(.)ident(NumValues)operator(-)integer(1) keyword(do) keyword(begin)
      ident(NameLen) operator(:=) ident(MaxLen)operator(;)
      ident(Len) operator(:=) ident(Info)operator(.)ident(MaxDataLen)operator(;)
      keyword(if) keyword(not) ident(Success)operator(()ident(RegEnumValue)operator(()ident(Key)operator(,) ident(i)operator(,) ident(ValueName)operator(,) ident(NameLen)operator(,) keyword(nil)operator(,) operator(@)ident(Typ)operator(,)
       ident(Buffer)operator(,) operator(@)ident(Len)operator(\))operator(\)) keyword(then)
        ident(Continue)operator(;)

      keyword(if) ident(sfValueNames) keyword(in) ident(SearchFor) keyword(then)
        keyword(if) ident(FoundInStr)operator(()ident(ValueName)operator(\)) keyword(then) keyword(begin)
          ident(Inc)operator(()ident(ValuesFound)operator(\))operator(;)
          ident(AddValueName)operator(()ident(ValueName)operator(,) ident(Typ)operator(\))operator(;)
        keyword(end)operator(;)

      keyword(if) ident(sfValueData) keyword(in) ident(SearchFor) keyword(then)
        ident(ScanValue)operator(()ident(ValueName)operator(,) ident(Typ)operator(,) keyword(string)operator(()ident(Copy)operator(()ident(TByteA)operator(()ident(Buffer)operator(\))operator(,) integer(0)operator(,) ident(Len)operator(\))operator(\))operator(\))operator(;)
    keyword(end)operator(;)

    ident(FreeMem)operator(()ident(ValueName)operator(,) ident(MaxLen)operator(\))operator(;)
    keyword(if) ident(sfValueData) keyword(in) ident(SearchFor) keyword(then)
      ident(FreeMem)operator(()ident(Buffer)operator(,) ident(Info)operator(.)ident(MaxDataLen)operator(\))operator(;)
  keyword(end)operator(;)

  keyword(procedure) ident(ScanKey)operator(()ident(Key)operator(:) ident(HKEY)operator(;) keyword(const) ident(KeyName)operator(:) keyword(string) operator(=) string<delimiter(')delimiter(')>operator(\))operator(;)
  keyword(var)
    ident(p)operator(:) ident(PChar)operator(;)
    ident(i)operator(,) ident(z)operator(:) ident(Integer)operator(;)
    ident(l)operator(,) ident(Len)operator(:) ident(DWORD)operator(;)
    ident(NewKey)operator(:) ident(HKEY)operator(;)
    ident(Info)operator(:) ident(TRegKeyInfo)operator(;)
  keyword(begin)
    keyword(if) ident(Terminated) keyword(then) ident(Exit)operator(;)

    ident(Inc)operator(()ident(KeysScanned)operator(\))operator(;)
    keyword(if) ident(Progress) operator(<>) ident(fpNone) keyword(then)
      keyword(if) operator(()ident(Progress) operator(=) ident(fpEach)operator(\)) keyword(or)
       operator(()operator(()ident(Progress) operator(=) ident(fpEvery512th)operator(\)) keyword(and) operator(()operator(()ident(KeysScanned) keyword(and) hex($1FF)operator(\)) operator(=) integer(0)operator(\))operator(\)) keyword(then) keyword(begin)
        ident(syncStatusText) operator(:=) char<delimiter(')content(()delimiter(')> operator(+) ident(IntToStr)operator(()ident(KeysScanned)operator(\)) operator(+) string<delimiter(')content( k\) )delimiter(')> operator(+) ident(CurrentPath)operator(;)
        ident(Synchronize)operator(()ident(UpdateStatus)operator(\))operator(;)
      keyword(end)operator(;)

    keyword(with) ident(Info) keyword(do)
      keyword(if) keyword(not) ident(Success)operator(()ident(RegQueryInfoKey)operator(()ident(Key)operator(,) keyword(nil)operator(,) keyword(nil)operator(,) keyword(nil)operator(,) operator(@)ident(NumSubKeys)operator(,)
       operator(@)ident(MaxSubKeyLen)operator(,) keyword(nil)operator(,) operator(@)ident(NumValues)operator(,) operator(@)ident(MaxValueLen)operator(,) operator(@)ident(MaxDataLen)operator(,)
       keyword(nil)operator(,) keyword(nil)operator(\))operator(\)) keyword(then)
        ident(Exit)operator(;)

    keyword(if) operator(()ident(Info)operator(.)ident(NumValues) operator(>) integer(0)operator(\)) keyword(and) ident(SearchForValues) keyword(then)
      ident(ScanValues)operator(()ident(Key)operator(,) ident(Info)operator(\))operator(;)

    keyword(if) ident(Info)operator(.)ident(NumSubKeys) operator(<=) integer(0) keyword(then)
      ident(Exit)operator(;)

    ident(Len) operator(:=) ident(Info)operator(.)ident(MaxSubKeyLen) operator(+) integer(1)operator(;)
    ident(GetMem)operator(()ident(p)operator(,) ident(Len)operator(\))operator(;)

    keyword(for) ident(i) operator(:=) integer(0) keyword(to) ident(Info)operator(.)ident(NumSubKeys)operator(-)integer(1) keyword(do) keyword(begin)
      ident(l) operator(:=) ident(Len)operator(;)
      ident(RegEnumKeyEx)operator(()ident(Key)operator(,) ident(i)operator(,) ident(p)operator(,) ident(l)operator(,) keyword(nil)operator(,) keyword(nil)operator(,) keyword(nil)operator(,) keyword(nil)operator(\))operator(;)
      keyword(if) ident(sfKeys) keyword(in) ident(SearchFor) keyword(then)
        keyword(if) ident(FoundInStr)operator(()ident(p)operator(\)) keyword(then) keyword(begin)
          ident(Inc)operator(()ident(KeysFound)operator(\))operator(;)
          ident(Add)operator(()ident(CurrentPath) operator(+) char<delimiter(')content(\\)delimiter(')> operator(+) ident(p)operator(,) ident(iconKeyMiddle)operator(\))operator(;)
        keyword(end)operator(;)

      keyword(if) ident(Success)operator(()ident(RegOpenKey)operator(()ident(Key)operator(,) ident(p)operator(,) ident(NewKey)operator(\))operator(\)) keyword(then) keyword(begin)
        ident(z) operator(:=) ident(Length)operator(()ident(CurrentPath)operator(\))operator(;)
        ident(CurrentPath) operator(:=) ident(CurrentPath) operator(+) char<delimiter(')content(\\)delimiter(')> operator(+) ident(p)operator(;)

        keyword(try)
          ident(ScanKey)operator(()ident(NewKey)operator(,) ident(p)operator(\))operator(;)
        keyword(finally)
          ident(RegCloseKey)operator(()ident(NewKey)operator(\))operator(;)
        keyword(end)operator(;)

        ident(SetLength)operator(()ident(CurrentPath)operator(,) ident(z)operator(\))operator(;)
      keyword(end)operator(;)

      keyword(if) ident(Terminated) keyword(then) ident(Break)operator(;)
    keyword(end)operator(;)

    ident(FreeMem)operator(()ident(p)operator(,) ident(Len)operator(\))operator(;)
  keyword(end)operator(;)

keyword(begin)
  keyword(with) ident(TClock)operator(.)ident(Create) keyword(do) keyword(begin)
    ident(FindNode)operator(.)ident(Text) operator(:=) ident(FindNodeText) operator(+) string<delimiter(')content(: )delimiter(')>operator(;)

    keyword(try)
      keyword(if) ident(sfHKU) keyword(in) ident(SearchFor) keyword(then) keyword(begin)
        ident(CurrentPath) operator(:=) string<delimiter(')content(HKU)delimiter(')>operator(;)
        ident(ScanKey)operator(()ident(HKEY_USERS)operator(\))operator(;)
      keyword(end)operator(;)
      keyword(if) ident(sfHKLM) keyword(in) ident(SearchFor) keyword(then) keyword(begin)
        ident(CurrentPath) operator(:=) string<delimiter(')content(HKLM)delimiter(')>operator(;)
        ident(ScanKey)operator(()ident(HKEY_LOCAL_MACHINE)operator(\))operator(;)
      keyword(end)operator(;)
      keyword(if) ident(sfHKDD) keyword(in) ident(SearchFor) keyword(then) keyword(begin)
        ident(CurrentPath) operator(:=) string<delimiter(')content(HKDD)delimiter(')>operator(;)
        ident(ScanKey)operator(()ident(HKEY_DYN_DATA)operator(\))operator(;)
      keyword(end)operator(;)

      keyword(if) ident(SpecialPath) operator(<>) string<delimiter(')delimiter(')> keyword(then) keyword(begin)
        keyword(if) ident(Success)operator(()ident(RegOpenKey)operator(()ident(HKEYOfStr)operator(()ident(ExRegRoot)operator(()ident(SpecialPath)operator(\))operator(\))operator(,)
         ident(PChar)operator(()ident(ExRegKey)operator(()ident(SpecialPath)operator(\))operator(\))operator(,) ident(SpecialKey)operator(\))operator(\)) keyword(then) keyword(begin)
          ident(CurrentPath) operator(:=) ident(LWPSolve)operator(()ident(SpecialPath)operator(\))operator(;)
          ident(ScanKey)operator(()ident(SpecialKey)operator(\))operator(;)
          ident(RegCloseKey)operator(()ident(SpecialKey)operator(\))operator(;)
        keyword(end) keyword(else)
          ident(ShowMessage)operator(()string<delimiter(')content(Could not open)delimiter(')> operator(+) ident(EOL) operator(+)
                      ident(Quote)operator(()ident(SpecialPath)operator(\))operator(\))operator(;)
      keyword(end)operator(;)
    keyword(except)
      ident(syncStatusText) operator(:=) char<delimiter(')content(()delimiter(')> operator(+) ident(IntToStr)operator(()ident(KeysScanned)operator(\)) operator(+) string<delimiter(')content( k\) )delimiter(')> operator(+) ident(CurrentPath) operator(+)
        string<delimiter(')content(Error --> Terminated.)delimiter(')>operator(;)
      ident(Synchronize)operator(()ident(UpdateStatus)operator(\))operator(;)
      ident(Sleep)operator(()integer(1000)operator(\))operator(;)
    keyword(end)operator(;)

    ident(TimeElapsed) operator(:=) ident(SecondsPassed)operator(;)
  ident(Free)operator(;) keyword(end)operator(;)
keyword(end)operator(;)

keyword(function) ident(StrOfSearchOptions)operator(()keyword(const) ident(Options)operator(:) ident(TSearchOptions)operator(\))operator(:) keyword(string)operator(;)

  keyword(procedure) ident(Add)operator(()keyword(const) ident(s)operator(:) keyword(string)operator(\))operator(;)
  keyword(begin)
    ident(Result) operator(:=) ident(Result) operator(+) ident(s)operator(;)
  keyword(end)operator(;)

  keyword(procedure) ident(AddOption)operator(()keyword(const) ident(Option)operator(:) keyword(string)operator(;) keyword(const) ident(Flag)operator(:) ident(TSearchVar)operator(;)
    keyword(const) ident(Optional)operator(:) ident(Boolean) operator(=) ident(False)operator(\))operator(;)
  keyword(begin)
    keyword(if) ident(Flag) keyword(in) ident(Options) keyword(then)
      ident(Add)operator(()ident(Option)operator(\))
    keyword(else)
      keyword(if) keyword(not) ident(Optional) keyword(then)
        ident(Add)operator(()char<delimiter(')content(^)delimiter(')> operator(+) ident(Option)operator(\))operator(;)
  keyword(end)operator(;)

keyword(begin)
  ident(Result) operator(:=) string<delimiter(')delimiter(')>operator(;)

  ident(Add)operator(()char<delimiter(')content([)delimiter(')>operator(\))operator(;)
  ident(AddOption)operator(()char<delimiter(')content(H)delimiter(')>operator(,) ident(sfAsHex)operator(,) ident(True)operator(\))operator(;)
  ident(AddOption)operator(()string<delimiter(')content(W )delimiter(')>operator(,) ident(sfWildcards)operator(,) ident(True)operator(\))operator(;)

  ident(AddOption)operator(()char<delimiter(')content(C)delimiter(')>operator(,) ident(sfIgnoreCase)operator(\))operator(;)
  ident(AddOption)operator(()char<delimiter(')content(L)delimiter(')>operator(,) ident(sfUseLocales)operator(\))operator(;)
  ident(AddOption)operator(()string<delimiter(')content(P )delimiter(')>operator(,) ident(sfParts)operator(\))operator(;)

  ident(AddOption)operator(()char<delimiter(')content(K)delimiter(')>operator(,) ident(sfKeys)operator(\))operator(;)
  ident(AddOption)operator(()char<delimiter(')content(N)delimiter(')>operator(,) ident(sfValueNames)operator(\))operator(;)
  ident(AddOption)operator(()string<delimiter(')content(D )delimiter(')>operator(,) ident(sfValueData)operator(\))operator(;)

  ident(AddOption)operator(()char<delimiter(')content(S)delimiter(')>operator(,) ident(sfString)operator(\))operator(;)
  ident(AddOption)operator(()char<delimiter(')content(D)delimiter(')>operator(,) ident(sfDWORD)operator(\))operator(;)
  ident(AddOption)operator(()char<delimiter(')content(O)delimiter(')>operator(,) ident(sfOtherTypes)operator(\))operator(;)
  ident(AddOption)operator(()char<delimiter(')content(?)delimiter(')>operator(,) ident(sfSpecialTypes)operator(\))operator(;)

  ident(Add)operator(()string<delimiter(')content(] [)delimiter(')>operator(\))operator(;)

  keyword(if) operator([)ident(sfHKU)operator(,) ident(sfHKLM)operator(,) ident(sfHKDD)operator(]) operator(<=) ident(Options) keyword(then)
    ident(Add)operator(()string<delimiter(')content(ALL)delimiter(')>operator(\))
  keyword(else) keyword(begin)
    ident(AddOption)operator(()string<delimiter(')content(HKU )delimiter(')>operator(,) ident(sfHKU)operator(,) ident(True)operator(\))operator(;)
    ident(AddOption)operator(()string<delimiter(')content(HKLM )delimiter(')>operator(,) ident(sfHKLM)operator(,) ident(True)operator(\))operator(;)
    ident(AddOption)operator(()string<delimiter(')content(HKDD )delimiter(')>operator(,) ident(sfHKDD)operator(,) ident(True)operator(\))operator(;)
    ident(Result) operator(:=) ident(TrimRight)operator(()ident(Result)operator(\))operator(;)
  keyword(end)operator(;)

  ident(Add)operator(()char<delimiter(')content(])delimiter(')>operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TRegFindThread)operator(.)ident(Start)operator(;)
keyword(begin)
  ident(Mask) operator(:=) keyword(nil)operator(;)
  ident(KeysFound) operator(:=) integer(0)operator(;)
  ident(ValuesFound) operator(:=) integer(0)operator(;)
  ident(DataFound) operator(:=) integer(0)operator(;)
  ident(KeysScanned) operator(:=) integer(0)operator(;)

  comment(//Prepare for options)
  keyword(if) ident(sfAsHex) keyword(in) ident(SearchFor) keyword(then) keyword(begin)
    ident(SearchText) operator(:=) keyword(string)operator(()ident(ByteAOfHex)operator(()ident(SearchText)operator(\))operator(\))operator(;)
    ident(SearchFor) operator(:=) ident(SearchFor) operator(-) operator([)ident(sfDWord)operator(,) ident(sfIgnoreCase)operator(])operator(;)
  keyword(end) keyword(else) keyword(begin)
    keyword(if) ident(SfUseLocales) keyword(in) ident(SearchFor) keyword(then)
      ident(SearchText) operator(:=) ident(AnsiLowerCase)operator(()ident(SearchText)operator(\))operator(;)

    ident(dwordVal) operator(:=) integer(0)operator(;)
    keyword(if) ident(sfDWord) keyword(in) ident(SearchFor) keyword(then)
      keyword(if) ident(IsValidInteger)operator(()ident(SearchText)operator(\)) keyword(then)
        ident(dwordVal) operator(:=) ident(StrToInt)operator(()ident(SearchText)operator(\))
      keyword(else)
        ident(Exclude)operator(()ident(SearchFor)operator(,) ident(sfDWord)operator(\))operator(;)

    keyword(if) ident(sfWildCards) keyword(in) ident(SearchFor) keyword(then)
      keyword(try)
        ident(Mask) operator(:=) ident(TMask)operator(.)ident(Create)operator(()ident(SearchText)operator(\))operator(;)
      keyword(except)
        ident(Mask)operator(.)ident(Free)operator(;)
        ident(Mask) operator(:=) keyword(nil)operator(;)
      keyword(end)operator(;)
  keyword(end)operator(;)

  ident(SearchForValues) operator(:=) operator(()ident(sfValueNames) keyword(in) ident(SearchFor)operator(\))
                  keyword(or) operator(()ident(sfValueData) keyword(in) ident(SearchFor)operator(\))operator(;)

  ident(FindNodeText) operator(:=) string<delimiter(')content(Find )delimiter(')> operator(+) ident(Quote)operator(()ident(FriendlyStr)operator(()ident(SearchText)operator(\))operator(\)) operator(+) char<delimiter(')content( )delimiter(')> operator(+)
    ident(StrOfSearchOptions)operator(()ident(SearchFor)operator(\))operator(;)

  keyword(with) ident(ListTV)operator(.)ident(Items) keyword(do) keyword(begin)
    ident(BeginUpdate)operator(;)
    ident(FindNode) operator(:=) ident(AddChildObject)operator(()keyword(nil)operator(,) ident(FindNodeText) operator(+) string<delimiter(')content(...)delimiter(')>operator(,) keyword(nil)operator(\))operator(;)
    ident(FindNode)operator(.)ident(Data) operator(:=) ident(Self)operator(;)
    ident(SetTNImage)operator(()ident(FindNode)operator(,) ident(iconHostReg)operator(\))operator(;)
    ident(EndUpdate)operator(;)
  keyword(end)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TRegFindThread)operator(.)ident(UpdateStatus)operator(;)
keyword(begin)
  ident(FindNode)operator(.)ident(Text) operator(:=) ident(FindNodeText) operator(+) char<delimiter(')content( )delimiter(')> operator(+) ident(syncStatusText)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TRegFindThread)operator(.)ident(Finish)operator(;)
keyword(var)
  ident(Found)operator(:) keyword(string)operator(;)
keyword(begin)
  ident(ObjectsFound) operator(:=) ident(KeysFound) operator(+) ident(ValuesFound) operator(+) ident(DataFound)operator(;)

  ident(Found) operator(:=) ident(StrNumerus)operator(()ident(ObjectsFound)operator(,) string<delimiter(')content(object)delimiter(')>operator(,) string<delimiter(')content(objects)delimiter(')>operator(,) string<delimiter(')content(No)delimiter(')>operator(\))operator(;)
  keyword(if) ident(ObjectsFound) operator(<) integer(2) keyword(then)
    ident(Found) operator(:=) ident(Found) operator(+) string<delimiter(')content( found.)delimiter(')>
  keyword(else) keyword(begin)
    ident(Found) operator(:=) ident(Found) operator(+) string<delimiter(')content( found: )delimiter(')>operator(;)
    keyword(if) ident(KeysFound) operator(>) integer(0) keyword(then)
      ident(Found) operator(:=) ident(Found) operator(+) ident(StrNumerus)operator(()ident(KeysFound)operator(,) string<delimiter(')content(KeyName, )delimiter(')>operator(,) string<delimiter(')content(KeyNames, )delimiter(')>operator(,) string<delimiter(')content(No)delimiter(')>operator(\))operator(;)
    keyword(if) ident(ValuesFound) operator(>) integer(0) keyword(then)
      ident(Found) operator(:=) ident(Found) operator(+) ident(StrNumerus)operator(()ident(ValuesFound)operator(,) string<delimiter(')content(ValueName, )delimiter(')>operator(,) string<delimiter(')content(ValueNames, )delimiter(')>operator(,)
        string<delimiter(')content(No)delimiter(')>operator(\))operator(;)
    keyword(if) ident(DataFound) operator(>) integer(0) keyword(then)
      ident(Found) operator(:=) ident(Found) operator(+) ident(StrNumerus)operator(()ident(DataFound)operator(,) string<delimiter(')content(Data)delimiter(')>operator(,) string<delimiter(')content(Datas)delimiter(')>operator(,) string<delimiter(')content(No)delimiter(')>operator(\))operator(;)

    keyword(if) ident(RightStr)operator(()ident(Found)operator(,) integer(2)operator(\)) operator(=) string<delimiter(')content(, )delimiter(')> keyword(then)
      ident(Delete)operator(()ident(Found)operator(,) ident(Length)operator(()ident(Found)operator(\)) operator(-) integer(1)operator(,) integer(2)operator(\))operator(;)
  keyword(end)operator(;)

  ident(FindNode)operator(.)ident(Text) operator(:=) ident(FindNodeText) operator(+) ident(Format)operator(()string<delimiter(')content( OK (%0.1f s\) %s)delimiter(')>operator(,)
    operator([)ident(TimeElapsed)operator(,) ident(Found)operator(])operator(\))operator(;)
keyword(end)operator(;)

keyword(end)operator(.)
keyword(unit) ident(FindWinU)operator(;)

keyword(interface)

keyword(uses)
  ident(Windows)operator(,) ident(Messages)operator(,) ident(SysUtils)operator(,) ident(Classes)operator(,) ident(Graphics)operator(,) ident(Controls)operator(,) ident(Forms)operator(,) ident(Dialogs)operator(,)
  ident(ComCtrls)operator(,) ident(StdCtrls)operator(,) ident(ExtCtrls)operator(,) ident(Clipbrd)operator(,) ident(NewPanels)operator(,) ident(plutoconst)operator(,) ident(FindTH)operator(,) ident(YTools)operator(,)
  ident(PrefTools)operator(,) ident(Menus)operator(,) ident(XReg)operator(,) ident(RangeEdit)operator(;)

keyword(type)
  ident(TFindWin) operator(=) keyword(class)operator(()ident(TForm)operator(\))
    ident(ListTV)operator(:) ident(TTreeView)operator(;)
    ident(FindP)operator(:) ident(TPanel)operator(;)
    ident(FindE)operator(:) ident(TEdit)operator(;)
    ident(ColorPanel1)operator(:) ident(TColorPanel)operator(;)
    ident(ResultsPopup)operator(:) ident(TPopupMenu)operator(;)
    ident(Copy1)operator(:) ident(TMenuItem)operator(;)
    ident(ColorPanel2)operator(:) ident(TColorPanel)operator(;)
    ident(FindPrefP)operator(:) ident(TPanel)operator(;)
    ident(CommonGB)operator(:) ident(TGroupBox)operator(;)
    ident(Label4)operator(:) ident(TLabel)operator(;)
    ident(SfWildCardsCB)operator(:) ident(TCheckBox)operator(;)
    ident(SfPartsCB)operator(:) ident(TCheckBox)operator(;)
    ident(SfIgnoreCaseCB)operator(:) ident(TCheckBox)operator(;)
    ident(SfAsHexCB)operator(:) ident(TCheckBox)operator(;)
    ident(SfAsDWord)operator(:) ident(TCheckBox)operator(;)
    ident(SfUseLocalesCB)operator(:) ident(TCheckBox)operator(;)
    ident(FindGB)operator(:) ident(TGroupBox)operator(;)
    ident(SfHKUCB)operator(:) ident(TCheckBox)operator(;)
    ident(SfHKLMCB)operator(:) ident(TCheckBox)operator(;)
    ident(SfHKDDCB)operator(:) ident(TCheckBox)operator(;)
    ident(SfRootKeyRB)operator(:) ident(TRadioButton)operator(;)
    ident(SfCurKeyRB)operator(:) ident(TRadioButton)operator(;)
    ident(SfCLSIDCB)operator(:) ident(TCheckBox)operator(;)
    ident(SfInterfaceCB)operator(:) ident(TCheckBox)operator(;)
    ident(SfKeysCb)operator(:) ident(TCheckBox)operator(;)
    ident(SfValuesCB)operator(:) ident(TCheckBox)operator(;)
    ident(SfDataCB)operator(:) ident(TCheckBox)operator(;)
    ident(SfStringCB)operator(:) ident(TCheckBox)operator(;)
    ident(SfOtherCB)operator(:) ident(TCheckBox)operator(;)
    ident(SfDWordCB)operator(:) ident(TCheckBox)operator(;)
    ident(Panel2)operator(:) ident(TPanel)operator(;)
    ident(GroupBox1)operator(:) ident(TGroupBox)operator(;)
    ident(Label1)operator(:) ident(TLabel)operator(;)
    ident(ThreadPriorityComB)operator(:) ident(TComboBox)operator(;)
    ident(ProgressRG)operator(:) ident(TRadioGroup)operator(;)
    ident(Panel5)operator(:) ident(TPanel)operator(;)
    ident(BorderPanel1)operator(:) ident(TBorderPanel)operator(;)
    ident(MoleLogoI)operator(:) ident(TImage)operator(;)
    ident(TypeRangeE)operator(:) ident(TRangeEdit)operator(;)
    ident(SfTypesCB)operator(:) ident(TCheckBox)operator(;)
    ident(Panel1)operator(:) ident(TPanel)operator(;)
    ident(TransparentCB)operator(:) ident(TPrefCheckBox)operator(;)
    ident(StayOnTopCB)operator(:) ident(TPrefCheckBox)operator(;)
    ident(FindB)operator(:) ident(TButton)operator(;)
    ident(FindPrefB)operator(:) ident(TButton)operator(;)
    keyword(procedure) ident(FindBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(ListTVKeyDown)operator(()ident(Sender)operator(:) ident(TObject)operator(;) keyword(var) ident(Key)operator(:) ident(Word)operator(;) ident(Shift)operator(:) ident(TShiftState)operator(\))operator(;)
    keyword(procedure) ident(FindEKeyDown)operator(()ident(Sender)operator(:) ident(TObject)operator(;) keyword(var) ident(Key)operator(:) ident(Word)operator(;) ident(Shift)operator(:) ident(TShiftState)operator(\))operator(;)
    keyword(procedure) ident(ActivateIt)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(DeActivateIt)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(FormDeactivate)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(FormActivate)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(FormKeyDown)operator(()ident(Sender)operator(:) ident(TObject)operator(;) keyword(var) ident(Key)operator(:) ident(Word)operator(;) ident(Shift)operator(:) ident(TShiftState)operator(\))operator(;)
    keyword(procedure) ident(SfWildCardsCBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(StayOnTopCBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(SfRootKeysUpdate)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(FindPrefBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)

    keyword(procedure) ident(CloseFindPrefP)operator(;)
    keyword(procedure) ident(OpenFindPrefP)operator(;)
    keyword(procedure) ident(FindEChange)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(SfDataCBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(ListTVDblClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(SfAsHexCBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(Copy1Click)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(SfIgnoreCaseCBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(FormCreate)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(FormShow)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(SfTypesCBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
  keyword(end)operator(;)

keyword(const)
  ident(fpbOpen) operator(=) integer(0)operator(;)
  ident(fpbCloseCaption) operator(=) string<delimiter(')content(Params &<<)delimiter(')>operator(;)

  ident(fpbClosed) operator(=) integer(1)operator(;)
  ident(fpbOpenCaption) operator(=) string<delimiter(')content(Params &>>)delimiter(')>operator(;)

keyword(var)
  ident(FindWin)operator(:) ident(TFindWin)operator(;)

keyword(implementation)

keyword(uses) ident(plutomain)operator(,) ident(PrefU)operator(,) ident(ValuesU)operator(;)

preprocessor({$R *.DFM})

keyword(procedure) ident(TFindWin)operator(.)ident(FindBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(var)
  ident(SearchFor)operator(:) ident(TSearchOptions)operator(;)
  ident(FindThread)operator(:) ident(TRegFindThread)operator(;)

  keyword(procedure) ident(AddOption)operator(()ident(CheckBox)operator(:) ident(TCustomCheckBox)operator(;) ident(Flag)operator(:) ident(TSearchVar)operator(\))operator(;)
  keyword(begin)
    keyword(with) ident(CheckBox) keyword(as) ident(TCheckBox) keyword(do)
      keyword(if) ident(Enabled) keyword(and) ident(Checked) keyword(then)
        ident(Include)operator(()ident(SearchFor)operator(,) ident(Flag)operator(\))operator(;)
  keyword(end)operator(;)

keyword(begin)
  ident(SearchFor) operator(:=) operator([)operator(])operator(;)

  ident(AddOption)operator(()ident(SfKeysCB)operator(,) ident(sfKeys)operator(\))operator(;)

  ident(AddOption)operator(()ident(SfValuesCB)operator(,) ident(sfValueNames)operator(\))operator(;)
  ident(AddOption)operator(()ident(SfDataCB)operator(,) ident(sfValueData)operator(\))operator(;)

  ident(AddOption)operator(()ident(SfStringCB)operator(,) ident(sfString)operator(\))operator(;)
  ident(AddOption)operator(()ident(SfDWordCB)operator(,) ident(sfDWord)operator(\))operator(;)
  ident(AddOption)operator(()ident(SfOtherCB)operator(,) ident(sfOtherTypes)operator(\))operator(;)

  keyword(if) ident(SfRootKeyRB)operator(.)ident(Checked) keyword(then) keyword(begin)
    ident(AddOption)operator(()ident(SfHKUCB)operator(,) ident(sfHKU)operator(\))operator(;)
    ident(AddOption)operator(()ident(SfHKLMCB)operator(,) ident(sfHKLM)operator(\))operator(;)
    ident(AddOption)operator(()ident(SfHKDDCB)operator(,) ident(sfHKDD)operator(\))operator(;)
  keyword(end)operator(;)

  ident(AddOption)operator(()ident(SfAsHexCB)operator(,) ident(sfAsHex)operator(\))operator(;)
  ident(AddOption)operator(()ident(SfWildCardsCB)operator(,) ident(sfWildCards)operator(\))operator(;)
  ident(AddOption)operator(()ident(SfPartsCB)operator(,) ident(sfParts)operator(\))operator(;)
  ident(AddOption)operator(()ident(SfIgnoreCaseCB)operator(,) ident(sfIgnoreCase)operator(\))operator(;)
  ident(AddOption)operator(()ident(SfUseLocalesCB)operator(,) ident(sfUseLocales)operator(\))operator(;)

  comment({AddOption(SfCLSIDCB, sfCLSID\);
  AddOption(SfInterfaceCB, sfInterface\);})

  keyword(if) ident(SfTypesCB)operator(.)ident(Checked) keyword(and) keyword(not) ident(TypeRangeE)operator(.)ident(RangeMaximal) keyword(then)
    ident(Include)operator(()ident(SearchFor)operator(,) ident(sfSpecialTypes)operator(\))operator(;)

  ident(FindThread) operator(:=) ident(TRegFindThread)operator(.)ident(CreateIt)operator(()
    ident(TThreadPriority)operator(()ident(ThreadPriorityComB)operator(.)ident(ItemIndex)operator(\))operator(,) ident(FindE)operator(.)ident(Text)operator(,) ident(SearchFor)operator(,)
      ident(TFindThreadProgress)operator(()ident(ProgressRG)operator(.)ident(ItemIndex)operator(\))operator(\))operator(;)

  ident(FindThread)operator(.)ident(ListTV) operator(:=) ident(ListTV)operator(;)

  keyword(if) ident(sfSpecialTypes) keyword(in) ident(SearchFor) keyword(then)
    ident(FindThread)operator(.)ident(Ranges) operator(:=) ident(TypeRangeE)operator(.)ident(Value)operator(;)

  keyword(if) ident(SfCurKeyRB)operator(.)ident(Checked) keyword(then)
    ident(FindThread)operator(.)ident(SpecialPath) operator(:=)
      ident(LWPSolve)operator(()ident(StrOfRegPath)operator(()ident(CurKey)operator(()ident(uhNonSystemShortcuts)operator(\))operator(\))operator(\))operator(;)

  ident(FindThread)operator(.)ident(Resume)operator(;)
  ident(CloseFindPrefP)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TFindWin)operator(.)ident(ListTVKeyDown)operator(()ident(Sender)operator(:) ident(TObject)operator(;) keyword(var) ident(Key)operator(:) ident(Word)operator(;)
  ident(Shift)operator(:) ident(TShiftState)operator(\))operator(;)
keyword(var)
  ident(Node)operator(:) ident(TTreeNode)operator(;)

  keyword(procedure) ident(TerminateFindThread)operator(;)
  keyword(var)
    ident(FindThread)operator(:) ident(TRegFindThread)operator(;)
  keyword(begin)
    keyword(if) operator(()ident(Node)operator(.)ident(Level) operator(=) integer(0)operator(\)) keyword(then) keyword(begin)
      ident(FindThread) operator(:=) ident(TRegFindThread)operator(()ident(Node)operator(.)ident(Data)operator(\))operator(;)
      keyword(if) keyword(not) ident(Assigned)operator(()ident(FindThread)operator(\)) keyword(then)
        ident(Node)operator(.)ident(Delete)
      keyword(else)
        keyword(try)
          ident(FindThread)operator(.)ident(Terminate)operator(;)
        keyword(except)
          ident(Node)operator(.)ident(Text) operator(:=) string<delimiter(')content(Error: couldn)char('')content(t terminate thread!)delimiter(')>operator(;)
        keyword(end)operator(;)
    keyword(end) keyword(else)
      ident(Node)operator(.)ident(Delete)operator(;)
  keyword(end)operator(;)

keyword(begin)
  ident(Node) operator(:=) ident(ListTV)operator(.)ident(Selected)operator(;)
  keyword(if) keyword(not) ident(Assigned)operator(()ident(Node)operator(\)) keyword(then)
    ident(Exit)operator(;)

  keyword(case) ident(Key) keyword(of)
    ident(VK_F12)operator(:) keyword(if) ident(Assigned)operator(()ident(Node)operator(.)ident(Parent)operator(\)) keyword(then)
      ident(Node)operator(.)ident(Parent)operator(.)ident(AlphaSort)operator(;)

    ident(VK_RETURN)operator(:) ident(ListTVDblClick)operator(()ident(Sender)operator(\))operator(;)

    ident(VK_DELETE)operator(:) ident(TerminateFindThread)operator(;)
  keyword(end)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TFindWin)operator(.)ident(FindEKeyDown)operator(()ident(Sender)operator(:) ident(TObject)operator(;) keyword(var) ident(Key)operator(:) ident(Word)operator(;)
  ident(Shift)operator(:) ident(TShiftState)operator(\))operator(;)
keyword(begin)
  keyword(if) ident(Key) operator(=) ident(VK_RETURN) keyword(then)
    ident(FindBClick)operator(()ident(Sender)operator(\))operator(;)

  keyword(if) ident(Key) operator(=) ident(VK_UP) keyword(then) keyword(begin)
    ident(CloseFindPrefP)operator(;)
    ident(Key) operator(:=) integer(0)operator(;)
  keyword(end) keyword(else) keyword(if) ident(Key) operator(=) ident(VK_Down) keyword(then) keyword(begin)
    ident(OpenFindPrefP)operator(;)
    ident(Key) operator(:=) integer(0)operator(;)
  keyword(end)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TFindWin)operator(.)ident(ActivateIt)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(ActivateThis)operator(()ident(Sender)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TFindWin)operator(.)ident(DeActivateIt)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(DeActivateThis)operator(()ident(Sender)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TFindWin)operator(.)ident(FormDeactivate)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  keyword(if) ident(Assigned)operator(()ident(ActiveControl)operator(\)) keyword(and) operator(()ident(ActiveControl)operator(.)ident(Tag) operator(=) ident(EditControlFlag)operator(\)) keyword(then)
    ident(DeActivateThis)operator(()ident(ActiveControl)operator(\))operator(;)

  ident(AlphaBlend) operator(:=) ident(TransparentCB)operator(.)ident(Checked)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TFindWin)operator(.)ident(FormActivate)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  keyword(if) ident(Assigned)operator(()ident(ActiveControl)operator(\)) keyword(and) operator(()ident(ActiveControl)operator(.)ident(Tag) operator(=) ident(EditControlFlag)operator(\)) keyword(then)
    ident(ActivateThis)operator(()ident(ActiveControl)operator(\))operator(;)

  ident(AlphaBlend) operator(:=) ident(False)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TFindWin)operator(.)ident(FormKeyDown)operator(()ident(Sender)operator(:) ident(TObject)operator(;) keyword(var) ident(Key)operator(:) ident(Word)operator(;)
  ident(Shift)operator(:) ident(TShiftState)operator(\))operator(;)
keyword(begin)
  keyword(if) ident(Key) operator(=) ident(VK_ESCAPE) keyword(then)
    ident(Close)operator(;)
  ident(MainWin)operator(.)ident(FormKeyDown)operator(()ident(Sender)operator(,) ident(Key)operator(,) ident(Shift)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TFindWin)operator(.)ident(SfWildCardsCBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(SfPartsCB)operator(.)ident(Enabled) operator(:=) keyword(not) ident(SfWildcardsCB)operator(.)ident(Checked)operator(;)
  ident(SfIgnoreCaseCB)operator(.)ident(Enabled) operator(:=) keyword(not) ident(SfWildcardsCB)operator(.)ident(Checked)operator(;)
  ident(SfUseLocalesCB)operator(.)ident(Enabled) operator(:=) ident(SfIgnoreCaseCB)operator(.)ident(Checked) keyword(and) keyword(not) ident(SfWildcardsCB)operator(.)ident(Checked)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TFindWin)operator(.)ident(StayOnTopCBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  keyword(if) ident(StayOnTopCB)operator(.)ident(Checked) keyword(then)
    ident(FormStyle) operator(:=) ident(fsStayOnTop)
  keyword(else)
    ident(FormStyle) operator(:=) ident(fsNormal)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TFindWin)operator(.)ident(SfRootKeysUpdate)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  keyword(with) ident(SfRootKeyRB) keyword(do) keyword(begin)
    ident(SfHKLMCB)operator(.)ident(Enabled) operator(:=) ident(Checked)operator(;)
    ident(SfHKUCB)operator(.)ident(Enabled) operator(:=) ident(Checked)operator(;)
    ident(SfHKDDCB)operator(.)ident(Enabled) operator(:=) ident(Checked)operator(;)
  keyword(end)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TFindWin)operator(.)ident(FindPrefBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  keyword(case) ident(FindPrefB)operator(.)ident(Tag) keyword(of)
    ident(fpbOpen)operator(:)
      ident(CloseFindPrefP)operator(;)
    ident(fpbClosed)operator(:)
      ident(OpenFindPrefP)operator(;)
  keyword(else)
    ident(ShowMessage)operator(()string<delimiter(')content(Fehler: FindPrefB hat unbekanntes Tag)delimiter(')>operator(\))operator(;)
  keyword(end)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TFindWin)operator(.)ident(CloseFindPrefP)operator(;)
keyword(begin)
  keyword(with) ident(FindPrefB) keyword(do) keyword(begin)
    ident(Tag) operator(:=) ident(fpbClosed)operator(;)
    ident(Caption) operator(:=) ident(fpbOpenCaption)operator(;)
  keyword(end)operator(;)
  ident(FindPrefP)operator(.)ident(Visible) operator(:=) ident(False)operator(;)
  ident(ListTV)operator(.)ident(Repaint)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TFindWin)operator(.)ident(OpenFindPrefP)operator(;)
keyword(begin)
  keyword(with) ident(FindPrefB) keyword(do) keyword(begin)
    ident(Tag) operator(:=) ident(fpbOpen)operator(;)
    ident(Caption) operator(:=) ident(fpbCloseCaption)operator(;)
  keyword(end)operator(;)
  ident(FindPrefP)operator(.)ident(Visible) operator(:=) ident(True)operator(;)
  ident(ListTV)operator(.)ident(Repaint)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TFindWin)operator(.)ident(FindEChange)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  keyword(if) ident(IsValidInteger)operator(()ident(FindE)operator(.)ident(Text)operator(\)) keyword(then)
    ident(SfDWORDCB)operator(.)ident(Caption) operator(:=) string<delimiter(')content(D&WORD OK)delimiter(')>
  keyword(else)
    ident(SfDWORDCB)operator(.)ident(Caption) operator(:=) string<delimiter(')content(D&WORD ??)delimiter(')>operator(;)

  ident(SfAsHexCB)operator(.)ident(Enabled) operator(:=) operator(()ident(FindE)operator(.)ident(Text) operator(<>) string<delimiter(')delimiter(')>operator(\))
    keyword(and) keyword(not) ident(CharIn)operator(()ident(FindE)operator(.)ident(Text)operator(,) ident(AllChars) operator(-) ident(HexadecimalChars) operator(-) operator([)char<delimiter(')content( )delimiter(')>operator(])operator(\))operator(;)
  ident(SfAsDWord)operator(.)ident(Enabled) operator(:=) ident(SfAsHexCB)operator(.)ident(Enabled) keyword(and) operator(()ident(Length)operator(()ident(TrimAll)operator(()ident(FindE)operator(.)ident(Text)operator(\))operator(\)) operator(<) integer(8)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TFindWin)operator(.)ident(SfDataCBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  keyword(with) ident(SfDataCB) keyword(do) keyword(begin)
    ident(SfStringCB)operator(.)ident(Enabled) operator(:=) ident(Checked)operator(;)
    ident(SfDWordCB)operator(.)ident(Enabled) operator(:=) ident(Checked)operator(;)
    ident(SfOtherCB)operator(.)ident(Enabled) operator(:=) ident(Checked)operator(;)
  keyword(end)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TFindWin)operator(.)ident(ListTVDblClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(var)
  ident(Node)operator(:) ident(TTreeNode)operator(;)
keyword(begin)
  ident(Node) operator(:=) ident(ListTV)operator(.)ident(Selected)operator(;)
  keyword(if) keyword(not) ident(Assigned)operator(()ident(Node)operator(\)) keyword(or) operator(()ident(Node)operator(.)ident(Level) operator(=) integer(0)operator(\)) keyword(then)
    ident(Exit)operator(;)

  ident(MainWin)operator(.)ident(GotoKey)operator(()ident(UntilLastChar)operator(()ident(Node)operator(.)ident(Text)operator(,) char<delimiter(')content(=)delimiter(')>operator(\))operator(\))
keyword(end)operator(;)

keyword(procedure) ident(TFindWin)operator(.)ident(SfAsHexCBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  keyword(with) ident(SfAsHexCB) keyword(do) keyword(begin)
    ident(SfIgnoreCaseCB)operator(.)ident(Enabled) operator(:=) ident(Checked)operator(;)
    ident(SfWildCardsCB)operator(.)ident(Enabled) operator(:=) ident(Checked)operator(;)
  keyword(end)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TFindWin)operator(.)ident(Copy1Click)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(var)
  ident(Node)operator(:) ident(TTreeNode)operator(;)
keyword(begin)
  ident(Node) operator(:=) ident(ListTV)operator(.)ident(Selected)operator(;)
  keyword(if) keyword(not) ident(Assigned)operator(()ident(Node)operator(\)) keyword(then)
    ident(Exit)operator(;)

  ident(Clipboard)operator(.)ident(AsText) operator(:=) ident(Node)operator(.)ident(Text)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TFindWin)operator(.)ident(SfIgnoreCaseCBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(SfUseLocalesCB)operator(.)ident(Enabled) operator(:=) ident(SfIgnoreCaseCB)operator(.)ident(Checked)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TFindWin)operator(.)ident(FormCreate)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(var)
  ident(ImageFile)operator(:) keyword(string)operator(;)
keyword(begin)
  ident(Caption) operator(:=) string<delimiter(')content(Pluto.RegMole )delimiter(')> operator(+) ident(RegMoleVersion) operator(+)
    string<delimiter(')content( - The fastest registry search engine for Win9x)delimiter(')>operator(;)

  ident(ImageFile) operator(:=) ident(PlutoDir) operator(+) string<delimiter(')content(mole.bmp)delimiter(')>operator(;)
  keyword(if) ident(FileExists)operator(()ident(ImageFile)operator(\)) keyword(then)
    ident(MoleLogoI)operator(.)ident(Picture)operator(.)ident(LoadFromFile)operator(()ident(ImageFile)operator(\))operator(;)

  ident(Width) operator(:=) ident(Screen)operator(.)ident(WorkAreaWidth) operator(-) integer(100)operator(;)

  ident(CloseFindPrefP)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TFindWin)operator(.)ident(FormShow)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(Top) operator(:=) ident(Screen)operator(.)ident(WorkAreaHeight) operator(-) integer(450)operator(;)
  ident(Height) operator(:=) ident(Screen)operator(.)ident(WorkAreaHeight) operator(-) ident(Top)operator(;)
  ident(Left) operator(:=) operator(()ident(Screen)operator(.)ident(WorkAreaWidth) operator(-) ident(Width)operator(\)) keyword(div) integer(2)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TFindWin)operator(.)ident(SfTypesCBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(TypeRangeE)operator(.)ident(Enabled) operator(:=) ident(SfTypesCB)operator(.)ident(Checked)operator(;)
keyword(end)operator(;)

keyword(end)operator(.)
keyword(unit) ident(Plutoconst)operator(;)

keyword(interface)

keyword(uses) ident(ComCtrls)operator(,) ident(Classes)operator(,) ident(XReg)operator(,) ident(UniKey)operator(,) ident(YTools)operator(;)

keyword(var)
  ident(Started)operator(:) ident(Boolean) operator(=) ident(False)operator(;)
  ident(MurphyMode)operator(:) ident(Boolean) operator(=) ident(False)operator(;)
  ident(PlutoKey)operator(:) ident(TUniKey)operator(;)

keyword(const)
  ident(Version) operator(=) string<delimiter(')content(1.6 -nium Alpha)delimiter(')>operator(;)
  ident(Overnight) operator(=) ident(True)operator(;)
  ident(Codename) operator(=) string<delimiter(')content(Phoenix)delimiter(')>operator(;)
  comment(//Generation.Version-Release-Beta)
  comment(//                   GG.VVRRBB)
  ident(VersionNum)operator(:) ident(Double) operator(=)  float(1.600000)operator(;)
  comment(//Must be Double!)

keyword(const)
  ident(iconKey) operator(=)         integer(0)operator(;)

  ident(iconFirstHKEY) operator(=)   integer(2)operator(;)
  ident(iconHKLM) operator(=)        ident(iconFirstHKEY)operator(;)
  ident(iconHKU) operator(=)         ident(iconFirstHKEY) operator(+) integer(2)operator(;)

  ident(iconFirstShortcut) operator(=) ident(iconFirstHKEY) operator(+) integer(4)operator(;)
  ident(iconHKCC) operator(=)        ident(iconFirstShortcut)operator(;)
  ident(iconHKCU) operator(=)        ident(iconFirstShortcut) operator(+)  integer(2)operator(;)
  ident(iconHKCR) operator(=)        ident(iconFirstShortcut) operator(+)  integer(4)operator(;)
  ident(iconHKDD) operator(=)        ident(iconFirstShortcut) operator(+)  integer(6)operator(;)
  ident(iconHKPD) operator(=)        ident(iconFirstShortcut) operator(+)  integer(8)operator(;)
  ident(iconHKWM) operator(=)        ident(iconFirstShortcut) operator(+) integer(10)operator(;)
  ident(iconHKWU) operator(=)        ident(iconFirstShortcut) operator(+) integer(12)operator(;)
  ident(iconShortcut) operator(=)    ident(iconFirstShortcut) operator(+) integer(14)operator(;)
  ident(nHKeyIcons) operator(=)      integer(16)operator(;)

  ident(iconFirstType) operator(=)   ident(iconFirstShortcut) operator(+) ident(nHKeyIcons)operator(;)
  ident(iconNone) operator(=)        ident(iconFirstType) operator(+)  integer(0)operator(;)
  ident(iconString) operator(=)      ident(iconFirstType) operator(+)  integer(1)operator(;)
  ident(iconExpandString) operator(=)ident(iconFirstType) operator(+)  integer(2)operator(;)
  ident(iconBinary) operator(=)      ident(iconFirstType) operator(+)  integer(3)operator(;)
  ident(iconCardinal) operator(=)    ident(iconFirstType) operator(+)  integer(4)operator(;)
  ident(iconCardBigEndian)operator(=)ident(iconFirstType) operator(+)  integer(5)operator(;)
  ident(iconLink) operator(=)        ident(iconFirstType) operator(+)  integer(6)operator(;)
  ident(iconMultiString) operator(=) ident(iconFirstType) operator(+)  integer(7)operator(;)
  ident(iconResList) operator(=)     ident(iconFirstType) operator(+)  integer(8)operator(;)
  ident(iconFullResDesc) operator(=) ident(iconFirstType) operator(+)  integer(9)operator(;)
  ident(iconResReqList) operator(=)  ident(iconFirstType) operator(+) integer(10)operator(;)
  ident(iconUnknownType) operator(=) ident(iconFirstType) operator(+) integer(11)operator(;)
  ident(nTypeIcons) operator(=)      integer(12)operator(;)

  ident(iconFirstValue) operator(=) ident(iconFirstType) operator(+) ident(nTypeIcons)operator(;)
  ident(iconValueElse) operator(=) ident(iconFirstValue)operator(;)
  ident(iconValueEdit) operator(=) ident(iconFirstValue) operator(+) integer(1)operator(;)
  ident(iconValueEditBinary) operator(=) ident(iconFirstValue) operator(+) integer(2)operator(;)
  ident(iconValueZeromize) operator(=) ident(iconFirstValue) operator(+) integer(3)operator(;)
  ident(iconValueDublicate) operator(=) ident(iconFirstValue) operator(+) integer(4)operator(;)
  ident(iconMainValue) operator(=) ident(iconFirstValue) operator(+) integer(5)operator(;)
  ident(iconTakeAsMainValue) operator(=) ident(iconFirstValue) operator(+) integer(6)operator(;)
  ident(nValueIcons) operator(=)     integer(7)operator(;)

  ident(iconFirstKey) operator(=)    ident(iconFirstValue) operator(+) ident(nValueIcons)operator(;)
  ident(iconKeyInfos) operator(=)    ident(iconFirstKey)operator(;)
  ident(iconSubKey) operator(=)   ident(iconFirstKey) operator(+) integer(1)operator(;)
  ident(iconKeyDublicate) operator(=) ident(iconFirstKey) operator(+) integer(2)operator(;)
  ident(iconKeyFind) operator(=) ident(iconFirstKey) operator(+) integer(3)operator(;)
  ident(iconKeyTrace) operator(=) ident(iconFirstKey) operator(+) integer(4)operator(;)
  ident(nKeyIcons) operator(=) integer(5)operator(;)

  ident(iconFirstContextMenues) operator(=) ident(iconFirstKey) operator(+) ident(nKeyIcons)operator(;)
  ident(iconRename) operator(=) ident(iconFirstContextMenues)operator(;)
  ident(iconDelete) operator(=) ident(iconFirstContextMenues) operator(+) integer(1)operator(;)
  ident(nContextMenuesIcon) operator(=) integer(2)operator(;)

  ident(iconFirstIni) operator(=)    ident(iconFirstContextMenues) operator(+) ident(nContextMenuesIcon)operator(;)
  ident(iconIniSection) operator(=)  ident(iconFirstIni)operator(;)
  ident(nIniIcons) operator(=)       integer(1)operator(;)

  ident(iconFirstHost) operator(=)   ident(iconFirstIni) operator(+) ident(nIniIcons)operator(;)
  ident(iconHostReg) operator(=)     ident(iconFirstHost)operator(;)
  ident(iconHostIni) operator(=)     ident(iconFirstHost) operator(+) integer(1)operator(;)
  ident(iconHostUni) operator(=)     ident(iconFirstHost) operator(+) integer(2)operator(;)
  ident(iconHostUni2) operator(=)    ident(iconFirstHost) operator(+) integer(3)operator(;)
  ident(nHostIcons) operator(=)      integer(4)operator(;)

  ident(iconFirstOther) operator(=)  ident(iconFirstHost) operator(+) ident(nHostIcons)operator(;)

  ident(iconSortArrowAsc) operator(=)   ident(iconFirstOther) operator(+) integer(0)operator(;)
  ident(iconSortArrowDesc) operator(=)  ident(iconFirstOther) operator(+) integer(1)operator(;)
  ident(iconKeyMiddle) operator(=)      ident(iconFirstOther) operator(+) integer(2)operator(;)
  ident(iconLock) operator(=)           ident(iconFirstOther) operator(+) integer(3)operator(;)

  comment(//iconDefect =      iconFirstOther;)

  comment({ WorkWin.ChangeImages })
  ident(iconFirstChange) operator(=)  integer(0)operator(;)
  ident(iconCKeyPlus) operator(=)     ident(iconFirstChange)operator(;)
  ident(iconCKeyMinus) operator(=)    ident(iconFirstChange) operator(+) integer(1)operator(;)
  ident(iconCValuePlus) operator(=)   ident(iconFirstChange) operator(+) integer(2)operator(;)
  ident(iconCValueMinus) operator(=)  ident(iconFirstChange) operator(+) integer(3)operator(;)
  ident(iconCContext) operator(=)     ident(iconFirstChange) operator(+) integer(4)operator(;)
  ident(iconOldContext) operator(=)   ident(iconFirstChange) operator(+) integer(5)operator(;)
  ident(iconNewContext) operator(=)   ident(iconFirstChange) operator(+) integer(6)operator(;)
  ident(iconGroup) operator(=)        ident(iconFirstChange) operator(+) integer(7)operator(;)
  ident(iconGroupBlinking) operator(=)   ident(iconFirstChange) operator(+) integer(8)operator(;)
  ident(nChangeIcons) operator(=)    integer(7)operator(;)

  ident(DefaultValueFlag) operator(=) ident(Pointer)operator(()integer(1)operator(\))operator(;)
  ident(MultiEditFlag) operator(=) ident(Pointer)operator(()integer(2)operator(\))operator(;)
  
  ident(NoValueCaption) operator(=) string<delimiter(')content([No Value])delimiter(')>operator(;)

  ident(EditControlFlag) operator(=) integer(100)operator(;)

  ident(MaxPreviewLen) operator(=) integer(255)operator(;)
  ident(RegMaxDataSize) operator(=) hex($FFFF)operator(;) comment(//64 KB)

keyword(const)
  ident(BoolStrFileName) operator(=) string<delimiter(')content(Boolean Strings.txt)delimiter(')>operator(;)
  ident(ShortcutsFileName) operator(=) string<delimiter(')content(Shortcuts.ini)delimiter(')>operator(;)
  ident(StandardShortcutsFileName) operator(=) string<delimiter(')content(StandardShortcuts.ini)delimiter(')>operator(;)
  ident(SisyFilterFileName) operator(=) string<delimiter(')content(sisy filter.txt)delimiter(')>operator(;)

  ident(clDarkGray) operator(=) hex($00404040)operator(;)
  ident(clBrightRed) operator(=) hex($00BBBBFF)operator(;)
  ident(clVeryBrightRed) operator(=) hex($00DDDDFF)operator(;)
  ident(clBrightBlue) operator(=) hex($00FFBBBB)operator(;)
  ident(clBrightGreen) operator(=) hex($00BBFFBB)operator(;)
  ident(clCyan) operator(=) hex($00FFFF44)operator(;)
  ident(clBrightCyan) operator(=) hex($00FFFFBB)operator(;)
  ident(clVeryBrightCyan) operator(=) hex($00FFFFDD)operator(;)
  ident(clBrightYellow) operator(=) hex($00BBFFFF)operator(;)
  ident(clVeryBrightYellow) operator(=) hex($00DDFFFF)operator(;)
  ident(clBrightPurple) operator(=) hex($00FFBBFF)operator(;)
  ident(clBrightSilver) operator(=) hex($00DDDDDD)operator(;)
  ident(clGold) operator(=) hex($0055CCEE)operator(;)

  ident(clVeryBrightBlue) operator(=) hex($00FFDDDD)operator(;)

keyword(type)
  ident(TValueListColumn) operator(=) operator(()ident(vlcName)operator(,) ident(vlcSize)operator(,) ident(vlcType)operator(,) ident(vlcData)operator(\))operator(;)

keyword(const)
  ident(ValueListColumnRange) operator(=) operator([)ident(Low)operator(()ident(TValueListColumn)operator(\))operator(..)ident(High)operator(()ident(TValueListColumn)operator(\))operator(])operator(;)

keyword(type)
  ident(TSearchVar) operator(=) operator(()ident(sfKeys)operator(,) ident(sfValueNames)operator(,) ident(sfValueData)operator(,)
                ident(sfAsHex)operator(,) ident(sfAsDWord)operator(,)
                ident(sfWildCards)operator(,) ident(sfParts)operator(,) ident(sfIgnoreCase)operator(,) ident(SfUseLocales)operator(,)
                ident(sfHKU)operator(,) ident(sfHKLM)operator(,) ident(sfHKDD)operator(,)comment(// sfCLSID, sfInterface,)
                ident(sfString)operator(,) ident(sfDWord)operator(,) ident(sfOtherTypes)operator(,) ident(sfSpecialTypes)operator(\))operator(;)

  ident(TSearchOptions) operator(=) keyword(set) keyword(of) ident(TSearchVar)operator(;)

  comment(//be carefull: used in with!)
  ident(TKeyShortcut) operator(=) keyword(record)
    ident(Alias)operator(:) keyword(string)operator(;)
    ident(RealPath)operator(:) keyword(string)operator(;)
    ident(Node)operator(:) ident(TTreeNode)operator(;)
  keyword(end)operator(;)
  ident(PKeyShortcut) operator(=) operator(^)ident(TKeyShortcut)operator(;)
  ident(TShortcutA) operator(=) keyword(array) keyword(of) ident(TKeyShortcut)operator(;)

  ident(TOpenNode) operator(=) keyword(function) operator(()ident(Reg)operator(:) ident(TXRegistry)operator(;) ident(Node)operator(:) ident(TTreeNode)operator(\))operator(:) ident(Boolean)operator(;)
  ident(TCheckNode) operator(=) keyword(procedure) operator(()ident(Node)operator(:) ident(TTreeNode)operator(;) ident(OnlyOnce)operator(:) ident(Boolean) operator(=) ident(True)operator(\))operator(;)

  comment(//NodeInfo System)
  ident(TNodeFlag) operator(=) operator(()ident(nfDefect)operator(,) ident(nfReadOnly)operator(,) ident(nfChecked)operator(,)
    ident(nfCopy)operator(,) ident(nfCut)operator(,) ident(nfPaste)operator(\))operator(;)
  ident(TNodeFlags) operator(=) keyword(set) keyword(of) ident(TNodeFlag)operator(;)

  ident(TUniHostType) operator(=) operator(()ident(uhNone)operator(,)
                  ident(uhReg)operator(,) ident(uhIni)operator(,) ident(uhRegFile)operator(,)
                  ident(uhUserShortcut)operator(,) ident(uhStandardShortcut)operator(,) ident(uhSystemShortcut)operator(\))operator(;)
  ident(TUniHostTypes) operator(=) keyword(set) keyword(of) ident(TUniHostType)operator(;)

keyword(const)
  ident(uhShortcuts) operator(=) operator([)ident(uhUserShortcut)operator(,) ident(uhStandardShortcut)operator(,) ident(uhSystemShortcut)operator(])operator(;)
  ident(uhNonSystemShortcuts) operator(=) operator([)ident(uhUserShortcut)operator(,) ident(uhStandardShortcut)operator(])operator(;)

  ident(NodeFlagStrings)operator(:) keyword(array)operator([)ident(TNodeFlag)operator(]) keyword(of) keyword(string) operator(=) operator(()
    string<delimiter(')content(nfDefect)delimiter(')>operator(,) string<delimiter(')content(nfReadOnly)delimiter(')>operator(,) string<delimiter(')content(nfChecked)delimiter(')>operator(,)
    string<delimiter(')content(nfCopy)delimiter(')>operator(,) string<delimiter(')content(nfCut)delimiter(')>operator(,) string<delimiter(')content(nfPaste)delimiter(')>operator(\))operator(;)

  ident(HostTypeStrings)operator(:) keyword(array)operator([)ident(TUniHostType)operator(]) keyword(of) keyword(string) operator(=) operator(()string<delimiter(')content(uhNone)delimiter(')>operator(,)
    string<delimiter(')content(uhReg)delimiter(')>operator(,) string<delimiter(')content(uhIni)delimiter(')>operator(,) string<delimiter(')content(uhRegFile)delimiter(')>operator(,)
    string<delimiter(')content(uhUserShortcut)delimiter(')>operator(,) string<delimiter(')content(uhStandardShortcut)delimiter(')>operator(,) string<delimiter(')content(uhSystemShortcut)delimiter(')>operator(\))operator(;)

keyword(type)
  ident(TNodeInfo) operator(=) keyword(packed) keyword(class)
  directive(public)
    ident(HostType)operator(:) ident(TUniHostType)operator(;)
    ident(Flags)operator(:) ident(TNodeFlags)operator(;)
    keyword(constructor) ident(Create)operator(()ident(HostType)operator(:) ident(TUniHostType) operator(=) ident(uhNone)operator(;) ident(Flags)operator(:) ident(TNodeFlags) operator(=) operator([)operator(])operator(\))operator(;)

    keyword(procedure) ident(IncludeFlag)operator(()ident(Flag)operator(:) ident(TNodeFlag)operator(\))operator(;)
    keyword(procedure) ident(ExcludeFlag)operator(()ident(Flag)operator(:) ident(TNodeFlag)operator(\))operator(;)

    keyword(function) ident(IsHost)operator(:) ident(Boolean)operator(;)
    keyword(function) ident(IsShortcut)operator(:) ident(Boolean)operator(;)

    keyword(function) ident(ReadOnly)operator(:) ident(Boolean)operator(;)
    keyword(function) ident(Checked)operator(:) ident(Boolean)operator(;)
    keyword(function) ident(Defect)operator(:) ident(Boolean)operator(;)
  keyword(end)operator(;)

keyword(function) ident(NodeInfo)operator(()ident(Node)operator(:) ident(TTreeNode)operator(\))operator(:) ident(TNodeInfo)operator(;)
keyword(procedure) ident(ReportStatus)operator(()keyword(const) ident(s)operator(:) keyword(string)operator(\))operator(;)

keyword(const)
  ident(PlatformStrings)operator(:) keyword(array)operator([)integer(0)operator(..)integer(2)operator(]) keyword(of) keyword(string) operator(=)
    operator(()string<delimiter(')content(VER_PLATFORM_WIN32s)delimiter(')>operator(,) string<delimiter(')content(VER_PLATFORM_WIN32_WINDOWS)delimiter(')>operator(,) string<delimiter(')content(VER_PLATFORM_WIN32_NT)delimiter(')>operator(\))operator(;)

keyword(var)
  ident(PlutoDir)operator(:) keyword(string) operator(=) string<delimiter(')delimiter(')>operator(;)

keyword(implementation)

keyword(uses) ident(SysUtils)operator(;)

keyword(function) ident(NodeInfo)operator(()ident(Node)operator(:) ident(TTreeNode)operator(\))operator(:) ident(TNodeInfo)operator(;)
keyword(begin)
  keyword(if) keyword(not) ident(Assigned)operator(()ident(Node)operator(\)) keyword(then) keyword(begin)
    ident(Result) operator(:=) keyword(nil)operator(;)
  ident(Exit) keyword(end)operator(;)

  keyword(if) keyword(not) ident(Assigned)operator(()ident(Node)operator(.)ident(Data)operator(\)) keyword(then)
    ident(Node)operator(.)ident(Data) operator(:=) ident(TNodeInfo)operator(.)ident(Create)operator(;)
  ident(Result) operator(:=) ident(TNodeInfo)operator(()ident(Node)operator(.)ident(Data)operator(\))operator(;)
keyword(end)operator(;)

comment({ TNodeInfo })

keyword(constructor) ident(TNodeInfo)operator(.)ident(Create)operator(()ident(HostType)operator(:) ident(TUniHostType)operator(;) ident(Flags)operator(:) ident(TNodeFlags)operator(\))operator(;)
keyword(begin)
  keyword(inherited) ident(Create)operator(;)
  ident(Self)operator(.)ident(HostType) operator(:=) ident(HostType)operator(;)
  ident(Self)operator(.)ident(Flags) operator(:=) ident(Flags)operator(;)
keyword(end)operator(;)

keyword(function) ident(TNodeInfo)operator(.)ident(Checked)operator(:) ident(Boolean)operator(;)
keyword(begin)
  ident(Result) operator(:=) ident(nfChecked) keyword(in) ident(Flags)operator(;)
keyword(end)operator(;)

keyword(function) ident(TNodeInfo)operator(.)ident(ReadOnly)operator(:) ident(Boolean)operator(;)
keyword(begin)
  ident(Result) operator(:=) ident(nfReadOnly) keyword(in) ident(Flags)operator(;)
keyword(end)operator(;)

keyword(function) ident(TNodeInfo)operator(.)ident(Defect)operator(:) ident(Boolean)operator(;)
keyword(begin)
  ident(Result) operator(:=) ident(nfDefect) keyword(in) ident(Flags)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TNodeInfo)operator(.)ident(IncludeFlag)operator(()ident(Flag)operator(:) ident(TNodeFlag)operator(\))operator(;)
keyword(begin)
  ident(Include)operator(()ident(Flags)operator(,) ident(Flag)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TNodeInfo)operator(.)ident(ExcludeFlag)operator(()ident(Flag)operator(:) ident(TNodeFlag)operator(\))operator(;)
keyword(begin)
  ident(Exclude)operator(()ident(Flags)operator(,) ident(Flag)operator(\))operator(;)
keyword(end)operator(;)

keyword(function) ident(TNodeInfo)operator(.)ident(IsHost)operator(:) ident(Boolean)operator(;)
keyword(begin)
  ident(Result) operator(:=) ident(HostType) operator(<>) ident(uhNone)operator(;)
keyword(end)operator(;)

keyword(function) ident(TNodeInfo)operator(.)ident(IsShortcut)operator(:) ident(Boolean)operator(;)
keyword(begin)
  ident(Result) operator(:=) ident(HostType) keyword(in) ident(uhShortcuts)operator(;)
keyword(end)operator(;)

keyword(function) ident(GetPlutoDir)operator(:) keyword(string)operator(;)
keyword(begin)
  ident(Result) operator(:=) ident(LWPSlash)operator(()ident(GetParam)operator(()string<delimiter(')content(-imports=)delimiter(')>operator(,) ident(MyDir)operator(\))operator(\))operator(;)
  keyword(if) keyword(not) ident(DirectoryExists)operator(()ident(Result)operator(\)) keyword(then) keyword(begin)
    ident(ReportStatus)operator(()string<delimiter(')content(PlutoDir ")delimiter(')> operator(+) ident(Result) operator(+) string<delimiter(')content(" not found -> setting to default (MyDir\).)delimiter(')>operator(\))operator(;)
    ident(Result) operator(:=) ident(MyDir)operator(;)
  keyword(end)operator(;)
  ident(ReportStatus)operator(()string<delimiter(')content(PlutoDir=)delimiter(')> operator(+) ident(Result)operator(\))operator(;)
keyword(end)operator(;)

keyword(var)
  ident(ReportSL)operator(:) ident(TStringList)operator(;)
  ident(ReportFileName)operator(:) keyword(string)operator(;)

keyword(procedure) ident(ReportStatus)operator(()keyword(const) ident(s)operator(:) keyword(string)operator(\))operator(;)
keyword(begin)
  ident(ReportSL)operator(.)ident(Add)operator(()ident(s)operator(\))operator(;)
  keyword(try)
    ident(ReportSL)operator(.)ident(SaveToFile)operator(()ident(ReportFileName)operator(\))operator(;)
  keyword(except) keyword(end)operator(;)
keyword(end)operator(;)

keyword(initialization)
  ident(ReportFileName) operator(:=) ident(MyDir) operator(+) string<delimiter(')content(loadreport.txt)delimiter(')>operator(;)
  ident(ReportSL) operator(:=) ident(TStringList)operator(.)ident(Create)operator(;)
  ident(PlutoDir) operator(:=) ident(GetPlutoDir)operator(;)

keyword(end)operator(.)
comment(//winampviscolor <viscolor.txt>:)
keyword(unit) ident(plutomain)operator(;)
preprocessor({$DEFINE UNIKEY})
preprocessor({$DEFINE CYCFS})

comment({===============================================================================

   cYcnus.Pluto 1.57 Beta 14
   by Murphy

   ©2000-2003 by cYcnus
   visit www.cYcnus.de

   murphy@cYcnus.de (Kornelius Kalnbach\)
   
   this programm is published under the terms of the GPL

===============================================================================})

keyword(interface)

keyword(uses)
  ident(Windows)operator(,) ident(Messages)operator(,) ident(SysUtils)operator(,) ident(Classes)operator(,) ident(Graphics)operator(,) ident(Controls)operator(,) ident(Forms)operator(,) ident(Dialogs)operator(,)
  ident(StdCtrls)operator(,) ident(ImgList)operator(,) ident(ComCtrls)operator(,) ident(ExtCtrls)operator(,) ident(Menus)operator(,) ident(Clipbrd)operator(,) ident(IniFiles)operator(,)
  ident(ShellAPI)operator(,) ident(Grids)operator(,)
  comment(//Components)
  ident(NewPanels)operator(,)
  comment(//Units)
  ident(YTools)operator(,) ident(YTypes)operator(,) ident(UniKey)operator(,) ident(XReg)operator(,)
  comment(//Pluto)
  ident(Plutoconst)operator(,)
  ident(SpyTH)operator(,) ident(SisyphusTH)operator(;)

keyword(const)
  ident(NoPreBlinkHint) operator(=) char(#1)operator(;)

keyword(type)
  ident(TMainWin) operator(=) keyword(class)operator(()ident(TForm)operator(\))
    ident(StatusBar)operator(:) ident(TStatusBar)operator(;)
    ident(StatusBarPU)operator(:) ident(TPopupMenu)operator(;)
    ident(CopyPath)operator(:) ident(TMenuItem)operator(;)
    ident(InsertPath)operator(:) ident(TMenuItem)operator(;)
    ident(ShowRealPathMI)operator(:) ident(TMenuItem)operator(;)
    ident(PathP)operator(:) ident(TPanel)operator(;)
    ident(N1)operator(:) ident(TMenuItem)operator(;)
    ident(MainMenu1)operator(:) ident(TMainMenu)operator(;)
    ident(Desktop1)operator(:) ident(TMenuItem)operator(;)
    ident(Pluto1)operator(:) ident(TMenuItem)operator(;)
    ident(RegEdit1)operator(:) ident(TMenuItem)operator(;)
    ident(Free1)operator(:) ident(TMenuItem)operator(;)
    ident(BigVal1)operator(:) ident(TMenuItem)operator(;)
    ident(Hilfe1)operator(:) ident(TMenuItem)operator(;)
    ident(History1)operator(:) ident(TMenuItem)operator(;)
    ident(SplashScreen1)operator(:) ident(TMenuItem)operator(;)
    ident(wwwcYcnusde1)operator(:) ident(TMenuItem)operator(;)
    ident(Credits1)operator(:) ident(TMenuItem)operator(;)
    ident(Optionen1)operator(:) ident(TMenuItem)operator(;)
    ident(PrefMI)operator(:) ident(TMenuItem)operator(;)
    ident(EditBoolStrMI)operator(:) ident(TMenuItem)operator(;)
    ident(N4)operator(:) ident(TMenuItem)operator(;)
    ident(ImageList1)operator(:) ident(TImageList)operator(;)
    ident(Plutoini1)operator(:) ident(TMenuItem)operator(;)
    ident(About1)operator(:) ident(TMenuItem)operator(;)
    ident(kornycYcnusde1)operator(:) ident(TMenuItem)operator(;)
    ident(ools1)operator(:) ident(TMenuItem)operator(;)
    ident(NotePad1)operator(:) ident(TMenuItem)operator(;)
    ident(RegEdit2)operator(:) ident(TMenuItem)operator(;)
    ident(SysEdit1)operator(:) ident(TMenuItem)operator(;)
    ident(WordPad1)operator(:) ident(TMenuItem)operator(;)
    ident(N3)operator(:) ident(TMenuItem)operator(;)
    ident(N5)operator(:) ident(TMenuItem)operator(;)
    ident(Suchen1)operator(:) ident(TMenuItem)operator(;)
    ident(Find1)operator(:) ident(TMenuItem)operator(;)
    ident(File1)operator(:) ident(TMenuItem)operator(;)
    ident(ExitPluto1)operator(:) ident(TMenuItem)operator(;)
    ident(OpenProgramFolder1)operator(:) ident(TMenuItem)operator(;)
    ident(N6)operator(:) ident(TMenuItem)operator(;)
    ident(OpenWinDir1)operator(:) ident(TMenuItem)operator(;)
    ident(HintBlinkT)operator(:) ident(TTimer)operator(;)
    ident(FindCLSID1)operator(:) ident(TMenuItem)operator(;)
    ident(Clipboard1)operator(:) ident(TMenuItem)operator(;)
    ident(GotoCLSID1)operator(:) ident(TMenuItem)operator(;)
    ident(CommandLineParameters1)operator(:) ident(TMenuItem)operator(;)
    ident(plutocYcnusde1)operator(:) ident(TMenuItem)operator(;)
    ident(N7)operator(:) ident(TMenuItem)operator(;)
    ident(heinzcYcnusde1)operator(:) ident(TMenuItem)operator(;)
    ident(kornycYcnusde2)operator(:) ident(TMenuItem)operator(;)
    ident(N8)operator(:) ident(TMenuItem)operator(;)
    ident(ExternalHexEditMI)operator(:) ident(TMenuItem)operator(;)
    ident(Cleanup1)operator(:) ident(TMenuItem)operator(;)
    ident(DeleteTempFolder1)operator(:) ident(TMenuItem)operator(;)
    ident(Debug1)operator(:) ident(TMenuItem)operator(;)
    ident(CurrentDir1)operator(:) ident(TMenuItem)operator(;)
    ident(RepairPluto155bBug1)operator(:) ident(TMenuItem)operator(;)
    ident(BackupRegistryscanreg1)operator(:) ident(TMenuItem)operator(;)
    ident(Username1)operator(:) ident(TMenuItem)operator(;)
    ident(SupportMI)operator(:) ident(TMenuItem)operator(;)
    ident(MurphyMI)operator(:) ident(TMenuItem)operator(;)
    ident(ToDoMI)operator(:) ident(TMenuItem)operator(;)
    ident(Beta1)operator(:) ident(TMenuItem)operator(;)
    ident(UniKeycYcnusde1)operator(:) ident(TMenuItem)operator(;)
    ident(YToolscYcnusde1)operator(:) ident(TMenuItem)operator(;)
    ident(YPanelscYcnusde1)operator(:) ident(TMenuItem)operator(;)
    ident(Usedenginescomponents1)operator(:) ident(TMenuItem)operator(;)
    ident(PrefToolscYcnusde1)operator(:) ident(TMenuItem)operator(;)
    ident(BugReportsRequests1)operator(:) ident(TMenuItem)operator(;)
    ident(murphycYcnusde1)operator(:) ident(TMenuItem)operator(;)
    ident(Credits2)operator(:) ident(TMenuItem)operator(;)
    ident(News1)operator(:) ident(TMenuItem)operator(;)
    ident(cYcnus1)operator(:) ident(TMenuItem)operator(;)
    ident(Contact1)operator(:) ident(TMenuItem)operator(;)
    ident(N2)operator(:) ident(TMenuItem)operator(;)
    ident(IjustwantCONTACT1)operator(:) ident(TMenuItem)operator(;)
    ident(N9)operator(:) ident(TMenuItem)operator(;)
    ident(AnotherPluto1)operator(:) ident(TMenuItem)operator(;)
    ident(UniKeyDemoMI)operator(:) ident(TMenuItem)operator(;)
    ident(Path1)operator(:) ident(TMenuItem)operator(;)
    ident(RegisterPlugIns1)operator(:) ident(TMenuItem)operator(;)
    ident(UniPluginOD)operator(:) ident(TOpenDialog)operator(;)
    ident(SwapLM_CUB)operator(:) ident(TButton)operator(;)
    ident(PathE)operator(:) ident(TEdit)operator(;)
    ident(ShowLoadreport1)operator(:) ident(TMenuItem)operator(;)
    ident(KillPluto1)operator(:) ident(TMenuItem)operator(;)
    ident(ShowPlatform1)operator(:) ident(TMenuItem)operator(;)
    ident(MSConfig1)operator(:) ident(TMenuItem)operator(;)
    ident(TimetoRelaxMI)operator(:) ident(TMenuItem)operator(;)
    ident(N10)operator(:) ident(TMenuItem)operator(;)

    keyword(procedure) ident(FormCreate)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(FormKeyDown)operator(()ident(Sender)operator(:) ident(TObject)operator(;) keyword(var) ident(Key)operator(:) ident(Word)operator(;) ident(Shift)operator(:) ident(TShiftState)operator(\))operator(;)
    keyword(procedure) ident(FormClose)operator(()ident(Sender)operator(:) ident(TObject)operator(;) keyword(var) ident(Action)operator(:) ident(TCloseAction)operator(\))operator(;)
    keyword(procedure) ident(InsertPathClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)

    keyword(procedure) ident(StatusBarResize)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(StatusBarDblClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(StatusBarUpdate)operator(;)
    keyword(procedure) ident(CopyPathClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)

    keyword(procedure) ident(SetStatus)operator(;)
    keyword(procedure) ident(GotoKey)operator(()ident(Key)operator(:) keyword(string)operator(\))operator(;)
    keyword(procedure) ident(FindCLSID)operator(;)
    keyword(procedure) ident(GotoCLSID)operator(;)
    keyword(procedure) ident(UserGotoKey)operator(;)
    keyword(procedure) ident(ShowRealPathMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(PathEKeyDown)operator(()ident(Sender)operator(:) ident(TObject)operator(;) keyword(var) ident(Key)operator(:) ident(Word)operator(;) ident(Shift)operator(:) ident(TShiftState)operator(\))operator(;)
    keyword(procedure) ident(PathEChange)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(PathEExit)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)

    keyword(procedure) ident(AppActivate)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(PathEKeyUp)operator(()ident(Sender)operator(:) ident(TObject)operator(;) keyword(var) ident(Key)operator(:) ident(Word)operator(;) ident(Shift)operator(:) ident(TShiftState)operator(\))operator(;)
    keyword(procedure) ident(ActivateIt)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(FormActivate)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(FormDeactivate)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(Pluto1Click)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(RegEdit1Click)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(Free1Click)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(BigVal1Click)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(SplashScreen1Click)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(HistoryClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(Credits1Click)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)

    keyword(function) ident(Greeting)operator(()ident(Name)operator(:) keyword(string) operator(=) ident(NoPreBlinkHint)operator(\))operator(:) keyword(string)operator(;)
    keyword(procedure) ident(PrefMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(EditBoolStrMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(FormCloseQuery)operator(()ident(Sender)operator(:) ident(TObject)operator(;) keyword(var) ident(CanClose)operator(:) ident(Boolean)operator(\))operator(;)
    keyword(procedure) ident(SisyTerminate)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(OnSisyChange)operator(()ident(Sender)operator(:) ident(TSisyThread)operator(;) ident(Change)operator(:) ident(TSisyChange)operator(\))operator(;)
    keyword(procedure) ident(OnSisyValuePlus)operator(()ident(Sender)operator(:) ident(TSisyThread)operator(;) ident(Change)operator(:) ident(TSisyChange)operator(\))operator(;)
    keyword(procedure) ident(OnSisyValueMinus)operator(()ident(Sender)operator(:) ident(TSisyThread)operator(;) ident(Change)operator(:) ident(TSisyChange)operator(\))operator(;)
    keyword(procedure) ident(OnSisyContextChange)operator(()ident(Sender)operator(:) ident(TSisyThread)operator(;) ident(Change)operator(:) ident(TSisyChange)operator(\))operator(;)

    keyword(procedure) ident(Plutoini1Click)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(RegEdit2Click)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(SysEdit1Click)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(NotePad1Click)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(WordPad1Click)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(OpenWinDir1Click)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(OpenProgramFolder1Click)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(ExitPluto1Click)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(Find1Click)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(FormPaint)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)

    keyword(procedure) ident(Load)operator(;)
    keyword(procedure) ident(StatusBarDrawPanel)operator(()ident(StatusBar)operator(:) ident(TStatusBar)operator(;)
      ident(Panel)operator(:) ident(TStatusPanel)operator(;) keyword(const) ident(Rect)operator(:) ident(TRect)operator(\))operator(;)
    keyword(procedure) ident(PathEKeyPress)operator(()ident(Sender)operator(:) ident(TObject)operator(;) keyword(var) ident(Key)operator(:) ident(Char)operator(\))operator(;)
    keyword(procedure) ident(HintBlinkTTimer)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(FindCLSID1Click)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(GotoCLSID1Click)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(CommandLineParameters1Click)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(WebLinkMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(DeleteTempFolder1Click)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(CurrentDir1Click)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(RepairPluto155bBug1Click)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(BackupRegistryscanreg1Click)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(SisyStarted)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(StopHintBlinking)operator(;)
    keyword(procedure) ident(Username1Click)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(SupportMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(ToDoMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(MailLinkMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(IjustwantCONTACT1Click)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(ExternalHexEditMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(AnotherPluto1Click)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(Path1Click)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(RegisterPlugIns1Click)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(FormResize)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(SwapLM_CUBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(ShowLoadreport1Click)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(KillPluto1Click)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(ShowPlatform1Click)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(MSConfig1Click)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(TimetoRelaxMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
  directive(private)
    ident(DoAutoComplete)operator(:) ident(Boolean)operator(;)
    ident(MainWinLoaded)operator(:) ident(Boolean)operator(;)
    ident(DontSavePrefs)operator(:) ident(Boolean)operator(;)
    ident(PreBlinkHint)operator(:) keyword(string)operator(;)
  keyword(end)operator(;)

keyword(var)
  ident(MainWin)operator(:) ident(TMainWin)operator(;)

  ident(StatusBar)operator(:) ident(TStatusBar)operator(;)
  ident(MainReg)operator(:) ident(TXRegistry)operator(;)

  ident(SpyThread)operator(:) ident(TRegSpyThread)operator(;)
  ident(Sisys)operator(:) ident(TList)operator(;)

keyword(function) ident(TempDir)operator(:) keyword(string)operator(;)
keyword(function) ident(PlutoUniPath)operator(:) keyword(string)operator(;)
keyword(function) ident(PlutoIniFileName)operator(:) keyword(string)operator(;)

keyword(function) ident(PathOfNode)operator(()ident(Node)operator(:) ident(TTreeNode)operator(\))operator(:) keyword(string)operator(;)
keyword(function) ident(CurKey)operator(()ident(AllowedShortcutTypes)operator(:) ident(TUniHostTypes) operator(=) operator([)operator(])operator(\))operator(:) ident(TRegPath)operator(;)

keyword(procedure) ident(ArrangePlutoStyle)operator(;)
keyword(procedure) ident(ArrangeRegEdStyle)operator(;)
keyword(procedure) ident(ArrangeFreeStyle)operator(;)
keyword(procedure) ident(ArrangeBigValStyle)operator(;)

keyword(procedure) ident(ActivateThis)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(procedure) ident(DeActivateThis)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)

keyword(procedure) ident(SwapFonts)operator(()ident(Sender)operator(:) ident(TWinControl)operator(\))operator(;)

keyword(procedure) ident(AddHint)operator(()keyword(const) ident(Hint)operator(:) keyword(string)operator(;) ident(Blinking)operator(:) ident(Boolean) operator(=) ident(False)operator(\))operator(;)
keyword(procedure) ident(AddToLastHint)operator(()ident(Appendix)operator(:) keyword(string)operator(\))operator(;)
keyword(procedure) ident(ChangeLastHint)operator(()ident(NewHint)operator(:) keyword(string)operator(\))operator(;)

keyword(implementation)

keyword(uses)
  comment(//Forms)
  ident(FindWinU)operator(,) ident(valuesU)operator(,) ident(TreeU)operator(,) ident(WorkU)operator(,) ident(splash)operator(,) ident(PrefU)operator(,)
  comment(//Units)
  ident(Clock)operator(,) ident(Start)operator(,) ident(keybrd)operator(,) ident(CompEx)operator(,) ident(Colors)operator(,) ident(FindAllThread)operator(,)
  ident(PrefTools)operator(;)

preprocessor({$R *.DFM})

keyword(var)
  ident(SavedPlutoIniFileName)operator(:) keyword(string) operator(=) string<delimiter(')delimiter(')>operator(;)

keyword(procedure) ident(AddHint)operator(()keyword(const) ident(Hint)operator(:) keyword(string)operator(;) ident(Blinking)operator(:) ident(Boolean) operator(=) ident(False)operator(\))operator(;)
keyword(begin)
  keyword(if) ident(Assigned)operator(()ident(WorkWin)operator(\)) keyword(then)
    ident(WorkWin)operator(.)ident(AddAHint)operator(()ident(Hint)operator(\))operator(;)

  keyword(with) ident(MainWin) keyword(do) keyword(begin)
    ident(StopHintBlinking)operator(;)

    keyword(if) ident(Blinking) keyword(then) keyword(begin)
      ident(HintBlinkT)operator(.)ident(Enabled) operator(:=) ident(True)operator(;)
      keyword(if) ident(PreBlinkHint) operator(=) ident(NoPreBlinkHint) keyword(then)
        ident(PreBlinkHint) operator(:=) ident(StatusBar)operator(.)ident(Panels)operator([)integer(0)operator(])operator(.)ident(Text)operator(;)
      ident(StatusBar)operator(.)ident(Panels)operator([)integer(0)operator(])operator(.)ident(Text) operator(:=) ident(WorkWin)operator(.)ident(LastHint)operator(;)
    keyword(end)operator(;)
  keyword(end)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(AddToLastHint)operator(()ident(Appendix)operator(:) keyword(string)operator(\))operator(;)
keyword(begin)
  keyword(with) ident(WorkWin)operator(.)ident(HintLB)operator(.)ident(Items) keyword(do) keyword(begin)
    keyword(if) ident(Count) operator(=) integer(0) keyword(then)
      ident(Exit)operator(;)

    ident(Strings)operator([)ident(Count)operator(-)integer(1)operator(]) operator(:=) ident(Strings)operator([)ident(Count)operator(-)integer(1)operator(]) operator(+) ident(Appendix)operator(;)
  keyword(end)operator(;)
  ident(Application)operator(.)ident(ProcessMessages)operator(;)
comment(//  Sleep(1000\);)
keyword(end)operator(;)

keyword(procedure) ident(ChangeLastHint)operator(()ident(NewHint)operator(:) keyword(string)operator(\))operator(;)
keyword(begin)
  keyword(with) ident(WorkWin)operator(.)ident(HintLB)operator(.)ident(Items) keyword(do) keyword(begin)
    keyword(if) ident(Count) operator(=) integer(0) keyword(then)
      ident(Exit)operator(;)

    ident(Strings)operator([)ident(Count)operator(-)integer(1)operator(]) operator(:=) ident(NewHint)operator(;)
  keyword(end)operator(;)
  ident(Application)operator(.)ident(ProcessMessages)operator(;)
comment(//  Sleep(1000\);)
keyword(end)operator(;)

keyword(function) ident(CurKey)operator(()ident(AllowedShortcutTypes)operator(:) ident(TUniHostTypes) operator(=) operator([)operator(])operator(\))operator(:) ident(TRegPath)operator(;)
keyword(var)
  ident(s)operator(:) keyword(string)operator(;)
  ident(Item)operator(:) ident(TListItem)operator(;)
keyword(begin)
  keyword(if) ident(Assigned)operator(()ident(RegTV)operator(.)ident(Selected)operator(\)) keyword(then) keyword(begin)
    ident(s) operator(:=) ident(PathOfNode)operator(()ident(RegTV)operator(.)ident(Selected)operator(\))operator(;)
    keyword(if) ident(AllowedShortcutTypes) operator(<>) operator([)operator(]) keyword(then)
      ident(s) operator(:=) ident(TraceKey)operator(()ident(s)operator(,) ident(AllowedShortcutTypes)operator(\))operator(;)
    ident(Result)operator(.)ident(Root) operator(:=) ident(ExRegRoot)operator(()ident(s)operator(\))operator(;)
    ident(Result)operator(.)ident(Key) operator(:=) ident(ExRegKey)operator(()ident(s)operator(\))operator(;)

    ident(Item) operator(:=) ident(ValueList)operator(.)ident(ItemFocused)operator(;)
    keyword(if) ident(Assigned)operator(()ident(Item)operator(\)) keyword(then)
      ident(Result)operator(.)ident(Value) operator(:=) ident(RealValueName)operator(()ident(Item)operator(\))operator(;)
    ident(Result)operator(.)ident(ValueSet) operator(:=) ident(Assigned)operator(()ident(Item)operator(\))operator(;)
  keyword(end)operator(;)
keyword(end)operator(;)

keyword(function) ident(PathOfNode)operator(()ident(Node)operator(:) ident(TTreeNode)operator(\))operator(:) keyword(string)operator(;)
keyword(begin)
  ident(Result) operator(:=) string<delimiter(')delimiter(')>operator(;)

  keyword(if) keyword(not) ident(Assigned)operator(()ident(Node)operator(\)) keyword(then)
    ident(Exit)operator(;)

  keyword(if) ident(Assigned)operator(()ident(Node)operator(.)ident(Parent)operator(\)) keyword(then)
    ident(Result) operator(:=) ident(LWPSlash)operator(()ident(PathOfNode)operator(()ident(Node)operator(.)ident(Parent)operator(\))operator(\)) operator(+) ident(Node)operator(.)ident(Text)
  keyword(else)
    ident(Result) operator(:=) ident(Node)operator(.)ident(Text)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TMainWin)operator(.)ident(AppActivate)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(var)
  ident(ActForm)operator(:) ident(TCustomForm)operator(;)

  keyword(procedure) ident(TryShow)operator(()ident(Win)operator(:) ident(TCustomForm)operator(\))operator(;)
  keyword(begin)
    keyword(if) ident(Assigned)operator(()ident(Win)operator(\)) keyword(and) ident(Win)operator(.)ident(Visible) keyword(then)
      ident(Win)operator(.)ident(Show)operator(;)
  keyword(end)operator(;)

keyword(begin)
  ident(ActForm) operator(:=) ident(Screen)operator(.)ident(ActiveCustomForm)operator(;) comment(//LastActiveForm;)
  ident(TryShow)operator(()ident(ValuesWin)operator(\))operator(;)
  ident(TryShow)operator(()ident(WorkWin)operator(\))operator(;)
  ident(TryShow)operator(()ident(TreeWin)operator(\))operator(;)
  ident(TryShow)operator(()ident(FindWin)operator(\))operator(;)
  ident(TryShow)operator(()ident(SplashWin)operator(\))operator(;)
  ident(TryShow)operator(()ident(MainWin)operator(\))operator(;)
  ident(TryShow)operator(()ident(ActForm)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TMainWin)operator(.)ident(FormCreate)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)

  keyword(procedure) ident(InitHKEYString)operator(()keyword(var) ident(H)operator(:) ident(THKEYString)operator(;) keyword(const) ident(Long)operator(,) ident(Short)operator(:) keyword(string)operator(;)
    ident(Handle)operator(:) ident(Integer) operator(=) integer(0)operator(;) ident(IsDefault)operator(:) ident(Boolean) operator(=) ident(False)operator(\))operator(;)
  keyword(begin)
    ident(H)operator(.)ident(Long) operator(:=) ident(Long)operator(;)
    ident(H)operator(.)ident(Short) operator(:=) ident(Short)operator(;)
    ident(H)operator(.)ident(Handle) operator(:=) ident(Handle)operator(;)
    ident(H)operator(.)ident(IsDefault) operator(:=) ident(IsDefault)operator(;)
  keyword(end)operator(;)

keyword(begin)
preprocessor({$IFDEF UNIKEY})
preprocessor({$IFDEF CYCFS})
  ident(RegisterUniClass)operator(()string<delimiter(')content(Y:\\programme\\unikey\\cyc_fs.uni)delimiter(')>operator(\))operator(;)
preprocessor({$ENDIF})
preprocessor({$ENDIF})

  ident(Application)operator(.)ident(OnActivate) operator(:=) ident(AppActivate)operator(;)
  ident(PlutoMain)operator(.)ident(StatusBar) operator(:=) ident(StatusBar)operator(;)

  comment(//Creating)
  ident(MainReg) operator(:=) ident(TXRegistry)operator(.)ident(Create)operator(;)

  comment(//Initialize)
  ident(Caption) operator(:=) string<delimiter(')content(cYcnus.Pluto )delimiter(')> operator(+) ident(Version)operator(;)
  ident(PreBlinkHint) operator(:=) ident(NoPreBlinkHint)operator(;)

  ident(SetLength)operator(()ident(HKEYStrings)operator(,) ident(Length)operator(()ident(HKEYStrings)operator(\)) operator(+) integer(2)operator(\))operator(;)
  ident(InitHKEYString)operator(()ident(HKEYStrings)operator([)ident(LastDefaultHKEYString) operator(+) integer(1)operator(])operator(,)
    string<delimiter(')content(HKEY_WindowsMachine)delimiter(')>operator(,) string<delimiter(')content(HKWM)delimiter(')>operator(\))operator(;)

  ident(InitHKEYString)operator(()ident(HKEYStrings)operator([)ident(LastDefaultHKEYString) operator(+) integer(2)operator(])operator(,)
    string<delimiter(')content(HKEY_WindowsUser)delimiter(')>operator(,) string<delimiter(')content(HKWU)delimiter(')>operator(\))operator(;)

  ident(Application)operator(.)ident(HintHidePause) operator(:=) operator(-)integer(1)operator(;) comment(//that's approximately 136 years :D)

  ident(StatusBar)operator(.)ident(Panels)operator([)integer(0)operator(])operator(.)ident(Width) operator(:=) ident(Screen)operator(.)ident(Width) keyword(div) integer(6)operator(;)

  ident(MurphyMI)operator(.)ident(Visible) operator(:=) ident(MurphyMode)operator(;)

preprocessor({$IFDEF UNIKEY})
  ident(UniPluginOD)operator(.)ident(InitialDir) operator(:=) ident(MyDir)operator(;)
preprocessor({$ELSE})
  ident(UniKeyDemoMI)operator(.)ident(Visible) operator(:=) ident(False)operator(;)
preprocessor({$ENDIF})
keyword(end)operator(;)

keyword(procedure) ident(TMainWin)operator(.)ident(GotoKey)operator(()ident(Key)operator(:) keyword(string)operator(\))operator(;)
keyword(var)
  ident(Full)operator(:) ident(TregPath)operator(;)
  ident(Node)operator(:) ident(TTreeNode)operator(;)
  ident(keySA)operator(:) ident(TStrA)operator(;)
  ident(i)operator(:) ident(integer)operator(;)

  keyword(function) ident(NodeOfRoot)operator(()ident(Root)operator(:) keyword(string)operator(\))operator(:) ident(TTreeNode)operator(;)
  keyword(var)
    ident(i)operator(:) ident(Integer)operator(;)
  keyword(begin)
    ident(Result) operator(:=) keyword(nil)operator(;)
    ident(Root) operator(:=) ident(LongHKEY)operator(()ident(Root)operator(\))operator(;)

    keyword(for) ident(i) operator(:=) integer(0) keyword(to) ident(RootNodes)operator(.)ident(Count)operator(-)integer(1) keyword(do)
      keyword(if) ident(SameText)operator(()ident(TTreeNode)operator(()ident(RootNodes)operator([)ident(i)operator(])operator(\))operator(.)ident(Text)operator(,) ident(Root)operator(\)) keyword(then) keyword(begin)
        ident(Result) operator(:=) ident(TTreeNode)operator(()ident(RootNodes)operator([)ident(i)operator(])operator(\))operator(;)
      ident(Break)operator(;) keyword(end)operator(;)

    keyword(for) ident(i) operator(:=) integer(0) keyword(to) ident(High)operator(()ident(Shortcuts)operator(\)) keyword(do)
      keyword(if) ident(SameText)operator(()ident(Shortcuts)operator([)ident(i)operator(])operator(.)ident(Alias)operator(,) ident(Full)operator(.)ident(Root)operator(\)) keyword(then) keyword(begin)
        ident(Result) operator(:=) ident(Shortcuts)operator([)ident(i)operator(])operator(.)ident(Node)operator(;)
      ident(Break)operator(;) keyword(end)operator(;)
  keyword(end)operator(;)

keyword(begin)
  ident(keySA) operator(:=) keyword(nil)operator(;)

  comment(//Get FullPath of the Key)
  ident(Key) operator(:=) ident(TrimLeft)operator(()ident(Key)operator(\))operator(;)
  keyword(if) ident(TextAtPos)operator(()ident(Key)operator(,) integer(1)operator(,) string<delimiter(')content(Reg:)delimiter(')>operator(\)) keyword(then)
    ident(Key) operator(:=) ident(TrimLeft)operator(()ident(FromChar)operator(()ident(Key)operator(,) char<delimiter(')content(:)delimiter(')>operator(\))operator(\))operator(;)
  ident(Key) operator(:=) ident(UnQuote)operator(()ident(Key)operator(\))operator(;)

  ident(Full) operator(:=) ident(RegPathOfStr)operator(()ident(Key)operator(\))operator(;)
  keyword(if) ident(Trim)operator(()ident(Full)operator(.)ident(Root)operator(\)) operator(=) string<delimiter(')delimiter(')> keyword(then) keyword(begin)
    ident(AddHint)operator(()string<delimiter(')content(Empty Path.)delimiter(')>operator(,) ident(True)operator(\))operator(;)
  ident(Exit)operator(;) keyword(end)operator(;)

  comment(//Get Root Node)
  ident(Node) operator(:=) ident(NodeOfRoot)operator(()ident(Full)operator(.)ident(Root)operator(\))operator(;)
  keyword(if) keyword(not) ident(Assigned)operator(()ident(Node)operator(\)) keyword(then) keyword(begin)
    keyword(if) keyword(not) ident(PathE)operator(.)ident(Focused) keyword(then)
      ident(AddHint)operator(()string<delimiter(')content(Key not found:)delimiter(')> operator(+) ident(EOL) operator(+) ident(Key)operator(\))operator(;)
  ident(Exit)operator(;) keyword(end)operator(;)

  comment(//Create an array of all SubKeys)
  ident(keySA) operator(:=) ident(Split)operator(()ident(Full)operator(.)ident(Key)operator(,) char<delimiter(')content(\\)delimiter(')>operator(\))operator(;)

  comment(//Avoid SmartExpand)
  ident(TreeWin)operator(.)ident(DoSmartExpand) operator(:=) ident(False)operator(;) keyword(begin)

    comment(//Open all SubKeys)
    keyword(for) ident(i) operator(:=) integer(0) keyword(to) ident(High)operator(()ident(keySA)operator(\)) keyword(do) keyword(begin)
      comment(//Open the Node if neccessary)
      keyword(if) keyword(not) ident(Node)operator(.)ident(Expanded) keyword(then) keyword(begin)
        keyword(if) keyword(not) ident(Node)operator(.)ident(Selected) keyword(then)
          ident(RegTV)operator(.)ident(Selected) operator(:=) ident(Node)operator(;)
        ident(CheckNode)operator(()ident(Node)operator(,) ident(False)operator(\))operator(;)
        comment(//TreeWin.RegTVChange(Self, Node\);)
        ident(Node)operator(.)ident(Expand)operator(()ident(False)operator(\))operator(;)
      keyword(end)operator(;)

      comment(//Get Node of the SubKey)
      ident(Node) operator(:=) ident(FindNodeText)operator(()ident(Node)operator(,) ident(keySA)operator([)ident(i)operator(])operator(\))operator(;)
      keyword(if) keyword(not) ident(Assigned)operator(()ident(Node)operator(\)) keyword(then) keyword(begin)
        keyword(if) keyword(not) ident(PathE)operator(.)ident(Focused) keyword(then)
          ident(AddHint)operator(()string<delimiter(')content(Goto Key not found: )delimiter(')> operator(+) ident(KeySA)operator([)ident(i)operator(])operator(,) ident(True)operator(\))operator(;)
        ident(Exit)operator(;)
      keyword(end)operator(;)
    keyword(end)operator(;)

  keyword(end)operator(;) ident(TreeWin)operator(.)ident(DoSmartExpand) operator(:=) ident(True)operator(;)

  keyword(if) ident(Node) operator(<>) ident(RegTV)operator(.)ident(Selected) keyword(then) keyword(begin)
    ident(RegTV)operator(.)ident(Selected) operator(:=) ident(Node)operator(;)
    ident(TreeWin)operator(.)ident(RegTVChange)operator(()ident(Self)operator(,) ident(Node)operator(\))operator(;)
  keyword(end)operator(;)

  ident(Application)operator(.)ident(ProcessMessages)operator(;)

  keyword(if) ident(Full)operator(.)ident(ValueSet) keyword(then)
    ident(ValuesWin)operator(.)ident(FocusItem)operator(()ident(Full)operator(.)ident(Value)operator(,) keyword(not) operator(()ident(Active) keyword(and) ident(PathE)operator(.)ident(Focused)operator(\))operator(\))
  keyword(else) keyword(begin)
    keyword(if) keyword(not) operator(()ident(Active) keyword(and) ident(PathE)operator(.)ident(Focused)operator(\)) keyword(then) comment(//if not user is currently editing the path)
      ident(TreeWin)operator(.)ident(FocusControl)operator(()ident(RegTV)operator(\))operator(;)

    keyword(if) ident(LastChar)operator(()ident(Full)operator(.)ident(Key)operator(\)) operator(=) char<delimiter(')content(\\)delimiter(')> keyword(then)
      ident(Node)operator(.)ident(Expand)operator(()ident(False)operator(\))operator(;)
  keyword(end)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(SwapFonts)operator(()ident(Sender)operator(:) ident(TWinControl)operator(\))operator(;)

  keyword(function) ident(OtherFont)operator(()ident(N)operator(:) ident(TFontName)operator(\))operator(:) ident(TFontName)operator(;)
  keyword(begin)
    ident(Result) operator(:=) string<delimiter(')content(Courier New)delimiter(')>operator(;)
    keyword(if) ident(N) operator(=) ident(Result) keyword(then)
      ident(Result) operator(:=) string<delimiter(')content(Arial)delimiter(')>operator(;)
  keyword(end)operator(;)

keyword(begin)
  ident(TEdit)operator(()ident(Sender)operator(\))operator(.)ident(Font)operator(.)ident(Name) operator(:=) ident(OtherFont)operator(()ident(TTreeView)operator(()ident(Sender)operator(\))operator(.)ident(Font)operator(.)ident(Name)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(ActivateThis)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  keyword(if) keyword(not) ident(Assigned)operator(()ident(Sender)operator(\)) keyword(then)
    ident(Exit)operator(;)

  keyword(with) ident(TEdit)operator(()ident(Sender)operator(\)) keyword(do) keyword(begin)
    keyword(if) ident(Tag) operator(<>) ident(EditControlFlag) keyword(then)
      ident(Exit)operator(;)
    ident(Color) operator(:=) ident(RealColor)operator(()ident(clVeryBrightBlue)operator(\))operator(;)
    ident(Font)operator(.)ident(Color) operator(:=) ident(clBlack)operator(;)
  keyword(end)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(DeActivateThis)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  keyword(if) keyword(not) ident(Assigned)operator(()ident(Sender)operator(\)) keyword(then)
    ident(Exit)operator(;)

  keyword(with) ident(TEdit)operator(()ident(Sender)operator(\)) keyword(do) keyword(begin)
    keyword(if) ident(Tag) operator(<>) ident(EditControlFlag) keyword(then)
      ident(Exit)operator(;)
    ident(Color) operator(:=) ident(RealColor)operator(()ident(clDarkGray)operator(\))operator(;)
    ident(Font)operator(.)ident(Color) operator(:=) ident(clWhite)operator(;)
  keyword(end)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(CreateSisyThreads)operator(;)
keyword(var)
  ident(i)operator(:) ident(Integer)operator(;)

  keyword(procedure) ident(CreateSisyThread)operator(()keyword(const) ident(Name)operator(:) keyword(string)operator(;) keyword(const) ident(KeyName)operator(:) keyword(string)operator(;)
    ident(Key)operator(:) ident(HKEY)operator(;) ident(StatusLabel)operator(:) ident(TLabel)operator(\))operator(;)
  keyword(var)
    ident(Sisy)operator(:) ident(TSisyThread)operator(;)
  keyword(begin)
    ident(ChangeLastHint)operator(()string<delimiter(')content(Creating )delimiter(')> operator(+) ident(Name) operator(+) string<delimiter(')content(...)delimiter(')>operator(\))operator(;)
    ident(Sisy) operator(:=) ident(TSisyThread)operator(.)ident(CreateIt)operator(()ident(Name)operator(,) ident(KeyName)operator(,) ident(Key)operator(,) ident(StatusLabel)operator(,) ident(PlutoKey)operator(\))operator(;)
    ident(Sisy)operator(.)ident(OnChange) operator(:=) ident(MainWin)operator(.)ident(OnSisyChange)operator(;)
comment(//    Sisy.OnSpecialChange[cValuePlus] := MainWin.OnSisyValuePlus;)
comment(//    Sisy.OnSpecialChange[cValueMinus] := MainWin.OnSisyValueMinus;)
comment(//    Sisy.OnSpecialChange[cContextChange] := MainWin.OnSisyContextChange;)
    ident(Sisys)operator(.)ident(Add)operator(()ident(Sisy)operator(\))operator(;)
    ident(AddToLastHint)operator(()string<delimiter(')content(OK)delimiter(')>operator(\))operator(;)
  keyword(end)operator(;)

keyword(begin)
  ident(AddHint)operator(()string<delimiter(')content(Starting Sisyphus )delimiter(')> operator(+) ident(SisyVersion) operator(+) string<delimiter(')content(...)delimiter(')>operator(\))operator(;)

  ident(Sisys) operator(:=) ident(TSisyList)operator(.)ident(Create)operator(;)
  ident(WorkWin)operator(.)ident(LoadSisyFilter)operator(;)

  ident(CreateSisyThread)operator(()string<delimiter(')content(Sisy HKU)delimiter(')>operator(,) string<delimiter(')content(HKU)delimiter(')>operator(,) ident(HKU)operator(,) ident(WorkWin)operator(.)ident(SisyHKUL)operator(\))operator(;)
  ident(CreateSisyThread)operator(()string<delimiter(')content(Sisy HKLM)delimiter(')>operator(,) string<delimiter(')content(HKLM)delimiter(')>operator(,) ident(HKLM)operator(,) ident(WorkWin)operator(.)ident(SisyHKLML)operator(\))operator(;)

  ident(ChangeLastHint)operator(()string<delimiter(')content(Initializing Sisyphus...)delimiter(')>operator(\))operator(;)
  keyword(for) ident(i) operator(:=) integer(0) keyword(to) ident(Sisys)operator(.)ident(Count)operator(-)integer(1) keyword(do)
    keyword(with) ident(TSisyThread)operator(()ident(Sisys)operator([)ident(i)operator(])operator(\)) keyword(do) keyword(begin)
      keyword(if) ident(Name) operator(=) string<delimiter(')content(Sisy HKU)delimiter(')> keyword(then)
        keyword(with) ident(WorkWin)operator(.)ident(SisyHKUCB) keyword(do) keyword(begin)
          ident(Settings)operator(.)ident(KeyName) operator(:=) ident(StrOfUni)operator(()ident(Uni)operator(.)ident(Path)operator(\))operator(;)
          ident(Settings)operator(.)ident(Load)operator(;)
          ident(Settings)operator(.)ident(AutoSave) operator(:=) ident(True)operator(;)
          keyword(if) ident(Checked) keyword(then)
            ident(Resume)operator(;)
        keyword(end)
      keyword(else) keyword(if) ident(Name) operator(=) string<delimiter(')content(Sisy HKLM)delimiter(')> keyword(then)
        keyword(with) ident(WorkWin)operator(.)ident(SisyHKLMCB) keyword(do) keyword(begin)
          ident(Settings)operator(.)ident(KeyName) operator(:=) ident(StrOfUni)operator(()ident(Uni)operator(.)ident(Path)operator(\))operator(;)
          ident(Settings)operator(.)ident(Load)operator(;)
          ident(Settings)operator(.)ident(AutoSave) operator(:=) ident(True)operator(;)
          keyword(if) ident(Checked) keyword(then)
            ident(Resume)operator(;)
        keyword(end)operator(;)
      ident(OnStarted) operator(:=) ident(MainWin)operator(.)ident(SisyStarted)operator(;)
    keyword(end)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(CreateSpyThread)operator(;)
keyword(begin)
  ident(AddHint)operator(()string<delimiter(')content(Creating SpyThread...)delimiter(')>operator(\))operator(;)
  ident(SpyThread) operator(:=) ident(TRegSpyThread)operator(.)ident(CreateIt)operator(()ident(tpLowest)operator(\))operator(;)
  ident(WorkWin)operator(.)ident(SpyDelayIEChange)operator(()ident(MainWin)operator(\))operator(;)
  ident(WorkWin)operator(.)ident(SpyTestLClick)operator(()ident(MainWin)operator(\))operator(;)
  ident(AddToLastHint)operator(()string<delimiter(')content(OK)delimiter(')>operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(ShowParams)operator(;)
keyword(var)
  ident(SL)operator(:) ident(TStringList)operator(;)
keyword(begin)
  keyword(if) ident(Switch)operator(()string<delimiter(')content(params?)delimiter(')>operator(\)) keyword(then) keyword(begin)
    ident(SL) operator(:=) ident(TStringList)operator(.)ident(Create)operator(;)
    ident(GetParams)operator(()ident(SL)operator(\))operator(;)
    ident(ShowMessage)operator(()ident(SL)operator(.)ident(Text)operator(\))operator(;)
    ident(SL)operator(.)ident(Free)operator(;)
  keyword(end)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(GotoParamKey)operator(;)
keyword(var)
  ident(s)operator(:) keyword(string)operator(;)
keyword(begin)
  ident(s) operator(:=) ident(ParamStr)operator(()integer(1)operator(\))operator(;)
  keyword(if) operator(()ident(s) operator(<>) string<delimiter(')delimiter(')>operator(\))
   keyword(and) operator(()ident(s)operator([)integer(1)operator(]) operator(<>) char<delimiter(')content(-)delimiter(')>operator(\)) keyword(then) keyword(begin) comment(//Params have '-' as prefix)
    ident(AddHint)operator(()string<delimiter(')content(Goto Key )delimiter(')> operator(+) ident(Quote)operator(()ident(s)operator(\)) operator(+) string<delimiter(')content(...)delimiter(')>operator(\))operator(;)
    ident(MainWin)operator(.)ident(GotoKey)operator(()ident(s)operator(\))operator(;)
  keyword(end) keyword(else) keyword(begin)
    ident(RegTV)operator(.)ident(Selected) operator(:=) ident(RegTV)operator(.)ident(TopItem)operator(;)
  keyword(end)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TMainWin)operator(.)ident(Load)operator(;)
keyword(begin)
  ident(TreeWin)operator(.)ident(Load)operator(;)
  ident(WorkWin)operator(.)ident(LoadBoolStr)operator(;)

  ident(CreateSpyThread)operator(;)
  ident(CreateSisyThreads)operator(;)

  ident(AddHint)operator(()ident(Greeting)operator(,) ident(True)operator(\))operator(;)

  ident(ShowParams)operator(;)
  ident(GotoParamKey)operator(;)

  keyword(if) ident(Assigned)operator(()ident(SplashWin)operator(\)) keyword(and) ident(SplashWin)operator(.)ident(Visible) keyword(then)
    ident(SplashWin)operator(.)ident(SetFocus)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TMainWin)operator(.)ident(CopyPathClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(Clipboard)operator(.)ident(AsText) operator(:=) ident(StatusBar)operator(.)ident(Panels)operator([)integer(1)operator(])operator(.)ident(Text)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TMainWin)operator(.)ident(FormKeyDown)operator(()ident(Sender)operator(:) ident(TObject)operator(;) keyword(var) ident(Key)operator(:) ident(Word)operator(;)
  ident(Shift)operator(:) ident(TShiftState)operator(\))operator(;)
keyword(begin)
  keyword(if) operator(()ident(ssAlt) keyword(in) ident(shift)operator(\)) keyword(and) operator(()ident(Key) operator(=) ident(VK_F4)operator(\)) keyword(then) keyword(begin)
    ident(Key) operator(:=) integer(0)operator(;)
    ident(Close)operator(;)
  ident(Exit)operator(;) keyword(end)operator(;)

  keyword(if) ident(ssCtrl) keyword(in) ident(Shift) keyword(then)
    keyword(case) ident(Key) keyword(of)
      ident(Byte)operator(()char<delimiter(')content(W)delimiter(')>operator(\))operator(:) keyword(begin)
          ident(MainPC)operator(.)ident(ActivePage) operator(:=) ident(WorkWin)operator(.)ident(WorkPage)operator(;)
          keyword(if) ident(Assigned)operator(()ident(MainPC)operator(.)ident(ActivePage)operator(\)) keyword(then)
            ident(WorkWin)operator(.)ident(FocusControl)operator(()ident(TWinControl)operator(()ident(ShowPC)operator(.)ident(ActivePage)operator(.)ident(Tag)operator(\))operator(\))
        keyword(end)operator(;)

      ident(Byte)operator(()char<delimiter(')content(H)delimiter(')>operator(\))operator(:) ident(MainPC)operator(.)ident(ActivePage) operator(:=) ident(WorkWin)operator(.)ident(HintPage)operator(;)

      ident(Byte)operator(()char<delimiter(')content(L)delimiter(')>operator(\))operator(:) ident(MainWin)operator(.)ident(FindCLSID)operator(;)
    keyword(end)operator(;)

  keyword(if) ident(Shift) operator(=) operator([)operator(]) keyword(then)
    keyword(case) ident(Key) keyword(of)
      ident(VK_F6)operator(:) ident(TreeWin)operator(.)ident(FocusControl)operator(()ident(RegTV)operator(\))operator(;)

      ident(VK_F7)operator(:) keyword(with) ident(ValueList) keyword(do) keyword(begin)
          ident(ValuesWin)operator(.)ident(FocusControl)operator(()ident(ValueList)operator(\))operator(;)
          keyword(if) operator(()ident(Selected) operator(=) keyword(nil)operator(\)) keyword(and) operator(()ident(Items)operator(.)ident(Count) operator(>) integer(0)operator(\)) keyword(then) keyword(begin)
            ident(Selected) operator(:=) ident(Items)operator([)integer(0)operator(])operator(;)
            ident(ItemFocused) operator(:=) ident(Selected)operator(;)
          keyword(end)operator(;)
        keyword(end)operator(;)

      ident(VK_F8)operator(:) ident(WorkWin)operator(.)ident(FocusControl)operator(()ident(MainPC)operator(\))operator(;)
    keyword(end)operator(;)

  keyword(if) ident(Key) operator(=) ident(VK_SCROLL) keyword(then) keyword(begin)
    ident(TreeWin)operator(.)ident(CheckRegTVHotTrack)operator(;)
    ident(ValuesWin)operator(.)ident(CheckValueListHotTrack)operator(;)
  keyword(end)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TMainWin)operator(.)ident(StatusBarResize)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  keyword(with) ident(StatusBar) keyword(do)
    ident(Panels)operator([)integer(1)operator(])operator(.)ident(Width) operator(:=)
      ident(Width) operator(-) operator(()ident(Panels)operator([)integer(0)operator(])operator(.)ident(Width) operator(+) ident(Panels)operator([)integer(2)operator(])operator(.)ident(Width) operator(+) ident(Panels)operator([)integer(3)operator(])operator(.)ident(Width)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TMainWin)operator(.)ident(StatusBarDblClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(ShowRealPathMIClick)operator(()ident(Sender)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TMainWin)operator(.)ident(InsertPathClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(GotoKey)operator(()ident(Clipboard)operator(.)ident(AsText)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TMainWin)operator(.)ident(SetStatus)operator(;)
keyword(begin)
  ident(StatusBarUpdate)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TMainWin)operator(.)ident(StatusBarUpdate)operator(;)
keyword(var)
  ident(Inf)operator(:) ident(TRegKeyInfo)operator(;)
keyword(begin)
  ident(OpenCurKey)operator(;)
  ident(MainReg)operator(.)ident(GetKeyInfo)operator(()ident(Inf)operator(\))operator(;)
  ident(MainReg)operator(.)ident(CloseKey)operator(;)

  ident(StatusBar)operator(.)ident(Panels)operator([)integer(2)operator(])operator(.)ident(Text) operator(:=) ident(StrNumerus)operator(()ident(Inf)operator(.)ident(NumSubKeys)operator(,) string<delimiter(')content(key)delimiter(')>operator(,) string<delimiter(')content(keys)delimiter(')>operator(,) string<delimiter(')content(no)delimiter(')>operator(\))operator(;)
  ident(StatusBar)operator(.)ident(Panels)operator([)integer(3)operator(])operator(.)ident(Text) operator(:=) ident(StrNumerus)operator(()ident(Inf)operator(.)ident(NumValues)operator(,) string<delimiter(')content(value)delimiter(')>operator(,) string<delimiter(')content(values)delimiter(')>operator(,) string<delimiter(')content(no)delimiter(')>operator(\))operator(;)

  keyword(if) ident(ShowRealPathMI)operator(.)ident(Checked) keyword(then)
    ident(StatusBar)operator(.)ident(Panels)operator([)integer(1)operator(])operator(.)ident(Text) operator(:=) ident(StrOfRegPath)operator(()ident(CurKey)operator(()ident(uhShortcuts)operator(\))operator(\))
  keyword(else)
    ident(StatusBar)operator(.)ident(Panels)operator([)integer(1)operator(])operator(.)ident(Text) operator(:=) ident(StrOfRegPath)operator(()ident(CurKey)operator(()ident(uhNonSystemShortcuts)operator(\))operator(\))operator(;)

  keyword(if) keyword(not) ident(PathE)operator(.)ident(Focused) keyword(then)
    ident(PathE)operator(.)ident(Text) operator(:=) ident(StrOfRegPath)operator(()ident(CurKey)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TMainWin)operator(.)ident(ShowRealPathMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(ShowRealPathMI)operator(.)ident(Checked) operator(:=) keyword(not) ident(ShowRealPathMI)operator(.)ident(Checked)operator(;)
  ident(StatusBarUpdate)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TMainWin)operator(.)ident(PathEKeyDown)operator(()ident(Sender)operator(:) ident(TObject)operator(;) keyword(var) ident(Key)operator(:) ident(Word)operator(;)
  ident(Shift)operator(:) ident(TShiftState)operator(\))operator(;)
keyword(var)
  ident(Pos)operator(:) ident(Integer)operator(;)
  ident(s)operator(:) keyword(string)operator(;)
keyword(begin)
  ident(DoAutoComplete) operator(:=) keyword(not) operator(()ident(Key) keyword(in) operator([)ident(VK_DELETE)operator(,) ident(VK_BACK)operator(,) ident(VK_ESCAPE)operator(])operator(\))operator(;)
  
  keyword(case) ident(Key) keyword(of)
    ident(VK_BACK)operator(:)
      keyword(begin)
        ident(s) operator(:=) ident(PathE)operator(.)ident(Text)operator(;)
        ident(Pos) operator(:=) ident(PathE)operator(.)ident(SelStart)operator(;)

        keyword(if) ident(ssCtrl) keyword(in) ident(Shift) keyword(then)
          keyword(repeat)
            ident(Dec)operator(()ident(Pos)operator(\))operator(;)
          keyword(until) operator(()ident(Pos) operator(<) integer(1)operator(\)) keyword(or) operator(()ident(s)operator([)ident(Pos)operator(]) operator(=) char<delimiter(')content(\\)delimiter(')>operator(\))
        keyword(else) keyword(if) ident(PathE)operator(.)ident(SelLength) operator(=) integer(0) keyword(then)
          ident(Exit)operator(;)

        ident(PathE)operator(.)ident(Text) operator(:=) ident(Copy)operator(()ident(s)operator(,) integer(1)operator(,) ident(Pos)operator(\))operator(;)
        ident(PathE)operator(.)ident(SelStart) operator(:=) ident(Length)operator(()ident(s)operator(\))operator(;)
        ident(Key) operator(:=) integer(0)operator(;)
        ident(UserGotoKey)operator(;)
      keyword(end)operator(;)

    ident(VK_ESCAPE)operator(:)
      keyword(with) ident(PathE) keyword(do) keyword(begin)
        keyword(if) ident(SelLength) operator(=) integer(0) keyword(then)
          ident(Exit)operator(;)
        ident(Text) operator(:=) ident(StrOfRegPath)operator(()ident(CurKey)operator(\))operator(;)
        ident(SelStart) operator(:=) ident(Length)operator(()ident(Text)operator(\))operator(;)
      keyword(end)operator(;)

    ident(VK_RETURN)operator(:) keyword(begin)
      keyword(if) ident(CurKey)operator(.)ident(ValueSet) keyword(then)
        ident(ValuesWin)operator(.)ident(ValueListDblClick)operator(()ident(Self)operator(\))operator(;)
      ident(Key) operator(:=) integer(0)operator(;)
    keyword(end)operator(;)
    
    ident(VK_RIGHT)operator(:) keyword(begin)
        keyword(if) keyword(not) operator(()ident(ssCtrl) keyword(in) ident(Shift)operator(\)) keyword(then)
          ident(Exit)operator(;)

        ident(Key) operator(:=) integer(0)operator(;)

        ident(s) operator(:=) ident(PathE)operator(.)ident(Text)operator(;)
        ident(Pos) operator(:=) ident(PathE)operator(.)ident(SelStart) operator(+) integer(1)operator(;)
        keyword(repeat)
          ident(Inc)operator(()ident(Pos)operator(\))operator(;)
        keyword(until) operator(()ident(Pos) operator(>) ident(Length)operator(()ident(s)operator(\))operator(\)) keyword(or) operator(()ident(s)operator([)ident(Pos)operator(]) operator(=) char<delimiter(')content(\\)delimiter(')>operator(\))operator(;)

        ident(PathE)operator(.)ident(SelStart) operator(:=) ident(Pos) operator(-) integer(1)operator(;)
      keyword(end)operator(;)

    ident(VK_LEFT)operator(:) keyword(begin)
        keyword(if) keyword(not) operator(()ident(ssCtrl) keyword(in) ident(Shift)operator(\)) keyword(then)
          ident(Exit)operator(;)

        keyword(with) ident(PathE) keyword(do) keyword(begin)
          ident(Key) operator(:=) integer(0)operator(;)

          ident(s) operator(:=) ident(Text)operator(;)
          ident(Pos) operator(:=) ident(SelStart)operator(;)
          keyword(repeat)
            ident(Dec)operator(()ident(Pos)operator(\))operator(;)
          keyword(until) operator(()ident(Pos) operator(<) integer(1)operator(\)) keyword(or) operator(()ident(s)operator([)ident(Pos)operator(]) operator(=) char<delimiter(')content(\\)delimiter(')>operator(\))operator(;)

          keyword(if) ident(Pos) operator(<) integer(1) keyword(then)
            ident(Pos) operator(:=) integer(1)operator(;)

          ident(SelStart) operator(:=) ident(Pos) operator(-) integer(1)operator(;)
        keyword(end)operator(;)
      keyword(end)operator(;)
  keyword(end)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TMainWin)operator(.)ident(UserGotoKey)operator(;)
keyword(begin)
  ident(GotoKey)operator(()ident(PathE)operator(.)ident(Text)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TMainWin)operator(.)ident(PathEChange)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(var)
  ident(Prefix)operator(,) ident(Suffix)operator(,) ident(Key)operator(,) ident(Path)operator(,) ident(Root)operator(:) keyword(string)operator(;)
  ident(i)operator(,) ident(p)operator(,) ident(Len)operator(:) ident(Integer)operator(;)
  ident(SL)operator(:) ident(TStringList)operator(;)
  ident(CompleteKind)operator(:) operator(()ident(ckRoots)operator(,) ident(ckKeys)operator(,) ident(ckValues)operator(\))operator(;)

  keyword(procedure) ident(GetRootNames)operator(()ident(Strings)operator(:) ident(TStrings)operator(\))operator(;)
  keyword(var)
    ident(Node)operator(:) ident(TTreeNode)operator(;)
  keyword(begin)
    ident(SL)operator(.)ident(Clear)operator(;)
    ident(Node) operator(:=) ident(RegTV)operator(.)ident(Items)operator(.)ident(GetFirstNode)operator(;)
    keyword(while) ident(Assigned)operator(()ident(Node)operator(\)) keyword(do) keyword(begin)
      ident(SL)operator(.)ident(Add)operator(()ident(Node)operator(.)ident(Text)operator(\))operator(;)
      ident(Node) operator(:=) ident(Node)operator(.)ident(GetNextSibling)operator(;)
    keyword(end)operator(;)
  keyword(end)operator(;)

keyword(begin)
  keyword(if) keyword(not) ident(DoAutoComplete) keyword(then)
    ident(Exit)operator(;)

  ident(Key) operator(:=) ident(PathE)operator(.)ident(Text)operator(;)
  ident(Root) operator(:=) ident(TraceKey)operator(()ident(ExRegRoot)operator(()ident(Key)operator(\))operator(\))operator(;)

  keyword(if) keyword(not) ident(CharIn)operator(()ident(Key)operator(,) char<delimiter(')content(\\)delimiter(')>operator(\)) keyword(then)
    ident(CompleteKind) operator(:=) ident(ckRoots)
  keyword(else) keyword(if) ident(ExRegValueSet)operator(()ident(Key)operator(\)) keyword(then)
    ident(CompleteKind) operator(:=) ident(ckValues)
  keyword(else)
    ident(CompleteKind) operator(:=) ident(ckKeys)operator(;)

  keyword(case) ident(CompleteKind) keyword(of)
  ident(ckRoots)operator(:) keyword(begin)
    ident(Prefix) operator(:=) string<delimiter(')delimiter(')>operator(;)
    ident(Suffix) operator(:=) ident(Key)operator(;)
  keyword(end)operator(;)

  ident(ckKeys)operator(:) keyword(begin)
    ident(Path) operator(:=) ident(ExRegFullKey)operator(()ident(Key)operator(\))operator(;)
    ident(Prefix) operator(:=) ident(UntilLastChar)operator(()ident(Path)operator(,) char<delimiter(')content(\\)delimiter(')>operator(\))operator(;)
    ident(Suffix) operator(:=) ident(FromLastChar)operator(()ident(Path)operator(,) char<delimiter(')content(\\)delimiter(')>operator(\))operator(;)
  keyword(end)operator(;)

  ident(ckValues)operator(:) keyword(begin)
    ident(p) operator(:=) ident(Pos)operator(()string<delimiter(')content(\\\\)delimiter(')>operator(,) ident(Key)operator(\))operator(;)
    ident(Prefix) operator(:=) ident(Copy)operator(()ident(Key)operator(,) integer(1)operator(,) ident(p) operator(-) integer(1)operator(\))operator(;)
    ident(Suffix) operator(:=) ident(Copy)operator(()ident(Key)operator(,) ident(p) operator(+) integer(2)operator(,) ident(Length)operator(()ident(Key)operator(\)) operator(-) ident(p) operator(-) integer(1)operator(\))operator(;)
  keyword(end)operator(;)

  keyword(else)
  keyword(end)operator(;)

  ident(SL) operator(:=) ident(TStringList)operator(.)ident(Create)operator(;)

  keyword(if) ident(CompleteKind) keyword(in) operator([)ident(ckKeys)operator(,) ident(ckValues)operator(]) keyword(then)
    keyword(with) ident(MainReg) keyword(do) keyword(begin)
      ident(RootKey) operator(:=) ident(HKEYOfStr)operator(()ident(ExRegRoot)operator(()ident(Root)operator(\))operator(\))operator(;)
      ident(OpenKey)operator(()ident(ExRegKey)operator(()ident(Root)operator(\))operator(\))operator(;)
      ident(OpenKey)operator(()ident(ExRegKey)operator(()ident(Prefix)operator(\))operator(\))operator(;)

      keyword(if) ident(CompleteKind) operator(=) ident(ckValues) keyword(then) keyword(begin)
        keyword(if) keyword(not) ident(HasValues) keyword(then)
          ident(Exit)operator(;)
        ident(GetValueNames)operator(()ident(SL)operator(\))operator(;)
      keyword(end) keyword(else) keyword(if) ident(CompleteKind) operator(=) ident(ckKeys) keyword(then) keyword(begin)
        keyword(if) keyword(not) ident(HasSubKeys) keyword(then)
          ident(Exit)operator(;)
        ident(GetKeyNames)operator(()ident(SL)operator(\))operator(;)
      keyword(end)operator(;)

      ident(CloseKey)operator(;)
    keyword(end)
  keyword(else) keyword(begin)
    ident(GetRootNames)operator(()ident(SL)operator(\))operator(;)
  keyword(end)operator(;)

  keyword(if) ident(Suffix) operator(=) string<delimiter(')delimiter(')> keyword(then) keyword(begin)
    keyword(if) operator(()ident(SL)operator(.)ident(Count) operator(>) integer(0)operator(\)) keyword(and) keyword(not) ident(StrIn)operator(()ident(SL)operator(,) string<delimiter(')delimiter(')>operator(\)) keyword(then)
      ident(Suffix) operator(:=) ident(SL)operator([)integer(0)operator(])operator(;)
  keyword(end) keyword(else) keyword(begin)
    keyword(for) ident(i) operator(:=) integer(0) keyword(to) ident(SL)operator(.)ident(Count)operator(-)integer(1) keyword(do)
      keyword(if) ident(TextAtBegin)operator(()ident(SL)operator([)ident(i)operator(])operator(,) ident(Suffix)operator(\)) keyword(then) keyword(begin)
        ident(Suffix) operator(:=) ident(SL)operator([)ident(i)operator(])operator(;)
      ident(Break)operator(;) keyword(end)operator(;)
  keyword(end)operator(;)

  ident(Len) operator(:=) ident(Length)operator(()ident(PathE)operator(.)ident(Text)operator(\))operator(;)

  keyword(if) ident(CompleteKind) operator(=) ident(ckValues) keyword(then)
    ident(Prefix) operator(:=) ident(Prefix) operator(+) string<delimiter(')content(\\\\)delimiter(')>
  keyword(else) keyword(if) ident(CompleteKind) operator(=) ident(ckKeys) keyword(then)
    ident(Prefix) operator(:=) ident(Prefix) operator(+) char<delimiter(')content(\\)delimiter(')>operator(;)

  keyword(with) ident(PathE) keyword(do) keyword(begin)
    ident(DoAutoComplete) operator(:=) ident(False)operator(;)  comment(//Avoid Recursion)
      ident(Text) operator(:=) ident(Prefix) operator(+) ident(Suffix)operator(;)
    ident(DoAutoComplete) operator(:=) ident(True)operator(;)

    ident(SelStart) operator(:=) ident(Len)operator(;)
    ident(SelLength) operator(:=) ident(Length)operator(()ident(Text)operator(\)) operator(-) ident(Len)operator(;)
  keyword(end)operator(;)

  ident(SL)operator(.)ident(Free)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TMainWin)operator(.)ident(PathEExit)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(DeActivateThis)operator(()ident(PathE)operator(\))operator(;)
  ident(DoAutoComplete) operator(:=) ident(False)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(ArrangePlutoStyle)operator(;)
keyword(begin)
  keyword(with) ident(ValuesWin) keyword(do) keyword(begin)
    ident(Height) operator(:=) ident(MainWin)operator(.)ident(ClientHeight) keyword(div) integer(3)operator(;)
    ident(Top) operator(:=) ident(MainWin)operator(.)ident(ClientHeight) operator(-) ident(Height) operator(-) integer(43)operator(;)
    ident(Left) operator(:=) integer(0)operator(;)
    ident(Width) operator(:=) ident(MainWin)operator(.)ident(ClientWidth) operator(-) integer(4)operator(;)
    comment(//Align := alBottom;)
  keyword(end)operator(;)

  keyword(with) ident(WorkWin) keyword(do) keyword(begin)
    ident(Top) operator(:=) integer(0)operator(;)
    ident(Width) operator(:=) ident(Max)operator(()ident(MainWin)operator(.)ident(ClientWidth) keyword(div) integer(3)operator(,) ident(WorkWin)operator(.)ident(Constraints)operator(.)ident(MinWidth)operator(\))operator(;)
    ident(Left) operator(:=) ident(ValuesWin)operator(.)ident(Width) operator(-) ident(Width)operator(;)
    ident(Height) operator(:=) ident(MainWin)operator(.)ident(ClientHeight) operator(-) integer(43) operator(-) ident(ValuesWin)operator(.)ident(Height)operator(;)
    comment(//Align := alRight;)
  keyword(end)operator(;)

  keyword(with) ident(TreeWin) keyword(do) keyword(begin)
    ident(Top) operator(:=) integer(0)operator(;)
    ident(Height) operator(:=) ident(WorkWin)operator(.)ident(Height)operator(;)
    ident(Left) operator(:=) integer(0)operator(;)
    ident(Width) operator(:=) ident(ValuesWin)operator(.)ident(Width) operator(-) ident(WorkWin)operator(.)ident(Width)operator(;)
  keyword(end)operator(;)
     
  comment({TreeWin.Align := alNone;
  WorkWin.Align := alNone;
  ValuesWin.Align := alNone;})
keyword(end)operator(;)

keyword(procedure) ident(ArrangeFreeStyle)operator(;)
keyword(const)
  ident(Space) operator(=) integer(10)operator(;)
keyword(begin)
  keyword(with) ident(ValuesWin) keyword(do) keyword(begin)
    ident(Height) operator(:=) ident(Screen)operator(.)ident(Height) keyword(div) integer(3)operator(;)
    ident(Align) operator(:=) ident(alBottom)operator(;)
  keyword(end)operator(;)

  keyword(with) ident(WorkWin) keyword(do) keyword(begin)
    ident(Width) operator(:=) ident(Max)operator(()ident(Screen)operator(.)ident(WorkAreaWidth) keyword(div) integer(3)operator(,) ident(Constraints)operator(.)ident(MinWidth) operator(+) integer(2) operator(*) ident(Space)operator(\))operator(;)
    ident(Align) operator(:=) ident(alRight)operator(;)
  keyword(end)operator(;)

  keyword(with) ident(TreeWin) keyword(do) keyword(begin)
    ident(Align) operator(:=) ident(alClient)operator(;)
  keyword(end)operator(;)

  ident(TreeWin)operator(.)ident(Align) operator(:=) ident(alNone)operator(;)
  ident(WorkWin)operator(.)ident(Align) operator(:=) ident(alNone)operator(;)
  ident(ValuesWin)operator(.)ident(Align) operator(:=) ident(alNone)operator(;)

  keyword(with) ident(ValuesWin) keyword(do) keyword(begin)
    ident(Height) operator(:=) ident(Height) operator(-) integer(2) operator(*) ident(Space)operator(;)
    ident(Width) operator(:=) ident(Width) operator(-) integer(2) operator(*) ident(Space)operator(;)
    ident(Top) operator(:=) ident(Top) operator(+) ident(Space)operator(;)
    ident(Left) operator(:=) ident(Left) operator(+) ident(Space)operator(;)
  keyword(end)operator(;)

  keyword(with) ident(TreeWin) keyword(do) keyword(begin)
    ident(Height) operator(:=) ident(Height) operator(-) integer(1) operator(*) ident(Space)operator(;)
    ident(Width) operator(:=) ident(Width) operator(-) integer(1) operator(*) ident(Space)operator(;)
    ident(Top) operator(:=) ident(Top) operator(+) ident(Space)operator(;)
    ident(Left) operator(:=) ident(Left) operator(+) ident(Space)operator(;)
  keyword(end)operator(;)

  keyword(with) ident(WorkWin) keyword(do) keyword(begin)
    ident(Height) operator(:=) ident(Height) operator(-) integer(1) operator(*) ident(Space)operator(;)
    ident(Width) operator(:=) ident(Width) operator(-) integer(2) operator(*) ident(Space)operator(;)
    ident(Top) operator(:=) ident(Top) operator(+) ident(Space)operator(;)
    ident(Left) operator(:=) ident(Left) operator(+) ident(Space)operator(;)
  keyword(end)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(ArrangeBigValStyle)operator(;)
keyword(var)
  ident(MinHeight)operator(:) ident(Integer)operator(;)
keyword(begin)
  ident(MinHeight) operator(:=) ident(WorkWin)operator(.)ident(Constraints)operator(.)ident(MinHeight) operator(+)
               ident(MainWin)operator(.)ident(Constraints)operator(.)ident(MinHeight)operator(;)

  keyword(with) ident(ValuesWin) keyword(do) keyword(begin)
    ident(Height) operator(:=) ident(Screen)operator(.)ident(WorkAreaHeight) operator(-) ident(Max)operator(()ident(Screen)operator(.)ident(Height) keyword(div) integer(3)operator(,) ident(MinHeight)operator(\))operator(;)
    ident(Align) operator(:=) ident(alBottom)operator(;)
  keyword(end)operator(;)

  keyword(with) ident(WorkWin) keyword(do) keyword(begin)
    ident(Width) operator(:=) ident(Screen)operator(.)ident(WorkAreaWidth) keyword(div) integer(3)operator(;)
    ident(Align) operator(:=) ident(alRight)operator(;)
  keyword(end)operator(;)

  keyword(with) ident(TreeWin) keyword(do) keyword(begin)
    ident(Align) operator(:=) ident(alClient)operator(;)
  keyword(end)operator(;)

  ident(TreeWin)operator(.)ident(Align) operator(:=) ident(alNone)operator(;)
  ident(WorkWin)operator(.)ident(Align) operator(:=) ident(alNone)operator(;)
  ident(ValuesWin)operator(.)ident(Align) operator(:=) ident(alNone)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(ArrangeRegEdStyle)operator(;)
keyword(begin)
  keyword(with) ident(TreeWin) keyword(do) keyword(begin)
    ident(Width) operator(:=) ident(Screen)operator(.)ident(WorkAreaWidth) keyword(div) integer(4)operator(;)
    ident(Align) operator(:=) ident(alLeft)operator(;)
  keyword(end)operator(;)

  keyword(with) ident(ValuesWin) keyword(do) keyword(begin)
    ident(Align) operator(:=) ident(alClient)operator(;)
    ident(Align) operator(:=) ident(alNone)operator(;)
    ident(Height) operator(:=) ident(Height) operator(-) ident(WorkWin)operator(.)ident(Constraints)operator(.)ident(MinHeight)operator(;)
  keyword(end)operator(;)

  keyword(with) ident(WorkWin) keyword(do) keyword(begin)
    ident(Top) operator(:=) ident(ValuesWin)operator(.)ident(Top) operator(+) ident(ValuesWin)operator(.)ident(Height)operator(;)
    ident(Left) operator(:=) ident(ValuesWin)operator(.)ident(Left)operator(;)
    ident(Height) operator(:=) ident(Constraints)operator(.)ident(MinHeight)operator(;)
    ident(Width) operator(:=) ident(ValuesWin)operator(.)ident(Width)operator(;)
  keyword(end)operator(;)

  ident(TreeWin)operator(.)ident(Align) operator(:=) ident(alNone)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TMainWin)operator(.)ident(PathEKeyUp)operator(()ident(Sender)operator(:) ident(TObject)operator(;) keyword(var) ident(Key)operator(:) ident(Word)operator(;)
  ident(Shift)operator(:) ident(TShiftState)operator(\))operator(;)
keyword(begin)
  keyword(if) keyword(not) operator(()ident(Key) keyword(in) operator([)ident(VK_DELETE)operator(,) ident(VK_BACK)operator(,) ident(VK_ESCAPE)operator(])operator(\)) keyword(then)
    ident(UserGotoKey)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TMainWin)operator(.)ident(ActivateIt)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(ActivateThis)operator(()ident(Sender)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TMainWin)operator(.)ident(FormActivate)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  keyword(if) ident(Assigned)operator(()ident(ActiveControl)operator(\)) keyword(and) operator(()ident(ActiveControl)operator(.)ident(Tag) operator(=) ident(EditControlFlag)operator(\)) keyword(then)
    ident(ActivateThis)operator(()ident(ActiveControl)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TMainWin)operator(.)ident(FormDeactivate)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  keyword(if) ident(Assigned)operator(()ident(ActiveControl)operator(\)) keyword(and) operator(()ident(ActiveControl)operator(.)ident(Tag) operator(=) ident(EditControlFlag)operator(\)) keyword(then)
    ident(DeActivateThis)operator(()ident(ActiveControl)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TMainWin)operator(.)ident(Pluto1Click)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(ArrangePlutoStyle)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TMainWin)operator(.)ident(RegEdit1Click)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(ArrangeRegEdStyle)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TMainWin)operator(.)ident(Free1Click)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(ArrangeFreeStyle)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TMainWin)operator(.)ident(BigVal1Click)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(ArrangeBigValStyle)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TMainWin)operator(.)ident(SplashScreen1Click)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(SplashWin)operator(.)ident(Show)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TMainWin)operator(.)ident(HistoryClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(NotePad)operator(()ident(PlutoDir) operator(+) string<delimiter(')content(version.txt)delimiter(')>operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TMainWin)operator(.)ident(WebLinkMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(Browse)operator(()string<delimiter(')content(http://)delimiter(')> operator(+) ident(TMenuItem)operator(()ident(Sender)operator(\))operator(.)ident(Caption)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TMainWin)operator(.)ident(SupportMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(Browse)operator(()string<delimiter(')content(http://cYcnus.de/php/phpbb/viewforum.php?f=1)delimiter(')>operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TMainWin)operator(.)ident(Credits1Click)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(var)
  ident(FileName)operator(:) keyword(string)operator(;)
keyword(begin)
  ident(FileName) operator(:=) ident(PlutoDir) operator(+) string<delimiter(')content(credits deluxe.htm)delimiter(')>operator(;)
  keyword(if) ident(FileExists)operator(()ident(FileName)operator(\)) keyword(then)
    ident(ExecFile)operator(()ident(FileName)operator(\))
  keyword(else) keyword(begin)
    ident(FileName) operator(:=) ident(PlutoDir) operator(+) string<delimiter(')content(credits.htm)delimiter(')>operator(;)
    keyword(if) ident(FileExists)operator(()ident(FileName)operator(\)) keyword(then)
      ident(ExecFile)operator(()ident(FileName)operator(\))operator(;)
  keyword(end)operator(;)
keyword(end)operator(;)

keyword(function) ident(GetCLSIDFromClipboard)operator(:) keyword(string)operator(;)
keyword(var)
  ident(CLSID)operator(:) keyword(string)operator(;)
keyword(begin)
  ident(CLSID) operator(:=) ident(BetweenChars)operator(()ident(Clipboard)operator(.)ident(AsText)operator(,) char<delimiter(')content({)delimiter(')>operator(,) char<delimiter(')content(})delimiter(')>operator(,) ident(True)operator(\))operator(;)
  keyword(if) ident(CLSID) operator(=) string<delimiter(')delimiter(')> keyword(then) keyword(begin)
    ident(Result) operator(:=) ident(Clipboard)operator(.)ident(AsText)operator(;)
    ident(InputQuery)operator(()string<delimiter(')content(No CLSID in Clipboard.)delimiter(')>operator(,)
      string<delimiter(')content(Use following format:)delimiter(')> operator(+) ident(EOL) operator(+)
      string<delimiter(')content({00000000-0000-0000-0000-000000000000})delimiter(')>operator(,) ident(Result)operator(\))operator(;)
  ident(Exit)operator(;) keyword(end) keyword(else)
    ident(Result) operator(:=) ident(CLSID)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TMainWin)operator(.)ident(FindCLSID)operator(;)
keyword(var)
  ident(CLSID)operator(,) ident(Desc)operator(:) keyword(string)operator(;)
keyword(begin)
  ident(CLSID) operator(:=) ident(GetCLSIDFromClipboard)operator(;)
  ident(Desc) operator(:=) ident(RegNameOfCLSID)operator(()ident(CLSID)operator(\))operator(;)
  keyword(if) ident(Desc) operator(<>) string<delimiter(')delimiter(')> keyword(then)
    ident(InputQuery)operator(()string<delimiter(')content(Your CLSID is...)delimiter(')>operator(,) ident(CLSID)operator(,) ident(Desc)operator(\))
  keyword(else)
    ident(ShowMessage)operator(()string<delimiter(')content(CLSID not found: )delimiter(')> operator(+) ident(CLSID) operator(+) char<delimiter(')content(.)delimiter(')>operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TMainWin)operator(.)ident(GotoCLSID)operator(;)
keyword(var)
  ident(CLSID)operator(,) ident(Desc)operator(:) keyword(string)operator(;)
keyword(begin)
  ident(CLSID) operator(:=) ident(GetCLSIDFromClipboard)operator(;)
  ident(Desc) operator(:=) ident(RegNameOfCLSID)operator(()ident(CLSID)operator(\))operator(;)
  keyword(if) ident(Desc) operator(<>) string<delimiter(')delimiter(')> keyword(then) keyword(begin)
    ident(GotoKey)operator(()string<delimiter(')content(HKCR\\CLSID\\)delimiter(')> operator(+) ident(CLSID)operator(\))operator(;)
    ident(TreeWin)operator(.)ident(FocusControl)operator(()ident(RegTV)operator(\))operator(;)
  keyword(end) keyword(else)
    ident(ShowMessage)operator(()string<delimiter(')content(CLSID not found: )delimiter(')> operator(+) ident(CLSID) operator(+) char<delimiter(')content(.)delimiter(')>operator(\))operator(;)
keyword(end)operator(;)

keyword(function) ident(TMainWin)operator(.)ident(Greeting)operator(()ident(Name)operator(:) keyword(string) operator(=) ident(NoPreBlinkHint)operator(\))operator(:) keyword(string)operator(;)
keyword(const)
  ident(Alias)operator(:) keyword(array)operator([)integer(0)operator(..)integer(4)operator(]) keyword(of) keyword(string) operator(=)
    operator(()string<delimiter(')content(Licenser)delimiter(')>operator(,) string<delimiter(')content(Murphy)delimiter(')>operator(,) string<delimiter(')content(Sleeper)delimiter(')>operator(,) string<delimiter(')content(Leon)delimiter(')>operator(,)  string<delimiter(')content(Great Admin)delimiter(')>operator(\))operator(;)
  ident(RealNames)operator(:) keyword(array)operator([)integer(0)operator(..)integer(4)operator(]) keyword(of) keyword(string) operator(=)
    operator(()string<delimiter(')content(Heinz)delimiter(')>operator(,)    string<delimiter(')content(Korny)delimiter(')>operator(,)  string<delimiter(')content(Sven)delimiter(')>operator(,)    string<delimiter(')content(Simon)delimiter(')>operator(,) string<delimiter(')content(Korny ;-\))delimiter(')>operator(\))operator(;)
keyword(var)
  ident(i)operator(:) ident(Integer)operator(;)
  ident(s)operator(:) keyword(string)operator(;)
keyword(begin)
  keyword(if) ident(Name) operator(=) ident(NoPreBlinkHint) keyword(then)
    ident(Name) operator(:=) ident(PrefWin)operator(.)ident(UserNameE)operator(.)ident(Text)operator(;)
    
  keyword(if) ident(Trim)operator(()ident(Name)operator(\)) operator(=) string<delimiter(')delimiter(')> keyword(then)
    ident(s) operator(:=) string<delimiter(')content(No name?)delimiter(')>
  keyword(else) keyword(if) ident(SameText)operator(()ident(Trim)operator(()ident(Name)operator(\))operator(,) string<delimiter(')content(Pluto-User)delimiter(')>operator(\)) keyword(then)
    ident(s) operator(:=) string<delimiter(')content(Hi!)delimiter(')>
  keyword(else)
    keyword(for) ident(i) operator(:=) integer(0) keyword(to) integer(4) keyword(do)
      keyword(if) ident(SameText)operator(()ident(Name)operator(,) ident(Alias)operator([)ident(i)operator(])operator(\)) keyword(then) keyword(begin)
        ident(s) operator(:=) string<delimiter(')content(Hi )delimiter(')> operator(+) ident(RealNames)operator([)ident(i)operator(]) operator(+) string<delimiter(')content(! This is a cYcnus.EasterEgg)delimiter(')>operator(;)
      ident(Break)operator(;) keyword(end)
  keyword(else) keyword(if) ident(Length)operator(()ident(Name)operator(\)) operator(>) integer(20) keyword(then)
    ident(s) operator(:=) string<delimiter(')content(Hi )delimiter(')> operator(+) ident(Name) operator(+)
      string<delimiter(')content(. What a name.)delimiter(')>
  keyword(else)
    ident(s) operator(:=) string<delimiter(')content(Hi )delimiter(')> operator(+) ident(Name) operator(+) char<delimiter(')content(!)delimiter(')>operator(;)

  ident(Result) operator(:=) ident(s)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TMainWin)operator(.)ident(PrefMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(PrefWin)operator(.)ident(Show)operator(;)
keyword(end)operator(;)

keyword(function) ident(TempDir)operator(:) keyword(string)operator(;)
keyword(begin)
  ident(Result) operator(:=) ident(PlutoDir) operator(+) string<delimiter(')content(temp\\)delimiter(')>operator(;)
  keyword(if) keyword(not) operator(()ident(DirectoryExists)operator(()ident(Result)operator(\)) keyword(or) ident(CreateDir)operator(()ident(Result)operator(\))operator(\)) keyword(then)
    ident(Result) operator(:=) ident(PlutoDir)operator(;)
keyword(end)operator(;)

keyword(function) ident(PlutoIniFileName)operator(:) keyword(string)operator(;)

  keyword(function) ident(Default)operator(:) keyword(string)operator(;)
  keyword(begin)
    ident(Result) operator(:=) ident(MyDir) operator(+) string<delimiter(')content(pluto.ini)delimiter(')>operator(;)
  keyword(end)operator(;)

keyword(begin)
  ident(Result) operator(:=) ident(SavedPlutoIniFileName)operator(;)
  keyword(if) ident(Result) operator(<>) string<delimiter(')delimiter(')> keyword(then)
    ident(Exit)operator(;)

comment(//  Result := Params.ReadString('ini', ''\);)

  keyword(if) ident(IsValidFileName)operator(()ident(Result)operator(\)) keyword(then)
    ident(Result) operator(:=) ident(PlutoDir) operator(+) ident(Result)
  keyword(else)
    ident(Result) operator(:=) ident(Default)operator(;)

  ident(SavedPlutoIniFileName) operator(:=) ident(Result)operator(;) comment(//Faster in future calls)
keyword(end)operator(;)

keyword(function) ident(PlutoUniPath)operator(:) keyword(string)operator(;)
keyword(begin)
  comment(//Result := 'Reg: HKCU\\Software\\Pluto\\';)
  ident(Result) operator(:=) string<delimiter(')content(Ini <)delimiter(')> operator(+) ident(PlutoIniFileName) operator(+) string<delimiter(')content(>:)delimiter(')>operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TMainWin)operator(.)ident(EditBoolStrMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(NotePad)operator(()ident(PlutoDir) operator(+) ident(BoolStrFileName)operator(\))operator(;)
  ident(ShowMessage)operator(()string<delimiter(')content(Click OK when you finished editing.)delimiter(')> operator(+) ident(EOL) operator(+)
              string<delimiter(')content((Pluto will reload the Boolean Strings.\))delimiter(')>operator(\))operator(;)
  ident(WorkWin)operator(.)ident(LoadBoolStr)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TMainWin)operator(.)ident(SisyStarted)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
comment({var
  NextSisyIndex: Integer;
  NextSisy: TSisyThread;          })
keyword(begin)
  comment({NextSisy := nil;

  with TSisyThread(Sender\) do begin
    //AddHint(Format('%s started after %0.1f seconds', [Name, SecsPerRound]\), True\);

    with Sisys do begin
      NextSisyIndex := IndexOf(Sender\) + 1;
      if NextSisyIndex < Count then
        NextSisy := Items[NextSisyIndex];
    end;

    if Assigned(NextSisy\) then
      with NextSisy do
        if not Started and Suspended then
          Resume;
  end; })
keyword(end)operator(;)

keyword(procedure) ident(TMainWin)operator(.)ident(SisyTerminate)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  keyword(if) ident(Assigned)operator(()ident(Sisys)operator(\)) keyword(then)
    ident(Sisys)operator(.)ident(Delete)operator(()ident(Sisys)operator(.)ident(IndexOf)operator(()ident(Sender)operator(\))operator(\))operator(;)
  ident(AddHint)operator(()string<delimiter(')content(Sisyphus )delimiter(')> operator(+) ident(Quote)operator(()ident(TSisyThread)operator(()ident(Sender)operator(\))operator(.)ident(Name)operator(\)) operator(+) string<delimiter(')content( destroyed.)delimiter(')>operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TMainWin)operator(.)ident(FormCloseQuery)operator(()ident(Sender)operator(:) ident(TObject)operator(;) keyword(var) ident(CanClose)operator(:) ident(Boolean)operator(\))operator(;)
keyword(var)
  ident(i)operator(:) ident(Integer)operator(;)

  keyword(procedure) ident(TerminateThread)operator(()ident(Thread)operator(:) ident(TThread)operator(;) ident(Name)operator(:) keyword(string)operator(\))operator(;)
  keyword(const)
    ident(ThreadTimeOut) operator(=) integer(3000)operator(;)
  keyword(begin)
    keyword(if) ident(Assigned)operator(()ident(Thread)operator(\)) keyword(then)
      keyword(with) ident(Thread) keyword(do) keyword(begin)
        ident(Priority) operator(:=) ident(tpNormal)operator(;)
        ident(Terminate)operator(;)
        keyword(while) ident(Suspended) keyword(do) ident(Resume)operator(;) comment(// ensure running)
        keyword(if) integer(0) operator(<>) ident(WaitForSingleObject)operator(()ident(Handle)operator(,) ident(ThreadTimeOut)operator(\)) keyword(then) keyword(begin)
          ident(ShowMessage)operator(()string<delimiter(')content(Timeout: Killing Thread: )delimiter(')> operator(+) ident(Name) operator(+) ident(EOL) operator(+)
            string<delimiter(')content(This is a critical error and may cause memory leaks and crashes.)delimiter(')> operator(+) ident(EOL) operator(+)
            string<delimiter(')content(We recommend to reboot your system before you continue.)delimiter(')>operator(\))operator(;)
          ident(Windows)operator(.)ident(TerminateThread)operator(()ident(Handle)operator(,) integer(0)operator(\))operator(;)
        keyword(end) keyword(else)
          ident(Thread)operator(.)ident(Free)operator(;)
      keyword(end)operator(;)
  keyword(end)operator(;)

keyword(begin)
  ident(CanClose) operator(:=) ident(False)operator(;)

  keyword(try)
    ident(AddHint)operator(()string<delimiter(')content(Stopping SisyphusThreads...)delimiter(')>operator(\))operator(;)
    keyword(if) ident(Assigned)operator(()ident(Sisys)operator(\)) keyword(then)
      keyword(for) ident(i) operator(:=) integer(0) keyword(to) ident(Sisys)operator(.)ident(Count)operator(-)integer(1) keyword(do)
        ident(TSisyThread)operator(()ident(Sisys)operator([)ident(i)operator(])operator(\))operator(.)ident(Suspend)operator(;)
    ident(AddToLastHint)operator(()string<delimiter(')content(OK)delimiter(')>operator(\))operator(;)

    ident(AddHint)operator(()string<delimiter(')content(Wait for SpyThread...)delimiter(')>operator(\))operator(;)
    ident(TerminateThread)operator(()ident(SpyThread)operator(,) string<delimiter(')content(SpyThread)delimiter(')>operator(\))operator(;)
    ident(AddToLastHint)operator(()string<delimiter(')content(OK)delimiter(')>operator(\))operator(;)

    ident(AddHint)operator(()string<delimiter(')content(Wait for SisyphusThreads...)delimiter(')>operator(\))operator(;)
    keyword(if) ident(Assigned)operator(()ident(Sisys)operator(\)) keyword(then)
      keyword(for) ident(i) operator(:=) integer(0) keyword(to) ident(Sisys)operator(.)ident(Count)operator(-)integer(1) keyword(do) keyword(begin)
        ident(ChangeLastHint)operator(()string<delimiter(')content(Wait for SisyphusThreads...)delimiter(')> operator(+) ident(TSisyThread)operator(()ident(Sisys)operator([)ident(i)operator(])operator(\))operator(.)ident(Name)operator(\))operator(;)
        ident(TerminateThread)operator(()ident(TSisyThread)operator(()ident(Sisys)operator([)ident(i)operator(])operator(\))operator(,) ident(TSisyThread)operator(()ident(Sisys)operator([)ident(i)operator(])operator(\))operator(.)ident(Name)operator(\))operator(;)
      keyword(end)operator(;)
    ident(ChangeLastHint)operator(()string<delimiter(')content(Wait for SisyphusThreads...OK)delimiter(')>operator(\))operator(;)
  keyword(except)
    keyword(with) ident(WorkWin)operator(.)ident(HintLB)operator(.)ident(Items) keyword(do)
      ident(ShowMessage)operator(()string<delimiter(')content(Error while trying to terminate threads.)delimiter(')> operator(+) ident(EOL) operator(+)
        string<delimiter(')content(Last Message:)delimiter(')> operator(+) ident(EOL) operator(+)
        ident(Strings)operator([)ident(Count) operator(-) integer(1)operator(])operator(\))operator(;)
    ident(CanClose) operator(:=) ident(True)operator(;)
  keyword(end)operator(;)

  ident(AddHint)operator(()string<delimiter(')content(Terminating successfull.)delimiter(')>operator(\))operator(;)
  ident(CanClose) operator(:=) ident(True)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TMainWin)operator(.)ident(FormClose)operator(()ident(Sender)operator(:) ident(TObject)operator(;) keyword(var) ident(Action)operator(:) ident(TCloseAction)operator(\))operator(;)

  keyword(procedure) ident(TryClose)operator(()ident(Win)operator(:) ident(TCustomForm)operator(\))operator(;)
  keyword(begin)
    keyword(if) ident(Assigned)operator(()ident(Win)operator(\)) keyword(and) ident(Win)operator(.)ident(Visible) keyword(then)
      ident(Win)operator(.)ident(Close)operator(;)
  keyword(end)operator(;)

keyword(begin)
  ident(MainReg)operator(.)ident(Free)operator(;)

  ident(Action) operator(:=) ident(caFree)operator(;)

  keyword(if) ident(DontSavePrefs) keyword(then)
    ident(Exit)operator(;)

  ident(AddHint)operator(()string<delimiter(')content(Saving settings...)delimiter(')>operator(\))operator(;)

  keyword(try)
    ident(TryClose)operator(()ident(WorkWin)operator(\))operator(;)
    ident(TryClose)operator(()ident(ValuesWin)operator(\))operator(;)
    ident(TryClose)operator(()ident(TreeWin)operator(\))operator(;)
    ident(TryClose)operator(()ident(FindWin)operator(\))operator(;)
    ident(TryClose)operator(()ident(SplashWin)operator(\))operator(;)
    ident(TryClose)operator(()ident(PrefWin)operator(\))operator(;)
  keyword(except)
    ident(DontSavePrefs) operator(:=) ident(True)operator(;) comment(//try again without pref saving)
  keyword(end)operator(;)

  keyword(with) ident(PlutoKey)operator(.)ident(GetKey)operator(()string<delimiter(')content(Window)delimiter(')>operator(\)) keyword(do)
    keyword(try)
      ident(WriteBool)operator(()string<delimiter(')content(Maximized)delimiter(')>operator(,) ident(WindowState) operator(=) ident(wsMaximized)operator(\))operator(;)
      keyword(if) ident(WindowState) operator(=) ident(wsNormal) keyword(then) keyword(begin)
        ident(WriteInteger)operator(()string<delimiter(')content(Left)delimiter(')>operator(,) ident(Left)operator(\))operator(;)
        ident(WriteInteger)operator(()string<delimiter(')content(Top)delimiter(')>operator(,) ident(Top)operator(\))operator(;)
        ident(WriteInteger)operator(()string<delimiter(')content(Width)delimiter(')>operator(,) ident(Width)operator(\))operator(;)
        ident(WriteInteger)operator(()string<delimiter(')content(Height)delimiter(')>operator(,) ident(Height)operator(\))operator(;)
      keyword(end)operator(;)
    keyword(finally)
      ident(Free)operator(;)
    keyword(end)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TMainWin)operator(.)ident(Plutoini1Click)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(NotePad)operator(()ident(PlutoIniFileName)operator(\))operator(;)
  ident(ShowMessage)operator(()string<delimiter(')content(Click OK when you finished editing.)delimiter(')> operator(+) ident(EOL) operator(+)
              string<delimiter(')content((Pluto will reload )delimiter(')> operator(+) ident(PlutoIniFileName) operator(+) char<delimiter(')content(\))delimiter(')>operator(\))operator(;)
  ident(PrefWin)operator(.)ident(PrefHost)operator(.)ident(Load)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TMainWin)operator(.)ident(RegEdit2Click)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(RegEdit)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TMainWin)operator(.)ident(SysEdit1Click)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(SysEdit)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TMainWin)operator(.)ident(NotePad1Click)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(NotePad)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TMainWin)operator(.)ident(WordPad1Click)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(WordPad)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TMainWin)operator(.)ident(OpenWinDir1Click)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(ExploreFolder)operator(()ident(WinDir)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TMainWin)operator(.)ident(OpenProgramFolder1Click)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(ExploreFolder)operator(()ident(MyDir)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TMainWin)operator(.)ident(ExitPluto1Click)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(Close)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TMainWin)operator(.)ident(Find1Click)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(FindWin)operator(.)ident(SfRootKeyRB)operator(.)ident(Checked) operator(:=) ident(True)operator(;)
  ident(FindWin)operator(.)ident(Show)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TMainWin)operator(.)ident(FormPaint)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  keyword(if) ident(Started) keyword(and) keyword(not) ident(MainWinLoaded) keyword(then) keyword(begin)
    ident(MainWinLoaded) operator(:=) ident(True)operator(;)
    ident(Load)operator(;)
  keyword(end)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TMainWin)operator(.)ident(StatusBarDrawPanel)operator(()ident(StatusBar)operator(:) ident(TStatusBar)operator(;)
  ident(Panel)operator(:) ident(TStatusPanel)operator(;) keyword(const) ident(Rect)operator(:) ident(TRect)operator(\))operator(;)
keyword(begin)
  keyword(with) ident(StatusBar)operator(.)ident(Canvas) keyword(do) keyword(begin)
    ident(Brush)operator(.)ident(Color) operator(:=) ident(clBlack)operator(;)
    ident(FillRect)operator(()ident(Rect)operator(\))operator(;)
    keyword(with) ident(Font) keyword(do) keyword(begin)
      ident(Name) operator(:=) string<delimiter(')content(MS Sans Serif)delimiter(')>operator(;)
      ident(Style) operator(:=) operator([)operator(])operator(;)
      keyword(case) ident(Panel)operator(.)ident(Index) keyword(of)
        integer(0)operator(:) keyword(if) ident(HintBlinkT)operator(.)ident(Enabled) keyword(then)
             ident(Color) operator(:=) ident(clBrightRed)
           keyword(else)
             ident(Color) operator(:=) ident(clBrightSilver)operator(;)
        integer(1)operator(:) ident(Color) operator(:=) ident(clWhite)operator(;)
        integer(2)operator(:) ident(Color) operator(:=) ident(clCyan)operator(;)
        integer(3)operator(:) ident(Color) operator(:=) ident(clBrightPurple)operator(;)
      keyword(end)operator(;)
    keyword(end)operator(;)

    keyword(if) ident(Panel)operator(.)ident(Alignment) operator(=) ident(taRightJustify) keyword(then)
      ident(TextOut)operator(()ident(Rect)operator(.)ident(Right) operator(-) ident(TextWidth)operator(()ident(Panel)operator(.)ident(Text)operator(\))operator(,) ident(Rect)operator(.)ident(Top)operator(,) ident(Panel)operator(.)ident(Text)operator(\))
    keyword(else)
      ident(TextOut)operator(()ident(Rect)operator(.)ident(Left)operator(,) ident(Rect)operator(.)ident(Top)operator(,) ident(Panel)operator(.)ident(Text)operator(\))operator(;)
  keyword(end)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TMainWin)operator(.)ident(PathEKeyPress)operator(()ident(Sender)operator(:) ident(TObject)operator(;) keyword(var) ident(Key)operator(:) ident(Char)operator(\))operator(;)
keyword(begin)
  keyword(if) ident(Key) operator(=) char(#127) keyword(then) comment(//Silly key management)
    ident(Key) operator(:=) char(#0)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TMainWin)operator(.)ident(HintBlinkTTimer)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(StatusBar)operator(.)ident(Panels)operator([)integer(0)operator(])operator(.)ident(Text) operator(:=) string<delimiter(')content(Ready)delimiter(')>operator(;)
  ident(StopHintBlinking)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TMainWin)operator(.)ident(StopHintBlinking)operator(;)
keyword(begin)
  ident(HintBlinkT)operator(.)ident(Enabled) operator(:=) ident(False)operator(;)
  ident(PreBlinkHint) operator(:=) ident(NoPreBlinkHint)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TMainWin)operator(.)ident(FindCLSID1Click)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(FindCLSID)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TMainWin)operator(.)ident(GotoCLSID1Click)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(GotoCLSID)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TMainWin)operator(.)ident(CommandLineParameters1Click)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(NotePad)operator(()ident(PlutoDir) operator(+) string<delimiter(')content(Params.txt)delimiter(')>operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TMainWin)operator(.)ident(DeleteTempFolder1Click)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  keyword(if) ident(mrYes) operator(=) ident(MessageDlg)operator(()string<delimiter(')content(Deleting )delimiter(')> operator(+) ident(Quote)operator(()ident(TempDir) operator(+) string<delimiter(')content(*.*)delimiter(')> operator(+) ident(EOL)operator(,) char<delimiter(')content(")delimiter(')>operator(\)) operator(+)
                        string<delimiter(')content(Are you sure?)delimiter(')>operator(,) ident(mtConfirmation)operator(,) operator([)ident(mbYes)operator(,) ident(mbCancel)operator(])operator(,) integer(0)operator(\)) keyword(then)
    ident(DeleteFiles)operator(()ident(TempDir) operator(+) string<delimiter(')content(*.*)delimiter(')>operator(,) ident(False)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TMainWin)operator(.)ident(CurrentDir1Click)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(ShowMessage)operator(()string<delimiter(')content(MyDir: )delimiter(')> operator(+) ident(MyDir) operator(+) ident(EOL) operator(+)
              string<delimiter(')content(PlutoDir: )delimiter(')> operator(+) ident(PlutoDir) operator(+) ident(EOL) operator(+)
              string<delimiter(')content(CurrentDir: )delimiter(')> operator(+) ident(GetCurrentDir) operator(+) ident(EOL) operator(+)
              string<delimiter(')content(Params: )delimiter(')> operator(+) ident(EOL) operator(+)
              ident(GetParams)operator(()ident(EOL)operator(\))operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TMainWin)operator(.)ident(RepairPluto155bBug1Click)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(var)
  ident(Msg)operator(:) keyword(string)operator(;)
  ident(Reg)operator(:) ident(TXRegistry)operator(;)
keyword(begin)
  ident(Reg) operator(:=) ident(TXRegistry)operator(.)ident(Create)operator(;)

  keyword(try)
    ident(Reg)operator(.)ident(RootKey) operator(:=) ident(HKCU)operator(;)
    ident(Reg)operator(.)ident(OpenKey)operator(()string<delimiter(')content(Software)delimiter(')>operator(\))operator(;)
    ident(Msg) operator(:=) string<delimiter(')delimiter(')>operator(;)
    keyword(if) ident(Reg)operator(.)ident(KeyExists)operator(()string<delimiter(')content(Sisyphus)delimiter(')>operator(\)) keyword(then)
      ident(Msg) operator(:=) ident(Msg) operator(+) string<delimiter(')content(HKCU\\Software\\Sisyphus)delimiter(')> operator(+) ident(EOL)operator(;)
    keyword(if) ident(Reg)operator(.)ident(KeyExists)operator(()string<delimiter(')content(Main)delimiter(')>operator(\)) keyword(then)
      ident(Msg) operator(:=) ident(Msg) operator(+) string<delimiter(')content(HKCU\\Software\\Main)delimiter(')> operator(+) ident(EOL)operator(;)
    keyword(if) ident(Reg)operator(.)ident(KeyExists)operator(()string<delimiter(')content(Spy)delimiter(')>operator(\)) keyword(then)
      ident(Msg) operator(:=) ident(Msg) operator(+) string<delimiter(')content(HKCU\\Software\\Spy)delimiter(')> operator(+) ident(EOL)operator(;)
    keyword(if) ident(Reg)operator(.)ident(KeyExists)operator(()string<delimiter(')content(View)delimiter(')>operator(\)) keyword(then)
      ident(Msg) operator(:=) ident(Msg) operator(+) string<delimiter(')content(HKCU\\Software\\View)delimiter(')> operator(+) ident(EOL)operator(;)
    keyword(if) ident(Msg) operator(=) string<delimiter(')delimiter(')> keyword(then) keyword(begin)
      ident(ShowMessage)operator(()string<delimiter(')content(No bug detected :-\))delimiter(')>operator(\))operator(;)
    keyword(end) keyword(else) keyword(begin)
      ident(Msg) operator(:=)
        string<delimiter(')content(Hi folks!)delimiter(')> operator(+) ident(EOL) operator(+)
        string<delimiter(')content(We are very sorry: A bug in Pluto made some components in the Edit)delimiter(')>  operator(+) ident(EOL) operator(+)
        string<delimiter(')content(window save their values to the regsitry instead of the ini file.)delimiter(')> operator(+) ident(EOL) operator(+)
        string<delimiter(')content(If you want to repair that, you have to delete the following keys:)delimiter(')> operator(+) ident(EOL) operator(+)
        ident(EOL) operator(+)
        ident(Msg) operator(+)
        ident(EOL) operator(+)
        string<delimiter(')content(This is not dangerous at all, but if you are interested in having)delimiter(')> operator(+) ident(EOL) operator(+)
        string<delimiter(')content(a clean registry, you should delete this useless keys.)delimiter(')> operator(+) ident(EOL) operator(+)
        ident(EOL) operator(+)
        string<delimiter(')content(You surely noticed that this key names are rubish because they are)delimiter(')> operator(+) ident(EOL) operator(+)
        string<delimiter(')content(in the level that is normally used by programs.)delimiter(')> operator(+) ident(EOL) operator(+)
        string<delimiter(')content(If you have programs installed that use this keys for their)delimiter(')> operator(+) ident(EOL) operator(+)
        string<delimiter(')content(preferences, you may get problems when deleting the keys!)delimiter(')> operator(+) ident(EOL) operator(+)
        ident(EOL) operator(+)
        string<delimiter(')content(So, now you have to decide what to do:)delimiter(')> operator(+) ident(EOL) operator(+)
        ident(EOL) operator(+)
        string<delimiter(')content(Yes: Delete the keys. You have to confirm the deleting of each key.)delimiter(')> operator(+) ident(EOL) operator(+)
        string<delimiter(')content(No: Jump to the Software key and delete manually.)delimiter(')> operator(+) ident(EOL) operator(+)
        string<delimiter(')content(Cancel: Do nothing.)delimiter(')> operator(+) ident(EOL) operator(+)
        string<delimiter(')content(Yes to All: Delete all keys.)delimiter(')>operator(;)

      keyword(case) ident(MessageDlg)operator(()ident(Msg)operator(,) ident(mtWarning)operator(,) operator([)ident(mbYes)operator(,) ident(mbNo)operator(,) ident(mbYesToAll)operator(,) ident(mbCancel)operator(])operator(,) integer(0)operator(\)) keyword(of)
        ident(mrYes)operator(:) keyword(begin)
          keyword(if) ident(Reg)operator(.)ident(KeyExists)operator(()string<delimiter(')content(Main)delimiter(')>operator(\))
           keyword(and) operator(()ident(mrYes)operator(=)ident(MessageDlg)operator(()string<delimiter(')content(Delete HKU\\Software\\Main ?)delimiter(')>operator(,)
           ident(mtWarning)operator(,) operator([)ident(mbYes)operator(,) ident(mbNo)operator(])operator(,) integer(0)operator(\))operator(\)) keyword(then)
             ident(Reg)operator(.)ident(DeleteKey)operator(()string<delimiter(')content(Main)delimiter(')>operator(\))operator(;)

          keyword(if) ident(Reg)operator(.)ident(KeyExists)operator(()string<delimiter(')content(Sisyphus)delimiter(')>operator(\))
           keyword(and) operator(()ident(mrYes)operator(=)ident(MessageDlg)operator(()string<delimiter(')content(Delete HKU\\Software\\Sisyphus ?)delimiter(')>operator(,)
           ident(mtWarning)operator(,) operator([)ident(mbYes)operator(,) ident(mbNo)operator(])operator(,) integer(0)operator(\))operator(\)) keyword(then)
            ident(Reg)operator(.)ident(DeleteKey)operator(()string<delimiter(')content(Sisyphus)delimiter(')>operator(\))operator(;)

          keyword(if) ident(Reg)operator(.)ident(KeyExists)operator(()string<delimiter(')content(Spy)delimiter(')>operator(\))
           keyword(and) operator(()ident(mrYes)operator(=)ident(MessageDlg)operator(()string<delimiter(')content(Delete HKU\\Software\\Spy ?)delimiter(')>operator(,)
           ident(mtWarning)operator(,) operator([)ident(mbYes)operator(,) ident(mbNo)operator(])operator(,) integer(0)operator(\))operator(\)) keyword(then)
            ident(Reg)operator(.)ident(DeleteKey)operator(()string<delimiter(')content(Spy)delimiter(')>operator(\))operator(;)

          keyword(if) ident(Reg)operator(.)ident(KeyExists)operator(()string<delimiter(')content(View)delimiter(')>operator(\))
           keyword(and) operator(()ident(mrYes)operator(=)ident(MessageDlg)operator(()string<delimiter(')content(Delete HKU\\Software\\View ?)delimiter(')>operator(,)
           ident(mtWarning)operator(,) operator([)ident(mbYes)operator(,) ident(mbNo)operator(])operator(,) integer(0)operator(\))operator(\)) keyword(then)
            ident(Reg)operator(.)ident(DeleteKey)operator(()string<delimiter(')content(View)delimiter(')>operator(\))operator(;)
        keyword(end)operator(;)

        ident(mrYesToAll)operator(:) keyword(begin)
          ident(Reg)operator(.)ident(DeleteKey)operator(()string<delimiter(')content(Main)delimiter(')>operator(\))operator(;)
          ident(Reg)operator(.)ident(DeleteKey)operator(()string<delimiter(')content(Sisyphus)delimiter(')>operator(\))operator(;)
          ident(Reg)operator(.)ident(DeleteKey)operator(()string<delimiter(')content(Spy)delimiter(')>operator(\))operator(;)
          ident(Reg)operator(.)ident(DeleteKey)operator(()string<delimiter(')content(View)delimiter(')>operator(\))operator(;)
        keyword(end)operator(;)

        ident(mrNo)operator(:) keyword(begin)
          ident(TreeWin)operator(.)ident(SetFocus)operator(;)
          ident(GotoKey)operator(()string<delimiter(')content(HKCU\\Software\\)delimiter(')>operator(\))operator(;)
        keyword(end)operator(;)
      keyword(end)operator(;)
    keyword(end)operator(;)

  keyword(finally)
    ident(Reg)operator(.)ident(Free)operator(;)
  keyword(end)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TMainWin)operator(.)ident(BackupRegistryscanreg1Click)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(ExecFile)operator(()string<delimiter(')content(scanreg)delimiter(')>operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TMainWin)operator(.)ident(Username1Click)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(ShowMessage)operator(()ident(UserName)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TMainWin)operator(.)ident(ToDoMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(NotePad)operator(()ident(PlutoDir) operator(+) string<delimiter(')content(ToDo.txt)delimiter(')>operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TMainWin)operator(.)ident(MailLinkMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(MailTo)operator(()ident(TMenuItem)operator(()ident(Sender)operator(\))operator(.)ident(Caption)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TMainWin)operator(.)ident(IjustwantCONTACT1Click)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(MailTo)operator(()string<delimiter(')content(pluto@cYcnus.de)delimiter(')>operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TMainWin)operator(.)ident(ExternalHexEditMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(ExecFile)operator(()ident(PrefWin)operator(.)ident(ExternalHexEditE)operator(.)ident(Text)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TMainWin)operator(.)ident(AnotherPluto1Click)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(ExecFile)operator(()ident(Application)operator(.)ident(ExeName)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TMainWin)operator(.)ident(Path1Click)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
preprocessor({$IFDEF UNIKEY})
  ident(UserUniPath) operator(:=) ident(InputBox)operator(()string<delimiter(')content(UniKey)delimiter(')>operator(,) string<delimiter(')content(Input an UniPath.)delimiter(')> operator(+) ident(EOL) operator(+)
    ident(EOL) operator(+)
    string<delimiter(')content(No idea? Try one of these: )delimiter(')> operator(+) ident(EOL) operator(+)
    string<delimiter(')content(WinAmpVisColor <viscolor.txt>:)delimiter(')> operator(+) ident(EOL) operator(+)
    string<delimiter(')content(Params:)delimiter(')> operator(+) ident(EOL) operator(+)
    string<delimiter(')content(Reg: HKCU)delimiter(')> operator(+) ident(EOL) operator(+)
    string<delimiter(')content(Ini <)delimiter(')> operator(+) ident(MyDir) operator(+) string<delimiter(')content(pluto.ini>:)delimiter(')> operator(+) ident(EOL) operator(+)
    string<delimiter(')content(Ini <)delimiter(')> operator(+) ident(MyDir) operator(+) string<delimiter(')content(pluto.ini>:[View])delimiter(')> operator(+) ident(EOL)operator(,)
    ident(UserUniPath)operator(\))operator(;)
preprocessor({$ENDIF})
keyword(end)operator(;)

keyword(procedure) ident(TMainWin)operator(.)ident(RegisterPlugIns1Click)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
preprocessor({$IFDEF UNIKEY})
  keyword(if) ident(UniPluginOD)operator(.)ident(Execute) keyword(then)
    ident(RegisterUniClass)operator(()ident(UniPluginOD)operator(.)ident(FileName)operator(\))operator(;)
preprocessor({$ENDIF})
keyword(end)operator(;)
  
keyword(procedure) ident(TMainWin)operator(.)ident(FormResize)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(ArrangeIcons)operator(;)
  ident(ArrangePlutoStyle)operator(;)
  ident(WorkWin)operator(.)ident(WindowState) operator(:=) ident(wsNormal)operator(;)
  ident(ValuesWin)operator(.)ident(WindowState) operator(:=) ident(wsNormal)operator(;)
  ident(TreeWin)operator(.)ident(WindowState) operator(:=) ident(wsNormal)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TMainWin)operator(.)ident(SwapLM_CUBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(var)
  ident(Path)operator(:) keyword(string)operator(;)
keyword(begin)
  ident(Path) operator(:=) ident(TraceKey)operator(()ident(PathE)operator(.)ident(Text)operator(,) ident(uhShortcuts)operator(\))operator(;)
  keyword(if) ident(SwapHKU_HKLM)operator(()ident(Path)operator(\)) keyword(then) keyword(begin)
    ident(PathE)operator(.)ident(Text) operator(:=) ident(Path)operator(;)
    ident(UserGotoKey)operator(;)
  keyword(end)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TMainWin)operator(.)ident(ShowLoadreport1Click)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(NotePad)operator(()ident(MyDir) operator(+) string<delimiter(')content(loadreport.txt)delimiter(')>operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TMainWin)operator(.)ident(KillPluto1Click)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(Application)operator(.)ident(Terminate)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TMainWin)operator(.)ident(ShowPlatform1Click)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(ShowMessage)operator(()ident(Format)operator(()string<delimiter(')content(Platform: %s)delimiter(')> operator(+) ident(EOL) operator(+)
    string<delimiter(')content(Versin: %d.%d Build %d)delimiter(')>operator(,)
    operator([)ident(PlatformStrings)operator([)ident(Win32Platform)operator(])operator(,)
     ident(Win32MajorVersion)operator(,) ident(Win32MinorVersion)operator(,) ident(Win32BuildNumber)operator(])operator(\))operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TMainWin)operator(.)ident(MSConfig1Click)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(ExecFile)operator(()string<delimiter(')content(msconfig)delimiter(')>operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TMainWin)operator(.)ident(TimetoRelaxMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(var)
  ident(RelaxFile)operator(:) keyword(string)operator(;)
keyword(begin)
  keyword(with) ident(PlutoKey)operator(.)ident(GetKey)operator(()string<delimiter(')content(Main)delimiter(')>operator(\)) keyword(do)
    keyword(try)
      ident(RelaxFile) operator(:=) ident(ReadString)operator(()string<delimiter(')content(Relax)delimiter(')>operator(\))operator(;)
    keyword(finally)
      ident(Free)operator(;)
    keyword(end)operator(;)

  keyword(if) ident(RelaxFile) operator(=) string<delimiter(')delimiter(')> keyword(then)
    ident(ShowMessage)operator(()string<delimiter(')content(This menu item can be used for something that lets you relax,)delimiter(')> operator(+) ident(EOL) operator(+)
      string<delimiter(')content(for example Diablo2, you favorite song or the latest news about the)delimiter(')> operator(+) ident(EOL) operator(+)
      string<delimiter(')content(decreasing AOL member numbers.)delimiter(')> operator(+) ident(EOL) operator(+)
      ident(EOL) operator(+)
      string<delimiter(')content(Feel free to use everything you want.)delimiter(')> operator(+) ident(EOL) operator(+)
      string<delimiter(')content(Open the pluto.ini (CTRL+I\) and add a new value "Relax" in the "Main")delimiter(')> operator(+) ident(EOL) operator(+)
      string<delimiter(')content(section.)delimiter(')> operator(+) ident(EOL) operator(+)
      ident(EOL) operator(+)
      string<delimiter(')content(And don)char('')content(t forget:)delimiter(')> operator(+) ident(EOL) operator(+)
      string<delimiter(')content(R E L A X ! ! !)delimiter(')>operator(\))
  keyword(else)
    ident(ExecFile)operator(()ident(RelaxFile)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TMainWin)operator(.)ident(OnSisyChange)operator(()ident(Sender)operator(:) ident(TSisyThread)operator(;) ident(Change)operator(:) ident(TSisyChange)operator(\))operator(;)

  keyword(procedure) ident(UpdateValue)operator(;)
  keyword(var)
    ident(Reg)operator(:) ident(TXRegistry)operator(;)
    ident(Index)operator(:) ident(Integer)operator(;)
  keyword(begin)
    keyword(if) keyword(not) ident(SameRegPath)operator(()ident(ExRegFullKey)operator(()ident(Change)operator(.)ident(Path)operator(\))operator(,) ident(PathOfNode)operator(()ident(RegTV)operator(.)ident(Selected)operator(\))operator(\)) keyword(then)
      ident(Exit)operator(;)

    ident(Reg) operator(:=) ident(TXRegistry)operator(.)ident(Create)operator(;)
    keyword(try)
      ident(Reg)operator(.)ident(RootKey) operator(:=) ident(HKEYOfStr)operator(()ident(ExRegRoot)operator(()ident(Change)operator(.)ident(Path)operator(\))operator(\))operator(;)
      keyword(if) ident(Reg)operator(.)ident(OpenKey)operator(()ident(ExRegKey)operator(()ident(Change)operator(.)ident(Path)operator(\))operator(\)) keyword(then)
        keyword(with) ident(ValuesWin) keyword(do) keyword(begin)
          ident(Index) operator(:=) ident(FindItemByRealName)operator(()ident(ExRegValue)operator(()ident(Change)operator(.)ident(Path)operator(\))operator(\))operator(;)
          keyword(if) ident(Index) operator(>) operator(-)integer(1) keyword(then) keyword(begin)
            keyword(if) ident(Change)operator(.)ident(Typ) operator(=) ident(cValueMinus) keyword(then)
              ident(ValueList)operator(.)ident(Items)operator(.)ident(Delete)operator(()ident(Index)operator(\))
            keyword(else) keyword(if) ident(Change)operator(.)ident(Typ) operator(=) ident(cContextChange) keyword(then)
              ident(UpdateValue)operator(()ident(Reg)operator(,) ident(ValueList)operator(.)ident(Items)operator([)ident(Index)operator(])operator(\))operator(;)
          keyword(end) keyword(else) keyword(if) ident(Change)operator(.)ident(Typ) operator(=) ident(cValuePlus) keyword(then)
            ident(AddValue)operator(()ident(Reg)operator(,) ident(ExRegValue)operator(()ident(Change)operator(.)ident(Path)operator(\))operator(\))operator(;)
        keyword(end)operator(;)
    keyword(finally)
      ident(Reg)operator(.)ident(Free)operator(;)
    keyword(end)operator(;)
  keyword(end)operator(;)

keyword(begin)
  ident(AddHint)operator(()ident(Sender)operator(.)ident(Name) operator(+) string<delimiter(')content( notified )delimiter(')> operator(+) ident(Change)operator(.)ident(Path)operator(\))operator(;)
  keyword(if) ident(Change)operator(.)ident(Typ) keyword(in) operator([)ident(cValueMinus)operator(,) ident(cValuePlus)operator(,) ident(cContextChange)operator(]) keyword(then)
    ident(UpdateValue)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TMainWin)operator(.)ident(OnSisyValuePlus)operator(()ident(Sender)operator(:) ident(TSisyThread)operator(;) ident(Change)operator(:) ident(TSisyChange)operator(\))operator(;)
keyword(var)
  ident(Reg)operator(:) ident(TXRegistry)operator(;)
keyword(begin)
  keyword(if) keyword(not) ident(SameRegPath)operator(()ident(ExRegFullKey)operator(()ident(Change)operator(.)ident(Path)operator(\))operator(,) ident(PathOfNode)operator(()ident(RegTV)operator(.)ident(Selected)operator(\))operator(\)) keyword(then)
    ident(Exit)operator(;)

  ident(Reg) operator(:=) ident(TXRegistry)operator(.)ident(Create)operator(;)
  keyword(try)
    ident(Reg)operator(.)ident(RootKey) operator(:=) ident(HKEYOfStr)operator(()ident(ExRegRoot)operator(()ident(Change)operator(.)ident(Path)operator(\))operator(\))operator(;)
    keyword(if) ident(Reg)operator(.)ident(OpenKey)operator(()ident(ExRegKey)operator(()ident(Change)operator(.)ident(Path)operator(\))operator(\)) keyword(then)
      ident(ValuesWin)operator(.)ident(AddValue)operator(()ident(Reg)operator(,) ident(ExRegValue)operator(()ident(Change)operator(.)ident(Path)operator(\))operator(\))operator(;)
  keyword(finally)
    ident(Reg)operator(.)ident(Free)operator(;)
  keyword(end)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TMainWin)operator(.)ident(OnSisyValueMinus)operator(()ident(Sender)operator(:) ident(TSisyThread)operator(;) ident(Change)operator(:) ident(TSisyChange)operator(\))operator(;)
keyword(var)
  ident(Reg)operator(:) ident(TXRegistry)operator(;)
  ident(Index)operator(:) ident(Integer)operator(;)
keyword(begin)
  keyword(if) keyword(not) ident(SameRegPath)operator(()ident(ExRegFullKey)operator(()ident(Change)operator(.)ident(Path)operator(\))operator(,) ident(PathOfNode)operator(()ident(RegTV)operator(.)ident(Selected)operator(\))operator(\)) keyword(then)
    ident(Exit)operator(;)

  ident(Reg) operator(:=) ident(TXRegistry)operator(.)ident(Create)operator(;)
  keyword(try)
    ident(Reg)operator(.)ident(RootKey) operator(:=) ident(HKEYOfStr)operator(()ident(ExRegRoot)operator(()ident(Change)operator(.)ident(Path)operator(\))operator(\))operator(;)
    keyword(if) ident(Reg)operator(.)ident(OpenKey)operator(()ident(ExRegKey)operator(()ident(Change)operator(.)ident(Path)operator(\))operator(\)) keyword(then)
      keyword(with) ident(ValuesWin) keyword(do) keyword(begin)
        ident(Index) operator(:=) ident(FindItemByRealName)operator(()ident(ExRegValue)operator(()ident(Change)operator(.)ident(Path)operator(\))operator(\))operator(;)
        keyword(if) ident(Index) operator(>) operator(-)integer(1) keyword(then)
          ident(ValueList)operator(.)ident(Items)operator(.)ident(Delete)operator(()ident(Index)operator(\))operator(;)
      keyword(end)operator(;)
  keyword(finally)
    ident(Reg)operator(.)ident(Free)operator(;)
  keyword(end)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TMainWin)operator(.)ident(OnSisyContextChange)operator(()ident(Sender)operator(:) ident(TSisyThread)operator(;) ident(Change)operator(:) ident(TSisyChange)operator(\))operator(;)
keyword(var)
  ident(Reg)operator(:) ident(TXRegistry)operator(;)
  ident(Index)operator(:) ident(Integer)operator(;)
keyword(begin)
  keyword(if) keyword(not) ident(SameRegPath)operator(()ident(ExRegFullKey)operator(()ident(Change)operator(.)ident(Path)operator(\))operator(,) ident(PathOfNode)operator(()ident(RegTV)operator(.)ident(Selected)operator(\))operator(\)) keyword(then)
    ident(Exit)operator(;)

  ident(Reg) operator(:=) ident(TXRegistry)operator(.)ident(Create)operator(;)
  keyword(try)
    ident(Reg)operator(.)ident(RootKey) operator(:=) ident(HKEYOfStr)operator(()ident(ExRegRoot)operator(()ident(Change)operator(.)ident(Path)operator(\))operator(\))operator(;)
    keyword(if) ident(Reg)operator(.)ident(OpenKey)operator(()ident(ExRegKey)operator(()ident(Change)operator(.)ident(Path)operator(\))operator(\)) keyword(then)
      keyword(with) ident(ValuesWin) keyword(do) keyword(begin)
        ident(Index) operator(:=) ident(FindItemByRealName)operator(()ident(ExRegValue)operator(()ident(Change)operator(.)ident(Path)operator(\))operator(\))operator(;)
        keyword(if) ident(Index) operator(>) operator(-)integer(1) keyword(then)
          ident(UpdateValue)operator(()ident(Reg)operator(,) ident(ValueList)operator(.)ident(Items)operator([)ident(Index)operator(])operator(\))operator(;)
      keyword(end)operator(;)
  keyword(finally)
    ident(Reg)operator(.)ident(Free)operator(;)
  keyword(end)operator(;)
keyword(end)operator(;)

keyword(end)operator(.)
keyword(unit) ident(PrefU)operator(;)

keyword(interface)

keyword(uses)
  ident(Windows)operator(,) ident(Messages)operator(,) ident(SysUtils)operator(,) ident(Variants)operator(,) ident(Classes)operator(,) ident(Graphics)operator(,) ident(Controls)operator(,) ident(Forms)operator(,)
  ident(Dialogs)operator(,) ident(ComCtrls)operator(,) ident(ExtCtrls)operator(,) ident(StdCtrls)operator(,) ident(PlutoConst)operator(,) ident(NewPanels)operator(,) ident(PrefTools)operator(,)
  ident(YTools)operator(,) ident(YTypes)operator(,) ident(start)operator(,) ident(XReg)operator(,) ident(LinkLabel)operator(;)

keyword(type)
  ident(TPrefWin) operator(=) keyword(class)operator(()ident(TForm)operator(\))
    ident(PrefPC)operator(:) ident(TPageControl)operator(;)
    ident(CommonPage)operator(:) ident(TTabSheet)operator(;)
    ident(KeyPage)operator(:) ident(TTabSheet)operator(;)
    ident(DataPage)operator(:) ident(TTabSheet)operator(;)
    ident(KeysBP)operator(:) ident(TBorderPanel)operator(;)
    ident(GroupBox3)operator(:) ident(TGroupBox)operator(;)
    ident(MainPrevBP)operator(:) ident(TBorderPanel)operator(;)
    ident(GroupBox4)operator(:) ident(TGroupBox)operator(;)
    ident(BorderPanel6)operator(:) ident(TBorderPanel)operator(;)
    ident(GroupBox6)operator(:) ident(TGroupBox)operator(;)
    ident(SortKeysCB)operator(:) ident(TPrefCheckBox)operator(;)
    ident(PrefHost)operator(:) ident(TPrefHost)operator(;)
    ident(MainPreviewCB)operator(:) ident(TPrefCheckBox)operator(;)
    ident(SplashScreenCB)operator(:) ident(TPrefCheckBox)operator(;)
    ident(PrefValuesPC)operator(:) ident(TPageControl)operator(;)
    ident(StringPage)operator(:) ident(TTabSheet)operator(;)
    ident(MultiStringPage)operator(:) ident(TTabSheet)operator(;)
    ident(IntPage)operator(:) ident(TTabSheet)operator(;)
    ident(BinaryPage)operator(:) ident(TTabSheet)operator(;)
    ident(BorderPanel8)operator(:) ident(TBorderPanel)operator(;)
    ident(GroupBox8)operator(:) ident(TGroupBox)operator(;)
    ident(ShowDwordAsHex)operator(:) ident(TPrefCheckBox)operator(;)
    ident(BorderPanel7)operator(:) ident(TBorderPanel)operator(;)
    ident(GroupBox7)operator(:) ident(TGroupBox)operator(;)
    ident(CountZeroByteCB)operator(:) ident(TPrefCheckBox)operator(;)
    ident(BorderPanel1)operator(:) ident(TBorderPanel)operator(;)
    ident(GroupBox2)operator(:) ident(TGroupBox)operator(;)
    ident(UseExtendedModelCB)operator(:) ident(TPrefCheckBox)operator(;)
    ident(BorderPanel2)operator(:) ident(TBorderPanel)operator(;)
    ident(GroupBox1)operator(:) ident(TGroupBox)operator(;)
    ident(ShowAsBinaryCB)operator(:) ident(TPrefCheckBox)operator(;)
    ident(ShowBinaryAsRG)operator(:) ident(TPrefRadioGroup)operator(;)
    ident(Smart4BBCB)operator(:) ident(TPrefCheckBox)operator(;)
    ident(DWordPreviewL)operator(:) ident(TLabel)operator(;)
    ident(Label4)operator(:) ident(TLabel)operator(;)
    ident(Label5)operator(:) ident(TLabel)operator(;)
    ident(Label6)operator(:) ident(TLabel)operator(;)
    ident(Label7)operator(:) ident(TLabel)operator(;)
    ident(UserNameE)operator(:) ident(TPrefEdit)operator(;)
    ident(Label8)operator(:) ident(TLabel)operator(;)
    ident(MainPreviewE)operator(:) ident(TPrefEdit)operator(;)
    ident(Label12)operator(:) ident(TLabel)operator(;)
    ident(DefaultIconPreviewCB)operator(:) ident(TPrefCheckBox)operator(;)
    ident(KeyInfoPreviewCB)operator(:) ident(TPrefCheckBox)operator(;)
    ident(SelectExternalHexEditOD)operator(:) ident(TOpenDialog)operator(;)
    ident(BorderPanel3)operator(:) ident(TBorderPanel)operator(;)
    ident(GroupBox9)operator(:) ident(TGroupBox)operator(;)
    ident(IntegrationPage)operator(:) ident(TTabSheet)operator(;)
    ident(BorderPanel4)operator(:) ident(TBorderPanel)operator(;)
    ident(GroupBox5)operator(:) ident(TGroupBox)operator(;)
    ident(Label11)operator(:) ident(TLabel)operator(;)
    ident(SelectExternalHexEditB)operator(:) ident(TButton)operator(;)
    ident(RunExternalHexEditB)operator(:) ident(TButton)operator(;)
    ident(ExternalHexEditE)operator(:) ident(TPrefEdit)operator(;)
    ident(Label13)operator(:) ident(TLabel)operator(;)
    ident(BorderPanel5)operator(:) ident(TBorderPanel)operator(;)
    ident(GroupBox10)operator(:) ident(TGroupBox)operator(;)
    ident(Label15)operator(:) ident(TLabel)operator(;)
    ident(RegisterAppCB)operator(:) ident(TCheckBox)operator(;)
    ident(Label3)operator(:) ident(TLabel)operator(;)
    ident(Memo1)operator(:) ident(TMemo)operator(;)
    ident(ExpandStringsRG)operator(:) ident(TPrefRadioGroup)operator(;)
    ident(QuotersE)operator(:) ident(TPrefEdit)operator(;)
    ident(Label1)operator(:) ident(TLabel)operator(;)
    ident(StringPreviewL)operator(:) ident(TLabel)operator(;)
    ident(ShowLineCountCB)operator(:) ident(TPrefCheckBox)operator(;)
    ident(ShowTreeViewLinesCB)operator(:) ident(TPrefCheckBox)operator(;)
    ident(ValuePage)operator(:) ident(TTabSheet)operator(;)
    ident(BorderPanel10)operator(:) ident(TBorderPanel)operator(;)
    ident(GroupBox12)operator(:) ident(TGroupBox)operator(;)
    ident(ShowListViewGridCB)operator(:) ident(TPrefCheckBox)operator(;)
    ident(Label9)operator(:) ident(TLabel)operator(;)
    ident(DefaultValueNameE)operator(:) ident(TPrefEdit)operator(;)
    ident(Label10)operator(:) ident(TLabel)operator(;)
    ident(GotoPlutoKeyB)operator(:) ident(TButton)operator(;)
    ident(ColorPanel2)operator(:) ident(TColorPanel)operator(;)
    ident(LinkLabel1)operator(:) ident(TLinkLabel)operator(;)
    ident(SmartExpandCB)operator(:) ident(TPrefCheckBox)operator(;)
    ident(KeysSingleClickCB)operator(:) ident(TPrefCheckBox)operator(;)
    ident(ValuesSingleClickCB)operator(:) ident(TPrefCheckBox)operator(;)
    ident(ShowProgressCB)operator(:) ident(TPrefCheckBox)operator(;)
    ident(ColorPanel1)operator(:) ident(TColorPanel)operator(;)
    ident(Label2)operator(:) ident(TLabel)operator(;)
    ident(ReloadB)operator(:) ident(TButton)operator(;)
    ident(DefaultB)operator(:) ident(TButton)operator(;)
    ident(SaveB)operator(:) ident(TButton)operator(;)
    keyword(procedure) ident(PrefPCDrawTab)operator(()ident(Control)operator(:) ident(TCustomTabControl)operator(;)
      ident(TabIndex)operator(:) ident(Integer)operator(;) keyword(const) ident(Rect)operator(:) ident(TRect)operator(;) ident(Active)operator(:) ident(Boolean)operator(\))operator(;)
    keyword(procedure) ident(PrefHostLoaded)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(StandardPreviewChange)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(DataPreviewChange)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(UserNameEChange)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(FormKeyDown)operator(()ident(Sender)operator(:) ident(TObject)operator(;) keyword(var) ident(Key)operator(:) ident(Word)operator(;)
      ident(Shift)operator(:) ident(TShiftState)operator(\))operator(;)
    keyword(procedure) ident(FormDeactivate)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(FormActivate)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(PrefValuesPCDrawTab)operator(()ident(Control)operator(:) ident(TCustomTabControl)operator(;)
      ident(TabIndex)operator(:) ident(Integer)operator(;) keyword(const) ident(Rect)operator(:) ident(TRect)operator(;) ident(Active)operator(:) ident(Boolean)operator(\))operator(;)
    keyword(procedure) ident(ShowDwordAsHexClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(MainPreviewEChange)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(FormCreate)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(ActivateIt)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(DeActivateIt)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(ReloadBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(RunExternalHexEditBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(SelectExternalHexEditBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(ExternalHexEditEChange)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(DefaultBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(RegisterAppCBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(SaveBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(StringPreviewChange)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(ShowTreeViewLinesCBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(ShowListViewGridCBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(DefaultValueNameEChange)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(LoadPrefs)operator(;)
    keyword(procedure) ident(UseExtendedModelCBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(IntegrationPageShow)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(GotoPlutoKeyBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(FormShow)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(KeysSingleClickCBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(ValuesSingleClickCBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(QuotersEChange)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(SplashScreenCBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(SaveBMouseMove)operator(()ident(Sender)operator(:) ident(TObject)operator(;) ident(Shift)operator(:) ident(TShiftState)operator(;) ident(X)operator(,)
      ident(Y)operator(:) ident(Integer)operator(\))operator(;)
  directive(public)
    ident(StringQuoterBegin)operator(,) ident(StringQuoterEnd)operator(:) keyword(string)operator(;)
  keyword(end)operator(;)

keyword(var)
  ident(PrefWin)operator(:) ident(TPrefWin)operator(;)

keyword(implementation)

keyword(uses)
  ident(TreeU)operator(,) ident(ValuesU)operator(,) ident(Splash)operator(,) ident(plutomain)operator(,) ident(WorkU)operator(;)

preprocessor({$R *.dfm})

keyword(procedure) ident(TPrefWin)operator(.)ident(PrefPCDrawTab)operator(()ident(Control)operator(:) ident(TCustomTabControl)operator(;)
  ident(TabIndex)operator(:) ident(Integer)operator(;) keyword(const) ident(Rect)operator(:) ident(TRect)operator(;) ident(Active)operator(:) ident(Boolean)operator(\))operator(;)
keyword(var)
  ident(PC)operator(:) ident(TPageControl)operator(;)
  ident(Page)operator(:) ident(TTabSheet)operator(;)
keyword(begin)
  ident(PC) operator(:=) ident(TPageControl)operator(()ident(Control)operator(\))operator(;)
  ident(Page) operator(:=) ident(PC)operator(.)ident(Pages)operator([)ident(TabIndex)operator(])operator(;)
  keyword(with) ident(PC)operator(.)ident(Canvas)operator(.)ident(Font) keyword(do) keyword(begin)
    keyword(if) ident(Page)operator(.)ident(Caption) operator(=) string<delimiter(')content(Common)delimiter(')> keyword(then)
      ident(Color) operator(:=) ident(clWhite)
    keyword(else) keyword(if) ident(Page)operator(.)ident(Caption) operator(=) string<delimiter(')content(Keys)delimiter(')> keyword(then)
      ident(Color) operator(:=) ident(clBrightCyan)
    keyword(else) keyword(if) ident(Page)operator(.)ident(Caption) operator(=) string<delimiter(')content(Values)delimiter(')> keyword(then)
      ident(Color) operator(:=) ident(clBrightPurple)
    keyword(else) keyword(if) ident(Page)operator(.)ident(Caption) operator(=) string<delimiter(')content(Data)delimiter(')> keyword(then)
      ident(Color) operator(:=) ident(clBrightBlue)
    keyword(else) keyword(if) ident(Page)operator(.)ident(Caption) operator(=) string<delimiter(')content(System)delimiter(')> keyword(then)
      ident(Color) operator(:=) ident(clBrightYellow)
    keyword(else)
      ident(Color) operator(:=) ident(clWhite)operator(;)
  keyword(end)operator(;)

  keyword(with) ident(PC)operator(.)ident(Canvas) keyword(do)
    keyword(if) ident(Active) keyword(then) keyword(begin)
      ident(Font)operator(.)ident(Style) operator(:=) operator([)ident(fsBold)operator(])operator(;)
      ident(Brush)operator(.)ident(Color) operator(:=) ident(clDarkGray)operator(;)
      ident(FillRect)operator(()ident(Rect)operator(\))operator(;)
      ident(TextOut)operator(()ident(Rect)operator(.)ident(Left) operator(+) integer(5)operator(,) ident(Rect)operator(.)ident(Top) operator(+) integer(3)operator(,) ident(Page)operator(.)ident(Caption)operator(\))operator(;)
    keyword(end) keyword(else) keyword(begin)
      ident(Font)operator(.)ident(Style) operator(:=) operator([)operator(])operator(;)
      ident(Brush)operator(.)ident(Color) operator(:=) ident(clDarkGray)operator(;)
      ident(FillRect)operator(()ident(Rect)operator(\))operator(;)
      ident(TextOut)operator(()ident(Rect)operator(.)ident(Left) operator(+) integer(3)operator(,) ident(Rect)operator(.)ident(Top) operator(+) integer(2)operator(,) ident(Page)operator(.)ident(Caption)operator(\))operator(;)
    keyword(end)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TPrefWin)operator(.)ident(PrefHostLoaded)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(PrefHost)operator(.)ident(KeyName) operator(:=) ident(PlutoUniPath)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TPrefWin)operator(.)ident(StandardPreviewChange)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  keyword(if) ident(Started) keyword(then)
    ident(RegTV)operator(.)ident(Repaint)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TPrefWin)operator(.)ident(DataPreviewChange)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  keyword(if) keyword(not) ident(Started) keyword(then)
    ident(Exit)operator(;)

  ident(ValuesWin)operator(.)ident(UpdateValues)operator(;)
  ident(RegTV)operator(.)ident(Repaint)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TPrefWin)operator(.)ident(UserNameEChange)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(StatusBar)operator(.)ident(Panels)operator([)integer(0)operator(])operator(.)ident(Text) operator(:=) ident(MainWin)operator(.)ident(Greeting)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TPrefWin)operator(.)ident(FormKeyDown)operator(()ident(Sender)operator(:) ident(TObject)operator(;) keyword(var) ident(Key)operator(:) ident(Word)operator(;)
  ident(Shift)operator(:) ident(TShiftState)operator(\))operator(;)
keyword(begin)
  keyword(if) ident(Key) operator(=) ident(VK_ESCAPE) keyword(then)
    ident(Close)operator(;)
    
  keyword(if) ident(Key) operator(=) ident(VK_SCROLL) keyword(then)
    ident(MainWin)operator(.)ident(FormKeyDown)operator(()ident(Sender)operator(,) ident(Key)operator(,) ident(Shift)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TPrefWin)operator(.)ident(FormDeactivate)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  keyword(if) ident(ActiveControl)operator(.)ident(Tag) operator(=) ident(EditControlFlag) keyword(then)
    ident(DeActivateThis)operator(()ident(ActiveControl)operator(\))operator(;)

  ident(AlphaBlendValue) operator(:=) integer(127)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TPrefWin)operator(.)ident(FormActivate)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  keyword(if) ident(Started) keyword(and) operator(()ident(ActiveControl)operator(.)ident(Tag) operator(=) ident(EditControlFlag)operator(\)) keyword(then)
    ident(ActivateThis)operator(()ident(ActiveControl)operator(\))operator(;)

  ident(AlphaBlendValue) operator(:=) integer(255)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TPrefWin)operator(.)ident(PrefValuesPCDrawTab)operator(()ident(Control)operator(:) ident(TCustomTabControl)operator(;)
  ident(TabIndex)operator(:) ident(Integer)operator(;) keyword(const) ident(Rect)operator(:) ident(TRect)operator(;) ident(Active)operator(:) ident(Boolean)operator(\))operator(;)
keyword(var)
  ident(PC)operator(:) ident(TPageControl)operator(;)
  ident(Page)operator(:) ident(TTabSheet)operator(;)
keyword(begin)
  ident(PC) operator(:=) ident(TPageControl)operator(()ident(Control)operator(\))operator(;)
  ident(Page) operator(:=) ident(PC)operator(.)ident(Pages)operator([)ident(TabIndex)operator(])operator(;)
  keyword(with) ident(PC)operator(.)ident(Canvas)operator(.)ident(Font) keyword(do) keyword(begin)
    keyword(if) ident(Page) operator(=) ident(StringPage) keyword(then)
      ident(Color) operator(:=) ident(clBrightRed)
    keyword(else) keyword(if) ident(Page) operator(=) ident(MultiStringPage) keyword(then)
      ident(Color) operator(:=) ident(clBrightPurple)
    keyword(else) keyword(if) ident(Page) operator(=) ident(IntPage) keyword(then)
      ident(Color) operator(:=) ident(clBrightBlue)
    keyword(else) keyword(if) ident(Page) operator(=) ident(BinaryPage) keyword(then)
      ident(Color) operator(:=) ident(clBrightGreen)operator(;)
  keyword(end)operator(;)

  keyword(with) ident(PC)operator(.)ident(Canvas) keyword(do)
    keyword(if) ident(Active) keyword(then) keyword(begin)
      ident(Font)operator(.)ident(Style) operator(:=) operator([)ident(fsBold)operator(])operator(;)
      ident(Brush)operator(.)ident(Color) operator(:=) ident(clDarkGray)operator(;)
      ident(FillRect)operator(()ident(Rect)operator(\))operator(;)
      ident(TextOut)operator(()ident(Rect)operator(.)ident(Left) operator(+) integer(18) operator(+) integer(5)operator(,) ident(Rect)operator(.)ident(Top) operator(+) integer(3)operator(,) ident(Page)operator(.)ident(Caption)operator(\))operator(;)
      ident(PC)operator(.)ident(Images)operator(.)ident(Draw)operator(()ident(PC)operator(.)ident(Canvas)operator(,) ident(Rect)operator(.)ident(Left) operator(+) integer(4)operator(,) ident(Rect)operator(.)ident(Top) operator(+) integer(2)operator(,) ident(Page)operator(.)ident(ImageIndex)operator(\))operator(;)
    keyword(end) keyword(else) keyword(begin)
      ident(Font)operator(.)ident(Style) operator(:=) operator([)operator(])operator(;)
      ident(Brush)operator(.)ident(Color) operator(:=) ident(clDarkGray)operator(;)
      ident(FillRect)operator(()ident(Rect)operator(\))operator(;)
      ident(TextOut)operator(()ident(Rect)operator(.)ident(Left) operator(+) integer(18) operator(+) integer(3)operator(,) ident(Rect)operator(.)ident(Top) operator(+) integer(2)operator(,) ident(Page)operator(.)ident(Caption)operator(\))operator(;)
      ident(PC)operator(.)ident(Images)operator(.)ident(Draw)operator(()ident(PC)operator(.)ident(Canvas)operator(,) ident(Rect)operator(.)ident(Left) operator(+) integer(1)operator(,) ident(Rect)operator(.)ident(Top) operator(+) integer(1)operator(,) ident(Page)operator(.)ident(ImageIndex)operator(\))operator(;)
    keyword(end)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TPrefWin)operator(.)ident(ShowDwordAsHexClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(DWordPreviewL)operator(.)ident(Caption) operator(:=) string<delimiter(')content(Preview: )delimiter(')> operator(+) ident(ValuesU)operator(.)ident(DataPreviewOfContext)operator(()
    ident(RegContext)operator(()ident(rdCardinal)operator(,) ident(Reverse)operator(()ident(ByteAOfHex)operator(()ident(HexOfCard)operator(()integer(1234567890)operator(,) integer(8)operator(\))operator(\))operator(\))operator(\))operator(\))operator(;)
  ident(DataPreviewChange)operator(()ident(Self)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TPrefWin)operator(.)ident(MainPreviewEChange)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  keyword(if) ident(MainPreviewE)operator(.)ident(Text) operator(=) string<delimiter(')delimiter(')> keyword(then)
    ident(MainPreviewCB)operator(.)ident(Caption) operator(:=) string<delimiter(')content(&Show Preview for Default Value)delimiter(')>
  keyword(else)
    ident(MainPreviewCB)operator(.)ident(Caption) operator(:=) string<delimiter(')content(&Show Preview for )delimiter(')> operator(+)
      ident(Quote)operator(()ident(MainPreviewE)operator(.)ident(Text)operator(\))operator(;)

  ident(StandardPreviewChange)operator(()ident(Self)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TPrefWin)operator(.)ident(FormCreate)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(UserNameE)operator(.)ident(DefaultValue) operator(:=) ident(UserName)operator(;)
  ident(MainPreviewEChange)operator(()ident(Self)operator(\))operator(;)
  ident(PrefPC)operator(.)ident(ActivePageIndex) operator(:=) integer(0)operator(;)
  ident(PrefValuesPC)operator(.)ident(ActivePageIndex) operator(:=) integer(0)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TPrefWin)operator(.)ident(ActivateIt)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(ActivateThis)operator(()ident(Sender)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TPrefWin)operator(.)ident(DeActivateIt)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(DeActivateThis)operator(()ident(Sender)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TPrefWin)operator(.)ident(ReloadBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(LoadPrefs)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TPrefWin)operator(.)ident(RunExternalHexEditBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(var)
  ident(FileName)operator(,) ident(TestValue)operator(:) keyword(string)operator(;)
keyword(begin)
  ident(FileName) operator(:=) ident(TempDir) operator(+) string<delimiter(')content(~test.bin)delimiter(')>operator(;)
  ident(TestValue) operator(:=) string<delimiter(')content(This is only a test.)delimiter(')> operator(+) ident(EOL) operator(+)
               string<delimiter(')content(Everything seems to be OK.)delimiter(')>operator(;)
  keyword(if) ident(SaveByteA)operator(()ident(ByteAOfStr)operator(()ident(TestValue)operator(\))operator(,) ident(FileName)operator(\)) keyword(then)
    ident(ExecFileWith)operator(()ident(ExternalHexEditE)operator(.)ident(Text)operator(,) ident(FileName)operator(\))
  keyword(else)
    ident(ShowMessage)operator(()string<delimiter(')content(Could not write into file:)delimiter(')> operator(+) ident(EOL) operator(+)
                ident(FileName)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TPrefWin)operator(.)ident(SelectExternalHexEditBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  keyword(with) ident(SelectExternalHexEditOD) keyword(do) keyword(begin)
    ident(InitialDir) operator(:=) ident(ExtractPath)operator(()ident(ExternalHexEditE)operator(.)ident(Text)operator(\))operator(;)
    ident(FileName) operator(:=) ident(ExtractFileName)operator(()ident(ExternalHexEditE)operator(.)ident(Text)operator(\))operator(;)
    keyword(if) ident(Execute) keyword(and) ident(FileExists)operator(()ident(FileName)operator(\)) keyword(then)
      ident(ExternalHexEditE)operator(.)ident(Text) operator(:=) ident(FileName)operator(;)
  keyword(end)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TPrefWin)operator(.)ident(ExternalHexEditEChange)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(RunExternalHexEditB)operator(.)ident(Enabled) operator(:=) ident(FileExists)operator(()ident(ExternalHexEditE)operator(.)ident(Text)operator(\))operator(;)
  keyword(if) ident(Assigned)operator(()ident(WorkWin)operator(\)) keyword(then)
    ident(WorkWin)operator(.)ident(ExternalEditB)operator(.)ident(Enabled) operator(:=) ident(RunExternalHexEditB)operator(.)ident(Enabled)operator(;)
  keyword(if) ident(Assigned)operator(()ident(MainWin)operator(\)) keyword(then)
    ident(MainWin)operator(.)ident(ExternalHexEditMI)operator(.)ident(Enabled) operator(:=) ident(RunExternalHexEditB)operator(.)ident(Enabled)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TPrefWin)operator(.)ident(DefaultBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  keyword(if) ident(mrYes)operator(=)ident(MessageDlg)operator(()string<delimiter(')content(Do you really want to reset the preferences)delimiter(')> operator(+) ident(EOL) operator(+)
   string<delimiter(')content(to their defaults?)delimiter(')> operator(+) ident(EOL) operator(+)
   string<delimiter(')content((This can not be undone.\))delimiter(')>operator(,) ident(mtWarning)operator(,) operator([)ident(mbYes)operator(,) ident(mbCancel)operator(])operator(,) integer(0)operator(\)) keyword(then) keyword(begin)
    ident(CopyFile)operator(()ident(PChar)operator(()ident(PlutoIniFileName)operator(\))operator(,) ident(PChar)operator(()ident(PlutoIniFileName) operator(+) string<delimiter(')content(.backup)delimiter(')>operator(\))operator(,) ident(False)operator(\))operator(;)
    comment(//PrefHost.KeyName :=  'Ini <' + PlutoIniFileName + '.backup>:';)
    comment(//PrefHost.Save;)
    comment(//PrefHost.KeyName := PlutoUniPath;)
    ident(PrefHost)operator(.)ident(BackUp)operator(;)
   keyword(end)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TPrefWin)operator(.)ident(RegisterAppCBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  keyword(with) ident(TXRegistry)operator(.)ident(Create) keyword(do)
    keyword(try)
      ident(RootKey) operator(:=) ident(HKLM)operator(;)
      ident(OpenKey)operator(()string<delimiter(')content(Software\\Microsoft\\Windows\\CurrentVersion\\App Paths)delimiter(')>operator(\))operator(;)
      keyword(if) ident(RegisterAppCB)operator(.)ident(Checked) keyword(then) keyword(begin)
        ident(OpenKey)operator(()string<delimiter(')content(pluto.exe)delimiter(')>operator(,) ident(True)operator(\))operator(;)
        ident(WriteString)operator(()string<delimiter(')delimiter(')>operator(,) ident(GetFileNew)operator(()ident(Application)operator(.)ident(ExeName)operator(\))operator(\))operator(;)
      keyword(end) keyword(else)
        ident(DeleteKey)operator(()string<delimiter(')content(pluto.exe)delimiter(')>operator(\))operator(;)
    keyword(finally)
      ident(Free)operator(;)
    keyword(end)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TPrefWin)operator(.)ident(SaveBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(PrefHost)operator(.)ident(Save)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TPrefWin)operator(.)ident(StringPreviewChange)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(StringPreviewL)operator(.)ident(Caption) operator(:=) string<delimiter(')content(Preview: )delimiter(')> operator(+) ident(ValuesU)operator(.)ident(DataPreviewOfContext)operator(()
    ident(RegContext)operator(()ident(rdString)operator(,) ident(ByteAOfStr)operator(()string<delimiter(')content(%windir%)delimiter(')>operator(\))operator(\))operator(\))operator(;)
  ident(DataPreviewChange)operator(()ident(Self)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TPrefWin)operator(.)ident(ShowTreeViewLinesCBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  keyword(with) ident(RegTV) keyword(do) keyword(begin)
    ident(ShowLines) operator(:=) ident(ShowTreeViewLinesCB)operator(.)ident(Checked)operator(;)
    ident(ShowButtons) operator(:=) ident(ShowLines)operator(;)
  keyword(end)operator(;)
  ident(StandardPreviewChange)operator(()ident(Sender)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TPrefWin)operator(.)ident(ShowListViewGridCBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(ValueList)operator(.)ident(GridLines) operator(:=) ident(ShowListViewGridCB)operator(.)ident(Checked)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TPrefWin)operator(.)ident(DefaultValueNameEChange)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(DefaultValueCaption) operator(:=) ident(DefaultValueNameE)operator(.)ident(Text)operator(;)
  keyword(if) ident(Started) keyword(then)
    ident(TreeWin)operator(.)ident(RegTVChange)operator(()ident(Self)operator(,) ident(RegTV)operator(.)ident(Selected)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TPrefWin)operator(.)ident(LoadPrefs)operator(;)
keyword(begin)
  ident(PrefHost)operator(.)ident(Load)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TPrefWin)operator(.)ident(UseExtendedModelCBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(WorkWin)operator(.)ident(MultiStringTypeRG)operator(.)ident(ItemIndex) operator(:=) ident(Integer)operator(()ident(UseExtendedModelCB)operator(.)ident(Checked)operator(\))operator(;)
  ident(DataPreviewChange)operator(()ident(Sender)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TPrefWin)operator(.)ident(IntegrationPageShow)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  keyword(with) ident(TXRegistry)operator(.)ident(Create) keyword(do)
    keyword(try)
      ident(RootKey) operator(:=) ident(HKLM)operator(;)
      ident(OpenKey)operator(()string<delimiter(')content(Software\\Microsoft\\Windows\\CurrentVersion\\App Paths\\pluto.exe)delimiter(')>operator(\))operator(;)
      ident(RegisterAppCB)operator(.)ident(Checked) operator(:=) ident(SameFileName)operator(()ident(GetFileNew)operator(()ident(ReadString)operator(()string<delimiter(')delimiter(')>operator(\))operator(\))operator(,)
        ident(GetFileNew)operator(()ident(Application)operator(.)ident(ExeName)operator(\))operator(\))operator(;)
    keyword(finally)
      ident(Free)operator(;)
    keyword(end)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TPrefWin)operator(.)ident(GotoPlutoKeyBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(MainWin)operator(.)ident(GotoKey)operator(()string<delimiter(')content(HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\App Paths\\pluto.exe)delimiter(')>operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TPrefWin)operator(.)ident(FormShow)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(PrefHost)operator(.)ident(Load)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TPrefWin)operator(.)ident(KeysSingleClickCBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(TreeWin)operator(.)ident(CheckRegTVHotTrack)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TPrefWin)operator(.)ident(ValuesSingleClickCBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(ValuesWin)operator(.)ident(CheckValueListHotTrack)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TPrefWin)operator(.)ident(QuotersEChange)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(var)
  ident(QBegin)operator(,) ident(QEnd)operator(:) keyword(string)operator(;)
keyword(begin)
  keyword(with) ident(QuotersE) keyword(do) keyword(begin)
    keyword(if) ident(Text) operator(=) string<delimiter(')delimiter(')> keyword(then)
      ident(QBegin) operator(:=) string<delimiter(')delimiter(')>
    keyword(else)
      ident(QBegin) operator(:=) ident(Text)operator([)integer(1)operator(])operator(;)
    keyword(if) ident(Length)operator(()ident(Text)operator(\)) operator(<) integer(2) keyword(then)
      ident(QEnd) operator(:=) ident(QBegin)
    keyword(else)
      ident(QEnd) operator(:=) ident(Text)operator([)integer(2)operator(])operator(;)
  keyword(end)operator(;)

  keyword(if) operator(()ident(QBegin) operator(<>) ident(StringQuoterBegin)operator(\)) keyword(or) operator(()ident(QEnd) operator(<>) ident(StringQuoterEnd)operator(\)) keyword(then) keyword(begin)
    ident(StringQuoterBegin) operator(:=) ident(QBegin)operator(;)
    ident(StringQuoterEnd) operator(:=) ident(QEnd)operator(;)
    ident(StringPreviewChange)operator(()ident(Self)operator(\))operator(;)
  keyword(end)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TPrefWin)operator(.)ident(SplashScreenCBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  keyword(if) ident(Started) keyword(and) ident(Assigned)operator(()ident(SplashWin)operator(\)) keyword(then)
    ident(SplashWin)operator(.)ident(SplashScreenCB)operator(.)ident(Checked) operator(:=) ident(SplashScreenCB)operator(.)ident(Checked)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TPrefWin)operator(.)ident(SaveBMouseMove)operator(()ident(Sender)operator(:) ident(TObject)operator(;) ident(Shift)operator(:) ident(TShiftState)operator(;) ident(X)operator(,)
  ident(Y)operator(:) ident(Integer)operator(\))operator(;)
keyword(begin)
  ident(Label2)operator(.)ident(Font)operator(.)ident(Color) operator(:=) ident(clBrightRed)operator(;)
  ident(Application)operator(.)ident(ProcessMessages)operator(;)
  ident(Sleep)operator(()integer(200)operator(\))operator(;)
  ident(Label2)operator(.)ident(Font)operator(.)ident(Color) operator(:=) ident(clWhite)operator(;)
keyword(end)operator(;)

keyword(end)operator(.)
keyword(unit) ident(RegScanner)operator(;)

keyword(interface)

keyword(uses)
  ident(Windows)operator(,) ident(SysUtils)operator(,) ident(Dialogs)operator(,) ident(Classes)operator(,)
  ident(YTools)operator(,) ident(YTypes)operator(,) ident(XReg)operator(,) ident(Clock)operator(;)

keyword(type)
  ident(TRegScanThread) operator(=) keyword(class)operator(;)

  ident(TRegScanKeyEvent) operator(=) keyword(procedure) operator(()ident(Sender)operator(:) ident(TRegScanThread)operator(;) keyword(const) ident(KeyName)operator(:) keyword(string)operator(;) ident(Key)operator(:) ident(HKEY)operator(;) ident(Info)operator(:) ident(TRegKeyInfo)operator(\)) keyword(of) keyword(object)operator(;)
  ident(TRegScanValueEvent) operator(=) keyword(procedure) operator(()ident(Sender)operator(:) ident(TRegScanThread)operator(;) keyword(const) ident(ValueName)operator(:) keyword(string)operator(;) ident(Context)operator(:) ident(TRegContext)operator(\)) keyword(of) keyword(object)operator(;)

  ident(TRegScanTask) operator(=) keyword(record)
    ident(Root)operator(:) keyword(string)operator(;)
    ident(Key)operator(:) ident(HKEY)operator(;)
  keyword(end)operator(;)
  ident(TRegScanTasks) operator(=) keyword(array) keyword(of) ident(TRegScanTask)operator(;)

  ident(TRegScanThread) operator(=) keyword(class)operator(()ident(TThread)operator(\))
  directive(private)
    ident(Keys)operator(,) ident(KeysOK)operator(,) ident(Values)operator(,) ident(ValuesOK)operator(:) ident(Integer)operator(;)
    ident(DoScanValues)operator(:) ident(Boolean)operator(;)
    ident(FOnKey)operator(:) ident(TRegScanKeyEvent)operator(;)
    ident(FOnValue)operator(:) ident(TRegScanValueEvent)operator(;)
    ident(FOnFaileKey)operator(:) ident(TRegScanKeyEvent)operator(;)
  directive(protected)
    keyword(procedure) ident(ScanKey)operator(()ident(Key)operator(:) ident(HKEY)operator(;) keyword(const) ident(KeyName)operator(:) keyword(string) operator(=) string<delimiter(')delimiter(')>operator(\))operator(;) directive(virtual)operator(;)
    keyword(procedure) ident(ScanValues)operator(()ident(Key)operator(:) ident(HKEY)operator(;) ident(Info)operator(:) ident(TRegKeyInfo)operator(\))operator(;) directive(virtual)operator(;)

  directive(public)
    ident(Path)operator(:) keyword(string)operator(;)
    ident(CurrentTask)operator(:) ident(TRegScanTask)operator(;)
    ident(Tasks)operator(:) ident(TRegScanTasks)operator(;)
    keyword(destructor) ident(Destroy)operator(;) directive(override)operator(;)
    keyword(procedure) ident(Execute)operator(;) directive(override)operator(;)
    keyword(procedure) ident(ScanAll)operator(;)
    keyword(function) ident(CurrentPath)operator(:) keyword(string)operator(;)
  directive(published)
    keyword(constructor) ident(CreateIt)operator(()ident(PriorityLevel)operator(:) ident(TThreadPriority)operator(;)
      ident(DoScanValues)operator(:) ident(Boolean) operator(=) ident(True)operator(;) ident(Tasks)operator(:) ident(TRegScanTasks) operator(=) keyword(nil)operator(\))operator(;)

    keyword(property) ident(OnKey)operator(:) ident(TRegScanKeyEvent) directive(read) ident(FOnKey) directive(write) ident(FOnKey)operator(;)
    keyword(property) ident(OnValue)operator(:) ident(TRegScanValueEvent) directive(read) ident(FOnValue) directive(write) ident(FOnValue)operator(;)
    keyword(property) ident(OnFaileKey)operator(:) ident(TRegScanKeyEvent) directive(read) ident(FOnFaileKey) directive(write) ident(FOnFaileKey)operator(;)
  keyword(end)operator(;)

keyword(implementation)

comment({ TRegScanThread })

keyword(constructor) ident(TRegScanThread)operator(.)ident(CreateIt)operator(()ident(PriorityLevel)operator(:) ident(TThreadPriority)operator(;)
  ident(DoScanValues)operator(:) ident(Boolean) operator(=) ident(True)operator(;) ident(Tasks)operator(:) ident(TRegScanTasks) operator(=) keyword(nil)operator(\))operator(;)
keyword(begin)
  keyword(inherited) ident(Create)operator(()ident(True)operator(\))operator(;)
  ident(Priority) operator(:=) ident(PriorityLevel)operator(;)
  ident(FreeOnTerminate) operator(:=) ident(False)operator(;)   
  ident(Self)operator(.)ident(DoScanValues) operator(:=) ident(DoScanValues)operator(;)
  ident(Self)operator(.)ident(Tasks) operator(:=) ident(Tasks)operator(;)
keyword(end)operator(;)

keyword(destructor) ident(TRegScanThread)operator(.)ident(Destroy)operator(;)
keyword(begin)
  keyword(inherited)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TRegScanThread)operator(.)ident(ScanAll)operator(;)
keyword(var)
  ident(i)operator(:) ident(Integer)operator(;)
keyword(begin)
  ident(Keys) operator(:=) integer(0)operator(;)
  ident(KeysOK) operator(:=) integer(0)operator(;)
  ident(Values) operator(:=) integer(0)operator(;)
  ident(ValuesOK) operator(:=) integer(0)operator(;)

  keyword(for) ident(i) operator(:=) integer(0) keyword(to) ident(High)operator(()ident(Tasks)operator(\)) keyword(do) keyword(begin)
    ident(CurrentTask) operator(:=) ident(Tasks)operator([)ident(i)operator(])operator(;)
    keyword(with) ident(CurrentTask) keyword(do) keyword(begin)
      ident(Inc)operator(()ident(Keys)operator(\))operator(;)
      ident(ScanKey)operator(()ident(Key)operator(\))operator(;)
    keyword(end)operator(;)

    keyword(if) ident(Terminated) keyword(then) ident(Break)operator(;)
  keyword(end)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TRegScanThread)operator(.)ident(ScanValues)operator(()ident(Key)operator(:) ident(HKEY)operator(;) ident(Info)operator(:) ident(TRegKeyInfo)operator(\))operator(;)
keyword(var)
  ident(i)operator(:) ident(Integer)operator(;)
  ident(MaxLen)operator(,) ident(NameLen)operator(,) ident(Len)operator(,) ident(Typ)operator(:) ident(Cardinal)operator(;)
  ident(p)operator(:) ident(PChar)operator(;)
  ident(Buffer)operator(:) ident(TByteA)operator(;)

  keyword(procedure) ident(ScanValue)operator(()ident(ValueName)operator(:) keyword(string)operator(;) ident(Typ)operator(:) ident(TRegDataType)operator(;) ident(Data)operator(:) ident(TByteA)operator(\))operator(;)
  keyword(begin)
    keyword(if) ident(Assigned)operator(()ident(OnValue)operator(\)) keyword(then)
      ident(OnValue)operator(()ident(Self)operator(,) ident(ValueName)operator(,) ident(RegContext)operator(()ident(Typ)operator(,) ident(Data)operator(\))operator(\))operator(;)
    ident(Inc)operator(()ident(ValuesOK)operator(\))operator(;)
  keyword(end)operator(;)

keyword(begin)
  ident(MaxLen) operator(:=) ident(Info)operator(.)ident(MaxValueLen) operator(+) integer(1)operator(;) comment(//Include Nullbyte)
  ident(SetLength)operator(()ident(Buffer)operator(,) ident(Info)operator(.)ident(MaxDataLen)operator(\))operator(;)
  ident(GetMem)operator(()ident(p)operator(,) ident(MaxLen)operator(\))operator(;)

  ident(Inc)operator(()ident(Values)operator(,) ident(Info)operator(.)ident(NumValues)operator(\))operator(;)
  keyword(for) ident(i) operator(:=) integer(0) keyword(to) ident(Info)operator(.)ident(NumValues)operator(-)integer(1) keyword(do) keyword(begin)
    ident(NameLen) operator(:=) ident(MaxLen)operator(;)
    ident(Len) operator(:=) ident(Info)operator(.)ident(MaxDataLen)operator(;)
    keyword(if) ident(Success)operator(()ident(RegEnumValue)operator(()ident(Key)operator(,) ident(i)operator(,) ident(p)operator(,) ident(NameLen)operator(,) keyword(nil)operator(,) operator(@)ident(Typ)operator(,) ident(Pointer)operator(()ident(Buffer)operator(\))operator(,)
     operator(@)ident(Len)operator(\))operator(\)) keyword(then)
      ident(ScanValue)operator(()ident(Copy)operator(()ident(p)operator(,) integer(0)operator(,) ident(NameLen)operator(\))operator(,) ident(Typ)operator(,) ident(Copy)operator(()ident(Buffer)operator(,) integer(0)operator(,) ident(Len)operator(\))operator(\))
    keyword(else)
      ident(Yield)operator(;)
  keyword(end)operator(;)
  ident(FreeMem)operator(()ident(p)operator(,) ident(MaxLen)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TRegScanThread)operator(.)ident(ScanKey)operator(()ident(Key)operator(:) ident(HKEY)operator(;) keyword(const) ident(KeyName)operator(:) keyword(string) operator(=) string<delimiter(')delimiter(')>operator(\))operator(;)
keyword(var)
  ident(i)operator(:) ident(Integer)operator(;)
  ident(NewHKEY)operator(:) ident(HKEY)operator(;)
  ident(Info)operator(:) ident(TRegKeyInfo)operator(;)
  ident(l)operator(,) ident(Len)operator(:) ident(DWORD)operator(;)
  ident(p)operator(:) ident(PChar)operator(;)
  ident(z)operator(:) ident(Integer)operator(;)
keyword(begin)
  keyword(if) ident(Terminated) keyword(then) ident(Exit)operator(;)

  keyword(with) ident(Info) keyword(do) keyword(begin)
    keyword(if) keyword(not) ident(Success)operator(()ident(RegQueryInfoKey)operator(()ident(Key)operator(,) keyword(nil)operator(,) keyword(nil)operator(,) keyword(nil)operator(,) operator(@)ident(NumSubKeys)operator(,)
     operator(@)ident(MaxSubKeyLen)operator(,) keyword(nil)operator(,) operator(@)ident(NumValues)operator(,) operator(@)ident(MaxValueLen)operator(,) operator(@)ident(MaxDataLen)operator(,)
     keyword(nil)operator(,) keyword(nil)operator(\))operator(\)) keyword(then)
      ident(Exit)operator(;)

    keyword(if) ident(Assigned)operator(()ident(OnKey)operator(\)) keyword(then)
      ident(OnKey)operator(()ident(Self)operator(,) ident(KeyName)operator(,) ident(Key)operator(,) ident(Info)operator(\))operator(;)
    keyword(if) ident(DoScanValues) keyword(and) operator(()ident(NumValues) operator(>) integer(0)operator(\)) keyword(then)
      ident(ScanValues)operator(()ident(Key)operator(,) ident(Info)operator(\))operator(;)

    keyword(if) ident(Info)operator(.)ident(NumSubKeys) operator(>) integer(0) keyword(then) keyword(begin)
      ident(Inc)operator(()ident(Keys)operator(,) ident(NumSubKeys)operator(\))operator(;)

      ident(Len) operator(:=) ident(MaxSubKeyLen) operator(+) integer(1)operator(;)
      ident(GetMem)operator(()ident(p)operator(,) ident(Len)operator(\))operator(;)

      keyword(for) ident(i) operator(:=) integer(0) keyword(to) ident(NumSubKeys)operator(-)integer(1) keyword(do) keyword(begin)
        ident(l) operator(:=) ident(Len)operator(;)
        ident(RegEnumKeyEx)operator(()ident(Key)operator(,) ident(i)operator(,) ident(p)operator(,) ident(l)operator(,) keyword(nil)operator(,) keyword(nil)operator(,) keyword(nil)operator(,) keyword(nil)operator(\))operator(;)
        keyword(if) ident(Success)operator(()ident(RegOpenKey)operator(()ident(Key)operator(,) ident(p)operator(,) ident(NewHKEY)operator(\))operator(\)) keyword(then) keyword(begin)
          ident(z) operator(:=) ident(Length)operator(()ident(Path)operator(\))operator(;)
          ident(Path) operator(:=) ident(Path) operator(+) char<delimiter(')content(\\)delimiter(')> operator(+) ident(p)operator(;)
          ident(ScanKey)operator(()ident(NewHKEY)operator(,) ident(p)operator(\))operator(;)
          ident(RegCloseKey)operator(()ident(NewHKEY)operator(\))operator(;)
          ident(SetLength)operator(()ident(Path)operator(,) ident(z)operator(\))operator(;)
        keyword(end) keyword(else)
          keyword(if) ident(Assigned)operator(()ident(OnFaileKey)operator(\)) keyword(then)
            ident(OnFaileKey)operator(()ident(Self)operator(,) ident(p)operator(,) ident(Key)operator(,) ident(Info)operator(\))operator(;)

        keyword(if) ident(Terminated) keyword(then)
          ident(Break)operator(;)
      keyword(end)operator(;)
      ident(FreeMem)operator(()ident(p)operator(,) ident(Len)operator(\))operator(;)
    keyword(end)operator(;)
  keyword(end)operator(;)

  ident(Inc)operator(()ident(KeysOK)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TRegScanThread)operator(.)ident(Execute)operator(;)
keyword(var)
  ident(Secs)operator(:) ident(Double)operator(;)
keyword(begin)
  keyword(with) ident(TClock)operator(.)ident(Create) keyword(do) keyword(begin)
    ident(ScanAll)operator(;)
    ident(Secs) operator(:=) ident(SecondsPassed)operator(;)
    ident(Free)operator(;)
  keyword(end)operator(;)

  ident(WriteLn)operator(()string<delimiter(')content(finished.)delimiter(')>operator(\))operator(;)
  ident(WriteLn)operator(()  ident(Format)operator(()string<delimiter(')content(Keys:   %6d counted (%3d failed\))delimiter(')>operator(,) operator([)ident(Keys)operator(,) ident(Keys) operator(-) ident(KeysOK)operator(])operator(\))operator(\))operator(;)
  keyword(if) ident(DoScanValues) keyword(then)
    ident(WriteLn)operator(()ident(Format)operator(()string<delimiter(')content(Values: %6d counted (%3d failed\))delimiter(')>operator(,) operator([)ident(Values)operator(,) ident(Values) operator(-) ident(ValuesOK)operator(])operator(\))operator(\))operator(;)
  ident(WriteLn)operator(()string<delimiter(')content(t )delimiter(')> operator(+) ident(Format)operator(()string<delimiter(')content(%.2f)delimiter(')>operator(,) operator([)ident(Secs)operator(])operator(\)) operator(+) string<delimiter(')content( seconds)delimiter(')>operator(\))operator(;)
  keyword(if) ident(Secs) operator(>) integer(0) keyword(then)
    ident(WriteLn)operator(()string<delimiter(')content(r )delimiter(')> operator(+) ident(Format)operator(()string<delimiter(')content(%.0f)delimiter(')>operator(,) operator([)ident(Keys) operator(/) ident(Secs)operator(])operator(\)) operator(+) string<delimiter(')content( k/s)delimiter(')>operator(\))operator(;)
keyword(end)operator(;)

keyword(function) ident(TRegScanThread)operator(.)ident(CurrentPath)operator(:) keyword(string)operator(;)
keyword(begin)
  ident(Result) operator(:=) ident(CurrentTask)operator(.)ident(Root) operator(+) ident(Path)operator(;)
keyword(end)operator(;)

keyword(end)operator(.)
keyword(unit) ident(RegTV)operator(;)

keyword(interface)

keyword(uses)
  ident(Windows)operator(,) ident(Messages)operator(,) ident(SysUtils)operator(,) ident(Classes)operator(,) ident(Graphics)operator(,) ident(Controls)operator(,) ident(Forms)operator(,) ident(Dialogs)operator(,)
  ident(ComCtrls)operator(;)

keyword(type)
  ident(TRegTV) operator(=) keyword(class)operator(()ident(TTreeView)operator(\))
  directive(private)
    comment({ Private-Deklarationen })
  directive(protected)
    comment({ Protected-Deklarationen })
  directive(public)
    comment({ Public-Deklarationen })
  directive(published)
    comment({ Published-Deklarationen })
  keyword(end)operator(;)

keyword(procedure) ident(Register)operator(;)

keyword(implementation)

keyword(procedure) ident(Register)operator(;)
keyword(begin)
  ident(RegisterComponents)operator(()string<delimiter(')content(pluto)delimiter(')>operator(,) operator([)ident(TRegTV)operator(])operator(\))operator(;)
keyword(end)operator(;)

keyword(end)operator(.)
keyword(unit) ident(Sisyphus)operator(;)

keyword(interface)

keyword(uses)
  ident(Windows)operator(,) ident(Classes)operator(,) ident(SysUtils)operator(,) ident(XReg)operator(,) ident(YTools)operator(,) ident(YTypes)operator(,) ident(Clock)operator(;)

keyword(type)
  ident(TSpyValue) operator(=) keyword(class)
    ident(Name)operator(:) keyword(string)operator(;)
    ident(Next)operator(:) ident(TSpyValue)operator(;)
    comment(//DIC: TByteA;)
    ident(Typ)operator(:) ident(TXRegDataType)operator(;)
    ident(Data)operator(:) ident(TByteA)operator(;)
    keyword(constructor) ident(Create)operator(()ident(AName)operator(:) keyword(string)operator(\))operator(;)
  keyword(end)operator(;)

  ident(TSpyKey) operator(=) keyword(class)
  directive(public)
    ident(Parent)operator(:) ident(TSpyKey)operator(;)
    ident(Name)operator(:) keyword(string)operator(;)
    ident(Next)operator(:) ident(TSpyKey)operator(;)
    ident(Keys)operator(:) ident(TSpyKey)operator(;)
    ident(Values)operator(:) ident(TSpyValue)operator(;)
    keyword(procedure) ident(Spy)operator(()ident(AHKEY)operator(:) ident(HKEY)operator(\))operator(;)
    keyword(function) ident(Path)operator(:) keyword(string)operator(;)
    keyword(constructor) ident(Create)operator(()ident(AParent)operator(:) ident(TSpyKey)operator(;) ident(AName)operator(:) keyword(string)operator(\))operator(;)
    keyword(destructor) ident(Destroy)operator(;) directive(override)operator(;)
  keyword(end)operator(;)

keyword(var)
  ident(Reg)operator(:) ident(TXRegistry)operator(;)
  ident(HKLMSpyKey)operator(,) ident(HKUSpyKey)operator(:) ident(TSpyKey)operator(;)
  ident(Started)operator(:) ident(Boolean) operator(=) ident(False)operator(;)

keyword(implementation)

keyword(uses)
  ident(Plutomain)operator(;)

keyword(procedure) ident(AddChange)operator(()ident(M)operator(:) keyword(string)operator(\))operator(;)
keyword(begin)
  ident(Yield)operator(;)
  comment(//AddHint(M\);)
keyword(end)operator(;)

comment({ TSpyValue })

keyword(constructor) ident(TSpyValue)operator(.)ident(Create)operator(()ident(AName)operator(:) keyword(string)operator(\))operator(;)
keyword(begin)
  ident(Name) operator(:=) ident(AName)operator(;)
  ident(Next) operator(:=) keyword(nil)operator(;)
keyword(end)operator(;)

comment({ TSpyKey })

keyword(constructor) ident(TSpyKey)operator(.)ident(Create)operator(()ident(AParent)operator(:) ident(TSpyKey)operator(;) ident(AName)operator(:) keyword(string)operator(\))operator(;)
keyword(begin)
  ident(Name) operator(:=) ident(AName)operator(;)
  ident(Parent) operator(:=) ident(AParent)operator(;)

  ident(Next) operator(:=) keyword(nil)operator(;)
  ident(Keys) operator(:=) keyword(nil)operator(;)
  ident(Values) operator(:=) keyword(nil)operator(;)
keyword(end)operator(;)

keyword(destructor) ident(TSpyKey)operator(.)ident(Destroy)operator(;)
keyword(var)
  ident(Value)operator(,) ident(NextValue)operator(:) ident(TSpyValue)operator(;)
  ident(Key)operator(,) ident(NextKey)operator(:) ident(TSpyKey)operator(;)
keyword(begin)
  ident(Value) operator(:=) ident(Values)operator(;)
  keyword(while) ident(Value) operator(<>) keyword(nil) keyword(do) keyword(begin)
    ident(NextValue) operator(:=) ident(Value)operator(.)ident(Next)operator(;)
    ident(Value)operator(.)ident(Free)operator(;)
    ident(Value) operator(:=) ident(NextValue)operator(;)
  keyword(end)operator(;)

  ident(Key) operator(:=) ident(Keys)operator(;)
  keyword(while) ident(Key) operator(<>) keyword(nil) keyword(do) keyword(begin)
    ident(NextKey) operator(:=) ident(Key)operator(.)ident(Next)operator(;)
    ident(Key)operator(.)ident(Free)operator(;)
    ident(Key) operator(:=) ident(NextKey)operator(;)
  keyword(end)operator(;)

  keyword(inherited)operator(;)
keyword(end)operator(;)

keyword(function) ident(TSpyKey)operator(.)ident(Path)operator(:) keyword(string)operator(;)
keyword(begin)
  keyword(if) ident(Assigned)operator(()ident(Parent)operator(\)) keyword(then)
    ident(Result) operator(:=) ident(Parent)operator(.)ident(Path) operator(+) char<delimiter(')content(\\)delimiter(')>
  keyword(else)
    ident(Result) operator(:=) string<delimiter(')content(Reg: )delimiter(')>operator(;)

  ident(Result) operator(:=) ident(Result) operator(+) ident(Name)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TSpyKey)operator(.)ident(Spy)operator(()ident(AHKEY)operator(:) ident(HKEY)operator(\))operator(;)
keyword(var)
  ident(SL)operator(:) ident(TStringList)operator(;)

  keyword(procedure) ident(CompareValues)operator(;)
  keyword(var)
    ident(i)operator(:) ident(Integer)operator(;)
    ident(Value)operator(,) ident(LastValue)operator(,) ident(NewValue)operator(,) ident(SearchValue)operator(:) ident(TSpyValue)operator(;)
  keyword(begin)
    comment(//OK, this part is a little bit complicate. So I will comment very much.)
    comment(//First, two terms are important:)
    comment(//<REAL> means the list of values that will be read from the registry now:)
    ident(Reg)operator(.)ident(GetValueNames)operator(()ident(SL)operator(\))operator(;)
    comment(//So <REAL> is TStringList.)

    comment(//<CURRENT> means the image that was saved before.)
    comment(//Here, it is a linear list of TSpyValue objects. That means that you can)
    comment(//only get X.Next and not X.Prev! However, I use "X.Prev" to simplify)
    comment(//some comments.)

    comment(//!!! Comparing means: Make <CURRENT> fit <REAL> !!!)

    comment(//If <CURRENT> wasn't saved before, it is just empty.)

    comment(//!!! There is no difference in comparing and saving in this method !!!)

    comment(//Building means: Comparing with an empty image.)

    comment(//We go through <REAL> and make <CURRENT> fit it)

    comment(//The following rules are important:)
    comment(//Value = "The currently interesting value.)
    comment(//LastValue = "The value with X.Next = Value" = "Value.Pref")

    ident(LastValue) operator(:=) keyword(nil)operator(;) comment(// := "Values.Prev")
    ident(Value) operator(:=) ident(Values)operator(;) comment(// := "LastValue.Next")

    comment(//Now compare step by step)
    keyword(for) ident(i) operator(:=) integer(0) keyword(to) ident(SL)operator(.)ident(Count)operator(-)integer(1) keyword(do) keyword(begin)
      keyword(if) ident(Assigned)operator(()ident(Value)operator(\)) keyword(and) operator(()ident(SL)operator([)ident(i)operator(]) operator(=) ident(Value)operator(.)ident(Name)operator(\)) keyword(then) keyword(begin)
        comment(//cV=  Normally (0.9999\) everything's the same)
        ident(LastValue) operator(:=) ident(Value)operator(;)
        ident(Value) operator(:=) ident(Value)operator(.)ident(Next)operator(;)
      keyword(end) keyword(else) keyword(begin) comment(//Something's different? Yes, the IMPORTANT rest (0.0001\)\))
        comment(//Because the list finally must exactly fit SL, the "SL[i] value" hast)
        comment(//to be inserted right here. But first let's look...)

        comment(//Maybe it was just moved? So search for it...)
        ident(NewValue) operator(:=) keyword(nil)operator(;)
        keyword(if) ident(Assigned)operator(()ident(Value)operator(\)) keyword(then) keyword(begin)
          ident(SearchValue) operator(:=) ident(Value)operator(;)
          keyword(while) ident(Assigned)operator(()ident(SearchValue)operator(.)ident(Next)operator(\)) keyword(do)
            keyword(if) operator(()ident(SearchValue)operator(.)ident(Next)operator(.)ident(Name) operator(=) ident(SL)operator([)ident(i)operator(])operator(\)) keyword(then) keyword(begin)
              comment(//cV\\)
              ident(NewValue) operator(:=) ident(SearchValue)operator(.)ident(Next)operator(;)
              ident(AddChange)operator(()string<delimiter(')content(cV\\ )delimiter(')> operator(+) ident(Path)operator(\))operator(;)
              ident(SearchValue)operator(.)ident(Next) operator(:=) ident(SearchValue)operator(.)ident(Next)operator(.)ident(Next)operator(;)
            ident(Break)operator(;) keyword(end)operator(;)
        keyword(end)operator(;)

        keyword(if) keyword(not) ident(Assigned)operator(()ident(NewValue)operator(\)) keyword(then) keyword(begin)
          comment(//cV+  No, not found! So it is new...)
          ident(NewValue) operator(:=) ident(TSpyValue)operator(.)ident(Create)operator(()ident(SL)operator([)ident(i)operator(])operator(\))operator(;)
          ident(AddChange)operator(()string<delimiter(')content(cV+ )delimiter(')> operator(+) ident(Path) operator(+) string<delimiter(')content(\\\\)delimiter(')> operator(+) ident(NewValue)operator(.)ident(Name)operator(\))operator(;)
          keyword(with) ident(NewValue) keyword(do) keyword(begin)
            ident(Typ) operator(:=) ident(Reg)operator(.)ident(GetDataType)operator(()ident(SL)operator([)ident(i)operator(])operator(\))operator(;)
            ident(Data) operator(:=) ident(Reg)operator(.)ident(ReadBin)operator(()ident(SL)operator([)ident(i)operator(])operator(\))operator(;)
          keyword(end)operator(;)
        keyword(end)operator(;)

        comment(//The new object now must be placed after the last value)
        keyword(if) ident(Assigned)operator(()ident(LastValue)operator(\)) keyword(then) keyword(begin)
          ident(LastValue)operator(.)ident(Next) operator(:=) ident(NewValue)operator(;)
        keyword(end) keyword(else) keyword(begin)
          comment(//If it's the first value, we don't have LastValue defined)
          comment(//So we have to set the "Root" to it)
          ident(Values) operator(:=) ident(NewValue)operator(;)
        keyword(end)operator(;)
        comment(//Now the rest of <CURRENT> has to be placed after the new value)
        ident(NewValue)operator(.)ident(Next) operator(:=) ident(Value)operator(;)
        comment(//And LastValue also has to refreshed: It is "Value.Pref" = NewValue!)
        ident(LastValue) operator(:=) ident(NewValue)operator(;)
      keyword(end)operator(;)
    keyword(end)operator(;)

    comment(//Because the whole <CURRENT> before Value is exactly <REAL>, the rest)
    comment(//(if there is one\) must have been deleted!)

    comment(//So first let's ensure that <CURRENT> ends here:)
    keyword(if) ident(Assigned)operator(()ident(LastValue)operator(\)) keyword(then) keyword(begin)
      ident(LastValue)operator(.)ident(Next) operator(:=) keyword(nil)operator(;)
    keyword(end) keyword(else) keyword(begin)
      comment(//Another time: <CURRENT> is empty now, so set Values instead)
      ident(Values) operator(:=) keyword(nil)operator(;)
    keyword(end)operator(;)

    comment(//Now, the first value that maybe was "cut" off is Value:)
    keyword(while) ident(Assigned)operator(()ident(Value)operator(\)) keyword(do) keyword(begin)
      comment(//cV- So, here really something HAS been deleted)
      ident(LastValue) operator(:=) ident(Value)operator(;)
      ident(Value) operator(:=) ident(Value)operator(.)ident(Next)operator(;)
      ident(AddChange)operator(()string<delimiter(')content(cV- )delimiter(')> operator(+) ident(Path) operator(+) string<delimiter(')content(\\\\)delimiter(')> operator(+) ident(LastValue)operator(.)ident(Name)operator(\))operator(;)
      ident(LastValue)operator(.)ident(Free)operator(;)
    keyword(end)operator(;)
  keyword(end)operator(;)

  keyword(procedure) ident(CompareData)operator(;)
  keyword(var)
    ident(Value)operator(:) ident(TSpyValue)operator(;)
    ident(Typ)operator(:) ident(TXRegDataType)operator(;)
    ident(Data)operator(:) ident(TByteA)operator(;)
  keyword(begin)
    comment(//So, finally <CURRENT> = <REAL>. That means we now can compare the data:)
    ident(Value) operator(:=) ident(Values)operator(;)
    keyword(while) ident(Assigned)operator(()ident(Value)operator(\)) keyword(do) keyword(begin)
      ident(Typ) operator(:=) ident(Reg)operator(.)ident(GetDataType)operator(()ident(Value)operator(.)ident(Name)operator(\))operator(;)
      ident(Data) operator(:=) ident(Reg)operator(.)ident(ReadBin)operator(()ident(Value)operator(.)ident(Name)operator(\))operator(;)
      keyword(if) ident(Typ) operator(<>) ident(Value)operator(.)ident(Typ) keyword(then) keyword(begin)
        comment(//cT#)
        ident(AddChange)operator(()string<delimiter(')content(cT# )delimiter(')> operator(+) ident(Path) operator(+) string<delimiter(')content(\\\\)delimiter(')> operator(+) ident(Value)operator(.)ident(Name)operator(\))operator(;)
        ident(Value)operator(.)ident(Typ) operator(:=) ident(Typ)operator(;)
      keyword(end)operator(;)
      keyword(if) keyword(not) ident(SameByteA)operator(()ident(Data)operator(,) ident(Value)operator(.)ident(Data)operator(\)) keyword(then) keyword(begin)
        comment(//cD#)
        ident(AddChange)operator(()string<delimiter(')content(cD# )delimiter(')> operator(+) ident(Path) operator(+) string<delimiter(')content(\\\\)delimiter(')> operator(+) ident(Value)operator(.)ident(Name)operator(\))operator(;)
        ident(Value)operator(.)ident(Data) operator(:=) ident(Data)operator(;)
      keyword(end)operator(;)

      ident(Value) operator(:=) ident(Value)operator(.)ident(Next)operator(;)
    keyword(end)operator(;)
  keyword(end)operator(;)

  keyword(procedure) ident(CompareKeys)operator(;)
  keyword(var)
    ident(i)operator(:) ident(Integer)operator(;)
    ident(Key)operator(,) ident(LastKey)operator(,) ident(NewKey)operator(,) ident(SearchKey)operator(:) ident(TSpyKey)operator(;)
    ident(NewHKEY)operator(:) ident(HKEY)operator(;)
  keyword(begin)
    comment(//OK, this part is a little bit complicate. So I will comment very much.)
    comment(//First, two terms are important:)
    comment(//<REAL> means the list of keys that will be read from the registry now:)
    ident(Reg)operator(.)ident(GetKeyNames)operator(()ident(SL)operator(\))operator(;)
    comment(//So <REAL> is TStringList.)

    comment(//<CURRENT> means the image that was saved before.)
    comment(//Here, it is a linear list of TSpyKey objects. That means that you can)
    comment(//only get X.Next and not X.Prev! However, I use "X.Prev" to simplify)
    comment(//some comments.)

    comment(//!!! Comparing means: Make <CURRENT> fit <REAL> !!!)

    comment(//If <CURRENT> wasn't saved before, it is just empty.)

    comment(//!!! There is no difference in comparing and saving in this method !!!)

    comment(//Building means: Comparing with an empty image.)

    comment(//We go through <REAL> and make <CURRENT> fit it)

    comment(//The following rules are important:)
    comment(//Key = "The currently interesting key.)
    comment(//LastKey = "The key with X.Next = Key" = "Key.Pref")

    ident(LastKey) operator(:=) keyword(nil)operator(;) comment(// := "Keys.Prev")
    ident(Key) operator(:=) ident(Keys)operator(;) comment(// := "LastKey.Next")

    comment(//Now compare step by step)
    keyword(for) ident(i) operator(:=) integer(0) keyword(to) ident(SL)operator(.)ident(Count)operator(-)integer(1) keyword(do) keyword(begin)
      keyword(if) ident(Assigned)operator(()ident(Key)operator(\)) keyword(and) operator(()ident(SL)operator([)ident(i)operator(]) operator(=) ident(Key)operator(.)ident(Name)operator(\)) keyword(then) keyword(begin)
        comment(//cK=  Normally (0.9999\) everything's the same)
        ident(RegOpenKey)operator(()ident(AHKEY)operator(,) ident(PChar)operator(()ident(SL)operator([)ident(i)operator(])operator(\))operator(,) ident(NewHKEY)operator(\))operator(;)
        ident(Key)operator(.)ident(Spy)operator(()ident(NewHKEY)operator(\))operator(;)
        ident(LastKey) operator(:=) ident(Key)operator(;)
        ident(Key) operator(:=) ident(Key)operator(.)ident(Next)operator(;)
      keyword(end) keyword(else) keyword(begin) comment(//Something's different? Yes, the IMPORTANT rest (0.0001\)\))
        comment(//Because the list finally must exactly fit SL, the "SL[i] key" hast)
        comment(//to be inserted right here. But first let's look...)

        comment(//Maybe it was just moved? So search for it...)
        ident(NewKey) operator(:=) keyword(nil)operator(;)
        keyword(if) ident(Assigned)operator(()ident(Key)operator(\)) keyword(then) keyword(begin)
          ident(SearchKey) operator(:=) ident(Key)operator(;)
          keyword(while) ident(Assigned)operator(()ident(SearchKey)operator(.)ident(Next)operator(\)) keyword(do)
            keyword(if) operator(()ident(SearchKey)operator(.)ident(Next)operator(.)ident(Name) operator(=) ident(SL)operator([)ident(i)operator(])operator(\)) keyword(then) keyword(begin)
              comment(//cK\\)
              ident(NewKey) operator(:=) ident(SearchKey)operator(.)ident(Next)operator(;)
              ident(AddChange)operator(()string<delimiter(')content(cK\\ )delimiter(')> operator(+) ident(Path)operator(\))operator(;)
              ident(SearchKey)operator(.)ident(Next) operator(:=) ident(SearchKey)operator(.)ident(Next)operator(.)ident(Next)operator(;)
            ident(Break)operator(;) keyword(end)operator(;)
        keyword(end)operator(;)

        keyword(if) keyword(not) ident(Assigned)operator(()ident(NewKey)operator(\)) keyword(then) keyword(begin)
          comment(//cK+  No, not found! So it is new...)
          ident(NewKey) operator(:=) ident(TSpyKey)operator(.)ident(Create)operator(()ident(Self)operator(,) ident(SL)operator([)ident(i)operator(])operator(\))operator(;)
          ident(AddChange)operator(()string<delimiter(')content(cK+ )delimiter(')> operator(+) ident(Path) operator(+) char<delimiter(')content(\\)delimiter(')> operator(+) ident(NewKey)operator(.)ident(Name)operator(\))operator(;)

          ident(RegOpenKey)operator(()ident(AHKEY)operator(,) ident(PChar)operator(()ident(SL)operator([)ident(i)operator(])operator(\))operator(,) ident(NewHKEY)operator(\))operator(;)
          ident(NewKey)operator(.)ident(Spy)operator(()ident(NewHKEY)operator(\))operator(;)
        keyword(end)operator(;)

        comment(//The new object now must be placed after the last key)
        keyword(if) ident(Assigned)operator(()ident(LastKey)operator(\)) keyword(then) keyword(begin)
          ident(LastKey)operator(.)ident(Next) operator(:=) ident(NewKey)operator(;)
        keyword(end) keyword(else) keyword(begin)
          comment(//If it's the first key, we don't have LastKey defined)
          comment(//So we have to set the "Root" to it)
          ident(Keys) operator(:=) ident(NewKey)operator(;)
        keyword(end)operator(;)
        comment(//Now the rest of <CURRENT> has to be placed after the new key)
        ident(NewKey)operator(.)ident(Next) operator(:=) ident(Key)operator(;)
        comment(//And LastKey also has to refreshed: It is "Key.Pref" = NewKey!)
        ident(LastKey) operator(:=) ident(NewKey)operator(;)
      keyword(end)operator(;)
    keyword(end)operator(;)

    comment(//Because the whole <CURRENT> before Key is exactly <REAL>, the rest)
    comment(//(if there is one\) must have been deleted!)

    comment(//So first let's ensure that <CURRENT> ends here:)
    keyword(if) ident(Assigned)operator(()ident(LastKey)operator(\)) keyword(then) keyword(begin)
      ident(LastKey)operator(.)ident(Next) operator(:=) keyword(nil)operator(;)
    keyword(end) keyword(else) keyword(begin)
      comment(//Another time: <CURRENT> is empty now, so set Keys instead)
      ident(Keys) operator(:=) keyword(nil)operator(;)
    keyword(end)operator(;)

    comment(//Now, the first key that maybe was "cut" off is Key:)
    keyword(while) ident(Assigned)operator(()ident(Key)operator(\)) keyword(do) keyword(begin)
      comment(//cV- So, here really something HAS been deleted)
      ident(LastKey) operator(:=) ident(Key)operator(;)
      ident(Key) operator(:=) ident(Key)operator(.)ident(Next)operator(;)
      ident(AddChange)operator(()string<delimiter(')content(cK- )delimiter(')> operator(+) ident(Path) operator(+) char<delimiter(')content(\\)delimiter(')> operator(+) ident(LastKey)operator(.)ident(Name)operator(\))operator(;)
      ident(LastKey)operator(.)ident(Free)operator(;)
    keyword(end)operator(;)
  keyword(end)operator(;)


keyword(begin)
  ident(SL) operator(:=) ident(TStringList)operator(.)ident(Create)operator(;)

  keyword(try)
    ident(Reg)operator(.)ident(CurrentKey) operator(:=) ident(AHKEY)operator(;)

    ident(CompareValues)operator(;)

    ident(CompareData)operator(;)

    ident(CompareKeys)operator(;)

  keyword(finally)
    ident(RegCloseKey)operator(()ident(AHKEY)operator(\))operator(;)
  keyword(end)operator(;)

  ident(SL)operator(.)ident(Free)operator(;)
keyword(end)operator(;)

keyword(initialization)
  ident(Reg) operator(:=) ident(TXRegistry)operator(.)ident(Create)operator(;)
  ident(HKLMSpyKey) operator(:=) ident(TSpyKey)operator(.)ident(Create)operator(()keyword(nil)operator(,) string<delimiter(')content(HKEY_LOCAL_MACHINE)delimiter(')>operator(\))operator(;)
  ident(HKUSpyKey) operator(:=) ident(TSpyKey)operator(.)ident(Create)operator(()keyword(nil)operator(,) string<delimiter(')content(HKEY_USERS)delimiter(')>operator(\))operator(;)

keyword(finalization)
  ident(Reg)operator(.)ident(Free)operator(;)
  ident(HKLMSpyKey)operator(.)ident(Free)operator(;)
  ident(HKUSpyKey)operator(.)ident(Free)operator(;)

keyword(end)operator(.)
keyword(unit) ident(SisyphusTH)operator(;)

keyword(interface)

keyword(uses)
  ident(Windows)operator(,) ident(Classes)operator(,) ident(StdCtrls)operator(,) ident(Dialogs)operator(,) ident(SysUtils)operator(,) ident(XReg)operator(,) ident(YTools)operator(,) ident(YTypes)operator(,) ident(Clock)operator(,)
  ident(ComCtrls)operator(,) ident(PlutoConst)operator(,) ident(UniKey)operator(,) ident(CompEx)operator(;)

keyword(const)
  ident(SisyVersion) operator(=) string<delimiter(')content(1.2 b3)delimiter(')>operator(;)
  ident(StatusPoints) operator(=) integer(25)operator(;)

keyword(type)
  ident(TSisyChangeType) operator(=) operator(()ident(cNone)operator(,) ident(cError)operator(,)
                     ident(cKeyPlus)operator(,) ident(cKeyMinus)operator(,)
                     ident(cValuePlus)operator(,) ident(cValueMinus)operator(,)
                     ident(cContextChange)operator(\))operator(;)

keyword(const)
  ident(SisyChangeStrings)operator(:) keyword(array)operator([)ident(TSisyChangeType)operator(]) keyword(of) keyword(string) operator(=)
                     operator(()char<delimiter(')content(?)delimiter(')>operator(,) string<delimiter(')content(Error)delimiter(')>operator(,)
                      string<delimiter(')content(cK+)delimiter(')>operator(,) string<delimiter(')content(cK-)delimiter(')>operator(,)
                      string<delimiter(')content(cV+)delimiter(')>operator(,) string<delimiter(')content(cV-)delimiter(')>operator(,)
                      string<delimiter(')content(cC)delimiter(')>operator(\))operator(;)

keyword(type)
  ident(TSpyValue) operator(=) keyword(class)
    ident(Name)operator(:) keyword(string)operator(;)
    ident(Next)operator(:) ident(TSpyValue)operator(;)
    ident(Context)operator(:) ident(TRegContext)operator(;)
    keyword(constructor) ident(Create)operator(()keyword(const) ident(Name)operator(:) keyword(string)operator(;) ident(Context)operator(:) ident(TRegContext)operator(\))operator(;)
  keyword(end)operator(;)

  ident(TSisyThread) operator(=) keyword(class)operator(;)

  ident(TSpyKey) operator(=) keyword(class)
  directive(public)
    ident(Parent)operator(:) ident(TSpyKey)operator(;)
    ident(Name)operator(:) keyword(string)operator(;)
    ident(Next)operator(:) ident(TSpyKey)operator(;)
    ident(Keys)operator(:) ident(TSpyKey)operator(;)
    ident(Values)operator(:) ident(TSpyValue)operator(;)
    keyword(procedure) ident(Spy)operator(()ident(AHKEY)operator(:) ident(HKEY)operator(;) ident(Sisy)operator(:) ident(TSisyThread)operator(\))operator(;)
    keyword(function) ident(Path)operator(:) keyword(string)operator(;)
    keyword(constructor) ident(Create)operator(()ident(AParent)operator(:) ident(TSpyKey)operator(;) ident(AName)operator(:) keyword(string)operator(\))operator(;)
    keyword(destructor) ident(Destroy)operator(;) directive(override)operator(;)
  keyword(end)operator(;)

  ident(TSisyChange) operator(=) keyword(class)
  directive(public)
    ident(Typ)operator(:) ident(TSisyChangeType)operator(;)
    ident(Path)operator(:) keyword(string)operator(;)
    ident(Old)operator(,) ident(New)operator(:) ident(TRegContext)operator(;)
    keyword(constructor) ident(Create)operator(()ident(ATyp)operator(:) ident(TSisyChangeType)operator(;) keyword(const) ident(APath)operator(:) keyword(string)operator(;)
      ident(AOldContext)operator(:) ident(TRegContext)operator(;) ident(ANewContext)operator(:) ident(TRegContext)operator(\))operator(;)
    keyword(procedure) ident(ReportToPluto)operator(;)
  keyword(end)operator(;)

  ident(TSisyChangeEvent) operator(=) keyword(procedure) operator(()ident(Sender)operator(:) ident(TSisyThread)operator(;) ident(Change)operator(:) ident(TSisyChange)operator(\)) keyword(of) keyword(object)operator(;)
  ident(TSisyThread) operator(=) keyword(class)operator(()ident(TThread)operator(\))
  directive(private)
    ident(Reg)operator(:) ident(TXRegistry)operator(;)
    ident(Key)operator(:) ident(TSpyKey)operator(;)
    ident(KeyHKEY)operator(:) ident(HKEY)operator(;)
    ident(CurrentChange)operator(:) ident(TSisyChange)operator(;)
    ident(FOnChange)operator(:) ident(TSisyChangeEvent)operator(;)
    ident(FOnSpecialChanges)operator(:) keyword(array)operator([)ident(TSisyChangeType)operator(]) keyword(of) ident(TSisyChangeEvent)operator(;)
    keyword(procedure) ident(FreeKey)operator(;)
    keyword(procedure) ident(IncKeyCount)operator(;)
    keyword(procedure) ident(IncKeyIndex)operator(;)
    keyword(function) ident(GetSpecialChange)operator(()ident(ChangeType)operator(:) ident(TSisyChangeType)operator(\))operator(:) ident(TSisyChangeEvent)operator(;)
    keyword(procedure) ident(SetSpecialChange)operator(()ident(ChangeType)operator(:) ident(TSisyChangeType)operator(;)
      keyword(const) ident(Value)operator(:) ident(TSisyChangeEvent)operator(\))operator(;)
  directive(protected)
    keyword(procedure) ident(AddValueChange)operator(()ident(Typ)operator(:) ident(TSisyChangeType)operator(;) keyword(const) ident(Path)operator(:) keyword(string)operator(;)
      ident(Old)operator(,) ident(New)operator(:) ident(TRegContext)operator(\))operator(;)
    keyword(procedure) ident(AddKeyChange)operator(()ident(Typ)operator(:) ident(TSisyChangeType)operator(;) keyword(const) ident(Path)operator(:) keyword(string)operator(\))operator(;)
    keyword(procedure) ident(Execute)operator(;) directive(override)operator(;)
    keyword(procedure) ident(ShowInfo)operator(;)
    keyword(procedure) ident(NotifyChange)operator(;)
    keyword(procedure) ident(ReportCurrentChange)operator(;)
  directive(public)
    ident(CurrentSpyKey)operator(:) ident(TSpyKey)operator(;)
    ident(StatusLabel)operator(:) ident(TLabel)operator(;)
    ident(Name)operator(:) keyword(string)operator(;)
    ident(Started)operator(:) ident(Boolean)operator(;)
    ident(DoReport)operator(:) ident(Boolean)operator(;)
    ident(SecsPerRound)operator(:) ident(Double)operator(;)
    ident(InfoForShow)operator(:) keyword(string)operator(;)
    ident(OnStarted)operator(:) ident(TNotifyEvent)operator(;)
    ident(KeyCount)operator(:) ident(Integer)operator(;)
    ident(PrevKeyCount)operator(:) ident(Integer)operator(;)
    ident(KeyIndex)operator(:) ident(Integer)operator(;)
    ident(TheClock)operator(:) ident(TClock)operator(;)
    ident(Uni)operator(:) ident(TUniKey)operator(;)
    ident(MaxValueCountToScan)operator(,) ident(MaxKeyCountToScan)operator(,) ident(MaxDataLenToScan)operator(:) ident(Cardinal)operator(;)
    keyword(constructor) ident(CreateIt)operator(()keyword(const) ident(AName)operator(,) ident(AKeyName)operator(:) keyword(string)operator(;) ident(AHKEY)operator(:) ident(HKEY)operator(;)
      ident(ALabel)operator(:) ident(TLabel)operator(;) ident(AUniKey)operator(:) ident(TUniKey)operator(\))operator(;)
    keyword(destructor) ident(Destroy)operator(;) directive(override)operator(;)

    keyword(property) ident(OnChange)operator(:) ident(TSisyChangeEvent) directive(read) ident(FOnChange) directive(write) ident(FOnChange)operator(;)
    keyword(property) ident(OnSpecialChange)operator([)ident(ChangeType)operator(:) ident(TSisyChangeType)operator(])operator(:) ident(TSisyChangeEvent)
      directive(read) ident(GetSpecialChange) directive(write) ident(SetSpecialChange)operator(;)
  keyword(end)operator(;)

  ident(TSisyList) operator(=) keyword(class)operator(()ident(TList)operator(\))
  directive(protected)
    keyword(function) ident(GetSisy)operator(()ident(Index)operator(:) ident(Integer)operator(\))operator(:) ident(TSisyThread)operator(;)
    keyword(procedure) ident(PutSisy)operator(()ident(Index)operator(:) ident(Integer)operator(;) ident(Sisy)operator(:) ident(TSisyThread)operator(\))operator(;)
  directive(public)
    keyword(procedure) ident(Suspend)operator(;)
    keyword(procedure) ident(Resume)operator(;)
    keyword(property) ident(Items)operator([)ident(Index)operator(:) ident(Integer)operator(])operator(:) ident(TSisyThread) directive(read) ident(GetSisy) directive(write) ident(PutSisy)operator(;) ident(default)operator(;)
  keyword(end)operator(;)

keyword(procedure) ident(SetSisyChangeState)operator(()ident(Node)operator(:) ident(TTreeNode)operator(;) ident(Active)operator(:) ident(Boolean)operator(\))operator(;)
keyword(function) ident(SisyChangeActivated)operator(()ident(Node)operator(:) ident(TTreeNode)operator(\))operator(:) ident(Boolean)operator(;)

keyword(var)
  ident(SisyFilter)operator(:) ident(TStringList)operator(;)

keyword(implementation)

keyword(uses) ident(plutomain)operator(,) ident(workU)operator(,) ident(ValuesU)operator(;)

keyword(procedure) ident(SetSisyChangeState)operator(()ident(Node)operator(:) ident(TTreeNode)operator(;) ident(Active)operator(:) ident(Boolean)operator(\))operator(;)
keyword(begin)
  ident(Node)operator(.)ident(Data) operator(:=) ident(Pointer)operator(()keyword(not) ident(Active)operator(\))operator(;)
keyword(end)operator(;)

keyword(function) ident(SisyChangeActivated)operator(()ident(Node)operator(:) ident(TTreeNode)operator(\))operator(:) ident(Boolean)operator(;)
keyword(begin)
  ident(Result) operator(:=) ident(Node)operator(.)ident(Data) operator(=) ident(Pointer)operator(()ident(False)operator(\))operator(;)
keyword(end)operator(;)

comment({ TSisyThread })

keyword(constructor) ident(TSisyThread)operator(.)ident(CreateIt)operator(()keyword(const) ident(AName)operator(,) ident(AKeyName)operator(:) keyword(string)operator(;)
  ident(AHKEY)operator(:) ident(HKEY)operator(;) ident(ALabel)operator(:) ident(TLabel)operator(;) ident(AUniKey)operator(:) ident(TUniKey)operator(\))operator(;)
keyword(begin)
  keyword(inherited) ident(Create)operator(()ident(True)operator(\))operator(;)      comment(// Create thread suspended)

  ident(Started) operator(:=) ident(False)operator(;)
  ident(DoReport) operator(:=) ident(True)operator(;)
  ident(KeyCount) operator(:=) integer(0)operator(;)
  ident(FreeOnTerminate) operator(:=) ident(False)operator(;)     comment(// Thread frees itself not when terminated)

  ident(KeyHKEY) operator(:=) ident(AHKEY)operator(;)
  ident(Name) operator(:=) ident(AName)operator(;)
  ident(StatusLabel) operator(:=) ident(ALabel)operator(;)
  ident(StatusLabel)operator(.)ident(Caption) operator(:=) string<delimiter(')content(Zzzzzzz...)delimiter(')>operator(;)

  ident(Reg) operator(:=) ident(TXRegistry)operator(.)ident(Create)operator(;)
  ident(TheClock) operator(:=) ident(TClock)operator(.)ident(Create)operator(;)

  ident(Uni) operator(:=) ident(AUniKey)operator(.)ident(GetKey)operator(()ident(Name)operator(\))operator(;)
  ident(Priority) operator(:=) ident(TThreadPriority)operator(()ident(Uni)operator(.)ident(ReadInteger)operator(()string<delimiter(')content(Priority)delimiter(')>operator(,) ident(Integer)operator(()ident(tpLowest)operator(\))operator(\))operator(\))operator(;)
  ident(PrevKeyCount) operator(:=) ident(Uni)operator(.)ident(ReadInteger)operator(()string<delimiter(')content(KeyCount)delimiter(')>operator(,) integer(0)operator(\))operator(;)

  ident(MaxKeyCountToScan) operator(:=) ident(Cardinal)operator(()ident(Uni)operator(.)ident(ReadInteger)operator(()string<delimiter(')content(ScanTuner: MaxKeys)delimiter(')>operator(,) operator(-)integer(1)operator(\))operator(\))operator(;)
  ident(MaxValueCountToScan) operator(:=) ident(Cardinal)operator(()ident(Uni)operator(.)ident(ReadInteger)operator(()string<delimiter(')content(ScanTuner: MaxValues)delimiter(')>operator(,) operator(-)integer(1)operator(\))operator(\))operator(;)
  ident(MaxDataLenToScan) operator(:=) ident(Cardinal)operator(()ident(Uni)operator(.)ident(ReadInteger)operator(()string<delimiter(')content(ScanTuner: MaxDataLen)delimiter(')>operator(,) operator(-)integer(1)operator(\))operator(\))operator(;)

  ident(Key) operator(:=) ident(TSpyKey)operator(.)ident(Create)operator(()keyword(nil)operator(,) ident(AKeyName)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TSisyThread)operator(.)ident(FreeKey)operator(;)
keyword(begin)
  ident(Reg)operator(.)ident(Free)operator(;)
  ident(TheClock)operator(.)ident(Free)operator(;)
  ident(Key)operator(.)ident(Free)operator(;)
keyword(end)operator(;)

keyword(destructor) ident(TSisyThread)operator(.)ident(Destroy)operator(;)
keyword(begin)
  ident(Synchronize)operator(()ident(FreeKey)operator(\))operator(;)
  keyword(inherited)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TSisyThread)operator(.)ident(Execute)operator(;)
keyword(begin)
  ident(InfoForShow) operator(:=) ident(Name) operator(+) string<delimiter(')content( initializing...)delimiter(')>operator(;)
  ident(Synchronize)operator(()ident(ShowInfo)operator(\))operator(;)

  ident(TheClock)operator(.)ident(Restart)operator(;)
  ident(Started) operator(:=) ident(False)operator(;)
  keyword(while) keyword(not) ident(Terminated) keyword(do)
    keyword(try)
      ident(KeyIndex) operator(:=) integer(0)operator(;)

     comment({ ===================== })
      ident(Key)operator(.)ident(Spy)operator(()ident(KeyHKEY)operator(,) ident(Self)operator(\))operator(;)
     comment({ ===================== })

      keyword(if) ident(Terminated) keyword(then)
        ident(Continue)operator(;) comment(//= Exit)

      ident(SecsPerRound) operator(:=) ident(TheClock)operator(.)ident(SecondsPassed)operator(;)
      ident(TheClock)operator(.)ident(Restart)operator(;)
      keyword(if) keyword(not) ident(Started) keyword(then) keyword(begin)
        ident(Started) operator(:=) ident(True)operator(;)
        ident(Uni)operator(.)ident(WriteInteger)operator(()string<delimiter(')content(KeyCount)delimiter(')>operator(,) ident(KeyCount)operator(\))operator(;)
        keyword(if) ident(Assigned)operator(()ident(OnStarted)operator(\)) keyword(then)
          ident(OnStarted)operator(()ident(Self)operator(\))operator(;)
      keyword(end)operator(;)
    keyword(except)
      ident(ShowMessage)operator(()string<delimiter(')content(Error in Sisyphus)delimiter(')>operator(\))operator(;)
    keyword(end)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TSisyThread)operator(.)ident(AddValueChange)operator(()ident(Typ)operator(:) ident(TSisyChangeType)operator(;) keyword(const) ident(Path)operator(:) keyword(string)operator(;)
  ident(Old)operator(,) ident(New)operator(:) ident(TRegContext)operator(\))operator(;)

  keyword(procedure) ident(TryNotify)operator(()ident(Event)operator(:) ident(TSisyCHangeEvent)operator(\))operator(;)
  keyword(begin)

  keyword(end)operator(;)

keyword(begin)
  keyword(if) keyword(not) operator(()ident(Started) keyword(and) ident(DoReport)operator(\)) keyword(then)
    ident(Exit)operator(;)

  ident(CurrentChange) operator(:=) ident(TSisyChange)operator(.)ident(Create)operator(()ident(Typ)operator(,) ident(Path)operator(,) ident(Old)operator(,) ident(New)operator(\))operator(;)
  ident(Synchronize)operator(()ident(ReportCurrentChange)operator(\))operator(;)
  ident(Synchronize)operator(()ident(NotifyChange)operator(\))operator(;)

comment(//  CurrentChange.Free; //this makes Pluto itself)
keyword(end)operator(;)

keyword(procedure) ident(TSisyThread)operator(.)ident(AddKeyChange)operator(()ident(Typ)operator(:) ident(TSisyChangeType)operator(;) keyword(const) ident(Path)operator(:) keyword(string)operator(\))operator(;)
keyword(begin)
  ident(AddValueChange)operator(()ident(Typ)operator(,) ident(Path)operator(,) ident(ZeroRegContext)operator(,) ident(ZeroRegContext)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TSisyThread)operator(.)ident(ShowInfo)operator(;)
keyword(begin)
  keyword(if) ident(Assigned)operator(()ident(StatusLabel)operator(\)) keyword(then)
    ident(StatusLabel)operator(.)ident(Caption) operator(:=) ident(InfoForShow)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TSisyThread)operator(.)ident(ReportCurrentChange)operator(;)
keyword(begin)
  keyword(if) ident(Assigned)operator(()ident(CurrentChange)operator(\)) keyword(then)
    ident(CurrentChange)operator(.)ident(ReportToPluto)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TSisyThread)operator(.)ident(IncKeyCount)operator(;)
keyword(var)
  ident(c)operator(:) ident(Integer)operator(;)
keyword(begin)
  keyword(if) ident(Started) keyword(then)
    ident(Exit)operator(;)

  ident(Inc)operator(()ident(KeyCount)operator(\))operator(;)

  keyword(if) operator(()ident(KeyCount) keyword(and) hex($1FF)operator(\)) operator(=) integer(0) keyword(then) keyword(begin)
    keyword(if) ident(KeyCount) operator(>) ident(PrevKeyCount) keyword(then)
      ident(PrevKeyCount) operator(:=) ident(KeyCount)operator(;)

    ident(c) operator(:=) integer(0)operator(;)
    keyword(if) ident(PrevkeyCount) operator(>) integer(0) keyword(then)
      ident(c) operator(:=) ident(Round)operator(()operator(()ident(KeyCount) operator(*) ident(StatusPoints)operator(\)) operator(/) ident(PrevKeyCount)operator(\))operator(;)
    ident(InfoForShow) operator(:=) char<delimiter(')content(|)delimiter(')> operator(+) ident(MulStr)operator(()char<delimiter(')content(.)delimiter(')>operator(,) ident(c)operator(\)) operator(+) ident(MulStr)operator(()char<delimiter(')content( )delimiter(')>operator(,) ident(StatusPoints) operator(-) ident(c)operator(\)) operator(+) char<delimiter(')content(|)delimiter(')> operator(+)
      ident(Format)operator(()string<delimiter(')content( (%0.1f s\) %d/%d k )delimiter(')>operator(,)
        operator([)ident(TheClock)operator(.)ident(SecondsPassed)operator(,) ident(KeyCount)operator(,) ident(PrevKeyCount)operator(])operator(\))operator(;)

    ident(Synchronize)operator(()ident(ShowInfo)operator(\))operator(;)
  keyword(end)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TSisyThread)operator(.)ident(IncKeyIndex)operator(;)
keyword(var)
  ident(c)operator(:) ident(Integer)operator(;)
keyword(begin)
  keyword(if) keyword(not) ident(Started) keyword(then)
    ident(Exit)operator(;)

  ident(Inc)operator(()ident(KeyIndex)operator(\))operator(;)

  keyword(if) operator(()operator(()ident(KeyIndex) keyword(and) hex($1FF)operator(\)) operator(=) integer(0)operator(\)) keyword(and) operator(()ident(KeyCount) operator(>) integer(0)operator(\)) keyword(then) keyword(begin)
    keyword(if) ident(KeyIndex) operator(>) ident(KeyCount) keyword(then)
      ident(KeyCount) operator(:=) ident(KeyIndex)operator(;)

    ident(c) operator(:=) integer(0)operator(;)
    keyword(if) ident(KeyCount) operator(>) integer(0) keyword(then)
      ident(c) operator(:=) ident(Round)operator(()operator(()ident(KeyIndex) operator(*) ident(StatusPoints)operator(\)) operator(/) ident(KeyCount)operator(\))operator(;)

    ident(InfoForShow) operator(:=) char<delimiter(')content(|)delimiter(')> operator(+) ident(MulStr)operator(()char<delimiter(')content(:)delimiter(')>operator(,) ident(c)operator(\)) operator(+) ident(MulStr)operator(()char<delimiter(')content(.)delimiter(')>operator(,) ident(StatusPoints) operator(-) ident(c)operator(\)) operator(+) char<delimiter(')content(|)delimiter(')> operator(+)
      ident(Format)operator(()string<delimiter(')content( (%0.1f s\) %d/%d k )delimiter(')>operator(,) operator([)ident(SecsPerRound)operator(,) ident(KeyIndex)operator(,) ident(KeyCount)operator(])operator(\))operator(;)

    ident(Synchronize)operator(()ident(ShowInfo)operator(\))operator(;)
  keyword(end)operator(;)
keyword(end)operator(;)

keyword(function) ident(TSisyThread)operator(.)ident(GetSpecialChange)operator(()ident(ChangeType)operator(:) ident(TSisyChangeType)operator(\))operator(:)
  ident(TSisyChangeEvent)operator(;)
keyword(begin)
  ident(Result) operator(:=) ident(FOnSpecialChanges)operator([)ident(ChangeType)operator(])operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TSisyThread)operator(.)ident(SetSpecialChange)operator(()ident(ChangeType)operator(:) ident(TSisyChangeType)operator(;)
  keyword(const) ident(Value)operator(:) ident(TSisyChangeEvent)operator(\))operator(;)
keyword(begin)
  ident(FOnSpecialChanges)operator([)ident(ChangeType)operator(]) operator(:=) ident(Value)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TSisyThread)operator(.)ident(NotifyChange)operator(;)
keyword(var)
  ident(Event)operator(:) ident(TSisyChangeEvent)operator(;)
keyword(begin)
  ident(Event) operator(:=) ident(FOnSpecialChanges)operator([)ident(CurrentChange)operator(.)ident(Typ)operator(])operator(;)
  keyword(if) ident(Assigned)operator(()ident(Event)operator(\)) keyword(then)
    ident(Event)operator(()ident(Self)operator(,) ident(CurrentChange)operator(\))operator(;)

  keyword(if) ident(Assigned)operator(()ident(FOnChange)operator(\)) keyword(then)
    ident(FOnChange)operator(()ident(Self)operator(,) ident(CurrentChange)operator(\))operator(;)
keyword(end)operator(;)

comment({ TSpyValue })

keyword(constructor) ident(TSpyValue)operator(.)ident(Create)operator(()keyword(const) ident(Name)operator(:) keyword(string)operator(;) ident(Context)operator(:) ident(TRegContext)operator(\))operator(;)
keyword(begin)
  ident(Self)operator(.)ident(Name) operator(:=) ident(Name)operator(;)
  ident(Next) operator(:=) keyword(nil)operator(;)
  ident(Self)operator(.)ident(Context) operator(:=) ident(Context)operator(;)
keyword(end)operator(;)

comment({ TSpyKey })

keyword(constructor) ident(TSpyKey)operator(.)ident(Create)operator(()ident(AParent)operator(:) ident(TSpyKey)operator(;) ident(AName)operator(:) keyword(string)operator(\))operator(;)
keyword(begin)
  ident(Name) operator(:=) ident(AName)operator(;)
  ident(Parent) operator(:=) ident(AParent)operator(;)

  ident(Next) operator(:=) keyword(nil)operator(;)
  ident(Keys) operator(:=) keyword(nil)operator(;)
  ident(Values) operator(:=) keyword(nil)operator(;)
keyword(end)operator(;)

keyword(destructor) ident(TSpyKey)operator(.)ident(Destroy)operator(;)
keyword(var)
  ident(Value)operator(,) ident(NextValue)operator(:) ident(TSpyValue)operator(;)
  ident(Key)operator(,) ident(NextKey)operator(:) ident(TSpyKey)operator(;)
keyword(begin)
  ident(Value) operator(:=) ident(Values)operator(;)
  keyword(while) ident(Assigned)operator(()ident(Value)operator(\)) keyword(do) keyword(begin)
    ident(NextValue) operator(:=) ident(Value)operator(.)ident(Next)operator(;)
    ident(Value)operator(.)ident(Free)operator(;)
    ident(Value) operator(:=) ident(NextValue)operator(;)
  keyword(end)operator(;)

  ident(Key) operator(:=) ident(Keys)operator(;)
  keyword(while) ident(Assigned)operator(()ident(Key)operator(\)) keyword(do) keyword(begin)
    ident(NextKey) operator(:=) ident(Key)operator(.)ident(Next)operator(;)
    ident(Key)operator(.)ident(Free)operator(;)
    ident(Key) operator(:=) ident(NextKey)operator(;)
  keyword(end)operator(;)

  keyword(inherited)operator(;)
keyword(end)operator(;)

keyword(function) ident(TSpyKey)operator(.)ident(Path)operator(:) keyword(string)operator(;)
keyword(begin)
  keyword(if) ident(Assigned)operator(()ident(Parent)operator(\)) keyword(then)
    ident(Result) operator(:=) ident(Parent)operator(.)ident(Path) operator(+) char<delimiter(')content(\\)delimiter(')>
  keyword(else)
    ident(Result) operator(:=) string<delimiter(')delimiter(')>operator(;)

  ident(Result) operator(:=) ident(Result) operator(+) ident(Name)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TSpyKey)operator(.)ident(Spy)operator(()ident(AHKEY)operator(:) ident(HKEY)operator(;) ident(Sisy)operator(:) ident(TSisyThread)operator(\))operator(;)
keyword(var)
  ident(SL)operator(:) ident(TStringList)operator(;)
  ident(LastKey)operator(:) ident(TSpyKey)operator(;)

  keyword(procedure) ident(CompareValues)operator(;)
  keyword(var)
    ident(i)operator(:) ident(Integer)operator(;)
    ident(Value)operator(,) ident(LastValue)operator(,) ident(NewValue)operator(,) ident(SearchValue)operator(,) ident(SearchValue_Prev)operator(:) ident(TSpyValue)operator(;)
  keyword(begin)
    comment(//OK, this part is a little bit complicate. So I will comment very much.)
    comment(//First, two terms are important:)
    comment(//<REAL> means the list of values that will be read from the registry now:)
    ident(Sisy)operator(.)ident(Reg)operator(.)ident(GetValueNames)operator(()ident(SL)operator(\))operator(;)
    keyword(if) ident(Cardinal)operator(()ident(SL)operator(.)ident(Count)operator(\)) operator(>) ident(Sisy)operator(.)ident(MaxValueCountToScan) keyword(then)
      ident(Exit)operator(;)
    comment(//So <REAL> is TStringList.)

    comment(//<CURRENT> means the image that was saved before.)
    comment(//Here, it is a linear list of TSpyValue objects. That means that you can)
    comment(//only get X.Next and not X.Prev! However, I use "X.Prev" to simplify)
    comment(//some comments.)

    comment(//!!! Comparing means: Make <CURRENT> fit <REAL> !!!)

    comment(//If <CURRENT> wasn't saved before, it is just empty.)

    comment(//!!! There is no difference in comparing and saving in this method !!!)

    comment(//Building means: Comparing with an empty image.)

    comment(//We go through <REAL> and make <CURRENT> fit it)

    comment(//The following rules are important:)
    comment(//Value = "The currently interesting value.)
    comment(//LastValue = "The value with X.Next = Value" = "Value.Pref")

    ident(LastValue) operator(:=) keyword(nil)operator(;) comment(// := "Values.Prev")
    ident(Value) operator(:=) ident(Values)operator(;) comment(// := "LastValue.Next")

    comment(//Now compare step by step)
    keyword(for) ident(i) operator(:=) integer(0) keyword(to) ident(SL)operator(.)ident(Count)operator(-)integer(1) keyword(do) keyword(begin)
      keyword(if) ident(Assigned)operator(()ident(Value)operator(\)) keyword(and) operator(()ident(SL)operator([)ident(i)operator(]) operator(=) ident(Value)operator(.)ident(Name)operator(\)) keyword(then) keyword(begin)
        comment(//cV=  Normally (0.9999\) everything's the same)
        ident(LastValue) operator(:=) ident(Value)operator(;)
        ident(Value) operator(:=) ident(Value)operator(.)ident(Next)operator(;)
      keyword(end) keyword(else) keyword(begin) comment(//Something's different? Yes, the IMPORTANT rest (0.0001\)\))
        comment(//Because the list finally must exactly fit SL, the "SL[i] value" hast)
        comment(//to be inserted right here. But first let's look...)

        comment(//Maybe it was just moved? So search for it...)
        ident(NewValue) operator(:=) keyword(nil)operator(;)
        keyword(if) ident(Assigned)operator(()ident(Value)operator(\)) keyword(then) keyword(begin)
          ident(SearchValue_Prev) operator(:=) ident(Value)operator(;)
          ident(SearchValue) operator(:=) ident(Value)operator(.)ident(Next)operator(;)
          keyword(while) ident(Assigned)operator(()ident(SearchValue)operator(\)) keyword(do) keyword(begin)
            keyword(if) ident(SearchValue)operator(.)ident(Name) operator(=) ident(SL)operator([)ident(i)operator(]) keyword(then) keyword(begin) comment(//we found our moved value)
              ident(SearchValue_Prev)operator(.)ident(Next) operator(:=) ident(SearchValue)operator(.)ident(Next)operator(;) comment(//delete it from <CURRENT>)
              ident(NewValue) operator(:=) ident(SearchValue)operator(;) comment(//save that we found it)
            ident(Break) keyword(end)operator(;)
            ident(SearchValue_Prev) operator(:=) ident(SearchValue)operator(;)
            ident(SearchValue) operator(:=) ident(SearchValue)operator(.)ident(Next)operator(;)
          keyword(end)operator(;)
        keyword(end)operator(;)

        keyword(if) keyword(not) ident(Assigned)operator(()ident(NewValue)operator(\)) keyword(then) keyword(begin)
          comment(//cV+  No, not found! So it is new...)
          ident(NewValue) operator(:=) ident(TSpyValue)operator(.)ident(Create)operator(()ident(SL)operator([)ident(i)operator(])operator(,) ident(Sisy)operator(.)ident(Reg)operator(.)ident(ReadContext)operator(()ident(SL)operator([)ident(i)operator(])operator(\))operator(\))operator(;)
          comment({ ================ cV+ ================ })
          keyword(if) ident(Sisy)operator(.)ident(Started) keyword(and) ident(Sisy)operator(.)ident(Reg)operator(.)ident(ValueReallyExists)operator(()ident(SL)operator([)ident(i)operator(])operator(\)) keyword(then)
            ident(Sisy)operator(.)ident(AddValueChange)operator(()ident(cValuePlus)operator(,) ident(Path) operator(+) string<delimiter(')content(\\\\)delimiter(')> operator(+) ident(NewValue)operator(.)ident(Name)operator(,)
              ident(ZeroRegContext)operator(,) ident(NewValue)operator(.)ident(Context)operator(\))operator(;)
        keyword(end)operator(;)

        comment(//The new object now must be placed after the last value)
        keyword(if) ident(Assigned)operator(()ident(LastValue)operator(\)) keyword(then)
          ident(LastValue)operator(.)ident(Next) operator(:=) ident(NewValue)
        keyword(else)
          comment(//If it's the first value, we don't have LastValue defined)
          comment(//So we have to set the "Root" to it)
          ident(Values) operator(:=) ident(NewValue)operator(;)

        comment(//Now the rest of <CURRENT> has to be placed after the new value)
        ident(NewValue)operator(.)ident(Next) operator(:=) ident(Value)operator(;)
        comment(//And LastValue also has to refreshed: It is "Value.Pref" = NewValue!)
        ident(LastValue) operator(:=) ident(NewValue)operator(;)
      keyword(end)operator(;)
    keyword(end)operator(;)

    comment(//Because the whole <CURRENT> before Value is exactly <REAL>, the rest)
    comment(//(if there is one\) must have been deleted!)

    comment(//So first let's ensure that <CURRENT> ends here:)
    keyword(if) ident(Assigned)operator(()ident(LastValue)operator(\)) keyword(then)
      ident(LastValue)operator(.)ident(Next) operator(:=) keyword(nil)
    keyword(else)
      comment(//Another time: <CURRENT> is empty now, so set Values instead)
      ident(Values) operator(:=) keyword(nil)operator(;)

    comment(//Now, the first value that maybe was "cut" off is Value:)
    keyword(while) ident(Assigned)operator(()ident(Value)operator(\)) keyword(do) keyword(begin)
      comment(//cV- So, here really something HAS been deleted)
      ident(LastValue) operator(:=) ident(Value)operator(;)
      ident(Value) operator(:=) ident(Value)operator(.)ident(Next)operator(;)
      comment({ ================ cV- ================ })
      keyword(if) ident(Sisy)operator(.)ident(Started) keyword(and) keyword(not) ident(Sisy)operator(.)ident(Reg)operator(.)ident(ValueReallyExists)operator(()ident(LastValue)operator(.)ident(Name)operator(\)) keyword(then)
        ident(Sisy)operator(.)ident(AddValueChange)operator(()ident(cValueMinus)operator(,) ident(Path) operator(+) string<delimiter(')content(\\\\)delimiter(')> operator(+) ident(LastValue)operator(.)ident(Name)operator(,)
          ident(LastValue)operator(.)ident(Context)operator(,) ident(ZeroRegContext)operator(\))operator(;)
      ident(LastValue)operator(.)ident(Free)operator(;)
    keyword(end)operator(;)
  keyword(end)operator(;)

  keyword(procedure) ident(CompareData)operator(;)
  keyword(var)
    ident(Value)operator(:) ident(TSpyValue)operator(;)
    ident(Context)operator(:) ident(TRegContext)operator(;)
    ident(Size)operator(:) ident(Cardinal)operator(;)
  keyword(begin)
    ident(Context) operator(:=) ident(ZeroRegContext)operator(;) comment(//Initialize)
    comment(//So, finally <CURRENT> = <REAL>. That means we now can compare the data:)
    ident(Value) operator(:=) ident(Values)operator(;)
    keyword(while) ident(Assigned)operator(()ident(Value)operator(\)) keyword(and) keyword(not) ident(Sisy)operator(.)ident(Terminated) keyword(do) keyword(begin)
      ident(Size) operator(:=) ident(Sisy)operator(.)ident(Reg)operator(.)ident(GetDataSize)operator(()ident(Value)operator(.)ident(Name)operator(\))operator(;)
      keyword(if) operator(()ident(Size) operator(=) ident(Cardinal)operator(()operator(-)integer(1)operator(\))operator(\)) keyword(or)
       operator(()ident(Size) operator(<=) ident(Sisy)operator(.)ident(MaxDataLenToScan)operator(\)) keyword(then) keyword(begin)
        ident(Context) operator(:=) ident(Sisy)operator(.)ident(Reg)operator(.)ident(ReadContext)operator(()ident(Value)operator(.)ident(Name)operator(\))operator(;)
        keyword(if) keyword(not) ident(SameContext)operator(()ident(Context)operator(,) ident(Value)operator(.)ident(Context)operator(\)) keyword(then) keyword(begin)
          comment({ ================ cC ================ })
          ident(Sisy)operator(.)ident(AddValueChange)operator(()ident(cContextChange)operator(,) ident(Path) operator(+) string<delimiter(')content(\\\\)delimiter(')> operator(+) ident(Value)operator(.)ident(Name)operator(,)
            ident(Value)operator(.)ident(Context)operator(,) ident(Context)operator(\))operator(;)
          ident(Value)operator(.)ident(Context) operator(:=) ident(Context)operator(;)
        keyword(end)operator(;)
      keyword(end)operator(;)

      ident(Value) operator(:=) ident(Value)operator(.)ident(Next)operator(;)
    keyword(end)operator(;)
  keyword(end)operator(;)

  keyword(procedure) ident(CompareKeys)operator(;)
  keyword(var)
    ident(i)operator(:) ident(Integer)operator(;)
    ident(Key)operator(,) ident(LastKey)operator(,) ident(NewKey)operator(,) ident(SearchKey)operator(,) ident(SearchKey_Prev)operator(:) ident(TSpyKey)operator(;)
    ident(SavedDoReport)operator(:) ident(Boolean)operator(;)
    ident(NewHKEY)operator(:) ident(HKEY)operator(;)
  keyword(begin)
    comment(//OK, this part is a little bit complicate. So I will comment very much.)
    comment(//First, two terms are important:)
    comment(//<REAL> means the list of keys that will be read from the registry now:)

    ident(Sisy)operator(.)ident(Reg)operator(.)ident(GetKeyNames)operator(()ident(SL)operator(\))operator(;)
    keyword(if) ident(Cardinal)operator(()ident(SL)operator(.)ident(Count)operator(\)) operator(>) ident(Sisy)operator(.)ident(MaxKeyCountToScan) keyword(then)
      ident(Exit)operator(;)
    comment(//So <REAL> is TStringList.)

    comment(//<CURRENT> means the image that was saved before.)
    comment(//Here, it is a linear list of TSpyKey objects. That means that you can)
    comment(//only get X.Next and not X.Prev! However, I use "X.Prev" to simplify)
    comment(//some comments.)

    comment(//!!! Comparing means: Make <CURRENT> fit <REAL> !!!)

    comment(//If <CURRENT> wasn't saved before, it is just empty.)

    comment(//!!! There is no difference in comparing and saving in this method !!!)

    comment(//Building means: Comparing with an empty image.)

    comment(//We go through <REAL> and make <CURRENT> fit it)

    comment(//The following rules are important:)
    comment(//Key = "The currently interesting key.)
    comment(//LastKey = "The key with X.Next = Key" = "Key.Pref")

    ident(LastKey) operator(:=) keyword(nil)operator(;) comment(// := "Keys.Prev")
    ident(Key) operator(:=) ident(Keys)operator(;) comment(// := "LastKey.Next")

    comment(//Now compare step by step)
    keyword(for) ident(i) operator(:=) integer(0) keyword(to) ident(SL)operator(.)ident(Count)operator(-)integer(1) keyword(do) keyword(begin)
      keyword(if) ident(Assigned)operator(()ident(Key)operator(\)) keyword(and) operator(()ident(SL)operator([)ident(i)operator(]) operator(=) ident(Key)operator(.)ident(Name)operator(\)) keyword(then) keyword(begin)
        comment(//cK=  Normally (0.9999\) everything's the same)
        keyword(if) ident(Success)operator(()ident(RegOpenKey)operator(()ident(AHKEY)operator(,) ident(PChar)operator(()ident(SL)operator([)ident(i)operator(])operator(\))operator(,) ident(NewHKEY)operator(\))operator(\)) keyword(then)
          keyword(try)
            ident(Key)operator(.)ident(Spy)operator(()ident(NewHKEY)operator(,) ident(Sisy)operator(\))operator(;)
          keyword(finally)
            ident(RegCloseKey)operator(()ident(NewHKEY)operator(\))operator(;)
          keyword(end)operator(;)
        keyword(if) ident(Sisy)operator(.)ident(Terminated) keyword(then)
          ident(Exit)operator(;)

        ident(LastKey) operator(:=) ident(Key)operator(;)
        ident(Key) operator(:=) ident(Key)operator(.)ident(Next)operator(;)
      keyword(end) keyword(else) keyword(begin) comment(//Something's different? Yes, the IMPORTANT rest (0.0001\)\))
        comment(//Because the list finally must exactly fit SL, the "SL[i] key" has)
        comment(//to be inserted right here. But first let's look...)

        comment(//Maybe it was just moved? So search for it...)
        ident(NewKey) operator(:=) keyword(nil)operator(;)
        keyword(if) ident(Assigned)operator(()ident(Key)operator(\)) keyword(then) keyword(begin)
          ident(SearchKey_Prev) operator(:=) ident(Key)operator(;)
          ident(SearchKey) operator(:=) ident(Key)operator(.)ident(Next)operator(;)
          keyword(while) ident(Assigned)operator(()ident(SearchKey)operator(\)) keyword(do) keyword(begin)
            keyword(if) ident(SearchKey)operator(.)ident(Name) operator(=) ident(SL)operator([)ident(i)operator(]) keyword(then) keyword(begin) comment(//we found our moved key)
              ident(SearchKey_Prev)operator(.)ident(Next) operator(:=) ident(SearchKey)operator(.)ident(Next)operator(;) comment(//delete it from <CURRENT>)
              ident(NewKey) operator(:=) ident(SearchKey)operator(;) comment(//save that we found it)
            ident(Break) keyword(end)operator(;)
            ident(SearchKey_Prev) operator(:=) ident(SearchKey)operator(;)
            ident(SearchKey) operator(:=) ident(SearchKey)operator(.)ident(Next)operator(;)
          keyword(end)operator(;)
        keyword(end)operator(;)

        keyword(if) keyword(not) ident(Assigned)operator(()ident(NewKey)operator(\)) keyword(then) keyword(begin) comment(//if we didn't find it)
          comment(//cK+ No, not found! So it is new...)
          ident(NewKey) operator(:=) ident(TSpyKey)operator(.)ident(Create)operator(()ident(Self)operator(,) ident(SL)operator([)ident(i)operator(])operator(\))operator(;)
          ident(Sisy)operator(.)ident(IncKeyCount)operator(;)
          ident(Sisy)operator(.)ident(Reg)operator(.)ident(CurrentKey) operator(:=) ident(AHKEY)operator(;)
          comment({ ================ cK+ ================ })
          keyword(if) ident(Sisy)operator(.)ident(Started) keyword(and) ident(Sisy)operator(.)ident(Reg)operator(.)ident(KeyExists)operator(()ident(SL)operator([)ident(i)operator(])operator(\)) keyword(then)
            ident(Sisy)operator(.)ident(AddKeyChange)operator(()ident(cKeyPlus)operator(,) ident(Path) operator(+) char<delimiter(')content(\\)delimiter(')> operator(+) ident(NewKey)operator(.)ident(Name)operator(\))operator(;)

          ident(SavedDoReport) operator(:=) ident(Sisy)operator(.)ident(DoReport)operator(;)
          keyword(if) ident(Success)operator(()ident(RegOpenKey)operator(()ident(AHKEY)operator(,) ident(PChar)operator(()ident(SL)operator([)ident(i)operator(])operator(\))operator(,) ident(NewHKEY)operator(\))operator(\)) keyword(then)
            keyword(try)
              ident(Sisy)operator(.)ident(DoReport) operator(:=) ident(False)operator(;)
              ident(NewKey)operator(.)ident(Spy)operator(()ident(NewHKEY)operator(,) ident(Sisy)operator(\))operator(;) comment(//<-- recursion itself)
            keyword(finally)
              ident(RegCloseKey)operator(()ident(NewHKEY)operator(\))operator(;)
              ident(Sisy)operator(.)ident(DoReport) operator(:=) ident(SavedDoReport)operator(;)
            keyword(end)operator(;)

          keyword(if) ident(Sisy)operator(.)ident(Terminated) keyword(then)
            ident(Exit)operator(;)
        keyword(end)operator(;)

        comment(//The new key now must be placed after the last key)
        keyword(if) ident(Assigned)operator(()ident(LastKey)operator(\)) keyword(then)
          ident(LastKey)operator(.)ident(Next) operator(:=) ident(NewKey)
        keyword(else)
          comment(//If it's the first key, we don't have LastKey defined)
          comment(//So we have to set the "Root" to it)
          ident(Keys) operator(:=) ident(NewKey)operator(;)

        comment(//Now the rest of <CURRENT> has to be placed after the new key)
        ident(NewKey)operator(.)ident(Next) operator(:=) ident(Key)operator(;)
        comment(//And LastKey also has to refreshed: It is "Key.Pref" = NewKey!)
        ident(LastKey) operator(:=) ident(NewKey)operator(;)
      keyword(end)operator(;)
    keyword(end)operator(;)

    comment(//Because the whole <CURRENT> before Key is exactly <REAL>, the rest)
    comment(//(if there is one\) must have been deleted!)

    comment(//So first let's ensure that <CURRENT> ends here:)
    keyword(if) ident(Assigned)operator(()ident(LastKey)operator(\)) keyword(then)
      ident(LastKey)operator(.)ident(Next) operator(:=) keyword(nil)
    keyword(else)
      comment(//Another time: <CURRENT> is empty now, so set Keys instead)
      ident(Keys) operator(:=) keyword(nil)operator(;)

    comment(//Now, the first key that maybe was "cut" off is Key:)
    keyword(while) ident(Assigned)operator(()ident(Key)operator(\)) keyword(do) keyword(begin)
      comment(//cV- So, here really something HAS been deleted)
      ident(LastKey) operator(:=) ident(Key)operator(;)
      ident(Key) operator(:=) ident(Key)operator(.)ident(Next)operator(;)
      ident(Sisy)operator(.)ident(Reg)operator(.)ident(CurrentKey) operator(:=) ident(AHKEY)operator(;)
      comment({ ================ cK- ================ })
      keyword(if) ident(Sisy)operator(.)ident(Started) keyword(and) keyword(not) ident(Sisy)operator(.)ident(Reg)operator(.)ident(KeyExists)operator(()ident(LastKey)operator(.)ident(Name)operator(\)) keyword(then)
        ident(Sisy)operator(.)ident(AddKeyChange)operator(()ident(cKeyMinus)operator(,) ident(Path) operator(+) char<delimiter(')content(\\)delimiter(')> operator(+) ident(LastKey)operator(.)ident(Name)operator(\))operator(;)
      ident(LastKey)operator(.)ident(Free)operator(;)
    keyword(end)operator(;)
  keyword(end)operator(;)


keyword(begin)
  keyword(if) ident(Sisy)operator(.)ident(Terminated) keyword(or) operator(()ident(AHKEY) operator(=) integer(0)operator(\)) keyword(then)
    ident(Exit)operator(;)
  ident(LastKey) operator(:=) ident(Sisy)operator(.)ident(CurrentSpyKey)operator(;)
  ident(Sisy)operator(.)ident(CurrentSpyKey) operator(:=) ident(Self)operator(;)

  ident(Sisy)operator(.)ident(IncKeyIndex)operator(;)

  ident(SL) operator(:=) ident(TStringList)operator(.)ident(Create)operator(;)
  keyword(try)
    ident(Sisy)operator(.)ident(Reg)operator(.)ident(CurrentKey) operator(:=) ident(AHKEY)operator(;)
    ident(CompareValues)operator(;)
    keyword(if) ident(Sisy)operator(.)ident(Started) keyword(then) ident(CompareData)operator(;)
    ident(CompareKeys)operator(;)
  keyword(finally)
    ident(Sisy)operator(.)ident(Reg)operator(.)ident(CurrentKey) operator(:=) integer(0)operator(;)
    ident(SL)operator(.)ident(Free)operator(;)
    ident(Sisy)operator(.)ident(CurrentSpyKey) operator(:=) ident(LastKey)operator(;)
  keyword(end)operator(;)
keyword(end)operator(;)

comment({ TSisyChange })

keyword(constructor) ident(TSisyChange)operator(.)ident(Create)operator(()ident(ATyp)operator(:) ident(TSisyChangeType)operator(;) keyword(const) ident(APath)operator(:) keyword(string)operator(;)
  ident(AOldContext)operator(:) ident(TRegContext)operator(;) ident(ANewContext)operator(:) ident(TRegContext)operator(\))operator(;)
keyword(begin)
  keyword(inherited) ident(Create)operator(;)
  ident(Typ) operator(:=) ident(ATyp)operator(;)
  ident(Path) operator(:=) ident(APath)operator(;)
  ident(Old) operator(:=) ident(AOldContext)operator(;)
  ident(New) operator(:=) ident(ANewContext)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TSisyChange)operator(.)ident(ReportToPluto)operator(;)
keyword(var)
  ident(Node)operator(,) ident(RootNode)operator(:) ident(TTreeNode)operator(;)
  ident(Root)operator(,) ident(SubPath)operator(:) keyword(string)operator(;)
  ident(NewNode)operator(:) ident(Boolean)operator(;)
  ident(i)operator(:) ident(Integer)operator(;)

  keyword(function) ident(IconOfSisyChangeType)operator(()ident(Typ)operator(:) ident(TSisyChangeType)operator(\))operator(:) ident(Integer)operator(;)
  keyword(begin)
    ident(Result) operator(:=) operator(-)integer(1)operator(;)
    keyword(case) ident(Typ) keyword(of)
      comment(//cNone, cError: Result := -1;)
      ident(cKeyPlus)operator(..)ident(cContextChange)operator(:) ident(Result) operator(:=) ident(Integer)operator(()ident(Typ)operator(\)) operator(-) integer(2)operator(;)
    keyword(end)operator(;)
  keyword(end)operator(;)

  keyword(function) ident(FindNode)operator(()ident(Text)operator(:) keyword(string)operator(\))operator(:) ident(TTreeNode)operator(;)
  keyword(begin)
    ident(Result) operator(:=) ident(WorkWin)operator(.)ident(SisyTV)operator(.)ident(Items)operator(.)ident(GetFirstNode)operator(;)
    keyword(while) ident(Assigned)operator(()ident(Result)operator(\)) keyword(do) keyword(begin)
      keyword(if) ident(SameText)operator(()ident(Result)operator(.)ident(Text)operator(,) ident(Text)operator(\)) keyword(then)
        ident(Exit)operator(;)
      ident(Result) operator(:=) ident(Result)operator(.)ident(GetNextSibling)operator(;)
    keyword(end)operator(;)
  keyword(end)operator(;)

keyword(begin)
  keyword(if) keyword(not) ident(WorkWin)operator(.)ident(SisyListCB)operator(.)ident(Checked) keyword(then)
    ident(Exit)operator(;)

  keyword(if) ident(Typ) keyword(in) operator([)ident(cContextChange)operator(,) ident(cValueMinus)operator(,) ident(cValuePlus)operator(]) keyword(then) keyword(begin)
    ident(Root) operator(:=) ident(ExRegFullKey)operator(()ident(Path)operator(\))operator(;)
    ident(SubPath) operator(:=) ident(ExRegValue)operator(()ident(Path)operator(\))operator(;)
  keyword(end) keyword(else) keyword(begin)
    ident(Root) operator(:=) ident(UntilLastChar)operator(()ident(ExRegFullKey)operator(()ident(Path)operator(\))operator(,) char<delimiter(')content(\\)delimiter(')>operator(\))operator(;)
    ident(SubPath) operator(:=) ident(FromLastChar)operator(()ident(ExRegFullKey)operator(()ident(Path)operator(\))operator(,) char<delimiter(')content(\\)delimiter(')>operator(\))operator(;)
  keyword(end)operator(;)

  keyword(with) ident(WorkWin) keyword(do)
    keyword(for) ident(i) operator(:=) integer(0) keyword(to) ident(SisyFilter)operator(.)ident(Count)operator(-)integer(1) keyword(do) keyword(begin)
      keyword(if) ident(TextAtPos)operator(()ident(Root)operator(,) integer(1)operator(,) ident(SisyFilter)operator([)ident(i)operator(])operator(\)) keyword(then) keyword(begin)
        comment(//show that it's working)
        keyword(with) ident(FilterChangesB) keyword(do) keyword(begin)
          ident(Caption) operator(:=) string<delimiter(')content(Filter..!)delimiter(')>operator(;)
          ident(Repaint)operator(;)
          ident(Caption) operator(:=) string<delimiter(')content(Filter...)delimiter(')>operator(;)
          ident(Repaint)operator(;)
        keyword(end)operator(;)
      ident(Exit)operator(;) keyword(end)operator(;)
    keyword(end)operator(;)

  keyword(with) ident(WorkWin)operator(.)ident(SisyTV)operator(.)ident(Items) keyword(do) keyword(begin)
    ident(BeginUpdate)operator(;)
    keyword(try)
      ident(RootNode) operator(:=) ident(FindNode)operator(()ident(Root)operator(\))operator(;)
      ident(NewNode) operator(:=) keyword(not) ident(Assigned)operator(()ident(RootNode)operator(\))operator(;)
      keyword(if) ident(NewNode) keyword(then) keyword(begin)
        ident(RootNode) operator(:=) ident(AddChild)operator(()keyword(nil)operator(,) ident(Root)operator(\))operator(;)
        ident(RootNode)operator(.)ident(ImageIndex) operator(:=) ident(iconGroup)operator(;)
      keyword(end) keyword(else) keyword(if) keyword(not) ident(SisyChangeActivated)operator(()ident(RootNode)operator(\)) keyword(then) keyword(begin)
        ident(EndUpdate)operator(;)
      ident(Exit) keyword(end)operator(;)

      ident(Node) operator(:=) ident(AddChildObject)operator(()ident(RootNode)operator(,) ident(SubPath)operator(,) ident(Self)operator(\))operator(;)
      ident(Node)operator(.)ident(ImageIndex) operator(:=) ident(IconOfSisyChangeType)operator(()ident(Typ)operator(\))operator(;)
      keyword(if) ident(Typ) operator(=) ident(cContextChange) keyword(then) keyword(begin)
        ident(AddChild)operator(()ident(Node)operator(,) ident(DataPreviewOfContext)operator(()ident(Old)operator(\))operator(\))operator(.)ident(ImageIndex) operator(:=) ident(iconOldContext)operator(;)
        ident(AddChild)operator(()ident(Node)operator(,) ident(DataPreviewOfContext)operator(()ident(New)operator(\))operator(\))operator(.)ident(ImageIndex) operator(:=) ident(iconNewContext)operator(;)
      keyword(end)operator(;)
    keyword(finally)
      ident(EndUpdate)operator(;)
    keyword(end)operator(;)
  keyword(end)operator(;)

  keyword(if) ident(NewNode) keyword(and) ident(WorkWin)operator(.)ident(SisyExpandGroupsCB)operator(.)ident(Checked) keyword(then)
    ident(RootNode)operator(.)ident(Expand)operator(()ident(False)operator(\))operator(;)

  keyword(if) keyword(not) ident(RootNode)operator(.)ident(Expanded) keyword(then)
    ident(RootNode)operator(.)ident(ImageIndex) operator(:=) ident(iconGroupBlinking)operator(;)
keyword(end)operator(;)

comment({ TSisyList })

keyword(function) ident(TSisyList)operator(.)ident(GetSisy)operator(()ident(Index)operator(:) ident(Integer)operator(\))operator(:) ident(TSisyThread)operator(;)
keyword(begin)
  ident(Result) operator(:=) ident(Get)operator(()ident(Index)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TSisyList)operator(.)ident(PutSisy)operator(()ident(Index)operator(:) ident(Integer)operator(;) ident(Sisy)operator(:) ident(TSisyThread)operator(\))operator(;)
keyword(begin)
  ident(Put)operator(()ident(Index)operator(,) ident(Sisy)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TSisyList)operator(.)ident(Resume)operator(;)
keyword(var)
  ident(i)operator(:) ident(Integer)operator(;)
keyword(begin)
  keyword(for) ident(i) operator(:=) integer(0) keyword(to) ident(Count)operator(-)integer(1) keyword(do)
    ident(Items)operator([)ident(i)operator(])operator(.)ident(Resume)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TSisyList)operator(.)ident(Suspend)operator(;)
keyword(var)
  ident(i)operator(:) ident(Integer)operator(;)
keyword(begin)
  keyword(for) ident(i) operator(:=) integer(0) keyword(to) ident(Count)operator(-)integer(1) keyword(do)
    ident(Items)operator([)ident(i)operator(])operator(.)ident(Resume)operator(;)
keyword(end)operator(;)

keyword(initialization)
  ident(SisyFilter) operator(:=) ident(TStringList)operator(.)ident(Create)operator(;)
  ident(SisyFilter)operator(.)ident(Sorted) operator(:=) ident(True)operator(;)
  ident(SisyFilter)operator(.)ident(Duplicates) operator(:=) ident(dupIgnore)operator(;)

keyword(finalization)
  ident(SisyFilter)operator(.)ident(Free)operator(;)

keyword(end)operator(.)
keyword(unit) ident(splash)operator(;)

keyword(interface)

keyword(uses)
  ident(Windows)operator(,) ident(Messages)operator(,) ident(SysUtils)operator(,) ident(Classes)operator(,) ident(Graphics)operator(,) ident(Controls)operator(,) ident(Forms)operator(,) ident(Dialogs)operator(,)
  ident(ExtCtrls)operator(,) ident(StdCtrls)operator(,) ident(ImgList)operator(,) ident(YTools)operator(,) ident(IniFiles)operator(,) ident(LinkLabel)operator(,) ident(PrefTools)operator(,)
  ident(PlutoConst)operator(;)

keyword(type)
  ident(TSplashWin) operator(=) keyword(class)operator(()ident(TForm)operator(\))
    ident(Image1)operator(:) ident(TImage)operator(;)
    ident(StartB)operator(:) ident(TButton)operator(;)
    ident(SplashScreenCB)operator(:) ident(TPrefCheckBox)operator(;)
    ident(LinkLabel1)operator(:) ident(TLinkLabel)operator(;)
    ident(LinkLabel2)operator(:) ident(TLinkLabel)operator(;)
    ident(LogoL)operator(:) ident(TLabel)operator(;)
    keyword(procedure) ident(StartBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(FormShow)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(FormCreate)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(FormHide)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(FormKeyDown)operator(()ident(Sender)operator(:) ident(TObject)operator(;) keyword(var) ident(Key)operator(:) ident(Word)operator(;)
      ident(Shift)operator(:) ident(TShiftState)operator(\))operator(;)
    keyword(procedure) ident(SplashScreenCBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
  keyword(end)operator(;)

keyword(var)
  ident(SplashWin)operator(:) ident(TSplashWin)operator(;)

keyword(implementation)

keyword(uses) ident(plutomain)operator(,) ident(TreeU)operator(,) ident(WorkU)operator(,) ident(PrefU)operator(;)

preprocessor({$R *.DFM})

keyword(procedure) ident(TSplashWin)operator(.)ident(StartBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(Close)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TSplashWin)operator(.)ident(FormShow)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(const)
  ident(Messages)operator(:) keyword(array)operator([)integer(0)operator(..)integer(12)operator(]) keyword(of) keyword(string) operator(=) operator(()string<delimiter(')content(Let)char('')content(s see...)delimiter(')>operator(,)
                                      string<delimiter(')content(Ready)delimiter(')>operator(,)
                                      string<delimiter(')content(Hello World!)delimiter(')>operator(,)
                                      string<delimiter(')content(Start)delimiter(')>operator(,)
                                      string<delimiter(')content(OK)delimiter(')>operator(,)
                                      string<delimiter(')content(Pluto!)delimiter(')>operator(,)
                                      string<delimiter(')content(Go Go Go)delimiter(')>operator(,)
                                      string<delimiter(')content(Everything)char('')content(s OK)delimiter(')>operator(,)
                                      string<delimiter(')content(Yes!)delimiter(')>operator(,)
                                      string<delimiter(')content(God save the Queen)delimiter(')>operator(,)
                                      string<delimiter(')content(Oh yeah)delimiter(')>operator(,)
                                      string<delimiter(')content(Yabadabadoo!)delimiter(')>operator(,)
                                      string<delimiter(')content(Don)char('')content(t worry, be happy!)delimiter(')>
                                      operator(\))operator(;)
keyword(var)
  ident(ImageFile)operator(:) keyword(string)operator(;)
keyword(begin)
  ident(Left) operator(:=) operator(()ident(Screen)operator(.)ident(Width) operator(-) ident(Width)operator(\)) keyword(div) integer(2)operator(;)
  ident(Top) operator(:=) operator(()ident(Screen)operator(.)ident(Height) operator(-) ident(Height)operator(\)) keyword(div) integer(2)operator(;)

  ident(StartB)operator(.)ident(Caption) operator(:=) ident(Messages)operator([)ident(Random)operator(()ident(Length)operator(()ident(Messages)operator(\))operator(\))operator(])operator(;)
  ident(SplashWin)operator(.)ident(SplashScreenCB)operator(.)ident(Load)operator(;)

  ident(Caption) operator(:=) string<delimiter(')content(cYcnus.Pluto )delimiter(')> operator(+) ident(Version) operator(+) string<delimiter(')content( says )delimiter(')> operator(+) ident(MainWin)operator(.)ident(Greeting)operator(;)

  keyword(try)
    ident(ImageFile) operator(:=) ident(PlutoDir) operator(+) string<delimiter(')content(logo deluxe.bmp)delimiter(')>operator(;)
    keyword(if) ident(FileEx)operator(()ident(ImageFile)operator(\)) keyword(then) keyword(begin)
      keyword(with) ident(Image1)operator(.)ident(Picture) keyword(do)
        keyword(if) ident(Graphic) operator(=) keyword(nil) keyword(then)
          ident(LoadFromFile)operator(()ident(ImageFile)operator(\))operator(;)
      keyword(if) keyword(not) ident(Switch)operator(()string<delimiter(')content(MurphyMode)delimiter(')>operator(\)) keyword(then)
        ident(LogoL)operator(.)ident(Visible) operator(:=) ident(False)operator(;)
      ident(Exit)operator(;)
    keyword(end)operator(;)

    ident(ImageFile) operator(:=) ident(PlutoDir) operator(+) string<delimiter(')content(logo.bmp)delimiter(')>operator(;)
    keyword(if) ident(FileEx)operator(()ident(ImageFile)operator(\)) keyword(then) keyword(begin)
      keyword(with) ident(Image1)operator(.)ident(Picture) keyword(do)
        keyword(if) ident(Graphic) operator(=) keyword(nil) keyword(then)
          ident(LoadFromFile)operator(()ident(ImageFile)operator(\))operator(;)
    keyword(end)operator(;)
  keyword(except)
    ident(ShowMessage)operator(()string<delimiter(')content(Could not load Splash Screen image!)delimiter(')>operator(\))operator(;)
  keyword(end)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TSplashWin)operator(.)ident(FormCreate)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(Hide)operator(;)
  ident(Randomize)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TSplashWin)operator(.)ident(FormHide)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  comment(//Image1.Picture.Bitmap.FreeImage;)
keyword(end)operator(;)

keyword(procedure) ident(TSplashWin)operator(.)ident(FormKeyDown)operator(()ident(Sender)operator(:) ident(TObject)operator(;) keyword(var) ident(Key)operator(:) ident(Word)operator(;)
  ident(Shift)operator(:) ident(TShiftState)operator(\))operator(;)
keyword(begin)
  keyword(if) ident(Key) operator(=) ident(VK_ESCAPE) keyword(then)
    ident(Close)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TSplashWin)operator(.)ident(SplashScreenCBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  keyword(if) ident(Started) keyword(then)
    ident(PrefWin)operator(.)ident(SplashScreenCB)operator(.)ident(Checked) operator(:=) ident(SplashScreenCB)operator(.)ident(Checked)operator(;)
keyword(end)operator(;)

keyword(end)operator(.)
keyword(unit) ident(SpyTH)operator(;)

keyword(interface)

keyword(uses)
  ident(Classes)operator(,) ident(Windows)operator(,) ident(Dialogs)operator(,) ident(ComCtrls)operator(,) ident(CompEx)operator(,) ident(SysUtils)operator(,) ident(YTools)operator(,) ident(clock)operator(,)
  ident(plutoconst)operator(,) ident(StdCtrls)operator(,) ident(forms)operator(,) ident(XReg)operator(,) ident(stringcomp)operator(;)

keyword(type)
  ident(TChildren) operator(=) keyword(array) keyword(of) ident(TTreeNode)operator(;)

  ident(TRegSpyThread) operator(=) keyword(class)operator(()ident(TThread)operator(\))
  directive(private)
    ident(Reg)operator(:) ident(TXRegistry)operator(;)
    ident(CurNode)operator(:) ident(TTreeNode)operator(;)
    ident(Dead)operator(:) ident(Boolean)operator(;)
    ident(Dif)operator(:) ident(TSLComp)operator(;)
    ident(CurChildren)operator(:) ident(TChildren)operator(;)
  directive(protected)
    keyword(procedure) ident(Execute)operator(;) directive(override)operator(;)

    keyword(procedure) ident(SaveCheckNode)operator(;)
    keyword(procedure) ident(SaveGetDif)operator(;)
    keyword(procedure) ident(SaveDeleteDead)operator(;)
    keyword(procedure) ident(SaveGetChildren)operator(;)
    keyword(procedure) ident(SaveAddNew)operator(;)
  directive(public)
    ident(Restart)operator(:) ident(Boolean)operator(;)
    ident(Mess)operator(:) keyword(string)operator(;)
    ident(Delay)operator(:) ident(Integer)operator(;)
    keyword(function) ident(Alive)operator(()ident(Node)operator(:) ident(TTreeNode)operator(\))operator(:) ident(Boolean)operator(;)
    keyword(procedure) ident(Spy)operator(;)
    keyword(procedure) ident(Reload)operator(()ident(Node)operator(:) ident(TTreeNode)operator(\))operator(;)
    keyword(procedure) ident(ReloadValues)operator(;)
    keyword(procedure) ident(AddTrace)operator(()ident(Trace)operator(:) keyword(string)operator(\))operator(;)
    keyword(constructor) ident(CreateIt)operator(()ident(PriorityLevel)operator(:) ident(TThreadPriority)operator(\))operator(;)
    keyword(destructor) ident(Destroy)operator(;) directive(override)operator(;)
  keyword(end)operator(;)

keyword(implementation)

keyword(uses) ident(plutomain)operator(,) ident(TreeU)operator(,) ident(WorkU)operator(,) ident(ValuesU)operator(;)

comment({ TRegSpyThread })

keyword(constructor) ident(TRegSpyThread)operator(.)ident(CreateIt)operator(()ident(PriorityLevel)operator(:) ident(TThreadPriority)operator(\))operator(;)
keyword(begin)
  keyword(inherited) ident(Create)operator(()ident(True)operator(\))operator(;)      comment(// Create thread suspended)
  ident(Priority) operator(:=) ident(PriorityLevel)operator(;)   comment(// Set Priority Level)
  ident(FreeOnTerminate) operator(:=) ident(False)operator(;)     comment(// Thread frees itself when terminated)
  ident(Reg) operator(:=) ident(TXRegistry)operator(.)ident(Create)operator(;)
  ident(Delay) operator(:=) integer(100)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TRegSpyThread)operator(.)ident(Execute)operator(;)
keyword(begin)
  keyword(while) keyword(not) ident(Terminated) keyword(do) keyword(begin)
    ident(Restart) operator(:=) ident(False)operator(;)
    keyword(try)
      keyword(if) keyword(not) ident(Terminated) keyword(then)
        ident(Sleep)operator(()ident(Delay)operator(\))operator(;)
      keyword(if) keyword(not) ident(Terminated) keyword(then)
        ident(Spy)operator(;)
    keyword(except) keyword(end)operator(;)
  keyword(end)operator(;)
keyword(end)operator(;)

keyword(function) ident(TRegSpyThread)operator(.)ident(Alive)operator(()ident(Node)operator(:) ident(TTreeNode)operator(\))operator(:) ident(Boolean)operator(;)
keyword(begin)
  ident(Result) operator(:=) ident(False)operator(;)

  keyword(if) ident(Restart) keyword(then)
    ident(Exit)operator(;)

  keyword(if) ident(Terminated) keyword(then)
    ident(Exit)operator(;)

  keyword(if) ident(Assigned)operator(()ident(Node)operator(\)) keyword(then)
    keyword(try)
      keyword(if) operator(()ident(Node)operator(.)ident(Text) operator(=) string<delimiter(')delimiter(')>operator(\)) keyword(then)
        ident(Exit)operator(;)

      keyword(if) keyword(not) ident(Assigned)operator(()ident(Node)operator(\)) keyword(then)
        ident(Exit)operator(;)

      ident(Result) operator(:=) ident(True)operator(;)
    keyword(except)
      ident(Exit)operator(;)
    keyword(end)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TRegSpyThread)operator(.)ident(SaveCheckNode)operator(;)
keyword(begin)
  ident(Dead) operator(:=) keyword(not) ident(Alive)operator(()ident(CurNode)operator(\))operator(;)
  keyword(if) ident(Dead) keyword(then)
    ident(Exit)operator(;)

  ident(CheckNode)operator(()ident(CurNode)operator(,) ident(False)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TRegSpyThread)operator(.)ident(SaveGetDif)operator(;)
keyword(var)
  ident(Real)operator(,) ident(Cur)operator(:) ident(TStringList)operator(;)
keyword(begin)
  ident(Dead) operator(:=) keyword(not) ident(Alive)operator(()ident(CurNode)operator(\))operator(;)
  keyword(if) ident(Dead) keyword(then)
    ident(Exit)operator(;)

  ident(dif) operator(:=) keyword(nil)operator(;)
  
  keyword(if) keyword(not) ident(CurNode)operator(.)ident(Expanded) keyword(then) keyword(begin)
    ident(Dead) operator(:=) ident(True)operator(;)
  ident(Exit)operator(;) keyword(end)operator(;)

  keyword(if) keyword(not) ident(OpenNodeOK)operator(()ident(Reg)operator(,) ident(CurNode)operator(\)) keyword(then)
    ident(Exit)operator(;)

  ident(Real) operator(:=) ident(TStringList)operator(.)ident(Create)operator(;)

  ident(Reg)operator(.)ident(GetKeyNames)operator(()ident(Real)operator(\))operator(;)
  ident(Reg)operator(.)ident(CloseKey)operator(;)

  ident(Cur) operator(:=) ident(GetChildNames)operator(()ident(CurNode)operator(\))operator(;)

  keyword(if) operator(()ident(Cur)operator(.)ident(Count) operator(=) integer(0)operator(\)) keyword(and) operator(()ident(Real)operator(.)ident(Count) operator(=) integer(0)operator(\)) keyword(then)
    ident(Dead) operator(:=) ident(True)operator(;)

  ident(dif) operator(:=) ident(TSLComp)operator(.)ident(Create)operator(()ident(Cur)operator(,) ident(Real)operator(,) ident(False)operator(\))operator(;)

  ident(Cur)operator(.)ident(Free)operator(;)
  ident(Real)operator(.)ident(Free)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TRegSpyThread)operator(.)ident(SaveDeleteDead)operator(;)
keyword(var)
  ident(TN)operator(:) ident(TTreeNode)operator(;)
  ident(i)operator(:) ident(Integer)operator(;)
keyword(begin)
  ident(Dead) operator(:=) keyword(not) ident(Alive)operator(()ident(CurNode)operator(\))operator(;)
  keyword(if) ident(Dead) keyword(then)
    ident(Exit)operator(;)

  keyword(if) keyword(not) ident(Assigned)operator(()ident(dif)operator(\)) keyword(or) keyword(not) ident(Assigned)operator(()ident(dif)operator(.)ident(OnlyA)operator(\)) keyword(then)
    ident(Exit)operator(;)

  keyword(if) ident(CurNode)operator(.)ident(Expanded) keyword(then)
    keyword(for) ident(i) operator(:=) integer(0) keyword(to) ident(dif)operator(.)ident(OnlyA)operator(.)ident(Count)operator(-)integer(1) keyword(do) keyword(begin)
      ident(TN) operator(:=) ident(FindNode)operator(()ident(CurNode)operator(,) ident(dif)operator(.)ident(OnlyA)operator([)ident(i)operator(])operator(\))operator(;)
      keyword(if) ident(Assigned)operator(()ident(TN)operator(\)) keyword(then) keyword(begin)
        ident(RegTV)operator(.)ident(Selected) operator(:=) ident(GetNextBest)operator(()ident(TN)operator(\))operator(;)
        ident(TN)operator(.)ident(Delete)operator(;)
        ident(AddTrace)operator(()string<delimiter(')content(Key deleted: )delimiter(')> operator(+) ident(dif)operator(.)ident(OnlyA)operator([)ident(i)operator(])operator(\))operator(;)
      keyword(end)operator(;)
    keyword(end)
  keyword(else)
    ident(Exit)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TRegSpyThread)operator(.)ident(SaveGetChildren)operator(;)
keyword(var)
  ident(i)operator(:) ident(Integer)operator(;)
  ident(TN)operator(:) ident(TTreeNode)operator(;)
keyword(begin)
  ident(Dead) operator(:=) keyword(not) ident(Alive)operator(()ident(CurNode)operator(\))operator(;)
  keyword(if) ident(Dead) keyword(then)
    ident(Exit)operator(;)

  ident(CurChildren) operator(:=) keyword(nil)operator(;)
  ident(SetLength)operator(()ident(CurChildren)operator(,) ident(CurNode)operator(.)ident(Count)operator(\))operator(;)

  ident(i) operator(:=) integer(0)operator(;)
  ident(TN) operator(:=) ident(CurNode)operator(.)ident(GetFirstChild)operator(;)
  keyword(while) ident(Assigned)operator(()ident(TN)operator(\)) keyword(do) keyword(begin)
    keyword(if) ident(i) operator(<=) ident(High)operator(()ident(CurChildren)operator(\)) keyword(then)
      ident(CurChildren)operator([)ident(i)operator(]) operator(:=) ident(TN)
    keyword(else)
      ident(ShowMessage)operator(()string<delimiter(')content(Error: Too much children)delimiter(')>operator(\))operator(;)
    ident(Inc)operator(()ident(i)operator(\))operator(;)
    ident(TN) operator(:=) ident(CurNode)operator(.)ident(GetNextChild)operator(()ident(TN)operator(\))
  keyword(end)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TRegSpyThread)operator(.)ident(SaveAddNew)operator(;)
keyword(var)
  ident(i)operator(:) ident(Integer)operator(;)
keyword(begin)
  ident(Dead) operator(:=) keyword(not) ident(Alive)operator(()ident(CurNode)operator(\))operator(;)
  keyword(if) ident(Dead) keyword(then)
    ident(Exit)operator(;)

  keyword(if) keyword(not) ident(Assigned)operator(()ident(Dif)operator(\)) keyword(or) keyword(not) ident(Assigned)operator(()ident(Dif)operator(.)ident(OnlyB)operator(\)) keyword(or) operator(()ident(Dif)operator(.)ident(OnlyB)operator(.)ident(Count) operator(=) integer(0)operator(\)) keyword(then)
    ident(Exit)operator(;)

  keyword(for) ident(i) operator(:=) integer(0) keyword(to) ident(Dif)operator(.)ident(OnlyB)operator(.)ident(Count)operator(-)integer(1) keyword(do) keyword(begin)  comment(//Erstellt/hinbenannt)
    ident(RegTV)operator(.)ident(Items)operator(.)ident(AddChild)operator(()ident(CurNode)operator(,) ident(Dif)operator(.)ident(OnlyB)operator([)ident(i)operator(])operator(\))operator(;)
    ident(AddTrace)operator(()string<delimiter(')content(New Key: )delimiter(')> operator(+) ident(dif)operator(.)ident(OnlyB)operator([)ident(i)operator(])operator(\))operator(;)
    ident(MainWin)operator(.)ident(StatusBarUpdate)operator(;)
    comment(//AddHint('Neuer Schlüssel: ' + CurNode.Text + '\\' + Dif.OnlyB[i]\);)
  keyword(end)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TRegSpyThread)operator(.)ident(Reload)operator(()ident(Node)operator(:) ident(TTreeNode)operator(\))operator(;)
keyword(var)
  ident(i)operator(:) ident(Integer)operator(;)
  ident(TN)operator(:) ident(TTreeNode)operator(;)
  ident(zCurNode)operator(:) ident(TTreeNode)operator(;)
  ident(MyChildren)operator(:) ident(TChildren)operator(;)
keyword(begin)
  keyword(if) ident(Terminated) keyword(or) ident(Restart) keyword(then)
    ident(Exit)operator(;)

  ident(CurNode) operator(:=) ident(Node)operator(;)

  ident(zCurNode) operator(:=) ident(CurNode)operator(;)
  keyword(try)
    comment(//Mess := 'SaveCheckNode';)
    ident(Synchronize)operator(()ident(SaveCheckNode)operator(\))operator(;)
    keyword(if) ident(Dead) keyword(or) ident(Terminated) keyword(then)
      ident(Exit)operator(;)

    comment(//Mess := 'SaveGetDif';)
    ident(Synchronize)operator(()ident(SaveGetDif)operator(\))operator(;)
    keyword(if) ident(Dead) keyword(or) ident(Terminated) keyword(then)
      ident(Exit)operator(;)

    comment(//Mess := 'SaveDeleteDead';)
    ident(Synchronize)operator(()ident(SaveDeleteDead)operator(\))operator(;)
    keyword(if) ident(Dead) keyword(or) ident(Terminated) keyword(then)
      ident(Exit)operator(;)

    comment(//Mess := 'SaveGetChildren';)
    ident(Synchronize)operator(()ident(SaveGetChildren)operator(\))operator(;)
    keyword(if) ident(Dead) keyword(or) ident(Terminated) keyword(then)
      ident(Exit)operator(;)

    comment(//Mess := 'SaveGetChildren';)
    ident(Synchronize)operator(()ident(SaveAddNew)operator(\))operator(;)
    keyword(if) ident(Dead) keyword(or) ident(Terminated) keyword(then)
      ident(Exit)operator(;)

    ident(Dif)operator(.)ident(Free)operator(;)

    comment(//Mess := 'MyChildren';)
    ident(SetLength)operator(()ident(MyChildren)operator(,) ident(Length)operator(()ident(CurChildren)operator(\))operator(\))operator(;)
    keyword(for) ident(i) operator(:=) integer(0) keyword(to) ident(High)operator(()ident(MyChildren)operator(\)) keyword(do)
      ident(MyChildren)operator([)ident(i)operator(]) operator(:=) ident(CurChildren)operator([)ident(i)operator(])operator(;)

    keyword(for) ident(i) operator(:=) integer(0) keyword(to) ident(High)operator(()ident(MyChildren)operator(\)) keyword(do) keyword(begin)
      ident(TN) operator(:=) ident(MyChildren)operator([)ident(i)operator(])operator(;)
      keyword(if) ident(Alive)operator(()ident(TN)operator(\)) keyword(then)
        comment(//if TN.Expanded then)
        comment(//if NodeVisible(TN\) then)
          ident(Reload)operator(()ident(TN)operator(\))operator(;)
        comment(//else)
         comment(//Break;)
      keyword(if) ident(Restart) keyword(or) ident(Terminated) keyword(then)
        ident(Break)operator(;)
    keyword(end)operator(;)
    ident(MyChildren) operator(:=) keyword(nil)operator(;)

  keyword(except)
    keyword(if) ident(Terminated) keyword(then)
      ident(Exit)operator(;)
    ident(AddHint)operator(()string<delimiter(')content(Error in Spy: )delimiter(')> operator(+) ident(Mess)operator(\))operator(;)
    ident(WorkWin)operator(.)ident(Label7)operator(.)ident(Caption) operator(:=) string<delimiter(')content(ERROR)delimiter(')>operator(;)
  keyword(end)operator(;)
  ident(CurNode) operator(:=) ident(zCurNode)operator(;)
keyword(end)operator(;)

keyword(function) ident(FindItemByRealName)operator(()ident(LV)operator(:) ident(TListView)operator(;) ident(Text)operator(:) keyword(string)operator(\))operator(:) ident(TListItem)operator(;)
keyword(var)
  ident(i)operator(:) ident(Integer)operator(;)
keyword(begin)
  ident(Result) operator(:=) keyword(nil)operator(;)
  keyword(for) ident(i) operator(:=) integer(0) keyword(to) ident(LV)operator(.)ident(Items)operator(.)ident(Count)operator(-)integer(1) keyword(do)
    keyword(if) ident(LV)operator(.)ident(Items)operator([)ident(i)operator(])operator(.)ident(Caption) operator(=) ident(Text) keyword(then) keyword(begin)
      ident(Result) operator(:=) ident(LV)operator(.)ident(Items)operator([)ident(i)operator(])operator(;)
    ident(Exit)operator(;) keyword(end)operator(;)
  keyword(for) ident(i) operator(:=) integer(0) keyword(to) ident(LV)operator(.)ident(Items)operator(.)ident(Count)operator(-)integer(1) keyword(do)
    keyword(if) ident(SameText)operator(()ident(RealValueName)operator(()ident(LV)operator(.)ident(Items)operator([)ident(i)operator(])operator(\))operator(,) ident(Text)operator(\)) keyword(then) keyword(begin)
      ident(Result) operator(:=) ident(LV)operator(.)ident(Items)operator([)ident(i)operator(])operator(;)
    ident(Break)operator(;) keyword(end)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TRegSpyThread)operator(.)ident(ReloadValues)operator(;)
keyword(var)
  ident(Item)operator(:) ident(TListItem)operator(;)
  ident(Real)operator(,) ident(Cur)operator(:) ident(TStringList)operator(;)
  ident(Dif)operator(:) ident(TSLComp)operator(;)
  ident(i)operator(:) ident(integer)operator(;)
keyword(begin)
  keyword(if) ident(Terminated) keyword(or) ident(Restart) keyword(then)
    ident(Exit)operator(;)

  keyword(if) keyword(not) ident(OpenNodeOK)operator(()ident(Reg)operator(,) ident(RegTV)operator(.)ident(Selected)operator(\)) keyword(then)
    ident(Exit)operator(;)

  ident(Real) operator(:=) ident(TStringList)operator(.)ident(Create)operator(;)
  ident(Reg)operator(.)ident(GetValueNames)operator(()ident(Real)operator(\))operator(;)

  ident(Cur) operator(:=) ident(TStringList)operator(.)ident(Create)operator(;)
  keyword(with) ident(ValueList)operator(.)ident(Items) keyword(do)
    keyword(for) ident(i) operator(:=) integer(0) keyword(to) ident(Count)operator(-)integer(1) keyword(do)
      ident(Cur)operator(.)ident(Add)operator(()ident(RealValueName)operator(()ident(Item)operator([)ident(i)operator(])operator(\))operator(\))operator(;)

  ident(Dif) operator(:=) ident(TSLComp)operator(.)ident(Create)operator(()ident(Cur)operator(,) ident(Real)operator(,) ident(False)operator(\))operator(;)
  ident(Real)operator(.)ident(Free)operator(;)
  ident(Cur)operator(.)ident(Free)operator(;)

  keyword(for) ident(i) operator(:=) integer(0) keyword(to) ident(Dif)operator(.)ident(OnlyA)operator(.)ident(Count)operator(-)integer(1) keyword(do) keyword(begin) comment(//Gelöscht/wegbenannt)
    ident(Item) operator(:=) ident(FindItemByRealName)operator(()ident(ValueList)operator(,) ident(Dif)operator(.)ident(OnlyA)operator([)ident(i)operator(])operator(\))operator(;)
    keyword(if) ident(Assigned)operator(()ident(Item)operator(\)) keyword(then) keyword(begin)
      ident(Item)operator(.)ident(Delete)operator(;)
      ident(AddTrace)operator(()string<delimiter(')content(Value deleted: )delimiter(')> operator(+) ident(Dif)operator(.)ident(OnlyA)operator([)ident(i)operator(])operator(\))operator(;)
    keyword(end)operator(;)
  keyword(end)operator(;)

  keyword(for) ident(i) operator(:=) integer(0) keyword(to) ident(ValueList)operator(.)ident(Items)operator(.)ident(Count)operator(-)integer(1) keyword(do) keyword(begin)    comment(//Daten)
    ident(Item) operator(:=) ident(ValueList)operator(.)ident(Items)operator([)ident(i)operator(])operator(;)
    comment({if Item.SubItems.Count < 2 then begin
      ShowMessage('Fehler in Sync.'\);
    Exit end; })
    keyword(if) ident(ValuesWin)operator(.)ident(UpdateValue)operator(()ident(Reg)operator(,) ident(Item)operator(\)) keyword(then)
      ident(AddTrace)operator(()string<delimiter(')content(Value Changed: )delimiter(')> operator(+) ident(Item)operator(.)ident(Caption) operator(+) string<delimiter(')content( = )delimiter(')> operator(+)
        ident(ValueDataPreview)operator(()ident(Reg)operator(.)ident(ReadContext)operator(()ident(RealValueName)operator(()ident(Item)operator(\))operator(\))operator(\))operator(\))operator(;)
  keyword(end)operator(;)

  keyword(for) ident(i) operator(:=) integer(0) keyword(to) ident(dif)operator(.)ident(OnlyB)operator(.)ident(Count)operator(-)integer(1) keyword(do) keyword(begin)  comment(//Erstellt/hinbenannt)
    ident(ValuesWin)operator(.)ident(AddValue)operator(()ident(Reg)operator(,) ident(dif)operator(.)ident(OnlyB)operator([)ident(i)operator(])operator(\))operator(;)
    ident(AddTrace)operator(()string<delimiter(')content(New Value: )delimiter(')> operator(+) ident(Dif)operator(.)ident(OnlyB)operator([)ident(i)operator(])operator(\))operator(;)
  keyword(end)operator(;)

  ident(Reg)operator(.)ident(CloseKey)operator(;)
  ident(Dif)operator(.)ident(Free)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TRegSpyThread)operator(.)ident(Spy)operator(;)
keyword(var)
  ident(i)operator(:) ident(Integer)operator(;)
  ident(a)operator(:) ident(Real)operator(;)
keyword(begin)
  keyword(with) ident(TClock)operator(.)ident(Create) keyword(do) keyword(begin)
    keyword(for) ident(i) operator(:=) integer(0) keyword(to) ident(RootNodes)operator(.)ident(Count)operator(-)integer(1) keyword(do)
      ident(Reload)operator(()ident(TTreeNode)operator(()ident(RootNodes)operator([)ident(i)operator(])operator(\))operator(\))operator(;)
    keyword(for) ident(i) operator(:=) integer(0) keyword(to) ident(High)operator(()ident(Shortcuts)operator(\)) keyword(do)
      ident(Reload)operator(()ident(Shortcuts)operator([)ident(i)operator(])operator(.)ident(Node)operator(\))operator(;)
    ident(Synchronize)operator(()ident(ReloadValues)operator(\))operator(;)
    ident(a) operator(:=) ident(SecondsPassed) operator(*) integer(1000)operator(;)
  ident(Free)operator(;) keyword(end)operator(;)

  keyword(if) ident(a) operator(>) integer(0) keyword(then)
    ident(WorkWin)operator(.)ident(Label7)operator(.)ident(Caption) operator(:=) string<delimiter(')content(Spy: )delimiter(')> operator(+) ident(Format)operator(()string<delimiter(')content(%0.2f)delimiter(')>operator(,) operator([)ident(a)operator(])operator(\)) operator(+) string<delimiter(')content( s)delimiter(')>operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TRegSpyThread)operator(.)ident(AddTrace)operator(()ident(Trace)operator(:) keyword(string)operator(\))operator(;)
keyword(begin)
  keyword(with) ident(WorkWin) keyword(do)
    keyword(if) ident(ListTracesCB)operator(.)ident(Checked) keyword(then)
      ident(SpyLB)operator(.)ident(Items)operator(.)ident(Add)operator(()ident(Trace)operator(\))operator(;)
keyword(end)operator(;)

keyword(destructor) ident(TRegSpyThread)operator(.)ident(Destroy)operator(;)
keyword(begin)
  ident(Dif)operator(.)ident(Free)operator(;)
  ident(Reg)operator(.)ident(Free)operator(;)
  keyword(inherited)operator(;)
keyword(end)operator(;)

keyword(end)operator(.)
keyword(unit) ident(TreeU)operator(;)
preprocessor({$DEFINE UNIKEY})
preprocessor({$DEFINE CYCFS})

keyword(interface)

keyword(uses)
  ident(Windows)operator(,) ident(Messages)operator(,) ident(SysUtils)operator(,) ident(Variants)operator(,) ident(Classes)operator(,) ident(Graphics)operator(,) ident(Controls)operator(,) ident(Forms)operator(,)
  ident(ComCtrls)operator(,) ident(Menus)operator(,) ident(Clipbrd)operator(,) ident(keybrd)operator(,) ident(Dialogs)operator(,) ident(YTools)operator(,) ident(PlutoConst)operator(,) ident(CompEx)operator(,)
  ident(IniFiles)operator(,) ident(XReg)operator(,) ident(Colors)operator(,) ident(Clock)operator(,)
  ident(ToolWin)operator(,) ident(RegFiles) preprocessor({$IFDEF UNIKEY})operator(,) ident(UniKey)operator(,) ident(ImgList) preprocessor({$ENDIF})operator(;)

keyword(type)
  ident(TTreeWin) operator(=) keyword(class)operator(()ident(TForm)operator(\))
    ident(RegTVPU)operator(:) ident(TPopupMenu)operator(;)
    ident(NewSubKeyMI)operator(:) ident(TMenuItem)operator(;)
    ident(NewKeyMI)operator(:) ident(TMenuItem)operator(;)
    ident(CreateShortcutMI)operator(:) ident(TMenuItem)operator(;)
    ident(TraceMI)operator(:) ident(TMenuItem)operator(;)
    ident(N3)operator(:) ident(TMenuItem)operator(;)
    ident(DeleteMI)operator(:) ident(TMenuItem)operator(;)
    ident(DublicateMI)operator(:) ident(TMenuItem)operator(;)
    ident(N4)operator(:) ident(TMenuItem)operator(;)
    ident(FindMI)operator(:) ident(TMenuItem)operator(;)
    ident(RegTV)operator(:) ident(TTreeView)operator(;)
    ident(PastePathMI)operator(:) ident(TMenuItem)operator(;)
    ident(N1)operator(:) ident(TMenuItem)operator(;)
    ident(InsertPathMI)operator(:) ident(TMenuItem)operator(;)
    ident(RenameMI)operator(:) ident(TMenuItem)operator(;)
    ident(CopyPathMI)operator(:) ident(TMenuItem)operator(;)
    ident(CutPathMI)operator(:) ident(TMenuItem)operator(;)
    ident(EditShortcutMI)operator(:) ident(TMenuItem)operator(;)
    ident(N2)operator(:) ident(TMenuItem)operator(;)
    ident(Export1)operator(:) ident(TMenuItem)operator(;)
    ident(SubKeylist1)operator(:) ident(TMenuItem)operator(;)
    ident(ValueNameslist1)operator(:) ident(TMenuItem)operator(;)
    ident(KeyInfosMI)operator(:) ident(TMenuItem)operator(;)
    ident(N5)operator(:) ident(TMenuItem)operator(;)
    ident(ExportAsReg)operator(:) ident(TMenuItem)operator(;)
    ident(ExportD)operator(:) ident(TSaveDialog)operator(;)
    keyword(procedure) ident(FormCreate)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(RegTVClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(RegTVChange)operator(()ident(Sender)operator(:) ident(TObject)operator(;) ident(Node)operator(:) ident(TTreeNode)operator(\))operator(;)
    keyword(procedure) ident(RegTVChanging)operator(()ident(Sender)operator(:) ident(TObject)operator(;) ident(Node)operator(:) ident(TTreeNode)operator(;) keyword(var) ident(AllowChange)operator(:) ident(Boolean)operator(\))operator(;)
    keyword(procedure) ident(RegTVCollapsing)operator(()ident(Sender)operator(:) ident(TObject)operator(;) ident(Node)operator(:) ident(TTreeNode)operator(;) keyword(var) ident(AllowCollapse)operator(:) ident(Boolean)operator(\))operator(;)
    keyword(procedure) ident(RegTVCustomDrawItem)operator(()ident(Sender)operator(:) ident(TCustomTreeView)operator(;) ident(Node)operator(:) ident(TTreeNode)operator(;) ident(State)operator(:) ident(TCustomDrawState)operator(;) keyword(var) ident(DefaultDraw)operator(:) ident(Boolean)operator(\))operator(;)
    keyword(procedure) ident(RegTVDblClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(RegTVDeletion)operator(()ident(Sender)operator(:) ident(TObject)operator(;) ident(Node)operator(:) ident(TTreeNode)operator(\))operator(;)
    keyword(procedure) ident(RegTVDragDrop)operator(()ident(Sender)operator(,) ident(Source)operator(:) ident(TObject)operator(;) ident(X)operator(,) ident(Y)operator(:) ident(Integer)operator(\))operator(;)
    keyword(procedure) ident(RegTVDragOver)operator(()ident(Sender)operator(,) ident(Source)operator(:) ident(TObject)operator(;) ident(X)operator(,) ident(Y)operator(:) ident(Integer)operator(;) ident(State)operator(:) ident(TDragState)operator(;) keyword(var) ident(Accept)operator(:) ident(Boolean)operator(\))operator(;)
    keyword(procedure) ident(RegTVEdited)operator(()ident(Sender)operator(:) ident(TObject)operator(;) ident(Node)operator(:) ident(TTreeNode)operator(;) keyword(var) ident(S)operator(:) keyword(String)operator(\))operator(;)
    keyword(procedure) ident(RegTVEditing)operator(()ident(Sender)operator(:) ident(TObject)operator(;) ident(Node)operator(:) ident(TTreeNode)operator(;) keyword(var) ident(AllowEdit)operator(:) ident(Boolean)operator(\))operator(;)
    keyword(procedure) ident(RegTVEndDrag)operator(()ident(Sender)operator(,) ident(Target)operator(:) ident(TObject)operator(;) ident(X)operator(,) ident(Y)operator(:) ident(Integer)operator(\))operator(;)
    keyword(procedure) ident(RegTVEnter)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(RegTVExpanded)operator(()ident(Sender)operator(:) ident(TObject)operator(;) ident(Node)operator(:) ident(TTreeNode)operator(\))operator(;)
    keyword(procedure) ident(RegTVExpanding)operator(()ident(Sender)operator(:) ident(TObject)operator(;) ident(Node)operator(:) ident(TTreeNode)operator(;) keyword(var) ident(AllowExpansion)operator(:) ident(Boolean)operator(\))operator(;)
    keyword(procedure) ident(RegTVGetSelectedIndex)operator(()ident(Sender)operator(:) ident(TObject)operator(;) ident(Node)operator(:) ident(TTreeNode)operator(\))operator(;)
    keyword(procedure) ident(RegTVKeyDown)operator(()ident(Sender)operator(:) ident(TObject)operator(;) keyword(var) ident(Key)operator(:) ident(Word)operator(;) ident(Shift)operator(:) ident(TShiftState)operator(\))operator(;)
    keyword(procedure) ident(RegTVMouseDown)operator(()ident(Sender)operator(:) ident(TObject)operator(;) ident(Button)operator(:) ident(TMouseButton)operator(;) ident(Shift)operator(:) ident(TShiftState)operator(;) ident(X)operator(,) ident(Y)operator(:) ident(Integer)operator(\))operator(;)
    keyword(procedure) ident(RegTVStartDrag)operator(()ident(Sender)operator(:) ident(TObject)operator(;) keyword(var) ident(DragObject)operator(:) ident(TDragObject)operator(\))operator(;)

    keyword(function) ident(CreateKey)operator(()ident(Subkey)operator(:) ident(Boolean)operator(\))operator(:) ident(Boolean)operator(;)
    keyword(procedure) ident(CloneKey)operator(;)
    keyword(procedure) ident(DeleteKey)operator(;)
    keyword(procedure) ident(NewShortcut)operator(;)
    keyword(procedure) ident(MoveKey)operator(()keyword(const) ident(Src)operator(,) ident(Trg)operator(:) ident(TRegPath)operator(;) ident(CopyWanted)operator(:) ident(Boolean)operator(\))operator(;)
    keyword(procedure) ident(MoveValues)operator(()ident(SrcNode)operator(,) ident(TrgNode)operator(:) ident(TTreeNode)operator(;) ident(CopyWanted)operator(:) ident(Boolean)operator(\))operator(;)

    keyword(procedure) ident(NewSubKeyMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(NewKeyMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(CreateShortcutMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(TraceMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(DeleteMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(DublicateMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(FindMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(RegTVPUPopup)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(FormKeyDown)operator(()ident(Sender)operator(:) ident(TObject)operator(;) keyword(var) ident(Key)operator(:) ident(Word)operator(;) ident(Shift)operator(:) ident(TShiftState)operator(\))operator(;)
    keyword(procedure) ident(RegTVKeyPress)operator(()ident(Sender)operator(:) ident(TObject)operator(;) keyword(var) ident(Key)operator(:) ident(Char)operator(\))operator(;)
    keyword(procedure) ident(RegTVAdvancedCustomDrawItem)operator(()ident(Sender)operator(:) ident(TCustomTreeView)operator(;)
      ident(Node)operator(:) ident(TTreeNode)operator(;) ident(State)operator(:) ident(TCustomDrawState)operator(;) ident(Stage)operator(:) ident(TCustomDrawStage)operator(;)
      keyword(var) ident(PaintImages)operator(,) ident(DefaultDraw)operator(:) ident(Boolean)operator(\))operator(;)
    keyword(procedure) ident(RenameMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(CopyPathMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(InsertPathMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(RegTVGetImageIndex)operator(()ident(Sender)operator(:) ident(TObject)operator(;) ident(Node)operator(:) ident(TTreeNode)operator(\))operator(;)
    keyword(procedure) ident(CheckRegTVHotTrack)operator(;)
    keyword(procedure) ident(PasteKeyMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(CutPathMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)

    keyword(procedure) ident(OpenNextLevel)operator(()ident(Node)operator(:) ident(TTreeNode)operator(\))operator(;)
    keyword(procedure) ident(EditShortcutMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(SubKeylist1Click)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(ValueNameslist1Click)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(KeyInfosMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(function) ident(GetKeyInfos)operator(:) keyword(string)operator(;)
    keyword(procedure) ident(ExportAsRegClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(FormClose)operator(()ident(Sender)operator(:) ident(TObject)operator(;) keyword(var) ident(Action)operator(:) ident(TCloseAction)operator(\))operator(;)

    keyword(procedure) ident(Load)operator(;)
    keyword(procedure) ident(Reg4WriterTerminate)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
  directive(private)
    ident(DragNode)operator(:) ident(TTreeNode)operator(;)
    ident(NoAsterisk)operator(:) ident(Boolean)operator(;) comment(//To prevent NumPadMULTIPLY and asterisk errors)
    ident(UserCopyKeyFlag)operator(:) ident(Boolean)operator(;)
    ident(SpaceCount)operator(:) ident(Integer)operator(;) comment(//EasterEgg)
  directive(public)
    ident(CantWrite)operator(:) ident(Boolean)operator(;)
    ident(DoSmartExpand)operator(:) ident(Boolean)operator(;)
  keyword(end)operator(;)

keyword(procedure) ident(CheckNode)operator(()ident(Node)operator(:) ident(TTreeNode)operator(;) ident(OnlyOnce)operator(:) ident(Boolean) operator(=) ident(True)operator(;)
  ident(TakeNodeSelected)operator(:) ident(Boolean) operator(=) ident(False)operator(\))operator(;)

keyword(function) ident(AddShortcut)operator(()ident(Alias)operator(,) ident(RealPath)operator(:) keyword(string)operator(;) ident(Icon)operator(:) ident(Integer)operator(;)
  ident(AHostType)operator(:) ident(TUniHostType) operator(=) ident(uhUserShortcut)operator(;) ident(WriteIni)operator(:) ident(Boolean) operator(=) ident(False)operator(\))operator(:) ident(TTreeNode)operator(;)
keyword(function) ident(ShortcutIndex)operator(()ident(Node)operator(:) ident(TTreeNode)operator(\))operator(:) ident(Integer)operator(;)

keyword(function) ident(TraceKey)operator(()keyword(const) ident(Path)operator(:) keyword(string)operator(;) ident(AllowedShortcutTypes)operator(:) ident(TUniHostTypes) operator(=)
  ident(uhNonSystemShortcuts)operator(\))operator(:) keyword(string)operator(;)

keyword(type)
  ident(TOpenNodeMode) operator(=) operator(()ident(onNodeNil)operator(,) ident(onError)operator(,) ident(onReadOnly)operator(,) ident(onFull)operator(\))operator(;)

keyword(const)
  ident(onOK) operator(=) operator([)ident(onFull)operator(,) ident(onReadOnly)operator(])operator(;)

keyword(function) ident(OpenNode)operator(()ident(Reg)operator(:) ident(TXRegistry)operator(;) ident(Node)operator(:) ident(TTreeNode)operator(\))operator(:) ident(TOpenNodeMode)operator(;)
keyword(function) ident(OpenNodeOK)operator(()ident(Reg)operator(:) ident(TXRegistry)operator(;) ident(Node)operator(:) ident(TTreeNode)operator(\))operator(:) ident(Boolean)operator(;)
keyword(function) ident(OpenCurKey)operator(:) ident(Boolean)operator(;)
keyword(function) ident(OpenCurParent)operator(:) ident(Boolean)operator(;)

keyword(var)
  ident(TreeWin)operator(:) ident(TTreeWin)operator(;)

  ident(RegTV)operator(:) ident(TTreeView)operator(;) comment(//Shortcut for other units, equals TreeWin.RegTV)

preprocessor({$IFDEF UNIKEY})
  ident(UserUniPath)operator(:) keyword(string) preprocessor({$IFDEF CYCFS}) operator(=) string<delimiter(')content(cYcFS <y:\\programme\\cYcFS\\test>)delimiter(')>preprocessor({$ENDIF})operator(;)
preprocessor({$ENDIF})
  ident(Shortcuts)operator(:) ident(TShortcutA)operator(;)
  ident(RootNodes)operator(:) ident(TList)operator(;) comment(//list of TTreeNode;)

keyword(implementation)

keyword(uses)
  ident(PlutoMain)operator(,) ident(ValuesU)operator(,) ident(FindWinU)operator(,) ident(WorkU)operator(,) ident(PrefU)operator(,) ident(ShellEx)operator(,) ident(Types)operator(;)

preprocessor({$R *.dfm})

preprocessor({$IFDEF UNIKEY})
keyword(function) ident(UniOfNode)operator(()ident(Node)operator(:) ident(TTreeNode)operator(\))operator(:) ident(TUniKey)operator(;)
keyword(var)
  ident(UniPath)operator(:) ident(TUniPath)operator(;)
keyword(begin)
  ident(UniPath) operator(:=) ident(UniOfStr)operator(()ident(UserUniPath)operator(\))operator(;)
  ident(UniPath)operator(.)ident(Path) operator(:=) ident(Join)operator(()ident(Copy)operator(()ident(NodePath)operator(()ident(Node)operator(\))operator(,) integer(1)operator(,) ident(MaxInt)operator(\))operator(,) char<delimiter(')content(/)delimiter(')>operator(\))operator(;)
  ident(Result) operator(:=) ident(TUniKey)operator(.)ident(CreateU)operator(()ident(UniPath)operator(,) ident(reTryToSolve)operator(\))operator(;)
keyword(end)operator(;)
preprocessor({$ENDIF})      

keyword(procedure) ident(TTreeWin)operator(.)ident(FormCreate)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(TreeU)operator(.)ident(RegTV) operator(:=) ident(RegTV)operator(;)

  ident(DragNode) operator(:=) keyword(nil)operator(;)
  ident(NoAsterisk) operator(:=) ident(False)operator(;)
  ident(DoSmartExpand) operator(:=) ident(True)operator(;)
  ident(UserCopyKeyFlag) operator(:=) ident(True)operator(;)
  ident(SpaceCount) operator(:=) integer(0)operator(;) comment(//EasterEgg)

  ident(RegTV)operator(.)ident(Items)operator(.)ident(Clear)operator(;)
  ident(CheckRegTVHotTrack)operator(;)

  ident(KeyInfosMI)operator(.)ident(ImageIndex) operator(:=) ident(iconKeyInfos)operator(;)

  ident(NewSubKeyMI)operator(.)ident(ImageIndex) operator(:=) ident(iconSubKey)operator(;)
  ident(NewKeyMI)operator(.)ident(ImageIndex) operator(:=) ident(iconKey)operator(;)
  ident(CreateShortcutMI)operator(.)ident(ImageIndex) operator(:=) ident(iconShortcut)operator(;)

  ident(RenameMI)operator(.)ident(ImageIndex) operator(:=) ident(iconRename)operator(;)
  ident(DeleteMI)operator(.)ident(ImageIndex) operator(:=) ident(iconDelete)operator(;)
  ident(DublicateMI)operator(.)ident(ImageIndex) operator(:=) ident(iconKeyDublicate)operator(;)

  ident(FindMI)operator(.)ident(ImageIndex) operator(:=) ident(iconKeyFind)operator(;)
  ident(TraceMI)operator(.)ident(ImageIndex) operator(:=) ident(iconKeyTrace)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TTreeWin)operator(.)ident(RegTVClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  keyword(if) ident(KeyIsDown)operator(()ident(VK_CONTROL)operator(\)) keyword(then) keyword(begin)
    ident(TraceMIClick)operator(()ident(Sender)operator(\))operator(;)
  ident(Exit)operator(;) keyword(end)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TTreeWin)operator(.)ident(RegTVChange)operator(()ident(Sender)operator(:) ident(TObject)operator(;) ident(Node)operator(:) ident(TTreeNode)operator(\))operator(;)
keyword(var)
  ident(Reg)operator(:) ident(TXRegistry)operator(;)
  ident(OpenRe)operator(:) ident(TOpenNodeMode)operator(;)

preprocessor({$IFDEF UNIKEY})
  ident(Uni)operator(:) ident(TUniKey)operator(;)
  ident(ValueNames)operator(:) ident(TStringList)operator(;)
  ident(Item)operator(:) ident(TListItem)operator(;)
  ident(i)operator(:) ident(Integer)operator(;)

  keyword(procedure) ident(AppendSubItemData)operator(()ident(SubItems)operator(:) ident(TStrings)operator(;) ident(Uni)operator(:) ident(TUniKey)operator(;)
    keyword(const) ident(ValueName)operator(:) keyword(string)operator(\))operator(;)
  keyword(var)
    ident(SL)operator(:) ident(TStringList)operator(;)

    keyword(procedure) ident(Add)operator(()keyword(const) ident(s)operator(:) keyword(string)operator(\))operator(;)
    keyword(begin)
      ident(SubItems)operator(.)ident(Append)operator(()ident(s)operator(\))operator(;)
    keyword(end)operator(;)

  keyword(begin)
    ident(SL) operator(:=) keyword(nil)operator(;)
    keyword(try)
      ident(Add)operator(()string<delimiter(')content(beta)delimiter(')>operator(\))operator(;)

      keyword(case) ident(Uni)operator(.)ident(GetDataType)operator(()ident(ValueName)operator(\)) keyword(of)

      ident(udString)operator(,) ident(udExpandString)operator(:) keyword(begin)
        ident(Add)operator(()string<delimiter(')content(String)delimiter(')>operator(\))operator(;)
        ident(Add)operator(()ident(Uni)operator(.)ident(ReadString)operator(()ident(ValueName)operator(\))operator(\))operator(;)
      keyword(end)operator(;)

      ident(udCardinal)operator(,) ident(udCardBigEndian)operator(,) ident(udInteger)operator(:) keyword(begin)
        ident(Add)operator(()string<delimiter(')content(Numeric)delimiter(')>operator(\))operator(;)
        ident(Add)operator(()ident(IntToStr)operator(()ident(Uni)operator(.)ident(ReadInteger)operator(()ident(ValueName)operator(\))operator(\))operator(\))operator(;)
      keyword(end)operator(;)

      ident(udBinary)operator(,) ident(udNone)operator(:) keyword(begin)
        ident(Add)operator(()string<delimiter(')content(Binary)delimiter(')>operator(\))operator(;)
        ident(Add)operator(()ident(FriendlyStr)operator(()ident(Uni)operator(.)ident(ReadBinary)operator(()ident(ValueName)operator(\))operator(\))operator(\))operator(;)
      keyword(end)operator(;)

      ident(udBoolean)operator(:) keyword(begin)
        ident(Add)operator(()string<delimiter(')content(Boolean)delimiter(')>operator(\))operator(;)
        ident(Add)operator(()ident(StrOfBool)operator(()ident(Uni)operator(.)ident(ReadBool)operator(()ident(ValueName)operator(\))operator(\))operator(\))operator(;)
      keyword(end)operator(;)

      ident(udStringList)operator(:) keyword(begin)
        ident(Add)operator(()string<delimiter(')content(List)delimiter(')>operator(\))operator(;)
        keyword(if) keyword(not) ident(Assigned)operator(()ident(SL)operator(\)) keyword(then)
          ident(SL) operator(:=) ident(TStringList)operator(.)ident(Create)
        keyword(else)
          ident(SL)operator(.)ident(Clear)operator(;)
        ident(Uni)operator(.)ident(ReadStringList)operator(()ident(ValueName)operator(,) ident(SL)operator(\))operator(;)
        ident(Add)operator(()ident(Join)operator(()ident(SL)operator(,) ident(MultiStringSeparator)operator(\))operator(\))operator(;)
      keyword(end)operator(;)

      ident(udColor)operator(:) keyword(begin)
        ident(Add)operator(()string<delimiter(')content(Color)delimiter(')>operator(\))operator(;)
        ident(Add)operator(()ident(ColorToString)operator(()ident(Uni)operator(.)ident(ReadColor)operator(()ident(ValueName)operator(\))operator(\))operator(\))operator(;)
      keyword(end)operator(;)

      keyword(else)
        ident(Add)operator(()string<delimiter(')content(Unsupported Data Type: )delimiter(')> operator(+)
        ident(IntToStr)operator(()ident(Cardinal)operator(()ident(Uni)operator(.)ident(GetDataType)operator(()ident(ValueName)operator(\))operator(\))operator(\))operator(\))operator(;)
      keyword(end)operator(;) comment(//case)

    keyword(finally)
      ident(SL)operator(.)ident(Free)operator(;)
    keyword(end)operator(;)
  keyword(end)operator(;)


preprocessor({$ENDIF})

keyword(begin)
  ident(SpaceCount) operator(:=) integer(0)operator(;) comment(//Easteregg)

  ident(CheckNode)operator(()ident(Node)operator(,) ident(False)operator(\))operator(;)
  ident(CantWrite) operator(:=) ident(False)operator(;)

  keyword(try)
    ident(SpyThread)operator(.)ident(Suspend)operator(;)
    ident(Reg) operator(:=) ident(TXRegistry)operator(.)ident(Create)operator(;)
    keyword(try)

preprocessor({$IFDEF UNIKEY})
      keyword(if) ident(RootOfNode)operator(()ident(Node)operator(\))operator(.)ident(ImageIndex) operator(=) ident(iconHostUni) keyword(then) keyword(begin)
        ident(ValueNames) operator(:=) ident(TStringList)operator(.)ident(Create)operator(;)
        ident(ValueList)operator(.)ident(Clear)operator(;)

        ident(Uni) operator(:=) ident(UniOfNode)operator(()ident(Node)operator(\))operator(;)
        comment({Uni := CreateUniSubKey(UserUniPath, Copy(NodePath(Node\), 1, MaxInt\),
          reFaile\); })
        keyword(if) ident(Assigned)operator(()ident(Uni)operator(\)) keyword(then)
        keyword(try)
          ident(Uni)operator(.)ident(GetValueNames)operator(()ident(ValueNames)operator(\))operator(;)

          keyword(for) ident(i) operator(:=) integer(0) keyword(to) ident(ValueNames)operator(.)ident(Count)operator(-)integer(1) keyword(do) keyword(begin)
            ident(Item) operator(:=) ident(ValuesWin)operator(.)ident(AddValue)operator(()ident(Reg)operator(,) ident(ValueNames)operator([)ident(i)operator(])operator(,) ident(False)operator(\))operator(;)
            ident(Item)operator(.)ident(ImageIndex) operator(:=) ident(iconHostUni2)operator(;)
            ident(AppendSubItemData)operator(()ident(Item)operator(.)ident(SubItems)operator(,) ident(Uni)operator(,) ident(ValueNames)operator([)ident(i)operator(])operator(\))operator(;)
          keyword(end)operator(;)

        keyword(finally)
          ident(Uni)operator(.)ident(Free)operator(;)
          ident(ValueNames)operator(.)ident(Free)operator(;)
        keyword(end)operator(;)

      keyword(end) keyword(else) keyword(begin)
preprocessor({$ENDIF})

      ident(OpenRe) operator(:=) ident(OpenNode)operator(()ident(Reg)operator(,) ident(Node)operator(\))operator(;)
      keyword(if) ident(OpenRe) keyword(in) ident(onOK) keyword(then) keyword(begin)
        ident(ValuesWin)operator(.)ident(LoadValues)operator(()ident(Reg)operator(\))operator(;)
        keyword(if) ident(OpenRe) operator(=) ident(onReadOnly) keyword(then) keyword(begin)
          ident(AddHint)operator(()string<delimiter(')content(Read only)delimiter(')>operator(,) ident(True)operator(\))operator(;)
          ident(CantWrite) operator(:=) ident(True)operator(;)
        keyword(end)operator(;)
      keyword(end) keyword(else) keyword(if) ident(OpenRe) operator(=) ident(onError) keyword(then) keyword(begin)
        ident(ValueList)operator(.)ident(Clear)operator(;)
        ident(CantWrite) operator(:=) ident(True)operator(;)
        keyword(if) ident(Node)operator(.)ident(Level) operator(=) integer(0) keyword(then) keyword(begin)
          ident(AddHint)operator(()string<delimiter(')content(Shortcut target not found)delimiter(')>operator(,) ident(True)operator(\))operator(;)
        keyword(end) keyword(else)
          ident(AddHint)operator(()string<delimiter(')content(Key not found: )delimiter(')> operator(+) ident(Node)operator(.)ident(Text)operator(,) ident(True)operator(\))operator(;)
      keyword(end)operator(;)

preprocessor({$IFDEF UNIKEY})
      keyword(end)operator(;)
preprocessor({$ENDIF})

    keyword(finally)
      ident(Reg)operator(.)ident(Free)operator(;)
    keyword(end)operator(;)

    ident(CantWrite) operator(:=) ident(CantWrite) keyword(or) keyword(not) ident(Assigned)operator(()ident(Node)operator(\))
      keyword(or) ident(NodeInfo)operator(()           ident(Node) operator(\))operator(.)ident(ReadOnly)  comment(//Node itself)
      keyword(or) ident(NodeInfo)operator(()ident(RootOfNode)operator(()ident(Node)operator(\))operator(\))operator(.)ident(ReadOnly)  comment(//or host)
      keyword(or) operator(()ident(SameText)operator(()ident(CurKey)operator(()ident(uhNonSystemShortcuts)operator(\))operator(.)ident(Root)operator(,) string<delimiter(')content(HKEY_DYN_DATA)delimiter(')>operator(\))operator(\))operator(;)

    ident(MainWin)operator(.)ident(SetStatus)operator(;)
    ident(WorkWin)operator(.)ident(InfoMemo)operator(.)ident(Text) operator(:=) ident(GetKeyInfos)operator(;)
  keyword(finally)
    ident(SpyThread)operator(.)ident(Restart) operator(:=) ident(True)operator(;)
    ident(SpyThread)operator(.)ident(Resume)operator(;)
  keyword(end)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TTreeWin)operator(.)ident(RegTVChanging)operator(()ident(Sender)operator(:) ident(TObject)operator(;) ident(Node)operator(:) ident(TTreeNode)operator(;)
  keyword(var) ident(AllowChange)operator(:) ident(Boolean)operator(\))operator(;)
keyword(begin)
  ident(CantWrite) operator(:=) ident(False)operator(;)
  ident(AllowChange) operator(:=) ident(Assigned)operator(()ident(Node)operator(\))operator(;)
 comment(// CheckNode(Node, True\);)
keyword(end)operator(;)

keyword(procedure) ident(TTreeWin)operator(.)ident(RegTVCollapsing)operator(()ident(Sender)operator(:) ident(TObject)operator(;) ident(Node)operator(:) ident(TTreeNode)operator(;)
  keyword(var) ident(AllowCollapse)operator(:) ident(Boolean)operator(\))operator(;)
keyword(begin)
  ident(SpyThread)operator(.)ident(Restart) operator(:=) ident(True)operator(;)
  ident(Node)operator(.)ident(DeleteChildren)operator(;)
  ident(RegTVChange)operator(()ident(Sender)operator(,) ident(Node)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TTreeWin)operator(.)ident(RegTVCustomDrawItem)operator(()ident(Sender)operator(:) ident(TCustomTreeView)operator(;) ident(Node)operator(:) ident(TTreeNode)operator(;)
  ident(State)operator(:) ident(TCustomDrawState)operator(;) keyword(var) ident(DefaultDraw)operator(:) ident(Boolean)operator(\))operator(;)
keyword(var)
  ident(Info)operator(:) ident(TNodeInfo)operator(;)
keyword(begin)
  comment({if Node.Text = '' then begin
    ShowMessage('Error: Key has empty name.'\);
    Node.Delete;
  Exit; end;})

  ident(Info) operator(:=) ident(NodeInfo)operator(()ident(Node)operator(\))operator(;)
  keyword(with) ident(TTreeView)operator(()ident(Sender)operator(\))operator(.)ident(Canvas)operator(.)ident(Font) keyword(do) keyword(begin)
    keyword(if) ident(Info)operator(.)ident(Defect) keyword(then) keyword(begin)
      ident(Style) operator(:=) operator([)operator(])operator(;)
      ident(Color) operator(:=) hex($AAAAAA)
    keyword(end) keyword(else) keyword(begin)
      keyword(case) ident(Info)operator(.)ident(HostType) keyword(of)

      ident(uhReg)operator(:) keyword(begin)
        ident(Style) operator(:=) operator([)ident(fsBold)operator(])operator(;)
        ident(Color) operator(:=) ident(clCyan)operator(;)
      keyword(end)operator(;)

      comment({uhIni: begin
        Style := [fsBold];
        Color := clBrightYellow;
      end;

      uhRegFile: begin
        Style := [fsBold];
        Color := clBrightGreen;
      end; })

      ident(uhSystemShortcut)operator(:) keyword(begin)
        ident(Style) operator(:=) operator([)operator(])operator(;)
        ident(Color) operator(:=) ident(clBrightCyan)operator(;)
      keyword(end)operator(;)

      ident(uhStandardShortcut)operator(:) keyword(begin)
        ident(Style) operator(:=) operator([)ident(fsBold)operator(])operator(;)
        ident(Color) operator(:=) hex($EEEEEE)operator(;)
      keyword(end)operator(;)

      ident(uhUserShortcut)operator(:) keyword(begin)
        ident(Style) operator(:=) operator([)operator(])operator(;)
        ident(Color) operator(:=) hex($EEEEEE)operator(;)
      keyword(end)operator(;)

      keyword(else)
        ident(Style) operator(:=) operator([)operator(])operator(;)
        keyword(if) ident(Info)operator(.)ident(ReadOnly) keyword(then)
          ident(Color) operator(:=) ident(clBrightRed)
        keyword(else)
          ident(Color) operator(:=) ident(clWhite)operator(;)
      keyword(end)operator(;)

    keyword(end)operator(;)
  keyword(end)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TTreeWin)operator(.)ident(RegTVDblClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(var)
  ident(Node)operator(:) ident(TTreeNode)operator(;)
  ident(MouseX)operator(:) ident(Integer)operator(;)
  ident(NodeRect)operator(:) ident(TRect)operator(;)
keyword(begin)
  ident(Node) operator(:=) ident(RegTV)operator(.)ident(Selected)operator(;)
  keyword(if) keyword(not) ident(Assigned)operator(()ident(Node)operator(\)) keyword(then)
    ident(Exit)operator(;)

  ident(MouseX) operator(:=) ident(RegTV)operator(.)ident(ScreenToClient)operator(()ident(Mouse)operator(.)ident(CursorPos)operator(\))operator(.)ident(X)operator(;)
  ident(NodeRect) operator(:=) ident(Node)operator(.)ident(DisplayRect)operator(()ident(True)operator(\))operator(;)
  keyword(if) ident(MouseX) operator(>) ident(NodeRect)operator(.)ident(Right) keyword(then) keyword(begin)
    keyword(with) ident(ValuesWin) keyword(do) keyword(begin)
      ident(FocusItem)operator(()ident(PrefWin)operator(.)ident(MainPreviewE)operator(.)ident(Text)operator(\))operator(;)
      ident(ValueListDblClick)operator(()ident(Self)operator(\))operator(;)
    keyword(end)operator(;)
  keyword(end)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TTreeWin)operator(.)ident(RegTVDeletion)operator(()ident(Sender)operator(:) ident(TObject)operator(;) ident(Node)operator(:) ident(TTreeNode)operator(\))operator(;)
keyword(begin)
  keyword(if) ident(Assigned)operator(()ident(SpyThread)operator(\)) keyword(then)
    ident(SpyThread)operator(.)ident(Restart) operator(:=) ident(True)operator(;)
  keyword(if) ident(Node)operator(.)ident(Selected) keyword(then)
    ident(RegTV)operator(.)ident(Selected) operator(:=) ident(GetNextBest)operator(()ident(Node)operator(\))operator(;)
  ident(NodeInfo)operator(()ident(Node)operator(\))operator(.)ident(Free)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TTreeWin)operator(.)ident(RegTVDragDrop)operator(()ident(Sender)operator(,) ident(Source)operator(:) ident(TObject)operator(;) ident(X)operator(,) ident(Y)operator(:) ident(Integer)operator(\))operator(;)

  keyword(procedure) ident(DragKey)operator(;)
  keyword(var)
    ident(Src)operator(,) ident(Trg)operator(:) ident(TRegPath)operator(;)
    ident(Node)operator(:) ident(TTreeNode)operator(;)
  keyword(begin)
    ident(Src) operator(:=) ident(RegPathOfStr)operator(()ident(TraceKey)operator(()ident(PathOfNode)operator(()ident(DragNode)operator(\))operator(\))operator(\))operator(;)
    ident(Trg) operator(:=) ident(RegPathOfStr)operator(()ident(TraceKey)operator(()ident(PathOfNode)operator(()ident(RegTV)operator(.)ident(DropTarget)operator(\))operator(\))operator(\))operator(;)
    ident(Trg)operator(.)ident(Key) operator(:=) ident(Trg)operator(.)ident(Key) operator(+) char<delimiter(')content(\\)delimiter(')> operator(+) ident(DragNode)operator(.)ident(Text)operator(;)

    ident(MoveKey)operator(()ident(Src)operator(,) ident(Trg)operator(,) ident(KeyIsDown)operator(()ident(VK_CONTROL)operator(\))operator(\))operator(;)

    ident(Node) operator(:=) ident(RegTV)operator(.)ident(DropTarget)operator(;)
    keyword(if) ident(Node)operator(.)ident(Expanded) keyword(then)
      ident(Node)operator(.)ident(Collapse)operator(()ident(False)operator(\))operator(;)
    ident(Node)operator(.)ident(Expanded) operator(:=) ident(False)operator(;)
    ident(CheckNode)operator(()ident(Node)operator(,) ident(False)operator(,) ident(True)operator(\))operator(;)
    ident(Node)operator(.)ident(Expand)operator(()ident(False)operator(\))operator(;)
  keyword(end)operator(;)

  keyword(procedure) ident(DragValues)operator(;)
  keyword(begin)
    ident(MoveValues)operator(()ident(RegTV)operator(.)ident(Selected)operator(,) ident(RegTV)operator(.)ident(DropTarget)operator(,) ident(KeyIsDown)operator(()ident(VK_CONTROL)operator(\))operator(\))operator(;)
  keyword(end)operator(;)

keyword(begin)
  keyword(if) ident(Source) keyword(is) ident(TTreeView) keyword(then)
    ident(DragKey)
  keyword(else) keyword(if) ident(Source) keyword(is) ident(TListView) keyword(then)
    ident(DragValues)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TTreeWin)operator(.)ident(RegTVDragOver)operator(()ident(Sender)operator(,) ident(Source)operator(:) ident(TObject)operator(;) ident(X)operator(,) ident(Y)operator(:) ident(Integer)operator(;)
  ident(State)operator(:) ident(TDragState)operator(;) keyword(var) ident(Accept)operator(:) ident(Boolean)operator(\))operator(;)
keyword(begin)
  ident(Accept) operator(:=) ident(False)operator(;)
  keyword(if) keyword(not) ident(Assigned)operator(()ident(RegTV)operator(.)ident(DropTarget)operator(\)) keyword(then)
    ident(Exit)operator(;)

  keyword(if) ident(Source) keyword(is) ident(TTreeView) keyword(then) keyword(begin)
    keyword(if) keyword(not) ident(Assigned)operator(()ident(DragNode)operator(\)) keyword(then)
      ident(Exit)operator(;)
    keyword(if) keyword(not) ident(KeyIsDown)operator(()ident(VK_CONTROL)operator(\)) keyword(then) keyword(begin)
      keyword(if) operator(()ident(DragNode) operator(=) ident(RegTV)operator(.)ident(DropTarget)operator(\))
       keyword(or) ident(RegTV)operator(.)ident(DropTarget)operator(.)ident(HasAsParent)operator(()ident(DragNode)operator(\)) keyword(then)
        ident(Exit)operator(;) comment(//avoid recursive moving)
    keyword(end)operator(;)
  keyword(end) keyword(else) keyword(if) ident(Source) keyword(is) ident(TListView) keyword(then) keyword(begin)
    comment(//accept)
  keyword(end)operator(;)
  ident(Accept) operator(:=) ident(True)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TTreeWin)operator(.)ident(RegTVEdited)operator(()ident(Sender)operator(:) ident(TObject)operator(;) ident(Node)operator(:) ident(TTreeNode)operator(;) keyword(var) ident(S)operator(:) keyword(string)operator(\))operator(;)
keyword(var)
  ident(old)operator(,) ident(tmp)operator(:) keyword(string)operator(;)
  ident(i)operator(:) ident(Integer)operator(;)
  ident(Shortcut)operator(:) ident(PKeyShortcut)operator(;)
keyword(begin)
  keyword(if) ident(s) operator(=) ident(Node)operator(.)ident(Text) keyword(then)
    ident(Exit)operator(;)

  ident(Old) operator(:=) ident(Node)operator(.)ident(Text)operator(;)

  keyword(if) ident(NodeInfo)operator(()ident(Node)operator(\))operator(.)ident(HostType) operator(=) ident(uhUserShortcut) keyword(then) keyword(begin)
    ident(i) operator(:=) ident(ShortcutIndex)operator(()ident(Node)operator(\))operator(;)
    keyword(if) ident(i) operator(=) operator(-)integer(1) keyword(then) keyword(begin)
      ident(ShowMessage)operator(()string<delimiter(')content(Shortcut not found!)delimiter(')>operator(\))operator(;)
      ident(s) operator(:=) ident(old)operator(;)
    ident(Exit)operator(;) keyword(end)operator(;)

    ident(Shortcut) operator(:=) operator(@)ident(Shortcuts)operator([)ident(i)operator(])operator(;)
    ident(Shortcut)operator(.)ident(Alias) operator(:=) ident(s)operator(;)

    keyword(with) ident(TIniFile)operator(.)ident(Create)operator(()ident(PlutoDir) operator(+) string<delimiter(')content(Shortcuts.ini)delimiter(')>operator(\)) keyword(do)
      keyword(try)
        ident(DeleteKey)operator(()string<delimiter(')content(Shortcuts)delimiter(')>operator(,) ident(Old)operator(\))operator(;)
        ident(WriteString)operator(()string<delimiter(')content(Shortcuts)delimiter(')>operator(,) ident(Shortcut)operator(.)ident(Alias)operator(,) ident(Shortcut)operator(.)ident(RealPath)operator(\))operator(;)
      keyword(finally)
        ident(Free)operator(;)
      keyword(end)operator(;)
    ident(Node)operator(.)ident(Text) operator(:=) ident(s)operator(;)
    ident(RegTVChange)operator(()ident(Self)operator(,) ident(Node)operator(\))operator(;)
  ident(Exit)operator(;) keyword(end)operator(;)

  keyword(if) ident(s) operator(=) string<delimiter(')delimiter(')> keyword(then) keyword(begin)
    ident(ShowMessage)operator(()string<delimiter(')content(KeyNames cannot be empty.)delimiter(')>operator(\))operator(;)
    ident(s) operator(:=) ident(old)operator(;)
  ident(Exit)operator(;) keyword(end)operator(;)

  ident(SpyThread)operator(.)ident(Suspend)operator(;)
  ident(SpyThread)operator(.)ident(Restart) operator(:=) ident(True)operator(;)
  ident(Node)operator(.)ident(Text) operator(:=) ident(s)operator(;)

  keyword(if) ident(Length)operator(()ident(s)operator(\)) operator(>) ident(RegMaxKeyLen) keyword(then) keyword(begin)
    ident(s) operator(:=) ident(Copy)operator(()ident(s)operator(,) integer(1)operator(,) ident(RegMaxKeyLen)operator(\))operator(;)
    keyword(if) ident(MessageDlg)operator(()
     string<delimiter(')content(The maximum size of a key name is )delimiter(')> operator(+) ident(IntToStr)operator(()ident(RegMaxKeyLen)operator(\)) operator(+) string<delimiter(')content( characters.)delimiter(')> operator(+) ident(EOL) operator(+)
     string<delimiter(')content(Shorten the key name to:)delimiter(')> operator(+) ident(EOL) operator(+)
     ident(Quote)operator(()ident(StringWrap)operator(()ident(s)operator(,) integer(80)operator(\))operator(\))operator(,)
     ident(mtConfirmation)operator(,) operator([)ident(mbOK)operator(,) ident(mbCancel)operator(])operator(,) integer(0)operator(\)) operator(<>) ident(mrOK) keyword(then) keyword(begin)
      ident(s) operator(:=) ident(Old)operator(;)
      ident(SpyThread)operator(.)ident(Resume)operator(;)
      ident(Exit)operator(;)
    keyword(end)operator(;)
  keyword(end)operator(;)

  keyword(if) ident(CharIn)operator(()ident(s)operator(,) operator([)char(#0)operator(..)char(#31)operator(,) char<delimiter(')content(\\)delimiter(')>operator(])operator(\)) keyword(then) keyword(begin)
    ident(s) operator(:=) ident(ReplaceChars)operator(()ident(s)operator(,) operator([)char(#0)operator(..)char(#31)operator(])operator(,) char<delimiter(')content(#)delimiter(')>operator(\))operator(;)
    ident(s) operator(:=) ident(ReplaceChars)operator(()ident(s)operator(,) char<delimiter(')content(\\)delimiter(')>operator(,) char<delimiter(')content(-)delimiter(')>operator(\))operator(;)

    keyword(if) ident(MessageDlg)operator(()string<delimiter(')content(The following characters are not allowed in KeyNames:)delimiter(')> operator(+) ident(EOL) operator(+)
     string<delimiter(')content(- Control chars (0-31\))delimiter(')> operator(+) ident(EOL) operator(+)
     string<delimiter(')content(- )delimiter(')> operator(+) ident(Quote)operator(()char<delimiter(')content(\\)delimiter(')>operator(\)) operator(+) ident(EOL) operator(+)
     string<delimiter(')content(The following name is allowed:)delimiter(')> operator(+) ident(EOL) operator(+)
     ident(s) operator(+) ident(EOL) operator(+)
     string<delimiter(')content(Use this name instead?)delimiter(')>operator(,)
     ident(mtConfirmation)operator(,) operator([)ident(mbYes)operator(,) ident(mbNo)operator(])operator(,) integer(0)operator(\)) operator(<>) ident(mrYes) keyword(then) keyword(begin)
      ident(s) operator(:=) ident(Old)operator(;)
      ident(SpyThread)operator(.)ident(Resume)operator(;)
      ident(Exit)operator(;)
    keyword(end)operator(;)
  keyword(end)operator(;)

  keyword(try)
    ident(OpenCurParent)operator(;)
    keyword(if) keyword(not) ident(SameText)operator(()ident(s)operator(,) ident(Old)operator(\)) keyword(then) keyword(begin)
      keyword(if) keyword(not) ident(MainReg)operator(.)ident(KeyExists)operator(()ident(s)operator(\)) keyword(or)
       operator(()ident(mrIgnore) operator(=) ident(MessageDlg)operator(()
         string<delimiter(')content(Key already exists.)delimiter(')> operator(+) ident(EOL) operator(+)
         string<delimiter(')content(Click Ignore to overwrite the key.)delimiter(')>operator(,)
         ident(mtConfirmation)operator(,) operator([)ident(mbCancel)operator(,) ident(mbIgnore)operator(])operator(,) integer(0)operator(\))
       operator(\)) keyword(then) keyword(begin)
        ident(MainReg)operator(.)ident(DeleteKey)operator(()ident(s)operator(\))operator(;)
        ident(MainReg)operator(.)ident(MoveKey)operator(()ident(Old)operator(,) ident(s)operator(,) ident(True)operator(\))operator(;)
        ident(Node)operator(.)ident(Text) operator(:=) ident(Old)operator(;)
      keyword(end) keyword(else) keyword(begin)
        ident(s) operator(:=) ident(Old)operator(;)
      keyword(end)operator(;)
    keyword(end) keyword(else) keyword(begin)  comment(//change CharCase)
      ident(tmp) operator(:=) ident(MainReg)operator(.)ident(GetFreeKeyName)operator(;)
      ident(AddHint)operator(()string<delimiter(')content(Forced change of case using temporary key )delimiter(')> operator(+) ident(Quote)operator(()ident(tmp)operator(\))operator(\))operator(;)
      ident(MainReg)operator(.)ident(MoveKey)operator(()ident(Old)operator(,) ident(tmp)operator(,) ident(True)operator(\))operator(;)
      ident(MainReg)operator(.)ident(MoveKey)operator(()ident(tmp)operator(,) ident(s)operator(,) ident(True)operator(\))operator(;)
    keyword(end)operator(;)
  keyword(finally)
    ident(MainReg)operator(.)ident(CloseKey)operator(;)
  keyword(end)operator(;)

  ident(Node)operator(.)ident(Text) operator(:=) ident(s)operator(;)
  ident(SpyThread)operator(.)ident(Resume)operator(;)
  ident(RegTVChange)operator(()ident(Sender)operator(,) ident(Node)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TTreeWin)operator(.)ident(RegTVEditing)operator(()ident(Sender)operator(:) ident(TObject)operator(;) ident(Node)operator(:) ident(TTreeNode)operator(;)
  keyword(var) ident(AllowEdit)operator(:) ident(Boolean)operator(\))operator(;)
keyword(begin)
  ident(CheckNode)operator(()ident(Node)operator(,) ident(False)operator(\))operator(;)
  keyword(if) ident(RegTV)operator(.)ident(Selected) operator(<>) ident(Node) keyword(then)
    ident(Exit)operator(;)
  ident(AllowEdit) operator(:=) operator(()ident(NodeInfo)operator(()ident(Node)operator(\))operator(.)ident(HostType) keyword(in) operator([)ident(uhNone)operator(,) ident(uhUserShortcut)operator(])operator(\))
               keyword(and) operator(()keyword(not) ident(CantWrite)operator(\))
               keyword(and) ident(OpenCurKey)operator(;)
  ident(MainReg)operator(.)ident(CloseKey)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TTreeWin)operator(.)ident(RegTVEndDrag)operator(()ident(Sender)operator(,) ident(Target)operator(:) ident(TObject)operator(;) ident(X)operator(,) ident(Y)operator(:) ident(Integer)operator(\))operator(;)
keyword(begin)
  ident(DragNode) operator(:=) keyword(nil)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TTreeWin)operator(.)ident(RegTVEnter)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  keyword(if) keyword(not) ident(Started) keyword(then)
    ident(Exit)operator(;)
  ident(ValueList)operator(.)ident(ItemFocused) operator(:=) keyword(nil)operator(;)
  ident(MainWin)operator(.)ident(SetStatus)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TTreeWin)operator(.)ident(RegTVExpanded)operator(()ident(Sender)operator(:) ident(TObject)operator(;) ident(Node)operator(:) ident(TTreeNode)operator(\))operator(;)
keyword(begin)
  keyword(if) keyword(not) ident(DoSmartExpand) keyword(or) keyword(not) ident(PrefWin)operator(.)ident(SmartExpandCB)operator(.)ident(Checked) keyword(then)
    ident(Exit)operator(;)

  keyword(if) keyword(not) ident(Assigned)operator(()ident(Node)operator(\)) keyword(then)
    ident(Exit)operator(;)

  ident(RegTVChange)operator(()ident(Sender)operator(,) ident(Node)operator(\))operator(;)

  comment(//SmartExpand)
  keyword(if) operator(()ident(Node)operator(.)ident(Count) operator(>) integer(0)operator(\)) keyword(and) operator(()ident(ValueList)operator(.)ident(Items)operator(.)ident(Count) operator(=) integer(0)operator(\)) keyword(then) keyword(begin)
    ident(RegTV)operator(.)ident(Selected) operator(:=) ident(Node)operator(.)ident(GetFirstChild)operator(;)
    ident(RegTVChange)operator(()ident(Sender)operator(,) ident(RegTV)operator(.)ident(Selected)operator(\))operator(;)
  keyword(end)operator(;)

  keyword(if) ident(Node)operator(.)ident(Count) operator(=) integer(1) keyword(then)
    ident(Node)operator(.)ident(GetFirstChild)operator(.)ident(Expand)operator(()ident(False)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TTreeWin)operator(.)ident(RegTVExpanding)operator(()ident(Sender)operator(:) ident(TObject)operator(;) ident(Node)operator(:) ident(TTreeNode)operator(;)
  keyword(var) ident(AllowExpansion)operator(:) ident(Boolean)operator(\))operator(;)
keyword(var)
  ident(SL)operator(:) ident(TStringList)operator(;)
  ident(Reg)operator(:) ident(TXRegistry)operator(;)
  ident(Clock)operator(:) ident(TClock)operator(;)
preprocessor({$IFDEF UNIKEY})
  ident(Uni)operator(:) ident(TUniKey)operator(;)
preprocessor({$ENDIF})

  keyword(procedure) ident(AddKeys)operator(()ident(TreeView)operator(:) ident(TTreeView)operator(;) ident(Node)operator(:) ident(TTreeNode)operator(;) ident(SL)operator(:) ident(TStrings)operator(\))operator(;)
  keyword(var)
    ident(i)operator(:) ident(Integer)operator(;)
  keyword(begin)
    keyword(for) ident(i) operator(:=) integer(0) keyword(to) ident(SL)operator(.)ident(Count)operator(-)integer(1) keyword(do)
      ident(TreeView)operator(.)ident(Items)operator(.)ident(AddNode)operator(()ident(TTreeNode)operator(.)ident(Create)operator(()ident(TreeView)operator(.)ident(Items)operator(\))operator(,) ident(Node)operator(,) ident(SL)operator([)ident(i)operator(])operator(,)
        keyword(nil)operator(,) ident(naAddChild)operator(\))operator(;)
  keyword(end)operator(;)

  keyword(procedure) ident(AddKeysProgressive)operator(()ident(TreeView)operator(:) ident(TTreeView)operator(;) ident(Node)operator(:) ident(TTreeNode)operator(;)
    ident(SL)operator(:) ident(TStrings)operator(\))operator(;)
  keyword(var)
    ident(i)operator(,) ident(delta)operator(:) ident(Integer)operator(;)
    ident(GaugeRect)operator(,) ident(FullRect)operator(:) ident(TRect)operator(;)
    ident(GaugeWidth)operator(:) ident(Integer)operator(;)
  keyword(begin)
    ident(delta) operator(:=) ident(SL)operator(.)ident(Count) keyword(div) integer(100)operator(;)
    ident(GaugeWidth) operator(:=) integer(100)operator(;)
    keyword(with) ident(TreeView)operator(.)ident(Canvas) keyword(do) keyword(begin)
      ident(FullRect) operator(:=) ident(Node)operator(.)ident(DisplayRect)operator(()ident(True)operator(\))operator(;)
      keyword(with) ident(FullRect) keyword(do) keyword(begin)
        ident(Left) operator(:=) ident(Right) operator(+) integer(40)operator(;)
        ident(Right) operator(:=) ident(Left) operator(+) ident(GaugeWidth) operator(+) integer(2)operator(;)
        ident(Inc)operator(()ident(Top)operator(,) integer(5)operator(\))operator(;)
        ident(Dec)operator(()ident(Bottom)operator(,) integer(5)operator(\))operator(;)
      keyword(end)operator(;)
      keyword(with) ident(Pen) keyword(do) keyword(begin)
        ident(Width) operator(:=) integer(1)operator(;)
        ident(Style) operator(:=) ident(psSolid)operator(;)
      keyword(end)operator(;)
      ident(Pen)operator(.)ident(Color) operator(:=) ident(clBrightBlue)operator(;)
      ident(Brush)operator(.)ident(Style) operator(:=) ident(bsClear)operator(;)
      ident(Rectangle)operator(()ident(FullRect)operator(\))operator(;)
      ident(Pen)operator(.)ident(Style) operator(:=) ident(psClear)operator(;)
    keyword(end)operator(;)

    ident(GaugeRect) operator(:=) ident(FullRect)operator(;)
    keyword(with) ident(GaugeRect) keyword(do) keyword(begin)
      ident(Inc)operator(()ident(Left)operator(\))operator(;)
      ident(Inc)operator(()ident(Top)operator(\))operator(;)
      ident(Dec)operator(()ident(Bottom)operator(\))operator(;)
    keyword(end)operator(;)

    keyword(for) ident(i) operator(:=) integer(0) keyword(to) ident(SL)operator(.)ident(Count)operator(-)integer(1) keyword(do) keyword(begin)
      ident(TreeView)operator(.)ident(Items)operator(.)ident(AddNode)operator(()ident(TTreeNode)operator(.)ident(Create)operator(()ident(TreeView)operator(.)ident(Items)operator(\))operator(,) ident(Node)operator(,) ident(SL)operator([)ident(i)operator(])operator(,)
        keyword(nil)operator(,) ident(naAddChild)operator(\))operator(;)

      keyword(if) operator(()operator(()ident(i) operator(+) integer(1)operator(\)) keyword(mod) ident(delta)operator(\)) operator(=) integer(0) keyword(then) keyword(begin)
        keyword(with) ident(TreeView)operator(.)ident(Canvas) keyword(do) keyword(begin)
          ident(GaugeRect)operator(.)ident(Right) operator(:=) ident(GaugeRect)operator(.)ident(Left) operator(+) operator(()ident(GaugeWidth) operator(*) ident(i)operator(\)) keyword(div) ident(SL)operator(.)ident(Count)operator(;)
          ident(Brush)operator(.)ident(Color) operator(:=) ident(GadientAqua)operator(()integer(90) operator(+) ident(Round)operator(()integer(100) operator(*) operator(()operator(()ident(i)operator(+)integer(1)operator(\)) operator(/) ident(SL)operator(.)ident(Count)operator(\))operator(\))operator(\))operator(;)
          ident(FillRect)operator(()ident(GaugeRect)operator(\))operator(;)
        keyword(end)operator(;)
      keyword(end)operator(;)
    keyword(end)operator(;)

    keyword(with) ident(TreeView)operator(.)ident(Canvas) keyword(do) keyword(begin)
      ident(Pen)operator(.)ident(Color) operator(:=) ident(clVeryBrightBlue)operator(;)
      ident(Pen)operator(.)ident(Style) operator(:=) ident(psSolid)operator(;)
      ident(Brush)operator(.)ident(Color) operator(:=) ident(GadientAqua)operator(()integer(200)operator(\))operator(;)
      ident(Rectangle)operator(()ident(FullRect)operator(\))operator(;)
      ident(Brush)operator(.)ident(Style) operator(:=) ident(bsClear)operator(;)
    keyword(end)operator(;)
  keyword(end)operator(;)

keyword(begin)
  keyword(if) ident(Node)operator(.)ident(Expanded) keyword(then)
    ident(Exit)operator(;)

  ident(SpyThread)operator(.)ident(Suspend)operator(;)
  ident(SL) operator(:=) ident(TStringList)operator(.)ident(Create)operator(;)
  ident(Clock) operator(:=) ident(TClock)operator(.)ident(Create)operator(;)

  keyword(try)

preprocessor({$IFDEF UNIKEY})
    keyword(if) ident(RootOfNode)operator(()ident(Node)operator(\))operator(.)ident(ImageIndex) operator(=) ident(iconHostUni) keyword(then) keyword(begin)
      ident(Uni) operator(:=) ident(UniOfNode)operator(()ident(Node)operator(\))operator(;)
      keyword(if) ident(Assigned)operator(()ident(Uni)operator(\)) keyword(then)
        keyword(try)
          ident(Uni)operator(.)ident(GetKeyNames)operator(()ident(SL)operator(\))operator(;)
        keyword(finally)
          ident(Uni)operator(.)ident(Free)operator(;)
        keyword(end)operator(;)

    keyword(end) keyword(else) keyword(begin)
preprocessor({$ENDIF})

    ident(Reg) operator(:=) ident(TXRegistry)operator(.)ident(Create)operator(;)
    keyword(try)
      keyword(if) ident(OpenNodeOK)operator(()ident(Reg)operator(,) ident(Node)operator(\)) keyword(then)
        ident(Reg)operator(.)ident(GetKeyNames)operator(()ident(SL)operator(\))operator(;)
    keyword(finally)
      ident(Reg)operator(.)ident(Free)operator(;)
    keyword(end)operator(;)

preprocessor({$IFDEF UNIKEY})
    keyword(end)operator(;)
preprocessor({$ENDIF})

    ident(Node)operator(.)ident(DeleteChildren)operator(;)
    keyword(if) ident(PrefWin)operator(.)ident(ShowProgressCB)operator(.)ident(Checked) keyword(and) operator(()ident(SL)operator(.)ident(Count) operator(>) integer(100)operator(\)) keyword(then)
      ident(AddKeysProgressive)operator(()ident(RegTV)operator(,) ident(Node)operator(,) ident(SL)operator(\))
    keyword(else)
      ident(AddKeys)operator(()ident(RegTV)operator(,) ident(Node)operator(,) ident(SL)operator(\))operator(;)

    keyword(if) ident(PrefWin)operator(.)ident(SortKeysCB)operator(.)ident(Checked) keyword(then)
      ident(Node)operator(.)ident(AlphaSort)operator(;)

    keyword(if) ident(MurphyMode) keyword(then) keyword(begin)
      ident(Clock)operator(.)ident(Stop)operator(;)
      ident(AddHint)operator(()ident(Format)operator(()string<delimiter(')content([MM] Key opened after %0.2f s.)delimiter(')>operator(,) operator([)ident(Clock)operator(.)ident(SecondsPassed)operator(])operator(\))operator(\))operator(;)
    keyword(end)operator(;)
  keyword(finally)
    ident(Clock)operator(.)ident(Free)operator(;)
    ident(SL)operator(.)ident(Free)operator(;)
    ident(SpyThread)operator(.)ident(Resume)operator(;)
  keyword(end)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TTreeWin)operator(.)ident(RegTVGetSelectedIndex)operator(()ident(Sender)operator(:) ident(TObject)operator(;) ident(Node)operator(:) ident(TTreeNode)operator(\))operator(;)
keyword(begin)
  ident(Node)operator(.)ident(SelectedIndex) operator(:=) ident(Node)operator(.)ident(ImageIndex)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TTreeWin)operator(.)ident(RegTVKeyDown)operator(()ident(Sender)operator(:) ident(TObject)operator(;) keyword(var) ident(Key)operator(:) ident(Word)operator(;)
  ident(Shift)operator(:) ident(TShiftState)operator(\))operator(;)
keyword(var)
  ident(Node)operator(:) ident(TTreeNode)operator(;)
keyword(begin)
  keyword(if) ident(Key) operator(=) ident(VK_SCROLL) keyword(then)
    ident(CheckRegTVHotTrack)operator(;)

  keyword(if) ident(RegTV)operator(.)ident(IsEditing) keyword(then)
    ident(Exit)operator(;)

  ident(Node) operator(:=) ident(RegTV)operator(.)ident(Selected)operator(;)
  keyword(if) keyword(not) ident(Assigned)operator(()ident(Node)operator(\)) keyword(then)
    ident(Exit)operator(;)

  keyword(if) ident(ssShift) keyword(in) ident(Shift) keyword(then)
    keyword(case) ident(Key) keyword(of)
      ident(VK_DOWN)operator(:) keyword(begin)
        ident(Node) operator(:=) ident(Node)operator(.)ident(GetNextSibling)operator(;)
        keyword(if) ident(Assigned)operator(()ident(Node)operator(\)) keyword(then)
          ident(RegTV)operator(.)ident(Selected) operator(:=) ident(Node)operator(;)
      ident(Key) operator(:=) integer(0)operator(;) keyword(end)operator(;)

      ident(VK_UP)operator(:) keyword(begin)
        ident(Node) operator(:=) ident(Node)operator(.)ident(GetPrevSibling)operator(;)
        keyword(if) ident(Assigned)operator(()ident(Node)operator(\)) keyword(then)
          ident(RegTV)operator(.)ident(Selected) operator(:=) ident(Node)operator(;)
      ident(Key) operator(:=) integer(0)operator(;) keyword(end)operator(;)

      ident(VK_RIGHT)operator(:) ident(Key) operator(:=) ident(VK_MULTIPLY)operator(;)
      ident(VK_LEFT)operator(:) ident(Key) operator(:=) ident(VK_DIVIDE)operator(;)
    keyword(end)operator(;)

  keyword(if) ident(Assigned)operator(()ident(Node)operator(.)ident(Parent)operator(\)) keyword(then) keyword(begin)
    keyword(case) ident(Key) keyword(of)
      ident(VK_END)operator(:)
        keyword(begin)
          ident(RegTV)operator(.)ident(Selected) operator(:=) ident(Node)operator(.)ident(Parent)operator(.)ident(GetLastChild)operator(;)
        ident(Key) operator(:=) integer(0)operator(;) keyword(end)operator(;)

      ident(VK_HOME)operator(:)
        keyword(begin)
          ident(RegTV)operator(.)ident(Selected) operator(:=) ident(Node)operator(.)ident(Parent)operator(.)ident(GetFirstChild)operator(;)
        ident(Key) operator(:=) integer(0)operator(;) keyword(end)operator(;)
    keyword(end)operator(;)
  keyword(end)operator(;)

  keyword(case) ident(Key) keyword(of)
    integer(0)operator(:) ident(Exit)operator(;)
    ident(VK_RETURN)operator(:) ident(ValuesWin)operator(.)ident(FocusControl)operator(()ident(ValueList)operator(\))operator(;)
    ident(VK_DELETE)operator(:) ident(DeleteMIClick)operator(()ident(Sender)operator(\))operator(;)
    ident(VK_SPACE)operator(:) keyword(begin)
      ident(JumpToSel)operator(()ident(RegTV)operator(\))operator(;)
      ident(Inc)operator(()ident(SpaceCount)operator(\))operator(;)
      keyword(if) ident(SpaceCount) operator(>) integer(10) keyword(then) keyword(begin)
        ident(ShowMessage)operator(()string<delimiter(')content(YES!)delimiter(')>operator(\))operator(;)
        ident(SpaceCount) operator(:=) integer(0)operator(;)
      keyword(end)operator(;)
    keyword(end)operator(;)
    ident(VK_F9)operator(:) ident(SwapFonts)operator(()ident(RegTV)operator(\))operator(;)

    ident(VK_F12)operator(:)
      keyword(if) ident(ssShift) keyword(in) ident(Shift) keyword(then) keyword(begin)
        keyword(if) ident(Assigned)operator(()ident(Node)operator(.)ident(Parent)operator(\)) keyword(then) ident(Node)operator(.)ident(Parent)operator(.)ident(AlphaSort)operator(;)
      keyword(end) keyword(else)
        keyword(if) ident(Node)operator(.)ident(Expanded) keyword(then) ident(Node)operator(.)ident(AlphaSort)operator(;)

    ident(VK_LEFT)operator(,) ident(VK_SUBTRACT)operator(:)
      keyword(begin)
        keyword(if) ident(Node)operator(.)ident(Expanded) keyword(then)
          ident(Node)operator(.)ident(Collapse)operator(()ident(False)operator(\))
        keyword(else) keyword(if) ident(Assigned)operator(()ident(Node)operator(.)ident(Parent)operator(\)) keyword(then)
          ident(RegTV)operator(.)ident(Selected) operator(:=) ident(Node)operator(.)ident(Parent)operator(;)
      ident(Key) operator(:=) integer(0)operator(;) keyword(end)operator(;)

    ident(VK_RIGHT)operator(,) ident(VK_ADD)operator(:)
      keyword(begin)
        keyword(if) keyword(not) ident(Node)operator(.)ident(HasChildren) keyword(then)
          ident(TreeWin)operator(.)ident(RegTV)operator(.)ident(Items)operator(.)ident(AddChild)operator(()ident(Node)operator(,) string<delimiter(')delimiter(')>operator(\))operator(;)
        keyword(if) ident(Node)operator(.)ident(Expanded) keyword(then)
          ident(RegTV)operator(.)ident(Selected) operator(:=) ident(Node)operator(.)ident(GetFirstChild)
        keyword(else)
          ident(Node)operator(.)ident(Expand)operator(()ident(False)operator(\))operator(;)
      ident(Key) operator(:=) integer(0)operator(;) keyword(end)operator(;)

    ident(VK_MULTIPLY)operator(:)
      keyword(begin)
        ident(NoAsterisk) operator(:=) ident(True)operator(;)
        ident(OpenNextLevel)operator(()ident(Node)operator(\))operator(;)
        ident(JumpToSel)operator(()ident(RegTV)operator(\))operator(;)
        ident(AddHint)operator(()string<delimiter(')content(Press the Multiply Key again to open the next level.)delimiter(')>operator(\))operator(;)
      ident(Key) operator(:=) integer(0)operator(;) keyword(end)operator(;)

    ident(VK_DIVIDE)operator(:)
      keyword(begin)
        ident(DoSmartExpand) operator(:=) ident(False)operator(;)
        ident(Node)operator(.)ident(Collapse)operator(()ident(true)operator(\))operator(;)
        ident(DoSmartExpand) operator(:=) ident(True)operator(;)
      ident(Key) operator(:=) integer(0)operator(;) keyword(end)operator(;)
  keyword(end)operator(;)

  keyword(if) ident(ssctrl) keyword(in) ident(Shift) keyword(then)
    keyword(case) ident(Key) keyword(of)
      ident(Ord)operator(()char<delimiter(')content(C)delimiter(')>operator(\))operator(:) ident(CopyPathMIClick)operator(()ident(Sender)operator(\))operator(;)
      ident(Ord)operator(()char<delimiter(')content(X)delimiter(')>operator(\))operator(:) ident(CutPathMIClick)operator(()ident(Sender)operator(\))operator(;)
      ident(Ord)operator(()char<delimiter(')content(V)delimiter(')>operator(\))operator(:) ident(PasteKeyMIClick)operator(()ident(Sender)operator(\))operator(;)
    keyword(end)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TTreeWin)operator(.)ident(RegTVMouseDown)operator(()ident(Sender)operator(:) ident(TObject)operator(;) ident(Button)operator(:) ident(TMouseButton)operator(;)
  ident(Shift)operator(:) ident(TShiftState)operator(;) ident(X)operator(,) ident(Y)operator(:) ident(Integer)operator(\))operator(;)
keyword(var)
  ident(Node)operator(:) ident(TTreeNode)operator(;)
  ident(RelX)operator(,) ident(RelY)operator(:) ident(Integer)operator(;)
  ident(NodeRect)operator(:) ident(TRect)operator(;)
keyword(begin)
  ident(CheckRegTVHotTrack)operator(;)

  keyword(if) keyword(not) ident(Active) keyword(then)
    ident(Exit)operator(;)

  ident(RelX) operator(:=) ident(RegTV)operator(.)ident(ScreenToClient)operator(()ident(Mouse)operator(.)ident(CursorPos)operator(\))operator(.)ident(X)operator(;)
  ident(RelY) operator(:=) ident(RegTV)operator(.)ident(ScreenToClient)operator(()ident(Mouse)operator(.)ident(CursorPos)operator(\))operator(.)ident(Y)operator(;)
  ident(Node) operator(:=) ident(RegTV)operator(.)ident(GetNodeAt)operator(()ident(RelX)operator(,) ident(RelY)operator(\))operator(;)
  keyword(if) keyword(not) ident(Assigned)operator(()ident(Node)operator(\)) keyword(then)
    ident(Exit)operator(;)

  keyword(if) keyword(not) ident(Node)operator(.)ident(Selected) keyword(then)
    ident(Node)operator(.)ident(Selected) operator(:=) ident(True)operator(;)

  keyword(if) ident(Button) operator(=) ident(mbLeft) keyword(then) keyword(begin)
    ident(NodeRect) operator(:=) ident(RegTV)operator(.)ident(Selected)operator(.)ident(DisplayRect)operator(()ident(True)operator(\))operator(;)
    keyword(if) ident(RegTV)operator(.)ident(HotTrack)
     keyword(or) operator(()ident(RelX) operator(<) ident(NodeRect)operator(.)ident(Left)operator(\)) keyword(and) operator(()ident(RelX) operator(>) ident(NodeRect)operator(.)ident(Left) operator(-) integer(20)operator(\)) keyword(then) keyword(begin)
      comment(//4px more to the left (friendlier for the user\))
      keyword(if) keyword(not) ident(Node)operator(.)ident(HasChildren) keyword(then)
        ident(RegTV)operator(.)ident(Items)operator(.)ident(AddChild)operator(()ident(Node)operator(,) string<delimiter(')delimiter(')>operator(\))operator(;)
      ident(DoSmartExpand) operator(:=) ident(False)operator(;)
      keyword(with) ident(Node) keyword(do)
        keyword(if) keyword(not) ident(Expanded) keyword(then)
          ident(Expand)operator(()ident(False)operator(\))
        keyword(else)
          ident(Collapse)operator(()ident(False)operator(\))operator(;)
      ident(DoSmartExpand) operator(:=) ident(True)operator(;)
    keyword(end)operator(;)
  keyword(end)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TTreeWin)operator(.)ident(RegTVStartDrag)operator(()ident(Sender)operator(:) ident(TObject)operator(;) keyword(var) ident(DragObject)operator(:) ident(TDragObject)operator(\))operator(;)
keyword(begin)
  ident(DragNode) operator(:=) ident(RegTV)operator(.)ident(Selected)operator(;)
  keyword(if) ident(NodeInfo)operator(()ident(DragNode)operator(\))operator(.)ident(IsHost) keyword(then)
    ident(DragNode) operator(:=) keyword(nil)operator(;)
keyword(end)operator(;)

keyword(function) ident(OpenNodeError)operator(()ident(Reg)operator(:) ident(TXRegistry)operator(;) ident(Node)operator(:) ident(TTreeNode)operator(;)
  keyword(out) ident(Mode)operator(:) ident(TOpenNodeMode)operator(\))operator(:) ident(Integer)operator(;)
keyword(var)
  ident(Key)operator(:) keyword(string)operator(;)
keyword(begin)
  ident(Result) operator(:=) ident(ERROR_SUCCESS)operator(;)
  ident(Mode) operator(:=) ident(onNodeNil)operator(;)
  keyword(if) keyword(not) ident(Assigned)operator(()ident(Node)operator(\)) keyword(then)
    ident(Exit)operator(;)

  ident(Reg)operator(.)ident(CloseKey)operator(;)
  ident(Key) operator(:=) ident(TraceKey)operator(()ident(PathOfNode)operator(()ident(Node)operator(\))operator(\))operator(;)
  ident(Reg)operator(.)ident(RootKey) operator(:=) ident(HKEYOfStr)operator(()ident(ExRegRoot)operator(()ident(Key)operator(\))operator(\))operator(;)
  ident(Result) operator(:=) ident(Reg)operator(.)ident(OpenKeyError)operator(()ident(ExRegKey)operator(()ident(Key)operator(\))operator(,) ident(False)operator(,) ident(True)operator(\))operator(;)
  keyword(if) ident(Success)operator(()ident(Result)operator(\)) keyword(then)
    keyword(if) ident(Reg)operator(.)ident(RootKey) operator(=) ident(HKDD) keyword(then)
      ident(Mode) operator(:=) ident(onReadOnly)
    keyword(else)
      ident(Mode) operator(:=) ident(onFull)
  keyword(else) keyword(if) ident(Reg)operator(.)ident(OpenKeyReadOnly)operator(()ident(ExRegKey)operator(()ident(Key)operator(\))operator(\)) keyword(then)
    ident(Mode) operator(:=) ident(onReadOnly)
  keyword(else)
    ident(Mode) operator(:=) ident(onError)operator(;)
keyword(end)operator(;)

keyword(function) ident(OpenNode)operator(()ident(Reg)operator(:) ident(TXRegistry)operator(;) ident(Node)operator(:) ident(TTreeNode)operator(\))operator(:) ident(TOpenNodeMode)operator(;)
keyword(begin)
  ident(OpenNodeError)operator(()ident(Reg)operator(,) ident(Node)operator(,) ident(Result)operator(\))operator(;)
keyword(end)operator(;)

keyword(function) ident(OpenNodeOK)operator(()ident(Reg)operator(:) ident(TXRegistry)operator(;) ident(Node)operator(:) ident(TTreeNode)operator(\))operator(:) ident(Boolean)operator(;)
keyword(begin)
  ident(Result) operator(:=) ident(OpenNode)operator(()ident(Reg)operator(,) ident(Node)operator(\)) keyword(in) ident(onOK)operator(;)
keyword(end)operator(;)

keyword(function) ident(OpenCurKey)operator(:) ident(Boolean)operator(;)
keyword(begin)
  ident(Result) operator(:=) ident(OpenNodeOK)operator(()ident(MainReg)operator(,) ident(RegTV)operator(.)ident(Selected)operator(\))operator(;)
keyword(end)operator(;)

keyword(function) ident(OpenCurParent)operator(:) ident(Boolean)operator(;)
keyword(begin)
  ident(Result) operator(:=) ident(Assigned)operator(()ident(RegTV)operator(.)ident(Selected)operator(\))
    keyword(and) ident(OpenNodeOK)operator(()ident(MainReg)operator(,) ident(RegTV)operator(.)ident(Selected)operator(.)ident(Parent)operator(\))operator(;)
keyword(end)operator(;)

keyword(function) ident(TTreeWin)operator(.)ident(CreateKey)operator(()ident(Subkey)operator(:) ident(Boolean)operator(\))operator(:) ident(Boolean)operator(;)
keyword(var)
  ident(Node)operator(,) ident(NewNode)operator(:) ident(TTreeNode)operator(;)
  ident(KeyName)operator(:) keyword(string)operator(;)
  ident(i)operator(:) ident(integer)operator(;)
keyword(begin)
  ident(Result) operator(:=) ident(False)operator(;)

  keyword(if) ident(CantWrite) keyword(then)
    ident(Exit)operator(;)

  ident(Node) operator(:=) ident(RegTV)operator(.)ident(Selected)operator(;)
  keyword(if) keyword(not) ident(Assigned)operator(()ident(Node)operator(\)) keyword(then)
    ident(Exit)operator(;)

  keyword(if) keyword(not) ident(Subkey) keyword(then) keyword(begin)
  comment(//key shall be created on same level...)
    keyword(if) ident(Node)operator(.)ident(Level) operator(=) integer(0) keyword(then) keyword(begin)
      ident(Node) operator(:=) ident(RegTV)operator(.)ident(Selected)operator(;)
      keyword(if) ident(TraceKey)operator(()ident(PathOfNode)operator(()ident(Node)operator(\))operator(\)) operator(<>) ident(PathOfNode)operator(()ident(Node)operator(\)) keyword(then)
      comment(//check for shortcut: shortcuts are unequal to their trace)
        keyword(if) ident(mrOK) operator(=) ident(MessageDlg)operator(()
                  string<delimiter(')content(You are trying to create a Key in the shortcut)char('')content(s level.)delimiter(')> operator(+) ident(EOL) operator(+)
                  string<delimiter(')content(Pluto needs to jump to the target of the shortcut to do this.)delimiter(')>operator(,)
                  ident(mtConfirmation)operator(,) operator([)ident(mbOK)operator(,) ident(mbCancel)operator(])operator(,) integer(0)operator(\)) keyword(then) keyword(begin)
          ident(MainWin)operator(.)ident(GotoKey)operator(()ident(TraceKey)operator(()ident(PathOfNode)operator(()ident(Node)operator(\))operator(\))operator(\))operator(;)
          ident(Node) operator(:=) ident(RegTV)operator(.)ident(Selected)operator(.)ident(Parent)operator(;)
        keyword(end) keyword(else) ident(Exit)
      keyword(else) keyword(begin)
        ident(ShowMessage)operator(()string<delimiter(')content(Key is a HKEY.)delimiter(')> operator(+) ident(EOL) operator(+)
                    string<delimiter(')content(It is not possible to create Keys on HKEY level.)delimiter(')>operator(\))operator(;)
      ident(Exit)operator(;) keyword(end)operator(;)
    keyword(end) keyword(else)
      ident(Node) operator(:=) ident(Node)operator(.)ident(Parent)operator(;) comment(//set reference key to parent)
  keyword(end)operator(;)

  keyword(try)

    keyword(case) ident(OpenNode)operator(()ident(MainReg)operator(,) ident(Node)operator(\)) keyword(of)

    ident(onFull)operator(:) keyword(begin)
      ident(KeyName) operator(:=) string<delimiter(')content(New)delimiter(')>operator(;)  comment(//find best free name)
      ident(i) operator(:=) integer(0)operator(;)
      keyword(while) ident(MainReg)operator(.)ident(KeyExists)operator(()ident(KeyName)operator(\)) keyword(do) keyword(begin)
        ident(Inc)operator(()ident(i)operator(\))operator(;)
        ident(KeyName) operator(:=) string<delimiter(')content(New )delimiter(')> operator(+) ident(IntToStr)operator(()ident(i)operator(\))operator(;)
      keyword(end)operator(;)

      ident(Result) operator(:=) ident(MainReg)operator(.)ident(CreateKey)operator(()ident(KeyName)operator(\)) keyword(and) ident(MainReg)operator(.)ident(KeyExists)operator(()ident(KeyName)operator(\))operator(;)
      comment(// ^-- CREATE KEY)

      keyword(if) keyword(not) ident(Result) keyword(then) comment(// <-- FAILED)
        ident(ShowMessage)operator(()string<delimiter(')content(Could not create key!)delimiter(')>operator(\))operator(;)
    keyword(end)operator(;)

    ident(onReadOnly)operator(:) ident(ShowMessage)operator(()string<delimiter(')content(Key is read-only.)delimiter(')>operator(\))operator(;)

    keyword(else)
      ident(ShowMessage)operator(()string<delimiter(')content(Error: Couldn)char('')content(t open key.)delimiter(')>operator(\))operator(;)

    keyword(end)operator(;) comment(//case)

  keyword(finally)
    ident(MainReg)operator(.)ident(CloseKey)operator(;)
  keyword(end)operator(;)

  keyword(if) keyword(not) ident(Result) keyword(then)
    ident(Exit)operator(;)

  keyword(if) keyword(not) ident(Node)operator(.)ident(Expanded) keyword(then) keyword(begin)   comment(//find the node, if Parent not Expanded)
    ident(CheckNode)operator(()ident(Node)operator(,) ident(False)operator(\))operator(;)
    ident(DoSmartExpand) operator(:=) ident(False)operator(;)
    ident(Node)operator(.)ident(Expand)operator(()ident(False)operator(\))operator(;)
    ident(DoSmartExpand) operator(:=) ident(True)operator(;)
    ident(NewNode) operator(:=) ident(FindNode)operator(()ident(Node)operator(,) ident(KeyName)operator(\))operator(;)
  keyword(end) keyword(else)
    ident(NewNode) operator(:=) ident(RegTV)operator(.)ident(Items)operator(.)ident(AddChild)operator(()ident(Node)operator(,) ident(KeyName)operator(\))operator(;) comment(//else create a new node)

  ident(Result) operator(:=) ident(Assigned)operator(()ident(NewNode)operator(\))operator(;)
  keyword(if) keyword(not) ident(Result) keyword(then)
    ident(ShowMessage)operator(()string<delimiter(')content(Error: Could not find created key.)delimiter(')>operator(\))operator(;)

  keyword(if) ident(Result) keyword(then) keyword(begin)
    ident(RegTV)operator(.)ident(Selected) operator(:=) ident(NewNode)operator(;)
    ident(RegTV)operator(.)ident(Selected)operator(.)ident(EditText)operator(;)
  keyword(end)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TTreeWin)operator(.)ident(CloneKey)operator(;)
keyword(var)
  ident(Node)operator(:) ident(TTreeNode)operator(;)
  ident(Full)operator(:) ident(TRegPath)operator(;)
  ident(MainKey)operator(,) ident(SubKey)operator(,) ident(NewKey)operator(,) ident(zKey)operator(:) keyword(string)operator(;)
  ident(i)operator(:) ident(integer)operator(;)
keyword(begin)
  ident(Node) operator(:=) ident(RegTV)operator(.)ident(Selected)operator(;)

  keyword(if) ident(CantWrite) keyword(then)
    ident(Exit)operator(;)

  keyword(if) ident(NodeInfo)operator(()ident(Node)operator(\))operator(.)ident(IsHost) keyword(then)
    ident(Exit)operator(;)

  ident(Full) operator(:=) ident(CurKey)operator(()ident(uhNonSystemShortcuts)operator(\))operator(;)
  ident(MainKey) operator(:=) ident(LWPSolve)operator(()ident(Full)operator(.)ident(Key)operator(\))operator(;)
  ident(SubKey) operator(:=) ident(FromLastChar)operator(()ident(MainKey)operator(,) char<delimiter(')content(\\)delimiter(')>operator(\))operator(;)
  ident(MainKey) operator(:=) ident(UntilLastChar)operator(()ident(MainKey)operator(,) char<delimiter(')content(\\)delimiter(')>operator(\))operator(;)
  keyword(if) ident(SubKey) operator(=) string<delimiter(')delimiter(')> keyword(then) keyword(begin) comment(//Directly beyound HKEY)
    ident(SubKey) operator(:=) ident(MainKey)operator(;)
    ident(MainKey) operator(:=) string<delimiter(')delimiter(')>operator(;)
  keyword(end)operator(;)

  keyword(try)
    ident(MainReg)operator(.)ident(RootKey) operator(:=) ident(HKEYOfStr)operator(()ident(Full)operator(.)ident(Root)operator(\))operator(;)
    keyword(if) keyword(not) ident(MainReg)operator(.)ident(OpenKey)operator(()ident(MainKey)operator(,) ident(False)operator(\)) keyword(then) keyword(begin)
      ident(ShowMessage)operator(()string<delimiter(')content(Error: Couldn)char('')content(t not open Key: )delimiter(')> operator(+) ident(MainKey)operator(\))operator(;)
    ident(Exit) keyword(end)operator(;)
    keyword(if) ident(Copy)operator(()ident(SubKey)operator(,) integer(1)operator(,) integer(3)operator(\)) operator(<>) string<delimiter(')content(New)delimiter(')> keyword(then)
      ident(NewKey) operator(:=) string<delimiter(')content(New )delimiter(')> operator(+) ident(SubKey)
    keyword(else)
      ident(NewKey) operator(:=) ident(SubKey)operator(;)

    ident(zKey) operator(:=) ident(Trim)operator(()ident(FromLastChar)operator(()ident(NewKey)operator(,) char<delimiter(')content( )delimiter(')>operator(\))operator(\))operator(;)

    ident(i) operator(:=) ident(StrToIntDef)operator(()ident(zKey)operator(,) integer(0)operator(\))operator(;)
    keyword(if) ident(IsValidInteger)operator(()ident(zKey)operator(\)) keyword(then)
      ident(zKey) operator(:=) ident(Trim)operator(()ident(UntilLastChar)operator(()ident(NewKey)operator(,) char<delimiter(')content( )delimiter(')>operator(\))operator(\))
    keyword(else)
      ident(zKey) operator(:=) ident(NewKey)operator(;)
        
    keyword(while) ident(MainReg)operator(.)ident(KeyExists)operator(()ident(NewKey)operator(\)) keyword(do) keyword(begin)
      ident(Inc)operator(()ident(i)operator(\))operator(;)
      ident(NewKey) operator(:=) ident(zKey) operator(+) char<delimiter(')content( )delimiter(')> operator(+) ident(IntToStr)operator(()ident(i)operator(\))operator(;)
    keyword(end)operator(;)

    ident(MainReg)operator(.)ident(MoveKey)operator(()ident(SubKey)operator(,) ident(NewKey)operator(,) ident(False)operator(\))operator(;)
  keyword(finally)
    ident(MainReg)operator(.)ident(CloseKey)operator(;)
  keyword(end)operator(;)

  ident(Node) operator(:=) ident(RegTV)operator(.)ident(Items)operator(.)ident(Add)operator(()ident(Node)operator(,) ident(NewKey)operator(\))operator(;)
  ident(RegTV)operator(.)ident(Selected) operator(:=) ident(Node)operator(;)
  ident(Node)operator(.)ident(EditText)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TTreeWin)operator(.)ident(NewShortcut)operator(;)
keyword(var)
  ident(Node)operator(,) ident(ShortCutNode)operator(:) ident(TTreeNode)operator(;)
  ident(ScName)operator(,) ident(ScRealPath)operator(:) keyword(string)operator(;)
  ident(i)operator(:) ident(Integer)operator(;)
keyword(begin)
  ident(Node) operator(:=) ident(RegTV)operator(.)ident(Selected)operator(;)
  keyword(if) keyword(not) ident(Assigned)operator(()ident(Node)operator(\)) keyword(then)
    ident(Exit)operator(;)

  keyword(if) ident(Node)operator(.)ident(Level) operator(=) integer(0) keyword(then)
    ident(ScName) operator(:=) string<delimiter(')content(new )delimiter(')> operator(+) ident(Node)operator(.)ident(Text)
  keyword(else)
    ident(ScName) operator(:=) string<delimiter(')delimiter(')> operator(+) ident(Node)operator(.)ident(Text)operator(;)

  ident(ScRealPath) operator(:=) ident(TraceKey)operator(()ident(PathOfNode)operator(()ident(Node)operator(\))operator(\))operator(;)
  keyword(if) keyword(not) ident(InputQuery)operator(()string<delimiter(')content(New shortcut to )delimiter(')>operator(,) ident(ScRealPath)operator(,) ident(ScName)operator(\)) keyword(then)
    ident(Exit)operator(;)

  keyword(for) ident(i) operator(:=) integer(0) keyword(to) ident(High)operator(()ident(ShortCuts)operator(\)) keyword(do)
    keyword(if) ident(SameText)operator(()ident(ScName)operator(,) ident(ShortCuts)operator([)ident(i)operator(])operator(.)ident(Alias)operator(\)) keyword(then) keyword(begin)
      ident(ShowMessage)operator(()string<delimiter(')content(Name already in use.)delimiter(')>operator(\))operator(;)
      ident(NewShortcut)operator(;)
    ident(Exit)operator(;) keyword(end)operator(;)

  ident(ShortCutNode) operator(:=) ident(AddShortcut)operator(()ident(ScName)operator(,) ident(ScRealPath)operator(,) ident(iconShortcut)operator(,) ident(uhUserShortcut)operator(,)
    ident(True)operator(\))operator(;)
  ident(CheckNode)operator(()ident(Node)operator(,) ident(False)operator(\))operator(;)
  ident(RegTV)operator(.)ident(Selected) operator(:=) ident(ShortCutNode)operator(;)
keyword(end)operator(;)

keyword(function) ident(AddShortcut)operator(()ident(Alias)operator(,) ident(RealPath)operator(:) keyword(string)operator(;) ident(Icon)operator(:) ident(Integer)operator(;)
  ident(AHostType)operator(:) ident(TUniHostType) operator(=) ident(uhUserShortcut)operator(;)
  ident(WriteIni)operator(:) ident(Boolean) operator(=) ident(False)operator(\))operator(:) ident(TTreeNode)operator(;)
keyword(var)
  ident(Last)operator(:) ident(Integer)operator(;)
keyword(begin)
  ident(RealPath) operator(:=) ident(TraceKey)operator(()ident(RealPath)operator(\))operator(;) comment(//Important: do this BEFORE adding a new,)
                                  comment(//empty shortcut to ShortCuts)

  ident(SetLength)operator(()ident(ShortCuts)operator(,) ident(Length)operator(()ident(ShortCuts)operator(\)) operator(+) integer(1)operator(\))operator(;)
  ident(Last) operator(:=) ident(High)operator(()ident(Shortcuts)operator(\))operator(;)
  ident(ShortCuts)operator([)ident(Last)operator(])operator(.)ident(Alias) operator(:=) ident(Alias)operator(;)
  ident(ShortCuts)operator([)ident(Last)operator(])operator(.)ident(RealPath) operator(:=) ident(RealPath)operator(;)

  ident(Result) operator(:=) ident(RegTV)operator(.)ident(Items)operator(.)ident(Add)operator(()keyword(nil)operator(,) ident(Alias)operator(\))operator(;)
  ident(ShortCuts)operator([)ident(Last)operator(])operator(.)ident(Node) operator(:=) ident(Result)operator(;)

  keyword(if) ident(Alias) operator(=) string<delimiter(')content(HKEY_WindowsMachine)delimiter(')> keyword(then)
    ident(Icon) operator(:=) ident(iconHKWM)
  keyword(else) keyword(if) ident(Alias) operator(=) string<delimiter(')content(HKEY_WindowsUser)delimiter(')> keyword(then)
    ident(Icon) operator(:=) ident(iconHKWU)operator(;)
  ident(SetTNImage)operator(()ident(Result)operator(,) ident(Icon)operator(\))operator(;)

  ident(NodeInfo)operator(()ident(Result)operator(\))operator(.)ident(HostType) operator(:=) ident(AHostType)operator(;)

  keyword(if) ident(WriteIni) keyword(then)
    keyword(with) ident(TIniFile)operator(.)ident(Create)operator(()ident(PlutoDir) operator(+) string<delimiter(')content(Shortcuts.ini)delimiter(')>operator(\)) keyword(do)
      keyword(try)
        ident(WriteString)operator(()string<delimiter(')content(Shortcuts)delimiter(')>operator(,) ident(Alias)operator(,) ident(RealPath)operator(\))operator(;)
      keyword(finally)
        ident(Free)operator(;)
      keyword(end)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TTreeWin)operator(.)ident(DeleteKey)operator(;)
keyword(var)
  ident(i)operator(:) ident(Integer)operator(;)
  ident(Node)operator(,) ident(Node2)operator(:) ident(TTreeNode)operator(;)
keyword(begin)
  ident(Node) operator(:=) ident(RegTV)operator(.)ident(Selected)operator(;)


  ident(i) operator(:=) ident(ShortcutIndex)operator(()ident(Node)operator(\))operator(;)
  keyword(if) operator(()ident(i) operator(>) operator(-)integer(1)operator(\)) keyword(then) keyword(begin)
    keyword(if) operator(()ident(mrYes) operator(=) ident(MessageDlg)operator(()string<delimiter(')content(This is a Pluto shortcut to a real key.)delimiter(')>char(#13)char(#10) operator(+)
     string<delimiter(')content(Do you really want to delete the shortcut?)delimiter(')>operator(,)
     ident(mtConfirmation)operator(,) operator([)ident(mbYes)operator(,) ident(mbCancel)operator(])operator(,) integer(0)operator(\))operator(\)) keyword(then) keyword(begin)
      ident(SpyThread)operator(.)ident(Suspend)operator(;)
      ident(SpyThread)operator(.)ident(Restart) operator(:=) ident(True)operator(;)
      keyword(with) ident(TIniFile)operator(.)ident(Create)operator(()ident(PlutoDir) operator(+) string<delimiter(')content(Shortcuts.ini)delimiter(')>operator(\)) keyword(do)
        keyword(try)
          ident(DeleteKey)operator(()string<delimiter(')content(Shortcuts)delimiter(')>operator(,) ident(Shortcuts)operator([)ident(i)operator(])operator(.)ident(Alias)operator(\))operator(;)
        keyword(finally)
          ident(Free)operator(;)
        keyword(end)operator(;)
      ident(Shortcuts)operator([)ident(i)operator(]) operator(:=) ident(Shortcuts)operator([)ident(High)operator(()ident(Shortcuts)operator(\))operator(])operator(;)
      ident(SetLength)operator(()ident(Shortcuts)operator(,) ident(Length)operator(()ident(Shortcuts)operator(\))operator(-)integer(1)operator(\))operator(;)
      ident(RegTV)operator(.)ident(Selected) operator(:=) ident(GetNextBest)operator(()ident(Node)operator(\))operator(;)
      ident(Node)operator(.)ident(Delete)operator(;)
      ident(RegTVChange)operator(()ident(Self)operator(,) ident(RegTV)operator(.)ident(Selected)operator(\))operator(;)
      ident(SpyThread)operator(.)ident(Resume)operator(;)
    keyword(end)operator(;)
  ident(Exit)operator(;) keyword(end)operator(;)

  keyword(if) ident(CantWrite) keyword(then)
    ident(Exit)operator(;)

  keyword(if) ident(NodeInfo)operator(()ident(Node)operator(\))operator(.)ident(IsHost) keyword(then)
    ident(Exit)operator(;)

  ident(SpyThread)operator(.)ident(Suspend)operator(;)
  ident(SpyThread)operator(.)ident(Restart) operator(:=) ident(True)operator(;)

  ident(Node2) operator(:=) ident(GetNextBest)operator(()ident(Node)operator(\))operator(;)

  keyword(if) ident(MessageDlg)operator(()string<delimiter(')content(Do you really want to delete this key?)delimiter(')>operator(,) ident(mtConfirmation)operator(,)
   operator([)ident(mbYes)operator(,) ident(mbCancel)operator(])operator(,) integer(0)operator(\)) operator(=) ident(mrYes) keyword(then)
    keyword(try)
      keyword(if) ident(OpenCurParent) keyword(then) keyword(begin)
        keyword(if) keyword(not) ident(MainReg)operator(.)ident(DeleteKey)operator(()ident(Node)operator(.)ident(Text)operator(\)) keyword(then) comment(//<-- DELETE KEY)
          ident(ShowMessage)operator(()string<delimiter(')content(Key could not be deleted.)delimiter(')>operator(\))
        keyword(else) keyword(begin)
          ident(RegTV)operator(.)ident(Selected) operator(:=) ident(Node2)operator(;)
          keyword(if) ident(Assigned)operator(()ident(Node)operator(.)ident(Parent)operator(\)) keyword(and) operator(()ident(Node2) operator(=) ident(Node)operator(.)ident(Parent)operator(\)) keyword(then)
            ident(Node)operator(.)ident(Parent)operator(.)ident(Collapse)operator(()ident(False)operator(\))operator(;)
          ident(Node)operator(.)ident(Delete)operator(;)
        keyword(end)operator(;)
      keyword(end)operator(;)
    keyword(finally)
      ident(MainReg)operator(.)ident(CloseKey)operator(;)
    keyword(end)operator(;)

  ident(RegTVChange)operator(()ident(Self)operator(,) ident(Node2)operator(\))operator(;)

  ident(SpyThread)operator(.)ident(Resume)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TTreeWin)operator(.)ident(MoveKey)operator(()keyword(const) ident(Src)operator(,) ident(Trg)operator(:) ident(TRegPath)operator(;) ident(CopyWanted)operator(:) ident(Boolean)operator(\))operator(;)
keyword(var)
  ident(TrgReg)operator(:) ident(TXRegistry)operator(;)
keyword(begin)
  keyword(with) ident(MainReg) keyword(do) keyword(begin)
    ident(RootKey) operator(:=) ident(HKEYOfStr)operator(()ident(Src)operator(.)ident(Root)operator(\))operator(;)
    ident(OpenKey)operator(()string<delimiter(')delimiter(')>operator(\))operator(;)

    keyword(if) keyword(not) ident(KeyExists)operator(()ident(Src)operator(.)ident(Key)operator(\)) keyword(then) keyword(begin)
      ident(ShowMessage)operator(()string<delimiter(')content(Source not found.)delimiter(')>operator(\))operator(;)
    ident(Exit)operator(;) keyword(end)operator(;)
  keyword(end)operator(;)

  ident(TrgReg) operator(:=) ident(TXRegistry)operator(.)ident(Create)operator(;)
  keyword(with) ident(TrgReg) keyword(do) keyword(begin)
    ident(RootKey) operator(:=) ident(HKEYOfStr)operator(()ident(Trg)operator(.)ident(Root)operator(\))operator(;)
    ident(OpenKey)operator(()string<delimiter(')delimiter(')>operator(\))operator(;)
    keyword(if) ident(KeyExists)operator(()ident(Trg)operator(.)ident(Key)operator(\)) keyword(then) keyword(begin)
      ident(ShowMessage)operator(()string<delimiter(')content(Target already existing.)delimiter(')>operator(\))operator(;)
      ident(TrgReg)operator(.)ident(Free)operator(;)
    ident(Exit)operator(;) keyword(end)operator(;)
  keyword(end)operator(;)

  keyword(if) keyword(not) ident(CopyWanted) keyword(then)
    keyword(if) ident(mrYes) operator(<>) ident(MessageDlg)operator(()string<delimiter(')content(From source: )delimiter(')> operator(+) ident(StrOfRegPath)operator(()ident(Src)operator(\)) operator(+) ident(EOL) operator(+)
                           string<delimiter(')content(To target: )delimiter(')> operator(+) ident(StrOfRegPath)operator(()ident(Trg)operator(\)) operator(+) ident(EOL) operator(+)
                           string<delimiter(')content(Do you really want to move this key?)delimiter(')>operator(,)
                           ident(mtConfirmation)operator(,) operator([)ident(mbYes)operator(,) ident(mbCancel)operator(])operator(,) integer(0)operator(\))
    keyword(then)
      ident(Exit)operator(;)

  keyword(try)
    ident(MainReg)operator(.)ident(MoveKey)operator(()ident(Src)operator(.)ident(Key)operator(,) ident(TrgReg)operator(,) ident(Trg)operator(.)ident(Key)operator(,) keyword(not) ident(CopyWanted)operator(\))operator(;) comment(//<-- MOVE KEY)
  keyword(except)
  keyword(end)operator(;)

  keyword(if) keyword(not) ident(TrgReg)operator(.)ident(OpenKey)operator(()ident(Trg)operator(.)ident(Key)operator(,) ident(False)operator(\)) keyword(then)
    ident(ShowMessage)operator(()string<delimiter(')content(Could not move key!)delimiter(')>operator(\))
  keyword(else)
    keyword(if) keyword(not) ident(CopyWanted) keyword(then)
      ident(DragNode)operator(.)ident(Delete)operator(;)


  ident(TrgReg)operator(.)ident(Free)operator(;)

  ident(MainReg)operator(.)ident(CloseKey)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TTreeWin)operator(.)ident(MoveValues)operator(()ident(SrcNode)operator(,) ident(TrgNode)operator(:) ident(TTreeNode)operator(;)
  ident(CopyWanted)operator(:) ident(Boolean)operator(\))operator(;)
keyword(var)
  ident(SrcReg)operator(,) ident(TrgReg)operator(:) ident(TXRegistry)operator(;)
  ident(i)operator(:) ident(Integer)operator(;)
  ident(ValueName)operator(:) keyword(string)operator(;)
  ident(AnswerToAll)operator(:) ident(Integer)operator(;)

  keyword(function) ident(AskForReplacing)operator(()keyword(const) ident(ValueName)operator(:) keyword(string)operator(\))operator(:) ident(Integer)operator(;)
  keyword(begin)
    keyword(if) ident(AnswerToAll) operator(=) operator(-)integer(1) keyword(then) keyword(begin)
      ident(Result) operator(:=) ident(MessageDlg)operator(()
        string<delimiter(')content(Value )delimiter(')> operator(+) ident(Quote)operator(()ident(ValueName)operator(\)) operator(+) string<delimiter(')content(already exists in target key.)delimiter(')> operator(+) ident(EOL) operator(+)
        string<delimiter(')content(Do you want to replace it?)delimiter(')>operator(,)
        ident(mtWarning)operator(,) operator([)ident(mbNo)operator(,) ident(mbYes)operator(,) ident(mbNoToAll)operator(,) ident(mbYesToAll)operator(,) ident(mbAbort)operator(])operator(,) integer(0)operator(\))operator(;)
      keyword(if) ident(Result) keyword(in) operator([)ident(mrNoToAll)operator(,) ident(mrYesToAll)operator(]) keyword(then) keyword(begin)
        keyword(if) ident(Result) operator(=) ident(mrYesToAll) keyword(then)
          ident(Result) operator(:=) ident(mrYes)
        keyword(else) keyword(if) ident(Result) operator(=) ident(mrNoToAll) keyword(then)
          ident(Result) operator(:=) ident(mrNo)operator(;)
        ident(AnswerToAll) operator(:=) ident(Result)operator(;)
      keyword(end)operator(;)
    keyword(end) keyword(else) ident(Result) operator(:=) ident(AnswerToAll)operator(;)
  keyword(end)operator(;)

keyword(begin)
  ident(AnswerToAll) operator(:=) operator(-)integer(1)operator(;)

  keyword(if) keyword(not) ident(CopyWanted) keyword(then)
    keyword(if) ident(mrYes)operator(<>)ident(MessageDlg)operator(()
     ident(Format)operator(()
      string<delimiter(')content(Do you really want to move %s)delimiter(')> operator(+) ident(EOL) operator(+)
      string<delimiter(')content(from: %s)delimiter(')> operator(+) ident(EOL) operator(+)
      string<delimiter(')content(to: %s)delimiter(')>operator(,)
      operator([)ident(StrNumerus)operator(()ident(ValueList)operator(.)ident(SelCount)operator(,) string<delimiter(')content(value)delimiter(')>operator(,) string<delimiter(')content(values)delimiter(')>operator(\))operator(,)
       ident(PathOfNode)operator(()ident(SrcNode)operator(\))operator(,) ident(PathOfNode)operator(()ident(TrgNode)operator(\))operator(])
     operator(\))operator(,) ident(mtConfirmation)operator(,) operator([)ident(mbYes)operator(,) ident(mbAbort)operator(])operator(,) integer(0)operator(\)) keyword(then)
      ident(Exit)operator(;)

  ident(SrcReg) operator(:=) ident(TXRegistry)operator(.)ident(Create)operator(;)
  keyword(try)
    keyword(if) keyword(not) operator(()ident(OpenNode)operator(()ident(SrcReg)operator(,) ident(SrcNode)operator(\)) keyword(in) ident(onOK)operator(\)) keyword(then)
      ident(MessageDlg)operator(()string<delimiter(')content(Couldn)char('')content(t open source key: )delimiter(')> operator(+) ident(PathOfNode)operator(()ident(SrcNode)operator(\))operator(,)
        ident(mtError)operator(,) operator([)ident(mbOK)operator(])operator(,) integer(0)operator(\))operator(;)

    ident(TrgReg) operator(:=) ident(TXRegistry)operator(.)ident(Create)operator(;)
    keyword(try)
      keyword(if) keyword(not) operator(()ident(OpenNode)operator(()ident(TrgReg)operator(,) ident(TrgNode)operator(\)) keyword(in) ident(onOK)operator(\)) keyword(then)
        ident(MessageDlg)operator(()string<delimiter(')content(Couldn)char('')content(t open target key: )delimiter(')> operator(+) ident(PathOfNode)operator(()ident(TrgNode)operator(\))operator(,)
          ident(mtError)operator(,) operator([)ident(mbOK)operator(])operator(,) integer(0)operator(\))operator(;)

      keyword(with) ident(ValueList)operator(.)ident(Items) keyword(do) keyword(begin)
        keyword(for) ident(i) operator(:=) integer(0) keyword(to) ident(Count)operator(-)integer(1) keyword(do) keyword(begin)
          keyword(if) keyword(not) ident(Item)operator([)ident(i)operator(])operator(.)ident(Selected) keyword(then)
            ident(Continue)operator(;)
          ident(ValueName) operator(:=) ident(RealValueName)operator(()ident(Item)operator([)ident(i)operator(])operator(\))operator(;)

          keyword(if) ident(TrgReg)operator(.)ident(ValueExists)operator(()ident(ValueName)operator(\)) keyword(then) keyword(begin)
            keyword(case) ident(AskForReplacing)operator(()ident(ValueName)operator(\)) keyword(of)
              ident(mrYes)operator(:) operator(;)
              ident(mrNo)operator(:) ident(Continue)operator(;)
              ident(mrAbort)operator(:) ident(Break)operator(;)
            keyword(end)operator(;)
          keyword(end)operator(;)

          ident(TrgReg)operator(.)ident(WriteContext)operator(()ident(ValueName)operator(,) ident(SrcReg)operator(.)ident(ReadContext)operator(()ident(ValueName)operator(\))operator(\))operator(;)
          keyword(if) keyword(not) ident(CopyWanted) keyword(then)
            ident(SrcReg)operator(.)ident(DeleteValue)operator(()ident(ValueName)operator(\))operator(;)
        keyword(end)operator(;)
      keyword(end)operator(;)

    keyword(finally)
      ident(TrgReg)operator(.)ident(Free)operator(;)
    keyword(end)operator(;)

  keyword(finally)
    ident(SrcReg)operator(.)ident(Free)operator(;)
  keyword(end)operator(;)

  keyword(if) keyword(not) ident(CopyWanted) keyword(then)
    ident(ValuesWin)operator(.)ident(Reload)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TTreeWin)operator(.)ident(NewSubKeyMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(CreateKey)operator(()ident(True)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TTreeWin)operator(.)ident(NewKeyMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(CreateKey)operator(()ident(False)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TTreeWin)operator(.)ident(CreateShortcutMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(NewShortcut)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TTreeWin)operator(.)ident(TraceMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  keyword(if) ident(NodeInfo)operator(()ident(RegTV)operator(.)ident(Selected)operator(\))operator(.)ident(IsShortcut) keyword(then)
    ident(MainWin)operator(.)ident(GotoKey)operator(()ident(TraceKey)operator(()ident(PathOfNode)operator(()ident(RegTV)operator(.)ident(Selected)operator(\))operator(\))operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TTreeWin)operator(.)ident(DeleteMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  keyword(if) keyword(not) ident(RegTV)operator(.)ident(IsEditing) keyword(then)
    ident(DeleteKey)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TTreeWin)operator(.)ident(DublicateMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(CloneKey)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TTreeWin)operator(.)ident(FindMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(FindWin)operator(.)ident(SfCurKeyRB)operator(.)ident(Checked) operator(:=) ident(True)operator(;)
  ident(FindWin)operator(.)ident(Show)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TTreeWin)operator(.)ident(RegTVPUPopup)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(RegTVChange)operator(()ident(Sender)operator(,) ident(RegTV)operator(.)ident(Selected)operator(\))operator(;)
  keyword(with) ident(NodeInfo)operator(()ident(RegTV)operator(.)ident(Selected)operator(\)) keyword(do) keyword(begin)
    ident(NewSubKeyMI)operator(.)ident(Enabled) operator(:=) keyword(not) ident(CantWrite)operator(;)
    ident(NewKeyMI)operator(.)ident(Enabled) operator(:=) keyword(not) ident(CantWrite) keyword(and) operator(()keyword(not) ident(IsHost) keyword(or) ident(IsShortcut)operator(\))operator(;)
    ident(DublicateMI)operator(.)ident(Enabled) operator(:=) keyword(not) ident(CantWrite) keyword(and) keyword(not) ident(IsHost)operator(;)

    keyword(with) ident(DeleteMI) keyword(do)
      keyword(if) ident(HostType) operator(=) ident(uhUserShortcut) keyword(then) keyword(begin)
        ident(Caption) operator(:=) string<delimiter(')content(&Delete Shortcut)delimiter(')>operator(;)
        ident(Enabled) operator(:=) ident(True)operator(;)
      keyword(end) keyword(else) keyword(begin)
        ident(Caption) operator(:=) string<delimiter(')content(&Delete)delimiter(')>operator(;)
        ident(Enabled) operator(:=) keyword(not) ident(CantWrite) keyword(and) keyword(not) ident(IsHost)operator(;)
      keyword(end)operator(;)

    ident(RenameMI)operator(.)ident(Enabled) operator(:=) keyword(not) ident(CantWrite) keyword(and) operator(()ident(HostType) keyword(in) operator([)ident(uhNone)operator(,) ident(uhUserShortcut)operator(])operator(\))operator(;)
    ident(TraceMI)operator(.)ident(Visible) operator(:=) ident(IsShortcut)operator(;)
    ident(EditShortcutMI)operator(.)ident(Visible) operator(:=) ident(HostType) operator(=) ident(uhUserShortcut)operator(;)
  keyword(end)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(CheckNode)operator(()ident(Node)operator(:) ident(TTreeNode)operator(;) ident(OnlyOnce)operator(:) ident(Boolean) operator(=) ident(True)operator(;)
  ident(TakeNodeSelected)operator(:) ident(Boolean) operator(=) ident(False)operator(\))operator(;)
keyword(var)
  ident(CurIcon)operator(,) ident(NewIcon)operator(:) ident(Integer)operator(;)
  ident(Reg)operator(:) ident(TXRegistry)operator(;)
  ident(OpenMode)operator(:) ident(TOpenNodeMode)operator(;)
  ident(Info)operator(:) ident(TNodeInfo)operator(;)
preprocessor({$IFDEF UNIKEY})
  ident(Uni)operator(:) ident(TUniKey)operator(;)
preprocessor({$ENDIF})
  ident(KeyHasChildren)operator(:) ident(Boolean)operator(;)

  keyword(procedure) ident(SetShortcutIcon)operator(()ident(Node)operator(:) ident(TTreeNode)operator(\))operator(;)
  keyword(var)
    ident(Full)operator(:) keyword(string)operator(;)
    ident(i)operator(:) ident(Integer)operator(;)
  keyword(begin)
    ident(Full) operator(:=) ident(TraceKey)operator(()ident(PathOfNode)operator(()ident(Node)operator(\))operator(\))operator(;)
    keyword(for) ident(i) operator(:=) ident(Low)operator(()ident(Shortcuts)operator(\)) keyword(to) ident(High)operator(()ident(Shortcuts)operator(\)) keyword(do)
      keyword(if) ident(Full) operator(=) ident(Shortcuts)operator([)ident(i)operator(])operator(.)ident(RealPath) keyword(then) keyword(begin)
        ident(CurIcon) operator(:=) ident(Shortcuts)operator([)ident(i)operator(])operator(.)ident(Node)operator(.)ident(ImageIndex)operator(;)
      ident(Exit)operator(;) keyword(end)operator(;)
    keyword(if) ident(Node)operator(.)ident(ImageIndex) keyword(in) operator([)ident(iconShortcut)operator(,) ident(iconShortcut) operator(+) integer(1)operator(]) keyword(then)
      ident(CurIcon) operator(:=) ident(iconKey) operator(+) operator(()ident(CurIcon) operator(-) ident(iconShortcut)operator(\))operator(;)
  keyword(end)operator(;)

keyword(begin)
  keyword(if) keyword(not) ident(Assigned)operator(()ident(Node)operator(\)) keyword(then)
    ident(Exit)operator(;)

  ident(Info) operator(:=) ident(NodeInfo)operator(()ident(Node)operator(\))operator(;)
  keyword(if) ident(OnlyOnce) keyword(and) ident(Info)operator(.)ident(Checked) keyword(then)
    ident(Exit)operator(;)

  ident(CurIcon) operator(:=) ident(Node)operator(.)ident(ImageIndex)operator(;)
  keyword(if) operator(()ident(CurIcon) operator(>) ident(iconFirstType)operator(\)) keyword(then) keyword(begin)
preprocessor({$IFDEF UNIKEY})
    keyword(if) ident(RootOfNode)operator(()ident(Node)operator(\))operator(.)ident(ImageIndex) operator(<>) ident(iconHostUni) keyword(then) keyword(begin)
      ident(SetShortcutIcon)operator(()ident(Node)operator(\))operator(;)
      ident(CurIcon) operator(:=) operator(()ident(CurIcon) keyword(div) integer(2)operator(\)) operator(*) integer(2)operator(;)
    keyword(end)operator(;)
preprocessor({$ELSE})
    ident(Exit)operator(;)
preprocessor({$ENDIF})
  keyword(end) keyword(else) keyword(begin)
    ident(SetShortcutIcon)operator(()ident(Node)operator(\))operator(;)
    ident(CurIcon) operator(:=) operator(()ident(CurIcon) keyword(div) integer(2)operator(\)) operator(*) integer(2)operator(;)
  keyword(end)operator(;)
  ident(NewIcon) operator(:=) ident(CurIcon)operator(;)

  ident(Info)operator(.)ident(ExcludeFlag)operator(()ident(nfDefect)operator(\))operator(;)
  ident(Info)operator(.)ident(ExcludeFlag)operator(()ident(nfReadOnly)operator(\))operator(;)

preprocessor({$IFDEF UNIKEY})
  ident(KeyHasChildren) operator(:=) ident(False)operator(;)

  keyword(if) ident(RootOfNode)operator(()ident(Node)operator(\))operator(.)ident(ImageIndex) operator(=) ident(iconHostUni) keyword(then) keyword(begin)
    ident(Uni) operator(:=) ident(UniOfNode)operator(()ident(Node)operator(\))operator(;)
    keyword(if) ident(Assigned)operator(()ident(Uni)operator(\)) keyword(then)
      keyword(try)
        ident(KeyHasChildren) operator(:=) ident(Uni)operator(.)ident(HasKeys)operator(;)
        keyword(if) ident(usReadOnly) operator(>=) ident(Uni)operator(.)ident(Skills) keyword(then)
          ident(OpenMode) operator(:=) ident(onReadOnly)
        keyword(else)
          ident(OpenMode) operator(:=) ident(onFull)operator(;)
      keyword(finally)
        ident(Uni)operator(.)ident(Free)operator(;)
      keyword(end)
    keyword(else)
      ident(OpenMode) operator(:=) ident(onError)operator(;)
  keyword(end) keyword(else) keyword(begin)
preprocessor({$ENDIF})
  ident(Reg) operator(:=) ident(TXRegistry)operator(.)ident(Create)operator(;)
  keyword(try)
    ident(OpenMode) operator(:=) ident(OpenNode)operator(()ident(Reg)operator(,) ident(Node)operator(\))operator(;)
    ident(KeyHasChildren) operator(:=) ident(Reg)operator(.)ident(HasSubKeys)operator(;)
  keyword(finally)
    ident(Reg)operator(.)ident(Free)operator(;)
  keyword(end)operator(;)
preprocessor({$IFDEF UNIKEY})
  keyword(end)operator(;)
preprocessor({$ENDIF})

  keyword(if) ident(OpenMode) operator(=) ident(onReadOnly) keyword(then)
    ident(Info)operator(.)ident(IncludeFlag)operator(()ident(nfReadOnly)operator(\))operator(;)

  keyword(if) ident(OpenMode) keyword(in) ident(onOK) keyword(then) keyword(begin)
    comment(//OK, could open)
    keyword(if) keyword(not) ident(Node)operator(.)ident(Expanded) keyword(then) keyword(begin)  comment(//Collapsed)
      keyword(if) ident(KeyHasChildren) keyword(then) keyword(begin)  comment(//HasSubKeys)
        keyword(if) keyword(not) ident(Node)operator(.)ident(HasChildren) keyword(then) keyword(begin)
          comment(//Update: Ensure HasChildren)
          keyword(if) ident(TakeNodeSelected) keyword(or) ident(Node)operator(.)ident(Selected) keyword(then)
            ident(TreeWin)operator(.)ident(RegTV)operator(.)ident(Items)operator(.)ident(AddChild)operator(()ident(Node)operator(,) string<delimiter(')delimiter(')>operator(\))operator(;)
        keyword(end)operator(;)
        comment(//Ensure Plus-Icon)
        ident(NewIcon) operator(:=) ident(CurIcon) operator(+) integer(1)operator(;)
      keyword(end) keyword(else) keyword(begin)
        comment(//Has still Children?)
        keyword(if) ident(Node)operator(.)ident(HasChildren) keyword(then)
          ident(Node)operator(.)ident(DeleteChildren)operator(;)
      keyword(end)operator(;)

    keyword(end) keyword(else) keyword(begin)             comment(//Expanded)
      comment(//HasSubKeys?)
      keyword(if) ident(KeyHasChildren) keyword(then) keyword(begin)
        comment(//OK)
        ident(NewIcon) operator(:=) ident(CurIcon) operator(+) integer(1)operator(;)
      keyword(end) keyword(else) keyword(begin)
        comment(//not OK --> update)
        ident(Node)operator(.)ident(Collapse)operator(()ident(True)operator(\))operator(;)
        ident(Node)operator(.)ident(DeleteChildren)operator(;)
      keyword(end)operator(;)
    keyword(end)operator(;)

  comment(//not OK, couldn't open)
  keyword(end) keyword(else) keyword(begin) comment(//defect)
    keyword(if) ident(Node)operator(.)ident(HasChildren) keyword(then)
      ident(Node)operator(.)ident(DeleteChildren)operator(;)
    ident(Info)operator(.)ident(IncludeFlag)operator(()ident(nfDefect)operator(\))operator(;)
  keyword(end)operator(;)

  keyword(if) ident(Node)operator(.)ident(ImageIndex) operator(<>) ident(iconHostUni) keyword(then) comment(//don't change icon of UniHosts)
    ident(Node)operator(.)ident(ImageIndex) operator(:=) ident(NewIcon)operator(;)

  ident(Info)operator(.)ident(IncludeFlag)operator(()ident(nfChecked)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TTreeWin)operator(.)ident(FormKeyDown)operator(()ident(Sender)operator(:) ident(TObject)operator(;) keyword(var) ident(Key)operator(:) ident(Word)operator(;)
  ident(Shift)operator(:) ident(TShiftState)operator(\))operator(;)
keyword(begin)
  ident(MainWin)operator(.)ident(FormKeyDown)operator(()ident(Sender)operator(,) ident(Key)operator(,) ident(Shift)operator(\))operator(;)
keyword(end)operator(;)

keyword(function) ident(ShortcutIndex)operator(()ident(Node)operator(:) ident(TTreeNode)operator(\))operator(:) ident(Integer)operator(;)
comment(//If Node is a Shortcut,)
comment(//S. returns its index in the Shortcuts array)
comment(//else -1)
keyword(begin)
  keyword(if) ident(Node)operator(.)ident(Level) operator(>) integer(0) keyword(then) keyword(begin)
    ident(Result) operator(:=) operator(-)integer(1)operator(;)
  ident(Exit)operator(;) keyword(end)operator(;)

  keyword(for) ident(Result) operator(:=) integer(0) keyword(to) ident(High)operator(()ident(Shortcuts)operator(\)) keyword(do)
    keyword(if) ident(Shortcuts)operator([)ident(Result)operator(])operator(.)ident(Node) operator(=) ident(Node) keyword(then) keyword(begin)
      ident(Exit)operator(;)
    keyword(end)operator(;)

  ident(Result) operator(:=) operator(-)integer(1)operator(;)
keyword(end)operator(;)

keyword(function) ident(TraceKey)operator(()keyword(const) ident(Path)operator(:) keyword(string)operator(;) ident(AllowedShortcutTypes)operator(:) ident(TUniHostTypes) operator(=)
  ident(uhNonSystemShortcuts)operator(\))operator(:) keyword(string)operator(;)
keyword(var)
  ident(i)operator(:) ident(Integer)operator(;)
  ident(isAim)operator(:) ident(Boolean)operator(;)

  keyword(function) ident(NodeOkForTracing)operator(()ident(Node)operator(:) ident(TTreeNode)operator(\))operator(:) ident(Boolean)operator(;)
  keyword(begin)
    ident(Result) operator(:=) ident(Assigned)operator(()ident(Node)operator(\)) keyword(and)
      operator(()ident(NodeInfo)operator(()ident(Node)operator(\))operator(.)ident(HostType) keyword(in) ident(AllowedShortcutTypes)operator(\))operator(;)
  keyword(end)operator(;)

keyword(begin)
  ident(Result) operator(:=) ident(MakeLongHKEY)operator(()ident(Path)operator(\))operator(;)
  keyword(repeat)
    ident(isAim) operator(:=) ident(True)operator(;)
    keyword(for) ident(i) operator(:=) integer(0) keyword(to) ident(High)operator(()ident(ShortCuts)operator(\)) keyword(do) keyword(begin)
      keyword(with) ident(Shortcuts)operator([)ident(i)operator(]) keyword(do)
        keyword(if) ident(NodeOkForTracing)operator(()ident(Node)operator(\)) keyword(and)
         ident(SameText)operator(()ident(UntilChar)operator(()ident(Result)operator(,) char<delimiter(')content(\\)delimiter(')>operator(\))operator(,) ident(Alias)operator(\)) keyword(then) keyword(begin)
          keyword(if) ident(Alias) operator(=) ident(RealPath) keyword(then)
            ident(Break)operator(;)
          ident(Delete)operator(()ident(Result)operator(,) integer(1)operator(,) ident(Length)operator(()ident(Alias)operator(\))operator(\))operator(;)
          ident(Result) operator(:=) ident(RealPath) operator(+) ident(Result)operator(;)
          ident(isAim) operator(:=) ident(False)operator(;)
        ident(Break)operator(;) keyword(end)operator(;)
    keyword(end)operator(;)
  keyword(until) ident(isAim)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TTreeWin)operator(.)ident(RegTVKeyPress)operator(()ident(Sender)operator(:) ident(TObject)operator(;) keyword(var) ident(Key)operator(:) ident(Char)operator(\))operator(;)
keyword(begin)
  keyword(if) operator(()ident(Key) operator(=) char<delimiter(')content(*)delimiter(')>operator(\)) keyword(and) ident(NoAsterisk) keyword(then) keyword(begin)
    ident(Key) operator(:=) char(#0)operator(;)
    ident(NoAsterisk) operator(:=) ident(False)operator(;)
  keyword(end)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TTreeWin)operator(.)ident(RegTVAdvancedCustomDrawItem)operator(()ident(Sender)operator(:) ident(TCustomTreeView)operator(;)
  ident(Node)operator(:) ident(TTreeNode)operator(;) ident(State)operator(:) ident(TCustomDrawState)operator(;) ident(Stage)operator(:) ident(TCustomDrawStage)operator(;)
  keyword(var) ident(PaintImages)operator(,) ident(DefaultDraw)operator(:) ident(Boolean)operator(\))operator(;)
keyword(var)
  ident(Rect)operator(:) ident(TRect)operator(;)
  ident(MainValueName)operator(:) keyword(string)operator(;)
  ident(Reg)operator(:) ident(TXRegistry)operator(;)
  ident(Info)operator(:) ident(TRegKeyInfo)operator(;)
  ident(PreviewPosX)operator(:) ident(Integer)operator(;)

  keyword(procedure) ident(DefaultIconPreview)operator(()ident(Reg)operator(:) ident(TXRegistry)operator(\))operator(;)
  keyword(var)
    ident(Icon)operator(:) ident(HICON)operator(;)
    ident(IconFile)operator(:) keyword(string)operator(;)
  keyword(begin)
    keyword(if) operator(()ident(Node)operator(.)ident(Level) operator(=) integer(0)operator(\)) keyword(and) keyword(not) ident(RegTV)operator(.)ident(ShowLines) keyword(then)
      ident(Exit)operator(;)

    ident(IconFile) operator(:=) ident(Reg)operator(.)ident(ReadDefaultIcon)operator(;)
    keyword(if) ident(IconFile) operator(=) string<delimiter(')delimiter(')> keyword(then)
      ident(Exit)operator(;)

    ident(Icon) operator(:=) ident(GetIconFromFile)operator(()ident(ExpandString)operator(()ident(IconFile)operator(\))operator(\))operator(;)
    keyword(if) ident(Icon) operator(=) integer(0) keyword(then)
      ident(Exit)operator(;)

    keyword(with) ident(Rect) keyword(do) keyword(begin)
      ident(Dec)operator(()ident(Left)operator(,) ident(TTreeView)operator(()ident(Sender)operator(\))operator(.)ident(Indent) operator(+) integer(16)operator(\))operator(;)
      ident(DrawIconEx)operator(()ident(Sender)operator(.)ident(Canvas)operator(.)ident(Handle)operator(,) ident(Left)operator(,) ident(Top)operator(,)
                 ident(Icon)operator(,) integer(16)operator(,) integer(16)operator(,)
                 integer(0)operator(,) integer(0)operator(,) ident(DI_NORMAL)operator(\))operator(;)
      ident(DestroyIcon)operator(()ident(Icon)operator(\))operator(;)
    keyword(end)operator(;)
  keyword(end)operator(;)

  keyword(procedure) ident(AddPreview)operator(()keyword(const) ident(PreviewText)operator(:) keyword(string)operator(;) ident(Color)operator(:) ident(TColor)operator(\))operator(;)
  keyword(begin)
    keyword(with) ident(Sender)operator(.)ident(Canvas) keyword(do) keyword(begin)
      ident(SetTextColor)operator(()ident(Handle)operator(,) ident(Color)operator(\))operator(;)
      ident(ExtTextOut)operator(()ident(Handle)operator(,) ident(PreviewPosX)operator(,) ident(Rect)operator(.)ident(Top) operator(+) integer(1)operator(,) ident(TextFlags)operator(,) keyword(nil)operator(,)
        ident(PChar)operator(()ident(PreviewText)operator(\))operator(,) ident(Length)operator(()ident(PreviewText)operator(\))operator(,) keyword(nil)operator(\))operator(;)
      ident(Inc)operator(()ident(PreviewPosX)operator(,) ident(TextWidth)operator(()ident(PreviewText)operator(\))operator(\))operator(;)
    keyword(end)operator(;)
  keyword(end)operator(;)

keyword(begin)
  keyword(if) ident(Stage) operator(<>) ident(cdPostPaint) keyword(then)
    ident(Exit)operator(;)

  ident(MainValueName) operator(:=) ident(PrefWin)operator(.)ident(MainPreviewE)operator(.)ident(Text)operator(;)

  ident(Rect) operator(:=) ident(Node)operator(.)ident(DisplayRect)operator(()ident(True)operator(\))operator(;)
  ident(PreviewPosX) operator(:=) ident(Rect)operator(.)ident(Right) operator(+) integer(5)operator(;)

  ident(Reg) operator(:=) ident(TXRegistry)operator(.)ident(Create)operator(()ident(KEY_READ)operator(\))operator(;)
  keyword(try)
    keyword(if) ident(OpenNodeOK)operator(()ident(Reg)operator(,) ident(Node)operator(\)) keyword(then) keyword(begin)
comment(//      Sender.Canvas.Font.Style := [];)
      keyword(if) ident(PrefWin)operator(.)ident(KeyInfoPreviewCB)operator(.)ident(Checked) keyword(and) ident(Reg)operator(.)ident(GetKeyInfo)operator(()ident(Info)operator(\)) keyword(then)
        keyword(with) ident(Info) keyword(do) keyword(begin)
          keyword(if) ident(NumSubKeys) operator(>) integer(0) keyword(then)
            ident(AddPreview)operator(()ident(IntToStr)operator(()ident(NumSubKeys)operator(\)) operator(+) string<delimiter(')content(k  )delimiter(')>operator(,) ident(clCyan)operator(\))operator(;)
          keyword(if) ident(NumValues) operator(>) integer(0) keyword(then)
            ident(AddPreview)operator(()ident(IntToStr)operator(()ident(NumValues)operator(\)) operator(+) string<delimiter(')content(v  )delimiter(')>operator(,) ident(clBrightPurple)operator(\))operator(;)
        keyword(end)operator(;)

      keyword(if) ident(PrefWin)operator(.)ident(MainPreviewCB)operator(.)ident(Checked) keyword(then)
        keyword(if) ident(Reg)operator(.)ident(ValueReallyExists)operator(()ident(MainValueName)operator(\)) keyword(then)
          ident(AddPreview)operator(()ident(DataPreviewOfContext)operator(()ident(Reg)operator(.)ident(ReadContext)operator(()ident(MainValueName)operator(\))operator(\))operator(,) hex($00AAFFFF)operator(\))operator(;)
                                                         comment({clBrightYellow})
      keyword(if) ident(PrefWin)operator(.)ident(DefaultIconPreviewCB)operator(.)ident(Checked) keyword(then)
        ident(DefaultIconPreview)operator(()ident(Reg)operator(\))operator(;)
    keyword(end)operator(;)
  keyword(finally)
    ident(Reg)operator(.)ident(Free)operator(;)
  keyword(end)operator(;)

  comment({if nfCopy in NodeInfo(Node\).Flags then begin
    //Node.StateIndex := 2;
    Brush.Style := bsClear;
    with Font do begin
      Style := [fsItalic, fsBold];
      Color := clRed;
    end;
    //TextOut(Rect.Left - 10, Rect.Top + 3, 'c'\);
  end;})
keyword(end)operator(;)

keyword(procedure) ident(TTreeWin)operator(.)ident(RenameMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(RegTV)operator(.)ident(Selected)operator(.)ident(EditText)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TTreeWin)operator(.)ident(CopyPathMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(UserCopyKeyFlag) operator(:=) ident(True)operator(;)
  ident(MainWin)operator(.)ident(CopyPathClick)operator(()ident(Sender)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TTreeWin)operator(.)ident(InsertPathMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(MainWin)operator(.)ident(InsertPathClick)operator(()ident(Sender)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TTreeWin)operator(.)ident(RegTVGetImageIndex)operator(()ident(Sender)operator(:) ident(TObject)operator(;) ident(Node)operator(:) ident(TTreeNode)operator(\))operator(;)
keyword(begin)
  keyword(if) keyword(not) ident(NodeInfo)operator(()ident(Node)operator(\))operator(.)ident(Checked) keyword(then)
    ident(CheckNode)operator(()ident(Node)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TTreeWin)operator(.)ident(CheckRegTVHotTrack)operator(;)
keyword(const)
  ident(FindCursorOfSwitch)operator(:) keyword(array)operator([)ident(Boolean)operator(]) keyword(of) ident(TCursor) operator(=) operator(()ident(crArrow)operator(,) ident(crHandPoint)operator(\))operator(;)
keyword(var)
  ident(NewHotTrack)operator(:) ident(Boolean)operator(;)
keyword(begin)
  ident(NewHotTrack) operator(:=) ident(ScrollON) keyword(xor) ident(PrefWin)operator(.)ident(KeysSingleClickCB)operator(.)ident(Checked)operator(;)
  keyword(if) ident(NewHotTrack) operator(=) ident(RegTV)operator(.)ident(HotTrack) keyword(then) ident(Exit)operator(;)

  keyword(with) ident(RegTV) keyword(do) keyword(begin)
    ident(HotTrack) operator(:=) ident(NewHotTrack)operator(;)
    ident(Cursor) operator(:=) ident(FindCursorOfSwitch)operator([)ident(HotTrack)operator(])operator(;)
    ident(Mouse)operator(.)ident(CursorPos) operator(:=) ident(Mouse)operator(.)ident(CursorPos)operator(;) comment(//update cursor)
  keyword(end)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TTreeWin)operator(.)ident(PasteKeyMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(var)
  ident(Src)operator(,) ident(Trg)operator(:) ident(TRegPath)operator(;)
  ident(Node)operator(:) ident(TTreeNode)operator(;)
keyword(begin)
  ident(Src) operator(:=) ident(RegPathOfStr)operator(()ident(Clipboard)operator(.)ident(AsText)operator(\))operator(;)
  ident(Trg) operator(:=) ident(CurKey)operator(()ident(uhNonSystemShortcuts)operator(\))operator(;)
  ident(Trg)operator(.)ident(Key) operator(:=) ident(Trg)operator(.)ident(Key) operator(+) char<delimiter(')content(\\)delimiter(')> operator(+) ident(FromLastChar)operator(()ident(Src)operator(.)ident(Key)operator(,) char<delimiter(')content(\\)delimiter(')>operator(,) ident(True)operator(\))operator(;)

  ident(MoveKey)operator(()ident(Src)operator(,) ident(Trg)operator(,) ident(UserCopyKeyFlag)operator(\))operator(;)

  ident(Node) operator(:=) ident(RegTV)operator(.)ident(Selected)operator(;)
  keyword(if) ident(Node)operator(.)ident(Expanded) keyword(then)
    ident(Node)operator(.)ident(Collapse)operator(()ident(False)operator(\))operator(;)
  ident(Node)operator(.)ident(Expanded) operator(:=) ident(False)operator(;)
  ident(CheckNode)operator(()ident(Node)operator(,) ident(False)operator(\))operator(;)
  ident(Node)operator(.)ident(Expand)operator(()ident(False)operator(\))operator(;)

  keyword(if) keyword(not) ident(UserCopyKeyFlag) keyword(then)
    ident(RegTV)operator(.)ident(Repaint)operator(;) comment(// CheckNode(Node, False\);)

  ident(UserCopyKeyFlag) operator(:=) ident(True)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TTreeWin)operator(.)ident(CutPathMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(UserCopyKeyFlag) operator(:=) ident(False)operator(;)
  ident(MainWin)operator(.)ident(CopyPathClick)operator(()ident(Sender)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TTreeWin)operator(.)ident(OpenNextLevel)operator(()ident(Node)operator(:) ident(TTreeNode)operator(\))operator(;)

  keyword(procedure) ident(ExpandKeys)operator(()ident(Node)operator(:) ident(TTreeNode)operator(\))operator(;)
  keyword(begin)
    ident(CheckNode)operator(()ident(Node)operator(,) ident(False)operator(,) ident(True)operator(\))operator(;)
    keyword(if) keyword(not) ident(Node)operator(.)ident(HasChildren) keyword(then)
      ident(Exit)operator(;)
    keyword(if) keyword(not) ident(Node)operator(.)ident(Expanded) keyword(then)
      ident(Node)operator(.)ident(Expand)operator(()ident(False)operator(\))
    keyword(else) keyword(begin)
      ident(Node) operator(:=) ident(Node)operator(.)ident(GetFirstChild)operator(;)
      keyword(while) ident(Assigned)operator(()ident(Node)operator(\)) keyword(do) keyword(begin)
        ident(ExpandKeys)operator(()ident(Node)operator(\))operator(;)
      ident(Node) operator(:=) ident(Node)operator(.)ident(GetNextSibling)operator(;) keyword(end)operator(;)
    keyword(end)operator(;)
  keyword(end)operator(;)

keyword(begin)
  ident(DoSmartExpand) operator(:=) ident(False)operator(;)
  ident(ExpandKeys)operator(()ident(Node)operator(\))operator(;)
  ident(DoSmartExpand) operator(:=) ident(True)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TTreeWin)operator(.)ident(EditShortcutMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(var)
  ident(NewPath)operator(:) keyword(string)operator(;)
  ident(i)operator(:) ident(Integer)operator(;)
  ident(Node)operator(:) ident(TTreeNode)operator(;)
  ident(Shortcut)operator(:) ident(PKeyShortcut)operator(;)
keyword(begin)
  ident(Node) operator(:=) ident(RegTV)operator(.)ident(Selected)operator(;)
  keyword(if) ident(NodeInfo)operator(()ident(Node)operator(\))operator(.)ident(HostType) operator(<>) ident(uhUserShortcut) keyword(then)
    ident(Exit)operator(;)

  ident(i) operator(:=) ident(ShortcutIndex)operator(()ident(Node)operator(\))operator(;)
  keyword(if) ident(i) operator(=) operator(-)integer(1) keyword(then)
    ident(Exit)operator(;)

  keyword(with) ident(TIniFile)operator(.)ident(Create)operator(()ident(PlutoDir) operator(+) string<delimiter(')content(Shortcuts.ini)delimiter(')>operator(\)) keyword(do)
    keyword(try)
      ident(NewPath) operator(:=) ident(ReadString)operator(()string<delimiter(')content(Shortcuts)delimiter(')>operator(,) ident(Shortcuts)operator([)ident(i)operator(])operator(.)ident(Alias)operator(,) string<delimiter(')delimiter(')>operator(\))operator(;)
    keyword(finally)
      ident(Free)operator(;)
    keyword(end)operator(;)

  keyword(if) keyword(not) ident(InputQuery)operator(()string<delimiter(')content(Edit Shortcut)delimiter(')>operator(,) string<delimiter(')content(Shortcut to...)delimiter(')>operator(,) ident(NewPath)operator(\)) keyword(then)
    ident(Exit)operator(;)

  ident(Node)operator(.)ident(Collapse)operator(()ident(False)operator(\))operator(;)
  ident(Shortcut) operator(:=) operator(@)ident(Shortcuts)operator([)ident(i)operator(])operator(;)
  ident(Shortcut)operator(.)ident(RealPath) operator(:=) ident(TraceKey)operator(()ident(NewPath)operator(\))operator(;)
  keyword(with) ident(TIniFile)operator(.)ident(Create)operator(()ident(PlutoDir) operator(+) string<delimiter(')content(Shortcuts.ini)delimiter(')>operator(\)) keyword(do)
    keyword(try)
      ident(WriteString)operator(()string<delimiter(')content(Shortcuts)delimiter(')>operator(,) ident(Shortcut)operator(.)ident(Alias)operator(,) ident(Shortcut)operator(.)ident(RealPath)operator(\))operator(;)
    keyword(finally)
      ident(Free)operator(;)
    keyword(end)operator(;)

  ident(RegTVChange)operator(()ident(Self)operator(,) ident(Node)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TTreeWin)operator(.)ident(SubKeylist1Click)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(var)
  ident(SL)operator(:) ident(TStringList)operator(;)
keyword(begin)
  ident(SL) operator(:=) ident(TStringList)operator(.)ident(Create)operator(;)
  keyword(if) ident(OpenCurKey) keyword(then)
  keyword(try)
    ident(MainReg)operator(.)ident(GetKeyNames)operator(()ident(SL)operator(\))operator(;)
    keyword(if) ident(PrefWin)operator(.)ident(SortKeysCB)operator(.)ident(Checked) keyword(then)
      ident(SL)operator(.)ident(Sort)operator(;)
    ident(Clipboard)operator(.)ident(AsText) operator(:=) ident(SL)operator(.)ident(Text)operator(;)
  keyword(finally)
    ident(MainReg)operator(.)ident(CloseKey)operator(;)
    ident(SL)operator(.)ident(Free)operator(;)
  keyword(end)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TTreeWin)operator(.)ident(ValueNameslist1Click)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(var)
  ident(SL)operator(:) ident(TStringList)operator(;)
keyword(begin)
  ident(SL) operator(:=) ident(TStringList)operator(.)ident(Create)operator(;)
  keyword(if) ident(OpenCurKey) keyword(then)
  keyword(try)
    ident(MainReg)operator(.)ident(GetValueNames)operator(()ident(SL)operator(\))operator(;)
      keyword(if) ident(PrefWin)operator(.)ident(SortKeysCB)operator(.)ident(Checked) keyword(then)
        ident(SL)operator(.)ident(Sort)operator(;)
      ident(Clipboard)operator(.)ident(AsText) operator(:=) ident(SL)operator(.)ident(Text)operator(;)
  keyword(finally)
    ident(MainReg)operator(.)ident(CloseKey)operator(;)
    ident(SL)operator(.)ident(Free)operator(;)
  keyword(end)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TTreeWin)operator(.)ident(KeyInfosMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(MessageDlg)operator(()ident(GetKeyInfos)operator(,) ident(mtInformation)operator(,) operator([)ident(mbOK)operator(])operator(,) integer(0)operator(\))operator(;)
keyword(end)operator(;)

keyword(function) ident(TTreeWin)operator(.)ident(GetKeyInfos)operator(:) keyword(string)operator(;)
keyword(const)
  ident(sErrorMsg) operator(=) string<delimiter(')content(Error! No: %d Msg: %s)delimiter(')>operator(;)

keyword(var)
  ident(Node)operator(:) ident(TTreeNode)operator(;)
  ident(Reg)operator(:) ident(TXRegistry)operator(;)
  ident(Mode)operator(:) ident(TOpenNodeMode)operator(;)
  ident(Error)operator(:) ident(Integer)operator(;)
  ident(Info)operator(:) ident(TNodeInfo)operator(;)
  ident(Flag)operator(:) ident(TNodeFlag)operator(;)

  keyword(procedure) ident(Add)operator(()keyword(const) ident(S)operator(:) keyword(string)operator(\))operator(;)
  keyword(begin)
    ident(Result) operator(:=) ident(Result) operator(+) ident(S)operator(;)
  keyword(end)operator(;)

  keyword(procedure) ident(AddLn)operator(()keyword(const) ident(S)operator(:) keyword(string) operator(=) string<delimiter(')delimiter(')>operator(\))operator(;)
  keyword(begin)
    ident(Add)operator(()ident(S) operator(+) ident(EOL)operator(\))operator(;)
  keyword(end)operator(;)

  keyword(procedure) ident(AddNodeInfo)operator(()ident(Key)operator(:) ident(HKEY)operator(\))operator(;)
  keyword(var)
    ident(KeyInfo)operator(:) ident(TRegKeyInfo)operator(;)
    ident(Res)operator(:) ident(Integer)operator(;)
    ident(KeyAge)operator(:) ident(TDateTime)operator(;)
  keyword(begin)
    ident(FillChar)operator(()ident(KeyInfo)operator(,) ident(SizeOf)operator(()ident(TRegKeyInfo)operator(\))operator(,) integer(0)operator(\))operator(;)
    keyword(with) ident(KeyInfo) keyword(do) keyword(begin)
      ident(Res) operator(:=) ident(RegQueryInfoKey)operator(()ident(Reg)operator(.)ident(CurrentKey)operator(,) keyword(nil)operator(,) keyword(nil)operator(,) keyword(nil)operator(,) operator(@)ident(NumSubKeys)operator(,)
        operator(@)ident(MaxSubKeyLen)operator(,) keyword(nil)operator(,) operator(@)ident(NumValues)operator(,) operator(@)ident(MaxValueLen)operator(,)
        operator(@)ident(MaxDataLen)operator(,) keyword(nil)operator(,) operator(@)ident(LastWriteTime)operator(\))operator(;)

      keyword(if) ident(Res) operator(=) ident(ERROR_SUCCESS) keyword(then) keyword(begin)
        ident(Add)operator(()ident(Format)operator(()
          string<delimiter(')content(Subkeys: %0:d)delimiter(')> operator(+) ident(EOL) operator(+)
          string<delimiter(')content(Values: %2:d)delimiter(')> operator(+) ident(EOL) operator(+)
          string<delimiter(')content(Max subkeys length: %1:d)delimiter(')> operator(+) ident(EOL) operator(+)
          string<delimiter(')content(Max value name length: %3:d)delimiter(')> operator(+) ident(EOL) operator(+)
          string<delimiter(')content(Max data length: %4:d)delimiter(')> operator(+) ident(EOL) operator(+)
          string<delimiter(')delimiter(')>operator(,)
          operator([)ident(NumSubKeys)operator(,) ident(MaxSubKeyLen)operator(,) ident(NumValues)operator(,) ident(MaxValueLen)operator(,) ident(MaxDataLen)operator(])operator(\))operator(\))operator(;)
        ident(KeyAge) operator(:=) ident(DateTimeOfFileTime)operator(()ident(LastWriteTime)operator(\))operator(;)
        keyword(if) ident(KeyAge) operator(>) integer(0) keyword(then)
          ident(AddLn)operator(()string<delimiter(')content(Last write time: )delimiter(')> operator(+) ident(DateTimeToStr)operator(()ident(KeyAge)operator(\))operator(\))operator(;)
      keyword(end) keyword(else)
        ident(AddLn)operator(()string<delimiter(')content(Couldn)char('')content(t get key info.)delimiter(')> operator(+) ident(EOL) operator(+)
          string<delimiter(')content(Error Code: )delimiter(')> operator(+) ident(IntToStr)operator(()ident(Res)operator(\)) operator(+) ident(EOL) operator(+)
          string<delimiter(')content(Message: )delimiter(')> operator(+) ident(SysErrorMessage)operator(()ident(Res)operator(\))operator(\))operator(;)
    keyword(end)operator(;)
  keyword(end)operator(;)

keyword(begin)
  ident(Result) operator(:=) string<delimiter(')delimiter(')>operator(;)
  ident(Node) operator(:=) ident(RegTV)operator(.)ident(Selected)operator(;)

  ident(Reg) operator(:=) ident(TXRegistry)operator(.)ident(Create)operator(()ident(KEY_READ)operator(\))operator(;)
  keyword(try)
    keyword(try)
      ident(Error) operator(:=) ident(OpenNodeError)operator(()ident(Reg)operator(,) ident(RegTV)operator(.)ident(Selected)operator(,) ident(Mode)operator(\))operator(;)

      keyword(case) ident(Mode) keyword(of)
      ident(onFull)operator(:) ident(AddLn)operator(()string<delimiter(')content(Full Access)delimiter(')>operator(\))operator(;)
      ident(onReadOnly)operator(:) ident(AddLn)operator(()string<delimiter(')content(Read only)delimiter(')>operator(\))operator(;)
      ident(onError)operator(:)
        ident(AddLn)operator(()ident(Format)operator(()ident(sErrorMsg)operator(,) operator([)ident(Error)operator(,) ident(SysErrorMessage)operator(()ident(Error)operator(\))operator(])operator(\))operator(\))operator(;)
      ident(onNodeNil)operator(:) ident(AddLn)operator(()string<delimiter(')content(Node is nil!)delimiter(')>operator(\))operator(;)

      keyword(else)
        ident(AddLn)operator(()string<delimiter(')content(Unknown Mode: )delimiter(')> operator(+) ident(IntToStr)operator(()ident(Integer)operator(()ident(Mode)operator(\))operator(\))operator(\))operator(;)
      keyword(end)operator(;)

      keyword(if) ident(Mode) keyword(in) ident(onOK) keyword(then)
        ident(AddNodeInfo)operator(()ident(Reg)operator(.)ident(CurrentKey)operator(\))operator(;)

    keyword(except)
      directive(on) ident(E)operator(:) ident(Exception) keyword(do) keyword(begin)
        ident(Error) operator(:=) ident(GetLastError)operator(;)
        keyword(if) ident(Error) operator(<>) ident(ERROR_SUCCESS) keyword(then)
          ident(AddLn)operator(()ident(Format)operator(()string<delimiter(')content(Error! No: %d Msg: %s)delimiter(')>operator(,) operator([)ident(Error)operator(,) ident(SysErrorMessage)operator(()ident(Error)operator(\))operator(])operator(\))operator(\))
        keyword(else)
          ident(AddLn)operator(()ident(E)operator(.)ident(Message)operator(\))operator(;)
      keyword(end)operator(;)
    keyword(end)operator(;)
  keyword(finally)
    ident(Reg)operator(.)ident(Free)operator(;)
  keyword(end)operator(;)

  keyword(if) ident(MurphyMode) keyword(then) keyword(begin)
    ident(AddLn)operator(()string<delimiter(')content([MM] ImageIndex: )delimiter(')> operator(+) ident(IntToStr)operator(()ident(Node)operator(.)ident(ImageIndex)operator(\))operator(\))operator(;)
    ident(Info) operator(:=) ident(NodeInfo)operator(()ident(Node)operator(\))operator(;)

    keyword(if) ident(Info)operator(.)ident(HostType) keyword(in) operator([)ident(uhNone)operator(..)ident(High)operator(()ident(HostTypeStrings)operator(\))operator(]) keyword(then)
      ident(AddLn)operator(()string<delimiter(')content([MM] HostType: )delimiter(')> operator(+) ident(HostTypeStrings)operator([)ident(Info)operator(.)ident(HostType)operator(])operator(\))
    keyword(else)
      ident(AddLn)operator(()string<delimiter(')content([MM] Unknown HostType: )delimiter(')> operator(+) ident(IntToStr)operator(()ident(Integer)operator(()ident(Info)operator(.)ident(HostType)operator(\))operator(\))operator(\))operator(;)
    ident(Add)operator(()string<delimiter(')content([MM] Flags: )delimiter(')>operator(\))operator(;)
    keyword(for) ident(Flag) operator(:=) ident(Low)operator(()ident(TNodeFlag)operator(\)) keyword(to) ident(High)operator(()ident(TNodeFlag)operator(\)) keyword(do)
      keyword(if) ident(Flag) keyword(in) ident(Info)operator(.)ident(Flags) keyword(then)
        ident(Add)operator(()ident(NodeFlagStrings)operator([)ident(Flag)operator(]) operator(+) char<delimiter(')content( )delimiter(')>operator(\))operator(;)
    ident(AddLn)operator(;)
  keyword(end)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TTreeWin)operator(.)ident(ExportAsRegClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(var)
  ident(Node)operator(:) ident(TTreeNode)operator(;)
  ident(Reg)operator(:) ident(TXRegistry)operator(;)

  keyword(procedure) ident(ExportAsReg4)operator(()ident(Reg)operator(:) ident(TXRegistry)operator(;) keyword(const) ident(FileName)operator(:) keyword(string)operator(\))operator(;)
  keyword(var)
    ident(Reg4Writer)operator(:) ident(TReg4Writer)operator(;)
  keyword(begin)
    ident(Reg4Writer) operator(:=) ident(TReg4Writer)operator(.)ident(Create)operator(()ident(tpNormal)operator(,) ident(FileName)operator(,)
     ident(TraceKey)operator(()ident(PathOfNode)operator(()ident(Node)operator(\))operator(\))operator(,) ident(Reg)operator(.)ident(DeliverKey)operator(\))operator(;)
    keyword(with) ident(Reg4Writer) keyword(do) keyword(begin)
      ident(OnTerminate) operator(:=) ident(Reg4WriterTerminate)operator(;)
      keyword(try)
        ident(AddHint)operator(()ident(Format)operator(()string<delimiter(')content(starting .reg-export: %s...)delimiter(')>operator(,)
          operator([)ident(Root) operator(+) char<delimiter(')content(\\)delimiter(')> operator(+) ident(Path)operator(])operator(\))operator(\))operator(;)
        ident(Resume)operator(;)
      keyword(except)
        ident(Free)operator(;)
      keyword(end)operator(;)
    keyword(end)operator(;)
    ident(AddToLastHint)operator(()string<delimiter(')content(started.)delimiter(')>operator(\))operator(;)
  keyword(end)operator(;)


  keyword(procedure) ident(ExportAsHive)operator(()ident(Reg)operator(:) ident(TXRegistry)operator(;) keyword(const) ident(FileName)operator(:) keyword(string)operator(\))operator(;)
  keyword(begin)
    keyword(if) ident(Reg)operator(.)ident(SaveKey)operator(()string<delimiter(')delimiter(')>operator(,) ident(FileName)operator(\)) keyword(then)
      ident(AddHint)operator(()string<delimiter(')content(hive export successfull.)delimiter(')>operator(\))
    keyword(else)
      ident(AddHint)operator(()ident(Format)operator(()string<delimiter(')content(hive export failed: %s)delimiter(')>operator(,)
        operator([)ident(SysErrorMessage)operator(()ident(LastSuccessRes)operator(\))operator(])operator(\))operator(\))operator(;)
  keyword(end)operator(;)

keyword(begin)
  ident(Node) operator(:=) ident(RegTV)operator(.)ident(Selected)operator(;)
  keyword(with) ident(ExportD) keyword(do) keyword(begin)
    ident(FileName) operator(:=) ident(MakeValidFileName)operator(()ident(Node)operator(.)ident(Text)operator(,) string<delimiter(')content(key)delimiter(')>operator(\))operator(;)

    keyword(if) ident(Execute) keyword(then) keyword(begin)
      ident(Reg) operator(:=) ident(TXRegistry)operator(.)ident(Create)operator(;)
      keyword(try)
        keyword(if) ident(OpenNodeOK)operator(()ident(Reg)operator(,) ident(Node)operator(\)) keyword(then) keyword(begin)
          keyword(if) ident(FileExists)operator(()ident(FileName)operator(\)) keyword(and) operator(()ident(mrYes)operator(=)ident(MessageDlg)operator(()
           string<delimiter(')content(File already exists.)delimiter(')> operator(+) ident(EOL) operator(+)
           string<delimiter(')content(Delete existing file?)delimiter(')>operator(,)
           ident(mtWarning)operator(,) operator([)ident(mbYes)operator(,) ident(mbNo)operator(])operator(,) integer(0)operator(\))operator(\)) keyword(then) keyword(begin)
            ident(FileSetAttr)operator(()ident(FileName)operator(,) integer(0)operator(\))operator(;)
            ident(DeleteFile)operator(()ident(FileName)operator(\))operator(;)
          keyword(end)operator(;)
          keyword(case) ident(FilterIndex) keyword(of)
          integer(1)operator(:) ident(ExportAsReg4)operator(()ident(Reg)operator(,) ident(FileName)operator(\))operator(;)
          integer(2)operator(:) ident(ExportAsHive)operator(()ident(Reg)operator(,) ident(FileName)operator(\))operator(;)
          keyword(else)
            ident(ShowMessage)operator(()ident(Format)operator(()string<delimiter(')content(Wrong Filter: %d)delimiter(')>operator(,) operator([)ident(FilterIndex)operator(])operator(\))operator(\))operator(;)
          keyword(end)operator(;)
        keyword(end)operator(;)
      keyword(finally)
        ident(Reg)operator(.)ident(Free)operator(;)
      keyword(end)operator(;)
    keyword(end)operator(;)
  keyword(end)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TTreeWin)operator(.)ident(FormClose)operator(()ident(Sender)operator(:) ident(TObject)operator(;) keyword(var) ident(Action)operator(:) ident(TCloseAction)operator(\))operator(;)
keyword(begin)
comment(//  Action := caNone;)
keyword(end)operator(;)

keyword(procedure) ident(TTreeWin)operator(.)ident(Load)operator(;)
keyword(var)
  ident(NodeHKLM)operator(,) ident(NodeHKU)operator(,) ident(NodeHKDD)operator(,) ident(NodeHKPD)operator(:) ident(TTreeNode)operator(;)
  ident(NodeHostReg)operator(:) ident(TTreeNode)operator(;)

  keyword(procedure) ident(LoadShortcuts)operator(()ident(FileName)operator(:) keyword(string)operator(;) ident(HostType)operator(:) ident(TUniHostType)operator(\))operator(;)
  keyword(var)
    ident(i)operator(:) ident(Integer)operator(;)
    ident(SL)operator(:) ident(TStringList)operator(;)
    ident(ShortcutIni)operator(:) ident(TIniFile)operator(;)
  keyword(begin)
    keyword(if) keyword(not) ident(FileEx)operator(()ident(FileName)operator(\)) keyword(then) keyword(begin)
      ident(AddToLastHint)operator(()string<delimiter(')content(not found:)delimiter(')>operator(\))operator(;)
      ident(AddHint)operator(()ident(FileName)operator(\))operator(;)
    ident(Exit) keyword(end)operator(;)

    ident(ShortcutIni) operator(:=) ident(TIniFile)operator(.)ident(Create)operator(()ident(FileName)operator(\))operator(;)
    ident(SL) operator(:=) ident(TStringList)operator(.)ident(Create)operator(;)

    keyword(try)
      ident(ShortcutIni)operator(.)ident(ReadSectionValues)operator(()string<delimiter(')content(Shortcuts)delimiter(')>operator(,) ident(SL)operator(\))operator(;)
      keyword(for) ident(i) operator(:=) integer(0) keyword(to) ident(SL)operator(.)ident(Count)operator(-)integer(1) keyword(do)
        ident(AddShortcut)operator(()ident(SL)operator(.)ident(Names)operator([)ident(i)operator(])operator(,) ident(SL)operator(.)ident(Values)operator([)ident(SL)operator(.)ident(Names)operator([)ident(i)operator(])operator(])operator(,) ident(iconShortcut)operator(,)
          ident(HostType)operator(\))operator(;)
      ident(AddToLastHint)operator(()string<delimiter(')content(OK)delimiter(')>operator(\))operator(;)
    keyword(finally)
      ident(SL)operator(.)ident(Free)operator(;)
      ident(ShortcutIni)operator(.)ident(Free)operator(;)
    keyword(end)operator(;)
  keyword(end)operator(;)

keyword(begin)
  ident(NodeHostReg) operator(:=) keyword(nil)operator(;)

  ident(AddHint)operator(()string<delimiter(')content(Creating Hosts...)delimiter(')>operator(\))operator(;)
  ident(RootNodes) operator(:=) ident(TList)operator(.)ident(Create)operator(;)
  ident(ChangeLastHint)operator(()string<delimiter(')content(Creating Hosts...HKEY_LOCAL_MACHINE)delimiter(')>operator(\))operator(;)
  ident(NodeHKLM) operator(:=) ident(RegTV)operator(.)ident(Items)operator(.)ident(AddChild)operator(()ident(NodeHostReg)operator(,) string<delimiter(')content(HKEY_LOCAL_MACHINE)delimiter(')>operator(\))operator(;)
  ident(SetTNImage)operator(()ident(NodeHKLM)operator(,) ident(iconHKLM)operator(\))operator(;)
  ident(NodeInfo)operator(()ident(NodeHKLM)operator(\))operator(.)ident(HostType) operator(:=) ident(uhReg)operator(;)
  ident(RootNodes)operator(.)ident(Add)operator(()ident(NodeHKLM)operator(\))operator(;)

  ident(ChangeLastHint)operator(()string<delimiter(')content(Creating Hosts...HKEY_USERS)delimiter(')>operator(\))operator(;)
  ident(NodeHKU) operator(:=) ident(RegTV)operator(.)ident(Items)operator(.)ident(AddChild)operator(()ident(NodeHostReg)operator(,) string<delimiter(')content(HKEY_USERS)delimiter(')>operator(\))operator(;)
  ident(SetTNImage)operator(()ident(NodeHKU)operator(,) ident(iconHKU)operator(\))operator(;)
  ident(NodeInfo)operator(()ident(NodeHKU)operator(\))operator(.)ident(HostType) operator(:=) ident(uhReg)operator(;)
  ident(RootNodes)operator(.)ident(Add)operator(()ident(NodeHKU)operator(\))operator(;)

  ident(ChangeLastHint)operator(()string<delimiter(')content(Creating Hosts...HKEY_CURRENT_USER)delimiter(')>operator(\))operator(;)
  keyword(if) ident(RegRealPath)operator(()string<delimiter(')content(HKEY_CURRENT_USER)delimiter(')>operator(\)) operator(=) string<delimiter(')content(HKEY_CURRENT_USER)delimiter(')> keyword(then)
  comment(//could not dereference hkcu)
    ident(AddShortcut)operator(()string<delimiter(')content(HKEY_CURRENT_USER)delimiter(')>operator(,) string<delimiter(')content(HKEY_CURRENT_USER)delimiter(')>operator(,)
      ident(iconHKCU)operator(,) ident(uhReg)operator(\))
  keyword(else)
    ident(AddShortcut)operator(()string<delimiter(')content(HKEY_CURRENT_USER)delimiter(')>operator(,) ident(RegRealPath)operator(()string<delimiter(')content(HKEY_CURRENT_USER)delimiter(')>operator(\))operator(,)
      ident(iconHKCU)operator(,) ident(uhSystemShortcut)operator(\))operator(;)

  ident(ChangeLastHint)operator(()string<delimiter(')content(Creating Hosts...HKEY_CURRENT_CONFIG)delimiter(')>operator(\))operator(;)
  ident(AddShortcut)operator(()string<delimiter(')content(HKEY_CURRENT_CONFIG)delimiter(')>operator(,) ident(RegRealPath)operator(()string<delimiter(')content(HKEY_CURRENT_CONFIG)delimiter(')>operator(\))operator(,)
    ident(iconHKCC)operator(,) ident(uhSystemShortcut)operator(\))operator(;)

  ident(ChangeLastHint)operator(()string<delimiter(')content(Creating Hosts...HKEY_CLASSES_ROOT)delimiter(')>operator(\))operator(;)
  ident(AddShortcut)operator(()string<delimiter(')content(HKEY_CLASSES_ROOT)delimiter(')>operator(,) ident(RegRealPath)operator(()string<delimiter(')content(HKEY_CLASSES_ROOT)delimiter(')>operator(\))operator(,)
    ident(iconHKCR)operator(,) ident(uhSystemShortcut)operator(\))operator(;)

  ident(MainReg)operator(.)ident(RootKey) operator(:=) ident(HKEY_DYN_DATA)operator(;)
  keyword(if) ident(MainReg)operator(.)ident(OpenKeyReadOnly)operator(()string<delimiter(')delimiter(')>operator(\)) keyword(then) keyword(begin)
    ident(MainReg)operator(.)ident(CloseKey)operator(;)
    ident(ChangeLastHint)operator(()string<delimiter(')content(Creating Hosts...HKEY_DYN_DATA)delimiter(')>operator(\))operator(;)
    ident(NodeHKDD) operator(:=) ident(RegTV)operator(.)ident(Items)operator(.)ident(AddChild)operator(()keyword(nil)operator(,) string<delimiter(')content(HKEY_DYN_DATA)delimiter(')>operator(\))operator(;)
    ident(NodeInfo)operator(()ident(NodeHKDD)operator(\))operator(.)ident(HostType) operator(:=) ident(uhReg)operator(;)
    ident(NodeInfo)operator(()ident(NodeHKDD)operator(\))operator(.)ident(IncludeFlag)operator(()ident(nfReadOnly)operator(\))operator(;)
    ident(SetTNImage)operator(()ident(NodeHKDD)operator(,) ident(iconHKDD)operator(\))operator(;)
    ident(RootNodes)operator(.)ident(Add)operator(()ident(NodeHKDD)operator(\))operator(;)
  keyword(end)operator(;)

  ident(MainReg)operator(.)ident(RootKey) operator(:=) ident(HKEY_PERFORMANCE_DATA)operator(;)
  keyword(if) ident(MainReg)operator(.)ident(OpenKeyReadOnly)operator(()string<delimiter(')delimiter(')>operator(\)) keyword(then) keyword(begin)
    ident(MainReg)operator(.)ident(CloseKey)operator(;)
    ident(ChangeLastHint)operator(()string<delimiter(')content(Creating Hosts...HKEY_PERFORMANCE_DATA)delimiter(')>operator(\))operator(;)
    ident(NodeHKPD) operator(:=) ident(RegTV)operator(.)ident(Items)operator(.)ident(AddChild)operator(()keyword(nil)operator(,) string<delimiter(')content(HKEY_PERFORMANCE_DATA)delimiter(')>operator(\))operator(;)
    ident(NodeInfo)operator(()ident(NodeHKPD)operator(\))operator(.)ident(HostType) operator(:=) ident(uhReg)operator(;)
    ident(SetTNImage)operator(()ident(NodeHKPD)operator(,) ident(iconHKPD)operator(\))operator(;)
    ident(RootNodes)operator(.)ident(Add)operator(()ident(NodeHKPD)operator(\))operator(;)
  keyword(end)operator(;)

  ident(ChangeLastHint)operator(()string<delimiter(')content(Creating Host...OK)delimiter(')>operator(\))operator(;)

  ident(AddHint)operator(()string<delimiter(')content(Loading Standard Shortcuts...)delimiter(')>operator(\))operator(;)
  ident(LoadShortcuts)operator(()ident(PlutoDir) operator(+) ident(StandardShortcutsFileName)operator(,) ident(uhStandardShortcut)operator(\))operator(;)

  ident(AddHint)operator(()string<delimiter(')content(Loading User Shortcuts...)delimiter(')>operator(\))operator(;)
  ident(LoadShortcuts)operator(()ident(PlutoDir) operator(+) ident(ShortcutsFileName)operator(,) ident(uhUserShortcut)operator(\))operator(;)

preprocessor({$IFDEF UNIKEY})
  ident(AddShortcut)operator(()string<delimiter(')content(Uni)delimiter(')>operator(,) string<delimiter(')delimiter(')>operator(,) ident(iconHostUni)operator(\))operator(;)
preprocessor({$ENDIF})
keyword(end)operator(;)

keyword(procedure) ident(TTreeWin)operator(.)ident(Reg4WriterTerminate)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  keyword(with) ident(Sender) keyword(as) ident(TRegFileWriter) keyword(do)
    ident(AddHint)operator(()ident(Format)operator(()string<delimiter(')content(.reg-export finished (%0.2f s\): %s)delimiter(')>operator(,)
      operator([)ident(Clk)operator(.)ident(SecsPassed)operator(,) ident(Root) operator(+) char<delimiter(')content(\\)delimiter(')> operator(+) ident(Path)operator(])operator(\))operator(\))operator(;)
keyword(end)operator(;)

keyword(end)operator(.)
keyword(unit) ident(valuesU)operator(;)

keyword(interface)

keyword(uses)
  ident(Windows)operator(,) ident(Messages)operator(,) ident(SysUtils)operator(,) ident(Variants)operator(,) ident(Classes)operator(,) ident(Graphics)operator(,) ident(Controls)operator(,) ident(Forms)operator(,)
  ident(ComCtrls)operator(,) ident(Menus)operator(,) ident(Clipbrd)operator(,) ident(XReg)operator(,) ident(CompEx)operator(,) ident(Math)operator(,) ident(YTools)operator(,) ident(Dialogs)operator(,) ident(YTypes)operator(,)
  ident(PlutoConst)operator(,) ident(keybrd)operator(,) ident(ImgList)operator(,) ident(clock)operator(;)

keyword(type)
  ident(TValuesWin) operator(=) keyword(class)operator(()ident(TForm)operator(\))
    ident(ValueListPU)operator(:) ident(TPopupMenu)operator(;)
    ident(NewStringMI)operator(:) ident(TMenuItem)operator(;)
    ident(NewDWORDMI)operator(:) ident(TMenuItem)operator(;)
    ident(NewBinaryMI)operator(:) ident(TMenuItem)operator(;)
    ident(ConvertToMI)operator(:) ident(TMenuItem)operator(;)
    ident(ConvStringMI)operator(:) ident(TMenuItem)operator(;)
    ident(ConvDWORDMI)operator(:) ident(TMenuItem)operator(;)
    ident(ConvBinaryMI)operator(:) ident(TMenuItem)operator(;)
    ident(ValueList)operator(:) ident(TListView)operator(;)
    ident(DeleteMI)operator(:) ident(TMenuItem)operator(;)
    ident(N1)operator(:) ident(TMenuItem)operator(;)
    ident(RenameMI)operator(:) ident(TMenuItem)operator(;)
    ident(NewElseMI)operator(:) ident(TMenuItem)operator(;)
    ident(NewMultiStringMI)operator(:) ident(TMenuItem)operator(;)
    ident(REGNONE1)operator(:) ident(TMenuItem)operator(;)
    ident(LINK1)operator(:) ident(TMenuItem)operator(;)
    ident(NewExpandStringMI)operator(:) ident(TMenuItem)operator(;)
    ident(N3BINARY1)operator(:) ident(TMenuItem)operator(;)
    ident(N4DWORD1)operator(:) ident(TMenuItem)operator(;)
    ident(N4DWORDLITTLEEDIAN1)operator(:) ident(TMenuItem)operator(;)
    ident(NewBigEndianMI)operator(:) ident(TMenuItem)operator(;)
    ident(N6LINK1)operator(:) ident(TMenuItem)operator(;)
    ident(N7MULTISZ1)operator(:) ident(TMenuItem)operator(;)
    ident(RESOURCELIST1)operator(:) ident(TMenuItem)operator(;)
    ident(N9FULLRESOURCEDESCRIPTOR1)operator(:) ident(TMenuItem)operator(;)
    ident(ARESOURCEREQUIREMENTSLIST1)operator(:) ident(TMenuItem)operator(;)
    ident(NewDefaultValueMI)operator(:) ident(TMenuItem)operator(;)
    ident(EditMI)operator(:) ident(TMenuItem)operator(;)
    ident(EditBinaryMI)operator(:) ident(TMenuItem)operator(;)
    ident(N3)operator(:) ident(TMenuItem)operator(;)
    ident(CopyDataPreviewMI)operator(:) ident(TMenuItem)operator(;)
    ident(DublicateMI)operator(:) ident(TMenuItem)operator(;)
    ident(MultiString1)operator(:) ident(TMenuItem)operator(;)
    ident(ZeromizeMI)operator(:) ident(TMenuItem)operator(;)
    ident(N4)operator(:) ident(TMenuItem)operator(;)
    ident(CopyPathMI)operator(:) ident(TMenuItem)operator(;)
    ident(TakeAsMainValueMI)operator(:) ident(TMenuItem)operator(;)
    ident(SelectAllMI)operator(:) ident(TMenuItem)operator(;)
    ident(InvertSelectionMI)operator(:) ident(TMenuItem)operator(;)
    keyword(procedure) ident(FormCreate)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(InitListColumnTags)operator(;)

    keyword(procedure) ident(NewStringMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(NewDWORDMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(NewBinaryMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(ConvertValue)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)

    keyword(procedure) ident(CreateValue)operator(()ident(Typ)operator(:) ident(TRegDataType)operator(\))operator(;)
    keyword(procedure) ident(ZeromizeValue)operator(;)
    keyword(procedure) ident(DeleteValue)operator(;)
    keyword(procedure) ident(CloneValue)operator(;)
    keyword(function) ident(TryRenameValue)operator(()ident(OldName)operator(:) keyword(string)operator(;) keyword(var) ident(NewName)operator(:) keyword(string)operator(\))operator(:) ident(Boolean)operator(;)

    keyword(procedure) ident(ValueListChange)operator(()ident(Sender)operator(:) ident(TObject)operator(;) ident(Item)operator(:) ident(TListItem)operator(;) ident(Change)operator(:) ident(TItemChange)operator(\))operator(;)
    keyword(procedure) ident(ValueListCustomDrawItem)operator(()ident(Sender)operator(:) ident(TCustomListView)operator(;) ident(Item)operator(:) ident(TListItem)operator(;) ident(State)operator(:) ident(TCustomDrawState)operator(;) keyword(var) ident(DefaultDraw)operator(:) ident(Boolean)operator(\))operator(;)
    keyword(procedure) ident(ValueListDblClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(ValueListEditing)operator(()ident(Sender)operator(:) ident(TObject)operator(;) ident(Item)operator(:) ident(TListItem)operator(;) keyword(var) ident(AllowEdit)operator(:) ident(Boolean)operator(\))operator(;)
    keyword(procedure) ident(ValueListEdited)operator(()ident(Sender)operator(:) ident(TObject)operator(;) ident(Item)operator(:) ident(TListItem)operator(;) keyword(var) ident(S)operator(:) keyword(String)operator(\))operator(;)
    keyword(procedure) ident(ValueListKeyDown)operator(()ident(Sender)operator(:) ident(TObject)operator(;) keyword(var) ident(Key)operator(:) ident(Word)operator(;) ident(Shift)operator(:) ident(TShiftState)operator(\))operator(;)
    keyword(procedure) ident(ValueListResize)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)

    keyword(function) ident(UpdateValue)operator(()ident(Reg)operator(:) ident(TXRegistry)operator(;) ident(Item)operator(:) ident(TListItem)operator(\))operator(:) ident(Boolean)operator(;)
    keyword(procedure) ident(UpdateValues)operator(()ident(SelectedOnly)operator(:) ident(Boolean) operator(=) ident(False)operator(\))operator(;)
    keyword(procedure) ident(Reload)operator(()ident(JumpToNewValue)operator(:) ident(Boolean) operator(=) ident(False)operator(;) ident(ValueName)operator(:) keyword(string) operator(=) string<delimiter(')delimiter(')>operator(\))operator(;)
    keyword(procedure) ident(LoadValues)operator(()ident(Reg)operator(:) ident(TXRegistry)operator(\))operator(;)

    keyword(function) ident(AddValue)operator(()ident(Reg)operator(:) ident(TXRegistry)operator(;) keyword(const) ident(ValueName)operator(:) keyword(string)operator(;) ident(AppendInfos)operator(:) ident(Boolean) operator(=) ident(True)operator(\))operator(:) ident(TListItem)operator(;)
    keyword(procedure) ident(ValueListPUPopup)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(FormKeyDown)operator(()ident(Sender)operator(:) ident(TObject)operator(;) keyword(var) ident(Key)operator(:) ident(Word)operator(;) ident(Shift)operator(:) ident(TShiftState)operator(\))operator(;)
    keyword(procedure) ident(ValueListDeletion)operator(()ident(Sender)operator(:) ident(TObject)operator(;) ident(Item)operator(:) ident(TListItem)operator(\))operator(;)
    keyword(procedure) ident(DeleteMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(RenameMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(NewBigEndianMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(NewExpandStringMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(NewMultiStringMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(NewStrangeTypeMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(NewDefaultValueMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(ValueListChanging)operator(()ident(Sender)operator(:) ident(TObject)operator(;) ident(Item)operator(:) ident(TListItem)operator(;) ident(Change)operator(:) ident(TItemChange)operator(;) keyword(var) ident(AllowChange)operator(:) ident(Boolean)operator(\))operator(;)
    keyword(procedure) ident(ValueListMouseDown)operator(()ident(Sender)operator(:) ident(TObject)operator(;) ident(Button)operator(:) ident(TMouseButton)operator(;) ident(Shift)operator(:) ident(TShiftState)operator(;) ident(X)operator(,) ident(Y)operator(:) ident(Integer)operator(\))operator(;)
    keyword(procedure) ident(EditBinaryMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(EditMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(ValueListCustomDrawSubItem)operator(()ident(Sender)operator(:) ident(TCustomListView)operator(;) ident(Item)operator(:) ident(TListItem)operator(;) ident(SubItem)operator(:) ident(Integer)operator(;) ident(State)operator(:) ident(TCustomDrawState)operator(;) keyword(var) ident(DefaultDraw)operator(:) ident(Boolean)operator(\))operator(;)
    keyword(procedure) ident(ValueListCompare)operator(()ident(Sender)operator(:) ident(TObject)operator(;) ident(Item1)operator(,) ident(Item2)operator(:) ident(TListItem)operator(;) ident(Data)operator(:) ident(Integer)operator(;) keyword(var) ident(Compare)operator(:) ident(Integer)operator(\))operator(;)
    keyword(procedure) ident(ValueListColumnClick)operator(()ident(Sender)operator(:) ident(TObject)operator(;) ident(Column)operator(:) ident(TListColumn)operator(\))operator(;)
    keyword(procedure) ident(DublicateMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(CopyDataPreviewMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(CopyDataPreview)operator(;)
    keyword(procedure) ident(ZeromizeMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(CopyPathMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)

    keyword(function) ident(FindItemByRealName)operator(()keyword(const) ident(ValueName)operator(:) keyword(string)operator(\))operator(:) ident(Integer)operator(;)

    keyword(function) ident(FocusItem)operator(()ident(ARealValueName)operator(:) keyword(string)operator(;)
      ident(FocusValueList)operator(:) ident(Boolean) operator(=) ident(False)operator(\))operator(:) ident(Boolean)operator(;)
    keyword(procedure) ident(TakeAsMainValueMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(FormShow)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(FormClose)operator(()ident(Sender)operator(:) ident(TObject)operator(;) keyword(var) ident(Action)operator(:) ident(TCloseAction)operator(\))operator(;)
    keyword(procedure) ident(ValueListClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(CheckValueListHotTrack)operator(;)
    keyword(procedure) ident(SelectAllMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(InvertSelectionMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(FormDestroy)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
  directive(private)
    ident(ValueLabelClicked)operator(:) ident(Boolean)operator(;)
    ident(SortBy)operator(:) ident(TValueListColumn)operator(;)
    ident(SortByColumn)operator(:) ident(TListColumn)operator(;)
    ident(SubItemIndex)operator(:) keyword(array)operator([)ident(TValueListColumn)operator(]) keyword(of) ident(Integer)operator(;)
  directive(public)
    ident(ValueNames)operator(:) ident(TStringList)operator(;)
    ident(ValuesCommon)operator(:) ident(Boolean)operator(;)
    ident(ValueCommonType)operator(:) ident(TRegDataType)operator(;)
 keyword(end)operator(;)

keyword(var)
  ident(ValuesWin)operator(:) ident(TValuesWin)operator(;)
  ident(ValueList)operator(:) ident(TListView)operator(;)

  ident(DefaultValueCaption)operator(:) keyword(string) operator(=) string<delimiter(')delimiter(')>operator(;)

keyword(function) ident(ItemIsDefaultValue)operator(()ident(Item)operator(:) ident(TListItem)operator(\))operator(:) ident(Boolean)operator(;)
keyword(function) ident(RealValueName)operator(()ident(Item)operator(:) ident(TListItem)operator(\))operator(:) keyword(string)operator(;)
keyword(procedure) ident(SetRealValueName)operator(()ident(Item)operator(:) ident(TListItem)operator(;) ident(Caption)operator(:) keyword(string)operator(\))operator(;)
keyword(function) ident(IconOfDataType)operator(()ident(Typ)operator(:) ident(TRegDataType)operator(\))operator(:) ident(Integer)operator(;)
keyword(function) ident(IsMainValue)operator(()ident(Item)operator(:) ident(TListItem)operator(\))operator(:) ident(Boolean)operator(;)

keyword(function) ident(ColorOfDataType)operator(()ident(DataType)operator(:) ident(TRegDataType)operator(;)
  ident(DefaultColor)operator(:) ident(TColor) operator(=) ident(clWhite)operator(\))operator(:) ident(TColor)operator(;)
keyword(function) ident(DataPreviewOfContext)operator(()ident(Context)operator(:) ident(TRegContext)operator(\))operator(:) keyword(string)operator(;)

keyword(function) ident(ValueDataSize)operator(()ident(Context)operator(:) ident(TRegContext)operator(\))operator(:) keyword(string)operator(;)
keyword(function) ident(ValueDataType)operator(()ident(Context)operator(:) ident(TRegContext)operator(\))operator(:) keyword(string)operator(;)
keyword(function) ident(ValueDataPreview)operator(()ident(Context)operator(:) ident(TRegContext)operator(\))operator(:) keyword(string)operator(;)
keyword(function) ident(ValueTypeIcon)operator(()ident(Context)operator(:) ident(TRegContext)operator(\))operator(:) ident(Integer)operator(;)

keyword(function) ident(StrOfRegDataType)operator(()ident(Typ)operator(:) ident(TRegDataType)operator(\))operator(:) keyword(string)operator(;)

keyword(implementation)

keyword(uses) ident(PlutoMain)operator(,) ident(TreeU)operator(,) ident(WorkU)operator(,) ident(PrefU)operator(;)

preprocessor({$R *.dfm})

keyword(function) ident(ItemIsDefaultValue)operator(()ident(Item)operator(:) ident(TListItem)operator(\))operator(:) ident(Boolean)operator(;)
keyword(begin)
  ident(Result) operator(:=) ident(Item)operator(.)ident(Data) operator(=) ident(Pointer)operator(()ident(DefaultValueFlag)operator(\))operator(;)
keyword(end)operator(;)

keyword(function) ident(RealValueName)operator(()ident(Item)operator(:) ident(TListItem)operator(\))operator(:) keyword(string)operator(;)
keyword(begin)
  keyword(if) ident(ItemIsDefaultValue)operator(()ident(Item)operator(\)) keyword(then)
    ident(Result) operator(:=) string<delimiter(')delimiter(')>
  keyword(else)
    ident(Result) operator(:=) ident(Item)operator(.)ident(Caption)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(SetRealValueName)operator(()ident(Item)operator(:) ident(TListItem)operator(;) ident(Caption)operator(:) keyword(string)operator(\))operator(;)
keyword(begin)
  keyword(if) ident(Caption) operator(=) string<delimiter(')delimiter(')> keyword(then) keyword(begin)
    ident(Item)operator(.)ident(Caption) operator(:=) ident(DefaultValueCaption)operator(;)
    ident(Item)operator(.)ident(Data) operator(:=) ident(Pointer)operator(()ident(DefaultValueFlag)operator(\))operator(;)
  keyword(end) keyword(else) keyword(begin)
    ident(Item)operator(.)ident(Caption) operator(:=) ident(Caption)operator(;)
    ident(Item)operator(.)ident(Data) operator(:=) keyword(nil)operator(;)
  keyword(end)operator(;)
keyword(end)operator(;)

keyword(function) ident(IsMainValue)operator(()ident(Item)operator(:) ident(TListItem)operator(\))operator(:) ident(Boolean)operator(;)
keyword(begin)
  ident(Result) operator(:=) ident(False)operator(;)
  keyword(if) ident(csDestroying) keyword(in) ident(PrefWin)operator(.)ident(ComponentState) keyword(then)
    ident(Exit)operator(;)
    
  ident(Result) operator(:=) ident(RealValueName)operator(()ident(Item)operator(\)) operator(=) ident(PrefWin)operator(.)ident(MainPreviewE)operator(.)ident(Text)operator(;)
keyword(end)operator(;)

keyword(function) ident(ColorOfDataType)operator(()ident(DataType)operator(:) ident(TRegDataType)operator(;)
  ident(DefaultColor)operator(:) ident(TColor) operator(=) ident(clWhite)operator(\))operator(:) ident(TColor)operator(;)
keyword(begin)
       keyword(if) ident(DataType) keyword(in) ident(rdStringTypes) keyword(then) ident(Result) operator(:=) ident(clBrightRed)
  keyword(else) keyword(if) ident(DataType) operator(=)  ident(rdMultiString) keyword(then) ident(Result) operator(:=) ident(clBrightPurple)
  keyword(else) keyword(if) ident(DataType) keyword(in) ident(rdCardTypes)   keyword(then) ident(Result) operator(:=) ident(clBrightBlue)
  keyword(else) keyword(if) ident(DataType) operator(=)  ident(rdBinary)      keyword(then) ident(Result) operator(:=) ident(clBrightGreen)
  keyword(else) ident(Result) operator(:=) ident(DefaultColor)operator(;)
keyword(end)operator(;)

keyword(function) ident(StrOfRegDataType)operator(()ident(Typ)operator(:) ident(TRegDataType)operator(\))operator(:) keyword(string)operator(;)
keyword(const)
  ident(RegDataTypeStrings)operator(:) keyword(array)operator([)ident(rdNone)operator(..)ident(rdLastType)operator(]) keyword(of) keyword(string) operator(=) operator(()
    string<delimiter(')content(NONE)delimiter(')>operator(,)
    string<delimiter(')content(SZ)delimiter(')>operator(,)
    string<delimiter(')content(EXPAND_SZ)delimiter(')>operator(,)
    string<delimiter(')content(BINARY)delimiter(')>operator(,)
    string<delimiter(')content(DWORD)delimiter(')>operator(,)
    string<delimiter(')content(DWORD_BIG_ENDIAN)delimiter(')>operator(,)
    string<delimiter(')content(LINK)delimiter(')>operator(,)
    string<delimiter(')content(MULTI_SZ)delimiter(')>operator(,)
    string<delimiter(')content(RESOURCE_LIST)delimiter(')>operator(,)
    string<delimiter(')content(FULL_RESOURCE_DESCRIPTOR)delimiter(')>operator(,)
    string<delimiter(')content(RESOURCE_REQUIREMENTS_LIST)delimiter(')>operator(,)
    string<delimiter(')content(QUAD_WORD)delimiter(')>
  operator(\))operator(;)
keyword(begin)
  keyword(if) ident(Typ) keyword(in) operator([)ident(rdNone)operator(..)ident(rdLastType)operator(]) keyword(then)
    ident(Result) operator(:=) ident(RegDataTypeStrings)operator([)ident(Typ)operator(])
  keyword(else)
    ident(Result) operator(:=) ident(IntToStr)operator(()ident(Typ)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TValuesWin)operator(.)ident(NewStringMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(CreateValue)operator(()ident(rdString)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TValuesWin)operator(.)ident(NewDWORDMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(CreateValue)operator(()ident(rdCardinal)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TValuesWin)operator(.)ident(NewBinaryMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(CreateValue)operator(()ident(rdBinary)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TValuesWin)operator(.)ident(CreateValue)operator(()ident(Typ)operator(:) ident(TRegDataType)operator(\))operator(;)
keyword(var)
  ident(Item)operator(:) ident(TListItem)operator(;)
  ident(ValueName)operator(:) keyword(string)operator(;)
  ident(i)operator(:) ident(Integer)operator(;)
  ident(SL)operator(:) ident(TStringList)operator(;)
keyword(begin)
  keyword(if) ident(csDestroying) keyword(in) operator(()ident(TreeWin)operator(.)ident(ComponentState) operator(+) ident(MainWin)operator(.)ident(ComponentState)operator(\)) keyword(then)
    ident(Exit)operator(;)
    
  keyword(if) ident(TreeWin)operator(.)ident(CantWrite) keyword(then)
    ident(Exit)operator(;)

  keyword(with) ident(MainReg) keyword(do) keyword(begin)
    keyword(try)
      ident(OpenCurKey)operator(;)

      ident(ValueName) operator(:=) string<delimiter(')content(New)delimiter(')>operator(;) comment(// find free name)
      ident(i) operator(:=) integer(0)operator(;)
      keyword(while) ident(ValueExists)operator(()ident(ValueName)operator(\)) keyword(do) keyword(begin)
        ident(Inc)operator(()ident(i)operator(\))operator(;)
        ident(ValueName) operator(:=) string<delimiter(')content(New )delimiter(')> operator(+) ident(IntToStr)operator(()ident(i)operator(\))operator(;)
      keyword(end)operator(;)

      keyword(case) ident(Typ) keyword(of)
        ident(rdString)operator(:) keyword(begin)
            ident(WriteString)operator(()ident(ValueName)operator(,) string<delimiter(')delimiter(')>operator(\))operator(;)
          keyword(end)operator(;)
        ident(rdExpandString)operator(:) keyword(begin)
            ident(WriteExpandString)operator(()ident(ValueName)operator(,) string<delimiter(')delimiter(')>operator(\))operator(;)
          keyword(end)operator(;)
        ident(rdCardinal)operator(:) keyword(begin)
            ident(WriteCardinal)operator(()ident(ValueName)operator(,) integer(0)operator(\))operator(;)
          keyword(end)operator(;)
        ident(rdCardBigEndian)operator(:) keyword(begin)
            ident(WriteCardinal)operator(()ident(ValueName)operator(,) integer(0)operator(,) ident(True)operator(\))operator(;)
          keyword(end)operator(;)
        ident(rdMultiString)operator(:) keyword(begin)
            ident(SL) operator(:=) ident(TStringList)operator(.)ident(Create)operator(;)
            ident(WriteMultiString)operator(()ident(ValueName)operator(,) ident(SL)operator(\))operator(;)
            ident(SL)operator(.)ident(Free)operator(;)
          keyword(end)operator(;)
        ident(rdBinary)operator(:) keyword(begin)
            ident(WriteBin)operator(()ident(ValueName)operator(,) keyword(nil)operator(\))operator(;)
          keyword(end)operator(;)
        keyword(else)
          ident(WriteBinType)operator(()ident(ValueName)operator(,) keyword(nil)operator(,) ident(Typ)operator(\))operator(;)
      keyword(end)operator(;)

      keyword(if) keyword(not) ident(ValueExists)operator(()ident(ValueName)operator(\)) keyword(then) keyword(begin)
        ident(ShowMessage)operator(()string<delimiter(')content(Could not create Value.)delimiter(')>operator(\))operator(;)
        ident(CloseKey)operator(;)
      ident(Exit)operator(;) keyword(end)operator(;)

      ident(ValuesWin)operator(.)ident(AddValue)operator(()ident(MainReg)operator(,) ident(ValueName)operator(\))operator(;)
    keyword(finally)
      ident(CloseKey)operator(;)
    keyword(end)operator(;)
  keyword(end)operator(;)

  ident(Item) operator(:=) ident(FindItem)operator(()ident(ValueList)operator(,) ident(ValueName)operator(\))operator(;)

  keyword(if) keyword(not) ident(Assigned)operator(()ident(Item)operator(\)) keyword(then) keyword(begin)
    ident(ShowMessage)operator(()string<delimiter(')content(Error, Value not found: )delimiter(')> operator(+) ident(ValueName)operator(\))operator(;)
  ident(Exit)operator(;) keyword(end)operator(;)

  ident(SelectItemOnly)operator(()ident(ValueList)operator(,) ident(Item)operator(\))operator(;)
  ident(MainWin)operator(.)ident(StatusBarUpdate)operator(;)
  ident(ValueLabelClicked) operator(:=) ident(True)operator(;)
  ident(Item)operator(.)ident(EditCaption)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TValuesWin)operator(.)ident(FormCreate)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(ValuesU)operator(.)ident(ValueList) operator(:=) ident(ValueList)operator(;)

  ident(DefaultValueCaption) operator(:=) ident(PrefWin)operator(.)ident(DefaultValueNameE)operator(.)ident(Text)operator(;)
  ident(ValueLabelClicked) operator(:=) ident(False)operator(;)
  ident(SortBy) operator(:=) ident(vlcName)operator(;)
  ident(SortByColumn) operator(:=) keyword(nil)operator(;)

  ident(ValueListResize)operator(()ident(Sender)operator(\))operator(;)
  ident(ValueList)operator(.)ident(Items)operator(.)ident(Clear)operator(;)
  ident(CheckValueListHotTrack)operator(;)

  ident(ValueNames) operator(:=) ident(TStringList)operator(.)ident(Create)operator(;)
  ident(ValuesCommon) operator(:=) ident(False)operator(;)
  ident(ValueCommonType) operator(:=) integer(0)operator(;)

  ident(NewDefaultValueMI)operator(.)ident(ImageIndex) operator(:=) ident(iconMainValue)operator(;)
  ident(NewStringMI)operator(.)ident(ImageIndex) operator(:=) ident(iconString)operator(;)
  ident(NewDWORDMI)operator(.)ident(ImageIndex) operator(:=) ident(iconCardinal)operator(;)
  ident(NewBinaryMI)operator(.)ident(ImageIndex) operator(:=) ident(iconBinary)operator(;)
  ident(NewMultiStringMI)operator(.)ident(ImageIndex) operator(:=) ident(iconMultiString)operator(;)
  ident(NewElseMI)operator(.)ident(ImageIndex) operator(:=) ident(iconValueElse)operator(;)

  ident(DublicateMI)operator(.)ident(ImageIndex) operator(:=) ident(iconValueDublicate)operator(;)
  ident(DeleteMI)operator(.)ident(ImageIndex) operator(:=) ident(iconDelete)operator(;)
  ident(ZeromizeMI)operator(.)ident(ImageIndex) operator(:=) ident(iconValueZeromize)operator(;)

  ident(EditMI)operator(.)ident(ImageIndex) operator(:=) ident(iconValueEdit)operator(;)
  ident(EditBinaryMI)operator(.)ident(ImageIndex) operator(:=) ident(iconValueEditBinary)operator(;)
  ident(RenameMI)operator(.)ident(ImageIndex) operator(:=) ident(iconRename)operator(;)

  ident(TakeAsMainValueMI)operator(.)ident(ImageIndex) operator(:=) ident(iconTakeAsMainValue)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TValuesWin)operator(.)ident(ConvertValue)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
comment({var
  Allow: Boolean;
  OldActive: Integer;  })
keyword(begin)
comment({  TargetPage := ShowPC.Pages[TMenuItem(Sender\).Tag];

  OldActive := ShowPC.ActivePageIndex;
  ShowPC.ActivePageIndex := TMenuItem(Sender\).Tag;
  WorkWin.ShowPCChanging(Sender, Allow\);
  if not Allow then
    ShowPC.ActivePageIndex := OldActive; })
keyword(end)operator(;)

keyword(function) ident(ValueDataSize)operator(()ident(Context)operator(:) ident(TRegContext)operator(\))operator(:) keyword(string)operator(;)
keyword(var)
  ident(Typ)operator(:) ident(TRegDataType)operator(;)
  ident(Size)operator(:) ident(Integer)operator(;)
comment(//  ValueName: string;)
comment(//  SL: TStringList;)
keyword(begin)
  ident(Result) operator(:=) string<delimiter(')delimiter(')>operator(;)

  keyword(if) ident(csDestroying) keyword(in) ident(PrefWin)operator(.)ident(ComponentState) keyword(then)
    ident(Exit)operator(;)

comment(//  ValueName := RealValueName(Item\);)
  ident(Typ) operator(:=) ident(Context)operator(.)ident(Typ)operator(;)
  ident(Size) operator(:=) ident(Length)operator(()ident(Context)operator(.)ident(Data)operator(\))operator(;)

  keyword(if) ident(Typ) keyword(in) ident(rdStringTypes) keyword(then)
    keyword(if) keyword(not) ident(PrefWin)operator(.)ident(CountZeroByteCB)operator(.)ident(Checked) keyword(then)
      ident(Dec)operator(()ident(Size)operator(\))operator(;)
      
  keyword(if) ident(Typ) operator(=) ident(rdMultiString) keyword(then)
    keyword(if) ident(PrefWin)operator(.)ident(ShowLineCountCB)operator(.)ident(Checked) keyword(then) keyword(begin)
      ident(Size) operator(:=) ident(CharCount)operator(()ident(StrOfByteA)operator(()ident(Context)operator(.)ident(Data)operator(\))operator(,) char(#0)operator(\)) operator(-) integer(2)operator(;)
comment({      SL := TStringList.Create;
      try
        Reg.ReadMultiString(ValueName, SL, PrefWin.UseExtendedModelCB.Checked\);
        Size := SL.Count;
      finally
        SL.Free;
      end;    })
      ident(Result) operator(:=) char<delimiter(')content(#)delimiter(')>operator(;)
    keyword(end)operator(;)

  ident(Result) operator(:=) ident(Result) operator(+) ident(IntToStr)operator(()ident(Size)operator(\))operator(;)
keyword(end)operator(;)

keyword(function) ident(ValueDataType)operator(()ident(Context)operator(:) ident(TRegContext)operator(\))operator(:) keyword(string)operator(;)
keyword(begin)
  ident(Result) operator(:=) ident(StrOfRegDataType)operator(()ident(Context)operator(.)ident(Typ)operator(\))operator(;)
keyword(end)operator(;)

keyword(function) ident(DataPreviewOfContext)operator(()ident(Context)operator(:) ident(TRegContext)operator(\))operator(:) keyword(string)operator(;)

  keyword(function) ident(DWORDPreview)operator(()ident(Value)operator(:) ident(Integer)operator(\))operator(:) keyword(string)operator(;)
  keyword(begin)
    keyword(if) ident(PrefWin)operator(.)ident(ShowDwordAsHex)operator(.)ident(Checked) keyword(then)
      ident(Result) operator(:=) ident(IntToStr)operator(()ident(Value)operator(\)) operator(+) string<delimiter(')content( = $)delimiter(')> operator(+) ident(IntToHex)operator(()ident(Value)operator(,) integer(8)operator(\))
    keyword(else)
      ident(Result) operator(:=) ident(IntToStr)operator(()ident(Value)operator(\))
  keyword(end)operator(;)

  keyword(function) ident(BinaryPreview)operator(()ident(Context)operator(:) ident(TRegContext)operator(\))operator(:) keyword(string)operator(;)
  keyword(var)
    ident(z)operator(:) keyword(string)operator(;)

    keyword(function) ident(DWORDStringOfByteA)operator(()ident(a)operator(:) ident(TByteA)operator(;) ident(AddBinary)operator(:) ident(Boolean) operator(=) ident(False)operator(\))operator(:) keyword(string)operator(;)
    keyword(var)
      ident(piece)operator(:) ident(TByteA)operator(;)
      ident(i)operator(:) ident(Integer)operator(;)
    keyword(begin)
      ident(Result) operator(:=) string<delimiter(')delimiter(')>operator(;)

      ident(i) operator(:=) integer(0)operator(;)
      keyword(while) operator(()ident(i) operator(<=) ident(High)operator(()ident(a)operator(\))operator(\)) keyword(and) operator(()ident(Length)operator(()ident(Result)operator(\)) operator(<) ident(MaxPreviewLen)operator(\)) keyword(do) keyword(begin)
        ident(piece) operator(:=) ident(Copy)operator(()ident(a)operator(,) ident(i)operator(,) integer(4)operator(\))operator(;)
        keyword(if) ident(AddBinary) keyword(then)
          ident(Result) operator(:=) ident(Result) operator(+) ident(FriendlyStr)operator(()ident(piece)operator(\)) operator(+) char<delimiter(')content(=)delimiter(')>operator(;)
        ident(SetLength)operator(()ident(piece)operator(,) integer(4)operator(\))operator(;)
        ident(Result) operator(:=) ident(Result) operator(+) ident(IntToStr)operator(()ident(PInteger)operator(()ident(piece)operator(\))operator(^)operator(\)) operator(+) string<delimiter(')content(  )delimiter(')>operator(;)
        ident(Inc)operator(()ident(i)operator(,) ident(SizeOf)operator(()ident(Integer)operator(\))operator(\))operator(;)
      keyword(end)operator(;)
    keyword(end)operator(;)

  keyword(begin)
    keyword(with) ident(Context) keyword(do) keyword(begin)
      ident(Data) operator(:=) ident(Copy)operator(()ident(Data)operator(,) integer(0)operator(,) ident(MaxPreviewLen)operator(\))operator(;)
      keyword(case) ident(PrefWin)operator(.)ident(ShowBinaryAsRG)operator(.)ident(ItemIndex) keyword(of)
        integer(0)operator(:) ident(z) operator(:=) ident(FriendlyStr)operator(()ident(Data)operator(\))operator(;)
        integer(1)operator(:) ident(z) operator(:=) ident(DWORDStringOfByteA)operator(()ident(Data)operator(\))operator(;)
        integer(2)operator(:) ident(z) operator(:=) ident(DWORDStringOfByteA)operator(()ident(Data)operator(,) ident(True)operator(\))operator(;)
        integer(3)operator(:) ident(z) operator(:=) ident(BinOfByteA)operator(()ident(Data)operator(,) integer(8)operator(,) string<delimiter(')content(  )delimiter(')>operator(\))operator(;)
        integer(4)operator(:) ident(z) operator(:=) ident(HexOfByteA)operator(()ident(Data)operator(,) integer(0)operator(\))operator(;)
        integer(5)operator(:) ident(z) operator(:=) ident(HexOfByteA)operator(()ident(Data)operator(,) integer(1)operator(\))operator(;)
        integer(6)operator(:) ident(z) operator(:=) ident(HexOfByteA)operator(()ident(Data)operator(,) integer(2)operator(\))operator(;)
        integer(7)operator(:) ident(z) operator(:=) ident(HexOfByteA)operator(()ident(Data)operator(,) integer(4)operator(\))operator(;)
      keyword(end)operator(;)
    keyword(end)operator(;)

    ident(Result) operator(:=) ident(Copy)operator(()ident(z)operator(,) integer(1)operator(,) ident(MaxPreviewLen)operator(\))operator(;)
  keyword(end)operator(;)

  keyword(function) ident(StringPreview)operator(()ident(Context)operator(:) ident(TRegContext)operator(\))operator(:) keyword(string)operator(;)
  keyword(var)
    ident(s)operator(:) keyword(string)operator(;)
    ident(Expanded)operator(:) keyword(string)operator(;)
    ident(DoExpand)operator(:) ident(Boolean)operator(;)
  keyword(begin)
    ident(s) operator(:=) ident(PChar)operator(()ident(Context)operator(.)ident(Data)operator(\))operator(;)
    keyword(with) ident(PrefWin) keyword(do)
      ident(Result) operator(:=) ident(StringQuoterBegin) operator(+) ident(FriendlyStr)operator(()ident(s)operator(\)) operator(+) ident(StringQuoterEnd)operator(;)
    keyword(if) ident(s) operator(=) string<delimiter(')delimiter(')> keyword(then)
      ident(Exit)operator(;)

    keyword(case) ident(PrefWin)operator(.)ident(ExpandStringsRG)operator(.)ident(ItemIndex) keyword(of)
      integer(0)operator(:) ident(DoExpand) operator(:=) ident(False)operator(;)
      integer(1)operator(:) ident(DoExpand) operator(:=) operator(()ident(Context)operator(.)ident(Typ) operator(=) ident(rdExpandString)operator(\)) keyword(and) operator(()ident(CharCount)operator(()ident(s)operator(,) char<delimiter(')content(%)delimiter(')>operator(\)) operator(>=) integer(2)operator(\))operator(;)
      integer(2)operator(:) ident(DoExpand) operator(:=) ident(True)operator(;)
    keyword(else)
      ident(ShowMessage)operator(()string<delimiter(')content(Error: Unknown PrefWin.ExpandStringsRG.ItemIndex!)delimiter(')>operator(\))operator(;)
      ident(PrefWin)operator(.)ident(ExpandStringsRG)operator(.)ident(ItemIndex) operator(:=) integer(0)operator(;)
      ident(Exit)operator(;)
    keyword(end)operator(;)

    keyword(if) ident(DoExpand) keyword(then) keyword(begin)
      ident(Expanded) operator(:=) ident(ExpandString)operator(()ident(s)operator(\))operator(;)
      keyword(if) ident(s) operator(<>) ident(Expanded) keyword(then)
        ident(Result) operator(:=) ident(Result) operator(+) string<delimiter(')content(   <)delimiter(')> operator(+) ident(Expanded) operator(+) char<delimiter(')content(>)delimiter(')>operator(;)
    keyword(end)operator(;)
  keyword(end)operator(;)

  keyword(function) ident(IntegerPreview)operator(()ident(Context)operator(:) ident(TRegContext)operator(\))operator(:) keyword(string)operator(;)
  keyword(begin)
    keyword(if) ident(Length)operator(()ident(Context)operator(.)ident(Data)operator(\)) operator(>=) ident(SizeOf)operator(()ident(Cardinal)operator(\)) keyword(then) keyword(begin)
      ident(Result) operator(:=) ident(DWORDPreview)operator(()ident(PInteger)operator(()ident(Context)operator(.)ident(Data)operator(\))operator(^)operator(\))operator(;)
    keyword(end) keyword(else)
      ident(Result) operator(:=) ident(BinaryPreview)operator(()ident(Context)operator(\))operator(;)
  keyword(end)operator(;)

  keyword(function) ident(MultiStringPreview)operator(()ident(Context)operator(:) ident(TRegContext)operator(\))operator(:) keyword(string)operator(;)
  keyword(var)
    ident(z)operator(:) keyword(string)operator(;)
    ident(SL)operator(:) ident(TStringList)operator(;)
    ident(i)operator(:) ident(Integer)operator(;)
  keyword(begin)
    ident(z) operator(:=) string<delimiter(')delimiter(')>operator(;)

    ident(SL) operator(:=) ident(TStringList)operator(.)ident(Create)operator(;)
    keyword(try)
      ident(RegMultiStringOfByteA)operator(()ident(Context)operator(.)ident(Data)operator(,) ident(SL)operator(,) ident(PrefWin)operator(.)ident(UseExtendedModelCB)operator(.)ident(Checked)operator(\))operator(;)

      keyword(for) ident(i) operator(:=) integer(0) keyword(to) ident(SL)operator(.)ident(Count)operator(-)integer(1) keyword(do)
        ident(z) operator(:=) ident(z) operator(+) ident(SL)operator([)ident(i)operator(]) operator(+) string<delimiter(')content(   )delimiter(')>operator(;)
    keyword(finally)
      ident(SL)operator(.)ident(Free)operator(;)
    keyword(end)operator(;)

    ident(Result) operator(:=) ident(Copy)operator(()ident(FriendlyStr)operator(()ident(z)operator(\))operator(,) integer(1)operator(,) ident(MaxPreviewLen)operator(\))operator(;)
  keyword(end)operator(;)

keyword(begin)
  ident(Result) operator(:=) string<delimiter(')delimiter(')>operator(;)

  keyword(if) ident(csDestroying) keyword(in) ident(PrefWin)operator(.)ident(ComponentState) keyword(then)
    ident(Exit)operator(;)

  keyword(if) operator(()ident(Context)operator(.)ident(Data) operator(=) keyword(nil)operator(\)) keyword(or) operator(()ident(Length)operator(()ident(Context)operator(.)ident(Data)operator(\)) operator(>) ident(RegMaxDataSize)operator(\)) keyword(then)
    ident(Exit)operator(;)

  keyword(if) ident(Length)operator(()ident(Context)operator(.)ident(Data)operator(\)) operator(>) ident(MaxPreviewLen) keyword(then)
    ident(SetLength)operator(()ident(Context)operator(.)ident(Data)operator(,) ident(MaxPreviewLen)operator(\))operator(;)

  keyword(if) ident(PrefWin)operator(.)ident(ShowAsBinaryCB)operator(.)ident(Checked) keyword(then) keyword(begin)
    ident(Result) operator(:=) ident(BinaryPreview)operator(()ident(Context)operator(\))operator(;)
  ident(Exit)operator(;) keyword(end)operator(;)

  keyword(case) ident(Context)operator(.)ident(Typ) keyword(of)
    ident(rdExpandString)operator(,) ident(rdString)operator(:) ident(Result) operator(:=) ident(StringPreview)operator(()ident(Context)operator(\))operator(;)
    ident(rdCardinal)operator(,) ident(rdCardBigEndian)operator(:) ident(Result) operator(:=) ident(IntegerPreview)operator(()ident(Context)operator(\))operator(;)
    ident(rdMultiString)operator(:) ident(Result) operator(:=) ident(MultiStringPreview)operator(()ident(Context)operator(\))operator(;)
  keyword(else)
    keyword(if) ident(PrefWin)operator(.)ident(Smart4BBCB)operator(.)ident(Checked) keyword(and) operator(()ident(Length)operator(()ident(Context)operator(.)ident(Data)operator(\)) operator(=) integer(4)operator(\)) keyword(then)
      ident(Result) operator(:=) ident(IntegerPreview)operator(()ident(Context)operator(\))
    keyword(else)
      ident(Result) operator(:=) ident(BinaryPreview)operator(()ident(Context)operator(\))operator(;)
  keyword(end)operator(;)
keyword(end)operator(;)

keyword(function) ident(ValueDataPreview)operator(()ident(Context)operator(:) ident(TRegContext)operator(\))operator(:) keyword(string)operator(;)
keyword(begin)
  ident(Result) operator(:=) ident(DataPreviewOfContext)operator(()ident(Context)operator(\))operator(;)
keyword(end)operator(;)

keyword(function) ident(IconOfDataType)operator(()ident(Typ)operator(:) ident(TRegDataType)operator(\))operator(:) ident(Integer)operator(;)
keyword(begin)
  keyword(if) ident(Typ) keyword(in) operator([)ident(rdNone)operator(..)ident(rdLastType)operator(]) keyword(then)
    ident(Result) operator(:=) ident(iconFirstType) operator(+) ident(Ord)operator(()ident(Typ)operator(\))
  keyword(else)
    ident(Result) operator(:=) ident(iconUnknownType)operator(;)
keyword(end)operator(;)

keyword(function) ident(ValueTypeIcon)operator(()ident(Context)operator(:) ident(TRegContext)operator(\))operator(:) ident(Integer)operator(;)
keyword(begin)
  ident(Result) operator(:=) ident(IconOfDataType)operator(()ident(Context)operator(.)ident(Typ)operator(\))operator(;)
keyword(end)operator(;)

keyword(function) ident(TValuesWin)operator(.)ident(UpdateValue)operator(()ident(Reg)operator(:) ident(TXRegistry)operator(;) ident(Item)operator(:) ident(TListItem)operator(\))operator(:) ident(Boolean)operator(;)
comment(//Return Value: True if something has changed)
keyword(var)
  ident(Size)operator(,) ident(Typ)operator(,) ident(Data)operator(:) keyword(string)operator(;)
  ident(Icon)operator(:) ident(Integer)operator(;)
  ident(Context)operator(:) ident(TRegContext)operator(;)
keyword(begin)
  ident(Result) operator(:=) ident(False)operator(;)
  keyword(if) keyword(not) ident(Assigned)operator(()ident(Item)operator(\)) keyword(then)
    ident(Exit)operator(;)

  ident(Context) operator(:=) ident(Reg)operator(.)ident(ReadContext)operator(()ident(RealValueName)operator(()ident(Item)operator(\))operator(\))operator(;)
  ident(Data) operator(:=) ident(ValueDataPreview)operator(()ident(Context)operator(\))operator(;)
  ident(Size) operator(:=) ident(ValueDataSize)operator(()ident(Context)operator(\))operator(;)
  ident(Typ) operator(:=) ident(ValueDataType)operator(()ident(Context)operator(\))operator(;)
  ident(Icon) operator(:=) ident(ValueTypeIcon)operator(()ident(Context)operator(\))operator(;)

  keyword(if) ident(Icon) operator(<>) ident(Item)operator(.)ident(ImageIndex) keyword(then) keyword(begin)
    ident(Item)operator(.)ident(ImageIndex) operator(:=) ident(Icon)operator(;)
    ident(Result) operator(:=) ident(True)operator(;)
  keyword(end)operator(;)

  keyword(while) ident(Item)operator(.)ident(SubItems)operator(.)ident(Count) operator(<) ident(Integer)operator(()ident(High)operator(()ident(TValueListColumn)operator(\))operator(\)) keyword(do)
    ident(Item)operator(.)ident(SubItems)operator(.)ident(Add)operator(()string<delimiter(')delimiter(')>operator(\))operator(;)

  keyword(if) ident(Size) operator(<>) ident(Item)operator(.)ident(SubItems)operator([)ident(SubItemIndex)operator([)ident(vlcSize)operator(])operator(]) keyword(then) keyword(begin)
    ident(Result) operator(:=) ident(True)operator(;)
    ident(Item)operator(.)ident(SubItems)operator([)ident(SubItemIndex)operator([)ident(vlcSize)operator(])operator(]) operator(:=) ident(Size)operator(;)
  keyword(end)operator(;)

  keyword(if) ident(Typ) operator(<>) ident(Item)operator(.)ident(SubItems)operator([)ident(SubItemIndex)operator([)ident(vlcType)operator(])operator(]) keyword(then) keyword(begin)
    ident(Result) operator(:=) ident(True)operator(;)
    ident(Item)operator(.)ident(SubItems)operator([)ident(SubItemIndex)operator([)ident(vlcType)operator(])operator(]) operator(:=) ident(Typ)operator(;)
  keyword(end)operator(;)

  keyword(if) operator(()ident(Data) operator(<>) ident(Item)operator(.)ident(SubItems)operator([)ident(SubItemIndex)operator([)ident(vlcData)operator(])operator(])operator(\)) keyword(then) keyword(begin)
    ident(Result) operator(:=) ident(True)operator(;)
    ident(Item)operator(.)ident(SubItems)operator([)ident(SubItemIndex)operator([)ident(vlcData)operator(])operator(]) operator(:=) ident(Data)operator(;)
    keyword(if) ident(IsMainValue)operator(()ident(Item)operator(\)) keyword(then)
      ident(RegTV)operator(.)ident(Repaint)operator(;)
  keyword(end)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(AppendNewValueInfos)operator(()ident(Item)operator(:) ident(TListItem)operator(;) ident(Context)operator(:) ident(TRegContext)operator(\))operator(;)
keyword(begin)
  ident(Item)operator(.)ident(ImageIndex) operator(:=) ident(ValueTypeIcon)operator(()ident(Context)operator(\))operator(;)
  keyword(with) ident(Item)operator(.)ident(SubItems) keyword(do) keyword(begin)
    ident(Append)operator(()ident(ValueDataSize)operator(()ident(Context)operator(\))operator(\))operator(;)
    ident(Append)operator(()ident(ValueDataType)operator(()ident(Context)operator(\))operator(\))operator(;)
    ident(Append)operator(()ident(ValueDataPreview)operator(()ident(Context)operator(\))operator(\))operator(;)
  keyword(end)operator(;)
keyword(end)operator(;)

keyword(function) ident(TValuesWin)operator(.)ident(AddValue)operator(()ident(Reg)operator(:) ident(TXRegistry)operator(;) keyword(const) ident(ValueName)operator(:) keyword(string)operator(;)
  ident(AppendInfos)operator(:) ident(Boolean) operator(=) ident(True)operator(\))operator(:) ident(TListItem)operator(;)
keyword(begin)
  ident(Result) operator(:=) ident(ValueList)operator(.)ident(Items)operator(.)ident(AddItem)operator(()keyword(nil)operator(,) operator(-)integer(1)operator(\))operator(;)
  ident(Result)operator(.)ident(Indent) operator(:=) operator(-)integer(1)operator(;)
  ident(SetRealValueName)operator(()ident(Result)operator(,) ident(ValueName)operator(\))operator(;)
  keyword(if) ident(AppendInfos) keyword(then)
    ident(AppendNewValueInfos)operator(()ident(Result)operator(,) ident(Reg)operator(.)ident(ReadContext)operator(()ident(ValueName)operator(\))operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TValuesWin)operator(.)ident(ValueListChange)operator(()ident(Sender)operator(:) ident(TObject)operator(;) ident(Item)operator(:) ident(TListItem)operator(;)
  ident(Change)operator(:) ident(TItemChange)operator(\))operator(;)
keyword(var)
  ident(ValueName)operator(:) keyword(string)operator(;)
  ident(Reg)operator(:) ident(TXRegistry)operator(;)

  keyword(function) ident(ComputeValuesCommon)operator(()ident(Reg)operator(:) ident(TXRegistry)operator(;) keyword(var) ident(DataType)operator(:) ident(TRegDataType)operator(\))operator(:) ident(Boolean)operator(;)
  keyword(var)
    ident(i)operator(:) ident(Integer)operator(;)
    ident(ItemType)operator(:) ident(TRegDataType)operator(;)
  keyword(begin)
    ident(Result) operator(:=) ident(False)operator(;)

    ident(i) operator(:=) integer(0)operator(;)
    ident(DataType) operator(:=) integer(0)operator(;)
    keyword(while) ident(i) operator(<) ident(ValueList)operator(.)ident(Items)operator(.)ident(Count) keyword(do) keyword(begin)
      ident(Item) operator(:=) ident(ValueList)operator(.)ident(Items)operator([)ident(i)operator(])operator(;)
      keyword(if) keyword(not) ident(Item)operator(.)ident(Selected) keyword(then) keyword(begin)
        ident(Inc)operator(()ident(i)operator(\))operator(;)
      ident(Continue)operator(;) keyword(end)operator(;)

      ident(ValueName) operator(:=) ident(RealValueName)operator(()ident(Item)operator(\))operator(;)
      keyword(if) ident(Reg)operator(.)ident(ValueReallyExists)operator(()ident(ValueName)operator(\)) keyword(then) keyword(begin)

        ident(ItemType) operator(:=) ident(Reg)operator(.)ident(GetDataType)operator(()ident(ValueName)operator(\))operator(;)
        keyword(if) keyword(not) ident(Result) keyword(then) keyword(begin)
          ident(DataType) operator(:=) ident(ItemType)operator(;)
          ident(Result) operator(:=) ident(True)operator(;)
        keyword(end) keyword(else) keyword(if) ident(ItemType) operator(<>) ident(DataType) keyword(then) keyword(begin)
          ident(Result) operator(:=) ident(False)operator(;)
          ident(DataType) operator(:=) integer(0)operator(;)
        ident(Break)operator(;) keyword(end)operator(;)

        keyword(with) ident(ValueNames) keyword(do)
          keyword(if) ident(Item)operator(.)ident(Focused) keyword(then)
            ident(Insert)operator(()integer(0)operator(,) ident(ValueName)operator(\))
          keyword(else)
            ident(Add)operator(()ident(ValueName)operator(\))operator(;)

      keyword(end) keyword(else) keyword(begin)
        ident(ShowMessage)operator(()string<delimiter(')content(Value has been deleted!)delimiter(')>operator(\))operator(;)
        ident(DataType) operator(:=) integer(0)operator(;)
        ident(Result) operator(:=) ident(False)operator(;)
        ident(Reload)operator(;)
      ident(Break)operator(;) keyword(end)operator(;)

      ident(Inc)operator(()ident(i)operator(\))operator(;)
    keyword(end)operator(;)
  keyword(end)operator(;)

keyword(begin)
  keyword(if) keyword(not) ident(Assigned)operator(()ident(Item)operator(\)) keyword(or) ident(ValueList)operator(.)ident(IsEditing) keyword(or) keyword(not) ident(ValueList)operator(.)ident(Enabled) keyword(then)
    ident(Exit)operator(;)

  keyword(if) ident(Change) operator(<>) ident(ctState) keyword(then)
    ident(Exit)operator(;)

  keyword(if) ident(csDestroying) keyword(in) ident(WorkWin)operator(.)ident(ComponentState) keyword(then)
    ident(Exit)operator(;)

  keyword(if) operator(()ident(ValueList)operator(.)ident(SelCount) operator(=) integer(0)operator(\)) keyword(then) keyword(begin)
    ident(ValueNames)operator(.)ident(Clear)operator(;)
    ident(WorkWin)operator(.)ident(ReInitShowPC)operator(;)
  ident(Exit)operator(;) keyword(end)operator(;)

  keyword(if) keyword(not) ident(Item)operator(.)ident(Focused) keyword(then)
    ident(Exit)operator(;)

  ident(WorkWin)operator(.)ident(ReInitShowPC)operator(;)

  ident(ValueNames)operator(.)ident(Clear)operator(;)
  ident(Reg) operator(:=) ident(TXRegistry)operator(.)ident(Create)operator(;)
  keyword(try)
    keyword(if) ident(OpenNodeOK)operator(()ident(Reg)operator(,) ident(RegTV)operator(.)ident(Selected)operator(\)) keyword(then) keyword(begin)
      ident(ValuesCommon) operator(:=) ident(ComputeValuesCommon)operator(()ident(Reg)operator(,) ident(ValueCommonType)operator(\))operator(;)
      keyword(if) ident(ValuesCommon) keyword(then)
        ident(WorkWin)operator(.)ident(ShowValues)operator(()ident(Reg)operator(\))operator(;)
    keyword(end)operator(;)
  keyword(finally)
    ident(Reg)operator(.)ident(Free)operator(;)
  keyword(end)operator(;)

  keyword(if) ident(csDestroying) keyword(in) ident(MainWin)operator(.)ident(ComponentState) keyword(then)
    ident(Exit)operator(;)

  keyword(if) ident(ActiveControl) operator(=) ident(ValueList) keyword(then)
    ident(MainWin)operator(.)ident(SetStatus)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TValuesWin)operator(.)ident(ValueListCustomDrawItem)operator(()ident(Sender)operator(:) ident(TCustomListView)operator(;)
  ident(Item)operator(:) ident(TListItem)operator(;) ident(State)operator(:) ident(TCustomDrawState)operator(;) keyword(var) ident(DefaultDraw)operator(:) ident(Boolean)operator(\))operator(;)
keyword(begin)
  keyword(with) ident(ValueList)operator(.)ident(Canvas)operator(.)ident(Font) keyword(do) keyword(begin)
    keyword(if) ident(Item)operator(.)ident(Focused) keyword(then)
      ident(Style) operator(:=) ident(Style) operator(+) operator([)ident(fsBold)operator(])operator(;)
    keyword(if) ident(ItemIsDefaultValue)operator(()ident(Item)operator(\)) keyword(then)
      ident(Color) operator(:=) ident(clBrightYellow)
    keyword(else)
      ident(Color) operator(:=) ident(ColorOfDataType)operator(()ident(TRegDataType)operator(()ident(Item)operator(.)ident(ImageIndex) operator(-) ident(iconFirstType)operator(\))operator(\))operator(;)
  keyword(end)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TValuesWin)operator(.)ident(ValueListDblClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(ValueListChange)operator(()ident(Sender)operator(,) ident(ValueList)operator(.)ident(ItemFocused)operator(,) ident(ctState)operator(\))operator(;)
  ident(MainPC)operator(.)ident(ActivePage) operator(:=) ident(WorkWin)operator(.)ident(WorkPage)operator(;)

  keyword(if) keyword(not) ident(Assigned)operator(()ident(ValueList)operator(.)ident(ItemFocused)operator(\)) keyword(then)
    ident(Exit)operator(;)

  keyword(if) ident(csDestroying) keyword(in) ident(WorkWin)operator(.)ident(ComponentState) keyword(then)
    ident(Exit)operator(;)

  ident(WorkWin)operator(.)ident(EditData)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TValuesWin)operator(.)ident(ValueListEditing)operator(()ident(Sender)operator(:) ident(TObject)operator(;) ident(Item)operator(:) ident(TListItem)operator(;)
  keyword(var) ident(AllowEdit)operator(:) ident(Boolean)operator(\))operator(;)
keyword(begin)
  keyword(if) keyword(not) ident(ValueLabelClicked) keyword(then) keyword(begin)
    ident(AllowEdit) operator(:=) ident(False)operator(;)
  ident(Exit)operator(;) keyword(end)operator(;)

  keyword(if) ident(ItemIsDefaultValue)operator(()ident(Item)operator(\)) keyword(then) comment(//unschön, aber beste Lösung bisher)
    ident(Keyboard)operator(.)ident(SimKey)operator(()ident(VK_DELETE)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TValuesWin)operator(.)ident(ValueListEdited)operator(()ident(Sender)operator(:) ident(TObject)operator(;) ident(Item)operator(:) ident(TListItem)operator(;)
  keyword(var) ident(S)operator(:) keyword(string)operator(\))operator(;)
keyword(var)
  ident(Old)operator(:) keyword(string)operator(;)
  ident(OldCaption)operator(:) keyword(string)operator(;)
keyword(begin)
  ident(OldCaption) operator(:=) ident(Item)operator(.)ident(Caption)operator(;)
  ident(Old) operator(:=) ident(RealValueName)operator(()ident(Item)operator(\))operator(;)

  keyword(if) ident(s) operator(=) ident(Old) keyword(then) keyword(begin)
    keyword(if) ident(ItemIsDefaultValue)operator(()ident(Item)operator(\)) keyword(then)
      ident(s) operator(:=) ident(DefaultValueCaption)operator(;)
  ident(Exit)operator(;) keyword(end)operator(;)

  ident(SpyThread)operator(.)ident(Suspend)operator(;)
  keyword(try)
    ident(Item)operator(.)ident(Caption) operator(:=) ident(s)operator(;)

    keyword(if) ident(TryRenameValue)operator(()ident(Old)operator(,) ident(s)operator(\)) keyword(then) keyword(begin)
      ident(SetRealValueName)operator(()ident(Item)operator(,) ident(s)operator(\))operator(;) comment(//Sichere Zuweisung des Standard-Flags)
      ident(s) operator(:=) ident(Item)operator(.)ident(Caption)operator(;) comment(//Anschließend externer Aufruf "Item.Caption := s"!)
    keyword(end) keyword(else) keyword(begin)
      ident(s) operator(:=) ident(OldCaption)operator(;)
    keyword(end)operator(;)

  keyword(finally)
    ident(SpyThread)operator(.)ident(Restart) operator(:=) ident(True)operator(;)
    ident(SpyThread)operator(.)ident(Resume)operator(;)
  keyword(end)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TValuesWin)operator(.)ident(ValueListKeyDown)operator(()ident(Sender)operator(:) ident(TObject)operator(;) keyword(var) ident(Key)operator(:) ident(Word)operator(;)
  ident(Shift)operator(:) ident(TShiftState)operator(\))operator(;)
keyword(var)
  ident(T)operator(:) keyword(string)operator(;)
  ident(Item)operator(:) ident(TListItem)operator(;)
keyword(begin)
  keyword(if) ident(ValueList)operator(.)ident(IsEditing) keyword(then)
    ident(Exit)operator(;)

  keyword(if) ident(csDestroying) keyword(in) ident(TreeWin)operator(.)ident(ComponentState) keyword(then)
    ident(Exit)operator(;)
    
  ident(Item) operator(:=) ident(ValueList)operator(.)ident(ItemFocused)operator(;)

  keyword(case) ident(Key) keyword(of)
    ident(VK_SPACE)operator(:) ident(JumpToSel)operator(()ident(ValueList)operator(\))operator(;)

    ident(VK_F9)operator(:) ident(SwapFonts)operator(()ident(ValueList)operator(\))operator(;)

    ident(VK_F5)operator(:) ident(Reload)operator(;)

    ident(VK_F12)operator(:) keyword(begin) comment(//Sort)
        keyword(if) ident(Assigned)operator(()ident(Item)operator(\)) keyword(then)
          ident(T) operator(:=) ident(Item)operator(.)ident(Caption)operator(;)
        ident(ValueList)operator(.)ident(SortType) operator(:=) ident(TSortType)operator(()integer(2) operator(-) operator(()ident(Integer)operator(()ident(ValueList)operator(.)ident(SortType)operator(\))operator(\))operator(\))operator(;)
        keyword(if) ident(ValueList)operator(.)ident(SortType) operator(=) ident(stNone) keyword(then)
          ident(TreeWin)operator(.)ident(RegTVChange)operator(()ident(Sender)operator(,) ident(RegTV)operator(.)ident(Selected)operator(\))operator(;)
        ident(ValueList)operator(.)ident(ItemFocused) operator(:=) ident(FindItem)operator(()ident(ValueList)operator(,) ident(T)operator(\))operator(;)
        keyword(if) ident(Assigned)operator(()ident(ValueList)operator(.)ident(ItemFocused)operator(\)) keyword(then)
          ident(ValueList)operator(.)ident(ItemFocused)operator(.)ident(MakeVisible)operator(()ident(True)operator(\))operator(;)
      keyword(end)operator(;)

    ident(VK_DELETE)operator(:) ident(DeleteMIClick)operator(()ident(Sender)operator(\))operator(;)

    ident(VK_RETURN)operator(:) ident(ValueListDblCLick)operator(()ident(Sender)operator(\))operator(;)

    ident(Ord)operator(()char<delimiter(')content(C)delimiter(')>operator(\))operator(:)
      keyword(if) keyword(not) ident(ValueList)operator(.)ident(IsEditing) keyword(then)
        ident(CopyPathMIClick)operator(()ident(Sender)operator(\))operator(;)

    ident(VK_SCROLL)operator(:) ident(CheckValueListHotTrack)operator(;)
  keyword(end)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TValuesWin)operator(.)ident(ValueListResize)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  keyword(with) ident(ValueList) keyword(do)
    ident(Columns)operator([)integer(3)operator(])operator(.)ident(Width) operator(:=) ident(ClientWidth) operator(-) operator(()integer(0) operator(+)
      ident(Columns)operator([)integer(0)operator(])operator(.)ident(Width) operator(+) ident(Columns)operator([)integer(1)operator(])operator(.)ident(Width) operator(+) ident(Columns)operator([)integer(2)operator(])operator(.)ident(Width)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TValuesWin)operator(.)ident(DeleteValue)operator(;)
keyword(var)
  ident(Item)operator(,) ident(NewSel)operator(:) ident(TListItem)operator(;)
  ident(YesToAll)operator(:) ident(Boolean)operator(;)
  ident(i)operator(:) ident(Integer)operator(;)

  keyword(procedure) ident(DeleteIt)operator(()ident(Item)operator(:) ident(TListItem)operator(\))operator(;)
  keyword(begin)
    ident(OpenCurKey)operator(;)
    keyword(if) ident(MainReg)operator(.)ident(DeleteValue)operator(()ident(RealValueName)operator(()ident(Item)operator(\))operator(\))
     keyword(and) keyword(not) ident(MainReg)operator(.)ident(ValueReallyExists)operator(()ident(RealValueName)operator(()ident(Item)operator(\))operator(\)) keyword(then) keyword(begin)
      ident(Item)operator(.)ident(Delete)operator(;)
    keyword(end) keyword(else) keyword(begin)
      ident(ShowMessage)operator(()string<delimiter(')content(Could not delete Value )delimiter(')> operator(+) ident(Quote)operator(()ident(RealValueName)operator(()ident(Item)operator(\))operator(\))operator(\))operator(;)
      ident(Inc)operator(()ident(i)operator(\))operator(;)
    keyword(end)operator(;)
    ident(MainReg)operator(.)ident(CloseKey)operator(;)

    keyword(if) ident(IsMainValue)operator(()ident(Item)operator(\)) keyword(then)
      ident(RegTV)operator(.)ident(Repaint)operator(;)
  keyword(end)operator(;)

keyword(begin)
  ident(SpyThread)operator(.)ident(Suspend)operator(;)

  ident(NewSel) operator(:=) ident(GetNextBestNotSelected)operator(()ident(ValueList)operator(.)ident(ItemFocused)operator(\))operator(;)

  ident(YesToAll) operator(:=) ident(False)operator(;)
  ident(i) operator(:=) integer(0)operator(;)
  keyword(while) ident(i) operator(<) ident(ValueList)operator(.)ident(Items)operator(.)ident(Count) keyword(do) keyword(begin)
    ident(Item) operator(:=) ident(ValueList)operator(.)ident(Items)operator([)ident(i)operator(])operator(;)
    keyword(if) keyword(not) ident(Item)operator(.)ident(Selected) keyword(then) keyword(begin)
      ident(Inc)operator(()ident(i)operator(\))operator(;)
    ident(Continue)operator(;) keyword(end)operator(;)

    keyword(if) ident(YesToAll) keyword(then)
      ident(DeleteIt)operator(()ident(Item)operator(\))
    keyword(else) keyword(begin)
      keyword(case) ident(MessageDlg)operator(()string<delimiter(')content(Do you really want to delete the Value )delimiter(')> operator(+)
        ident(Quote)operator(()ident(RealValueName)operator(()ident(Item)operator(\))operator(\)) operator(+) char<delimiter(')content(?)delimiter(')>operator(,)
           ident(mtConfirmation)operator(,) operator([)ident(mbYes)operator(,) ident(mbYesToAll)operator(,) ident(mbNo)operator(,) ident(mbCancel)operator(])operator(,) integer(0)operator(\)) keyword(of)
        ident(mrYes)operator(:) ident(DeleteIt)operator(()ident(Item)operator(\))operator(;)
        ident(mrYesToAll)operator(:) ident(YesToAll) operator(:=) ident(True)operator(;)
        ident(mrCancel)operator(:) ident(Exit)operator(;)
        ident(mrNo)operator(:) keyword(begin)
          ident(Item)operator(.)ident(Selected) operator(:=) ident(False)operator(;)
          ident(NewSel) operator(:=) ident(Item)operator(;)
        keyword(end)operator(;)
      keyword(end)operator(;)
    keyword(end)operator(;)
  keyword(end)operator(;)

  keyword(if) ident(Assigned)operator(()ident(NewSel)operator(\)) keyword(then) keyword(begin)
    ident(ValueList)operator(.)ident(ItemFocused) operator(:=) ident(NewSel)operator(;)
    ident(NewSel)operator(.)ident(Selected) operator(:=) ident(True)operator(;)
  keyword(end) keyword(else)
    ident(WorkWin)operator(.)ident(ReInitShowPC)operator(;)

  ident(SpyThread)operator(.)ident(Restart) operator(:=) ident(True)operator(;)
  ident(SpyThread)operator(.)ident(Resume)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TValuesWin)operator(.)ident(ZeromizeValue)operator(;)
keyword(var)
  ident(Item)operator(:) ident(TListItem)operator(;)
  ident(YesToAll)operator(:) ident(Boolean)operator(;)
  ident(i)operator(:) ident(Integer)operator(;)

  keyword(procedure) ident(ZeromizeIt)operator(()ident(Item)operator(:) ident(TListItem)operator(\))operator(;)
  keyword(begin)
    keyword(with) ident(MainReg) keyword(do) keyword(begin)
      ident(OpenCurKey)operator(;)
      ident(ZeromizeValue)operator(()ident(RealValueName)operator(()ident(Item)operator(\))operator(\))operator(;)
      ident(UpdateValue)operator(()ident(MainReg)operator(,) ident(Item)operator(\))operator(;)
      ident(CloseKey)operator(;)
    keyword(end)operator(;)
  keyword(end)operator(;)

keyword(begin)
  ident(SpyThread)operator(.)ident(Suspend)operator(;)

  ident(YesToAll) operator(:=) ident(False)operator(;)
  ident(i) operator(:=) integer(0)operator(;)
  keyword(while) ident(i) operator(<) ident(ValueList)operator(.)ident(Items)operator(.)ident(Count) keyword(do) keyword(begin)
    ident(Item) operator(:=) ident(ValueList)operator(.)ident(Items)operator([)ident(i)operator(])operator(;)
    keyword(if) keyword(not) ident(Item)operator(.)ident(Selected) keyword(then) keyword(begin)
      ident(Inc)operator(()ident(i)operator(\))operator(;)
    ident(Continue)operator(;) keyword(end)operator(;)

    keyword(if) ident(YesToAll) keyword(then)
      ident(ZeromizeIt)operator(()ident(Item)operator(\))
    keyword(else)
      keyword(case) ident(MessageDlg)operator(()string<delimiter(')content(Do you really want to zeromize ValueData of )delimiter(')> operator(+)
        ident(Quote)operator(()ident(RealValueName)operator(()ident(Item)operator(\))operator(\)) operator(+) string<delimiter(')content( ?)delimiter(')>operator(,)
        ident(mtConfirmation)operator(,) operator([)ident(mbYes)operator(,) ident(mbYesToAll)operator(,) ident(mbNo)operator(,) ident(mbCancel)operator(])operator(,) integer(0)operator(\)) keyword(of)

      ident(mrYes)operator(:) keyword(begin)
        ident(ZeromizeIt)operator(()ident(Item)operator(\))operator(;)
        ident(Inc)operator(()ident(i)operator(\))operator(;)
      keyword(end)operator(;)

      ident(mrYesToAll)operator(:) keyword(begin)
                    ident(YesToAll) operator(:=) ident(True)operator(;)
                    ident(ZeromizeIt)operator(()ident(Item)operator(\))operator(;)
                  keyword(end)operator(;)
      ident(mrCancel)operator(:) ident(Exit)operator(;)
      keyword(end)operator(;)
      
    keyword(if) ident(IsMainValue)operator(()ident(Item)operator(\)) keyword(then)
      ident(RegTV)operator(.)ident(Repaint)operator(;)
  keyword(end)operator(;)


  ident(SpyThread)operator(.)ident(Resume)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TValuesWin)operator(.)ident(ValueListPUPopup)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(var)
  ident(Writable)operator(,) ident(ValueOK)operator(,) ident(OnlyOneValue)operator(,) ident(OneValueOK)operator(:) ident(Boolean)operator(;)
  ident(Item)operator(:) ident(TListItem)operator(;)
keyword(begin)
  keyword(if) ident(Assigned)operator(()ident(ValueList)operator(.)ident(ItemFocused)operator(\)) keyword(then)
    ident(ValueList)operator(.)ident(ItemFocused)operator(.)ident(Selected) operator(:=) ident(True)operator(;)

  keyword(if) ident(csDestroying) keyword(in) operator(()ident(TreeWin)operator(.)ident(ComponentState) operator(+) ident(PrefWin)operator(.)ident(ComponentState)operator(\)) keyword(then)
    ident(Exit)operator(;)

  ident(Writable) operator(:=) keyword(not) ident(TreeWin)operator(.)ident(CantWrite)operator(;)
  ident(NewDefaultValueMI)operator(.)ident(Visible) operator(:=) ident(Writable)operator(;)
  ident(NewStringMI)operator(.)ident(Visible) operator(:=) ident(Writable)operator(;)
  ident(NewDWORDMI)operator(.)ident(Visible) operator(:=) ident(Writable)operator(;)
  ident(NewBinaryMI)operator(.)ident(Visible) operator(:=) ident(Writable)operator(;)
  ident(NewMultiStringMI)operator(.)ident(Visible) operator(:=) ident(Writable)operator(;)
  ident(NewElseMI)operator(.)ident(Visible) operator(:=) ident(Writable)operator(;)

  ident(ValueOK) operator(:=) ident(Writable) keyword(and) operator(()ident(ValueList)operator(.)ident(ItemFocused) operator(<>) keyword(nil)operator(\))operator(;)
  ident(OnlyOneValue) operator(:=) ident(ValueList)operator(.)ident(SelCount) operator(=) integer(1)operator(;)
  ident(OneValueOK) operator(:=) ident(OnlyOneValue) keyword(and) ident(ValueOK)operator(;)

  ident(EditMI)operator(.)ident(Visible) operator(:=) ident(ValueOK)operator(;)
  ident(EditBinaryMI)operator(.)ident(Visible) operator(:=) ident(ValueOK)operator(;)
  ident(DublicateMI)operator(.)ident(Visible) operator(:=) ident(OneValueOK)operator(;)
  ident(CopyPathMI)operator(.)ident(Visible) operator(:=) ident(OnlyOneValue)operator(;)
  ident(CopyDataPreviewMI)operator(.)ident(Visible) operator(:=) ident(OnlyOneValue)operator(;)
  ident(TakeAsMainValueMI)operator(.)ident(Visible) operator(:=) ident(OnlyOneValue)operator(;)
  ident(RenameMI)operator(.)ident(Visible) operator(:=) ident(OneValueOK)operator(;)
  ident(DeleteMI)operator(.)ident(Visible) operator(:=) ident(ValueOK)operator(;)
  ident(ZeromizeMI)operator(.)ident(Visible) operator(:=) ident(ValueOK)operator(;)

  ident(Item) operator(:=) ident(ValueList)operator(.)ident(ItemFocused)operator(;)
  keyword(if) keyword(not) ident(Assigned)operator(()ident(Item)operator(\)) keyword(then)
    ident(Exit)operator(;)

  ident(TakeAsMainValueMI)operator(.)ident(Checked) operator(:=) ident(RealValueName)operator(()ident(Item)operator(\)) operator(=) ident(PrefWin)operator(.)ident(MainPreviewE)operator(.)ident(Text)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TValuesWin)operator(.)ident(FormKeyDown)operator(()ident(Sender)operator(:) ident(TObject)operator(;) keyword(var) ident(Key)operator(:) ident(Word)operator(;)
  ident(Shift)operator(:) ident(TShiftState)operator(\))operator(;)
keyword(begin)
  keyword(if) ident(ValueList)operator(.)ident(IsEditing) keyword(then)
    ident(Exit)operator(;)

  keyword(if) ident(csDestroying) keyword(in) ident(MainWin)operator(.)ident(ComponentState) keyword(then)
    ident(Exit)operator(;)
  ident(MainWin)operator(.)ident(FormKeyDown)operator(()ident(Sender)operator(,) ident(Key)operator(,) ident(Shift)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TValuesWin)operator(.)ident(ValueListDeletion)operator(()ident(Sender)operator(:) ident(TObject)operator(;) ident(Item)operator(:) ident(TListItem)operator(\))operator(;)
keyword(begin)
  keyword(if) ident(Assigned)operator(()ident(SpyThread)operator(\)) keyword(then)
    ident(SpyThread)operator(.)ident(Restart) operator(:=) ident(True)operator(;)

  keyword(if) ident(csDestroying) keyword(in) ident(WorkWin)operator(.)ident(ComponentState) keyword(then)
    ident(Exit)operator(;)

  keyword(if) ident(Assigned)operator(()ident(ShowPC)operator(.)ident(ActivePage)operator(\))
   keyword(and) ident(Item)operator(.)ident(Selected) keyword(and) ident(Item)operator(.)ident(Focused) keyword(then) keyword(begin)
    ident(ValueList)operator(.)ident(ItemFocused) operator(:=) ident(GetNextBest)operator(()ident(Item)operator(\))operator(;)
    ident(WorkWin)operator(.)ident(ReInitShowPC)operator(;)
  keyword(end)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TValuesWin)operator(.)ident(DeleteMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  keyword(if) ident(ValueList)operator(.)ident(IsEditing) keyword(then)
    ident(Exit)operator(;)

  ident(DeleteValue)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TValuesWin)operator(.)ident(RenameMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  keyword(if) ident(Assigned)operator(()ident(ValueList)operator(.)ident(ItemFocused)operator(\)) keyword(then) keyword(begin)
    ident(ValueLabelClicked) operator(:=) ident(True)operator(;)
    ident(ValueList)operator(.)ident(ItemFocused)operator(.)ident(EditCaption)operator(;)
    ident(ValueLabelClicked) operator(:=) ident(False)operator(;)
  keyword(end)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TValuesWin)operator(.)ident(NewBigEndianMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(CreateValue)operator(()ident(rdCardBigEndian)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TValuesWin)operator(.)ident(NewExpandStringMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(CreateValue)operator(()ident(rdExpandString)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TValuesWin)operator(.)ident(NewMultiStringMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(CreateValue)operator(()ident(rdMultiString)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TValuesWin)operator(.)ident(NewStrangeTypeMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(CreateValue)operator(()ident(TRegDataType)operator(()ident(TMenuItem)operator(()ident(Sender)operator(\))operator(.)ident(Tag)operator(\))operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TValuesWin)operator(.)ident(NewDefaultValueMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(var)
  ident(DefaultItem)operator(:) ident(TListItem)operator(;)
  ident(i)operator(:) ident(Integer)operator(;)
keyword(begin)
  keyword(if) ident(csDestroying) keyword(in) operator(()ident(TreeWin)operator(.)ident(ComponentState) operator(+) ident(MainWin)operator(.)ident(ComponentState)operator(\)) keyword(then)
    ident(Exit)operator(;)
  keyword(if) ident(TreeWin)operator(.)ident(CantWrite) keyword(then)
    ident(Exit)operator(;)

  keyword(with) ident(MainReg) keyword(do) keyword(begin)
    keyword(try)
      ident(OpenCurKey)operator(;)

      keyword(if) ident(StandardValueExists) keyword(then) keyword(begin)
        ident(ShowMessage)operator(()string<delimiter(')content(Default Value already exists.)delimiter(')>operator(\))operator(;)
        ident(CloseKey)operator(;)
      ident(Exit)operator(;) keyword(end)operator(;)

      ident(WriteString)operator(()string<delimiter(')delimiter(')>operator(,) string<delimiter(')delimiter(')>operator(\))operator(;)

      keyword(if) keyword(not) ident(StandardValueExists) keyword(then) keyword(begin)
        ident(ShowMessage)operator(()string<delimiter(')content(Could not create Default Value.)delimiter(')>operator(\))operator(;)
        ident(CloseKey)operator(;)
      ident(Exit)operator(;) keyword(end)operator(;)

      ident(ValuesWin)operator(.)ident(AddValue)operator(()ident(MainReg)operator(,) string<delimiter(')delimiter(')>operator(\))operator(;)
    keyword(finally)
      ident(CloseKey)operator(;)
    keyword(end)operator(;)
  keyword(end)operator(;)

  keyword(with) ident(ValueList)operator(.)ident(Items) keyword(do) keyword(begin)
    ident(DefaultItem) operator(:=) keyword(nil)operator(;)
    keyword(for) ident(i) operator(:=) integer(0) keyword(to) ident(Count)operator(-)integer(1) keyword(do)
      keyword(if) ident(ItemIsDefaultValue)operator(()ident(Item)operator([)ident(i)operator(])operator(\)) keyword(then)
        ident(Break)operator(;)

    keyword(if) ident(i) operator(<) ident(Count) keyword(then)
      ident(DefaultItem) operator(:=) ident(Item)operator([)ident(i)operator(])operator(;)
  keyword(end)operator(;)

  keyword(if) keyword(not) ident(Assigned)operator(()ident(DefaultItem)operator(\)) keyword(then)
    ident(ShowMessage)operator(()string<delimiter(')content(Error: Lost Default Value!)delimiter(')>operator(\))
  keyword(else) keyword(begin)
    ident(SelectItemOnly)operator(()ident(ValueList)operator(,) ident(DefaultItem)operator(\))operator(;)
    ident(MainWin)operator(.)ident(StatusBarUpdate)operator(;)
    ident(ValueListDblClick)operator(()ident(Sender)operator(\))operator(;)
  keyword(end)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TValuesWin)operator(.)ident(ValueListChanging)operator(()ident(Sender)operator(:) ident(TObject)operator(;) ident(Item)operator(:) ident(TListItem)operator(;)
  ident(Change)operator(:) ident(TItemChange)operator(;) keyword(var) ident(AllowChange)operator(:) ident(Boolean)operator(\))operator(;)
keyword(begin)
  keyword(if) ident(Item) operator(=) keyword(nil) keyword(then)
    ident(AllowChange) operator(:=) ident(False)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TValuesWin)operator(.)ident(ValueListMouseDown)operator(()ident(Sender)operator(:) ident(TObject)operator(;) ident(Button)operator(:) ident(TMouseButton)operator(;)
  ident(Shift)operator(:) ident(TShiftState)operator(;) ident(X)operator(,) ident(Y)operator(:) ident(Integer)operator(\))operator(;)
keyword(begin)
  ident(ValueLabelClicked) operator(:=) ident(False)operator(;)
  keyword(with) ident(ValueList) keyword(do)
    keyword(if) operator(()operator([)ident(htOnIcon)operator(,) ident(htOnLabel)operator(]) operator(*) ident(GetHitTestInfoAt)operator(()ident(X)operator(,) ident(Y)operator(\))operator(\)) operator(<>) operator([)operator(]) keyword(then)
      ident(ValueLabelClicked) operator(:=) ident(True)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TValuesWin)operator(.)ident(EditBinaryMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  keyword(if) ident(csDestroying) keyword(in) ident(WorkWin)operator(.)ident(ComponentState) keyword(then)
    ident(Exit)operator(;)

  ident(WorkWin)operator(.)ident(ShowAsBinary) operator(:=) ident(True)operator(;)
  ident(ValueListChange)operator(()ident(Sender)operator(,) ident(ValueList)operator(.)ident(ItemFocused)operator(,) ident(ctState)operator(\))operator(;)
  ident(ValueListDblClick)operator(()ident(Sender)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TValuesWin)operator(.)ident(EditMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(ValueListDblClick)operator(()ident(Sender)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TValuesWin)operator(.)ident(ValueListCustomDrawSubItem)operator(()ident(Sender)operator(:) ident(TCustomListView)operator(;)
  ident(Item)operator(:) ident(TListItem)operator(;) ident(SubItem)operator(:) ident(Integer)operator(;) ident(State)operator(:) ident(TCustomDrawState)operator(;)
  keyword(var) ident(DefaultDraw)operator(:) ident(Boolean)operator(\))operator(;)
keyword(begin)
  keyword(with) ident(ValueList)operator(.)ident(Canvas)operator(.)ident(Font) keyword(do) keyword(begin)
    ident(Style) operator(:=) operator([)operator(])operator(;)
    keyword(if) ident(SubItem) operator(=) integer(1) keyword(then)
      ident(Color) operator(:=) ident(clSilver)
    keyword(else)
      ident(Color) operator(:=) ident(ColorOfDataType)operator(()ident(TRegDataType)operator(()ident(Item)operator(.)ident(ImageIndex) operator(-) ident(iconFirstType)operator(\))operator(\))operator(;)
  keyword(end)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TValuesWin)operator(.)ident(ValueListCompare)operator(()ident(Sender)operator(:) ident(TObject)operator(;) ident(Item1)operator(,) ident(Item2)operator(:) ident(TListItem)operator(;)
  ident(Data)operator(:) ident(Integer)operator(;) keyword(var) ident(Compare)operator(:) ident(Integer)operator(\))operator(;)
keyword(begin)
  keyword(case) ident(SortBy) keyword(of)
    ident(vlcName)operator(:) ident(Compare) operator(:=) ident(AnsiCompareText)operator(()ident(RealValueName)operator(()ident(Item1)operator(\))operator(,) ident(RealValueName)operator(()ident(Item2)operator(\))operator(\))operator(;)
    ident(vlcSize)operator(:) ident(Compare) operator(:=) ident(Integer)operator(()
      ident(StrToIntDef)operator(()ident(Item1)operator(.)ident(SubItems)operator([)ident(SubItemIndex)operator([)ident(vlcSize)operator(])operator(])operator(,) operator(-)integer(1)operator(\)) operator(>)
      ident(StrToIntDef)operator(()ident(Item2)operator(.)ident(SubItems)operator([)ident(SubItemIndex)operator([)ident(vlcSize)operator(])operator(])operator(,) operator(-)integer(1)operator(\))operator(\))operator(;)
    ident(vlcData)operator(:) ident(Compare) operator(:=) ident(Integer)operator(()ident(Item1)operator(.)ident(SubItems)operator([)ident(SubItemIndex)operator([)ident(vlcData)operator(])operator(]) operator(>)
      ident(Item2)operator(.)ident(SubItems)operator([)ident(SubItemIndex)operator([)ident(vlcData)operator(])operator(])operator(\))operator(;)
    ident(vlcType)operator(:) ident(Compare) operator(:=) ident(Integer)operator(()ident(Item1)operator(.)ident(ImageIndex) operator(>) ident(Item2)operator(.)ident(ImageIndex)operator(\))operator(;)
  keyword(end)operator(;)

  keyword(if) ident(Assigned)operator(()ident(SortByColumn)operator(\))
   keyword(and) operator(()ident(SortByColumn)operator(.)ident(ImageIndex) operator(=) ident(iconSortArrowDesc)operator(\)) keyword(then)
    ident(Compare) operator(:=) integer(1) operator(-) ident(Compare)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TValuesWin)operator(.)ident(ValueListColumnClick)operator(()ident(Sender)operator(:) ident(TObject)operator(;) ident(Column)operator(:) ident(TListColumn)operator(\))operator(;)
keyword(begin)
  keyword(case) ident(Column)operator(.)ident(ImageIndex) keyword(of)
    ident(iconSortArrowAsc)operator(:) ident(Column)operator(.)ident(ImageIndex) operator(:=) ident(iconSortArrowDesc)operator(;)
    ident(iconSortArrowDesc)operator(:) ident(Column)operator(.)ident(ImageIndex) operator(:=) operator(-)integer(1)operator(;)
  keyword(else)
    keyword(if) ident(Assigned)operator(()ident(SortByColumn)operator(\)) keyword(then)
      ident(SortByColumn)operator(.)ident(ImageIndex) operator(:=) operator(-)integer(1)operator(;)
    keyword(if) ident(TValueListColumn)operator(()ident(Column)operator(.)ident(Tag)operator(\)) keyword(in) ident(ValueListColumnRange) keyword(then)
      ident(SortBy) operator(:=) ident(TValueListColumn)operator(()ident(Column)operator(.)ident(Tag)operator(\))
    keyword(else)
      ident(ShowMessage)operator(()string<delimiter(')content(Unknown Column Tag)delimiter(')>operator(\))operator(;)
    ident(Column)operator(.)ident(ImageIndex) operator(:=) ident(iconSortArrowAsc)operator(;)
  keyword(end)operator(;)

  keyword(if) ident(Column)operator(.)ident(ImageIndex) operator(=) operator(-)integer(1) keyword(then)
    ident(ValueList)operator(.)ident(SortType) operator(:=) ident(stNone)
  keyword(else) keyword(begin)
    ident(ValueList)operator(.)ident(SortType) operator(:=) ident(stData)operator(;)
    ident(SortByColumn) operator(:=) ident(Column)operator(;)
  keyword(end)operator(;)

  ident(Update)operator(;)
  ident(ValueList)operator(.)ident(AlphaSort)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TValuesWin)operator(.)ident(CloneValue)operator(;)
keyword(var)
  ident(OldName)operator(,) ident(NewName)operator(:) keyword(string)operator(;)

  keyword(function) ident(GetNewName)operator(()ident(Reg)operator(:) ident(TXRegistry)operator(;) keyword(const) ident(OldName)operator(:) keyword(string)operator(\))operator(:) keyword(string)operator(;)
  keyword(var)
    ident(i)operator(:) ident(Integer)operator(;)
    ident(Prefix)operator(:) keyword(string)operator(;)
  keyword(begin)
    keyword(if) ident(OldName) operator(=) string<delimiter(')delimiter(')> keyword(then)
      ident(Result) operator(:=) string<delimiter(')content(New Default Value)delimiter(')>
    keyword(else) keyword(if) ident(Copy)operator(()ident(OldName)operator(,) integer(1)operator(,) integer(4)operator(\)) operator(<>) string<delimiter(')content(New )delimiter(')> keyword(then)
      ident(Result) operator(:=) string<delimiter(')content(New )delimiter(')> operator(+) ident(OldName)
    keyword(else)
      ident(Result) operator(:=) ident(OldName)operator(;)

    ident(Prefix) operator(:=) ident(Result)operator(;)
    ident(i) operator(:=) integer(1)operator(;)
    keyword(while) ident(Reg)operator(.)ident(ValueExists)operator(()ident(Result)operator(\)) keyword(do) keyword(begin)
      ident(Result) operator(:=) ident(Prefix) operator(+) char<delimiter(')content( )delimiter(')> operator(+) ident(IntToStr)operator(()ident(i)operator(\))operator(;)
      ident(Inc)operator(()ident(i)operator(\))operator(;)
    keyword(end)operator(;)
  keyword(end)operator(;)

keyword(begin)
  keyword(if) ident(csDestroying) keyword(in) ident(TreeWin)operator(.)ident(ComponentState) keyword(then)
    ident(Exit)operator(;)

  keyword(if) ident(TreeWin)operator(.)ident(CantWrite) keyword(then)
    ident(Exit)operator(;)

  ident(OldName) operator(:=) ident(RealValueName)operator(()ident(ValueList)operator(.)ident(ItemFocused)operator(\))operator(;)

  keyword(try)
    ident(OpenCurKey)operator(;)

    ident(NewName) operator(:=) ident(GetNewName)operator(()ident(MainReg)operator(,) ident(OldName)operator(\))operator(;)
    ident(MainReg)operator(.)ident(CopyValue)operator(()ident(OldName)operator(,) ident(NewName)operator(\))operator(;)
    ident(AddValue)operator(()ident(MainReg)operator(,) ident(NewName)operator(\))operator(;)
  keyword(finally)
    ident(MainReg)operator(.)ident(CloseKey)operator(;)
  keyword(end)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TValuesWin)operator(.)ident(DublicateMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(CloneValue)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TValuesWin)operator(.)ident(CopyDataPreviewMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  keyword(if) ident(ValueList)operator(.)ident(IsEditing) keyword(then)
    ident(Exit)operator(;)

  ident(CopyDataPreview)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TValuesWin)operator(.)ident(CopyDataPreview)operator(;)
keyword(begin)
  ident(OpenCurKey)operator(;)
  ident(Clipboard)operator(.)ident(AsText) operator(:=) ident(DataPreviewOfContext)operator(()ident(MainReg)operator(.)ident(ReadContext)operator(()
    ident(RealValueName)operator(()ident(ValueList)operator(.)ident(ItemFocused)operator(\))operator(\))operator(\))operator(;)
  ident(MainReg)operator(.)ident(CloseKey)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TValuesWin)operator(.)ident(UpdateValues)operator(()ident(SelectedOnly)operator(:) ident(Boolean) operator(=) ident(False)operator(\))operator(;)
keyword(var)
  ident(i)operator(:) ident(Integer)operator(;)
  ident(Reg)operator(:) ident(TXRegistry)operator(;)
keyword(begin)
  keyword(if) keyword(not) ident(Started) keyword(then)
    ident(Exit)operator(;)

  ident(SpyThread)operator(.)ident(Suspend)operator(;)

  ident(Reg) operator(:=) ident(TXRegistry)operator(.)ident(Create)operator(;)
  keyword(try)
    keyword(if) ident(OpenNodeOK)operator(()ident(Reg)operator(,) ident(RegTV)operator(.)ident(Selected)operator(\)) keyword(then)
      keyword(with) ident(ValueList)operator(.)ident(Items) keyword(do) keyword(begin)
        keyword(for) ident(i) operator(:=) integer(0) keyword(to) ident(Count)operator(-)integer(1) keyword(do) keyword(begin)
          keyword(if) ident(SelectedOnly) keyword(and) keyword(not) ident(Item)operator([)ident(i)operator(])operator(.)ident(Selected) keyword(then)
            ident(Continue)operator(;)
          ident(UpdateValue)operator(()ident(Reg)operator(,) ident(Item)operator([)ident(i)operator(])operator(\))operator(;)
        keyword(end)operator(;)
      keyword(end)operator(;)
  keyword(finally)
    ident(Reg)operator(.)ident(Free)operator(;)
  keyword(end)operator(;)

  ident(SpyThread)operator(.)ident(Resume)operator(;)
keyword(end)operator(;)

keyword(function) ident(TValuesWin)operator(.)ident(TryRenameValue)operator(()ident(OldName)operator(:) keyword(string)operator(;)
  keyword(var) ident(NewName)operator(:) keyword(string)operator(\))operator(:) ident(Boolean)operator(;)
keyword(var)
  ident(x)operator(:) keyword(string)operator(;)
keyword(begin)
  ident(Result) operator(:=) ident(False)operator(;)
  keyword(if) ident(OldName) operator(=) ident(NewName) keyword(then)
    ident(Exit)operator(;)

  keyword(if) operator(()ident(Length)operator(()ident(NewName)operator(\)) operator(>) ident(RegMaxValueNameLen)operator(\)) keyword(then) keyword(begin)
    ident(NewName) operator(:=) ident(Copy)operator(()ident(NewName)operator(,) integer(1)operator(,) ident(RegMaxValueNameLen)operator(\))operator(;)
    keyword(if) ident(MessageDlg)operator(()
     string<delimiter(')content(The maximum size of a value name is )delimiter(')> operator(+) ident(IntToStr)operator(()ident(RegMaxValueNameLen)operator(\)) operator(+) string<delimiter(')content( characters.)delimiter(')> operator(+) ident(EOL) operator(+)
     string<delimiter(')content(Shorten the value name to:)delimiter(')> operator(+) ident(EOL) operator(+)
     ident(Quote)operator(()ident(StringWrap)operator(()ident(NewName)operator(,) integer(80)operator(\))operator(\))operator(,)
     ident(mtConfirmation)operator(,) operator([)ident(mbOK)operator(,) ident(mbCancel)operator(])operator(,) integer(0)operator(\)) operator(<>) ident(mrOK) keyword(then)
      ident(Exit)operator(;)
  keyword(end)operator(;)

  keyword(if) ident(CharIn)operator(()ident(NewName)operator(,) operator([)char(#0)operator(..)char(#31)operator(])operator(\)) keyword(then) keyword(begin)
    ident(NewName) operator(:=) ident(ReplaceChars)operator(()ident(NewName)operator(,) operator([)char(#0)operator(..)char(#31)operator(])operator(,) char<delimiter(')content(#)delimiter(')>operator(\))operator(;)
    keyword(if) ident(MessageDlg)operator(()string<delimiter(')content(The following chars are not allowed in ValueNames:)delimiter(')> operator(+) ident(EOL) operator(+)
     string<delimiter(')content(- Control chars (#0..#31\))delimiter(')> operator(+) ident(EOL) operator(+)
     string<delimiter(')content(The following name is allowed:)delimiter(')> operator(+) ident(EOL) operator(+)
     ident(NewName) operator(+) ident(EOL) operator(+)
     string<delimiter(')content(Use this name instead?)delimiter(')>operator(,)
     ident(mtConfirmation)operator(,) operator([)ident(mbYes)operator(,) ident(mbNo)operator(])operator(,) integer(0)operator(\)) operator(<>) ident(mrYes) keyword(then)
      ident(Exit)operator(;)
  keyword(end)operator(;)

  keyword(if) keyword(not) ident(OpenCurKey) keyword(then)
    ident(Exit)operator(;)

  keyword(if) ident(SameText)operator(()ident(OldName)operator(,) ident(NewName)operator(\)) keyword(then) keyword(begin) comment(//CharCase ändern)
    ident(x) operator(:=) ident(MainReg)operator(.)ident(GetFreeValueName)operator(;)
    ident(MainReg)operator(.)ident(RenameValue)operator(()ident(OldName)operator(,) ident(x)operator(\))operator(;)
    ident(MainReg)operator(.)ident(RenameValue)operator(()ident(x)operator(,) ident(NewName)operator(\))operator(;)
  keyword(end) keyword(else) keyword(begin)
    keyword(if) keyword(not) ident(MainReg)operator(.)ident(ValueReallyExists)operator(()ident(NewName)operator(\)) keyword(then) keyword(begin)
      ident(MainReg)operator(.)ident(RenameValue)operator(()ident(OldName)operator(,) ident(NewName)operator(\))operator(;)
    keyword(end) keyword(else) keyword(begin)
      keyword(if) ident(NewName) operator(=) string<delimiter(')delimiter(')> keyword(then)
        ident(ShowMessage)operator(()string<delimiter(')content(Default value already exists.)delimiter(')>operator(\))
      keyword(else)
        ident(ShowMessage)operator(()string<delimiter(')content(Value )delimiter(')> operator(+) ident(Quote)operator(()ident(NewName)operator(\)) operator(+) string<delimiter(')content( already exists.)delimiter(')>operator(\))operator(;)
    ident(Exit)operator(;) keyword(end)operator(;)
  keyword(end)operator(;)
  ident(MainReg)operator(.)ident(CloseKey)operator(;)

  keyword(if) ident(TextIn)operator(()ident(NewName)operator(,) string<delimiter(')content(default)delimiter(')>operator(\)) keyword(then)
    ident(AddHint)operator(()string<delimiter(')content(You can create default values by empty string ValueNames.)delimiter(')>operator(\))operator(;)
    
  ident(Result) operator(:=) ident(True)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TValuesWin)operator(.)ident(ZeromizeMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(ZeromizeValue)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TValuesWin)operator(.)ident(CopyPathMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  keyword(if) ident(ValueList)operator(.)ident(IsEditing) keyword(then)
    ident(Exit)operator(;)

  keyword(if) ident(csDestroying) keyword(in) ident(MainWin)operator(.)ident(ComponentState) keyword(then)
    ident(Exit)operator(;)

  ident(MainWin)operator(.)ident(CopyPathClick)operator(()ident(Sender)operator(\))operator(;)
keyword(end)operator(;)

keyword(function) ident(TValuesWin)operator(.)ident(FindItemByRealName)operator(()keyword(const) ident(ValueName)operator(:) keyword(string)operator(\))operator(:) ident(Integer)operator(;)
keyword(begin)
  keyword(with) ident(ValueList)operator(.)ident(Items) keyword(do) keyword(begin)
    keyword(for) ident(Result) operator(:=) integer(0) keyword(to) ident(Count)operator(-)integer(1) keyword(do)
      keyword(if) ident(SameText)operator(()ident(RealValueName)operator(()ident(Item)operator([)ident(Result)operator(])operator(\))operator(,) ident(ValueName)operator(\)) keyword(then)
        ident(Exit)operator(;)
  keyword(end)operator(;)
  ident(Result) operator(:=) operator(-)integer(1)operator(;)
keyword(end)operator(;)

keyword(function) ident(TValuesWin)operator(.)ident(FocusItem)operator(()ident(ARealValueName)operator(:) keyword(string)operator(;)
  ident(FocusValueList)operator(:) ident(Boolean) operator(=) ident(False)operator(\))operator(:) ident(Boolean)operator(;)
keyword(var)
  ident(i)operator(:) ident(Integer)operator(;)
keyword(begin)
  keyword(with) ident(ValueList) keyword(do) keyword(begin)
    ident(i) operator(:=) ident(FindItemByRealName)operator(()ident(ARealValueName)operator(\))operator(;)

    keyword(if) operator(()ident(i) operator(>) operator(-)integer(1)operator(\)) keyword(and) operator(()ident(i) operator(<) ident(Items)operator(.)ident(Count)operator(\)) keyword(then)
      ident(Selected) operator(:=) ident(Items)operator([)ident(i)operator(])
    keyword(else)
      ident(Selected) operator(:=) keyword(nil)operator(;)

    ident(ItemFocused) operator(:=) ident(Selected)operator(;)

    ident(Result) operator(:=) ident(Assigned)operator(()ident(Selected)operator(\))operator(;)
    keyword(if) ident(Result) keyword(then)
      ident(JumpToSel)operator(()ident(ValueList)operator(\))operator(;)

    keyword(if) ident(FocusValueList) keyword(then)
      ident(FocusControl)operator(()ident(ValueList)operator(\))operator(;)
  keyword(end)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TValuesWin)operator(.)ident(TakeAsMainValueMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(var)
  ident(Item)operator(:) ident(TListItem)operator(;)
  ident(ValueName)operator(:) keyword(string)operator(;)
keyword(begin)
  keyword(if) ident(csDestroying) keyword(in) ident(PrefWin)operator(.)ident(ComponentState) keyword(then)
    ident(Exit)operator(;)

  ident(Item) operator(:=) ident(ValueList)operator(.)ident(ItemFocused)operator(;)
  keyword(if) keyword(not) ident(Assigned)operator(()ident(Item)operator(\)) keyword(then)
    ident(Exit)operator(;)

  ident(ValueName) operator(:=) ident(RealValueName)operator(()ident(Item)operator(\))operator(;)
  keyword(with) ident(PrefWin)operator(.)ident(MainPreviewE) keyword(do)
    keyword(if) ident(ValueName) operator(=) ident(Text) keyword(then)
      ident(Text) operator(:=) string<delimiter(')delimiter(')>
    keyword(else)
      ident(Text) operator(:=) ident(ValueName)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TValuesWin)operator(.)ident(InitListColumnTags)operator(;)
keyword(var)
  ident(i)operator(:) ident(Integer)operator(;)
keyword(begin)
  keyword(for) ident(i) operator(:=) integer(0) keyword(to) ident(ValueList)operator(.)ident(Columns)operator(.)ident(Count)operator(-)integer(1) keyword(do)
    keyword(with) ident(ValueList)operator(.)ident(Columns)operator(.)ident(Items)operator([)ident(i)operator(]) keyword(do) keyword(begin)
      ident(Tag) operator(:=) operator(-)integer(1)operator(;)
      keyword(if) ident(Caption) operator(=) string<delimiter(')content(Name)delimiter(')> keyword(then)
        ident(Tag) operator(:=) ident(Integer)operator(()ident(vlcName)operator(\))
      keyword(else) keyword(if) ident(Caption) operator(=) string<delimiter(')content(Size)delimiter(')> keyword(then)
        ident(Tag) operator(:=) ident(Integer)operator(()ident(vlcSize)operator(\))
      keyword(else) keyword(if) ident(Caption) operator(=) string<delimiter(')content(Type)delimiter(')> keyword(then)
        ident(Tag) operator(:=) ident(Integer)operator(()ident(vlcType)operator(\))
      keyword(else) keyword(if) ident(Caption) operator(=) string<delimiter(')content(Data)delimiter(')> keyword(then)
        ident(Tag) operator(:=) ident(Integer)operator(()ident(vlcData)operator(\))
      keyword(else)
        ident(ShowMessage)operator(()ident(Format)operator(()string<delimiter(')content(Error: Unknown ValueList.Columns[%d].Caption = "%s")delimiter(')>operator(,)
          operator([)ident(Index)operator(,) ident(Caption)operator(])operator(\))operator(\))operator(;)
      keyword(if) ident(Tag) operator(>) operator(-)integer(1) keyword(then)
        ident(SubItemIndex)operator([)ident(TValueListColumn)operator(()ident(Tag)operator(\))operator(]) operator(:=) ident(Index) operator(-) integer(1)operator(;)
    keyword(end)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TValuesWin)operator(.)ident(FormShow)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(InitListColumnTags)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TValuesWin)operator(.)ident(Reload)operator(()ident(JumpToNewValue)operator(:) ident(Boolean) operator(=) ident(False)operator(;)
  ident(ValueName)operator(:) keyword(string) operator(=) string<delimiter(')delimiter(')>operator(\))operator(;)
keyword(var)
  ident(Sel)operator(:) ident(TListItem)operator(;)
  ident(SelIndex)operator(:) ident(Integer)operator(;)
  ident(SelRealValueName)operator(:) keyword(string)operator(;)
keyword(begin)
  keyword(if) ident(csDestroying) keyword(in) ident(TreeWin)operator(.)ident(ComponentState) keyword(then)
    ident(Exit)operator(;)

  ident(SelIndex) operator(:=) operator(-)integer(1)operator(;)
  keyword(if) ident(JumpToNewValue) keyword(then)
    ident(SelRealValueName) operator(:=) ident(ValueName)
  keyword(else) keyword(begin)
    ident(Sel) operator(:=) ident(ValueList)operator(.)ident(ItemFocused)operator(;)
    keyword(if) ident(Assigned)operator(()ident(Sel)operator(\)) keyword(then)
      ident(SelIndex) operator(:=) ident(Sel)operator(.)ident(Index)operator(;)

    keyword(if) ident(SelIndex) operator(>) operator(-)integer(1) keyword(then)
      ident(SelRealValueName) operator(:=) ident(RealValueName)operator(()ident(ValueList)operator(.)ident(Items)operator([)ident(SelIndex)operator(])operator(\))operator(;)
  keyword(end)operator(;)

  ident(TreeWin)operator(.)ident(RegTVChange)operator(()ident(Self)operator(,) ident(RegTV)operator(.)ident(Selected)operator(\))operator(;)

  keyword(if) ident(SelIndex) operator(>) operator(-)integer(1) keyword(then)
    keyword(if) keyword(not) ident(FocusItem)operator(()ident(SelRealValueName)operator(,) ident(True)operator(\)) keyword(then) keyword(begin)
      ident(SelIndex) operator(:=) ident(GetBestIndex)operator(()ident(ValueList)operator(,) ident(SelIndex)operator(\))operator(;)
      keyword(if) ident(SelIndex) operator(>) operator(-)integer(1) keyword(then)
        keyword(with) ident(ValueList) keyword(do) keyword(begin)
          ident(Selected) operator(:=) ident(Items)operator([)ident(SelIndex)operator(])operator(;)
          ident(ItemFocused) operator(:=) ident(Selected)operator(;)
        keyword(end)operator(;)
    keyword(end)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TValuesWin)operator(.)ident(LoadValues)operator(()ident(Reg)operator(:) ident(TXRegistry)operator(\))operator(;)
keyword(var)
  ident(SL)operator(:) ident(TStringList)operator(;)
  ident(i)operator(:) ident(Integer)operator(;)
  ident(Clock)operator(:) ident(TClock)operator(;)
keyword(begin)
  keyword(if) ident(csDestroying) keyword(in) ident(WorkWin)operator(.)ident(ComponentState) keyword(then)
    ident(Exit)operator(;)

  keyword(with) ident(ValueList)operator(.)ident(Items) keyword(do) keyword(begin)
    ident(Clock) operator(:=) ident(TClock)operator(.)ident(Create)operator(()integer(1)operator(,) ident(tfSecs)operator(\))operator(;)
    ident(ValueList)operator(.)ident(Enabled) operator(:=) ident(False)operator(;)
    ident(BeginUpdate)operator(;)
    keyword(try)
      ident(Clear)operator(;)
      ident(WorkWin)operator(.)ident(ReInitShowPC)operator(;)

      ident(SL) operator(:=) ident(TStringList)operator(.)ident(Create)operator(;)
      keyword(try)
        ident(Reg)operator(.)ident(GetValueNames)operator(()ident(SL)operator(\))operator(;)
        keyword(for) ident(i) operator(:=) integer(0) keyword(to) ident(SL)operator(.)ident(Count)operator(-)integer(1) keyword(do)
          ident(ValuesWin)operator(.)ident(AddValue)operator(()ident(Reg)operator(,) ident(SL)operator([)ident(i)operator(])operator(\))operator(;)
      keyword(finally)
        ident(SL)operator(.)ident(Free)operator(;)
      keyword(end)operator(;)

    keyword(finally)
      ident(EndUpdate)operator(;)
      ident(ValueList)operator(.)ident(Enabled) operator(:=) ident(True)operator(;)
      ident(Clock)operator(.)ident(Stop)operator(;)
      keyword(if) ident(MurphyMode) keyword(then)
        ident(AddHint)operator(()ident(Format)operator(()string<delimiter(')content(Values loaded after %0.2f secs.)delimiter(')>operator(,) operator([)ident(Clock)operator(.)ident(SecsPassed)operator(])operator(\))operator(\))operator(;)
      ident(Clock)operator(.)ident(Free)operator(;)
    keyword(end)operator(;)
  keyword(end)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TValuesWin)operator(.)ident(FormClose)operator(()ident(Sender)operator(:) ident(TObject)operator(;) keyword(var) ident(Action)operator(:) ident(TCloseAction)operator(\))operator(;)
keyword(begin)
comment(//  Action := caNone;)
keyword(end)operator(;)

keyword(procedure) ident(TValuesWin)operator(.)ident(ValueListClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(CheckValueListHotTrack)operator(;)
  keyword(if) ident(ValueList)operator(.)ident(HotTrack) keyword(then)
    ident(ValueListDblClick)operator(()ident(Sender)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TValuesWin)operator(.)ident(CheckValueListHotTrack)operator(;)
keyword(const)
  ident(StyleOfSwitch)operator(:) keyword(array)operator([)ident(Boolean)operator(]) keyword(of) ident(TListHotTrackStyles) operator(=) operator(()
    operator([)operator(])operator(,) operator([)ident(htHandPoint)operator(,) ident(htUnderlineHot)operator(]) operator(\))operator(;)
keyword(var)
  ident(NewHotTrack)operator(:) ident(Boolean)operator(;)
keyword(begin)
  keyword(if) ident(csDestroying) keyword(in) ident(PrefWin)operator(.)ident(ComponentState) keyword(then)
    ident(Exit)operator(;)

  ident(NewHotTrack) operator(:=) ident(ScrollON) keyword(xor) ident(PrefWin)operator(.)ident(ValuesSingleClickCB)operator(.)ident(Checked)operator(;)
  keyword(if) ident(NewHotTrack) operator(=) ident(ValueList)operator(.)ident(HotTrack) keyword(then) ident(Exit)operator(;)
  
  keyword(with) ident(ValueList) keyword(do) keyword(begin)
    ident(HotTrack) operator(:=) ident(NewHotTrack)operator(;)
    ident(HotTrackStyles) operator(:=) ident(StyleOfSwitch)operator([)ident(HotTrack)operator(])operator(;)
    ident(Mouse)operator(.)ident(CursorPos) operator(:=) ident(Mouse)operator(.)ident(CursorPos)operator(;)
  keyword(end)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TValuesWin)operator(.)ident(SelectAllMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(var)
  ident(i)operator(:) ident(Integer)operator(;)
keyword(begin)
  keyword(with) ident(ValueList)operator(.)ident(Items) keyword(do)
    keyword(for) ident(i) operator(:=) integer(0) keyword(to) ident(Count)operator(-)integer(1) keyword(do)
      ident(Item)operator([)ident(i)operator(])operator(.)ident(Selected) operator(:=) ident(True)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TValuesWin)operator(.)ident(InvertSelectionMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(var)
  ident(i)operator(:) ident(Integer)operator(;)
keyword(begin)
  keyword(with) ident(ValueList)operator(.)ident(Items) keyword(do)
    keyword(for) ident(i) operator(:=) integer(0) keyword(to) ident(Count)operator(-)integer(1) keyword(do)
      ident(Item)operator([)ident(i)operator(])operator(.)ident(Selected) operator(:=) keyword(not) ident(Item)operator([)ident(i)operator(])operator(.)ident(Selected)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TValuesWin)operator(.)ident(FormDestroy)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(ValueNames)operator(.)ident(Free)operator(;)
keyword(end)operator(;)

keyword(end)operator(.)
keyword(unit) ident(WorkU)operator(;)

keyword(interface)

keyword(uses)
  ident(Windows)operator(,) ident(Messages)operator(,) ident(SysUtils)operator(,) ident(Variants)operator(,) ident(Classes)operator(,) ident(Graphics)operator(,) ident(Controls)operator(,) ident(Forms)operator(,)
  ident(Dialogs)operator(,) ident(StdCtrls)operator(,) ident(ComCtrls)operator(,) ident(NewPanels)operator(,) ident(Grids)operator(,) ident(Clipbrd)operator(,)
  ident(IntEdit)operator(,) ident(ExtCtrls)operator(,) ident(Menus)operator(,) ident(YTools)operator(,) ident(CompEx)operator(,) ident(PlutoConst)operator(,)
  ident(XReg)operator(,) ident(Clock)operator(,) ident(Colors)operator(,) ident(ShellAPI)operator(,) ident(IniFiles)operator(,) ident(Math)operator(,)
  ident(keybrd)operator(,) ident(Buttons)operator(,) ident(YTypes)operator(,) ident(LinkLabel)operator(,) ident(start)operator(,)
  ident(PrefTools)operator(,) ident(ImgList)operator(,) ident(PHexMemo)operator(,) ident(PipelineTh)operator(,) ident(DropSource)operator(,) ident(DropTarget)operator(,)
  ident(CrackTools)operator(;)

keyword(type)
  ident(TColorStringFmt) operator(=) operator(()ident(csfThreeSpacedDecimals)operator(\))operator(;)

  ident(TWorkWin) operator(=) keyword(class)operator(()ident(TForm)operator(\))
    ident(StringPU)operator(:) ident(TPopupMenu)operator(;)
    ident(SpaceMI)operator(:) ident(TMenuItem)operator(;)
    ident(FileMI)operator(:) ident(TMenuItem)operator(;)
    ident(FileOpenD)operator(:) ident(TOpenDialog)operator(;)
    ident(MainPC)operator(:) ident(TPageControl)operator(;)
    ident(HintPage)operator(:) ident(TTabSheet)operator(;)
    ident(Splitter1)operator(:) ident(TSplitter)operator(;)
    ident(HintLB)operator(:) ident(TListBox)operator(;)
    ident(InfoMemo)operator(:) ident(TMemo)operator(;)
    ident(WorkPage)operator(:) ident(TTabSheet)operator(;)
    ident(WorkP)operator(:) ident(TPanel)operator(;)
    ident(ShowPC)operator(:) ident(TPageControl)operator(;)
    ident(StringPage)operator(:) ident(TTabSheet)operator(;)
    ident(BorderPanel1)operator(:) ident(TBorderPanel)operator(;)
    ident(StringE)operator(:) ident(TEdit)operator(;)
    ident(OKStringB)operator(:) ident(TButton)operator(;)
    ident(BoolStrCB)operator(:) ident(TCheckBox)operator(;)
    ident(CancelStringB)operator(:) ident(TButton)operator(;)
    ident(StringAsColorP)operator(:) ident(TPanel)operator(;)
    ident(StringAsFileP)operator(:) ident(TBorderPanel)operator(;)
    ident(IconImage)operator(:) ident(TImage)operator(;)
    ident(IntPage)operator(:) ident(TTabSheet)operator(;)
    ident(BorderPanel5)operator(:) ident(TBorderPanel)operator(;)
    ident(OKIntB)operator(:) ident(TButton)operator(;)
    ident(CardBoolCB)operator(:) ident(TCheckBox)operator(;)
    ident(CancelIntB)operator(:) ident(TButton)operator(;)
    ident(BinaryPage)operator(:) ident(TTabSheet)operator(;)
    ident(BorderPanel6)operator(:) ident(TBorderPanel)operator(;)
    ident(Panel2)operator(:) ident(TPanel)operator(;)
    ident(Label5)operator(:) ident(TLabel)operator(;)
    ident(OffsetHE)operator(:) ident(THexEdit)operator(;)
    ident(OKBinaryB)operator(:) ident(TButton)operator(;)
    ident(CancelBinaryB)operator(:) ident(TButton)operator(;)
    ident(StringTypeRG)operator(:) ident(TRadioGroup)operator(;)
    ident(SpyPage)operator(:) ident(TTabSheet)operator(;)
    ident(BorderPanel2)operator(:) ident(TBorderPanel)operator(;)
    ident(SpyResumeB)operator(:) ident(TButton)operator(;)
    ident(SpySuspendB)operator(:) ident(TButton)operator(;)
    ident(SpyLB)operator(:) ident(TListBox)operator(;)
    ident(Label4)operator(:) ident(TLabel)operator(;)
    ident(Label7)operator(:) ident(TLabel)operator(;)
    ident(CardTypeRG)operator(:) ident(TRadioGroup)operator(;)
    ident(MultiStringPage)operator(:) ident(TTabSheet)operator(;)
    ident(BorderPanel7)operator(:) ident(TBorderPanel)operator(;)
    ident(OKMultiStringB)operator(:) ident(TButton)operator(;)
    ident(CancelMultiStringB)operator(:) ident(TButton)operator(;)
    ident(MultiStringM)operator(:) ident(TMemo)operator(;)
    ident(DataTypeComB)operator(:) ident(TComboBox)operator(;)
    ident(CardinalE)operator(:) ident(TCardEdit)operator(;)
    ident(ColorDlg)operator(:) ident(TColorDialog)operator(;)
    ident(MultiStringOpenD)operator(:) ident(TOpenDialog)operator(;)
    ident(MultiStringSaveD)operator(:) ident(TSaveDialog)operator(;)
    ident(MultiStringPU)operator(:) ident(TPopupMenu)operator(;)
    ident(LadenMI)operator(:) ident(TMenuItem)operator(;)
    ident(SpeichernMI)operator(:) ident(TMenuItem)operator(;)
    ident(Hinzufgen1)operator(:) ident(TMenuItem)operator(;)
    ident(N1)operator(:) ident(TMenuItem)operator(;)
    ident(SisyPage)operator(:) ident(TTabSheet)operator(;)
    ident(SpyClearTracesB)operator(:) ident(TButton)operator(;)
    ident(Label11)operator(:) ident(TLabel)operator(;)
    ident(HexEdit1)operator(:) ident(THexEdit)operator(;)
    ident(Label12)operator(:) ident(TLabel)operator(;)
    ident(Label13)operator(:) ident(TLabel)operator(;)
    ident(SortMultiStringMI)operator(:) ident(TMenuItem)operator(;)
    ident(SpyTestL)operator(:) ident(TLabel)operator(;)
    ident(Panel3)operator(:) ident(TPanel)operator(;)
    ident(CurValueE)operator(:) ident(TEdit)operator(;)
    ident(BorderPanel8)operator(:) ident(TBorderPanel)operator(;)
    ident(BorderPanel9)operator(:) ident(TBorderPanel)operator(;)
    ident(SisyTV)operator(:) ident(TTreeView)operator(;)
    ident(TabImages)operator(:) ident(TImageList)operator(;)
    ident(ChangeImages)operator(:) ident(TImageList)operator(;)
    ident(Panel7)operator(:) ident(TPanel)operator(;)
    ident(ColorPanel1)operator(:) ident(TColorPanel)operator(;)
    ident(Splitter2)operator(:) ident(TSplitter)operator(;)
    ident(SpyDelayIE)operator(:) ident(TPrefIntEdit)operator(;)
    ident(ListTracesCB)operator(:) ident(TPrefCheckBox)operator(;)
    ident(Panel5)operator(:) ident(TPanel)operator(;)
    ident(Panel8)operator(:) ident(TPanel)operator(;)
    ident(SisyExpandGroupsCB)operator(:) ident(TPrefCheckBox)operator(;)
    ident(ClearChangesB)operator(:) ident(TButton)operator(;)
    ident(FilterChangesB)operator(:) ident(TButton)operator(;)
    ident(SisyTVPU)operator(:) ident(TPopupMenu)operator(;)
    ident(SisyGotoKeyMI)operator(:) ident(TMenuItem)operator(;)
    ident(SisyDeleteChangeMI)operator(:) ident(TMenuItem)operator(;)
    ident(SisyActivateChangeMI)operator(:) ident(TMenuItem)operator(;)
    ident(N3)operator(:) ident(TMenuItem)operator(;)
    ident(SisyCopyPathMI)operator(:) ident(TMenuItem)operator(;)
    ident(N4)operator(:) ident(TMenuItem)operator(;)
    ident(Panel9)operator(:) ident(TPanel)operator(;)
    ident(ExternalEditB)operator(:) ident(TButton)operator(;)
    ident(LoadExternalB)operator(:) ident(TButton)operator(;)
    ident(ReloadStringB)operator(:) ident(TButton)operator(;)
    ident(BinaryHM)operator(:) ident(TPHexMemo)operator(;)
    ident(PipelineCB)operator(:) ident(TCheckBox)operator(;)
    ident(ReloadDWordB)operator(:) ident(TButton)operator(;)
    ident(ReloadBinaryB)operator(:) ident(TButton)operator(;)
    ident(ReloadMultiStringB)operator(:) ident(TButton)operator(;)
    ident(DescL)operator(:) ident(TLabel)operator(;)
    ident(SisyHKUCB)operator(:) ident(TPrefCheckBox)operator(;)
    ident(SisyHKLMCB)operator(:) ident(TPrefCheckBox)operator(;)
    ident(SisyHKUL)operator(:) ident(TLabel)operator(;)
    ident(SisyHKLML)operator(:) ident(TLabel)operator(;)
    ident(SisyListCB)operator(:) ident(TPrefCheckBox)operator(;)
    ident(CardSpecial0B)operator(:) ident(TButton)operator(;)
    ident(CardSpecial1B)operator(:) ident(TButton)operator(;)
    ident(CardSpecial_1B)operator(:) ident(TButton)operator(;)
    ident(CardSpecial7FB)operator(:) ident(TButton)operator(;)
    ident(SisyPU)operator(:) ident(TPopupMenu)operator(;)
    ident(Idle1)operator(:) ident(TMenuItem)operator(;)
    ident(Lowest1)operator(:) ident(TMenuItem)operator(;)
    ident(Lower1)operator(:) ident(TMenuItem)operator(;)
    ident(Normal1)operator(:) ident(TMenuItem)operator(;)
    ident(Higher1)operator(:) ident(TMenuItem)operator(;)
    ident(Highes1)operator(:) ident(TMenuItem)operator(;)
    ident(SisyShowCurrentPathMI)operator(:) ident(TMenuItem)operator(;)
    ident(N5)operator(:) ident(TMenuItem)operator(;)
    ident(MultiStringTypeRG)operator(:) ident(TRadioGroup)operator(;)
    ident(SeparatorE)operator(:) ident(TEdit)operator(;)
    ident(Label1)operator(:) ident(TLabel)operator(;)
    ident(MultiStringCountL)operator(:) ident(TLabel)operator(;)
    ident(DropFileTarget)operator(:) ident(TDropFileTarget)operator(;)
    ident(CryptoPage)operator(:) ident(TTabSheet)operator(;)
    ident(BorderPanel3)operator(:) ident(TBorderPanel)operator(;)
    ident(CryptoE)operator(:) ident(TEdit)operator(;)
    ident(OKCryptoB)operator(:) ident(TButton)operator(;)
    ident(CancelCryptoB)operator(:) ident(TButton)operator(;)
    ident(ReloadCryptoB)operator(:) ident(TButton)operator(;)
    ident(CryptoTypeRG)operator(:) ident(TRadioGroup)operator(;)
    ident(Label2)operator(:) ident(TLabel)operator(;)
    ident(LinkLabel2)operator(:) ident(TLinkLabel)operator(;)
    keyword(procedure) ident(FormKeyDown)operator(()ident(Sender)operator(:) ident(TObject)operator(;) keyword(var) ident(Key)operator(:) ident(Word)operator(;) ident(Shift)operator(:) ident(TShiftState)operator(\))operator(;)
    keyword(procedure) ident(SpyResumeBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(SpySuspendBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(ArrPlutoBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(ArrRegEdBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(ArrFreeBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(ArrBigValBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)

    keyword(procedure) ident(SpaceMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(FileMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(HintLBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(MainPCDrawTab)operator(()ident(Control)operator(:) ident(TCustomTabControl)operator(;) ident(TabIndex)operator(:) ident(Integer)operator(;) keyword(const) ident(Rect)operator(:) ident(TRect)operator(;) ident(Active)operator(:) ident(Boolean)operator(\))operator(;)
    keyword(procedure) ident(ValueMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(StringEKeyDown)operator(()ident(Sender)operator(:) ident(TObject)operator(;) keyword(var) ident(Key)operator(:) ident(Word)operator(;) ident(Shift)operator(:) ident(TShiftState)operator(\))operator(;)
    keyword(procedure) ident(StringEChange)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(OKStringBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(BoolStrCBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(CardinalEChange)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(CardBoolCBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(CardinalEKeyDown)operator(()ident(Sender)operator(:) ident(TObject)operator(;) keyword(var) ident(Key)operator(:) ident(Word)operator(;) ident(Shift)operator(:) ident(TShiftState)operator(\))operator(;)
    keyword(procedure) ident(OKIntBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(ShowPCChange)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(ShowPCChanging)operator(()ident(Sender)operator(:) ident(TObject)operator(;) keyword(var) ident(AllowChange)operator(:) ident(Boolean)operator(\))operator(;)
    keyword(procedure) ident(ShowPCDrawTab)operator(()ident(Control)operator(:) ident(TCustomTabControl)operator(;) ident(TabIndex)operator(:) ident(Integer)operator(;) keyword(const) ident(Rect)operator(:) ident(TRect)operator(;) ident(Active)operator(:) ident(Boolean)operator(\))operator(;)
    keyword(procedure) ident(ShowPCMouseDown)operator(()ident(Sender)operator(:) ident(TObject)operator(;) ident(Button)operator(:) ident(TMouseButton)operator(;) ident(Shift)operator(:) ident(TShiftState)operator(;) ident(X)operator(,) ident(Y)operator(:) ident(Integer)operator(\))operator(;)
    keyword(procedure) ident(FormCreate)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(OKBinaryBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(HexGrid1Click)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(HexGrid1KeyDown)operator(()ident(Sender)operator(:) ident(TObject)operator(;) keyword(var) ident(Key)operator(:) ident(Word)operator(;) ident(Shift)operator(:) ident(TShiftState)operator(\))operator(;)
    keyword(procedure) ident(BoolStrPopup)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(StringPageEnter)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(IntPageEnter)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(BinaryPageEnter)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(ReInitShowPC)operator(;)
    keyword(procedure) ident(ActivateIt)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(DeActivateIt)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(FormDeactivate)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(FormActivate)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(MultiStringMChange)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(OKMultiStringBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(StringAsColorPDblClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(MultiStringMEnter)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(LadenMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(SpeichernMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(Hinzufgen1Click)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(CancelBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(HexGrid1Enter)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(SpyClearTracesBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(SpyLBKeyDown)operator(()ident(Sender)operator(:) ident(TObject)operator(;) keyword(var) ident(Key)operator(:) ident(Word)operator(;) ident(Shift)operator(:) ident(TShiftState)operator(\))operator(;)
    comment(//procedure BinLMouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer\);)
    keyword(procedure) ident(BinLClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(HexGrid1KeyUp)operator(()ident(Sender)operator(:) ident(TObject)operator(;) keyword(var) ident(Key)operator(:) ident(Word)operator(;) ident(Shift)operator(:) ident(TShiftState)operator(\))operator(;)
    keyword(procedure) ident(ValueViewChanged)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(HexEdit1Change)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(SortMultiStringMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(SpyTestLClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(FocusForEditing)operator(;)
    keyword(procedure) ident(CurValueEKeyDown)operator(()ident(Sender)operator(:) ident(TObject)operator(;) keyword(var) ident(Key)operator(:) ident(Word)operator(;) ident(Shift)operator(:) ident(TShiftState)operator(\))operator(;)
    keyword(procedure) ident(CurValueEEnter)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)

    keyword(procedure) ident(AddAHint)operator(()keyword(const) ident(Hint)operator(:) keyword(string)operator(\))operator(;)
    keyword(procedure) ident(SisyTVGetSelectedIndex)operator(()ident(Sender)operator(:) ident(TObject)operator(;) ident(Node)operator(:) ident(TTreeNode)operator(\))operator(;)
    keyword(procedure) ident(SisyTVDblClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(SisyTVKeyDown)operator(()ident(Sender)operator(:) ident(TObject)operator(;) keyword(var) ident(Key)operator(:) ident(Word)operator(;) ident(Shift)operator(:) ident(TShiftState)operator(\))operator(;)
    keyword(procedure) ident(SisyCBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(BinaryHMLineChange)operator(()ident(NewLine)operator(:) ident(Cardinal)operator(\))operator(;)
    keyword(procedure) ident(OffsetHEChange)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(SpyDelayIEChange)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(SisyTVExpanded)operator(()ident(Sender)operator(:) ident(TObject)operator(;) ident(Node)operator(:) ident(TTreeNode)operator(\))operator(;)
    keyword(procedure) ident(ClearChangesBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(FilterChangesBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(SisyTVPUPopup)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(SisyActivateChangeMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(SisyDeleteChangeMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(SisyCopyPathMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(ExternalEditBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(LoadExternalBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(ReloadBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(PipelineCBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(BinaryHMEnter)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(xUseExtendedModelCBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(SeparatorEChange)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(HintLBKeyDown)operator(()ident(Sender)operator(:) ident(TObject)operator(;) keyword(var) ident(Key)operator(:) ident(Word)operator(;) ident(Shift)operator(:) ident(TShiftState)operator(\))operator(;)
    keyword(procedure) ident(DWORDSpecialBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(Button1Click)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(SisyPUPopup)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(SisyPriorityMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(SisyShowCurrentPathMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(DropFileTargetDrop)operator(()ident(Sender)operator(:) ident(TObject)operator(;) ident(ShiftState)operator(:) ident(TShiftState)operator(;)
      ident(Point)operator(:) ident(TPoint)operator(;) keyword(var) ident(Effect)operator(:) ident(Integer)operator(\))operator(;)
    keyword(procedure) ident(FormClose)operator(()ident(Sender)operator(:) ident(TObject)operator(;) keyword(var) ident(Action)operator(:) ident(TCloseAction)operator(\))operator(;)
    keyword(procedure) ident(FormResize)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(IconImageDblClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(SisyTVCustomDrawItem)operator(()ident(Sender)operator(:) ident(TCustomTreeView)operator(;)
      ident(Node)operator(:) ident(TTreeNode)operator(;) ident(State)operator(:) ident(TCustomDrawState)operator(;) keyword(var) ident(DefaultDraw)operator(:) ident(Boolean)operator(\))operator(;)
    keyword(procedure) ident(SisyTVMouseDown)operator(()ident(Sender)operator(:) ident(TObject)operator(;) ident(Button)operator(:) ident(TMouseButton)operator(;)
      ident(Shift)operator(:) ident(TShiftState)operator(;) ident(X)operator(,) ident(Y)operator(:) ident(Integer)operator(\))operator(;)
    keyword(procedure) ident(OKCryptoBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
    keyword(procedure) ident(CryptoEKeyDown)operator(()ident(Sender)operator(:) ident(TObject)operator(;) keyword(var) ident(Key)operator(:) ident(Word)operator(;)
      ident(Shift)operator(:) ident(TShiftState)operator(\))operator(;)
  directive(private)
    ident(PipelineThread)operator(:) ident(TPipelineThread)operator(;)
    ident(BoolStr)operator(:) keyword(array) keyword(of) keyword(array)operator([)ident(Boolean)operator(]) keyword(of) keyword(string)operator(;)
    ident(HexEditAutoChange)operator(:) ident(Boolean)operator(;)
    ident(TargetPage)operator(:) ident(TTabSheet)operator(;)
    keyword(procedure) ident(DeleteChange)operator(()ident(Node)operator(:) ident(TTreeNode)operator(\))operator(;)
    keyword(procedure) ident(DeactivateChange)operator(()ident(Node)operator(:) ident(TTreeNode)operator(\))operator(;)
    keyword(procedure) ident(CopySelectedChangeName)operator(;)
    keyword(procedure) ident(ClearChanges)operator(;)
  directive(public)
    ident(ShowAsBinary)operator(:) ident(Boolean)operator(;)
    keyword(function) ident(LastHint)operator(:) keyword(string)operator(;)
    keyword(function) ident(LoadBoolStr)operator(:) ident(Boolean)operator(;)
    keyword(function) ident(LoadSisyFilter)operator(:) ident(Boolean)operator(;)
    keyword(procedure) ident(ShowValues)operator(()ident(Reg)operator(:) ident(TXRegistry)operator(\))operator(;)
    keyword(procedure) ident(UpdateWriteButtons)operator(;)
    keyword(procedure) ident(EditData)operator(;)
  keyword(end)operator(;)

keyword(var)
  ident(WorkWin)operator(:) ident(TWorkWin)operator(;)
  ident(ShowPC)operator(:) ident(TPageControl)operator(;)
  ident(MainPC)operator(:) ident(TPageControl)operator(;)

keyword(implementation)

keyword(uses) ident(TreeU)operator(,) ident(ValuesU)operator(,) ident(plutomain)operator(,) ident(splash)operator(,) ident(SisyphusTH)operator(,) ident(PrefU)operator(,) ident(ShellEx)operator(;)

preprocessor({$R *.dfm})

keyword(function) ident(ColorOfString)operator(()ident(s)operator(:) keyword(string)operator(;) ident(Format)operator(:) ident(TColorStringFmt)operator(;)
  ident(Default)operator(:) ident(TColor) operator(=) ident(clBlack)operator(\))operator(:) ident(TColor)operator(;)
keyword(var)
  ident(SA)operator(:) ident(TStrA)operator(;)
  ident(i)operator(:) ident(Integer)operator(;)
keyword(begin)
  ident(Result) operator(:=) ident(Default)operator(;)
  ident(SA) operator(:=) keyword(nil)operator(;)

  keyword(case) ident(Format) keyword(of)
    ident(csfThreeSpacedDecimals)operator(:) keyword(begin)
      ident(SA) operator(:=) ident(Split)operator(()ident(s)operator(,) char<delimiter(')content( )delimiter(')>operator(\))operator(;)
      keyword(if) ident(Length)operator(()ident(SA)operator(\)) operator(<>) integer(3) keyword(then)
        ident(Exit)operator(;)
      keyword(for) ident(i) operator(:=) integer(0) keyword(to) integer(2) keyword(do)
        keyword(if) keyword(not) operator(()ident(IsValidInteger)operator(()ident(SA)operator([)ident(i)operator(])operator(\)) keyword(and) operator(()ident(StrToIntDef)operator(()ident(SA)operator([)ident(i)operator(])operator(,) operator(-)integer(1)operator(\)) keyword(in) operator([)integer(0)operator(..)integer(255)operator(])operator(\))operator(\)) keyword(then)
          ident(Exit)operator(;)
      ident(Result) operator(:=) ident(ColorOfRGB)operator(()ident(StrToIntDef)operator(()ident(SA)operator([)integer(0)operator(])operator(,) integer(0)operator(\))operator(,)
                           ident(StrToIntDef)operator(()ident(SA)operator([)integer(1)operator(])operator(,) integer(0)operator(\))operator(,)
                           ident(StrToIntDef)operator(()ident(SA)operator([)integer(2)operator(])operator(,) integer(0)operator(\))operator(\))operator(;)
    keyword(end)operator(;)
  keyword(end)operator(;)
keyword(end)operator(;)

keyword(function) ident(StringOfColor)operator(()ident(Color)operator(:) ident(TColor)operator(;) ident(Format)operator(:) ident(TColorStringFmt)operator(\))operator(:) keyword(string)operator(;)
keyword(var)
  ident(RGB)operator(:) ident(TRGB)operator(;)
keyword(begin)
  ident(Result) operator(:=) string<delimiter(')delimiter(')>operator(;)

  ident(RGB) operator(:=) ident(RGBOfColor)operator(()ident(Color)operator(\))operator(;)
  keyword(case) ident(Format) keyword(of)
    ident(csfThreeSpacedDecimals)operator(:) keyword(begin)
      keyword(with) ident(RGB) keyword(do)
        ident(Result) operator(:=) ident(IntToStr)operator(()ident(R)operator(\)) operator(+) char<delimiter(')content( )delimiter(')> operator(+) ident(IntToStr)operator(()ident(G)operator(\)) operator(+) char<delimiter(')content( )delimiter(')> operator(+) ident(IntToStr)operator(()ident(B)operator(\))operator(;)
    keyword(end)operator(;)
  keyword(end)operator(;)
keyword(end)operator(;)

keyword(function) ident(TWorkWin)operator(.)ident(LastHint)operator(:) keyword(string)operator(;)
keyword(begin)
  keyword(with) ident(HintLB)operator(.)ident(Items) keyword(do)
    keyword(if) ident(Count) operator(>) integer(0) keyword(then)
      ident(Result) operator(:=) ident(Strings)operator([)ident(Count)operator(-)integer(1)operator(])
    keyword(else)
      ident(Result) operator(:=) string<delimiter(')delimiter(')>operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(AddAHint)operator(()keyword(const) ident(Hint)operator(:) keyword(string)operator(\))operator(;)
keyword(begin)
  keyword(if) keyword(not) ident(Assigned)operator(()ident(HintLB)operator(\)) keyword(then)
    ident(Exit)operator(;)

  keyword(with) ident(HintLB)operator(.)ident(Items) keyword(do) keyword(begin)
    keyword(if) ident(Count) operator(>) integer(0) keyword(then) keyword(begin)
      keyword(if) ident(StrAtBegin)operator(()ident(LastHint)operator(,) ident(Hint)operator(\)) keyword(then) keyword(begin) comment(//same hint again)
        keyword(with) ident(HintLB) keyword(do)
          ident(Tag) operator(:=) ident(Tag) operator(+) integer(1)operator(;)
        ident(Strings)operator([)ident(Count)operator(-)integer(1)operator(]) operator(:=) ident(Format)operator(()string<delimiter(')content(%s (%d\))delimiter(')>operator(,) operator([)ident(Hint)operator(,) ident(HintLB)operator(.)ident(Tag)operator(])operator(\))operator(;)
      ident(Exit) keyword(end) keyword(else)
        ident(HintLB)operator(.)ident(Tag) operator(:=) integer(1)operator(;)
    keyword(end)operator(;)
    ident(Add)operator(()ident(Hint)operator(\))operator(;)
  keyword(end)operator(;)
  ident(Application)operator(.)ident(ProcessMessages)operator(;) comment(//draw)
comment(//  Sleep(1000\); //wait to read hints)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(ReInitShowPC)operator(;)
keyword(begin)
  keyword(with) ident(CurValueE) keyword(do) keyword(begin)
    ident(Text) operator(:=) ident(NoValueCaption)operator(;)
    ident(Font)operator(.)ident(Color) operator(:=) ident(clSilver)operator(;)
    ident(Enabled) operator(:=) ident(False)operator(;)
  keyword(end)operator(;)

  ident(ShowPC)operator(.)ident(ActivePage) operator(:=) keyword(nil)operator(;)

  ident(StringE)operator(.)ident(Text) operator(:=) string<delimiter(')delimiter(')>operator(;)
  ident(StringTypeRG)operator(.)ident(ItemIndex) operator(:=) integer(0)operator(;)

  ident(MultiStringTypeRG)operator(.)ident(Buttons)operator([)integer(1)operator(])operator(.)ident(Enabled) operator(:=) ident(False)operator(;)

  ident(CardinalE)operator(.)ident(Value) operator(:=) integer(0)operator(;)
  ident(CardTypeRG)operator(.)ident(ItemIndex) operator(:=) integer(0)operator(;)

  ident(BinaryHM)operator(.)ident(Data) operator(:=) keyword(nil)operator(;)
  ident(PipelineCB)operator(.)ident(Checked) operator(:=) ident(False)operator(;)

  ident(DataTypeComB)operator(.)ident(ItemIndex) operator(:=) ident(Integer)operator(()ident(rdBinary)operator(\))operator(;)

  ident(MultiStringM)operator(.)ident(Clear)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(FormKeyDown)operator(()ident(Sender)operator(:) ident(TObject)operator(;) keyword(var) ident(Key)operator(:) ident(Word)operator(;)
  ident(Shift)operator(:) ident(TShiftState)operator(\))operator(;)
keyword(begin)
  ident(MainWin)operator(.)ident(FormKeyDown)operator(()ident(Sender)operator(,) ident(Key)operator(,) ident(Shift)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(SpyResumeBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(SpyThread)operator(.)ident(Resume)operator(;)
  ident(SpyTestLClick)operator(()ident(Sender)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(SpySuspendBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(SpyThread)operator(.)ident(Suspend)operator(;)
  ident(SpyTestLClick)operator(()ident(Sender)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(ArrPlutoBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(ArrangePlutoStyle)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(ArrRegEdBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(ArrangeRegEdStyle)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(ArrFreeBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(ArrangeFreeStyle)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(ArrBigValBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(ArrangeBigValStyle)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(SpaceMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(StringE)operator(.)ident(Text) operator(:=) string<delimiter(')delimiter(')>operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(HintLBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(StatusBar)operator(.)ident(Panels)operator([)integer(0)operator(])operator(.)ident(Text) operator(:=) ident(GetSel)operator(()ident(HintLB)operator(\))operator(;)
  ident(WorkWin)operator(.)ident(InfoMemo)operator(.)ident(Text) operator(:=) ident(StatusBar)operator(.)ident(Panels)operator([)integer(0)operator(])operator(.)ident(Text)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(MainPCDrawTab)operator(()ident(Control)operator(:) ident(TCustomTabControl)operator(;) ident(TabIndex)operator(:) ident(Integer)operator(;)
  keyword(const) ident(Rect)operator(:) ident(TRect)operator(;) ident(Active)operator(:) ident(Boolean)operator(\))operator(;)
keyword(var)
  ident(PC)operator(:) ident(TPageControl)operator(;)
  ident(Page)operator(:) ident(TTabSheet)operator(;)
keyword(begin)
  ident(PC) operator(:=) ident(TPageControl)operator(()ident(Control)operator(\))operator(;)
  ident(Page) operator(:=) ident(PC)operator(.)ident(Pages)operator([)ident(TabIndex)operator(])operator(;)
  keyword(with) ident(PC)operator(.)ident(Canvas)operator(.)ident(Font) keyword(do) keyword(begin)
    keyword(if) ident(Page)operator(.)ident(Caption) operator(=) string<delimiter(')content(Hint)delimiter(')> keyword(then)
      ident(Color) operator(:=) ident(clBrightRed)
    keyword(else) keyword(if) ident(Page)operator(.)ident(Caption) operator(=) string<delimiter(')content(Edit)delimiter(')> keyword(then)
      ident(Color) operator(:=) ident(clBrightGreen)
    keyword(else) keyword(if) ident(Page)operator(.)ident(Caption) operator(=) string<delimiter(')content(Spy)delimiter(')> keyword(then)
      ident(Color) operator(:=) ident(clBrightBlue)
    keyword(else) keyword(if) ident(Page)operator(.)ident(Caption) operator(=) string<delimiter(')content(Sisyphus)delimiter(')> keyword(then)
      ident(Color) operator(:=) ident(clBrightCyan)
    keyword(else)
      ident(Color) operator(:=) ident(clWhite)operator(;)
  keyword(end)operator(;)

  keyword(with) ident(PC)operator(.)ident(Canvas) keyword(do)
    keyword(if) ident(Active) keyword(then) keyword(begin)
      ident(Font)operator(.)ident(Style) operator(:=) operator([)ident(fsBold)operator(])operator(;)
      ident(Brush)operator(.)ident(Color) operator(:=) ident(clDarkGray)operator(;)
      ident(FillRect)operator(()ident(Rect)operator(\))operator(;)
      ident(TextOut)operator(()ident(Rect)operator(.)ident(Left) operator(+) integer(18) operator(+) integer(5)operator(,) ident(Rect)operator(.)ident(Top) operator(+) integer(3)operator(,) ident(Page)operator(.)ident(Caption)operator(\))operator(;)
      ident(PC)operator(.)ident(Images)operator(.)ident(Draw)operator(()ident(PC)operator(.)ident(Canvas)operator(,) ident(Rect)operator(.)ident(Left) operator(+) integer(4)operator(,) ident(Rect)operator(.)ident(Top) operator(+) integer(2)operator(,) ident(Page)operator(.)ident(ImageIndex)operator(\))operator(;)
    keyword(end) keyword(else) keyword(begin)
      ident(Font)operator(.)ident(Style) operator(:=) operator([)operator(])operator(;)
      ident(Brush)operator(.)ident(Color) operator(:=) ident(clDarkGray)operator(;)
      ident(FillRect)operator(()ident(Rect)operator(\))operator(;)
      ident(TextOut)operator(()ident(Rect)operator(.)ident(Left) operator(+) integer(18) operator(+) integer(3)operator(,) ident(Rect)operator(.)ident(Top) operator(+) integer(2)operator(,) ident(Page)operator(.)ident(Caption)operator(\))operator(;)
      ident(PC)operator(.)ident(Images)operator(.)ident(Draw)operator(()ident(PC)operator(.)ident(Canvas)operator(,) ident(Rect)operator(.)ident(Left) operator(+) integer(1)operator(,) ident(Rect)operator(.)ident(Top) operator(+) integer(1)operator(,) ident(Page)operator(.)ident(ImageIndex)operator(\))operator(;)
    keyword(end)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(ValueMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(StringE)operator(.)ident(Text) operator(:=) ident(UntilStr)operator(()ident(TMenuItem)operator(()ident(Sender)operator(\))operator(.)ident(Caption)operator(,)string<delimiter(')content( = )delimiter(')>operator(\))operator(;)
  ident(OKStringBClick)operator(()ident(Sender)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(StringEKeyDown)operator(()ident(Sender)operator(:) ident(TObject)operator(;) keyword(var) ident(Key)operator(:) ident(Word)operator(;)
  ident(Shift)operator(:) ident(TShiftState)operator(\))operator(;)
keyword(begin)
  keyword(if) ident(key) operator(=) ident(VK_RETURN) keyword(then) keyword(begin)
    ident(OKStringBClick)operator(()ident(Sender)operator(\))operator(;)
    ident(ValuesWin)operator(.)ident(FocusControl)operator(()ident(ValueList)operator(\))operator(;)
  keyword(end)operator(;)
  keyword(if) ident(key) operator(=) ident(VK_ESCAPE) keyword(then)
    ident(CancelBClick)operator(()ident(Sender)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(StringEChange)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(var)
  ident(i)operator(:) ident(Integer)operator(;)
  ident(State)operator(:) ident(TCheckBoxState)operator(;)
  ident(Desc)operator(:) keyword(string)operator(;)
keyword(begin)
  ident(IconImage)operator(.)ident(Picture) operator(:=) keyword(nil)operator(;)

  keyword(with) ident(StringAsColorP) keyword(do) keyword(begin)
    ident(Color) operator(:=) ident(ColorOfString)operator(()ident(StringE)operator(.)ident(Text)operator(,) ident(csfThreeSpacedDecimals)operator(,) operator(-)integer(1)operator(\))operator(;)
    ident(Visible) operator(:=) ident(Color) operator(<>) operator(-)integer(1)operator(;)
  keyword(end)operator(;)

  keyword(try)
    keyword(with) ident(IconImage)operator(.)ident(Picture)operator(.)ident(Icon) keyword(do) keyword(begin)
      ident(ReleaseHandle)operator(;)
      ident(Handle) operator(:=) ident(GetIconFromFile)operator(()ident(StringE)operator(.)ident(Text)operator(\))operator(;)
      ident(StringAsFileP)operator(.)ident(Visible) operator(:=) ident(Handle) operator(<>) integer(0)operator(;)
    keyword(end)operator(;)
  keyword(except)
  keyword(end)operator(;)

  ident(State) operator(:=) ident(cbGrayed)operator(;)
  keyword(for) ident(i) operator(:=) integer(0) keyword(to) ident(High)operator(()ident(BoolStr)operator(\)) keyword(do) keyword(begin)
    keyword(if) ident(StringE)operator(.)ident(Text) operator(=) ident(BoolStr)operator([)ident(i)operator(])operator([)ident(False)operator(]) keyword(then)
      ident(State) operator(:=) ident(cbUnchecked)
    keyword(else) keyword(if) ident(StringE)operator(.)ident(Text) operator(=) ident(BoolStr)operator([)ident(i)operator(])operator([)ident(True)operator(]) keyword(then)
      ident(State) operator(:=) ident(cbChecked)
    keyword(else)
      ident(Continue)operator(;)
    ident(Break)operator(;)
  keyword(end)operator(;)

  ident(BoolStrCB)operator(.)ident(Visible) operator(:=) ident(State) keyword(in) operator([)ident(cbChecked)operator(,) ident(cbUnchecked)operator(])operator(;)
  ident(BoolStrCB)operator(.)ident(State) operator(:=) ident(State)operator(;)

  ident(Desc) operator(:=) ident(StringE)operator(.)ident(Text)operator(;)
  ident(Desc) operator(:=) ident(RegNameOfCLSID)operator(()ident(Desc)operator(\))operator(;)
  keyword(with) ident(DescL) keyword(do) keyword(begin)
    ident(Visible) operator(:=) operator(()ident(Desc) operator(<>) string<delimiter(')delimiter(')>operator(\))operator(;)
    keyword(if) ident(Visible) keyword(then)
      ident(Caption) operator(:=) string<delimiter(')content(CLSID is: )delimiter(')> operator(+) ident(Desc)operator(;)
  keyword(end)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(OKStringBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(var)
  ident(i)operator(:) ident(Integer)operator(;)
keyword(begin)
  keyword(try)
    ident(OpenCurKey)operator(;)
    keyword(with) ident(ValuesWin)operator(.)ident(ValueNames) keyword(do)
      keyword(for) ident(i) operator(:=) integer(0) keyword(to) ident(Count)operator(-)integer(1) keyword(do) keyword(begin)
        keyword(case) ident(StringTypeRG)operator(.)ident(ItemIndex) keyword(of)
          integer(0)operator(:) ident(MainReg)operator(.)ident(WriteString)operator(()ident(Strings)operator([)ident(i)operator(])operator(,) ident(StringE)operator(.)ident(Text)operator(\))operator(;)
          integer(1)operator(:) ident(MainReg)operator(.)ident(WriteExpandString)operator(()ident(Strings)operator([)ident(i)operator(])operator(,) ident(StringE)operator(.)ident(Text)operator(\))operator(;)
        keyword(end)operator(;)
      keyword(end)operator(;)
    ident(ValuesWin)operator(.)ident(UpdateValues)operator(()ident(True)operator(\))operator(;)
  keyword(finally)
    ident(MainReg)operator(.)ident(CloseKey)operator(;)
  keyword(end)operator(;)
  ident(ValuesWin)operator(.)ident(ValueListDblClick)operator(()ident(Sender)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(BoolStrCBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(var)
  ident(i)operator(:) ident(Integer)operator(;)
keyword(begin)
  keyword(for) ident(i) operator(:=) integer(0) keyword(to) ident(High)operator(()ident(BoolStr)operator(\)) keyword(do) keyword(begin)
    keyword(if) operator(()ident(BoolStr)operator([)ident(i)operator(,) ident(False)operator(]) operator(=) ident(StringE)operator(.)ident(Text)operator(\))
     keyword(or) operator(()ident(BoolStr)operator([)ident(i)operator(,) ident(True)operator(]) operator(=) ident(StringE)operator(.)ident(Text)operator(\)) keyword(then)
      ident(Break)operator(;)
  keyword(end)operator(;)
  
  keyword(if) ident(i) operator(>) ident(High)operator(()ident(BoolStr)operator(\)) keyword(then)
    ident(Exit)operator(;)

  ident(StringE)operator(.)ident(Text) operator(:=) ident(BoolStr)operator([)ident(i)operator(])operator([)ident(BoolStrCB)operator(.)ident(Checked)operator(])operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(CardinalEChange)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(HexEditAutoChange) operator(:=) ident(True)operator(;)
  keyword(with) ident(CardBoolCB) keyword(do) keyword(begin)
    ident(Enabled) operator(:=) ident(True)operator(;)
    keyword(case) ident(CardinalE)operator(.)ident(Value) keyword(of)
      integer(1)operator(:) ident(Checked) operator(:=) ident(True)operator(;)
      integer(0)operator(:) ident(Checked) operator(:=) ident(False)operator(;)
    keyword(else)
      ident(Enabled) operator(:=) ident(False)operator(;)
    keyword(end)operator(;)
  keyword(end)operator(;)
  ident(HexEdit1)operator(.)ident(Value) operator(:=) ident(CardinalE)operator(.)ident(Value)operator(;)
  ident(HexEditAutoChange) operator(:=) ident(False)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(CardBoolCBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  keyword(if) ident(HexEditAutoChange) keyword(then)
    ident(Exit)operator(;)
  ident(CardinalE)operator(.)ident(Value) operator(:=) ident(Ord)operator(()ident(CardBoolCB)operator(.)ident(Checked)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(CardinalEKeyDown)operator(()ident(Sender)operator(:) ident(TObject)operator(;) keyword(var) ident(Key)operator(:) ident(Word)operator(;)
  ident(Shift)operator(:) ident(TShiftState)operator(\))operator(;)
keyword(begin)
  keyword(if) ident(key) operator(=) ident(VK_RETURN) keyword(then) keyword(begin)
    ident(OKIntBClick)operator(()ident(Sender)operator(\))operator(;)
    ident(ValuesWin)operator(.)ident(FocusControl)operator(()ident(ValueList)operator(\))operator(;)
  keyword(end)operator(;)
  
  keyword(if) ident(key) operator(=) ident(VK_ESCAPE) keyword(then)
    ident(CancelBClick)operator(()ident(Sender)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(OKIntBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(var)
  ident(i)operator(:) ident(Integer)operator(;)
  
  keyword(procedure) ident(Write4BB)operator(()keyword(const) ident(ValueName)operator(:) keyword(string)operator(;) ident(Value)operator(:) ident(Cardinal)operator(\))operator(;)
  keyword(var)
    ident(Typ)operator(:) ident(TRegDataType)operator(;)
  keyword(begin)
    keyword(if) ident(MainReg)operator(.)ident(ValueReallyExists)operator(()ident(ValueName)operator(\)) keyword(then)
      ident(Typ) operator(:=) ident(MainReg)operator(.)ident(GetDataType)operator(()ident(ValueName)operator(\))
    keyword(else)
      ident(Typ) operator(:=) ident(rdBinary)operator(;)

    keyword(if) ident(Typ) keyword(in) ident(rdCardTypes) keyword(then)
      ident(Typ) operator(:=) ident(rdBinary)operator(;)

    ident(MainReg)operator(.)ident(WriteBinType)operator(()ident(ValueName)operator(,) ident(ByteAOfInt)operator(()ident(CardinalE)operator(.)ident(Value)operator(\))operator(,) ident(Typ)operator(\))operator(;)
  keyword(end)operator(;)

keyword(begin)
  keyword(try)
    ident(OpenCurKey)operator(;)
    keyword(with) ident(ValuesWin)operator(.)ident(ValueNames) keyword(do)
      keyword(for) ident(i) operator(:=) integer(0) keyword(to) ident(Count)operator(-)integer(1) keyword(do) keyword(begin)
        keyword(case) ident(CardTypeRG)operator(.)ident(ItemIndex) keyword(of)
          integer(0)operator(:) ident(MainReg)operator(.)ident(WriteCardinal)operator(()ident(Strings)operator([)ident(i)operator(])operator(,) ident(CardinalE)operator(.)ident(Value)operator(\))operator(;)
          integer(1)operator(:) ident(MainReg)operator(.)ident(WriteCardinal)operator(()ident(Strings)operator([)ident(i)operator(])operator(,) ident(CardinalE)operator(.)ident(Value)operator(,) ident(True)operator(\))operator(;)
          integer(2)operator(:) ident(Write4BB)operator(()ident(Strings)operator([)ident(i)operator(])operator(,) ident(CardinalE)operator(.)ident(Value)operator(\))operator(;)
        keyword(end)operator(;)
      keyword(end)operator(;)
    ident(ValuesWin)operator(.)ident(UpdateValues)operator(()ident(True)operator(\))operator(;)
  keyword(finally)
    ident(MainReg)operator(.)ident(CloseKey)operator(;)
  keyword(end)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(ShowPCChange)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(FocusControl)operator(()ident(TObject)operator(()ident(ShowPC)operator(.)ident(ActivePage)operator(.)ident(Tag)operator(\)) keyword(as) ident(TWinControl)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(ShowPCChanging)operator(()ident(Sender)operator(:) ident(TObject)operator(;) keyword(var) ident(AllowChange)operator(:) ident(Boolean)operator(\))operator(;)

  keyword(function) ident(ByteAOfDWORD)operator(()ident(a)operator(:) ident(DWORD)operator(\))operator(:) ident(TByteA)operator(;)
  keyword(begin)
    ident(SetLength)operator(()ident(Result)operator(,) ident(SizeOf)operator(()ident(DWORD)operator(\))operator(\))operator(;)
    ident(Move)operator(()ident(a)operator(,) ident(Pointer)operator(()ident(Result)operator(\))operator(^)operator(,) ident(SizeOf)operator(()ident(DWORD)operator(\))operator(\))operator(;)
  keyword(end)operator(;)

keyword(var)
  ident(SourcePage)operator(:) ident(TTabSheet)operator(;)
  ident(ValueName)operator(:) keyword(string)operator(;)
keyword(begin)
  ident(SourcePage) operator(:=) ident(ShowPC)operator(.)ident(ActivePage)operator(;)
  keyword(if) ident(SourcePage) operator(=) ident(IntPage) keyword(then) keyword(begin)

    keyword(if) ident(TargetPage) operator(=) ident(StringPage) keyword(then) keyword(begin)
      ident(AddHint)operator(()string<delimiter(')content(Converting: DWORD --> String)delimiter(')>operator(\))operator(;)
      ident(StringE)operator(.)ident(Text) operator(:=) ident(CardinalE)operator(.)ident(Text)operator(;)
    keyword(end) keyword(else) keyword(if) ident(TargetPage) operator(=) ident(BinaryPage) keyword(then) keyword(begin)
      ident(AddHint)operator(()string<delimiter(')content(Converting: DWORD --> Binary)delimiter(')>operator(\))operator(;)
      ident(BinaryHM)operator(.)ident(Data) operator(:=) ident(ByteAOfDWORD)operator(()ident(CardinalE)operator(.)ident(Value)operator(\))operator(;)
    keyword(end) keyword(else)
      ident(AllowChange) operator(:=) ident(False)operator(;)

  keyword(end) keyword(else) keyword(if) ident(SourcePage) operator(=) ident(StringPage) keyword(then) keyword(begin)
    keyword(if) ident(TargetPage) operator(=) ident(IntPage) keyword(then) keyword(begin)
      keyword(if) ident(IsValidCardinal)operator(()ident(StringE)operator(.)ident(Text)operator(\)) keyword(then) keyword(begin)
        ident(AddHint)operator(()string<delimiter(')content(Converting: String --> DWORD)delimiter(')>operator(\))operator(;)
        ident(CardinalE)operator(.)ident(Text) operator(:=) ident(StringE)operator(.)ident(Text)operator(;)
      keyword(end) keyword(else) keyword(begin)
        ident(AddHint)operator(()string<delimiter(')content(This no valid DWORD; Converting aborted.)delimiter(')>operator(,) ident(True)operator(\))operator(;)
        ident(AllowChange) operator(:=) ident(False)operator(;)
      keyword(end)operator(;)
    keyword(end) keyword(else) keyword(if) ident(TargetPage) operator(=) ident(BinaryPage) keyword(then) keyword(begin)
      ident(AddHint)operator(()string<delimiter(')content(Converting: String --> Binary)delimiter(')>operator(\))operator(;)
      ident(BinaryHM)operator(.)ident(Data) operator(:=) ident(TByteA)operator(()ident(StringE)operator(.)ident(Text)operator(\))operator(;)
    keyword(end) keyword(else) keyword(if) ident(TargetPage) operator(=) ident(MultiStringPage) keyword(then) keyword(begin)
      ident(AddHint)operator(()string<delimiter(')content(Converting: String --> MultiString)delimiter(')>operator(\))operator(;)
      keyword(if) ident(SeparatorE)operator(.)ident(Text) operator(=) string<delimiter(')delimiter(')> keyword(then)
        ident(MultiStringM)operator(.)ident(Text) operator(:=) ident(StringE)operator(.)ident(Text)operator(;)
      ident(SeparatorEChange)operator(()ident(Sender)operator(\))operator(;)
    keyword(end) keyword(else)
      ident(AllowChange) operator(:=) ident(False)operator(;)

  keyword(end) keyword(else) keyword(if) ident(SourcePage) operator(=) ident(BinaryPage) keyword(then) keyword(begin)
    keyword(if) ident(TargetPage) operator(=) ident(StringPage) keyword(then) keyword(begin)
      ident(AddHint)operator(()string<delimiter(')content(Converting: Binary --> String)delimiter(')>operator(\))operator(;)
      ident(StringE)operator(.)ident(Text) operator(:=) ident(FriendlyStr)operator(()keyword(string)operator(()ident(BinaryHM)operator(.)ident(Data)operator(\))operator(\))operator(;)
    keyword(end) keyword(else) keyword(if) ident(TargetPage) operator(=) ident(IntPage) keyword(then) keyword(begin)
      keyword(if) ident(Length)operator(()ident(BinaryHM)operator(.)ident(Data)operator(\)) operator(>=) ident(SizeOf)operator(()ident(DWORD)operator(\)) keyword(then) keyword(begin)
        ident(AddHint)operator(()string<delimiter(')content(Converting: Binary --> DWORD)delimiter(')>operator(\))operator(;)
        ident(CardinalE)operator(.)ident(Value) operator(:=) ident(PDWORD)operator(()ident(BinaryHM)operator(.)ident(Data)operator(\))operator(^)operator(;)
      keyword(end) keyword(else) keyword(begin)
        ident(AddHint)operator(()string<delimiter(')content(Binary value not long enough (4 Byte\); Converting aborted.)delimiter(')>operator(,) ident(True)operator(\))operator(;)
        ident(AllowChange) operator(:=) ident(False)operator(;)
      keyword(end)operator(;)
    keyword(end) keyword(else) keyword(if) ident(TargetPage) operator(=) ident(CryptoPage) keyword(then) keyword(begin)
      keyword(if) ident(ValuesWin)operator(.)ident(ValueNames)operator(.)ident(Count) operator(=) integer(1) keyword(then) keyword(begin)
        ident(ValueName) operator(:=) ident(ValuesWin)operator(.)ident(ValueNames)operator([)integer(0)operator(])operator(;)
        keyword(with) ident(CryptoTypeRG) keyword(do) keyword(begin)
          ident(ItemIndex) operator(:=) operator(-)integer(1)operator(;)
          keyword(if) ident(SameText)operator(()ident(ValueName)operator(,) string<delimiter(')content(ScreenSave_Data)delimiter(')>operator(\)) keyword(then) keyword(begin)
            ident(ItemIndex) operator(:=) integer(0)operator(;)
            ident(CryptoE)operator(.)ident(Text) operator(:=) ident(DecodeScreenSaver)operator(()ident(BinaryHM)operator(.)ident(Data)operator(\))operator(;)
          keyword(end) keyword(else) keyword(if) ident(SameText)operator(()ident(ValueName)operator(,) string<delimiter(')content(parm1enc)delimiter(')>operator(\))
           keyword(or) ident(SameText)operator(()ident(ValueName)operator(,) string<delimiter(')content(parm2enc)delimiter(')>operator(\)) keyword(then) keyword(begin)
            ident(ItemIndex) operator(:=) integer(1)operator(;)
            ident(CryptoE)operator(.)ident(Text) operator(:=) ident(DecodeSharedFolder)operator(()ident(BinaryHM)operator(.)ident(Data)operator(\))operator(;)
          keyword(end)operator(;)
        keyword(end)operator(;)
        keyword(if) ident(CryptoTypeRG)operator(.)ident(ItemIndex) operator(=) operator(-)integer(1) keyword(then)
          ident(AllowChange) operator(:=) ident(False)operator(;)
      keyword(end)operator(;)
    keyword(end) keyword(else)
      ident(AllowChange) operator(:=) ident(False)operator(;)

  keyword(end) keyword(else) keyword(if) ident(SourcePage) operator(=) ident(MultiStringPage) keyword(then) keyword(begin)
    keyword(if) ident(TargetPage) operator(=) ident(StringPage) keyword(then) keyword(begin)
      ident(AddHint)operator(()string<delimiter(')content(Converting: MultiString --> String )delimiter(')>operator(\))operator(;)
      keyword(if) ident(SeparatorE)operator(.)ident(Text) operator(=) string<delimiter(')delimiter(')> keyword(then)
        ident(StringE)operator(.)ident(Text) operator(:=) ident(MultiStringM)operator(.)ident(Text)
      keyword(else)
        ident(StringE)operator(.)ident(Text) operator(:=) ident(Join)operator(()ident(MultiStringM)operator(.)ident(Lines)operator(,) ident(SeparatorE)operator(.)ident(Text)operator(\))operator(;)
    comment(//end else if TargetPage = BinaryPage then begin)
    keyword(end) keyword(else)
      ident(AllowChange) operator(:=) ident(False)operator(;)

  keyword(end) keyword(else)
    ident(AllowChange) operator(:=) ident(False)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(ShowPCDrawTab)operator(()ident(Control)operator(:) ident(TCustomTabControl)operator(;) ident(TabIndex)operator(:) ident(Integer)operator(;)
  keyword(const) ident(Rect)operator(:) ident(TRect)operator(;) ident(Active)operator(:) ident(Boolean)operator(\))operator(;)
keyword(var)
  ident(PC)operator(:) ident(TPageControl)operator(;)
  ident(Page)operator(:) ident(TTabSheet)operator(;)
keyword(begin)
  ident(PC) operator(:=) ident(TPageControl)operator(()ident(Control)operator(\))operator(;)
  ident(Page) operator(:=) ident(PC)operator(.)ident(Pages)operator([)ident(TabIndex)operator(])operator(;)
  keyword(with) ident(PC)operator(.)ident(Canvas)operator(.)ident(Font) keyword(do) keyword(begin)
    keyword(if) ident(Page) operator(=) ident(StringPage) keyword(then)
      ident(Color) operator(:=) ident(clBrightRed)
    keyword(else) keyword(if) ident(Page) operator(=) ident(MultiStringPage) keyword(then)
      ident(Color) operator(:=) ident(clBrightPurple)
    keyword(else) keyword(if) ident(Page) operator(=) ident(IntPage) keyword(then)
      ident(Color) operator(:=) ident(clBrightBlue)
    keyword(else) keyword(if) ident(Page) operator(=) ident(BinaryPage) keyword(then)
      ident(Color) operator(:=) ident(clBrightGreen)
    keyword(else) keyword(if) ident(Page) operator(=) ident(CryptoPage) keyword(then)
      ident(Color) operator(:=) ident(clBrightCyan)operator(;)
  keyword(end)operator(;)

  keyword(with) ident(PC)operator(.)ident(Canvas) keyword(do) keyword(begin)
    keyword(if) ident(Active) keyword(then)
      ident(Brush)operator(.)ident(Color) operator(:=) ident(clGray)
    keyword(else)
      ident(Brush)operator(.)ident(Color) operator(:=) ident(clDarkGray)operator(;)
    ident(FillRect)operator(()ident(Rect)operator(\))operator(;)
    ident(TextOut)operator(()ident(Rect)operator(.)ident(Left) operator(+) integer(18) operator(+) integer(3)operator(,) ident(Rect)operator(.)ident(Top)operator(,) ident(Page)operator(.)ident(Caption)operator(\))operator(;)
    ident(MainWin)operator(.)ident(ImageList1)operator(.)ident(Draw)operator(()ident(Control)operator(.)ident(Canvas)operator(,) ident(Rect)operator(.)ident(Left) operator(-) integer(1)operator(,) ident(Rect)operator(.)ident(Top) operator(-) integer(1)operator(,) ident(Page)operator(.)ident(ImageIndex)operator(\))operator(;)
  keyword(end)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(ShowPCMouseDown)operator(()ident(Sender)operator(:) ident(TObject)operator(;) ident(Button)operator(:) ident(TMouseButton)operator(;)
  ident(Shift)operator(:) ident(TShiftState)operator(;) ident(X)operator(,) ident(Y)operator(:) ident(Integer)operator(\))operator(;)
keyword(begin)
  keyword(with) ident(ShowPC) keyword(do)
    keyword(if) ident(htOnItem) keyword(in) ident(GetHitTestInfoAt)operator(()ident(X)operator(,) ident(Y)operator(\)) keyword(then)
      ident(TargetPage) operator(:=) ident(Pages)operator([)ident(IndexOfTabAt)operator(()ident(X)operator(,) ident(Y)operator(\))operator(])operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(FormCreate)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(var)
  ident(i)operator(:) ident(Integer)operator(;)
keyword(begin)
  ident(WorkU)operator(.)ident(ShowPC) operator(:=) ident(ShowPC)operator(;)
  ident(WorkU)operator(.)ident(MainPC) operator(:=) ident(MainPC)operator(;)

  comment(//Zeromize)
  ident(ShowPC)operator(.)ident(ActivePage) operator(:=) keyword(nil)operator(;)
  ident(InfoMemo)operator(.)ident(Text) operator(:=) string<delimiter(')delimiter(')>operator(;)
  ident(MultiStringM)operator(.)ident(Clear)operator(;)
  ident(SisyTV)operator(.)ident(Items)operator(.)ident(Clear)operator(;)
  ident(CurValueE)operator(.)ident(Text) operator(:=) ident(NoValueCaption)operator(;)
  ident(HexEditAutoChange) operator(:=) ident(False)operator(;)
  ident(TargetPage) operator(:=) keyword(nil)operator(;)

  comment(//Tagging)
  ident(StringPage)operator(.)ident(Tag) operator(:=) ident(Integer)operator(()ident(StringE)operator(\))operator(;)
  ident(IntPage)operator(.)ident(Tag) operator(:=) ident(Integer)operator(()ident(CardinalE)operator(\))operator(;)
  ident(BinaryPage)operator(.)ident(Tag) operator(:=) ident(Integer)operator(()ident(BinaryHM)operator(\))operator(;)
  ident(MultiStringPage)operator(.)ident(Tag) operator(:=) ident(Integer)operator(()ident(MultiStringM)operator(\))operator(;)
  ident(ShowAsBinary) operator(:=) ident(False)operator(;)

  keyword(if) keyword(not) ident(Win9x) keyword(then)
    ident(CryptoPage)operator(.)ident(TabVisible) operator(:=) ident(False)operator(;)

  ident(MainPC)operator(.)ident(ActivePage) operator(:=) ident(HintPage)operator(;)
  ident(ShowPC)operator(.)ident(ActivePage) operator(:=) keyword(nil)operator(;)

  ident(DropFileTarget)operator(.)ident(register)operator(()ident(StringE)operator(\))operator(;)

  keyword(with) ident(StringTypeRG) keyword(do)
    keyword(for) ident(i) operator(:=) integer(0) keyword(to) ident(ControlCount)operator(-)integer(1) keyword(do)
      operator(()ident(Controls)operator([)ident(i)operator(]) keyword(as) ident(TRadioButton)operator(\))operator(.)ident(OnKeyDown) operator(:=) ident(StringEKeyDown)operator(;)

  ident(ExternalEditB)operator(.)ident(Enabled) operator(:=) ident(FileEx)operator(()ident(PrefWin)operator(.)ident(ExternalHexEditE)operator(.)ident(Text)operator(\))operator(;)

  ident(PipelineThread) operator(:=) ident(TPipelineThread)operator(.)ident(CreateIt)operator(()ident(tpIdle)operator(,) string<delimiter(')delimiter(')>operator(,) ident(BinaryHM)operator(\))operator(;)
  ident(PipelineThread)operator(.)ident(OnChange) operator(:=) ident(LoadExternalBClick)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(OKBinaryBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(var)
  ident(Typ)operator(:) ident(Cardinal)operator(;)
  ident(i)operator(:) ident(Integer)operator(;)
keyword(begin)
  keyword(try)
    ident(Typ) operator(:=) ident(StrToIntDef)operator(()ident(UntilChar)operator(()ident(DataTypeComB)operator(.)ident(Text)operator(,) char<delimiter(')content( )delimiter(')>operator(\))operator(,) ident(Integer)operator(()ident(rdBinary)operator(\))operator(\))operator(;)
    ident(OpenCurKey)operator(;)
    keyword(with) ident(ValuesWin)operator(.)ident(ValueNames) keyword(do)
      keyword(for) ident(i) operator(:=) integer(0) keyword(to) ident(Count)operator(-)integer(1) keyword(do)
        ident(MainReg)operator(.)ident(WriteBinType)operator(()ident(Strings)operator([)ident(i)operator(])operator(,) ident(BinaryHM)operator(.)ident(Data)operator(,) ident(Typ)operator(\))operator(;)
    ident(ValuesWin)operator(.)ident(UpdateValues)operator(()ident(True)operator(\))operator(;)
  keyword(finally)
    ident(MainReg)operator(.)ident(CloseKey)operator(;)
  keyword(end)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(HexGrid1Click)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  comment({with BinaryHM do begin
    with BinL, Font do
      if ActiveByte < ByteCount then
        Color := clBrightGreen
      else begin
        Color := clSilver;
        Caption := '00000000';
      end;
    BinL.Caption := IntToBinFill(CurrentByte, 8\);
  end; })
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(HexGrid1KeyDown)operator(()ident(Sender)operator(:) ident(TObject)operator(;) keyword(var) ident(Key)operator(:) ident(Word)operator(;)
  ident(Shift)operator(:) ident(TShiftState)operator(\))operator(;)
keyword(begin)
  keyword(if) ident(key) operator(=) ident(VK_RETURN) keyword(then) keyword(begin)
    ident(OKBinaryBClick)operator(()ident(Sender)operator(\))operator(;)
    ident(ValuesWin)operator(.)ident(FocusControl)operator(()ident(ValueList)operator(\))operator(;)
  keyword(end)operator(;)
  keyword(if) ident(key) operator(=) ident(VK_ESCAPE) keyword(then)
    ident(CancelBClick)operator(()ident(Sender)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(BoolStrPopup)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(StringE)operator(.)ident(Text) operator(:=) ident(TMenuItem)operator(()ident(Sender)operator(\))operator(.)ident(Caption)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(StringPageEnter)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(FocusControl)operator(()ident(StringE)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(IntPageEnter)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(FocusControl)operator(()ident(CardinalE)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(BinaryPageEnter)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(FocusControl)operator(()ident(BinaryHM)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(ActivateIt)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(ActivateThis)operator(()ident(Sender)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(DeActivateIt)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(DeActivateThis)operator(()ident(Sender)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(FormDeactivate)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  keyword(if) ident(Assigned)operator(()ident(ActiveControl)operator(\)) keyword(and) operator(()ident(ActiveControl)operator(.)ident(Tag) operator(=) ident(EditControlFlag)operator(\)) keyword(then)
    ident(TEdit)operator(()ident(ActiveControl)operator(\))operator(.)ident(OnExit)operator(()ident(Sender)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(FormActivate)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  keyword(if) ident(Assigned)operator(()ident(ActiveControl)operator(\)) keyword(and) operator(()ident(ActiveControl)operator(.)ident(Tag) operator(=) ident(EditControlFlag)operator(\)) keyword(then)
    ident(TEdit)operator(()ident(ActiveControl)operator(\))operator(.)ident(OnEnter)operator(()ident(Sender)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(MultiStringMChange)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(MultiStringCountL)operator(.)ident(Caption) operator(:=) ident(StrNumerus)operator(()ident(MultiStringM)operator(.)ident(Lines)operator(.)ident(Count)operator(,)
                                          string<delimiter(')content(Line)delimiter(')>operator(,) string<delimiter(')content(Lines)delimiter(')>operator(,) string<delimiter(')content(No)delimiter(')>operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(OKMultiStringBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(var)
  ident(UseExtendedModel)operator(:) ident(Boolean)operator(;)
  ident(i)operator(:) ident(Integer)operator(;)
  ident(JoinedText)operator(:) keyword(string)operator(;)
keyword(begin)
  keyword(if) operator(()ident(MultiStringTypeRG)operator(.)ident(ItemIndex) operator(=) integer(1)operator(\)) keyword(then) keyword(begin)
    keyword(if) ident(ValuesWin)operator(.)ident(ValueCommonType) operator(=) ident(rdMultiString) keyword(then)
      keyword(if) ident(mrYes)operator(<>)ident(MessageDlg)operator(()string<delimiter(')content(Do you want to change the type of this value?)delimiter(')> operator(+) ident(EOL) operator(+)
       string<delimiter(')content(MultiString --> String)delimiter(')>operator(,) ident(mtWarning)operator(,) operator([)ident(mbYes)operator(,) ident(mbCancel)operator(])operator(,) integer(0)operator(\)) keyword(then)
        ident(Exit)operator(;)

    keyword(try)
      ident(OpenCurKey)operator(;)
      ident(JoinedText) operator(:=) ident(Join)operator(()ident(MultiStringM)operator(.)ident(Lines)operator(,) ident(SeparatorE)operator(.)ident(Text)operator(\))operator(;)
      keyword(with) ident(ValuesWin)operator(.)ident(ValueNames) keyword(do)
        keyword(for) ident(i) operator(:=) integer(0) keyword(to) ident(Count)operator(-)integer(1) keyword(do)
          ident(MainReg)operator(.)ident(WriteString)operator(()ident(Strings)operator([)ident(i)operator(])operator(,) ident(JoinedText)operator(\))operator(;)
      ident(ValuesWin)operator(.)ident(UpdateValues)operator(()ident(True)operator(\))operator(;)
    keyword(finally)
      ident(MainReg)operator(.)ident(CloseKey)operator(;)
    keyword(end)operator(;)
  ident(Exit)operator(;) keyword(end)operator(;)

  ident(UseExtendedModel) operator(:=) ident(True)operator(;)
  keyword(if) ident(ContainsEmptyLines)operator(()ident(MultiStringM)operator(.)ident(Lines)operator(\)) keyword(then)
    keyword(case) ident(MessageDlg)operator(()string<delimiter(')content(This text contains empty lines.)delimiter(')> operator(+) ident(EOL) operator(+)
                    string<delimiter(')content(These are not allowed in the standard MultiString model.)delimiter(')> operator(+) ident(EOL) operator(+)
                    string<delimiter(')content(Do you want to delete them?)delimiter(')> operator(+) ident(EOL) operator(+)
                    ident(EOL) operator(+)
                    string<delimiter(')content(Yes: Delete empty lines)delimiter(')> operator(+) ident(EOL) operator(+)
                    string<delimiter(')content(No: Use the Extended Model)delimiter(')>operator(,)
                    ident(mtWarning)operator(,) operator([)ident(mbYes)operator(,) ident(mbNo)operator(,) ident(mbCancel)operator(])operator(,) integer(0)operator(\)) keyword(of)

    ident(mrNo)operator(:) ident(UseExtendedModel) operator(:=) ident(True)operator(;)

    ident(mrYes)operator(:) keyword(begin)
      keyword(with) ident(MultiStringM) keyword(do) keyword(begin)
        ident(Lines)operator(.)ident(BeginUpdate)operator(;)
        ident(DeleteEmptyLines)operator(()ident(Lines)operator(\))operator(;)
        ident(Lines)operator(.)ident(EndUpdate)operator(;)
      keyword(end)operator(;)
    keyword(end)operator(;)

    keyword(else) ident(Exit)operator(;)
    
    keyword(end)operator(;)

  keyword(try)
    ident(OpenCurKey)operator(;)
    keyword(with) ident(ValuesWin)operator(.)ident(ValueNames) keyword(do)
      keyword(for) ident(i) operator(:=) integer(0) keyword(to) ident(Count)operator(-)integer(1) keyword(do) keyword(begin)
        keyword(if) ident(MainReg)operator(.)ident(GetDataType)operator(()ident(Strings)operator([)ident(i)operator(])operator(\)) operator(<>) ident(rdMultiString) keyword(then)
          keyword(if) ident(mrYes) operator(<>) ident(MessageDlg)operator(()string<delimiter(')content(Do you want to change the type of this value?)delimiter(')> operator(+) ident(EOL) operator(+)
           string<delimiter(')content(--> MultiString)delimiter(')>operator(,) ident(mtWarning)operator(,) operator([)ident(mbYes)operator(,) ident(mbCancel)operator(])operator(,) integer(0)operator(\)) keyword(then)
            ident(Exit)operator(;)
        keyword(if) ident(UseExtendedModel) keyword(then)
          ident(MainReg)operator(.)ident(WriteStringList)operator(()ident(Strings)operator([)ident(i)operator(])operator(,) ident(MultiStringM)operator(.)ident(Lines)operator(\))
        keyword(else)
          ident(MainReg)operator(.)ident(WriteMultiString)operator(()ident(Strings)operator([)ident(i)operator(])operator(,) ident(MultiStringM)operator(.)ident(Lines)operator(\))operator(;)
      keyword(end)operator(;)
    ident(ValuesWin)operator(.)ident(UpdateValues)operator(()ident(True)operator(\))operator(;)
  keyword(finally)
    ident(MainReg)operator(.)ident(CloseKey)operator(;)
  keyword(end)operator(;)

  ident(ValuesWin)operator(.)ident(ValueListDblClick)operator(()ident(Sender)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(StringAsColorPDblClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  keyword(if) ident(ColorDlg)operator(.)ident(Execute) keyword(then)
    ident(StringE)operator(.)ident(Text) operator(:=) ident(StringOfColor)operator(()ident(ColorDlg)operator(.)ident(Color)operator(,) ident(csfThreeSpacedDecimals)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(MultiStringMEnter)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(MultiStringM)operator(.)ident(SelectAll)operator(;)
  ident(ActivateIt)operator(()ident(MultiStringM)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(LadenMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  keyword(with) ident(MultiStringOpenD) keyword(do) keyword(begin)
    ident(InitialDir) operator(:=) ident(ExtractFileDrive)operator(()ident(MyDir)operator(\))operator(;)
    keyword(if) ident(Execute) keyword(then)
      ident(MultiStringM)operator(.)ident(Lines)operator(.)ident(LoadFromFile)operator(()ident(FileName)operator(\))operator(;)
  keyword(end)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(SpeichernMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  keyword(with) ident(MultiStringSaveD) keyword(do) keyword(begin)
    ident(InitialDir) operator(:=) ident(ExtractFileDrive)operator(()ident(MyDir)operator(\))operator(;)
    keyword(if) ident(Execute) keyword(then)
      ident(MultiStringM)operator(.)ident(Lines)operator(.)ident(SaveToFile)operator(()ident(FileName)operator(\))operator(;)
  keyword(end)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(Hinzufgen1Click)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(var)
  ident(SL)operator(:) ident(TStringList)operator(;)
keyword(begin)
  keyword(with) ident(MultiStringOpenD) keyword(do) keyword(begin)
    ident(InitialDir) operator(:=) ident(ExtractFileDrive)operator(()ident(MyDir)operator(\))operator(;)
    keyword(if) ident(Execute) keyword(then) keyword(begin)
      ident(SL) operator(:=) ident(TStringList)operator(.)ident(Create)operator(;)
      ident(SL)operator(.)ident(LoadFromFile)operator(()ident(FileName)operator(\))operator(;)
      ident(MultiStringM)operator(.)ident(Lines)operator(.)ident(AddStrings)operator(()ident(SL)operator(\))operator(;)
      ident(SL)operator(.)ident(Free)operator(;)
    keyword(end)operator(;)
  keyword(end)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(CancelBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(ValuesWin)operator(.)ident(FocusControl)operator(()ident(ValueList)operator(\))operator(;)
  ident(ValuesWin)operator(.)ident(ValueListChange)operator(()ident(Sender)operator(,) ident(ValueList)operator(.)ident(Selected)operator(,) ident(ctState)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(HexGrid1Enter)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(HexGrid1Click)operator(()ident(Sender)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(SpyClearTracesBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(SpyLB)operator(.)ident(Clear)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(SpyLBKeyDown)operator(()ident(Sender)operator(:) ident(TObject)operator(;) keyword(var) ident(Key)operator(:) ident(Word)operator(;)
  ident(Shift)operator(:) ident(TShiftState)operator(\))operator(;)
keyword(begin)
  keyword(if) operator(()ident(ssShift) keyword(in) ident(Shift)operator(\)) keyword(and) operator(()ident(key) operator(=) ident(VK_DELETE)operator(\)) keyword(then) keyword(begin)
    ident(key) operator(:=) integer(0)operator(;)
    ident(SpyLB)operator(.)ident(Clear)operator(;)
  ident(Exit)operator(;) keyword(end)operator(;)

  keyword(if) ident(key) operator(=) ident(VK_F9) keyword(then) keyword(begin)
    ident(key) operator(:=) integer(0)operator(;)
    ident(SwapFonts)operator(()ident(SpyLB)operator(\))operator(;)
  ident(Exit)operator(;) keyword(end)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(BinLClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
 comment(// with HexGrid1 do)
 comment(//   Byt[ActiveByte] := IntOfBin(BinL.Caption\);)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(HexGrid1KeyUp)operator(()ident(Sender)operator(:) ident(TObject)operator(;) keyword(var) ident(Key)operator(:) ident(Word)operator(;)
  ident(Shift)operator(:) ident(TShiftState)operator(\))operator(;)
keyword(begin)
  comment(//HexGrid1Click(Sender\);)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(ValueViewChanged)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(var)
  ident(i)operator(:) ident(Integer)operator(;)
keyword(begin)
  keyword(if) keyword(not) ident(Started) keyword(then)
    ident(Exit)operator(;)

  ident(SpyThread)operator(.)ident(Suspend)operator(;)
  ident(OpenCurKey)operator(;)
  keyword(for) ident(i) operator(:=) integer(0) keyword(to) ident(ValueList)operator(.)ident(Items)operator(.)ident(Count)operator(-)integer(1) keyword(do)
    ident(ValuesWin)operator(.)ident(UpdateValue)operator(()ident(MainReg)operator(,) ident(ValueList)operator(.)ident(Items)operator([)ident(i)operator(])operator(\))operator(;)

  ident(MainReg)operator(.)ident(CloseKey)operator(;)
  ident(SpyThread)operator(.)ident(Resume)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(HexEdit1Change)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  keyword(if) keyword(not) ident(HexEditAutoChange) keyword(then)
    ident(CardinalE)operator(.)ident(Value) operator(:=) ident(HexEdit1)operator(.)ident(Value)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(SortMultiStringMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(var)
  ident(SL)operator(:) ident(TStringList)operator(;)
keyword(begin)
  ident(SL) operator(:=) ident(TStringList)operator(.)ident(Create)operator(;)
  keyword(with) ident(SL) keyword(do) keyword(begin)
    ident(Assign)operator(()ident(MultiStringM)operator(.)ident(Lines)operator(\))operator(;)
    ident(Sort)operator(;)
  keyword(end)operator(;)
  ident(MultiStringM)operator(.)ident(Lines)operator(.)ident(Assign)operator(()ident(SL)operator(\))operator(;)
  ident(SL)operator(.)ident(Free)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(SpyTestLClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(SpyTestL)operator(.)ident(Caption) operator(:=) ident(StrOfBool)operator(()ident(SpyThread)operator(.)ident(Suspended)operator(,) string<delimiter(')content(No Spy.)delimiter(')>operator(,) string<delimiter(')content(Spy active.)delimiter(')>operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(FocusForEditing)operator(;)
keyword(begin)
  ident(FocusControl)operator(()ident(MainPC)operator(\))operator(;)
keyword(end)operator(;)

keyword(function) ident(TWorkWin)operator(.)ident(LoadBoolStr)operator(:) ident(Boolean)operator(;)
keyword(var)
  ident(SL)operator(:) ident(TStringList)operator(;)
  ident(FileName)operator(:) keyword(string)operator(;)
  ident(i)operator(,) ident(p)operator(:) ident(Integer)operator(;)
keyword(begin)
  ident(Result) operator(:=) ident(True)operator(;)

  ident(AddHint)operator(()string<delimiter(')content(Loading Boolean Strings...)delimiter(')>operator(\))operator(;)

  ident(FileName) operator(:=) ident(PlutoDir) operator(+) ident(BoolStrFileName)operator(;)
  keyword(if) keyword(not) ident(FileEx)operator(()ident(FileName)operator(\)) keyword(then) keyword(begin)
    ident(AddToLastHint)operator(()string<delimiter(')content(not found:)delimiter(')>operator(\))operator(;)
    ident(AddHint)operator(()ident(FileName)operator(\))operator(;)
    ident(Result) operator(:=) ident(False)operator(;)
  keyword(end) keyword(else) keyword(begin)
    ident(SL) operator(:=) ident(TStringList)operator(.)ident(Create)operator(;)
    keyword(try)
      ident(SL)operator(.)ident(LoadFromFile)operator(()ident(FileName)operator(\))operator(;)
      ident(DeleteCommentLines)operator(()ident(SL)operator(\))operator(;)
      ident(BoolStr) operator(:=) keyword(nil)operator(;)
      ident(SetLength)operator(()ident(BoolStr)operator(,) ident(SL)operator(.)ident(Count)operator(\))operator(;)
      keyword(for) ident(i) operator(:=) integer(0) keyword(to) ident(SL)operator(.)ident(Count)operator(-)integer(1) keyword(do) keyword(begin)
        comment(//Split the string by the '|'-sign)
        ident(p) operator(:=) ident(Pos)operator(()char<delimiter(')content(|)delimiter(')>operator(,) ident(SL)operator([)ident(i)operator(])operator(\))operator(;)
        ident(BoolStr)operator([)ident(i)operator(])operator([)ident(False)operator(]) operator(:=) ident(Copy)operator(()ident(SL)operator([)ident(i)operator(])operator(,) integer(1)operator(,) ident(p)operator(-)integer(1)operator(\))operator(;)
        ident(BoolStr)operator([)ident(i)operator(])operator([)ident(True)operator(]) operator(:=) ident(Copy)operator(()ident(SL)operator([)ident(i)operator(])operator(,) ident(p)operator(+)integer(1)operator(,) ident(Length)operator(()ident(SL)operator([)ident(i)operator(])operator(\)) operator(-) ident(p)operator(\))operator(;)
      keyword(end)operator(;)
    keyword(finally)
      ident(SL)operator(.)ident(Free)operator(;)
      ident(AddToLastHint)operator(()string<delimiter(')content(OK)delimiter(')>operator(\))operator(;)
    keyword(end)operator(;)
  keyword(end)operator(;)
keyword(end)operator(;)

keyword(function) ident(TWorkWin)operator(.)ident(LoadSisyFilter)operator(:) ident(Boolean)operator(;)
keyword(var)
  ident(SL)operator(:) ident(TStringList)operator(;)
  ident(FileName)operator(:) keyword(string)operator(;)
  ident(i)operator(:) ident(Integer)operator(;)
keyword(begin)
  ident(Result) operator(:=) ident(True)operator(;)

  ident(FileName) operator(:=) ident(PlutoDir) operator(+) ident(SisyFilterFileName)operator(;)
  keyword(if) keyword(not) ident(FileEx)operator(()ident(FileName)operator(\)) keyword(then)
    ident(Result) operator(:=) ident(False)
  keyword(else) keyword(begin)
    ident(AddHint)operator(()string<delimiter(')content(Loading Sisyphus Filter Settings...)delimiter(')>operator(\))operator(;)
    ident(SL) operator(:=) ident(TStringList)operator(.)ident(Create)operator(;)
    keyword(try)
      ident(SL)operator(.)ident(LoadFromFile)operator(()ident(FileName)operator(\))operator(;)
      ident(DeleteCommentLines)operator(()ident(SL)operator(,) char<delimiter(')content(#)delimiter(')>operator(\))operator(;)
      keyword(for) ident(i) operator(:=) integer(0) keyword(to) ident(SL)operator(.)ident(Count)operator(-)integer(1) keyword(do)
        ident(SL)operator([)ident(i)operator(]) operator(:=) ident(TrimLeft)operator(()ident(SL)operator([)ident(i)operator(])operator(\))operator(;)

      ident(SisyFilter)operator(.)ident(Clear)operator(;)
      ident(SisyFilter)operator(.)ident(AddStrings)operator(()ident(SL)operator(\))operator(;)
    keyword(finally)
      ident(SL)operator(.)ident(Free)operator(;)
      ident(AddToLastHint)operator(()string<delimiter(')content(OK)delimiter(')>operator(\))operator(;)
    keyword(end)operator(;)
  keyword(end)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(SisyTVGetSelectedIndex)operator(()ident(Sender)operator(:) ident(TObject)operator(;) ident(Node)operator(:) ident(TTreeNode)operator(\))operator(;)
keyword(begin)
  ident(Node)operator(.)ident(SelectedIndex) operator(:=) ident(Node)operator(.)ident(ImageIndex)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(SisyTVDblClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(var)
  ident(Node)operator(:) ident(TTreeNode)operator(;)
  ident(Path)operator(:) keyword(string)operator(;)
keyword(begin)
  ident(Node) operator(:=) ident(SisyTV)operator(.)ident(Selected)operator(;)
  keyword(if) keyword(not) ident(Assigned)operator(()ident(Node)operator(\)) keyword(then)
    ident(Exit)operator(;)

  ident(Path) operator(:=) ident(RootOfNode)operator(()ident(Node)operator(\))operator(.)ident(Text)operator(;)

  keyword(if) ident(Node)operator(.)ident(Level) operator(>) integer(0) keyword(then) keyword(begin)
    keyword(if) ident(Node)operator(.)ident(Level) operator(=) integer(2) keyword(then)
      ident(Node) operator(:=) ident(Node)operator(.)ident(Parent)operator(;)
    keyword(if) ident(Node)operator(.)ident(HasChildren) keyword(then)
      ident(Path) operator(:=) ident(Path) operator(+) string<delimiter(')content(\\\\)delimiter(')> operator(+) ident(Node)operator(.)ident(Text) comment(//Value)
    keyword(else)
      ident(Path) operator(:=) ident(Path) operator(+) char<delimiter(')content(\\)delimiter(')> operator(+) ident(Node)operator(.)ident(Text)  comment(//SubKey)
  keyword(end)operator(;)

  ident(MainWin)operator(.)ident(GotoKey)operator(()ident(Path)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(DeleteChange)operator(()ident(Node)operator(:) ident(TTreeNode)operator(\))operator(;)
keyword(var)
  ident(SubNode)operator(:) ident(TTreeNode)operator(;)

  keyword(procedure) ident(FreeSisyChangeNode)operator(()ident(Node)operator(:) ident(TTreeNode)operator(\))operator(;)
  keyword(begin)
    keyword(try)
      keyword(with) operator(()ident(TObject)operator(()ident(Node)operator(.)ident(Data)operator(\)) keyword(as) ident(TSisyChange)operator(\)) keyword(do)
        ident(Free)operator(;)
    keyword(except)
      ident(ReportFmt)operator(()string<delimiter(')content(errors)delimiter(')>operator(,) string<delimiter(')content(Context could not be freed: "%s")delimiter(')>operator(,) operator([)ident(Node)operator(.)ident(Text)operator(])operator(\))operator(;)
    keyword(end)operator(;)

    ident(Node)operator(.)ident(Delete)operator(;)
  keyword(end)operator(;)

keyword(begin)
  keyword(if) keyword(not) ident(Assigned)operator(()ident(Node)operator(\)) keyword(then)
    ident(Exit)operator(;)

  keyword(if) ident(Node)operator(.)ident(Level) operator(=) integer(2) keyword(then)
    ident(Node) operator(:=) ident(Node)operator(.)ident(Parent)operator(;)

  keyword(if) ident(Node)operator(.)ident(Level) operator(=) integer(0) keyword(then) keyword(begin)
    ident(SisyTV)operator(.)ident(Selected) operator(:=) ident(GetNextBest)operator(()ident(RootOfNode)operator(()ident(Node)operator(\))operator(\))operator(;)
    ident(SubNode) operator(:=) ident(Node)operator(.)ident(GetFirstChild)operator(;)
    keyword(while) ident(Assigned)operator(()ident(SubNode)operator(\)) keyword(do) keyword(begin)
      ident(FreeSisyChangeNode)operator(()ident(SubNode)operator(\))operator(;)
    ident(SubNode) operator(:=) ident(Node)operator(.)ident(GetFirstChild)operator(;) keyword(end)operator(;)
    ident(Node)operator(.)ident(Delete)operator(;)
  keyword(end) keyword(else) keyword(begin)
    ident(SisyTV)operator(.)ident(Selected) operator(:=) ident(GetNextBest)operator(()ident(Node)operator(\))operator(;)
    ident(FreeSisyChangeNode)operator(()ident(Node)operator(\))operator(;)
  keyword(end)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(DeactivateChange)operator(()ident(Node)operator(:) ident(TTreeNode)operator(\))operator(;)
keyword(begin)
  ident(Node) operator(:=) ident(RootOfNode)operator(()ident(Node)operator(\))operator(;)

  keyword(if) keyword(not) ident(Assigned)operator(()ident(Node)operator(\)) keyword(then)
    ident(Exit)operator(;)

  keyword(if) ident(SisyChangeActivated)operator(()ident(Node)operator(\)) keyword(then) keyword(begin)
    ident(SetSisyChangeState)operator(()ident(Node)operator(,) ident(False)operator(\))operator(;)
    ident(Node)operator(.)ident(Cut) operator(:=) ident(True)operator(;)
  keyword(end) keyword(else) keyword(begin)
    ident(SetSisyChangeState)operator(()ident(Node)operator(,) ident(True)operator(\))operator(;)
    ident(Node)operator(.)ident(Cut) operator(:=) ident(False)operator(;)
  keyword(end)operator(;)
  ident(SisyTV)operator(.)ident(Repaint)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(CopySelectedChangeName)operator(;)
keyword(var)
  ident(Node)operator(:) ident(TTreeNode)operator(;)
keyword(begin)
  ident(Node) operator(:=) ident(SisyTV)operator(.)ident(Selected)operator(;)
  keyword(if) keyword(not) ident(Assigned)operator(()ident(Node)operator(\)) keyword(then)
    ident(Exit)operator(;)

  ident(Clipboard)operator(.)ident(AsText) operator(:=) ident(Node)operator(.)ident(Text)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(SisyTVKeyDown)operator(()ident(Sender)operator(:) ident(TObject)operator(;) keyword(var) ident(Key)operator(:) ident(Word)operator(;)
  ident(Shift)operator(:) ident(TShiftState)operator(\))operator(;)
keyword(var)
  ident(Node)operator(:) ident(TTreeNode)operator(;)
keyword(begin)
  ident(Node) operator(:=) ident(RootOfNode)operator(()ident(SisyTV)operator(.)ident(Selected)operator(\))operator(;)
  keyword(if) keyword(not) ident(Assigned)operator(()ident(Node)operator(\)) keyword(then)
    ident(Exit)operator(;)

  comment({if Key = VK_RETURN then
    SisyTVDblCLick(Sender\);

  if Key = VK_DELETE then
    if (ssCtrl in Shift\) and (Key = VK_DELETE\) then
      DeactivateChange(Node\)
    else
      DeleteChange(Node\);

  if (ssCtrl in Shift\) and (Char(Key\) = 'C'\) then
    CopySelectedChangeName;})
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(SisyCBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  keyword(if) keyword(not) ident(Started) keyword(then)
    ident(Exit)operator(;)

  keyword(with) ident(TCheckBox)operator(()ident(Sender)operator(\))operator(,) ident(TSisyThread)operator(()ident(Sisys)operator([)ident(Tag)operator(])operator(\)) keyword(do) keyword(begin)
    keyword(if) ident(Checked) keyword(then)
      ident(Resume)
    keyword(else)
      ident(Suspend)operator(;)
  keyword(end)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(CurValueEEnter)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(CurValueE)operator(.)ident(Text) operator(:=) ident(RealValueName)operator(()ident(ValueList)operator(.)ident(ItemFocused)operator(\))operator(;)
  ident(CurValueE)operator(.)ident(SelectAll)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(CurValueEKeyDown)operator(()ident(Sender)operator(:) ident(TObject)operator(;) keyword(var) ident(Key)operator(:) ident(Word)operator(;)
  ident(Shift)operator(:) ident(TShiftState)operator(\))operator(;)

  keyword(procedure) ident(RenameValue)operator(()ident(NewName)operator(:) keyword(string)operator(\))operator(;)
  keyword(var)
    ident(Item)operator(:) ident(TListItem)operator(;)
  keyword(begin)
    ident(Item) operator(:=) ident(ValueList)operator(.)ident(ItemFocused)operator(;)
    keyword(if) ident(ValuesWin)operator(.)ident(TryRenameValue)operator(()ident(CurKey)operator(.)ident(Value)operator(,) ident(NewName)operator(\)) keyword(then)
      ident(SetRealValueName)operator(()ident(Item)operator(,) ident(NewName)operator(\))operator(;)
  keyword(end)operator(;)

keyword(begin)
  keyword(if) ident(Key) operator(=) ident(VK_RETURN) keyword(then) keyword(begin)
    ident(SpyThread)operator(.)ident(Suspend)operator(;)
    keyword(try)
      ident(RenameValue)operator(()ident(CurValueE)operator(.)ident(Text)operator(\))operator(;)
      ident(ValuesWin)operator(.)ident(ValueListDblClick)operator(()ident(Self)operator(\))operator(;)
      ident(FocusControl)operator(()ident(CurValueE)operator(\))operator(;)
    keyword(finally)
      ident(SpyThread)operator(.)ident(Restart) operator(:=) ident(True)operator(;)
      ident(SpyThread)operator(.)ident(Resume)operator(;)
    keyword(end)operator(;)
    ident(Key) operator(:=) integer(0)operator(;)
    comment(//CurValueE.SelectAll;)
  keyword(end) keyword(else) keyword(if) ident(Key) operator(=) ident(VK_ESCAPE) keyword(then) keyword(begin)
    ident(ValuesWin)operator(.)ident(ValueListDblClick)operator(()ident(Self)operator(\))operator(;)
  keyword(end)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(BinaryHMLineChange)operator(()ident(NewLine)operator(:) ident(Cardinal)operator(\))operator(;)
keyword(begin)
  ident(OffsetHE)operator(.)ident(Value) operator(:=) ident(BinaryHM)operator(.)ident(Pos)operator(;)
 comment(// BinaryAsIntL.Value := Integer(BinaryHM.CurentCard\);)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(OffsetHEChange)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(BinaryHM)operator(.)ident(Pos) operator(:=) ident(OffsetHE)operator(.)ident(Value)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(SpyDelayIEChange)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  keyword(if) ident(Assigned)operator(()ident(SpyThread)operator(\)) keyword(then)
    ident(SpyThread)operator(.)ident(Delay) operator(:=) ident(SpyDelayIE)operator(.)ident(Value)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(SisyTVExpanded)operator(()ident(Sender)operator(:) ident(TObject)operator(;) ident(Node)operator(:) ident(TTreeNode)operator(\))operator(;)
keyword(begin)
  keyword(if) ident(Node)operator(.)ident(ImageIndex) operator(=) integer(8) keyword(then)
    ident(Node)operator(.)ident(ImageIndex) operator(:=) integer(7)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(ClearChanges)operator(;)
keyword(var)
  ident(Node)operator(:) ident(TTreeNode)operator(;)
keyword(begin)
  keyword(with) ident(SisyTV)operator(.)ident(Items) keyword(do) keyword(begin)
    ident(Node) operator(:=) ident(GetFirstNode)operator(;)
    keyword(while) ident(Assigned)operator(()ident(Node)operator(\)) keyword(do) keyword(begin)
      ident(DeleteChange)operator(()ident(Node)operator(\))operator(;)
      ident(Node) operator(:=) ident(GetFirstNode)operator(;)
    keyword(end)operator(;)
  keyword(end)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(ClearChangesBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  keyword(if) ident(mrOK) operator(<>) ident(MessageDlg)operator(()string<delimiter(')content(Do you really want to clear all changes?)delimiter(')>operator(,)
   ident(mtWarning)operator(,) operator([)ident(mbOK)operator(,) ident(mbCancel)operator(])operator(,) integer(0)operator(\)) keyword(then)
    ident(Exit)operator(;)

  ident(ClearChanges)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(FilterChangesBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(NotePad)operator(()ident(PlutoDir) operator(+) ident(SisyFilterFileName)operator(\))operator(;)
  ident(ShowMessage)operator(()string<delimiter(')content(Click OK when you finished editing.)delimiter(')> operator(+) ident(EOL) operator(+)
              string<delimiter(')content((Pluto will reload the filter settings then.\))delimiter(')>operator(\))operator(;)
  ident(LoadSisyFilter)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(SisyTVPUPopup)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(var)
  ident(KeySelected)operator(:) ident(Boolean)operator(;)
  ident(Node)operator(:) ident(TTreeNode)operator(;)
keyword(begin)
  ident(Node) operator(:=) ident(SisyTV)operator(.)ident(Selected)operator(;)
  ident(KeySelected) operator(:=) ident(Assigned)operator(()ident(Node)operator(\))operator(;)

  ident(SisyGoToKeyMI)operator(.)ident(Enabled) operator(:=) ident(KeySelected)operator(;)
  ident(SisyDeleteChangeMI)operator(.)ident(Enabled) operator(:=) ident(KeySelected)operator(;)
  ident(SisyActivateChangeMI)operator(.)ident(Enabled) operator(:=) ident(KeySelected)operator(;)
  ident(SisyCopyPathMI)operator(.)ident(Enabled) operator(:=) ident(KeySelected)operator(;)
  keyword(if) keyword(not) ident(KeySelected) keyword(then)
    ident(Exit)operator(;)

  ident(SisyActivateChangeMI)operator(.)ident(Checked) operator(:=) ident(SisyChangeActivated)operator(()ident(RootOfNode)operator(()ident(Node)operator(\))operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(SisyActivateChangeMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(DeactivateChange)operator(()ident(SisyTV)operator(.)ident(Selected)operator(\))
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(SisyDeleteChangeMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(DeleteChange)operator(()ident(SisyTV)operator(.)ident(Selected)operator(\))
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(SisyCopyPathMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(CopySelectedChangeName)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(FileMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(var)
  ident(s)operator(:) keyword(string)operator(;)
keyword(begin)
  keyword(with) ident(FileOpenD) keyword(do) keyword(begin)
    ident(s) operator(:=) ident(ExtractPath)operator(()ident(StringE)operator(.)ident(Text)operator(\))operator(;)
    keyword(if) ident(s) operator(<>) string<delimiter(')delimiter(')> keyword(then)
      ident(InitialDir) operator(:=) ident(s)
    keyword(else)
      ident(InitialDir) operator(:=) ident(MyDir)operator(;)

    ident(s) operator(:=) ident(ExtractFileName)operator(()ident(StringE)operator(.)ident(Text)operator(\))operator(;)
    ident(s) operator(:=) ident(DeleteChars)operator(()ident(s)operator(,) char<delimiter(')content(/)delimiter(')>operator(\))operator(;)
    keyword(if) ident(s) operator(<>) string<delimiter(')delimiter(')> keyword(then)
      ident(FileName) operator(:=) ident(s)operator(;)

    keyword(if) ident(Execute) keyword(then)
      ident(StringE)operator(.)ident(Text) operator(:=) ident(FileName)operator(;)
  keyword(end)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(ExternalEditBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(var)
  ident(FileName)operator(:) keyword(string)operator(;)
keyword(begin)
  ident(FileName) operator(:=) ident(TempDir) operator(+) char<delimiter(')content(~)delimiter(')> operator(+) ident(DeleteChars)operator(()ident(CurValueE)operator(.)ident(Text)operator(,) ident(FileNameEnemies)operator(\)) operator(+)
    string<delimiter(')content(.bin)delimiter(')>operator(;)
  keyword(if) ident(SaveByteA)operator(()ident(BinaryHM)operator(.)ident(Data)operator(,) ident(FileName)operator(\)) keyword(then)
    ident(ExecFileWith)operator(()ident(PrefWin)operator(.)ident(ExternalHexEditE)operator(.)ident(Text)operator(,) ident(FileName)operator(\))
  keyword(else)
    ident(ShowMessage)operator(()string<delimiter(')content(Could not write into file:)delimiter(')> operator(+) ident(EOL) operator(+) ident(FileName)operator(\))operator(;)

  ident(PipelineThread)operator(.)ident(FileName) operator(:=) ident(FileName)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(LoadExternalBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(var)
  ident(FileName)operator(:) keyword(string)operator(;)
  ident(Data)operator(:) ident(TByteA)operator(;)
  ident(i)operator(:) ident(Integer)operator(;)
keyword(begin)
  ident(Data) operator(:=) keyword(nil)operator(;)

  ident(FileName) operator(:=) ident(TempDir) operator(+) char<delimiter(')content(~)delimiter(')> operator(+) ident(CurValueE)operator(.)ident(Text) operator(+) string<delimiter(')content(.bin)delimiter(')>operator(;)
  keyword(if) keyword(not) ident(FileEx)operator(()ident(FileName)operator(\)) keyword(then) keyword(begin)
    comment({ShowMessage('File not found:' + EOL +
                FileName\);})
    ident(Exit)operator(;)
  keyword(end)operator(;)

  ident(Data) operator(:=) ident(LoadByteA)operator(()ident(FileName)operator(\))operator(;)
  keyword(if) ident(Length)operator(()ident(Data)operator(\)) operator(=) ident(Length)operator(()ident(BinaryHM)operator(.)ident(Data)operator(\)) keyword(then) keyword(begin)
    keyword(for) ident(i) operator(:=) integer(0) keyword(to) ident(High)operator(()ident(Data)operator(\)) keyword(do)
      keyword(if) ident(Data)operator([)ident(i)operator(]) operator(<>) ident(BinaryHM)operator(.)ident(Data)operator([)ident(i)operator(]) keyword(then) keyword(begin)
        ident(BinaryHM)operator(.)ident(Data) operator(:=) ident(Data)operator(;)
        ident(Exit)operator(;)
      keyword(end)operator(;)
  keyword(end) keyword(else)
    ident(BinaryHM)operator(.)ident(Data) operator(:=) ident(Data)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(PipelineCBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  keyword(with) ident(PipelineThread)operator(,) ident(PipelineCB) keyword(do)
    keyword(if) ident(Checked) keyword(then) keyword(begin)
      keyword(if) ident(Suspended) keyword(then)
        ident(Resume)operator(;)
    keyword(end) keyword(else)
      keyword(if) keyword(not) ident(Suspended) keyword(then)
        ident(Suspend)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(ReloadBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(ValuesWin)operator(.)ident(ValueListDblClick)operator(()ident(Self)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(BinaryHMEnter)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(PipelineCB)operator(.)ident(Checked) operator(:=) ident(False)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(xUseExtendedModelCBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(PrefWin)operator(.)ident(UseExtendedModelCB)operator(.)ident(Load)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(SeparatorEChange)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  keyword(if) keyword(not) ident(SeparatorE)operator(.)ident(Enabled) keyword(then)
    ident(Exit)operator(;)

  keyword(if) ident(SeparatorE)operator(.)ident(Text) operator(=) string<delimiter(')delimiter(')> keyword(then) keyword(begin)
    keyword(if) ident(StringE)operator(.)ident(Text) operator(=) string<delimiter(')delimiter(')> keyword(then)
      ident(Exit)
    keyword(else)
      ident(MultiStringM)operator(.)ident(Text) operator(:=) ident(StringE)operator(.)ident(Text)operator(;)
    ident(MultiStringTypeRG)operator(.)ident(Buttons)operator([)integer(1)operator(])operator(.)ident(Enabled) operator(:=) ident(False)operator(;)
    ident(MultiStringTypeRG)operator(.)ident(ItemIndex) operator(:=) integer(0)operator(;)
  keyword(end) keyword(else) keyword(begin)
    keyword(if) ident(StringE)operator(.)ident(Text) operator(=) string<delimiter(')delimiter(')> keyword(then)
      ident(StringE)operator(.)ident(Text) operator(:=) ident(Join)operator(()ident(MultiStringM)operator(.)ident(Lines)operator(,) ident(SeparatorE)operator(.)ident(Text)operator(\))operator(;)
    ident(MultiStringTypeRG)operator(.)ident(Buttons)operator([)integer(1)operator(])operator(.)ident(Enabled) operator(:=) ident(True)operator(;)
    ident(MultiStringTypeRG)operator(.)ident(ItemIndex) operator(:=) integer(1)operator(;)
    ident(Split)operator(()ident(StringE)operator(.)ident(Text)operator(,) ident(SeparatorE)operator(.)ident(Text)operator(,) ident(MultiStringM)operator(.)ident(Lines)operator(,) ident(False)operator(\))operator(;)
  keyword(end)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(HintLBKeyDown)operator(()ident(Sender)operator(:) ident(TObject)operator(;) keyword(var) ident(Key)operator(:) ident(Word)operator(;)
  ident(Shift)operator(:) ident(TShiftState)operator(\))operator(;)
keyword(begin)
  keyword(if) operator(()ident(Key) operator(=) ident(Byte)operator(()char<delimiter(')content(C)delimiter(')>operator(\))operator(\)) keyword(and) operator(()ident(ssCtrl) keyword(in) ident(Shift)operator(\)) keyword(then)
    keyword(with) ident(HintLb) keyword(do)
      keyword(if) ident(ItemIndex) operator(>=) integer(0) keyword(then)
        ident(Clipboard)operator(.)ident(AsText) operator(:=) ident(Items)operator([)ident(ItemIndex)operator(])operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(DWORDSpecialBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(CardinalE)operator(.)ident(Value) operator(:=) ident(StrToIntDef)operator(()operator(()ident(Sender) keyword(as) ident(TButton)operator(\))operator(.)ident(Caption)operator(,) integer(0)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(Button1Click)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(ShowPC)operator(.)ident(SelectNextPage)operator(()ident(True)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(SisyPUPopup)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  keyword(with) ident(SisyPU)operator(,) ident(TSisyThread)operator(()ident(Sisys)operator([)ident(PopupComponent)operator(.)ident(Tag)operator(])operator(\)) keyword(do)
    ident(Items)operator([)ident(Integer)operator(()ident(Priority)operator(\))operator(])operator(.)ident(Checked) operator(:=) ident(True)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(SisyPriorityMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  keyword(with) ident(TSisyThread)operator(()ident(Sisys)operator([)ident(SisyPU)operator(.)ident(PopupComponent)operator(.)ident(Tag)operator(])operator(\)) keyword(do) keyword(begin)
    ident(Priority) operator(:=) ident(TThreadPriority)operator(()ident(TMenuItem)operator(()ident(Sender)operator(\))operator(.)ident(MenuIndex)operator(\))operator(;)
    keyword(if) ident(Priority) operator(<=) ident(tpNormal) keyword(then)
      ident(Uni)operator(.)ident(WriteInteger)operator(()string<delimiter(')content(Priority)delimiter(')>operator(,) ident(Integer)operator(()ident(Priority)operator(\))operator(\))operator(;)
  keyword(end)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(SisyShowCurrentPathMIClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  keyword(with) ident(SisyPU)operator(,) ident(TSisyThread)operator(()ident(Sisys)operator([)ident(PopupComponent)operator(.)ident(Tag)operator(])operator(\)) keyword(do) keyword(begin)
    ident(Suspend)operator(;)
    ident(ShowMessage)operator(()ident(CurrentSpyKey)operator(.)ident(Path)operator(\))operator(;)
    ident(Resume)operator(;)
  keyword(end)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(DropFileTargetDrop)operator(()ident(Sender)operator(:) ident(TObject)operator(;)
  ident(ShiftState)operator(:) ident(TShiftState)operator(;) ident(Point)operator(:) ident(TPoint)operator(;) keyword(var) ident(Effect)operator(:) ident(Integer)operator(\))operator(;)
keyword(begin)
  ident(StringE)operator(.)ident(Text) operator(:=) ident(DropFileTarget)operator(.)ident(Files)operator([)integer(0)operator(])operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(FormClose)operator(()ident(Sender)operator(:) ident(TObject)operator(;) keyword(var) ident(Action)operator(:) ident(TCloseAction)operator(\))operator(;)
keyword(begin)
comment(//  Action := caNone;)
  ident(DropFileTarget)operator(.)ident(Unregister)operator(;)
  ident(ClearChanges)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(FormResize)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(begin)
  ident(Realign)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(IconImageDblClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(var)
  ident(Filename)operator(:) keyword(string)operator(;)
keyword(begin)
  ident(FileName) operator(:=) ident(GetFileNew)operator(()ident(StringE)operator(.)ident(Text)operator(\))operator(;)
  keyword(if) ident(FileName) operator(<>) string<delimiter(')delimiter(')> keyword(then)
    ident(ExecFile)operator(()ident(FileName)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(ShowValues)operator(()ident(Reg)operator(:) ident(TXRegistry)operator(\))operator(;)
keyword(var)
  ident(MainValueName)operator(:) keyword(string)operator(;)
  ident(ValueCommonType)operator(:) ident(TRegDataType)operator(;)

  keyword(procedure) ident(ShowValueAsBinary)operator(()keyword(const) ident(ValueName)operator(:) keyword(string)operator(;)
    ident(Smart4BB)operator(:) ident(Boolean) operator(=) ident(True)operator(\))operator(;)
  keyword(begin)
    keyword(if) ident(Smart4BB)
     keyword(and) ident(PrefWin)operator(.)ident(Smart4BBCB)operator(.)ident(Checked)
     keyword(and) operator(()ident(Reg)operator(.)ident(GetDataSize)operator(()ident(ValueName)operator(\)) operator(=) integer(4)operator(\)) keyword(then) keyword(begin)
      ident(CardinalE)operator(.)ident(Value) operator(:=) ident(Reg)operator(.)ident(ReadCardinal)operator(()ident(ValueName)operator(\))operator(;)
      ident(CardTypeRG)operator(.)ident(ItemIndex) operator(:=) integer(2)operator(;)
      ident(ShowPC)operator(.)ident(ActivePage) operator(:=) ident(IntPage)operator(;)
    ident(Exit)operator(;) keyword(end)operator(;)
    ident(BinaryHM)operator(.)ident(Data) operator(:=) ident(Reg)operator(.)ident(ReadBin)operator(()ident(ValueName)operator(\))operator(;)
    ident(DataTypeComB)operator(.)ident(ItemIndex) operator(:=) ident(ValueCommonType)operator(;)
    keyword(if) ident(IsValidDataType)operator(()ident(ValueCommonType)operator(\)) keyword(then)
      ident(DataTypeComB)operator(.)ident(ItemIndex) operator(:=) ident(ValueCommonType)
    keyword(else) keyword(begin)
      ident(DataTypeComB)operator(.)ident(Text) operator(:=) ident(IntToStr)operator(()ident(ValueCommonType)operator(\))operator(;)
      ident(AddHint)operator(()string<delimiter(')content(Value has unknown data type ()delimiter(')> operator(+) ident(DataTypeComB)operator(.)ident(Text) operator(+) string<delimiter(')content(\): )delimiter(')> operator(+)
        ident(Quote)operator(()ident(ValueName)operator(\))operator(\))operator(;)
    keyword(end)operator(;)
    ident(ShowPC)operator(.)ident(ActivePage) operator(:=) ident(BinaryPage)operator(;)
  keyword(end)operator(;)

keyword(begin)
  keyword(with) ident(ValuesWin) keyword(do) keyword(begin)
    keyword(if) keyword(not) ident(Assigned)operator(()ident(ValueNames)operator(\)) keyword(or) operator(()ident(ValueNames)operator(.)ident(Count) operator(=) integer(0)operator(\)) keyword(then)
      keyword(raise) ident(EReadError)operator(.)ident(Create)operator(()string<delimiter(')content(ValueNameList error)delimiter(')>operator(\))operator(;)
    ident(MainValueName) operator(:=) ident(ValueNames)operator([)integer(0)operator(])operator(;)
  keyword(end)operator(;)
  ident(ValueCommonType) operator(:=) ident(ValuesWin)operator(.)ident(ValueCommonType)operator(;)

  keyword(with) ident(CurValueE) keyword(do) keyword(begin)
    ident(Enabled) operator(:=) ident(True)operator(;)
    keyword(if) ident(ValuesWin)operator(.)ident(ValueNames)operator(.)ident(Count) operator(=) integer(1) keyword(then)
      ident(Text) operator(:=) ident(MainValueName)
    keyword(else)
      ident(Text) operator(:=) ident(Copy)operator(()ident(ValuesWin)operator(.)ident(ValueNames)operator(.)ident(CommaText)operator(,) integer(1)operator(,) integer(255)operator(\))operator(;)

    ident(Font)operator(.)ident(Color) operator(:=) ident(ColorOfDataType)operator(()ident(ValueCommonType)operator(\))operator(;)
  keyword(end)operator(;)

  keyword(if) ident(KeyIsDown)operator(()ident(VK_MENU)operator(\)) keyword(or) ident(ShowAsBinary) keyword(then) keyword(begin)
    ident(ShowValueAsBinary)operator(()ident(MainValueName)operator(,) ident(False)operator(\))operator(;)
  keyword(end) keyword(else) keyword(if) ident(ValueCommonType) keyword(in) ident(rdStringTypes) keyword(then) keyword(begin)
    ident(StringE)operator(.)ident(Text) operator(:=) ident(Reg)operator(.)ident(ReadString)operator(()ident(MainValueName)operator(\))operator(;)
    keyword(case) ident(ValueCommonType) keyword(of)
      ident(rdString)operator(:) ident(StringTypeRG)operator(.)ident(ItemIndex) operator(:=) integer(0)operator(;)
      ident(rdExpandString)operator(:) ident(StringTypeRG)operator(.)ident(ItemIndex) operator(:=) integer(1)operator(;)
    keyword(end)operator(;)
    ident(ShowPC)operator(.)ident(ActivePage) operator(:=) ident(StringPage)operator(;)
  keyword(end) keyword(else) keyword(if) ident(ValueCommonType) keyword(in) ident(rdCardTypes) keyword(then) keyword(begin)
    ident(CardinalE)operator(.)ident(Value) operator(:=) ident(Reg)operator(.)ident(ReadCardinal)operator(()ident(MainValueName)operator(\))operator(;)
    keyword(case) ident(ValueCommonType) keyword(of)
      ident(rdCardinal)operator(:) ident(StringTypeRG)operator(.)ident(ItemIndex) operator(:=) integer(0)operator(;)
      ident(rdCardBigEndian)operator(:) ident(StringTypeRG)operator(.)ident(ItemIndex) operator(:=) integer(1)operator(;)
    keyword(end)operator(;)
    ident(ShowPC)operator(.)ident(ActivePage) operator(:=) ident(IntPage)operator(;)
  keyword(end) keyword(else) keyword(if) ident(ValueCommonType) operator(=) ident(rdMultiString) keyword(then) keyword(begin)
    ident(MultiStringM)operator(.)ident(Clear)operator(;)
    ident(Reg)operator(.)ident(ReadMultiString)operator(()ident(MainValueName)operator(,) ident(MultiStringM)operator(.)ident(Lines)operator(,) ident(PrefWin)operator(.)ident(UseExtendedModelCB)operator(.)ident(Checked)operator(\))operator(;)
    ident(SeparatorEChange)operator(()ident(Self)operator(\))operator(;)
    ident(MultiStringTypeRG)operator(.)ident(ItemIndex) operator(:=) integer(0)operator(;)
    ident(ShowPC)operator(.)ident(ActivePage) operator(:=) ident(MultiStringPage)operator(;)
  keyword(end) keyword(else) keyword(begin)
    ident(ShowValueAsBinary)operator(()ident(MainValueName)operator(\))operator(;)
  keyword(end)operator(;)

  ident(ShowAsBinary) operator(:=) ident(False)operator(;)

  ident(UpdateWriteButtons)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(UpdateWriteButtons)operator(;)
keyword(const)
  ident(BtnTextOfMultiEdit)operator(:) keyword(array)operator([)ident(Boolean)operator(]) keyword(of) keyword(string) operator(=) operator(()string<delimiter(')content(Write)delimiter(')>operator(,) string<delimiter(')content(Write all)delimiter(')>operator(\))operator(;)
keyword(var)
  ident(BtnText)operator(:) keyword(string)operator(;)
keyword(begin)
  ident(BtnText) operator(:=) ident(BtnTextOfMultiEdit)operator([)ident(ValuesWin)operator(.)ident(ValueNames)operator(.)ident(Count) operator(>) integer(1)operator(])operator(;)
  ident(OKStringB)operator(.)ident(Caption) operator(:=) ident(BtnText)operator(;)
  ident(OKIntB)operator(.)ident(Caption) operator(:=) ident(BtnText)operator(;)
  ident(OKMultiStringB)operator(.)ident(Caption) operator(:=) ident(BtnText)operator(;)
  ident(OKBinaryB)operator(.)ident(Caption) operator(:=) ident(BtnText)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(EditData)operator(;)
keyword(begin)
  ident(AddHint)operator(()string<delimiter(')content(Edit)delimiter(')>operator(\))operator(;)
  ident(MainPC)operator(.)ident(ActivePage) operator(:=) ident(WorkPage)operator(;)

  keyword(with) ident(ShowPC) keyword(do)
    keyword(if) ident(ActivePage) operator(=) keyword(nil) keyword(then)
      ident(Exit)
    keyword(else) keyword(if) ident(ActivePage) operator(=) ident(WorkWin)operator(.)ident(StringPage) keyword(then) keyword(begin)
      ident(FocusControl)operator(()ident(StringE)operator(\))operator(;)
      ident(StringE)operator(.)ident(SelectAll)operator(;)
    keyword(end)
    keyword(else) keyword(if) ident(ActivePage) operator(=) ident(WorkWin)operator(.)ident(IntPage) keyword(then)
      ident(FocusControl)operator(()ident(CardinalE)operator(\))
    keyword(else) keyword(if) ident(ActivePage) operator(=) ident(WorkWin)operator(.)ident(MultiStringPage) keyword(then)
      ident(FocusControl)operator(()ident(MultiStringM)operator(\))
    keyword(else) keyword(if) ident(ActivePage) operator(=) ident(WorkWin)operator(.)ident(BinaryPage) keyword(then)
      ident(FocusControl)operator(()ident(BinaryHM)operator(\))
    keyword(else)
      ident(ShowMessage)operator(()string<delimiter(')content(Error: ShowPC.ActivePage!)delimiter(')>operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(SisyTVCustomDrawItem)operator(()ident(Sender)operator(:) ident(TCustomTreeView)operator(;)
  ident(Node)operator(:) ident(TTreeNode)operator(;) ident(State)operator(:) ident(TCustomDrawState)operator(;) keyword(var) ident(DefaultDraw)operator(:) ident(Boolean)operator(\))operator(;)
keyword(begin)
  keyword(with) ident(TTreeView)operator(()ident(Sender)operator(\))operator(.)ident(Canvas)operator(.)ident(Font) keyword(do) keyword(begin)
    keyword(if) ident(Node)operator(.)ident(Cut) keyword(then)
      ident(Color) operator(:=) hex($AAAAAA)
    keyword(else)
      ident(Color) operator(:=) ident(clWhite)operator(;)
  keyword(end)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(SisyTVMouseDown)operator(()ident(Sender)operator(:) ident(TObject)operator(;) ident(Button)operator(:) ident(TMouseButton)operator(;)
  ident(Shift)operator(:) ident(TShiftState)operator(;) ident(X)operator(,) ident(Y)operator(:) ident(Integer)operator(\))operator(;)
keyword(var)
  ident(Node)operator(:) ident(TTreeNode)operator(;)
  ident(RelX)operator(,) ident(RelY)operator(:) ident(Integer)operator(;)
keyword(begin)
  keyword(with) ident(SisyTV) keyword(do) keyword(begin)
    ident(RelX) operator(:=) ident(ScreenToClient)operator(()ident(Mouse)operator(.)ident(CursorPos)operator(\))operator(.)ident(X)operator(;)
    ident(RelY) operator(:=) ident(ScreenToClient)operator(()ident(Mouse)operator(.)ident(CursorPos)operator(\))operator(.)ident(Y)operator(;)
    ident(Node) operator(:=) ident(GetNodeAt)operator(()ident(RelX)operator(,) ident(RelY)operator(\))operator(;)
  keyword(end)operator(;)
  keyword(if) keyword(not) ident(Assigned)operator(()ident(Node)operator(\)) keyword(then)
    ident(Exit)operator(;)

  keyword(if) keyword(not) ident(Node)operator(.)ident(Selected) keyword(then)
    ident(Node)operator(.)ident(Selected) operator(:=) ident(True)operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(OKCryptoBClick)operator(()ident(Sender)operator(:) ident(TObject)operator(\))operator(;)
keyword(var)
  ident(i)operator(:) ident(Integer)operator(;)
keyword(begin)
  keyword(try)
    ident(OpenCurKey)operator(;)
    keyword(with) ident(ValuesWin)operator(.)ident(ValueNames) keyword(do)
      keyword(for) ident(i) operator(:=) integer(0) keyword(to) ident(Count)operator(-)integer(1) keyword(do) keyword(begin)
        keyword(case) ident(CryptoTypeRG)operator(.)ident(ItemIndex) keyword(of)
          integer(0)operator(:) ident(MainReg)operator(.)ident(WriteBin)operator(()ident(Strings)operator([)ident(i)operator(])operator(,) ident(EncodeScreenSaver)operator(()ident(CryptoE)operator(.)ident(Text)operator(\))operator(\))operator(;)
          integer(1)operator(:) ident(MainReg)operator(.)ident(WriteBin)operator(()ident(Strings)operator([)ident(i)operator(])operator(,) ident(EncodeSharedFolder)operator(()ident(CryptoE)operator(.)ident(Text)operator(\))operator(\))operator(;)
        keyword(end)operator(;)
      keyword(end)operator(;)
    ident(ValuesWin)operator(.)ident(UpdateValues)operator(()ident(True)operator(\))operator(;)
  keyword(finally)
    ident(MainReg)operator(.)ident(CloseKey)operator(;)
  keyword(end)operator(;)
  ident(ValuesWin)operator(.)ident(ValueListDblClick)operator(()ident(Sender)operator(\))operator(;)
keyword(end)operator(;)

keyword(procedure) ident(TWorkWin)operator(.)ident(CryptoEKeyDown)operator(()ident(Sender)operator(:) ident(TObject)operator(;) keyword(var) ident(Key)operator(:) ident(Word)operator(;)
  ident(Shift)operator(:) ident(TShiftState)operator(\))operator(;)
keyword(begin)
  keyword(if) ident(Key) operator(=) ident(VK_RETURN) keyword(then) keyword(begin)
    ident(OKCryptoBClick)operator(()ident(Sender)operator(\))operator(;)
    ident(ValuesWin)operator(.)ident(FocusControl)operator(()ident(ValueList)operator(\))operator(;)
  keyword(end)operator(;)
  keyword(if) ident(Key) operator(=) ident(VK_ESCAPE) keyword(then)
    ident(CancelBClick)operator(()ident(Sender)operator(\))operator(;)
keyword(end)operator(;)

keyword(end)operator(.)
