
comment(-------------------------------------------------------------------------------)
comment(-- Creates a new function, with the name suffixed by "New". This new function)
comment(-- creates a new image, based on a source image, and calls the previous function)
comment(-- with this new image.)

keyword(local) keyword(function) function(OneSourceOneDest) operator(()ident(funcname)operator(,) ident(width)operator(,) ident(height)operator(,) ident(color_space)operator(,) ident(data_type)operator(\))
  keyword(local) local_variable(func) operator(=) ident(im)operator([)ident(funcname)operator(])
  predefined(assert)operator(()ident(func)operator(\)) comment(-- see if function is really defined)

  comment(-- define function with "New" suffix)
  ident(im)operator([)ident(funcname)operator(.)operator(.)string<delimiter(")content(New)delimiter(")>operator(]) operator(=) keyword(function) operator((src_image, ...\))
    comment(-- create destination image)
    keyword(local) local_variable(dst_image) operator(=) ident(im)operator(.)ident(ImageCreateBased)operator(()ident(src_image)operator(,) ident(width)operator(,) ident(height)operator(,) ident(color_space)operator(,) ident(data_type)operator(\))

    comment(-- call previous method, repassing all parameters)
    ident(func)operator(()ident(src_image)operator(,) ident(dst_image)operator(,) ident(unpack)operator(()ident(arg)operator(\))operator(\))
    keyword(return) ident(dst_image)
  keyword(end)
keyword(end)

comment(-------------------------------------------------------------------------------)
comment(-- This function is similar to OneSourceOneDest, but it receives two source)
comment(-- images.)

keyword(local) keyword(function) function(TwoSourcesOneDest) operator(()ident(funcname)operator(,) ident(width)operator(,) ident(height)operator(,) ident(color_space)operator(,) ident(data_type)operator(\))
  keyword(local) local_variable(func) operator(=) ident(im)operator([)ident(funcname)operator(])
  
  comment(-- see if function is really defined)
  predefined(assert)operator(()ident(func)operator(,) ident(string)operator(.)ident(format)operator(()string<delimiter(")content(undefined function `%s')delimiter(")>operator(,) ident(funcname)operator(\))operator(\))

  comment(-- define function with "New" suffix)
  ident(im)operator([)ident(funcname)operator(.)operator(.)string<delimiter(")content(New)delimiter(")>operator(]) operator(=) keyword(function) operator((src_image1, src_image2, ...\))
    comment(-- create destination image)
    keyword(local) local_variable(dst_image) operator(=) ident(im)operator(.)ident(ImageCreateBased)operator(()ident(src_image1)operator(,) ident(width)operator(,) ident(height)operator(,) ident(color_space)operator(,) ident(data_type)operator(\))

    comment(-- call previous method, repassing all parameters)
    ident(func)operator(()ident(src_image1)operator(,) ident(src_image2)operator(,) ident(dst_image)operator(,) ident(unpack)operator(()ident(arg)operator(\))operator(\))
    keyword(return) ident(dst_image)
  keyword(end)
keyword(end)

comment(-------------------------------------------------------------------------------)

ident(TwoSourcesOneDest)operator(()string<delimiter(")content(ProcessCrossCorrelation)delimiter(")>operator(\))
ident(OneSourceOneDest)operator(()string<delimiter(")content(ProcessAutoCorrelation)delimiter(")>operator(,) predefined_constant(nil)operator(,) predefined_constant(nil)operator(,) predefined_constant(nil)operator(,) ident(im)operator(.)ident(CFLOAT)operator(\))
ident(OneSourceOneDest)operator(()string<delimiter(")content(ProcessFFT)delimiter(")>operator(\))
ident(OneSourceOneDest)operator(()string<delimiter(")content(ProcessIFFT)delimiter(")>operator(\))

comment(-------------------------------------------------------------------------------)
comment(-- Creates a new function, with the name suffixed by "New". This new function)
comment(-- creates a new image, based on a source image, and calls the previous function)
comment(-- with this new image.)
comment(-- We assume here that the functions returns only one parameter or none.)

keyword(local) keyword(function) function(OneSourceOneDest) operator(()ident(funcname)operator(,) ident(width)operator(,) ident(height)operator(,) ident(color_space)operator(,) ident(data_type)operator(\))
  keyword(local) local_variable(func) operator(=) ident(im)operator([)ident(funcname)operator(])
  predefined(assert)operator(()ident(func)operator(\)) comment(-- see if function is really defined)

  comment(-- define function with "New" suffix)
  ident(im)operator([)ident(funcname)operator(.)operator(.)string<delimiter(")content(New)delimiter(")>operator(]) operator(=) keyword(function) operator((src_image, ...\))
    comment(-- create destination image)
    keyword(local) local_variable(dst_image) operator(=) ident(im)operator(.)ident(ImageCreateBased)operator(()ident(src_image)operator(,) ident(width)operator(,) ident(height)operator(,) ident(color_space)operator(,) ident(data_type)operator(\))

    comment(-- call previous method, repassing all parameters)
    keyword(local) local_variable(ret) operator(=) ident(func)operator(()ident(src_image)operator(,) ident(dst_image)operator(,) ident(unpack)operator(()ident(arg)operator(\))operator(\))
    keyword(if) operator(()ident(ret)operator(\)) keyword(then)
      keyword(return) ident(ret)operator(,) ident(dst_image)
    keyword(else)
      keyword(return) ident(dst_image)
    keyword(end)
  keyword(end)
keyword(end)

comment(-------------------------------------------------------------------------------)
comment(-- This function is similar to OneSourceOneDest, but it receives two source)
comment(-- images.)

keyword(local) keyword(function) function(TwoSourcesOneDest) operator(()ident(funcname)operator(,) ident(width)operator(,) ident(height)operator(,) ident(color_space)operator(,) ident(data_type)operator(\))
  keyword(local) local_variable(func) operator(=) ident(im)operator([)ident(funcname)operator(])
  
  comment(-- see if function is really defined)
  predefined(assert)operator(()ident(func)operator(,) ident(string)operator(.)ident(format)operator(()string<delimiter(")content(undefined function `%s')delimiter(")>operator(,) ident(funcname)operator(\))operator(\))

  comment(-- define function with "New" suffix)
  ident(im)operator([)ident(funcname)operator(.)operator(.)string<delimiter(")content(New)delimiter(")>operator(]) operator(=) keyword(function) operator((src_image1, src_image2, ...\))
    comment(-- create destination image)
    keyword(local) local_variable(dst_image) operator(=) ident(im)operator(.)ident(ImageCreateBased)operator(()ident(src_image1)operator(,) ident(width)operator(,) ident(height)operator(,) ident(color_space)operator(,) ident(data_type)operator(\))

    comment(-- call previous method, repassing all parameters)
    keyword(local) local_variable(ret) operator(=) ident(func)operator(()ident(src_image1)operator(,) ident(src_image2)operator(,) ident(dst_image)operator(,) ident(unpack)operator(()ident(arg)operator(\))operator(\))
    keyword(if) operator(()ident(ret)operator(\)) keyword(then)
      keyword(return) ident(ret)operator(,) ident(dst_image)
    keyword(else)
      keyword(return) ident(dst_image)
    keyword(end)
  keyword(end)
keyword(end)

comment(-------------------------------------------------------------------------------)
comment(-- This function is similar to OneSourceOneDest, but it receives three source)
comment(-- images.)

keyword(local) keyword(function) function(ThreeSourcesOneDest) operator(()ident(funcname)operator(,) ident(width)operator(,) ident(height)operator(,) ident(color_space)operator(,) ident(data_type)operator(\))
  keyword(local) local_variable(func) operator(=) ident(im)operator([)ident(funcname)operator(])
  predefined(assert)operator(()ident(func)operator(\)) comment(-- see if function is really defined)

  comment(-- define function with "New" suffix)
  ident(im)operator([)ident(funcname)operator(.)operator(.)string<delimiter(")content(New)delimiter(")>operator(]) operator(=) keyword(function) operator((src_image1, src_image2, src_image3, ...\))
    comment(-- create destination image)
    keyword(local) local_variable(dst_image) operator(=) ident(im)operator(.)ident(ImageCreateBased)operator(()ident(src_image1)operator(,) ident(width)operator(,) ident(height)operator(,) ident(color_space)operator(,) ident(data_type)operator(\))

    comment(-- call previous method, repassing all parameters)
    keyword(local) local_variable(ret) operator(=) ident(func)operator(()ident(src_image1)operator(,) ident(src_image2)operator(,) ident(src_image3)operator(,) ident(dst_image)operator(,) ident(unpack)operator(()ident(arg)operator(\))operator(\))
    keyword(if) operator(()ident(ret)operator(\)) keyword(then)
      keyword(return) ident(ret)operator(,) ident(dst_image)
    keyword(else)
      keyword(return) ident(dst_image)
    keyword(end)
  keyword(end)
keyword(end)

comment(-------------------------------------------------------------------------------)
comment(-- This function is similar to OneSourceOneDest, but it creates two destiny)
comment(-- images.)

keyword(local) keyword(function) function(OneSourceTwoDests) operator(()ident(funcname)operator(,) ident(width)operator(,) ident(height)operator(,) ident(color_space)operator(,) ident(data_type)operator(\))
  keyword(local) local_variable(func) operator(=) ident(im)operator([)ident(funcname)operator(])
  predefined(assert)operator(()ident(func)operator(\)) comment(-- see if function is really defined)

  comment(-- define function with "New" suffix)
  ident(im)operator([)ident(funcname)operator(.)operator(.)string<delimiter(")content(New)delimiter(")>operator(]) operator(=) keyword(function) operator((src_image, ...\))
    comment(-- create destination image)
    keyword(local) local_variable(dst_image1) operator(=) ident(im)operator(.)ident(ImageCreateBased)operator(()ident(src_image)operator(,) ident(width)operator(,) ident(height)operator(,) ident(color_space)operator(,) ident(data_type)operator(\))
    keyword(local) local_variable(dst_image2) operator(=) ident(im)operator(.)ident(ImageCreateBased)operator(()ident(src_image)operator(,) ident(width)operator(,) ident(height)operator(,) ident(color_space)operator(,) ident(data_type)operator(\))

    comment(-- call previous method, repassing all parameters)
    keyword(local) local_variable(ret) operator(=) ident(func)operator(()ident(src_image)operator(,) ident(dst_image1)operator(,) ident(dst_image2)operator(,) ident(unpack)operator(()ident(arg)operator(\))operator(\))
    keyword(if) operator(()ident(ret)operator(\)) keyword(then)
      keyword(return) ident(ret)operator(,) ident(dst_image1)operator(,) ident(dst_image2)
    keyword(else)
      keyword(return) ident(dst_image1)operator(,) ident(dst_image2)
    keyword(end)
  keyword(end)
keyword(end)

comment(-------------------------------------------------------------------------------)
comment(-- This function is similar to OneSourceOneDest, but it creates three destiny)
comment(-- images.)

keyword(local) keyword(function) function(OneSourceThreeDests) operator(()ident(funcname)operator(,) ident(width)operator(,) ident(height)operator(,) ident(color_space)operator(,) ident(data_type)operator(\))
  keyword(local) local_variable(func) operator(=) ident(im)operator([)ident(funcname)operator(])
  predefined(assert)operator(()ident(func)operator(\)) comment(-- see if function is really defined)

  comment(-- define function with "New" suffix)
  ident(im)operator([)ident(funcname)operator(.)operator(.)string<delimiter(")content(New)delimiter(")>operator(]) operator(=) keyword(function) operator((src_image, ...\))
    comment(-- create destination image)
    keyword(local) local_variable(dst_image1) operator(=) ident(im)operator(.)ident(ImageCreateBased)operator(()ident(src_image)operator(,) ident(width)operator(,) ident(height)operator(,) ident(color_space)operator(,) ident(data_type)operator(\))
    keyword(local) local_variable(dst_image2) operator(=) ident(im)operator(.)ident(ImageCreateBased)operator(()ident(src_image)operator(,) ident(width)operator(,) ident(height)operator(,) ident(color_space)operator(,) ident(data_type)operator(\))
    keyword(local) local_variable(dst_image3) operator(=) ident(im)operator(.)ident(ImageCreateBased)operator(()ident(src_image)operator(,) ident(width)operator(,) ident(height)operator(,) ident(color_space)operator(,) ident(data_type)operator(\))

    comment(-- call previous method, repassing all parameters)
    keyword(local) local_variable(ret) operator(=) ident(func)operator(()ident(src_image)operator(,) ident(dst_image1)operator(,) ident(dst_image2)operator(,) ident(dst_image3)operator(,) ident(unpack)operator(()ident(arg)operator(\))operator(\))
    keyword(if) operator(()ident(ret)operator(\)) keyword(then)
      keyword(return) ident(ret)operator(,) ident(dst_image1)operator(,) ident(dst_image2)operator(,) ident(dst_image3)
    keyword(else)
      keyword(return) ident(dst_image1)operator(,) ident(dst_image2)operator(,) ident(dst_image3)
    keyword(end)
  keyword(end)
keyword(end)

comment(-------------------------------------------------------------------------------)

keyword(local) keyword(function) function(hough_height)operator(()ident(image)operator(\))
  keyword(local) keyword(function) function(sqr)operator(()ident(x)operator(\)) keyword(return) ident(x)operator(*)ident(x) keyword(end)
  keyword(local) local_variable(rmax) operator(=) ident(math)operator(.)ident(sqrt)operator(()ident(sqr)operator(()ident(image)operator(:)ident(Width)operator(()operator(\))operator(\)) operator(+) ident(sqr)operator(()ident(image)operator(:)ident(Height)operator(()operator(\))operator(\))operator(\)) operator(/) integer(2)
  keyword(return) integer(2)operator(*)ident(rmax)operator(+)integer(1)
keyword(end)

ident(OneSourceOneDest)operator(()string<delimiter(")content(AnalyzeFindRegions)delimiter(")>operator(,) predefined_constant(nil)operator(,) predefined_constant(nil)operator(,) predefined_constant(nil)operator(,) ident(im)operator(.)ident(USHORT)operator(\))
ident(OneSourceOneDest)operator(()string<delimiter(")content(ProcessPerimeterLine)delimiter(")>operator(\))
ident(OneSourceOneDest)operator(()string<delimiter(")content(ProcessPrune)delimiter(")>operator(\))
ident(OneSourceOneDest)operator(()string<delimiter(")content(ProcessFillHoles)delimiter(")>operator(\))
ident(OneSourceOneDest)operator(()string<delimiter(")content(ProcessHoughLines)delimiter(")>operator(,) integer(180)operator(,) ident(hough_height)operator(,) ident(im)operator(.)ident(GRAY)operator(,) ident(im)operator(.)ident(INT)operator(\))
ident(OneSourceOneDest)operator(()string<delimiter(")content(ProcessHoughLinesDraw)delimiter(")>operator(\))
ident(OneSourceOneDest)operator(()string<delimiter(")content(ProcessDistanceTransform)delimiter(")>operator(,) predefined_constant(nil)operator(,) predefined_constant(nil)operator(,) predefined_constant(nil)operator(,) ident(im)operator(.)ident(FLOAT)operator(\))
ident(OneSourceOneDest)operator(()string<delimiter(")content(ProcessRegionalMaximum)delimiter(")>operator(,) predefined_constant(nil)operator(,) predefined_constant(nil)operator(,) ident(im)operator(.)ident(BINARY)operator(,) predefined_constant(nil)operator(\))

keyword(function) ident(im.)function(ProcessReduceNew) operator(()ident(src_image)operator(,) ident(width)operator(,) ident(height)operator(\))
  keyword(local) local_variable(dst_image) operator(=) ident(im)operator(.)ident(ImageCreateBased)operator(()ident(src_image)operator(,) ident(width)operator(,) ident(height)operator(\))
  keyword(return) ident(im)operator(.)ident(ProcessReduce)operator(()ident(src_image)operator(,) ident(dst_image)operator(\))operator(,) ident(dst_image)
keyword(end)

keyword(function) ident(im.)function(ProcessResizeNew) operator(()ident(src_image)operator(,) ident(width)operator(,) ident(height)operator(\))
  keyword(local) local_variable(dst_image) operator(=) ident(im)operator(.)ident(ImageCreateBased)operator(()ident(src_image)operator(,) ident(width)operator(,) ident(height)operator(\))
  keyword(return) ident(im)operator(.)ident(ProcessResize)operator(()ident(src_image)operator(,) ident(dst_image)operator(\))operator(,) ident(dst_image)
keyword(end)

ident(OneSourceOneDest)operator(()string<delimiter(")content(ProcessReduceBy4)delimiter(")>operator(,) keyword(function) operator((image\)) keyword(return) ident(image)operator(:)ident(Width)operator(()operator(\)) operator(/) integer(2) keyword(end)operator(,) 
                                     keyword(function) operator((image\)) keyword(return) ident(image)operator(:)ident(Height)operator(()operator(\)) operator(/) integer(2) keyword(end)operator(\))

keyword(function) ident(im.)function(ProcessCropNew) operator(()ident(src_image)operator(,) ident(xmin)operator(,) ident(xmax)operator(,) ident(ymin)operator(,) ident(ymax)operator(\))
  keyword(local) local_variable(width) operator(=) ident(xmax) operator(-) ident(xmin) operator(+) integer(1)
  keyword(local) local_variable(height) operator(=) ident(xmax) operator(-) ident(ymin) operator(+) integer(1)
  keyword(local) local_variable(dst_image) operator(=) ident(im)operator(.)ident(ImageCreateBased)operator(()ident(src_image)operator(,) ident(width)operator(,) ident(height)operator(\))
  ident(im)operator(.)ident(ProcessCrop)operator(()ident(src_image)operator(,) ident(dst_image)operator(,) ident(xmin)operator(,) ident(ymin)operator(\))
  keyword(return) ident(dst_image)
keyword(end)

ident(TwoSourcesOneDest)operator(()string<delimiter(")content(ProcessInsert)delimiter(")>operator(\))

keyword(function) ident(im.)function(ProcessAddMarginsNew) operator(()ident(src_image)operator(,) ident(xmin)operator(,) ident(xmax)operator(,) ident(ymin)operator(,) ident(ymax)operator(\))
  keyword(local) local_variable(width) operator(=) ident(xmax) operator(-) ident(xmin) operator(+) integer(1)
  keyword(local) local_variable(height) operator(=) ident(xmax) operator(-) ident(ymin) operator(+) integer(1)
  keyword(local) local_variable(dst_image) operator(=) ident(im)operator(.)ident(ImageCreateBased)operator(()ident(src_image)operator(,) ident(width)operator(,) ident(height)operator(\))
  ident(im)operator(.)ident(ProcessAddMargins)operator(()ident(src_image)operator(,) ident(dst_image)operator(,) ident(xmin)operator(,) ident(ymin)operator(\))
  keyword(return) ident(dst_image)
keyword(end)

keyword(function) ident(im.)function(ProcessRotateNew) operator(()ident(src_image)operator(,) ident(cos0)operator(,) ident(sin0)operator(,) ident(order)operator(\))
  keyword(local) local_variable(width)operator(,) local_variable(height) operator(=) ident(im)operator(.)ident(ProcessCalcRotateSize)operator(()ident(src_image)operator(:)ident(Width)operator(()operator(\))operator(,) ident(src_image)operator(:)ident(Height)operator(()operator(\))operator(,) ident(cos0)operator(,) ident(sin0)operator(\))
  keyword(local) local_variable(dst_image) operator(=) ident(im)operator(.)ident(ImageCreateBased)operator(()ident(src_image)operator(,) ident(width)operator(,) ident(height)operator(\))
  keyword(return) ident(im)operator(.)ident(ProcessRotate)operator(()ident(src_image)operator(,) ident(dst_image)operator(,) ident(cos0)operator(,) ident(sin0)operator(,) ident(order)operator(\))operator(,) ident(dst_image)
keyword(end)

ident(OneSourceOneDest)operator(()string<delimiter(")content(ProcessRotateRef)delimiter(")>operator(\))
ident(OneSourceOneDest)operator(()string<delimiter(")content(ProcessRotate90)delimiter(")>operator(,) keyword(function) operator((image\)) keyword(return) ident(image)operator(:)ident(Height)operator(()operator(\)) keyword(end)operator(,) keyword(function) operator((image\)) keyword(return) ident(image)operator(:)ident(Width)operator(()operator(\)) keyword(end)operator(\))
ident(OneSourceOneDest)operator(()string<delimiter(")content(ProcessRotate180)delimiter(")>operator(\))
ident(OneSourceOneDest)operator(()string<delimiter(")content(ProcessMirror)delimiter(")>operator(\))
ident(OneSourceOneDest)operator(()string<delimiter(")content(ProcessFlip)delimiter(")>operator(\))
ident(OneSourceOneDest)operator(()string<delimiter(")content(ProcessRadial)delimiter(")>operator(\))
ident(OneSourceOneDest)operator(()string<delimiter(")content(ProcessGrayMorphConvolve)delimiter(")>operator(\))
ident(OneSourceOneDest)operator(()string<delimiter(")content(ProcessGrayMorphErode)delimiter(")>operator(\))
ident(OneSourceOneDest)operator(()string<delimiter(")content(ProcessGrayMorphDilate)delimiter(")>operator(\))
ident(OneSourceOneDest)operator(()string<delimiter(")content(ProcessGrayMorphOpen)delimiter(")>operator(\))
ident(OneSourceOneDest)operator(()string<delimiter(")content(ProcessGrayMorphClose)delimiter(")>operator(\))
ident(OneSourceOneDest)operator(()string<delimiter(")content(ProcessGrayMorphTopHat)delimiter(")>operator(\))
ident(OneSourceOneDest)operator(()string<delimiter(")content(ProcessGrayMorphWell)delimiter(")>operator(\))
ident(OneSourceOneDest)operator(()string<delimiter(")content(ProcessGrayMorphGradient)delimiter(")>operator(\))
ident(OneSourceOneDest)operator(()string<delimiter(")content(ProcessBinMorphConvolve)delimiter(")>operator(\))
ident(OneSourceOneDest)operator(()string<delimiter(")content(ProcessBinMorphErode)delimiter(")>operator(\))
ident(OneSourceOneDest)operator(()string<delimiter(")content(ProcessBinMorphDilate)delimiter(")>operator(\))
ident(OneSourceOneDest)operator(()string<delimiter(")content(ProcessBinMorphOpen)delimiter(")>operator(\))
ident(OneSourceOneDest)operator(()string<delimiter(")content(ProcessBinMorphClose)delimiter(")>operator(\))
ident(OneSourceOneDest)operator(()string<delimiter(")content(ProcessBinMorphOutline)delimiter(")>operator(\))
ident(OneSourceOneDest)operator(()string<delimiter(")content(ProcessBinMorphThin)delimiter(")>operator(\))
ident(OneSourceOneDest)operator(()string<delimiter(")content(ProcessMedianConvolve)delimiter(")>operator(\))
ident(OneSourceOneDest)operator(()string<delimiter(")content(ProcessRangeConvolve)delimiter(")>operator(\))
ident(OneSourceOneDest)operator(()string<delimiter(")content(ProcessRankClosestConvolve)delimiter(")>operator(\))
ident(OneSourceOneDest)operator(()string<delimiter(")content(ProcessRankMaxConvolve)delimiter(")>operator(\))
ident(OneSourceOneDest)operator(()string<delimiter(")content(ProcessRankMinConvolve)delimiter(")>operator(\))
ident(OneSourceOneDest)operator(()string<delimiter(")content(ProcessConvolve)delimiter(")>operator(\))
ident(OneSourceOneDest)operator(()string<delimiter(")content(ProcessConvolveSep)delimiter(")>operator(\))
ident(OneSourceOneDest)operator(()string<delimiter(")content(ProcessConvolveRep)delimiter(")>operator(\))
ident(OneSourceOneDest)operator(()string<delimiter(")content(ProcessConvolveDual)delimiter(")>operator(\))
ident(OneSourceOneDest)operator(()string<delimiter(")content(ProcessCompassConvolve)delimiter(")>operator(\))
ident(OneSourceOneDest)operator(()string<delimiter(")content(ProcessMeanConvolve)delimiter(")>operator(\))
ident(OneSourceOneDest)operator(()string<delimiter(")content(ProcessGaussianConvolve)delimiter(")>operator(\))
ident(OneSourceOneDest)operator(()string<delimiter(")content(ProcessBarlettConvolve)delimiter(")>operator(\))
ident(OneSourceTwoDests)operator(()string<delimiter(")content(ProcessInterlaceSplit)delimiter(")>operator(,) predefined_constant(nil)operator(,) keyword(function) operator((image\)) keyword(if) operator(()ident(image)operator(:)ident(Height)operator(()operator(\))operator(\)) keyword(then) keyword(return) ident(image)operator(:)ident(Height)operator(()operator(\)) keyword(else) keyword(return) ident(image)operator(:)ident(Height)operator(()operator(\))operator(/)integer(2) keyword(end) keyword(end)operator(\))

keyword(function) ident(im.)function(ProcessInterlaceSplitNew)operator(()ident(src_image)operator(\))
  comment(-- create destination image)
  keyword(local) local_variable(dst_height1) operator(=) ident(src_image)operator(:)ident(Height)operator(()operator(\))operator(/)integer(2)
  keyword(if) ident(math)operator(.)ident(mod)operator(()ident(src_image)operator(:)ident(Height)operator(()operator(\))operator(,) integer(2)operator(\)) keyword(then)
    ident(dst_height1) operator(=) ident(dst_height1) operator(+) integer(1)
  keyword(end)
  
  keyword(local) local_variable(dst_image1) operator(=) ident(im)operator(.)ident(ImageCreateBased)operator(()ident(src_image)operator(,) predefined_constant(nil)operator(,) ident(dst_height1)operator(\))
  keyword(local) local_variable(dst_image2) operator(=) ident(im)operator(.)ident(ImageCreateBased)operator(()ident(src_image)operator(,) predefined_constant(nil)operator(,) ident(src_image)operator(:)ident(Height)operator(()operator(\))operator(/)integer(2)operator(\))

  comment(-- call method, repassing all parameters)
  ident(im)operator(.)ident(ProcessInterlaceSplit)operator(()ident(src_image)operator(,) ident(dst_image1)operator(,) ident(dst_image2)operator(\))
  keyword(return) ident(dst_image1)operator(,) ident(dst_image2)
keyword(end)

keyword(local) keyword(function) function(int_datatype) operator(()ident(image)operator(\))
  keyword(local) local_variable(data_type) operator(=) ident(image)operator(:)ident(DataType)operator(()operator(\))
  keyword(if) ident(data_type) operator(=)operator(=) ident(im)operator(.)ident(BYTE) keyword(or) ident(data_type) operator(=)operator(=) ident(im)operator(.)ident(USHORT) keyword(then)
    ident(data_type) operator(=) ident(im)operator(.)ident(INT)
  keyword(end)
  keyword(return) ident(data_type)
keyword(end)

ident(OneSourceOneDest)operator(()string<delimiter(")content(ProcessDiffOfGaussianConvolve)delimiter(")>operator(,) predefined_constant(nil)operator(,) predefined_constant(nil)operator(,) predefined_constant(nil)operator(,) ident(int_datatype)operator(\))
ident(OneSourceOneDest)operator(()string<delimiter(")content(ProcessLapOfGaussianConvolve)delimiter(")>operator(,) predefined_constant(nil)operator(,) predefined_constant(nil)operator(,) predefined_constant(nil)operator(,) ident(int_datatype)operator(\))
ident(OneSourceOneDest)operator(()string<delimiter(")content(ProcessSobelConvolve)delimiter(")>operator(\))
ident(OneSourceOneDest)operator(()string<delimiter(")content(ProcessSplineEdgeConvolve)delimiter(")>operator(\))
ident(OneSourceOneDest)operator(()string<delimiter(")content(ProcessPrewittConvolve)delimiter(")>operator(\))
ident(OneSourceOneDest)operator(()string<delimiter(")content(ProcessZeroCrossing)delimiter(")>operator(\))
ident(OneSourceOneDest)operator(()string<delimiter(")content(ProcessCanny)delimiter(")>operator(\))
ident(OneSourceOneDest)operator(()string<delimiter(")content(ProcessUnArithmeticOp)delimiter(")>operator(\))
ident(TwoSourcesOneDest)operator(()string<delimiter(")content(ProcessArithmeticOp)delimiter(")>operator(\))

keyword(function) ident(im.)function(ProcessArithmeticConstOpNew) operator(()ident(src_image)operator(,) ident(src_const)operator(,) ident(op)operator(\))
  keyword(local) local_variable(dst_image) operator(=) ident(im)operator(.)ident(ImageCreateBased)operator(()ident(src_image)operator(\))
  ident(im)operator(.)ident(ProcessArithmeticConstOp)operator(()ident(src_image)operator(,) ident(src_const)operator(,) ident(dst_image)operator(,) ident(op)operator(\))
  keyword(return) ident(dst_image)
keyword(end)

ident(TwoSourcesOneDest)operator(()string<delimiter(")content(ProcessBlendConst)delimiter(")>operator(\))
ident(ThreeSourcesOneDest)operator(()string<delimiter(")content(ProcessBlend)delimiter(")>operator(\))
ident(OneSourceTwoDests)operator(()string<delimiter(")content(ProcessSplitComplex)delimiter(")>operator(\))
ident(TwoSourcesOneDest)operator(()string<delimiter(")content(ProcessMergeComplex)delimiter(")>operator(,) predefined_constant(nil)operator(,) predefined_constant(nil)operator(,) predefined_constant(nil)operator(,) ident(im)operator(.)ident(CFLOAT)operator(\))

keyword(function) ident(im.)function(ProcessMultipleMeanNew) operator(()ident(src_image_list)operator(,) ident(dst_image)operator(\))
  keyword(local) local_variable(dst_image) operator(=) ident(im)operator(.)ident(ImageCreateBased)operator(()ident(src_image_list)operator([)integer(1)operator(])operator(\))
  ident(im)operator(.)ident(ProcessMultipleMean)operator(()ident(src_image_list)operator(,) ident(dst_image)operator(\))
  keyword(return) ident(dst_image)
keyword(end)

keyword(function) ident(im.)function(ProcessMultipleStdDevNew) operator(()ident(src_image_list)operator(,) ident(mean_image)operator(\))
  keyword(local) local_variable(dst_image) operator(=) ident(im)operator(.)ident(ImageCreateBased)operator(()ident(src_image_list)operator([)integer(1)operator(])operator(\))
  ident(im)operator(.)ident(ProcessMultipleStdDev)operator(()ident(src_image_list)operator(,) ident(mean_image)operator(,) ident(dst_image)operator(\))
  keyword(return) ident(dst_image)
keyword(end)

ident(TwoSourcesOneDest)operator(()string<delimiter(")content(ProcessAutoCovariance)delimiter(")>operator(\))
ident(OneSourceOneDest)operator(()string<delimiter(")content(ProcessMultiplyConj)delimiter(")>operator(\))
ident(OneSourceOneDest)operator(()string<delimiter(")content(ProcessQuantizeRGBUniform)delimiter(")>operator(,) predefined_constant(nil)operator(,) predefined_constant(nil)operator(,) ident(im)operator(.)ident(MAP)operator(,) predefined_constant(nil)operator(\))
ident(OneSourceOneDest)operator(()string<delimiter(")content(ProcessQuantizeGrayUniform)delimiter(")>operator(\))
ident(OneSourceOneDest)operator(()string<delimiter(")content(ProcessExpandHistogram)delimiter(")>operator(\))
ident(OneSourceOneDest)operator(()string<delimiter(")content(ProcessEqualizeHistogram)delimiter(")>operator(\))

keyword(function) ident(im.)function(ProcessSplitYChromaNew) operator(()ident(src_image)operator(\))
  keyword(local) local_variable(y_image) operator(=) ident(im)operator(.)ident(ImageCreateBased)operator(()ident(src_image)operator(,) predefined_constant(nil)operator(,) predefined_constant(nil)operator(,) ident(im)operator(.)ident(GRAY)operator(,) ident(im)operator(.)ident(BYTE)operator(\))
  keyword(local) local_variable(chroma_image) operator(=) ident(im)operator(.)ident(ImageCreateBased)operator(()ident(src_image)operator(,) predefined_constant(nil)operator(,) predefined_constant(nil)operator(,) ident(im)operator(.)ident(RGB)operator(,) ident(im)operator(.)ident(BYTE)operator(\))
  ident(im)operator(.)ident(ProcessSplitYChroma)operator(()ident(src_image)operator(,) ident(y_image)operator(,) ident(chroma_image)operator(\))
  keyword(return) ident(y_image)operator(,) ident(chroma_image)
keyword(end)

ident(OneSourceThreeDests)operator(()string<delimiter(")content(ProcessSplitHSI)delimiter(")>operator(,) predefined_constant(nil)operator(,) predefined_constant(nil)operator(,) ident(im)operator(.)ident(GRAY)operator(,) ident(im)operator(.)ident(FLOAT)operator(\))
ident(ThreeSourcesOneDest)operator(()string<delimiter(")content(ProcessMergeHSI)delimiter(")>operator(,) predefined_constant(nil)operator(,) predefined_constant(nil)operator(,) ident(im)operator(.)ident(RGB)operator(,) ident(im)operator(.)ident(BYTE)operator(\))

keyword(function) ident(im.)function(ProcessSplitComponentsNew) operator(()ident(src_image)operator(\))
  keyword(local) local_variable(depth) operator(=) ident(src_image)operator(:)ident(Depth)operator(()operator(\))
  keyword(local) local_variable(dst_images) operator(=) map<delimiter({)delimiter(})>
  keyword(for) ident(i) operator(=) integer(1)operator(,) ident(depth) keyword(do)
    ident(table)operator(.)ident(insert)operator(()ident(dst_images)operator(,) ident(im)operator(.)ident(ImageCreateBased)operator(()ident(src_image)operator(,) predefined_constant(nil)operator(,) predefined_constant(nil)operator(,) ident(im)operator(.)ident(GRAY)operator(\))operator(\))
  keyword(end)
  ident(im)operator(.)ident(ProcessSplitComponents)operator(()ident(src_image)operator(,) ident(dst_images)operator(\))
  keyword(return) ident(unpack)operator(()ident(dst_images)operator(\))
keyword(end)

keyword(function) ident(im.)function(ProcessMergeComponentsNew) operator(()ident(src_image_list)operator(\))
  keyword(local) local_variable(dst_image) operator(=) ident(im)operator(.)ident(ImageCreateBased)operator(()ident(src_image_list)operator([)integer(1)operator(])operator(,) predefined_constant(nil)operator(,) predefined_constant(nil)operator(,) ident(im)operator(.)ident(RGB)operator(\))
  ident(im)operator(.)ident(ProcessMergeComponents)operator(()ident(src_image_list)operator(,) ident(dst_image)operator(\))
  keyword(return) ident(dst_image)
keyword(end)

ident(OneSourceOneDest)operator(()string<delimiter(")content(ProcessNormalizeComponents)delimiter(")>operator(,) predefined_constant(nil)operator(,) predefined_constant(nil)operator(,) predefined_constant(nil)operator(,) ident(im)operator(.)ident(FLOAT)operator(\))
ident(OneSourceOneDest)operator(()string<delimiter(")content(ProcessReplaceColor)delimiter(")>operator(\))
ident(TwoSourcesOneDest)operator(()string<delimiter(")content(ProcessBitwiseOp)delimiter(")>operator(\))
ident(OneSourceOneDest)operator(()string<delimiter(")content(ProcessBitwiseNot)delimiter(")>operator(\))
ident(OneSourceOneDest)operator(()string<delimiter(")content(ProcessBitMask)delimiter(")>operator(\))
ident(OneSourceOneDest)operator(()string<delimiter(")content(ProcessBitPlane)delimiter(")>operator(\))
ident(OneSourceOneDest)operator(()string<delimiter(")content(ProcessToneGamut)delimiter(")>operator(\))
ident(OneSourceOneDest)operator(()string<delimiter(")content(ProcessUnNormalize)delimiter(")>operator(,) predefined_constant(nil)operator(,) predefined_constant(nil)operator(,) predefined_constant(nil)operator(,) ident(im)operator(.)ident(BYTE)operator(\))
ident(OneSourceOneDest)operator(()string<delimiter(")content(ProcessDirectConv)delimiter(")>operator(,) predefined_constant(nil)operator(,) predefined_constant(nil)operator(,) predefined_constant(nil)operator(,) ident(im)operator(.)ident(BYTE)operator(\))
ident(OneSourceOneDest)operator(()string<delimiter(")content(ProcessNegative)delimiter(")>operator(\))
ident(OneSourceOneDest)operator(()string<delimiter(")content(ProcessRangeContrastThreshold)delimiter(")>operator(,) predefined_constant(nil)operator(,) predefined_constant(nil)operator(,) ident(im)operator(.)ident(BINARY)operator(,) predefined_constant(nil)operator(\))
ident(OneSourceOneDest)operator(()string<delimiter(")content(ProcessLocalMaxThreshold)delimiter(")>operator(,) predefined_constant(nil)operator(,) predefined_constant(nil)operator(,) ident(im)operator(.)ident(BINARY)operator(,) predefined_constant(nil)operator(\))
ident(OneSourceOneDest)operator(()string<delimiter(")content(ProcessThreshold)delimiter(")>operator(,) predefined_constant(nil)operator(,) predefined_constant(nil)operator(,) ident(im)operator(.)ident(BINARY)operator(,) predefined_constant(nil)operator(\))
ident(TwoSourcesOneDest)operator(()string<delimiter(")content(ProcessThresholdByDiff)delimiter(")>operator(\))
ident(OneSourceOneDest)operator(()string<delimiter(")content(ProcessHysteresisThreshold)delimiter(")>operator(,) predefined_constant(nil)operator(,) predefined_constant(nil)operator(,) ident(im)operator(.)ident(BINARY)operator(,) predefined_constant(nil)operator(\))
ident(OneSourceOneDest)operator(()string<delimiter(")content(ProcessUniformErrThreshold)delimiter(")>operator(,) predefined_constant(nil)operator(,) predefined_constant(nil)operator(,) ident(im)operator(.)ident(BINARY)operator(,) predefined_constant(nil)operator(\))
ident(OneSourceOneDest)operator(()string<delimiter(")content(ProcessDifusionErrThreshold)delimiter(")>operator(\))
ident(OneSourceOneDest)operator(()string<delimiter(")content(ProcessPercentThreshold)delimiter(")>operator(\))
ident(OneSourceOneDest)operator(()string<delimiter(")content(ProcessOtsuThreshold)delimiter(")>operator(\))
ident(OneSourceOneDest)operator(()string<delimiter(")content(ProcessMinMaxThreshold)delimiter(")>operator(,) predefined_constant(nil)operator(,) predefined_constant(nil)operator(,) ident(im)operator(.)ident(BINARY)operator(,) predefined_constant(nil)operator(\))
ident(OneSourceOneDest)operator(()string<delimiter(")content(ProcessSliceThreshold)delimiter(")>operator(,) predefined_constant(nil)operator(,) predefined_constant(nil)operator(,) ident(im)operator(.)ident(BINARY)operator(,) predefined_constant(nil)operator(\))
ident(OneSourceOneDest)operator(()string<delimiter(")content(ProcessPixelate)delimiter(")>operator(\))
ident(OneSourceOneDest)operator(()string<delimiter(")content(ProcessPosterize)delimiter(")>operator(\))

comment(----------------------------------------------------)
comment(-- The main porpouse of this file is to build linux gcc makefiles.)
comment(-- Must have Premake version 3 installed.)
comment(-- Original Premake was changed to remove some parameters and add others.)
comment(-- Default parameters:)
comment(--   premake3s --target gnu --os linux)
comment(-- But it can build windows gcc makefiles, and visual studio projects.)
comment(--   premake3s --target gnu --os windows)
comment(--   premake3s --target gnu --os macosx)
comment(--   premake3s --target vs6)
comment(--   premake3s --target vs2002)
comment(--   premake3s --target vs2003)
comment(--   premake3s --target vs2005)
comment(-- In Linux the generated makefiles will not correctly build libraries in 64-bits.)
comment(--              must add "-m64 -fPIC" flags)
comment(----------------------------------------------------)

keyword(if) operator(()keyword(not) ident(options)operator(.)ident(target)operator(\)) keyword(then) 
  ident(options)operator(.)ident(target) operator(=) string<delimiter(")content(gnu)delimiter(")>
keyword(end)

keyword(if) operator(()keyword(not) ident(options)operator(.)ident(os)operator(\)) keyword(then)
  keyword(if) operator(()ident(options)operator(.)ident(target) operator(~)operator(=) string<delimiter(")content(gnu)delimiter(")>operator(\)) keyword(then)
    ident(options)operator(.)ident(os) operator(=) string<delimiter(")content(windows)delimiter(")>
  keyword(else)
    ident(options)operator(.)ident(os) operator(=) string<delimiter(")content(linux)delimiter(")>
  keyword(end)
keyword(end)

keyword(function) function(fixPackagePath)operator(()ident(package_files)operator(\))
  keyword(if) operator(()ident(options)operator(.)ident(os) operator(~)operator(=) string<delimiter(")content(linux)delimiter(")>operator(\)) keyword(then)
    keyword(for) ident(i)operator(,) ident(file) keyword(in) ident(package_files) keyword(do) 
      ident(package_files)operator([)ident(i)operator(]) operator(=) string<delimiter(")content(../src/)delimiter(")>operator(.)operator(.)ident(file) 
    keyword(end)
  keyword(end)
keyword(end)

comment(----------------------------------------------------)

ident(project)operator(.)ident(name) operator(=) string<delimiter(")content(im)delimiter(")>
ident(project)operator(.)ident(bindir) operator(=) string<delimiter(")content(../bin)delimiter(")>
ident(project)operator(.)ident(libdir) operator(=) string<delimiter(")content(../lib)delimiter(")>

keyword(if) operator(()ident(options)operator(.)ident(os) operator(~)operator(=) string<delimiter(")content(linux)delimiter(")>operator(\)) keyword(then)
  keyword(if) operator(()ident(options)operator(.)ident(os) operator(=)operator(=) string<delimiter(")content(macosx)delimiter(")>operator(\)) keyword(then)
	ident(project)operator(.)ident(path) operator(=) string<delimiter(")content(../mak.macosx)delimiter(")>
  keyword(else)
	ident(project)operator(.)ident(path) operator(=) string<delimiter(")content(../mak.)delimiter(")>operator(.)operator(.)ident(options)operator(.)ident(target)
  keyword(end)
keyword(end)

comment(----------------------------------------------------)

ident(package) operator(=) ident(newpackage)operator(()operator(\))
ident(package)operator(.)ident(name) operator(=) string<delimiter(")content(im)delimiter(")>
ident(package)operator(.)ident(target) operator(=) ident(package)operator(.)ident(name)
ident(package)operator(.)ident(objdir) operator(=) string<delimiter(")content(../obj/)delimiter(")>operator(.)operator(.)ident(package)operator(.)ident(name)
ident(package)operator(.)ident(language) operator(=) string<delimiter(")content(c++)delimiter(")>
ident(package)operator(.)ident(kind) operator(=) string<delimiter(")content(lib)delimiter(")>
ident(package)operator(.)ident(buildflags) operator(=) map<delimiter({) string<delimiter(")content(static-runtime)delimiter(")> delimiter(})>

ident(package)operator(.)ident(files) operator(=)
map<delimiter({)
  ident(matchfiles)operator(()string<delimiter(")content(libtiff/*.c)delimiter(")>operator(\))operator(,)
  ident(matchfiles)operator(()string<delimiter(")content(libjpeg/*.c)delimiter(")>operator(\))operator(,)
  ident(matchfiles)operator(()string<delimiter(")content(liblzf/*.c)delimiter(")>operator(\))operator(,)
  ident(matchfiles)operator(()string<delimiter(")content(zlib/*.c)delimiter(")>operator(\))operator(,)
  string<delimiter(")content(libpng/png.c)delimiter(")>operator(,)      string<delimiter(")content(libpng/pngget.c)delimiter(")>operator(,)   string<delimiter(")content(libpng/pngread.c)delimiter(")>operator(,)  string<delimiter(")content(libpng/pngrutil.c)delimiter(")>operator(,) string<delimiter(")content(libpng/pngwtran.c)delimiter(")>operator(,)  
  string<delimiter(")content(libpng/pngerror.c)delimiter(")>operator(,) string<delimiter(")content(libpng/pngmem.c)delimiter(")>operator(,)   string<delimiter(")content(libpng/pngrio.c)delimiter(")>operator(,)   string<delimiter(")content(libpng/pngset.c)delimiter(")>operator(,)   string<delimiter(")content(libpng/pngwio.c)delimiter(")>operator(,)    
  string<delimiter(")content(libpng/pngpread.c)delimiter(")>operator(,) string<delimiter(")content(libpng/pngrtran.c)delimiter(")>operator(,) string<delimiter(")content(libpng/pngtrans.c)delimiter(")>operator(,) string<delimiter(")content(libpng/pngwrite.c)delimiter(")>operator(,) string<delimiter(")content(libpng/pngwutil.c)delimiter(")>operator(,)  
  ident(matchfiles)operator(()string<delimiter(")content(libexif/canon/*.c)delimiter(")>operator(\))operator(,)
  ident(matchfiles)operator(()string<delimiter(")content(libexif/olympus/*.c)delimiter(")>operator(\))operator(,)
  ident(matchfiles)operator(()string<delimiter(")content(libexif/pentax/*.c)delimiter(")>operator(\))operator(,)
  ident(matchfiles)operator(()string<delimiter(")content(libexif/*.c)delimiter(")>operator(\))operator(,)
  string<delimiter(")content(old_imcolor.c)delimiter(")>operator(,)         string<delimiter(")content(old_imresize.c)delimiter(")>operator(,)      string<delimiter(")content(tiff_binfile.c)delimiter(")>operator(,)       string<delimiter(")content(im_converttype.cpp)delimiter(")>operator(,)
  string<delimiter(")content(im_attrib.cpp)delimiter(")>operator(,)         string<delimiter(")content(im_format.cpp)delimiter(")>operator(,)       string<delimiter(")content(im_format_tga.cpp)delimiter(")>operator(,)    string<delimiter(")content(im_filebuffer.cpp)delimiter(")>operator(,) 
  string<delimiter(")content(im_bin.cpp)delimiter(")>operator(,)            string<delimiter(")content(im_format_all.cpp)delimiter(")>operator(,)   string<delimiter(")content(im_format_tiff.cpp)delimiter(")>operator(,)   string<delimiter(")content(im_format_raw.cpp)delimiter(")>operator(,) 
  string<delimiter(")content(im_binfile.cpp)delimiter(")>operator(,)        string<delimiter(")content(im_format_sgi.cpp)delimiter(")>operator(,)   string<delimiter(")content(im_datatype.cpp)delimiter(")>operator(,)      string<delimiter(")content(im_format_pcx.cpp)delimiter(")>operator(,) 
  string<delimiter(")content(im_colorhsi.cpp)delimiter(")>operator(,)       string<delimiter(")content(im_format_bmp.cpp)delimiter(")>operator(,)   string<delimiter(")content(im_image.cpp)delimiter(")>operator(,)         string<delimiter(")content(im_rgb2map.cpp)delimiter(")>operator(,)    
  string<delimiter(")content(im_colormode.cpp)delimiter(")>operator(,)      string<delimiter(")content(im_format_gif.cpp)delimiter(")>operator(,)   string<delimiter(")content(im_lib.cpp)delimiter(")>operator(,)           string<delimiter(")content(im_format_pnm.cpp)delimiter(")>operator(,) 
  string<delimiter(")content(im_colorutil.cpp)delimiter(")>operator(,)      string<delimiter(")content(im_format_ico.cpp)delimiter(")>operator(,)   string<delimiter(")content(im_palette.cpp)delimiter(")>operator(,)       string<delimiter(")content(im_format_png.cpp)delimiter(")>operator(,) 
  string<delimiter(")content(im_convertbitmap.cpp)delimiter(")>operator(,)  string<delimiter(")content(im_format_led.cpp)delimiter(")>operator(,)   string<delimiter(")content(im_counter.cpp)delimiter(")>operator(,)       string<delimiter(")content(im_str.cpp)delimiter(")>operator(,)        
  string<delimiter(")content(im_convertcolor.cpp)delimiter(")>operator(,)   string<delimiter(")content(im_format_jpeg.cpp)delimiter(")>operator(,)  string<delimiter(")content(im_fileraw.cpp)delimiter(")>operator(,)       string<delimiter(")content(im_format_krn.cpp)delimiter(")>operator(,) 
  string<delimiter(")content(im_file.cpp)delimiter(")>operator(,)           string<delimiter(")content(im_format_ras.cpp)delimiter(")>operator(,)   string<delimiter(")content(old_im.cpp)delimiter(")>operator(,)           string<delimiter(")content(im_compress.cpp)delimiter(")>operator(,)   
delimiter(})>

ident(package)operator(.)ident(includepaths) operator(=) map<delimiter({) string<delimiter(")content(.)delimiter(")>operator(,) string<delimiter(")content(../include)delimiter(")>operator(,) string<delimiter(")content(libtiff)delimiter(")>operator(,) string<delimiter(")content(libjpeg)delimiter(")>operator(,) string<delimiter(")content(libexif)delimiter(")>operator(,) string<delimiter(")content(libpng)delimiter(")>operator(,) string<delimiter(")content(zlib)delimiter(")> delimiter(})>
ident(package)operator(.)ident(defines) operator(=) map<delimiter({) string<delimiter(")content(JPEG_SUPPORT)delimiter(")>operator(,) string<delimiter(")content(ZIP_SUPPORT)delimiter(")>operator(,) string<delimiter(")content(OJPEG_SUPPORT)delimiter(")>operator(,) string<delimiter(")content(PIXARLOG_SUPPORT)delimiter(")>operator(,) string<delimiter(")content(PNG_NO_STDIO)delimiter(")>operator(,) string<delimiter(")content(PNG_TIME_RFC1123_SUPPORTED)delimiter(")> delimiter(})>

keyword(if) operator(()ident(options)operator(.)ident(os) operator(=)operator(=) string<delimiter(")content(windows)delimiter(")>operator(\)) keyword(then)
  ident(tinsert)operator(()ident(package)operator(.)ident(files)operator(,) map<delimiter({)string<delimiter(")content(im_sysfile_win32.cpp)delimiter(")>operator(,) string<delimiter(")content(im_dib.cpp)delimiter(")>operator(,) string<delimiter(")content(im_dibxbitmap.cpp)delimiter(")>delimiter(})>operator(\))
  
  keyword(if) operator(()ident(options)operator(.)ident(target) operator(~)operator(=) string<delimiter(")content(gnu)delimiter(")>operator(\)) keyword(then)
    comment(-- optimize PNG lib for VC)
    ident(tinsert)operator(()ident(package)operator(.)ident(files)operator(,) string<delimiter(")content(libpng/pngvcrd.c)delimiter(")>operator(\))
    ident(tinsert)operator(()ident(package)operator(.)ident(defines)operator(,) string<delimiter(")content(PNG_USE_PNGVCRD)delimiter(")>operator(\))
  keyword(end)
keyword(else)
  ident(tinsert)operator(()ident(package)operator(.)ident(files)operator(,) string<delimiter(")content(im_sysfile_unix.cpp)delimiter(")>operator(\))
  
  keyword(if) operator(()ident(options)operator(.)ident(os) operator(=)operator(=) string<delimiter(")content(linux)delimiter(")>operator(\)) keyword(then)
    comment(--package.buildoptions = { "-W -Wall -ansi -pedantic" })
    
    comment(-- optimize PNG lib for Linux in x86)
    ident(tinsert)operator(()ident(package)operator(.)ident(files)operator(,) string<delimiter(")content(libpng/pnggccrd.c)delimiter(")>operator(\))
    ident(tinsert)operator(()ident(package)operator(.)ident(defines)operator(,) string<delimiter(")content(PNG_USE_PNGGCCRD)delimiter(")>operator(\))
  keyword(end)
keyword(end)      

ident(fixPackagePath)operator(()ident(package)operator(.)ident(files)operator(\))

comment(---------------------------------------------------------------------)

ident(package) operator(=) ident(newpackage)operator(()operator(\))
ident(package)operator(.)ident(name) operator(=) string<delimiter(")content(im_process)delimiter(")>
ident(package)operator(.)ident(target) operator(=) ident(package)operator(.)ident(name)
ident(package)operator(.)ident(objdir) operator(=) string<delimiter(")content(../obj/)delimiter(")>operator(.)operator(.)ident(package)operator(.)ident(name)
ident(package)operator(.)ident(language) operator(=) string<delimiter(")content(c++)delimiter(")>
ident(package)operator(.)ident(kind) operator(=) string<delimiter(")content(lib)delimiter(")>
ident(package)operator(.)ident(buildflags) operator(=) map<delimiter({) string<delimiter(")content(static-runtime)delimiter(")> delimiter(})>

ident(package)operator(.)ident(files) operator(=)
map<delimiter({)
  string<delimiter(")content(process/im_arithmetic_bin.cpp)delimiter(")>operator(,)  string<delimiter(")content(process/im_morphology_gray.cpp)delimiter(")>operator(,)  string<delimiter(")content(process/im_quantize.cpp)delimiter(")>operator(,) 
  string<delimiter(")content(process/im_arithmetic_un.cpp)delimiter(")>operator(,)  string<delimiter(")content(process/im_geometric.cpp)delimiter(")>operator(,)  string<delimiter(")content(process/im_render.cpp)delimiter(")>operator(,)
  string<delimiter(")content(process/im_color.cpp)delimiter(")>operator(,)  string<delimiter(")content(process/im_histogram.cpp)delimiter(")>operator(,)  string<delimiter(")content(process/im_resize.cpp)delimiter(")>operator(,)
  string<delimiter(")content(process/im_convolve.cpp)delimiter(")>operator(,)  string<delimiter(")content(process/im_houghline.cpp)delimiter(")>operator(,)  string<delimiter(")content(process/im_statistics.cpp)delimiter(")>operator(,)
  string<delimiter(")content(process/im_convolve_rank.cpp)delimiter(")>operator(,)  string<delimiter(")content(process/im_logic.cpp)delimiter(")>operator(,)  string<delimiter(")content(process/im_threshold.cpp)delimiter(")>operator(,)
  string<delimiter(")content(process/im_effects.cpp)delimiter(")>operator(,)  string<delimiter(")content(process/im_morphology_bin.cpp)delimiter(")>operator(,)  string<delimiter(")content(process/im_tonegamut.cpp)delimiter(")>operator(,)
  string<delimiter(")content(process/im_canny.cpp)delimiter(")>operator(,)  string<delimiter(")content(process/im_distance.cpp)delimiter(")>operator(,)  string<delimiter(")content(process/im_analyze.cpp)delimiter(")>
delimiter(})>
ident(fixPackagePath)operator(()ident(package)operator(.)ident(files)operator(\))

ident(package)operator(.)ident(includepaths) operator(=) map<delimiter({) string<delimiter(")content(../include)delimiter(")> delimiter(})>

comment(---------------------------------------------------------------------)

ident(package) operator(=) ident(newpackage)operator(()operator(\))
ident(package)operator(.)ident(name) operator(=) string<delimiter(")content(im_jp2)delimiter(")>
ident(package)operator(.)ident(target) operator(=) ident(package)operator(.)ident(name)
ident(package)operator(.)ident(objdir) operator(=) string<delimiter(")content(../obj/)delimiter(")>operator(.)operator(.)ident(package)operator(.)ident(name)
ident(package)operator(.)ident(language) operator(=) string<delimiter(")content(c++)delimiter(")>
ident(package)operator(.)ident(kind) operator(=) string<delimiter(")content(lib)delimiter(")>
ident(package)operator(.)ident(buildflags) operator(=) map<delimiter({) string<delimiter(")content(static-runtime)delimiter(")> delimiter(})>

ident(package)operator(.)ident(files) operator(=)
map<delimiter({)
  ident(matchfiles)operator(()string<delimiter(")content(libjasper/base/*.c)delimiter(")>operator(,) string<delimiter(")content(libjasper/jp2/*.c)delimiter(")>operator(,) string<delimiter(")content(libjasper/jpc/*.c)delimiter(")>operator(\))operator(,)
  string<delimiter(")content(jas_binfile.c)delimiter(")>operator(,) string<delimiter(")content(im_format_jp2.cpp)delimiter(")>
delimiter(})>
ident(fixPackagePath)operator(()ident(package)operator(.)ident(files)operator(\))

ident(package)operator(.)ident(includepaths) operator(=) map<delimiter({) string<delimiter(")content(../include)delimiter(")>operator(,) string<delimiter(")content(libjasper)delimiter(")> delimiter(})>
ident(package)operator(.)ident(defines) operator(=) map<delimiter({) string<delimiter(")content(EXCLUDE_JPG_SUPPORT)delimiter(")>operator(,) string<delimiter(")content(EXCLUDE_MIF_SUPPORT)delimiter(")>operator(,) string<delimiter(")content(EXCLUDE_PNM_SUPPORT)delimiter(")>operator(,)  
                    string<delimiter(")content(EXCLUDE_BMP_SUPPORT)delimiter(")>operator(,) string<delimiter(")content(EXCLUDE_PGX_SUPPORT)delimiter(")>operator(,) string<delimiter(")content(EXCLUDE_RAS_SUPPORT)delimiter(")>operator(,)
                    string<delimiter(")content(EXCLUDE_TIFF_SUPPORT)delimiter(")>operator(,) string<delimiter(")content(JAS_GEO_OMIT_PRINTING_CODE)delimiter(")> delimiter(})>
         
ident(tinsert)operator(()ident(package)operator(.)ident(defines)operator(,) string<delimiter(")content(JAS_TYPES)delimiter(")>operator(\))

keyword(if) operator(()ident(options)operator(.)ident(os) operator(=)operator(=) string<delimiter(")content(linux)delimiter(")>operator(\)) keyword(then)
  ident(tinsert)operator(()ident(package)operator(.)ident(defines)operator(,) string<delimiter(")content(HAVE_UNISTD_H)delimiter(")>operator(\))
keyword(end)
           
comment(---------------------------------------------------------------------)

ident(package) operator(=) ident(newpackage)operator(()operator(\))
ident(package)operator(.)ident(name) operator(=) string<delimiter(")content(imlua3)delimiter(")>
ident(package)operator(.)ident(target) operator(=) ident(package)operator(.)ident(name)
ident(package)operator(.)ident(objdir) operator(=) string<delimiter(")content(../obj/)delimiter(")>operator(.)operator(.)ident(package)operator(.)ident(name)
ident(package)operator(.)ident(language) operator(=) string<delimiter(")content(c++)delimiter(")>
ident(package)operator(.)ident(kind) operator(=) string<delimiter(")content(lib)delimiter(")>
ident(package)operator(.)ident(buildflags) operator(=) map<delimiter({) string<delimiter(")content(static-runtime)delimiter(")> delimiter(})>

ident(package)operator(.)ident(files) operator(=)
map<delimiter({)
  string<delimiter(")content(im_lua3.c)delimiter(")>
delimiter(})>
ident(fixPackagePath)operator(()ident(package)operator(.)ident(files)operator(\))

ident(package)operator(.)ident(includepaths) operator(=) map<delimiter({) string<delimiter(")content(../include)delimiter(")>operator(,) string<delimiter(")content($(LUA3\)/include)delimiter(")>operator(,) string<delimiter(")content($(CD\)/include)delimiter(")> delimiter(})>

comment(---------------------------------------------------------------------)

ident(package) operator(=) ident(newpackage)operator(()operator(\))
ident(package)operator(.)ident(name) operator(=) string<delimiter(")content(im_fftw)delimiter(")>
ident(package)operator(.)ident(target) operator(=) ident(package)operator(.)ident(name)
ident(package)operator(.)ident(objdir) operator(=) string<delimiter(")content(../obj/)delimiter(")>operator(.)operator(.)ident(package)operator(.)ident(name)
ident(package)operator(.)ident(language) operator(=) string<delimiter(")content(c++)delimiter(")>
ident(package)operator(.)ident(kind) operator(=) string<delimiter(")content(lib)delimiter(")>
ident(package)operator(.)ident(buildflags) operator(=) map<delimiter({) string<delimiter(")content(static-runtime)delimiter(")> delimiter(})>

ident(package)operator(.)ident(files) operator(=)
map<delimiter({)
  ident(matchfiles)operator(()string<delimiter(")content(fftw/*.c)delimiter(")>operator(\))operator(,)
  string<delimiter(")content(process/im_fft.cpp)delimiter(")>
delimiter(})>
ident(fixPackagePath)operator(()ident(package)operator(.)ident(files)operator(\))

ident(package)operator(.)ident(includepaths) operator(=) map<delimiter({) string<delimiter(")content(../include)delimiter(")>operator(,) string<delimiter(")content(fftw)delimiter(")> delimiter(})>
ident(package)operator(.)ident(defines) operator(=) map<delimiter({) string<delimiter(")content(FFTW_ENABLE_FLOAT)delimiter(")> delimiter(})>

comment(---------------------------------------------------------------------)

ident(package) operator(=) ident(newpackage)operator(()operator(\))
ident(package)operator(.)ident(name) operator(=) string<delimiter(")content(im_fftw3)delimiter(")>
ident(package)operator(.)ident(target) operator(=) ident(package)operator(.)ident(name)
ident(package)operator(.)ident(objdir) operator(=) string<delimiter(")content(../obj/)delimiter(")>operator(.)operator(.)ident(package)operator(.)ident(name)
ident(package)operator(.)ident(language) operator(=) string<delimiter(")content(c++)delimiter(")>
ident(package)operator(.)ident(kind) operator(=) string<delimiter(")content(lib)delimiter(")>
ident(package)operator(.)ident(buildflags) operator(=) map<delimiter({) string<delimiter(")content(static-runtime)delimiter(")> delimiter(})>

ident(package)operator(.)ident(files) operator(=)
map<delimiter({)
  ident(matchfiles)operator(()string<delimiter(")content(fftw3/api/*.c)delimiter(")>operator(\))operator(,)
  ident(matchfiles)operator(()string<delimiter(")content(fftw3/reodft/*.c)delimiter(")>operator(\))operator(,)
  ident(matchfiles)operator(()string<delimiter(")content(fftw3/kernel/*.c)delimiter(")>operator(\))operator(,)
  ident(matchfiles)operator(()string<delimiter(")content(fftw3/dft/*.c)delimiter(")>operator(,) string<delimiter(")content(fftw3/dft/codelets/*.c)delimiter(")>operator(,) string<delimiter(")content(fftw3/dft/codelets/inplace/*.c)delimiter(")>operator(,) string<delimiter(")content(fftw3/dft/codelets/standard/*.c)delimiter(")>operator(\))operator(,)
  ident(matchfiles)operator(()string<delimiter(")content(fftw3/rdft/*.c)delimiter(")>operator(,) string<delimiter(")content(fftw3/rdft/codelets/*.c)delimiter(")>operator(,) string<delimiter(")content(fftw3/rdft/codelets/hc2r/*.c)delimiter(")>operator(,) string<delimiter(")content(fftw3/rdft/codelets/r2hc/*.c)delimiter(")>operator(,) string<delimiter(")content(fftw3/rdft/codelets/r2r/*.c)delimiter(")>operator(\))operator(,)
  string<delimiter(")content(process/im_fft.cpp)delimiter(")>
delimiter(})>
ident(fixPackagePath)operator(()ident(package)operator(.)ident(files)operator(\))

ident(package)operator(.)ident(includepaths) operator(=) map<delimiter({) string<delimiter(")content(../include)delimiter(")>operator(,) string<delimiter(")content(fftw3/kernel)delimiter(")>operator(,) string<delimiter(")content(fftw3/dft)delimiter(")>operator(,) string<delimiter(")content(fftw3/rdft)delimiter(")>operator(,) string<delimiter(")content(fftw3/api)delimiter(")>operator(,) 
                         string<delimiter(")content(fftw3/reodft)delimiter(")>operator(,) string<delimiter(")content(fftw3/rdft/codelets)delimiter(")>operator(,) string<delimiter(")content(fftw3/dft/codelets)delimiter(")> delimiter(})>
ident(package)operator(.)ident(defines) operator(=) map<delimiter({) string<delimiter(")content(USE_FFTW3)delimiter(")> delimiter(})>

keyword(if) operator(()ident(options)operator(.)ident(os) operator(=)operator(=) string<delimiter(")content(windows)delimiter(")>operator(\)) keyword(then)
  keyword(if) operator(()ident(options)operator(.)ident(target) operator(=)operator(=) string<delimiter(")content(gnu)delimiter(")>operator(\)) keyword(then)
    ident(tinsert)operator(()ident(package)operator(.)ident(defines)operator(,) string<delimiter(")content(HAVE_UINTPTR_T)delimiter(")>operator(\))
  keyword(end)
keyword(end)

comment(---------------------------------------------------------------------)

ident(package) operator(=) ident(newpackage)operator(()operator(\))
ident(package)operator(.)ident(name) operator(=) string<delimiter(")content(imlua51)delimiter(")>
ident(package)operator(.)ident(target) operator(=) ident(package)operator(.)ident(name)
ident(package)operator(.)ident(objdir) operator(=) string<delimiter(")content(../obj/)delimiter(")>operator(.)operator(.)ident(package)operator(.)ident(name)
ident(package)operator(.)ident(language) operator(=) string<delimiter(")content(c++)delimiter(")>
ident(package)operator(.)ident(kind) operator(=) string<delimiter(")content(lib)delimiter(")>
ident(package)operator(.)ident(buildflags) operator(=) map<delimiter({) string<delimiter(")content(static-runtime)delimiter(")> delimiter(})>

ident(package)operator(.)ident(files) operator(=)
map<delimiter({)
  string<delimiter(")content(lua5/imlua.c)delimiter(")>operator(,) string<delimiter(")content(lua5/imlua_aux.c)delimiter(")>operator(,) string<delimiter(")content(lua5/imlua_convert.c)delimiter(")>operator(,) string<delimiter(")content(lua5/imlua_file.c)delimiter(")>operator(,) 
  string<delimiter(")content(lua5/imlua_image.c)delimiter(")>operator(,) string<delimiter(")content(lua5/imlua_palette.c)delimiter(")>operator(,) string<delimiter(")content(lua5/imlua_util.c)delimiter(")>
delimiter(})>
ident(fixPackagePath)operator(()ident(package)operator(.)ident(files)operator(\))

ident(package)operator(.)ident(includepaths) operator(=) map<delimiter({) string<delimiter(")content(../include)delimiter(")>operator(,) string<delimiter(")content(lua5)delimiter(")>operator(,) string<delimiter(")content($(LUA51\)/include)delimiter(")> delimiter(})>

comment(---------------------------------------------------------------------)

ident(package) operator(=) ident(newpackage)operator(()operator(\))
ident(package)operator(.)ident(name) operator(=) string<delimiter(")content(imlua_cd51)delimiter(")>
ident(package)operator(.)ident(target) operator(=) ident(package)operator(.)ident(name)
ident(package)operator(.)ident(objdir) operator(=) string<delimiter(")content(../obj/)delimiter(")>operator(.)operator(.)ident(package)operator(.)ident(name)
ident(package)operator(.)ident(language) operator(=) string<delimiter(")content(c++)delimiter(")>
ident(package)operator(.)ident(kind) operator(=) string<delimiter(")content(lib)delimiter(")>
ident(package)operator(.)ident(buildflags) operator(=) map<delimiter({) string<delimiter(")content(static-runtime)delimiter(")> delimiter(})>

ident(package)operator(.)ident(files) operator(=)
map<delimiter({)
  string<delimiter(")content(lua5/imlua_cd.c)delimiter(")>
delimiter(})>
ident(fixPackagePath)operator(()ident(package)operator(.)ident(files)operator(\))

ident(package)operator(.)ident(includepaths) operator(=) map<delimiter({) string<delimiter(")content(../include)delimiter(")>operator(,) string<delimiter(")content(lua5)delimiter(")>operator(,) string<delimiter(")content($(LUA51\)/include)delimiter(")>operator(,) string<delimiter(")content($(CD\)/include)delimiter(")> delimiter(})>

comment(---------------------------------------------------------------------)

ident(package) operator(=) ident(newpackage)operator(()operator(\))
ident(package)operator(.)ident(name) operator(=) string<delimiter(")content(imlua_process51)delimiter(")>
ident(package)operator(.)ident(target) operator(=) ident(package)operator(.)ident(name)
ident(package)operator(.)ident(objdir) operator(=) string<delimiter(")content(../obj/)delimiter(")>operator(.)operator(.)ident(package)operator(.)ident(name)
ident(package)operator(.)ident(language) operator(=) string<delimiter(")content(c++)delimiter(")>
ident(package)operator(.)ident(kind) operator(=) string<delimiter(")content(lib)delimiter(")>
ident(package)operator(.)ident(buildflags) operator(=) map<delimiter({) string<delimiter(")content(static-runtime)delimiter(")> delimiter(})>

ident(package)operator(.)ident(files) operator(=)
map<delimiter({)
  string<delimiter(")content(lua5/imlua_process.c)delimiter(")>
delimiter(})>
ident(fixPackagePath)operator(()ident(package)operator(.)ident(files)operator(\))

ident(package)operator(.)ident(includepaths) operator(=) map<delimiter({) string<delimiter(")content(../include)delimiter(")>operator(,) string<delimiter(")content(lua5)delimiter(")>operator(,) string<delimiter(")content($(LUA51\)/include)delimiter(")> delimiter(})>

comment(---------------------------------------------------------------------)

ident(package) operator(=) ident(newpackage)operator(()operator(\))
ident(package)operator(.)ident(name) operator(=) string<delimiter(")content(imlua_capture51)delimiter(")>
ident(package)operator(.)ident(target) operator(=) ident(package)operator(.)ident(name)
ident(package)operator(.)ident(objdir) operator(=) string<delimiter(")content(../obj/)delimiter(")>operator(.)operator(.)ident(package)operator(.)ident(name)
ident(package)operator(.)ident(language) operator(=) string<delimiter(")content(c++)delimiter(")>
ident(package)operator(.)ident(kind) operator(=) string<delimiter(")content(lib)delimiter(")>
ident(package)operator(.)ident(buildflags) operator(=) map<delimiter({) string<delimiter(")content(static-runtime)delimiter(")> delimiter(})>

ident(package)operator(.)ident(files) operator(=)
map<delimiter({)
  string<delimiter(")content(lua5/imlua_capture.c)delimiter(")>
delimiter(})>
ident(fixPackagePath)operator(()ident(package)operator(.)ident(files)operator(\))

ident(package)operator(.)ident(includepaths) operator(=) map<delimiter({) string<delimiter(")content(../include)delimiter(")>operator(,) string<delimiter(")content(lua5)delimiter(")>operator(,) string<delimiter(")content($(LUA51\)/include)delimiter(")> delimiter(})>

comment(---------------------------------------------------------------------)

ident(package) operator(=) ident(newpackage)operator(()operator(\))
ident(package)operator(.)ident(name) operator(=) string<delimiter(")content(imlua_fftw51)delimiter(")>
ident(package)operator(.)ident(target) operator(=) ident(package)operator(.)ident(name)
ident(package)operator(.)ident(objdir) operator(=) string<delimiter(")content(../obj/)delimiter(")>operator(.)operator(.)ident(package)operator(.)ident(name)
ident(package)operator(.)ident(language) operator(=) string<delimiter(")content(c++)delimiter(")>
ident(package)operator(.)ident(kind) operator(=) string<delimiter(")content(lib)delimiter(")>
ident(package)operator(.)ident(buildflags) operator(=) map<delimiter({) string<delimiter(")content(static-runtime)delimiter(")> delimiter(})>

ident(package)operator(.)ident(files) operator(=)
map<delimiter({)
  string<delimiter(")content(lua5/imlua_fftw.c)delimiter(")>
delimiter(})>
ident(fixPackagePath)operator(()ident(package)operator(.)ident(files)operator(\))

ident(package)operator(.)ident(includepaths) operator(=) map<delimiter({) string<delimiter(")content(../include)delimiter(")>operator(,) string<delimiter(")content(lua5)delimiter(")>operator(,) string<delimiter(")content($(LUA51\)/include)delimiter(")> delimiter(})>

comment(---------------------------------------------------------------------)
comment(----------------------------------------------------)
comment(-- The main porpouse of this file is to build linux gcc makefiles.)
comment(-- Must have Premake version 3 installed.)
comment(-- Original Premake was changed to remove some parameters and add others.)
comment(-- Default parameters:)
comment(--   premake3s --target gnu --os linux)
comment(-- But it can build windows gcc makefiles, and visual studio projects.)
comment(--   premake3s --target gnu --os windows)
comment(--   premake3s --target gnu --os macosx)
comment(--   premake3s --target vs6)
comment(--   premake3s --target vs2002)
comment(--   premake3s --target vs2003)
comment(--   premake3s --target vs2005)
comment(-- In Linux the generated makefiles will not correctly build libraries in 64-bits.)
comment(--              must add "-m64 -fPIC" flags)
comment(----------------------------------------------------)

keyword(if) operator(()keyword(not) ident(options)operator(.)ident(target)operator(\)) keyword(then) 
  ident(options)operator(.)ident(target) operator(=) string<delimiter(")content(gnu)delimiter(")>
keyword(end)

keyword(if) operator(()keyword(not) ident(options)operator(.)ident(os)operator(\)) keyword(then)
  keyword(if) operator(()ident(options)operator(.)ident(target) operator(~)operator(=) string<delimiter(")content(gnu)delimiter(")>operator(\)) keyword(then)
    ident(options)operator(.)ident(os) operator(=) string<delimiter(")content(windows)delimiter(")>
  keyword(else)
    ident(options)operator(.)ident(os) operator(=) string<delimiter(")content(linux)delimiter(")>
  keyword(end)
keyword(end)

keyword(function) function(fixPackagePath)operator(()ident(package_files)operator(\))
  keyword(if) operator(()ident(options)operator(.)ident(os) operator(~)operator(=) string<delimiter(")content(linux)delimiter(")>operator(\)) keyword(then)
    keyword(for) ident(i)operator(,) ident(file) keyword(in) ident(package_files) keyword(do) 
      ident(package_files)operator([)ident(i)operator(]) operator(=) string<delimiter(")content(../src/)delimiter(")>operator(.)operator(.)ident(file) 
    keyword(end)
  keyword(end)
keyword(end)

keyword(function) function(tremove)operator(()ident(t)operator(,) ident(value)operator(\))
  keyword(local) local_variable(index) operator(=) integer(-1)
  keyword(function) function(f)operator(()ident(i)operator(,) ident(v)operator(\))
    keyword(if) operator(()ident(v) operator(=)operator(=) ident(value)operator(\)) keyword(then)
      ident(index) operator(=) ident(i)
    keyword(end)
  keyword(end)
  ident(table)operator(.)ident(foreachi)operator(()ident(t)operator(,) ident(f)operator(\))
  keyword(if) operator(()ident(index) operator(~)operator(=) integer(-1)operator(\)) keyword(then)
    ident(table)operator(.)ident(remove)operator(()ident(t)operator(,) ident(index)operator(\))
  keyword(end)
keyword(end)

comment(----------------------------------------------------)

ident(project)operator(.)ident(name) operator(=) string<delimiter(")content(iup)delimiter(")>
ident(project)operator(.)ident(bindir) operator(=) string<delimiter(")content(../bin)delimiter(")>
ident(project)operator(.)ident(libdir) operator(=) string<delimiter(")content(../lib)delimiter(")>

keyword(if) operator(()ident(options)operator(.)ident(os) operator(~)operator(=) string<delimiter(")content(linux)delimiter(")>operator(\)) keyword(then)
  keyword(if) operator(()ident(options)operator(.)ident(os) operator(=)operator(=) string<delimiter(")content(macosx)delimiter(")>operator(\)) keyword(then)
	ident(project)operator(.)ident(path) operator(=) string<delimiter(")content(../mak.macosx)delimiter(")>
  keyword(else)
	ident(project)operator(.)ident(path) operator(=) string<delimiter(")content(../mak.)delimiter(")>operator(.)operator(.)ident(options)operator(.)ident(target)
  keyword(end)
keyword(end)

comment(----------------------------------------------------)

ident(package) operator(=) ident(newpackage)operator(()operator(\))
ident(package)operator(.)ident(name) operator(=) string<delimiter(")content(iup)delimiter(")>
ident(package)operator(.)ident(target) operator(=) ident(package)operator(.)ident(name)
ident(package)operator(.)ident(objdir) operator(=) string<delimiter(")content(../obj/)delimiter(")>operator(.)operator(.)ident(package)operator(.)ident(name)
ident(package)operator(.)ident(language) operator(=) string<delimiter(")content(c++)delimiter(")>
ident(package)operator(.)ident(kind) operator(=) string<delimiter(")content(lib)delimiter(")>
ident(package)operator(.)ident(buildflags) operator(=) map<delimiter({) string<delimiter(")content(static-runtime)delimiter(")> delimiter(})>

ident(package)operator(.)ident(files) operator(=)
map<delimiter({)
  ident(matchfiles)operator(()string<delimiter(")content(*.c)delimiter(")>operator(\))
delimiter(})>

ident(package)operator(.)ident(includepaths) operator(=) map<delimiter({) string<delimiter(")content(.)delimiter(")>operator(,) string<delimiter(")content(../include)delimiter(")> delimiter(})>

keyword(if) operator(()ident(options)operator(.)ident(os) operator(=)operator(=) string<delimiter(")content(windows)delimiter(")>operator(\)) keyword(then)
  ident(tinsert)operator(()ident(package)operator(.)ident(files)operator(,) ident(matchfiles)operator(()string<delimiter(")content(win/*.c)delimiter(")>operator(\))operator(\))
  ident(tinsert)operator(()ident(package)operator(.)ident(includepaths)operator(,) map<delimiter({)string<delimiter(")content(win)delimiter(")>delimiter(})>operator(\))
  ident(package)operator(.)ident(defines) operator(=) map<delimiter({)string<delimiter(")content(_WIN32_WINNT=0x0400)delimiter(")>delimiter(})>
keyword(else)
  ident(tinsert)operator(()ident(package)operator(.)ident(files)operator(,) ident(matchfiles)operator(()string<delimiter(")content(mot/*.c)delimiter(")>operator(\))operator(\))
  ident(tremove)operator(()ident(package)operator(.)ident(files)operator([)integer(2)operator(])operator(,) string<delimiter(")content(mot/ComboBox1.c)delimiter(")>operator(\))
  ident(tinsert)operator(()ident(package)operator(.)ident(includepaths)operator(,) map<delimiter({)string<delimiter(")content(mot)delimiter(")>operator(,) string<delimiter(")content(/usr/X11R6/include)delimiter(")>delimiter(})>operator(\))
  ident(package)operator(.)ident(defines) operator(=) map<delimiter({)string<delimiter(")content(LINUX)delimiter(")>delimiter(})>
keyword(end)

ident(fixPackagePath)operator(()ident(package)operator(.)ident(files)operator(\))

comment(----------------------------------------------------)
comment(----------------------------------------------------)
comment(-- The main porpouse of this file is to build linux gcc makefiles.)
comment(-- Must have Premake version 3 installed.)
comment(-- Original Premake was changed to remove some parameters and add others.)
comment(-- Default parameters:)
comment(--   premake3s --target gnu --os linux)
comment(-- But it can build windows gcc makefiles, and visual studio projects.)
comment(--   premake3s --target gnu --os windows)
comment(--   premake3s --target gnu --os macosx)
comment(--   premake3s --target vs6)
comment(--   premake3s --target vs2002)
comment(--   premake3s --target vs2003)
comment(--   premake3s --target vs2005)
comment(-- In Linux the generated makefiles will not correctly build libraries in 64-bits.)
comment(--              must add "-m64 -fPIC" flags)
comment(----------------------------------------------------)

keyword(if) operator(()keyword(not) ident(options)operator(.)ident(target)operator(\)) keyword(then) 
  ident(options)operator(.)ident(target) operator(=) string<delimiter(")content(gnu)delimiter(")>
keyword(end)

keyword(if) operator(()keyword(not) ident(options)operator(.)ident(os)operator(\)) keyword(then)
  keyword(if) operator(()ident(options)operator(.)ident(target) operator(~)operator(=) string<delimiter(")content(gnu)delimiter(")>operator(\)) keyword(then)
    ident(options)operator(.)ident(os) operator(=) string<delimiter(")content(windows)delimiter(")>
  keyword(else)
    ident(options)operator(.)ident(os) operator(=) string<delimiter(")content(linux)delimiter(")>
  keyword(end)
keyword(end)

keyword(function) function(fixPackagePath)operator(()ident(package_files)operator(\))
  keyword(if) operator(()ident(options)operator(.)ident(os) operator(~)operator(=) string<delimiter(")content(linux)delimiter(")>operator(\)) keyword(then)
    keyword(for) ident(i)operator(,) ident(file) keyword(in) ident(package_files) keyword(do) 
      ident(package_files)operator([)ident(i)operator(]) operator(=) string<delimiter(")content(../src/)delimiter(")>operator(.)operator(.)ident(file) 
    keyword(end)
  keyword(end)
keyword(end)

comment(----------------------------------------------------)

ident(project)operator(.)ident(name) operator(=) string<delimiter(")content(iup)delimiter(")>
ident(project)operator(.)ident(bindir) operator(=) string<delimiter(")content(../bin)delimiter(")>
ident(project)operator(.)ident(libdir) operator(=) string<delimiter(")content(../lib)delimiter(")>

keyword(if) operator(()ident(options)operator(.)ident(os) operator(~)operator(=) string<delimiter(")content(linux)delimiter(")>operator(\)) keyword(then)
  keyword(if) operator(()ident(options)operator(.)ident(os) operator(=)operator(=) string<delimiter(")content(macosx)delimiter(")>operator(\)) keyword(then)
	ident(project)operator(.)ident(path) operator(=) string<delimiter(")content(../mak.macosx)delimiter(")>
  keyword(else)
	ident(project)operator(.)ident(path) operator(=) string<delimiter(")content(../mak.)delimiter(")>operator(.)operator(.)ident(options)operator(.)ident(target)
  keyword(end)
keyword(end)

comment(----------------------------------------------------)

ident(package) operator(=) ident(newpackage)operator(()operator(\))
ident(package)operator(.)ident(name) operator(=) string<delimiter(")content(iupcontrols)delimiter(")>
ident(package)operator(.)ident(target) operator(=) ident(package)operator(.)ident(name)
ident(package)operator(.)ident(objdir) operator(=) string<delimiter(")content(../obj/)delimiter(")>operator(.)operator(.)ident(package)operator(.)ident(name)
ident(package)operator(.)ident(language) operator(=) string<delimiter(")content(c++)delimiter(")>
ident(package)operator(.)ident(kind) operator(=) string<delimiter(")content(lib)delimiter(")>
ident(package)operator(.)ident(buildflags) operator(=) map<delimiter({) string<delimiter(")content(static-runtime)delimiter(")> delimiter(})>

ident(package)operator(.)ident(files) operator(=)
map<delimiter({)
  ident(matchfiles)operator(()string<delimiter(")content(*.c)delimiter(")>operator(\))operator(,)
  ident(matchfiles)operator(()string<delimiter(")content(mask/*.c)delimiter(")>operator(\))operator(,)
  ident(matchfiles)operator(()string<delimiter(")content(matrix/*.c)delimiter(")>operator(\))operator(,)
  ident(matchfiles)operator(()string<delimiter(")content(tree/*.c)delimiter(")>operator(\))operator(,)
  ident(matchfiles)operator(()string<delimiter(")content(color/*.c)delimiter(")>operator(\))
delimiter(})>

ident(package)operator(.)ident(includepaths) operator(=) map<delimiter({) string<delimiter(")content(.)delimiter(")>operator(,) string<delimiter(")content(../include)delimiter(")>operator(,) string<delimiter(")content(../src)delimiter(")>operator(,) string<delimiter(")content($(CD\)/include)delimiter(")> delimiter(})>

keyword(if) operator(()ident(options)operator(.)ident(os) operator(=)operator(=) string<delimiter(")content(linux)delimiter(")>operator(\)) keyword(then)
  ident(package)operator(.)ident(defines) operator(=) map<delimiter({) string<delimiter(")content(_MOTIF_)delimiter(")> delimiter(})>
  ident(tinsert)operator(()ident(package)operator(.)ident(includepaths)operator(,) map<delimiter({)string<delimiter(")content(/usr/X11R6/include)delimiter(")>delimiter(})>operator(\))
keyword(end)

ident(fixPackagePath)operator(()ident(package)operator(.)ident(files)operator(\))

comment(----------------------------------------------------)
comment(----------------------------------------------------)
comment(-- The main porpouse of this file is to build linux gcc makefiles.)
comment(-- Must have Premake version 3 installed.)
comment(-- Original Premake was changed to remove some parameters and add others.)
comment(-- Default parameters:)
comment(--   premake3s --target gnu --os linux)
comment(-- But it can build windows gcc makefiles, and visual studio projects.)
comment(--   premake3s --target gnu --os windows)
comment(--   premake3s --target gnu --os macosx)
comment(--   premake3s --target vs6)
comment(--   premake3s --target vs2002)
comment(--   premake3s --target vs2003)
comment(--   premake3s --target vs2005)
comment(-- In Linux the generated makefiles will not correctly build libraries in 64-bits.)
comment(--              must add "-m64 -fPIC" flags)
comment(----------------------------------------------------)

keyword(if) operator(()keyword(not) ident(options)operator(.)ident(target)operator(\)) keyword(then) 
  ident(options)operator(.)ident(target) operator(=) string<delimiter(")content(gnu)delimiter(")>
keyword(end)

keyword(if) operator(()keyword(not) ident(options)operator(.)ident(os)operator(\)) keyword(then)
  keyword(if) operator(()ident(options)operator(.)ident(target) operator(~)operator(=) string<delimiter(")content(gnu)delimiter(")>operator(\)) keyword(then)
    ident(options)operator(.)ident(os) operator(=) string<delimiter(")content(windows)delimiter(")>
  keyword(else)
    ident(options)operator(.)ident(os) operator(=) string<delimiter(")content(linux)delimiter(")>
  keyword(end)
keyword(end)

keyword(function) function(fixPackagePath)operator(()ident(package_files)operator(\))
  keyword(if) operator(()ident(options)operator(.)ident(os) operator(~)operator(=) string<delimiter(")content(linux)delimiter(")>operator(\)) keyword(then)
    keyword(for) ident(i)operator(,) ident(file) keyword(in) ident(package_files) keyword(do) 
      ident(package_files)operator([)ident(i)operator(]) operator(=) string<delimiter(")content(../src/)delimiter(")>operator(.)operator(.)ident(file) 
    keyword(end)
  keyword(end)
keyword(end)

comment(----------------------------------------------------)

ident(project)operator(.)ident(name) operator(=) string<delimiter(")content(iup)delimiter(")>
ident(project)operator(.)ident(bindir) operator(=) string<delimiter(")content(../bin)delimiter(")>
ident(project)operator(.)ident(libdir) operator(=) string<delimiter(")content(../lib)delimiter(")>

keyword(if) operator(()ident(options)operator(.)ident(os) operator(~)operator(=) string<delimiter(")content(linux)delimiter(")>operator(\)) keyword(then)
  keyword(if) operator(()ident(options)operator(.)ident(os) operator(=)operator(=) string<delimiter(")content(macosx)delimiter(")>operator(\)) keyword(then)
	ident(project)operator(.)ident(path) operator(=) string<delimiter(")content(../mak.macosx)delimiter(")>
  keyword(else)
	ident(project)operator(.)ident(path) operator(=) string<delimiter(")content(../mak.)delimiter(")>operator(.)operator(.)ident(options)operator(.)ident(target)
  keyword(end)
keyword(end)

comment(----------------------------------------------------)

ident(package) operator(=) ident(newpackage)operator(()operator(\))
ident(package)operator(.)ident(name) operator(=) string<delimiter(")content(iupgl)delimiter(")>
ident(package)operator(.)ident(target) operator(=) ident(package)operator(.)ident(name)
ident(package)operator(.)ident(objdir) operator(=) string<delimiter(")content(../obj/)delimiter(")>operator(.)operator(.)ident(package)operator(.)ident(name)
ident(package)operator(.)ident(language) operator(=) string<delimiter(")content(c++)delimiter(")>
ident(package)operator(.)ident(kind) operator(=) string<delimiter(")content(lib)delimiter(")>
ident(package)operator(.)ident(buildflags) operator(=) map<delimiter({) string<delimiter(")content(static-runtime)delimiter(")> delimiter(})>

ident(package)operator(.)ident(includepaths) operator(=) map<delimiter({) string<delimiter(")content(.)delimiter(")>operator(,) string<delimiter(")content(../include)delimiter(")> delimiter(})>

keyword(if) operator(()ident(options)operator(.)ident(os) operator(=)operator(=) string<delimiter(")content(windows)delimiter(")>operator(\)) keyword(then)
  ident(package)operator(.)ident(files) operator(=) map<delimiter({) string<delimiter(")content(iupglw.c)delimiter(")> delimiter(})>
keyword(else)
  ident(package)operator(.)ident(files) operator(=) map<delimiter({) string<delimiter(")content(iupglx.c)delimiter(")>operator(,) string<delimiter(")content(GL/GLwMDrawA.c)delimiter(")> delimiter(})>
  ident(tinsert)operator(()ident(package)operator(.)ident(includepaths)operator(,) map<delimiter({)string<delimiter(")content(/usr/X11R6/include)delimiter(")>delimiter(})>operator(\))
keyword(end)

ident(fixPackagePath)operator(()ident(package)operator(.)ident(files)operator(\))

comment(----------------------------------------------------)
comment(----------------------------------------------------)
comment(-- The main porpouse of this file is to build linux gcc makefiles.)
comment(-- Must have Premake version 3 installed.)
comment(-- Original Premake was changed to remove some parameters and add others.)
comment(-- Default parameters:)
comment(--   premake3s --target gnu --os linux)
comment(-- But it can build windows gcc makefiles, and visual studio projects.)
comment(--   premake3s --target gnu --os windows)
comment(--   premake3s --target gnu --os macosx)
comment(--   premake3s --target vs6)
comment(--   premake3s --target vs2002)
comment(--   premake3s --target vs2003)
comment(--   premake3s --target vs2005)
comment(-- In Linux the generated makefiles will not correctly build libraries in 64-bits.)
comment(--              must add "-m64 -fPIC" flags)
comment(----------------------------------------------------)

keyword(if) operator(()keyword(not) ident(options)operator(.)ident(target)operator(\)) keyword(then) 
  ident(options)operator(.)ident(target) operator(=) string<delimiter(")content(gnu)delimiter(")>
keyword(end)

keyword(if) operator(()keyword(not) ident(options)operator(.)ident(os)operator(\)) keyword(then)
  keyword(if) operator(()ident(options)operator(.)ident(target) operator(~)operator(=) string<delimiter(")content(gnu)delimiter(")>operator(\)) keyword(then)
    ident(options)operator(.)ident(os) operator(=) string<delimiter(")content(windows)delimiter(")>
  keyword(else)
    ident(options)operator(.)ident(os) operator(=) string<delimiter(")content(linux)delimiter(")>
  keyword(end)
keyword(end)

keyword(function) function(fixPackagePath)operator(()ident(package_files)operator(\))
  keyword(if) operator(()ident(options)operator(.)ident(os) operator(~)operator(=) string<delimiter(")content(linux)delimiter(")>operator(\)) keyword(then)
    keyword(for) ident(i)operator(,) ident(file) keyword(in) ident(package_files) keyword(do) 
      ident(package_files)operator([)ident(i)operator(]) operator(=) string<delimiter(")content(../src/)delimiter(")>operator(.)operator(.)ident(file) 
    keyword(end)
  keyword(end)
keyword(end)

comment(----------------------------------------------------)

ident(project)operator(.)ident(name) operator(=) string<delimiter(")content(iup)delimiter(")>
ident(project)operator(.)ident(bindir) operator(=) string<delimiter(")content(../bin)delimiter(")>
ident(project)operator(.)ident(libdir) operator(=) string<delimiter(")content(../lib)delimiter(")>

keyword(if) operator(()ident(options)operator(.)ident(os) operator(~)operator(=) string<delimiter(")content(linux)delimiter(")>operator(\)) keyword(then)
  keyword(if) operator(()ident(options)operator(.)ident(os) operator(=)operator(=) string<delimiter(")content(macosx)delimiter(")>operator(\)) keyword(then)
	ident(project)operator(.)ident(path) operator(=) string<delimiter(")content(../mak.macosx)delimiter(")>
  keyword(else)
	ident(project)operator(.)ident(path) operator(=) string<delimiter(")content(../mak.)delimiter(")>operator(.)operator(.)ident(options)operator(.)ident(target)
  keyword(end)
keyword(end)

comment(----------------------------------------------------)

ident(package) operator(=) ident(newpackage)operator(()operator(\))
ident(package)operator(.)ident(name) operator(=) string<delimiter(")content(iupim)delimiter(")>
ident(package)operator(.)ident(target) operator(=) ident(package)operator(.)ident(name)
ident(package)operator(.)ident(objdir) operator(=) string<delimiter(")content(../obj/)delimiter(")>operator(.)operator(.)ident(package)operator(.)ident(name)
ident(package)operator(.)ident(language) operator(=) string<delimiter(")content(c++)delimiter(")>
ident(package)operator(.)ident(kind) operator(=) string<delimiter(")content(lib)delimiter(")>
ident(package)operator(.)ident(buildflags) operator(=) map<delimiter({) string<delimiter(")content(static-runtime)delimiter(")> delimiter(})>

ident(package)operator(.)ident(includepaths) operator(=) map<delimiter({) string<delimiter(")content(.)delimiter(")>operator(,) string<delimiter(")content(../include)delimiter(")>operator(,) string<delimiter(")content($(IM\)/include)delimiter(")> delimiter(})>

ident(package)operator(.)ident(files) operator(=) map<delimiter({) string<delimiter(")content(iupim.c)delimiter(")> delimiter(})>

ident(fixPackagePath)operator(()ident(package)operator(.)ident(files)operator(\))

comment(----------------------------------------------------)
comment(----------------------------------------------------)
comment(-- The main porpouse of this file is to build linux gcc makefiles.)
comment(-- Must have Premake version 3 installed.)
comment(-- Original Premake was changed to remove some parameters and add others.)
comment(-- Default parameters:)
comment(--   premake3s --target gnu --os linux)
comment(-- But it can build windows gcc makefiles, and visual studio projects.)
comment(--   premake3s --target gnu --os windows)
comment(--   premake3s --target gnu --os macosx)
comment(--   premake3s --target vs6)
comment(--   premake3s --target vs2002)
comment(--   premake3s --target vs2003)
comment(--   premake3s --target vs2005)
comment(-- In Linux the generated makefiles will not correctly build libraries in 64-bits.)
comment(--              must add "-m64 -fPIC" flags)
comment(----------------------------------------------------)

keyword(if) operator(()keyword(not) ident(options)operator(.)ident(target)operator(\)) keyword(then) 
  ident(options)operator(.)ident(target) operator(=) string<delimiter(")content(gnu)delimiter(")>
keyword(end)

keyword(if) operator(()keyword(not) ident(options)operator(.)ident(os)operator(\)) keyword(then)
  keyword(if) operator(()ident(options)operator(.)ident(target) operator(~)operator(=) string<delimiter(")content(gnu)delimiter(")>operator(\)) keyword(then)
    ident(options)operator(.)ident(os) operator(=) string<delimiter(")content(windows)delimiter(")>
  keyword(else)
    ident(options)operator(.)ident(os) operator(=) string<delimiter(")content(linux)delimiter(")>
  keyword(end)
keyword(end)

keyword(function) function(fixPackagePath)operator(()ident(package_files)operator(\))
  keyword(if) operator(()ident(options)operator(.)ident(os) operator(~)operator(=) string<delimiter(")content(linux)delimiter(")>operator(\)) keyword(then)
    keyword(for) ident(i)operator(,) ident(file) keyword(in) ident(package_files) keyword(do) 
      ident(package_files)operator([)ident(i)operator(]) operator(=) string<delimiter(")content(../src/)delimiter(")>operator(.)operator(.)ident(file) 
    keyword(end)
  keyword(end)
keyword(end)

comment(----------------------------------------------------)

ident(project)operator(.)ident(name) operator(=) string<delimiter(")content(iup)delimiter(")>
ident(project)operator(.)ident(bindir) operator(=) string<delimiter(")content(../bin)delimiter(")>
ident(project)operator(.)ident(libdir) operator(=) string<delimiter(")content(../lib)delimiter(")>

keyword(if) operator(()ident(options)operator(.)ident(os) operator(~)operator(=) string<delimiter(")content(linux)delimiter(")>operator(\)) keyword(then)
  keyword(if) operator(()ident(options)operator(.)ident(os) operator(=)operator(=) string<delimiter(")content(macosx)delimiter(")>operator(\)) keyword(then)
	ident(project)operator(.)ident(path) operator(=) string<delimiter(")content(../mak.macosx)delimiter(")>
  keyword(else)
	ident(project)operator(.)ident(path) operator(=) string<delimiter(")content(../mak.)delimiter(")>operator(.)operator(.)ident(options)operator(.)ident(target)
  keyword(end)
keyword(end)

comment(----------------------------------------------------)

ident(package) operator(=) ident(newpackage)operator(()operator(\))
ident(package)operator(.)ident(name) operator(=) string<delimiter(")content(ledc)delimiter(")>
ident(package)operator(.)ident(target) operator(=) ident(package)operator(.)ident(name)
ident(package)operator(.)ident(objdir) operator(=) string<delimiter(")content(../obj/)delimiter(")>operator(.)operator(.)ident(package)operator(.)ident(name)
ident(package)operator(.)ident(language) operator(=) string<delimiter(")content(c++)delimiter(")>
ident(package)operator(.)ident(kind) operator(=) string<delimiter(")content(exe)delimiter(")>

ident(package)operator(.)ident(files) operator(=)
map<delimiter({)
  string<delimiter(")content(lex.yy.c)delimiter(")>operator(,) string<delimiter(")content(y.tab.c)delimiter(")>operator(,) string<delimiter(")content(main.c)delimiter(")>
delimiter(})>

ident(package)operator(.)ident(includepaths) operator(=) map<delimiter({) string<delimiter(")content(.)delimiter(")> delimiter(})>

ident(fixPackagePath)operator(()ident(package)operator(.)ident(files)operator(\))

comment(----------------------------------------------------)
comment(-- Utilities)

keyword(function) function(printvars)operator(()operator(\))
  keyword(local) local_variable(n)operator(,)local_variable(v) operator(=) ident(nextvar)operator(()predefined_constant(nil)operator(\))
  predefined(print)operator(()string<delimiter(")content(--printvars Start--)delimiter(")>operator(\))
  keyword(while) ident(n) operator(~)operator(=) predefined_constant(nil) keyword(do)
    predefined(print)operator(()predefined(tostring)operator(()ident(n)operator(\))operator(.)operator(.)string<delimiter(")content(=)delimiter(")>operator(.)operator(.)predefined(tostring)operator(()ident(v)operator(\))operator(\))
    ident(n)operator(,)ident(v) operator(=) ident(nextvar)operator(()ident(n)operator(\))
  keyword(end)
  predefined(print)operator(()string<delimiter(")content(--printvars End--)delimiter(")>operator(\))
keyword(end)

keyword(function) function(printtable)operator(()ident(t)operator(\))
  keyword(local) local_variable(n)operator(,)local_variable(v) operator(=) predefined(next)operator(()ident(t)operator(,) predefined_constant(nil)operator(\))
  predefined(print)operator(()string<delimiter(")content(--printtable Start--)delimiter(")>operator(\))
  keyword(while) ident(n) operator(~)operator(=) predefined_constant(nil) keyword(do)
    predefined(print)operator(()predefined(tostring)operator(()ident(n)operator(\))operator(.)operator(.)string<delimiter(")content(=)delimiter(")>operator(.)operator(.)predefined(tostring)operator(()ident(v)operator(\))operator(\))
    ident(n)operator(,)ident(v) operator(=) predefined(next)operator(()ident(t)operator(,) ident(n)operator(\))
  keyword(end)
  predefined(print)operator(()string<delimiter(")content(--printtable End--)delimiter(")>operator(\))
keyword(end)

keyword(function) function(print_version_info)operator(()operator(\))
  predefined(print)operator(()predefined(_VERSION) operator(.)operator(.) string<delimiter(")content( )delimiter(")> operator(.)operator(.) ident(iup)operator(.)predefined(_LUA)predefined(_COPYRIGHT)operator(\))
  keyword(if) operator(()ident(im)operator(\)) keyword(then) predefined(print)operator(()ident(im)operator(.)predefined(_VERSION) operator(.)operator(.) string<delimiter(")content( )delimiter(")> operator(.)operator(.) ident(im)operator(.)predefined(_COPYRIGHT)operator(\)) keyword(end)
  keyword(if) operator(()ident(cd) keyword(and) ident(cd)operator(.)predefined(_VERSION)operator(\)) keyword(then) predefined(print)operator(()ident(cd)operator(.)predefined(_VERSION) operator(.)operator(.) string<delimiter(")content( )delimiter(")> operator(.)operator(.) ident(cd)operator(.)predefined(_COPYRIGHT)operator(\)) keyword(end)
  predefined(print)operator(()ident(iup)operator(.)predefined(_VERSION) operator(.)operator(.) string<delimiter(")content( )delimiter(")> operator(.)operator(.) ident(iup)operator(.)predefined(_COPYRIGHT)operator(\))
  predefined(print)operator(()string<delimiter(")delimiter(")>operator(\))
  predefined(print)operator(()string<delimiter(")content(IUP Info)delimiter(")>operator(\))
  predefined(print)operator(()string<delimiter(")content(  System: )delimiter(")> operator(.)operator(.) ident(iup)operator(.)ident(GetGlobal)operator(()string<delimiter(")content(SYSTEM)delimiter(")>operator(\))operator(\))
  predefined(print)operator(()string<delimiter(")content(  System Version: )delimiter(")> operator(.)operator(.) ident(iup)operator(.)ident(GetGlobal)operator(()string<delimiter(")content(SYSTEMVERSION)delimiter(")>operator(\))operator(\))
  keyword(local) local_variable(mot) operator(=) ident(iup)operator(.)ident(GetGlobal)operator(()string<delimiter(")content(MOTIFVERSION)delimiter(")>operator(\))
  keyword(if) operator(()ident(mot)operator(\)) keyword(then) predefined(print)operator(()string<delimiter(")content(  Motif Version: )delimiter(")>operator(,) ident(mot)operator(\)) keyword(end)
  predefined(print)operator(()string<delimiter(")content(  Screen Size: )delimiter(")> operator(.)operator(.) ident(iup)operator(.)ident(GetGlobal)operator(()string<delimiter(")content(SCREENSIZE)delimiter(")>operator(\))operator(\))
  predefined(print)operator(()string<delimiter(")content(  Screen Depth: )delimiter(")> operator(.)operator(.) ident(iup)operator(.)ident(GetGlobal)operator(()string<delimiter(")content(SCREENDEPTH)delimiter(")>operator(\))operator(\))
  keyword(if) operator(()ident(iup)operator(.)ident(GL_VENDOR)operator(\)) keyword(then) predefined(print)operator(()string<delimiter(")content(  OpenGL Vendor: )delimiter(")> operator(.)operator(.) ident(iup)operator(.)ident(GL_VENDOR)operator(\)) keyword(end)
  keyword(if) operator(()ident(iup)operator(.)ident(GL_RENDERER)operator(\)) keyword(then) predefined(print)operator(()string<delimiter(")content(  OpenGL Renderer: )delimiter(")> operator(.)operator(.) ident(iup)operator(.)ident(GL_RENDERER)operator(\)) keyword(end)
  keyword(if) operator(()ident(iup)operator(.)ident(GL_VERSION)operator(\)) keyword(then) predefined(print)operator(()string<delimiter(")content(  OpenGL Version: )delimiter(")> operator(.)operator(.) ident(iup)operator(.)ident(GL_VERSION)operator(\)) keyword(end)
keyword(end)

comment(-- IUPLUA Full Application  )

ident(lastfile) operator(=) predefined_constant(nil) comment(-- Last file open)

ident(mulCommands) operator(=) ident(iupmultiline)map<delimiter({)key(expand)operator(=)ident(IUP_YES)operator(,) key(size)operator(=)string<delimiter(")content(200x120)delimiter(")>operator(,) key(font)operator(=)string<delimiter(")content(COURIER_NORMAL_10)delimiter(")>delimiter(})>   
ident(poslabel)    operator(=) ident(iuplabel)map<delimiter({)key(title)operator(=)string<delimiter(")content(0:0)delimiter(")>operator(,) key(size)operator(=)string<delimiter(")content(50x)delimiter(")>delimiter(})> 
ident(filelabel)   operator(=) ident(iuplabel)map<delimiter({)key(title)operator(=)string<delimiter(")delimiter(")>operator(,) key(size)operator(=)string<delimiter(")content(50x)delimiter(")>operator(,) key(expand)operator(=)string<delimiter(")content(HORIZONTAL)delimiter(")>delimiter(})> 

ident(mulCommands)operator(.)ident(caretcb) operator(=) keyword(function)operator((self, lin, col\))
   ident(poslabel)operator(.)ident(title) operator(=) ident(lin)operator(.)operator(.)string<delimiter(")content(:)delimiter(")>operator(.)operator(.)ident(col)
keyword(end)

ident(butExecute) operator(=) ident(iupbutton)map<delimiter({)key(size)operator(=)string<delimiter(")content(50x15)delimiter(")>operator(,) key(title) operator(=) string<delimiter(")content(Execute)delimiter(")>operator(,) key(action)operator(=)string<delimiter(")content(dostring(mulCommands.value\))delimiter(")>delimiter(})>
ident(butClearCommands) operator(=) ident(iupbutton)map<delimiter({)key(size)operator(=)string<delimiter(")content(50x15)delimiter(")>operator(,) key(title) operator(=) string<delimiter(")content(Clear)delimiter(")>operator(,) key(action) operator(=) string<delimiter(")content(mulCommands.value = ''  filelabel.title = ''  lastfile = nil)delimiter(")>delimiter(})>
ident(butLoadFile) operator(=) ident(iupbutton)map<delimiter({)key(size)operator(=)string<delimiter(")content(50x15)delimiter(")>operator(,) key(title) operator(=) string<delimiter(")content(Load...)delimiter(")>delimiter(})>
ident(butSaveasFile) operator(=) ident(iupbutton)map<delimiter({)key(size)operator(=)string<delimiter(")content(50x15)delimiter(")>operator(,) key(title) operator(=) string<delimiter(")content(Save As...)delimiter(")>delimiter(})>
ident(butSaveFile) operator(=) ident(iupbutton)map<delimiter({)key(size)operator(=)string<delimiter(")content(50x15)delimiter(")>operator(,) key(title) operator(=) string<delimiter(")content(Save)delimiter(")>delimiter(})>

keyword(function) ident(butSaveFile:)function(action)operator(()operator(\))
  keyword(if) operator(()ident(lastfile) operator(=)operator(=) predefined_constant(nil)operator(\)) keyword(then)
    ident(butSaveasFile)operator(:)ident(action)operator(()operator(\)) 
  keyword(else)
    ident(novoarq) operator(=) ident(openfile) operator(()ident(lastfile)operator(,) string<delimiter(")content(w+)delimiter(")>operator(\))
    keyword(if) operator(()ident(novoarq) operator(~)operator(=) predefined_constant(nil)operator(\)) keyword(then)
      ident(write) operator(()ident(novoarq)operator(,)ident(mulCommands)operator(.)ident(value)operator(\))
      ident(closefile) operator(()ident(novoarq)operator(\)) 
    keyword(else)
      predefined(error) operator(()string<delimiter(")content(Cannot Save file )delimiter(")>operator(.)operator(.)ident(filename)operator(\))
    keyword(end)
  keyword(end)
keyword(end)

keyword(function) ident(butSaveasFile:)function(action)operator(()operator(\))
  keyword(local) local_variable(filedlg) operator(=) ident(iupfiledlg)map<delimiter({)key(dialogtype) operator(=) string<delimiter(")content(SAVE)delimiter(")>operator(,) key(title) operator(=) string<delimiter(")content(Save File)delimiter(")>operator(,) key(filter) operator(=) string<delimiter(")content(*.lua)delimiter(")>operator(,) key(filterinfo) operator(=) string<delimiter(")content(Lua files)delimiter(")>operator(,)key(allownew)operator(=)ident(yes)delimiter(})>
  ident(IupPopup)operator(()ident(filedlg)operator(,)ident(IUP_LEFT)operator(,) ident(IUP_LEFT)operator(\))
  keyword(local) local_variable(status) operator(=) ident(filedlg)operator(.)ident(status)
  ident(lastfile) operator(=) ident(filedlg)operator(.)ident(value)
  ident(filelabel)operator(.)ident(title) operator(=) ident(lastfile)
  ident(IupDestroy)operator(()ident(filedlg)operator(\))
  keyword(if) ident(status) operator(~)operator(=) string<delimiter(")content(-1)delimiter(")> keyword(then) 
    keyword(if) operator(()ident(lastfile) operator(=)operator(=) predefined_constant(nil)operator(\)) keyword(then)
      predefined(error) operator(()string<delimiter(")content(Cannot Save file )delimiter(")>operator(.)operator(.)ident(lastfile)operator(\))
    keyword(end)
    keyword(local) local_variable(novoarq) operator(=) ident(openfile) operator(()ident(lastfile)operator(,) string<delimiter(")content(w+)delimiter(")>operator(\))
    keyword(if) operator(()ident(novoarq) operator(~)operator(=) predefined_constant(nil)operator(\)) keyword(then)
      ident(write) operator(()ident(novoarq)operator(,)ident(mulCommands)operator(.)ident(value)operator(\))
      ident(closefile) operator(()ident(novoarq)operator(\))
    keyword(else)
      predefined(error) operator(()string<delimiter(")content(Cannot Save file)delimiter(")>operator(\))
    keyword(end)
  keyword(end)
keyword(end)

keyword(function) ident(butLoadFile:)function(action)operator(()operator(\))
  keyword(local) local_variable(filedlg) operator(=) ident(iupfiledlg)map<delimiter({)key(dialogtype)operator(=)string<delimiter(")content(OPEN)delimiter(")>operator(,) key(title)operator(=)string<delimiter(")content(Load File)delimiter(")>operator(,) key(filter)operator(=)string<delimiter(")content(*.lua)delimiter(")>operator(,) key(filterinfo)operator(=)string<delimiter(")content(Lua Files)delimiter(")>operator(,) key(allownew)operator(=)string<delimiter(")content(NO)delimiter(")>delimiter(})>
  ident(filedlg)operator(:)ident(popup)operator(()ident(IUP_CENTER)operator(,) ident(IUP_CENTER)operator(\))
  keyword(local) local_variable(status) operator(=) ident(filedlg)operator(.)ident(status)
  keyword(local) local_variable(newfile) operator(=) ident(filedlg)operator(.)ident(value)
  ident(IupDestroy)operator(()ident(filedlg)operator(\))
  keyword(if) operator(()ident(status) operator(=)operator(=) string<delimiter(")content(-1)delimiter(")>operator(\)) keyword(or) operator(()ident(status) operator(=)operator(=) string<delimiter(")content(1)delimiter(")>operator(\)) keyword(then) 
    keyword(if) operator(()ident(status) operator(=)operator(=) string<delimiter(")content(1)delimiter(")>operator(\)) keyword(then)
      predefined(error) operator(()string<delimiter(")content(Cannot load file )delimiter(")>operator(.)operator(.)ident(newfile)operator(\))
    keyword(end)
  keyword(else)
    keyword(local) local_variable(fp) operator(=) ident(openfile) operator(()ident(newfile)operator(,) string<delimiter(")content(r)delimiter(")>operator(\))
    keyword(if) operator(()ident(fp) operator(=)operator(=) predefined_constant(nil)operator(\)) keyword(then)
      predefined(error) operator(()string<delimiter(")content(Cannot load file )delimiter(")>operator(.)operator(.)ident(newfile)operator(\))
    keyword(else)
      ident(mulCommands)operator(.)ident(value) operator(=) ident(read) operator(()ident(fp)operator(,)string<delimiter(")content(*a)delimiter(")>operator(\)) 
      ident(closefile) operator(()ident(fp)operator(\)) 
      ident(lastfile) operator(=) ident(newfile)
      ident(filelabel)operator(.)ident(title) operator(=) ident(lastfile)
    keyword(end)
  keyword(end)
keyword(end)

ident(vbxConsole) operator(=) ident(iupvbox) 
map<delimiter({)
  ident(iupframe)map<inline_delimiter({)ident(iuphbox)map<inline_delimiter({)ident(iupvbox)map<inline_delimiter({)ident(butLoadFile)operator(,) ident(butSaveFile)operator(,) ident(butSaveasFile)operator(,) ident(butClearCommands)operator(,) ident(butExecute)operator(;) key(margin)operator(=)string<delimiter(")content(0x0)delimiter(")>operator(,) key(gap)operator(=)string<delimiter(")content(10)delimiter(")>inline_delimiter(})>operator(,) ident(iupvbox)map<inline_delimiter({)ident(filelabel)operator(,) ident(mulCommands)operator(,) ident(poslabel)operator(;) key(alignment)operator(=)string<delimiter(")content(ARIGHT)delimiter(")>inline_delimiter(})>operator(;) key(alignment)operator(=)string<delimiter(")content(ATOP)delimiter(")>inline_delimiter(})>operator(;) key(title)operator(=)string<delimiter(")content(Commands)delimiter(")>inline_delimiter(})>
  operator(;)key(alignment)operator(=)string<delimiter(")content(ACENTER)delimiter(")>operator(,) key(margin)operator(=)string<delimiter(")content(5x5)delimiter(")>operator(,) key(gap)operator(=)string<delimiter(")content(5)delimiter(")> 
delimiter(})>

comment(-- Main Menu Definition.)

ident(mnuMain) operator(=) ident(iupmenu)
map<delimiter({)
  ident(iupsubmenu)
  map<inline_delimiter({)
    ident(iupmenu)
    map<inline_delimiter({)
      ident(iupitem)map<inline_delimiter({)key(title)operator(=)string<delimiter(")content(Exit)delimiter(")>operator(,) key(action)operator(=)string<delimiter(")content(return IUP_CLOSE)delimiter(")>inline_delimiter(})>
    inline_delimiter(})>operator(;) key(title)operator(=)string<delimiter(")content(File)delimiter(")>
  inline_delimiter(})>operator(,)
  ident(iupsubmenu)map<inline_delimiter({)ident(iupmenu)
  map<inline_delimiter({)
    ident(iup)operator(.)ident(item)map<inline_delimiter({)key(title)operator(=)string<delimiter(")content(Print Version Info...)delimiter(")>operator(,) key(action)operator(=)ident(print_version_info)inline_delimiter(})>operator(,)
    ident(iupitem)map<inline_delimiter({)key(title)operator(=)string<delimiter(")content(About...)delimiter(")>operator(,) key(action)operator(=)string<delimiter(")content(dlgAbout:popup(IUP_CENTER, IUP_CENTER\))delimiter(")>inline_delimiter(})>
  inline_delimiter(})>operator(;)key(title)operator(=)string<delimiter(")content(Help)delimiter(")>inline_delimiter(})>
delimiter(})>

comment(-- Main Dialog Definition.)

ident(dlgMain) operator(=) ident(iupdialog)map<delimiter({)ident(vbxConsole)operator(;) key(title)operator(=)string<delimiter(")content(Complete IupLua3 Interpreter)delimiter(")>operator(,) key(menu)operator(=)ident(mnuMain)operator(,) key(close_cb) operator(=) string<delimiter(")content(return IUP_CLOSE)delimiter(")>delimiter(})>

comment(-- About Dialog Definition.)

ident(dlgAbout) operator(=) ident(iupdialog) 
map<delimiter({)
  ident(iupvbox)
  map<inline_delimiter({)
    ident(iuplabel)map<inline_delimiter({)key(title)operator(=)string<delimiter(")content(Complete IupLua3 Interpreter)delimiter(")>inline_delimiter(})>operator(,) 
    ident(iupfill)map<inline_delimiter({)key(size)operator(=)string<delimiter(")content(5)delimiter(")>inline_delimiter(})>operator(,)
    ident(iupfill)map<inline_delimiter({)key(size)operator(=)string<delimiter(")content(5)delimiter(")>inline_delimiter(})>operator(,)
    ident(iupframe)
    map<inline_delimiter({)
       ident(iupvbox)
       map<inline_delimiter({)
          ident(iuplabel)map<inline_delimiter({)key(title)operator(=)string<delimiter(")content(Tecgraf/PUC-Rio)delimiter(")>inline_delimiter(})>operator(,)
          ident(iuplabel)map<inline_delimiter({)key(title)operator(=)string<delimiter(")content(Mark/Ovídio/Scuri)delimiter(")>inline_delimiter(})>operator(,)
          ident(iuplabel)map<inline_delimiter({)key(title)operator(=)string<delimiter(")content(iup@tecgraf.puc-rio.br)delimiter(")>inline_delimiter(})> 
       inline_delimiter(})>
    inline_delimiter(})>operator(,)
    ident(iupfill)map<inline_delimiter({)key(size)operator(=)string<delimiter(")content(5)delimiter(")>inline_delimiter(})>operator(,)
    ident(iupbutton)map<inline_delimiter({)key(title)operator(=)string<delimiter(")content(OK)delimiter(")>operator(,) key(action)operator(=)string<delimiter(")content(return IUP_CLOSE)delimiter(")>operator(,) key(size)operator(=)string<delimiter(")content(50X20)delimiter(")>inline_delimiter(})> 
    operator(;)key(margin)operator(=)string<delimiter(")content(10x10)delimiter(")>operator(,) key(alignment)operator(=)string<delimiter(")content(ACENTER)delimiter(")> 
  inline_delimiter(})>
  operator(;)key(maxbox)operator(=)ident(IUP_NO)operator(,) key(minbox)operator(=)ident(IUP_NO)operator(,) key(resize)operator(=)ident(IUP_NO)operator(,) key(title)operator(=)string<delimiter(")content(About)delimiter(")>
delimiter(})>

comment(-- Displays the Main Dialog )

ident(dlgMain)operator(:)ident(show)operator(()operator(\))

ident(IupMainLoop)operator(()operator(\))

ident(IupDestroy)operator(()ident(dlgMain)operator(\))
ident(IupDestroy)operator(()ident(dlgAbout)operator(\))

comment(-- #################################################################################)
comment(--                                     Constants)
comment(-- #################################################################################)


ident(IUP_ERROR)     operator(=) integer(1)           ident(iup)operator(.)ident(ERROR)     operator(=) ident(IUP_ERROR)     
ident(IUP_NOERROR)   operator(=) integer(0)           ident(iup)operator(.)ident(NOERROR)   operator(=) ident(IUP_NOERROR)   
ident(IUP_OPENED)    operator(=) integer(-1)          ident(iup)operator(.)ident(OPENED)    operator(=) ident(IUP_OPENED)    
ident(IUP_INVALID)   operator(=) integer(-1)          ident(iup)operator(.)ident(INVALID)   operator(=) ident(IUP_INVALID)
                  
ident(IUP_CENTER)   operator(=) integer(65535)        ident(iup)operator(.)ident(CENTER)    operator(=) ident(IUP_CENTER) 
ident(IUP_LEFT)     operator(=) integer(65534)		ident(iup)operator(.)ident(LEFT)      operator(=) ident(IUP_LEFT)   
ident(IUP_RIGHT)    operator(=) integer(65533)		ident(iup)operator(.)ident(RIGHT)     operator(=) ident(IUP_RIGHT)  
ident(IUP_MOUSEPOS) operator(=) integer(65532)        ident(iup)operator(.)ident(MOUSEPOS)  operator(=) ident(IUP_MOUSEPOS)
ident(IUP_CURRENT)  operator(=) integer(65531)		ident(iup)operator(.)ident(CURRENT)   operator(=) ident(IUP_CURRENT) 
ident(IUP_CENTERPARENT) operator(=) integer(65530)    ident(iup)operator(.)ident(CENTERPARENT) operator(=) ident(IUP_CENTERPARENT)
ident(IUP_TOP)      operator(=) ident(IUP_LEFT)     ident(iup)operator(.)ident(TOP)       operator(=) ident(IUP_TOP)   
ident(IUP_BOTTOM)   operator(=) ident(IUP_RIGHT)	ident(iup)operator(.)ident(BOTTOM)    operator(=) ident(IUP_BOTTOM)
ident(IUP_ANYWHERE) operator(=) ident(IUP_CURRENT)  ident(iup)operator(.)ident(ANYWHERE)  operator(=) ident(IUP_ANYWHERE)

ident(IUP_BUTTON1)   operator(=)   integer(49)        ident(iup)operator(.)ident(BUTTON1)   operator(=) ident(IUP_BUTTON1)     comment(-- '1'  )
ident(IUP_BUTTON2)   operator(=)   integer(50)        ident(iup)operator(.)ident(BUTTON2)   operator(=) ident(IUP_BUTTON2)     comment(-- '2'  )
ident(IUP_BUTTON3)   operator(=)   integer(51)        ident(iup)operator(.)ident(BUTTON3)   operator(=) ident(IUP_BUTTON3)     comment(-- '3'  )
ident(IUP_BUTTON4)   operator(=)   integer(52)        ident(iup)operator(.)ident(BUTTON4)   operator(=) ident(IUP_BUTTON4)     comment(-- '4'  )
ident(IUP_BUTTON5)   operator(=)   integer(53)        ident(iup)operator(.)ident(BUTTON5)   operator(=) ident(IUP_BUTTON5)     comment(-- '5'  )
                  
ident(IUP_IGNORE)    operator(=) integer(-1)          ident(iup)operator(.)ident(IGNORE)    operator(=) ident(IUP_IGNORE)    
ident(IUP_DEFAULT)   operator(=) integer(-2)          ident(iup)operator(.)ident(DEFAULT)   operator(=) ident(IUP_DEFAULT)   
ident(IUP_CLOSE)     operator(=) integer(-3)          ident(iup)operator(.)ident(CLOSE)     operator(=) ident(IUP_CLOSE)     
ident(IUP_CONTINUE)  operator(=) integer(-4)          ident(iup)operator(.)ident(CONTINUE)  operator(=) ident(IUP_CONTINUE)  
                  
ident(IUP_SBUP)      operator(=) integer(0)           ident(iup)operator(.)ident(SBUP)      operator(=) ident(IUP_SBUP)      
ident(IUP_SBDN)      operator(=) integer(1)           ident(iup)operator(.)ident(SBDN)      operator(=) ident(IUP_SBDN)      
ident(IUP_SBPGUP)    operator(=) integer(2)           ident(iup)operator(.)ident(SBPGUP)    operator(=) ident(IUP_SBPGUP)    
ident(IUP_SBPGDN)    operator(=) integer(3)           ident(iup)operator(.)ident(SBPGDN)    operator(=) ident(IUP_SBPGDN)    
ident(IUP_SBPOSV)    operator(=) integer(4)           ident(iup)operator(.)ident(SBPOSV)    operator(=) ident(IUP_SBPOSV)    
ident(IUP_SBDRAGV)   operator(=) integer(5)           ident(iup)operator(.)ident(SBDRAGV)   operator(=) ident(IUP_SBDRAGV)   
ident(IUP_SBLEFT)    operator(=) integer(6)           ident(iup)operator(.)ident(SBLEFT)    operator(=) ident(IUP_SBLEFT)    
ident(IUP_SBRIGHT)   operator(=) integer(7)           ident(iup)operator(.)ident(SBRIGHT)   operator(=) ident(IUP_SBRIGHT)   
ident(IUP_SBPGLEFT)  operator(=) integer(8)           ident(iup)operator(.)ident(SBPGLEFT)  operator(=) ident(IUP_SBPGLEFT)  
ident(IUP_SBPGRIGHT) operator(=) integer(9)           ident(iup)operator(.)ident(SBPGRIGHT) operator(=) ident(IUP_SBPGRIGHT) 
ident(IUP_SBPOSH)    operator(=) integer(10)          ident(iup)operator(.)ident(SBPOSH)    operator(=) ident(IUP_SBPOSH)    
ident(IUP_SBDRAGH)   operator(=) integer(11)          ident(iup)operator(.)ident(SBDRAGH)   operator(=) ident(IUP_SBDRAGH)   
                  
ident(IUP_SHOW)      operator(=) integer(0)           ident(iup)operator(.)ident(SHOW)      operator(=) ident(IUP_SHOW)      
ident(IUP_RESTORE)   operator(=) integer(1)           ident(iup)operator(.)ident(RESTORE)   operator(=) ident(IUP_RESTORE)   
ident(IUP_MINIMIZE)  operator(=) integer(2)           ident(iup)operator(.)ident(MINIMIZE)  operator(=) ident(IUP_MINIMIZE)  
ident(IUP_MAXIMIZE)  operator(=) integer(3)           ident(iup)operator(.)ident(MAXIMIZE)  operator(=) ident(IUP_MAXIMIZE)
ident(IUP_HIDE)      operator(=) integer(4)           ident(iup)operator(.)ident(HIDE)      operator(=) ident(IUP_HIDE)

ident(RED)    operator(=) ident(IupRGB)operator(()integer(1)operator(,) integer(0)operator(,) integer(0)operator(\))    ident(iup)operator(.)ident(RED)    operator(=) ident(RED)    
ident(GREEN)  operator(=) ident(IupRGB)operator(()integer(0)operator(,) integer(1)operator(,) integer(0)operator(\))    ident(iup)operator(.)ident(GREEN)  operator(=) ident(GREEN)  
ident(BLUE)   operator(=) ident(IupRGB)operator(()integer(0)operator(,) integer(0)operator(,) integer(1)operator(\))    ident(iup)operator(.)ident(BLUE)   operator(=) ident(BLUE)   
ident(BLACK)  operator(=) ident(IupRGB)operator(()integer(0)operator(,) integer(0)operator(,) integer(0)operator(\))    ident(iup)operator(.)ident(BLACK)  operator(=) ident(BLACK)  
ident(WHITE)  operator(=) ident(IupRGB)operator(()integer(1)operator(,) integer(1)operator(,) integer(1)operator(\))    ident(iup)operator(.)ident(WHITE)  operator(=) ident(WHITE)  
ident(YELLOW) operator(=) ident(IupRGB)operator(()integer(1)operator(,) integer(1)operator(,) integer(0)operator(\))    ident(iup)operator(.)ident(YELLOW) operator(=) ident(YELLOW) 

ident(IUP_ON) operator(=)        string<delimiter(")content(ON)delimiter(")>           ident(iup)operator(.)ident(ON) operator(=)        ident(IUP_ON)
ident(IUP_OFF) operator(=)       string<delimiter(")content(OFF)delimiter(")>          ident(iup)operator(.)ident(OFF) operator(=)       ident(IUP_OFF)
ident(IUP_YES) operator(=)       string<delimiter(")content(YES)delimiter(")>          ident(iup)operator(.)ident(YES) operator(=)       ident(IUP_YES)
ident(IUP_NO) operator(=)        string<delimiter(")content(NO)delimiter(")>           ident(iup)operator(.)ident(NO) operator(=)        ident(IUP_NO)
ident(IUP_APPEND) operator(=)    string<delimiter(")content(APPEND)delimiter(")>       ident(iup)operator(.)ident(APPEND) operator(=)    ident(IUP_APPEND)
ident(IUP_VERTICAL) operator(=)  string<delimiter(")content(VERTICAL)delimiter(")>     ident(iup)operator(.)ident(VERTICAL) operator(=)  ident(IUP_VERTICAL)
ident(IUP_HORIZONTAL) operator(=)string<delimiter(")content(HORIZONTAL)delimiter(")>   ident(iup)operator(.)ident(HORIZONTAL) operator(=)ident(IUP_HORIZONTAL)
                    
ident(IUP_ACENTER) operator(=)   string<delimiter(")content(ACENTER)delimiter(")>      ident(iup)operator(.)ident(ACENTER) operator(=)   ident(IUP_ACENTER)
ident(IUP_ALEFT) operator(=)     string<delimiter(")content(ALEFT)delimiter(")>        ident(iup)operator(.)ident(ALEFT) operator(=)     ident(IUP_ALEFT)
ident(IUP_ARIGHT) operator(=)    string<delimiter(")content(ARIGHT)delimiter(")>       ident(iup)operator(.)ident(ARIGHT) operator(=)    ident(IUP_ARIGHT)
ident(IUP_ATOP) operator(=)      string<delimiter(")content(ATOP)delimiter(")>         ident(iup)operator(.)ident(ATOP) operator(=)      ident(IUP_ATOP)
ident(IUP_ABOTTOM) operator(=)   string<delimiter(")content(ABOTTOM)delimiter(")>      ident(iup)operator(.)ident(ABOTTOM) operator(=)   ident(IUP_ABOTTOM)
                    
ident(IUP_NORTH) operator(=)     string<delimiter(")content(NORTH)delimiter(")>        ident(iup)operator(.)ident(NORTH) operator(=)     ident(IUP_NORTH)
ident(IUP_SOUTH) operator(=)     string<delimiter(")content(SOUTH)delimiter(")>        ident(iup)operator(.)ident(SOUTH) operator(=)     ident(IUP_SOUTH)
ident(IUP_WEST) operator(=)      string<delimiter(")content(WEST)delimiter(")>         ident(iup)operator(.)ident(WEST) operator(=)      ident(IUP_WEST)
ident(IUP_EAST) operator(=)      string<delimiter(")content(EAST)delimiter(")>         ident(iup)operator(.)ident(EAST) operator(=)      ident(IUP_EAST)
ident(IUP_NE) operator(=)        string<delimiter(")content(NE)delimiter(")>           ident(iup)operator(.)ident(NE) operator(=)        ident(IUP_NE)
ident(IUP_SE) operator(=)        string<delimiter(")content(SE)delimiter(")>           ident(iup)operator(.)ident(SE) operator(=)        ident(IUP_SE)
ident(IUP_NW) operator(=)        string<delimiter(")content(NW)delimiter(")>           ident(iup)operator(.)ident(NW) operator(=)        ident(IUP_NW)
ident(IUP_SW) operator(=)        string<delimiter(")content(SW)delimiter(")>           ident(iup)operator(.)ident(SW) operator(=)        ident(IUP_SW)
                    
ident(IUP_FULL) operator(=)      string<delimiter(")content(FULL)delimiter(")>         ident(iup)operator(.)ident(FULL) operator(=)      ident(IUP_FULL)
ident(IUP_HALF) operator(=)      string<delimiter(")content(HALF)delimiter(")>         ident(iup)operator(.)ident(HALF) operator(=)      ident(IUP_HALF)
ident(IUP_THIRD) operator(=)     string<delimiter(")content(THIRD)delimiter(")>        ident(iup)operator(.)ident(THIRD) operator(=)     ident(IUP_THIRD)
ident(IUP_QUARTER) operator(=)   string<delimiter(")content(QUARTER)delimiter(")>      ident(iup)operator(.)ident(QUARTER) operator(=)   ident(IUP_QUARTER)
ident(IUP_EIGHTH) operator(=)    string<delimiter(")content(EIGHTH)delimiter(")>       ident(iup)operator(.)ident(EIGHTH) operator(=)    ident(IUP_EIGHTH)
                    
ident(IUP_ARROW) operator(=)     string<delimiter(")content(ARROW)delimiter(")>        ident(iup)operator(.)ident(ARROW) operator(=)     ident(IUP_ARROW)
ident(IUP_BUSY) operator(=)      string<delimiter(")content(BUSY)delimiter(")>         ident(iup)operator(.)ident(BUSY) operator(=)      ident(IUP_BUSY)
ident(IUP_RESIZE_N) operator(=)  string<delimiter(")content(RESIZE_N)delimiter(")>     ident(iup)operator(.)ident(RESIZE_N) operator(=)  ident(IUP_RESIZE_N)
ident(IUP_RESIZE_S) operator(=)  string<delimiter(")content(RESIZE_S)delimiter(")>     ident(iup)operator(.)ident(RESIZE_S) operator(=)  ident(IUP_RESIZE_S)
ident(IUP_RESIZE_E) operator(=)  string<delimiter(")content(RESIZE_E)delimiter(")>     ident(iup)operator(.)ident(RESIZE_E) operator(=)  ident(IUP_RESIZE_E)
ident(IUP_RESIZE_W) operator(=)  string<delimiter(")content(RESIZE_W)delimiter(")>     ident(iup)operator(.)ident(RESIZE_W) operator(=)  ident(IUP_RESIZE_W)
ident(IUP_RESIZE_NE) operator(=) string<delimiter(")content(RESIZE_NE)delimiter(")>    ident(iup)operator(.)ident(RESIZE_NE) operator(=) ident(IUP_RESIZE_NE)
ident(IUP_RESIZE_NW) operator(=) string<delimiter(")content(RESIZE_NW)delimiter(")>    ident(iup)operator(.)ident(RESIZE_NW) operator(=) ident(IUP_RESIZE_NW)
ident(IUP_RESIZE_SE) operator(=) string<delimiter(")content(RESIZE_SE)delimiter(")>    ident(iup)operator(.)ident(RESIZE_SE) operator(=) ident(IUP_RESIZE_SE)
ident(IUP_RESIZE_SW) operator(=) string<delimiter(")content(RESIZE_SW)delimiter(")>    ident(iup)operator(.)ident(RESIZE_SW) operator(=) ident(IUP_RESIZE_SW)
ident(IUP_MOVE) operator(=)      string<delimiter(")content(MOVE)delimiter(")>         ident(iup)operator(.)ident(MOVE) operator(=)      ident(IUP_MOVE)
ident(IUP_HAND) operator(=)      string<delimiter(")content(HAND)delimiter(")>         ident(iup)operator(.)ident(HAND) operator(=)      ident(IUP_HAND)
ident(IUP_NONE) operator(=)      string<delimiter(")content(NONE)delimiter(")>         ident(iup)operator(.)ident(NONE) operator(=)      ident(IUP_NONE)
ident(IUP_IUP) operator(=)       string<delimiter(")content(IUP)delimiter(")>          ident(iup)operator(.)ident(IUP) operator(=)       ident(IUP_IUP)
ident(IUP_CROSS) operator(=)     string<delimiter(")content(CROSS)delimiter(")>        ident(iup)operator(.)ident(CROSS) operator(=)     ident(IUP_CROSS)
ident(IUP_PEN) operator(=)       string<delimiter(")content(PEN)delimiter(")>          ident(iup)operator(.)ident(PEN) operator(=)       ident(IUP_PEN)
ident(IUP_TEXT) operator(=)      string<delimiter(")content(TEXT)delimiter(")>         ident(iup)operator(.)ident(TEXT) operator(=)      ident(IUP_TEXT)
ident(IUP_RESIZE_C) operator(=)  string<delimiter(")content(RESIZE_C)delimiter(")>     ident(iup)operator(.)ident(RESIZE_C) operator(=)  ident(IUP_RESIZE_C)
ident(IUP_OPENHAND) operator(=)  string<delimiter(")content(OPENHAND)delimiter(")>     ident(iup)operator(.)ident(OPENHAND) operator(=)  ident(IUP_OPENHAND)

ident(IUP_HELVETICA_NORMAL_8) operator(=)   string<delimiter(")content(HELVETICA_NORMAL_8)delimiter(")>       ident(iup)operator(.)ident(HELVETICA_NORMAL_8) operator(=)   ident(IUP_HELVETICA_NORMAL_8)
ident(IUP_HELVETICA_ITALIC_8) operator(=)   string<delimiter(")content(HELVETICA_ITALIC_8)delimiter(")>       ident(iup)operator(.)ident(HELVETICA_ITALIC_8) operator(=)   ident(IUP_HELVETICA_ITALIC_8)
ident(IUP_HELVETICA_BOLD_8) operator(=)     string<delimiter(")content(HELVETICA_BOLD_8)delimiter(")>         ident(iup)operator(.)ident(HELVETICA_BOLD_8) operator(=)     ident(IUP_HELVETICA_BOLD_8)
ident(IUP_HELVETICA_NORMAL_10) operator(=)  string<delimiter(")content(HELVETICA_NORMAL_10)delimiter(")>      ident(iup)operator(.)ident(HELVETICA_NORMAL_10) operator(=)  ident(IUP_HELVETICA_NORMAL_10)
ident(IUP_HELVETICA_ITALIC_10) operator(=)  string<delimiter(")content(HELVETICA_ITALIC_10)delimiter(")>      ident(iup)operator(.)ident(HELVETICA_ITALIC_10) operator(=)  ident(IUP_HELVETICA_ITALIC_10)
ident(IUP_HELVETICA_BOLD_10) operator(=)    string<delimiter(")content(HELVETICA_BOLD_10)delimiter(")>        ident(iup)operator(.)ident(HELVETICA_BOLD_10) operator(=)    ident(IUP_HELVETICA_BOLD_10)
ident(IUP_HELVETICA_NORMAL_12) operator(=)  string<delimiter(")content(HELVETICA_NORMAL_12)delimiter(")>      ident(iup)operator(.)ident(HELVETICA_NORMAL_12) operator(=)  ident(IUP_HELVETICA_NORMAL_12)
ident(IUP_HELVETICA_ITALIC_12) operator(=)  string<delimiter(")content(HELVETICA_ITALIC_12)delimiter(")>      ident(iup)operator(.)ident(HELVETICA_ITALIC_12) operator(=)  ident(IUP_HELVETICA_ITALIC_12)
ident(IUP_HELVETICA_BOLD_12) operator(=)    string<delimiter(")content(HELVETICA_BOLD_12)delimiter(")>        ident(iup)operator(.)ident(HELVETICA_BOLD_12) operator(=)    ident(IUP_HELVETICA_BOLD_12)
ident(IUP_HELVETICA_NORMAL_14) operator(=)  string<delimiter(")content(HELVETICA_NORMAL_14)delimiter(")>      ident(iup)operator(.)ident(HELVETICA_NORMAL_14) operator(=)  ident(IUP_HELVETICA_NORMAL_14)
ident(IUP_HELVETICA_ITALIC_14) operator(=)  string<delimiter(")content(HELVETICA_ITALIC_14)delimiter(")>      ident(iup)operator(.)ident(HELVETICA_ITALIC_14) operator(=)  ident(IUP_HELVETICA_ITALIC_14)
ident(IUP_HELVETICA_BOLD_14) operator(=)    string<delimiter(")content(HELVETICA_BOLD_14)delimiter(")>        ident(iup)operator(.)ident(HELVETICA_BOLD_14) operator(=)    ident(IUP_HELVETICA_BOLD_14)
ident(IUP_COURIER_NORMAL_8) operator(=)     string<delimiter(")content(COURIER_NORMAL_8)delimiter(")>         ident(iup)operator(.)ident(COURIER_NORMAL_8) operator(=)     ident(IUP_COURIER_NORMAL_8)
ident(IUP_COURIER_ITALIC_8) operator(=)     string<delimiter(")content(COURIER_ITALIC_8)delimiter(")>         ident(iup)operator(.)ident(COURIER_ITALIC_8) operator(=)     ident(IUP_COURIER_ITALIC_8)
ident(IUP_COURIER_BOLD_8) operator(=)       string<delimiter(")content(COURIER_BOLD_8)delimiter(")>           ident(iup)operator(.)ident(COURIER_BOLD_8) operator(=)       ident(IUP_COURIER_BOLD_8)
ident(IUP_COURIER_NORMAL_10) operator(=)    string<delimiter(")content(COURIER_NORMAL_10)delimiter(")>        ident(iup)operator(.)ident(COURIER_NORMAL_10) operator(=)    ident(IUP_COURIER_NORMAL_10)
ident(IUP_COURIER_ITALIC_10) operator(=)    string<delimiter(")content(COURIER_ITALIC_10)delimiter(")>        ident(iup)operator(.)ident(COURIER_ITALIC_10) operator(=)    ident(IUP_COURIER_ITALIC_10)
ident(IUP_COURIER_BOLD_10) operator(=)      string<delimiter(")content(COURIER_BOLD_10)delimiter(")>          ident(iup)operator(.)ident(COURIER_BOLD_10) operator(=)      ident(IUP_COURIER_BOLD_10)
ident(IUP_COURIER_NORMAL_12) operator(=)    string<delimiter(")content(COURIER_NORMAL_12)delimiter(")>        ident(iup)operator(.)ident(COURIER_NORMAL_12) operator(=)    ident(IUP_COURIER_NORMAL_12)
ident(IUP_COURIER_ITALIC_12) operator(=)    string<delimiter(")content(COURIER_ITALIC_12)delimiter(")>        ident(iup)operator(.)ident(COURIER_ITALIC_12) operator(=)    ident(IUP_COURIER_ITALIC_12)
ident(IUP_COURIER_BOLD_12) operator(=)      string<delimiter(")content(COURIER_BOLD_12)delimiter(")>          ident(iup)operator(.)ident(COURIER_BOLD_12) operator(=)      ident(IUP_COURIER_BOLD_12)
ident(IUP_COURIER_NORMAL_14) operator(=)    string<delimiter(")content(COURIER_NORMAL_14)delimiter(")>        ident(iup)operator(.)ident(COURIER_NORMAL_14) operator(=)    ident(IUP_COURIER_NORMAL_14)
ident(IUP_COURIER_ITALIC_14) operator(=)    string<delimiter(")content(COURIER_ITALIC_14)delimiter(")>        ident(iup)operator(.)ident(COURIER_ITALIC_14) operator(=)    ident(IUP_COURIER_ITALIC_14)
ident(IUP_COURIER_BOLD_14) operator(=)      string<delimiter(")content(COURIER_BOLD_14)delimiter(")>          ident(iup)operator(.)ident(COURIER_BOLD_14) operator(=)      ident(IUP_COURIER_BOLD_14)
ident(IUP_TIMES_NORMAL_8) operator(=)       string<delimiter(")content(TIMES_NORMAL_8)delimiter(")>           ident(iup)operator(.)ident(TIMES_NORMAL_8) operator(=)       ident(IUP_TIMES_NORMAL_8)
ident(IUP_TIMES_ITALIC_8) operator(=)       string<delimiter(")content(TIMES_ITALIC_8)delimiter(")>           ident(iup)operator(.)ident(TIMES_ITALIC_8) operator(=)       ident(IUP_TIMES_ITALIC_8)
ident(IUP_TIMES_BOLD_8) operator(=)         string<delimiter(")content(TIMES_BOLD_8)delimiter(")>             ident(iup)operator(.)ident(TIMES_BOLD_8) operator(=)         ident(IUP_TIMES_BOLD_8)
ident(IUP_TIMES_NORMAL_10) operator(=)      string<delimiter(")content(TIMES_NORMAL_10)delimiter(")>          ident(iup)operator(.)ident(TIMES_NORMAL_10) operator(=)      ident(IUP_TIMES_NORMAL_10)
ident(IUP_TIMES_ITALIC_10) operator(=)      string<delimiter(")content(TIMES_ITALIC_10)delimiter(")>          ident(iup)operator(.)ident(TIMES_ITALIC_10) operator(=)      ident(IUP_TIMES_ITALIC_10)
ident(IUP_TIMES_BOLD_10) operator(=)        string<delimiter(")content(TIMES_BOLD_10)delimiter(")>            ident(iup)operator(.)ident(TIMES_BOLD_10) operator(=)        ident(IUP_TIMES_BOLD_10)
ident(IUP_TIMES_NORMAL_12) operator(=)      string<delimiter(")content(TIMES_NORMAL_12)delimiter(")>          ident(iup)operator(.)ident(TIMES_NORMAL_12) operator(=)      ident(IUP_TIMES_NORMAL_12)
ident(IUP_TIMES_ITALIC_12) operator(=)      string<delimiter(")content(TIMES_ITALIC_12)delimiter(")>          ident(iup)operator(.)ident(TIMES_ITALIC_12) operator(=)      ident(IUP_TIMES_ITALIC_12)
ident(IUP_TIMES_BOLD_12) operator(=)        string<delimiter(")content(TIMES_BOLD_12)delimiter(")>            ident(iup)operator(.)ident(TIMES_BOLD_12) operator(=)        ident(IUP_TIMES_BOLD_12)
ident(IUP_TIMES_NORMAL_14) operator(=)      string<delimiter(")content(TIMES_NORMAL_14)delimiter(")>          ident(iup)operator(.)ident(TIMES_NORMAL_14) operator(=)      ident(IUP_TIMES_NORMAL_14)
ident(IUP_TIMES_ITALIC_14) operator(=)      string<delimiter(")content(TIMES_ITALIC_14)delimiter(")>          ident(iup)operator(.)ident(TIMES_ITALIC_14) operator(=)      ident(IUP_TIMES_ITALIC_14)
ident(IUP_TIMES_BOLD_14) operator(=)        string<delimiter(")content(TIMES_BOLD_14)delimiter(")>            ident(iup)operator(.)ident(TIMES_BOLD_14) operator(=)        ident(IUP_TIMES_BOLD_14)



comment(-- #################################################################################)
comment(--                                 Private functions)
comment(-- #################################################################################)

comment(-- maps Ihandles into Lua objects)
ident(iup_handles) operator(=) map<delimiter({)delimiter(})>

ident(settagmethod)operator(()ident(iuplua_tag)operator(,) string<delimiter(")content(gettable)delimiter(")>operator(,) ident(iup_gettable)operator(\)) 
ident(settagmethod)operator(()ident(iuplua_tag)operator(,) string<delimiter(")content(settable)delimiter(")>operator(,) ident(iup_settable)operator(\))
ident(settagmethod) operator(()ident(tag)operator(()map<delimiter({)delimiter(})>operator(\))operator(,) string<delimiter(")content(index)delimiter(")>operator(,) ident(iup_index)operator(\))

keyword(function) function(_ALERT)operator(()ident(s)operator(\))
  keyword(local) local_variable(bt) operator(=) ident(iupbutton)map<delimiter({)key(title)operator(=)string<delimiter(")content(Ok)delimiter(")>operator(,) key(size)operator(=)string<delimiter(")content(60)delimiter(")>operator(,) key(action)operator(=)string<delimiter(")content(return IUP_CLOSE)delimiter(")>delimiter(})>
  keyword(local) local_variable(ml) operator(=) ident(iupmultiline)map<delimiter({)key(expand)operator(=)string<delimiter(")content(YES)delimiter(")>operator(,) key(readonly)operator(=)string<delimiter(")content(YES)delimiter(")>operator(,) key(value)operator(=)ident(s)operator(,) key(size)operator(=)string<delimiter(")content(300x150)delimiter(")>delimiter(})>
  keyword(local) local_variable(vb) operator(=) ident(iupvbox)map<delimiter({)ident(ml)operator(,) ident(bt)operator(;) key(alignment)operator(=)string<delimiter(")content(ACENTER)delimiter(")>operator(,) key(margin)operator(=)string<delimiter(")content(10x10)delimiter(")>operator(,) key(gap)operator(=)string<delimiter(")content(10)delimiter(")>delimiter(})>
  keyword(local) local_variable(dg) operator(=) ident(iupdialog)map<delimiter({)ident(vb)operator(;) key(title)operator(=)string<delimiter(")content(Lua Error)delimiter(")>operator(,)key(defaultesc)operator(=)ident(bt)operator(,)key(defaultenter)operator(=)ident(bt)operator(,)key(startfocus)operator(=)ident(bt)delimiter(})>
  ident(dg)operator(:)ident(popup)operator(()ident(IUP_CENTER)operator(,) ident(IUP_CENTER)operator(\))
  ident(dg)operator(:)ident(destroy)operator(()operator(\))
keyword(end)

keyword(function) function(type_string) operator(()ident(o)operator(\)) 
  keyword(return) predefined(type)operator(()ident(o)operator(\)) operator(=)operator(=) string<delimiter(")content(string)delimiter(")> 
keyword(end)

keyword(function) function(type_number) operator(()ident(o)operator(\)) 
  keyword(return) predefined(type)operator(()ident(o)operator(\)) operator(=)operator(=) string<delimiter(")content(number)delimiter(")> 
keyword(end)

keyword(function) function(type_nil) operator(()ident(o)operator(\))    
  keyword(return) predefined(type)operator(()ident(o)operator(\)) operator(=)operator(=) string<delimiter(")content(nil)delimiter(")> 
keyword(end)

keyword(function) function(type_function) operator(()ident(o)operator(\))
  keyword(return) predefined(type)operator(()ident(o)operator(\)) operator(=)operator(=) string<delimiter(")content(function)delimiter(")> 
keyword(end)

keyword(function) function(type_widget)operator(()ident(w)operator(\))
  keyword(if) ident(w) keyword(then)
    keyword(return) ident(iup_handles)operator([)ident(w)operator(])
  keyword(else)
    keyword(return) predefined_constant(nil)
  keyword(end)
keyword(end)

keyword(function) function(type_menu) operator(()ident(o)operator(\)) 
  keyword(return) ident(type_widget)operator(()ident(o)operator(\)) keyword(and) operator(()ident(o)operator(.)ident(parent)operator(=)operator(=)ident(IUPMENU)operator(\)) 
keyword(end)

keyword(function) function(type_item) operator(()ident(o)operator(\))
  keyword(return) ident(type_widget)operator(()ident(o)operator(\)) keyword(and) operator(()ident(o)operator(.)ident(parent)operator(=)operator(=)ident(IUPITEM) keyword(or) ident(o)operator(.)ident(parent)operator(=)operator(=)ident(IUPSUBMENU) keyword(or) ident(o)operator(.)ident(parent)operator(=)operator(=)ident(IUPSEPARATOR)operator(\))
keyword(end)

keyword(function) function(iupCallMethod)operator(()ident(name)operator(,) operator(.)operator(.)operator(.)operator(\))
  keyword(local) local_variable(handle) operator(=) ident(arg)operator([)integer(1)operator(]) comment(-- always the handle)
 
  keyword(local) local_variable(func) operator(=) ident(handle)operator([)ident(name)operator(]) comment(-- this is the old name)
  keyword(if) operator(()keyword(not) ident(func)operator(\)) keyword(then)
    keyword(local) local_variable(full_name) operator(=) ident(strlower)operator(()ident(iup_callbacks)operator([)ident(name)operator(])operator([)integer(1)operator(])operator(\))
    ident(func) operator(=) ident(handle)operator([)ident(full_name)operator(])  comment(-- check also for the full name)
    
    keyword(if) operator(()keyword(not) ident(func)operator(\)) keyword(then)
      keyword(return)
    keyword(end)
  keyword(end)
    
  keyword(if) ident(type_function) operator(()ident(func)operator(\)) keyword(then)
    keyword(return) ident(call)operator(()ident(func)operator(,) ident(arg)operator(\))
  keyword(elseif) ident(type_string)operator(()ident(func)operator(\)) keyword(then)
    keyword(local) local_variable(temp) operator(=) ident(self)
    ident(self) operator(=) ident(handle)
    keyword(local) local_variable(result) operator(=) ident(dostring)operator(()ident(func)operator(\))
    ident(self) operator(=) ident(temp)
    keyword(return) ident(result)
  keyword(else)
    keyword(return) ident(IUP_ERROR)
  keyword(end)
keyword(end)

keyword(function) function(iupSetName) operator(()ident(handle)operator(\))
  keyword(if) keyword(not) ident(type_string)operator(()ident(iup_handles)operator([)ident(handle)operator(])operator(.)ident(IUP_name)operator(\)) keyword(then)
    ident(iup_handles)operator([)ident(handle)operator(])operator(.)ident(IUP_name) operator(=) ident(format)operator(()string<delimiter(")content(_IUPLUA_NAME(%s\))delimiter(")>operator(,) predefined(tostring)operator(()ident(handle)operator(\))operator(\))
    ident(IupSetHandle)operator(()ident(handle)operator(.)ident(IUP_name)operator(,) ident(handle)operator(\))
  keyword(end)
keyword(end)

keyword(function) function(iupCreateChildrenNames) operator(()ident(obj)operator(\))
  keyword(if) ident(obj)operator(.)ident(parent)operator(.)ident(parent) operator(=)operator(=) ident(COMPOSITION) keyword(then)
    keyword(local) local_variable(i) operator(=) integer(1)
    keyword(while) ident(obj)operator([)ident(i)operator(]) keyword(do)
      ident(iupCreateChildrenNames) operator(()ident(obj)operator([)ident(i)operator(])operator(\))
      ident(i) operator(=) ident(i)operator(+)integer(1)
    keyword(end)
  keyword(elseif) ident(obj)operator(.)ident(parent) operator(=)operator(=) ident(IUPFRAME) keyword(then)
    ident(iupCreateChildrenNames) operator(()ident(obj)operator([)integer(1)operator(])operator(\))
  keyword(else)
    ident(iupSetName) operator(()ident(obj)operator(\))
  keyword(end)
keyword(end)


comment(-- #################################################################################)
comment(--                              Public Functions)
comment(-- #################################################################################)


keyword(function) function(IupRGB) operator(()ident(red)operator(,) ident(green)operator(,) ident(blue)operator(\))
  keyword(return) ident(floor)operator(()ident(red)operator(*)integer(255)operator(\))operator(.)operator(.)string<delimiter(")content( )delimiter(")>operator(.)operator(.)ident(floor)operator(()ident(green)operator(*)integer(255)operator(\))operator(.)operator(.)string<delimiter(")content( )delimiter(")>operator(.)operator(.)ident(floor)operator(()ident(blue)operator(*)integer(255)operator(\))
keyword(end)
ident(iup)operator(.)ident(RGB) operator(=) ident(IupRGB)

keyword(function) function(IupRegisterHandle)operator(()ident(handle)operator(,) ident(typename)operator(\))
  keyword(if) keyword(not) ident(iup_handles)operator([)ident(handle)operator(]) keyword(then)
    keyword(local) local_variable(obj) operator(=) ident(getglobal)operator(()string<delimiter(")content(IUP)delimiter(")>operator(.)operator(.)ident(strupper)operator(()ident(typename)operator(\))operator(\))
    keyword(if) keyword(not) ident(obj) keyword(then)
      ident(obj) operator(=) ident(WIDGET)
    keyword(end)
    ident(iup_handles)operator([)ident(handle)operator(]) operator(=) map<delimiter({) key(parent)operator(=)ident(obj)operator(,) key(handle)operator(=)ident(handle) delimiter(})>
  keyword(end)
  keyword(return) ident(handle)
keyword(end)
ident(iup)operator(.)ident(RegisterHandle) operator(=) ident(IupRegisterHandle)

keyword(function) function(IupGetFromC)operator(()ident(obj)operator(\))
  keyword(local) local_variable(handle) operator(=) ident(IupGetHandle)operator(()ident(obj)operator([)integer(1)operator(])operator(\))
  keyword(return) ident(IupRegisterHandle)operator(()ident(handle)operator(,) ident(IupGetType)operator(()ident(handle)operator(\))operator(\))
keyword(end)

ident(iup)operator(.)ident(GetFromC) operator(=) keyword(function) operator((name\))
  keyword(local) local_variable(handle) operator(=) ident(IupGetHandle)operator(()ident(name)operator(\))
  keyword(return) ident(IupRegisterHandle)operator(()ident(handle)operator(,) ident(IupGetType)operator(()ident(handle)operator(\))operator(\))
keyword(end)


comment(-- #################################################################################)
comment(--                               Widgets)
comment(-- #################################################################################)


comment(-- "type" is used to check the type of each parameter in the creation table)
ident(WIDGET) operator(=) map<delimiter({)key(type) operator(=) map<inline_delimiter({)inline_delimiter(})>delimiter(})>

comment(-- called by the iupxxx functions)
comment(-- obj is a lua table)
keyword(function) ident(WIDGET:)function(Constructor)operator(()ident(obj)operator(\))
  comment(-- the parent of the table is the widget class used to create the control)
  ident(obj)operator(.)ident(parent) operator(=) ident(self)
  
  comment(-- check the table parameters)
  ident(self)operator(:)ident(checkParams)operator(()ident(obj)operator(\))

  comment(-- create the IUP control, calling iupCreateXXX)
  ident(obj)operator(.)ident(handle) operator(=) ident(self)operator(:)ident(CreateIUPelement)operator(()ident(obj)operator(\))

  comment(-- set the parameters that are attributes)
  ident(self)operator(:)ident(setAttributes)operator(()ident(obj)operator(\))

  comment(-- save the table indexed by the handle)
  ident(iup_handles)operator([)ident(obj)operator(.)ident(handle)operator(]) operator(=) ident(obj)

  comment(-- the returned value is the handle, not the table)
  keyword(return) ident(obj)operator(.)ident(handle)
keyword(end)

keyword(function) ident(WIDGET:)function(checkParams) operator(()ident(obj)operator(\))
  keyword(local) local_variable(type) operator(=) ident(self)operator(.)predefined(type)
  keyword(local) local_variable(param)operator(,) local_variable(func) operator(=) predefined(next)operator(()predefined(type)operator(,) predefined_constant(nil)operator(\))
  keyword(while) ident(param) keyword(do)
    keyword(if) keyword(not) ident(func)operator(()ident(obj)operator([)ident(param)operator(])operator(\)) keyword(then)
      predefined(error)operator(()string<delimiter(")content(parameter )delimiter(")> operator(.)operator(.) ident(param) operator(.)operator(.) string<delimiter(")content( has wrong value or is not initialized)delimiter(")>operator(\))
    keyword(end)
    ident(param)operator(,) ident(func) operator(=) predefined(next)operator(()predefined(type)operator(,) ident(param)operator(\))
  keyword(end)
keyword(end)

keyword(function) ident(WIDGET:)function(setAttributes) operator(()ident(obj)operator(\))
  keyword(local) local_variable(temp) operator(=) map<delimiter({)delimiter(})>
  keyword(local) local_variable(f) operator(=) predefined(next)operator(()ident(obj)operator(,) predefined_constant(nil)operator(\))
  keyword(while) ident(f) keyword(do)
    ident(temp)operator([)ident(f)operator(]) operator(=) integer(1)
    ident(f) operator(=) predefined(next)operator(()ident(obj)operator(,) ident(f)operator(\))
  keyword(end)
  ident(f) operator(=) predefined(next)operator(()ident(temp)operator(,) predefined_constant(nil)operator(\))
  keyword(while) ident(f) keyword(do)
    ident(obj)operator(:)ident(set) operator(()ident(f)operator(,) ident(obj)operator([)ident(f)operator(])operator(\))
    ident(f) operator(=) predefined(next)operator(()ident(temp)operator(,) ident(f)operator(\))
  keyword(end)
keyword(end)

keyword(function) ident(WIDGET:)function(get)operator(()ident(index)operator(\))
  keyword(if) ident(type_string) operator(()ident(index)operator(\)) keyword(then)
    keyword(if) operator(()ident(iup_callbacks)operator([)ident(index)operator(])operator(\)) keyword(then)
      keyword(return) ident(self)operator([)ident(index)operator(])
    keyword(else)  
      keyword(local) local_variable(INDEX) operator(=) ident(strupper) operator(()ident(index)operator(\))
      keyword(local) local_variable(value) operator(=) ident(IupGetAttribute) operator(()ident(self)operator(.)ident(handle)operator(,) ident(INDEX)operator(\))
      keyword(if) ident(value) keyword(then)
        keyword(local) local_variable(handle) operator(=) ident(IupGetHandle) operator(()ident(value)operator(\))
        keyword(if) ident(handle) keyword(then)
          keyword(return) ident(handle)
        keyword(else)
          keyword(return) ident(value)
        keyword(end)
      keyword(end)
    keyword(end)  
  keyword(end)
  keyword(return) ident(self)operator([)ident(index)operator(])
keyword(end)

keyword(function) ident(WIDGET:)function(set)operator(()ident(index)operator(,) ident(value)operator(\))
  keyword(if) ident(type_string) operator(()ident(index)operator(\)) keyword(then)
    keyword(local) local_variable(INDEX) operator(=) ident(strupper) operator(()ident(index)operator(\))
    keyword(local) local_variable(cb) operator(=) ident(iup_callbacks)operator([)ident(index)operator(])
    
    comment(-- workaround for resize attribute in dialog  )
    keyword(if) operator(()ident(index) operator(=)operator(=) string<delimiter(")content(resize)delimiter(")> keyword(and) ident(IupGetType)operator(()ident(self)operator(.)ident(handle)operator(\)) operator(=)operator(=) string<delimiter(")content(dialog)delimiter(")>operator(\)) keyword(then)
      ident(cb) operator(=) predefined_constant(nil)
    keyword(end)
   
    keyword(if) operator(()ident(cb)operator(\)) keyword(then)
      keyword(local) local_variable(func) operator(=) ident(cb)operator([)integer(2)operator(])
      keyword(if) operator(()keyword(not) ident(func)operator(\)) keyword(then)
        ident(func) operator(=) ident(cb)operator([)ident(IupGetType)operator(()ident(self)operator(.)ident(handle)operator(\))operator(])
      keyword(end)
      ident(iupSetCallback)operator(()ident(self)operator(.)ident(handle)operator(,) ident(cb)operator([)integer(1)operator(])operator(,) ident(func)operator(,) ident(value)operator(\))
      ident(self)operator([)ident(index)operator(]) operator(=) ident(value)
      keyword(return)
    keyword(elseif) ident(type_string)operator(()ident(value)operator(\)) keyword(or) ident(type_number)operator(()ident(value)operator(\)) keyword(then)
      ident(IupSetAttribute)operator(()ident(self)operator(.)ident(handle)operator(,) ident(INDEX)operator(,) ident(value)operator(\))
      keyword(return)
    keyword(elseif) ident(type_nil)operator(()ident(value)operator(\)) keyword(then)
       keyword(local) local_variable(old_value) operator(=) ident(IupGetAttribute)operator(()ident(self)operator(.)ident(handle)operator(,) ident(INDEX)operator(\))
       keyword(if) ident(old_value) keyword(then)
          ident(IupSetAttribute)operator(()ident(self)operator(.)ident(handle)operator(,) ident(INDEX)operator(,) ident(value)operator(\))
          keyword(return)
       keyword(end)
    keyword(elseif) ident(type_widget)operator(()ident(value)operator(\)) keyword(then)
      ident(iupSetName)operator(()ident(value)operator(\))
      ident(IupSetAttribute)operator(()ident(self)operator(.)ident(handle)operator(,) ident(INDEX)operator(,) ident(value)operator(.)ident(IUP_name)operator(\))
      keyword(return)
    keyword(end)
  keyword(end)
  ident(self)operator([)ident(index)operator(]) operator(=) ident(value)
keyword(end)

keyword(function) ident(WIDGET:)function(r_destroy)operator(()operator(\))
  keyword(local) local_variable(i) operator(=) integer(1)
  keyword(local) local_variable(elem) operator(=) ident(self)operator([)ident(i)operator(])
  keyword(while) ident(elem) keyword(do)
    keyword(if) ident(type_widget) operator(()ident(elem)operator(\)) keyword(and) ident(elem)operator(.)ident(IUP_parent) keyword(then)
      keyword(if) ident(elem)operator(.)ident(IUP_parent) operator(=)operator(=) ident(self) keyword(then)
        ident(elem)operator(.)ident(IUP_parent) operator(=) predefined_constant(nil)
        ident(elem)operator(:)ident(r_destroy) operator(()operator(\))
      keyword(else)    comment(-- wrong parent)
        predefined(error) operator(()string<delimiter(")content(Internal table inconsistency)delimiter(")>operator(\))
        ident(exit)operator(()operator(\))
      keyword(end)
    keyword(end)

    ident(i) operator(=) ident(i) operator(+) integer(1)
    ident(elem) operator(=) ident(self)operator([)ident(i)operator(])
  keyword(end)
  ident(iup_handles)operator([)ident(self)operator(]) operator(=) predefined_constant(nil)
keyword(end)

keyword(function) ident(WIDGET:)function(destroy)operator(()operator(\))
  ident(self)operator(:)ident(r_destroy) operator(()operator(\))
  ident(IupDestroy) operator(()ident(self)operator(\))
keyword(end)

keyword(function) ident(WIDGET:)function(detach)operator(()operator(\))
  ident(IupDetach) operator(()ident(self)operator(\))
  keyword(local) local_variable(parent) operator(=) ident(self)operator(.)ident(IUP_parent)
  keyword(if) ident(parent) keyword(then)
    ident(self)operator(.)ident(IUP_parent) operator(=) predefined_constant(nil)
    keyword(local) local_variable(i) operator(=) integer(1)
    keyword(while) ident(parent)operator([)ident(i)operator(]) keyword(do)
      keyword(if) ident(parent)operator([)ident(i)operator(]) operator(=)operator(=) ident(self) keyword(then)
        keyword(while) ident(parent)operator([)ident(i)operator(+)integer(1)operator(]) keyword(do)
        ident(parent)operator([)ident(i)operator(]) operator(=) ident(parent)operator([)ident(i)operator(+)integer(1)operator(])
        ident(i) operator(=) ident(i)operator(+)integer(1)
        keyword(end)
        ident(parent)operator([)ident(i)operator(]) operator(=) predefined_constant(nil)
        keyword(return)
      keyword(end)
      ident(i) operator(=) ident(i)operator(+)integer(1)
    keyword(end)
  keyword(end)
keyword(end)

keyword(function) ident(WIDGET:)function(append)operator(()ident(o)operator(\))
  keyword(if) ident(IupAppend) operator(()ident(self)operator(,) ident(o)operator(\)) keyword(then)
    ident(o)operator(.)ident(IUP_parent) operator(=) ident(self)
    keyword(local) local_variable(i) operator(=) integer(1)
    keyword(while) ident(self)operator([)ident(i)operator(]) keyword(do)
      keyword(if) ident(self)operator([)ident(i)operator(]) operator(=)operator(=) ident(o) keyword(then)
        keyword(return) ident(i)
      keyword(end)
      ident(i) operator(=) ident(i)operator(+)integer(1)
    keyword(end)
    ident(iup_handles)operator([)ident(self)operator(])operator([)ident(i)operator(]) operator(=) ident(o)
    keyword(return) ident(i)
  keyword(else)
    keyword(return) predefined_constant(nil)
  keyword(end)
keyword(end)

keyword(function) ident(WIDGET:)function(map)operator(()operator(\))
  keyword(return) ident(IupMap)operator(()ident(self)operator(\))
keyword(end)

keyword(function) ident(WIDGET:)function(hide)operator(()operator(\))
  keyword(return) ident(IupHide)operator(()ident(self)operator(\))
keyword(end)


comment(-- ###############)
ident(IUPTIMER) operator(=) map<delimiter({)key(parent) operator(=) ident(WIDGET)delimiter(})>

keyword(function) ident(IUPTIMER:)function(CreateIUPelement) operator(()ident(obj)operator(\))
  keyword(return) ident(iupCreateTimer)operator(()operator(\))
keyword(end)

keyword(function) function(iuptimer)operator(()ident(o)operator(\))
  keyword(return) ident(IUPTIMER)operator(:)ident(Constructor)operator(()ident(o)operator(\))
keyword(end)
ident(iup)operator(.)ident(timer) operator(=) ident(iuptimer)


comment(-- ###############)
ident(IUPDIALOG) operator(=) map<delimiter({)key(parent) operator(=) ident(WIDGET)operator(,) key(type) operator(=) map<inline_delimiter({)ident(type_widget)inline_delimiter(})>delimiter(})>

keyword(function) ident(IUPDIALOG:)function(CreateIUPelement) operator(()ident(obj)operator(\))
  keyword(local) local_variable(handle) operator(=) ident(iupCreateDialog)operator(()ident(obj)operator([)integer(1)operator(])operator(\))
  ident(obj)operator([)integer(1)operator(])operator(.)ident(IUP_parent) operator(=) ident(handle)
  keyword(return) ident(handle)
keyword(end)

keyword(function) ident(IUPDIALOG:)function(show) operator(()operator(\))
  keyword(return) ident(IupShow)operator(()ident(self)operator(\))
keyword(end)

keyword(function) ident(IUPDIALOG:)function(showxy) operator(()ident(x)operator(,)ident(y)operator(\))
  keyword(return) ident(IupShowXY)operator(()ident(self)operator(,) ident(x)operator(,) ident(y)operator(\))
keyword(end)

keyword(function) ident(IUPDIALOG:)function(popup) operator(()ident(x)operator(,) ident(y)operator(\))
  keyword(return) ident(IupPopup) operator(()ident(self)operator(,) ident(x)operator(,) ident(y)operator(\))
keyword(end)

keyword(function) function(iupdialog) operator(()ident(o)operator(\))
  keyword(return) ident(IUPDIALOG)operator(:)ident(Constructor) operator(()ident(o)operator(\))
keyword(end)
ident(iup)operator(.)ident(dialog) operator(=) ident(iupdialog)


comment(-- ###############)
ident(IUPRADIO) operator(=) map<delimiter({)key(parent) operator(=) ident(WIDGET)operator(,) key(type) operator(=) map<inline_delimiter({)ident(type_widget)inline_delimiter(})>delimiter(})>

keyword(function) ident(IUPRADIO:)function(CreateIUPelement) operator(()ident(obj)operator(\))
  keyword(local) local_variable(handle) operator(=) ident(iupCreateRadio) operator(()ident(obj)operator([)integer(1)operator(])operator(\))
  ident(obj)operator([)integer(1)operator(])operator(.)ident(IUP_parent) operator(=) ident(handle)
  keyword(return) ident(handle)
keyword(end)

keyword(function) function(iupradio) operator(()ident(o)operator(\))
  keyword(local) local_variable(handle) operator(=) ident(IUPRADIO)operator(:)ident(Constructor) operator(()ident(o)operator(\))
  ident(iupCreateChildrenNames) operator(()ident(handle)operator([)integer(1)operator(])operator(\))
  keyword(return) ident(handle)
keyword(end)
ident(iup)operator(.)ident(radio) operator(=) ident(iupradio)

comment(-- OLD STUFF)
keyword(function) function(edntoggles) operator(()ident(h)operator(\))
  keyword(local) local_variable(tmp) operator(=) map<delimiter({)delimiter(})>
  keyword(local) local_variable(i) operator(=) integer(1)
  keyword(while) ident(h)operator([)ident(i)operator(]) keyword(do)
    keyword(if) ident(type_string) operator(()ident(h)operator([)ident(i)operator(])operator(\)) keyword(then)
      ident(tmp)operator([)ident(i)operator(]) operator(=) ident(iuptoggle)map<delimiter({)key(title) operator(=) ident(h)operator([)ident(i)operator(])operator(,) key(action) operator(=) ident(h)operator(.)ident(action)delimiter(})>
    keyword(else)
      predefined(error) operator(()string<delimiter(")content(option )delimiter(")>operator(.)operator(.)ident(i)operator(.)operator(.)string<delimiter(")content( must be a string)delimiter(")>operator(\))
    keyword(end)
    ident(i) operator(=) ident(i) operator(+) integer(1)
  keyword(end)

  keyword(if) ident(h)operator(.)ident(value) keyword(then)
    keyword(local) local_variable(j) operator(=) integer(1)
    keyword(while) ident(h)operator([)ident(j)operator(]) keyword(and) operator(()ident(h)operator([)ident(j)operator(]) operator(~)operator(=) ident(h)operator(.)ident(value)operator(\)) keyword(do)
      ident(j) operator(=) ident(j) operator(+) integer(1)
    keyword(end)
    keyword(if) ident(h)operator([)ident(j)operator(]) keyword(then)
      ident(tmp)operator(.)ident(value) operator(=) ident(tmp)operator([)ident(j)operator(])
    keyword(end)
  keyword(elseif) ident(h)operator(.)ident(nvalue) keyword(then)
    ident(tmp)operator(.)ident(value) operator(=) ident(tmp)operator([)ident(h)operator(.)ident(nvalue)operator(])
  keyword(end)

  keyword(return) ident(tmp)
keyword(end)

comment(-- OLD STUFF)
keyword(function) function(edhradio) operator(()ident(o)operator(\))
  keyword(local) local_variable(toggles) operator(=) ident(edntoggles) operator(()ident(o)operator(\))
  keyword(return) ident(iupradio)map<delimiter({)ident(edhbox) operator(()ident(toggles)operator(\))operator(;) key(value) operator(=) ident(toggles)operator(.)ident(value)delimiter(})>
keyword(end)

comment(-- OLD STUFF)
keyword(function) function(edvradio) operator(()ident(o)operator(\))
  keyword(local) local_variable(toggles) operator(=) ident(edntoggles) operator(()ident(o)operator(\))
  keyword(return) ident(iupradio)map<delimiter({)ident(edvbox) operator(()ident(toggles)operator(\))operator(;) key(value) operator(=) ident(toggles)operator(.)ident(value)delimiter(})>
keyword(end)


comment(-- ###############)
ident(IUPMENU) operator(=) map<delimiter({)key(parent) operator(=) ident(WIDGET)delimiter(})>

keyword(function) ident(IUPMENU:)function(checkParams) operator(()ident(obj)operator(\))
  keyword(local) local_variable(i) operator(=) integer(1)
  keyword(while) ident(obj)operator([)ident(i)operator(]) keyword(do)
    keyword(local) local_variable(o) operator(=) ident(obj)operator([)ident(i)operator(])
    keyword(if) keyword(not) ident(type_item) operator(()ident(o)operator(\)) keyword(then)   comment(-- not a menu item)
      keyword(if) predefined(type) operator(()ident(o)operator(\)) operator(~)operator(=) string<delimiter(')content(table)delimiter(')> keyword(then)
        predefined(error)operator(()string<delimiter(")content(parameter )delimiter(")> operator(.)operator(.) ident(i) operator(.)operator(.) string<delimiter(")content( is not a table nor a menu item)delimiter(")>operator(\))
      keyword(elseif) operator(()ident(o)operator([)integer(1)operator(]) keyword(and) keyword(not) ident(type_string) operator(()ident(o)operator([)integer(1)operator(])operator(\))operator(\)) keyword(then)
        predefined(error)operator(()string<delimiter(")content(parameter )delimiter(")> operator(.)operator(.) ident(i) operator(.)operator(.) string<delimiter(")content( does not have a string title)delimiter(")>operator(\))
      keyword(elseif) operator(()ident(o)operator([)integer(2)operator(]) keyword(and) keyword(not) ident(type_string) operator(()ident(o)operator([)integer(2)operator(])operator(\)) keyword(and) keyword(not) ident(type_function) operator(()ident(o)operator([)integer(2)operator(])operator(\))
              keyword(and) keyword(not) ident(type_widget) operator(()ident(o)operator([)integer(2)operator(])operator(\))operator(\)) keyword(then)
        predefined(error)operator(()string<delimiter(")content(parameter )delimiter(")> operator(.)operator(.) ident(i) operator(.)operator(.) string<delimiter(")content( does not have an action nor a menu)delimiter(")>operator(\))
      keyword(end)
    keyword(end)
    ident(i) operator(=) ident(i) operator(+) integer(1)
  keyword(end)
keyword(end)

keyword(function) ident(IUPMENU:)function(CreateIUPelement) operator(()ident(obj)operator(\))
  keyword(local) local_variable(handle) operator(=) ident(iupCreateMenu) operator(()operator(\))
  keyword(local) local_variable(i) operator(=) integer(1)
  keyword(while) ident(obj)operator([)ident(i)operator(]) keyword(do)
    keyword(local) local_variable(o) operator(=) ident(obj)operator([)ident(i)operator(])
    keyword(local) local_variable(elem)
    keyword(if) ident(type_widget) operator(()ident(o)operator(\)) keyword(then)  comment(-- predefined)
      ident(elem) operator(=) ident(o)
    keyword(elseif) keyword(not) ident(o)operator([)integer(1)operator(]) keyword(then)     comment(-- Separator)
      ident(elem) operator(=) ident(iupseparator) map<delimiter({)delimiter(})>
    keyword(elseif) ident(type_widget) operator(()ident(o)operator([)integer(2)operator(])operator(\)) keyword(then)    comment(-- SubMenu)
      ident(o)operator(.)ident(title) operator(=) ident(o)operator([)integer(1)operator(])
      ident(o)operator([)integer(1)operator(]) operator(=) ident(o)operator([)integer(2)operator(])
      ident(o)operator([)integer(2)operator(]) operator(=) predefined_constant(nil)
      ident(elem) operator(=) ident(iupsubmenu)operator(()ident(o)operator(\))
    keyword(else)          comment(-- Item)
      ident(o)operator(.)ident(title) operator(=) ident(o)operator([)integer(1)operator(])
      ident(o)operator(.)ident(action) operator(=) ident(o)operator([)integer(2)operator(])
      ident(o)operator([)integer(1)operator(]) operator(=) predefined_constant(nil)
      ident(o)operator([)integer(2)operator(]) operator(=) predefined_constant(nil)
      ident(elem) operator(=) ident(iupitem)operator(()ident(o)operator(\))
    keyword(end)
    ident(IupAppend) operator(()ident(handle)operator(,) ident(elem)operator(\))
    ident(elem)operator(.)ident(IUP_parent) operator(=) ident(handle)
    ident(obj)operator([)ident(i)operator(]) operator(=) ident(elem)
    ident(i) operator(=) ident(i) operator(+) integer(1)
  keyword(end)
  keyword(return) ident(handle)
keyword(end)

keyword(function) function(iupmenu) operator(()ident(o)operator(\))
  keyword(return) ident(IUPMENU)operator(:)ident(Constructor) operator(()ident(o)operator(\))
keyword(end)
ident(iup)operator(.)ident(menu) operator(=) ident(iupmenu)

keyword(function) ident(IUPMENU:)function(popup) operator(()ident(x)operator(,) ident(y)operator(\))
  keyword(return) ident(IupPopup) operator(()ident(self)operator(,) ident(x)operator(,) ident(y)operator(\))
keyword(end)


comment(-- ###############)
ident(COMPOSITION) operator(=) map<delimiter({)key(parent) operator(=) ident(WIDGET)delimiter(})>

keyword(function) ident(COMPOSITION:)function(checkParams) operator(()ident(obj)operator(\))
  keyword(local) local_variable(i) operator(=) integer(1)
  keyword(while) ident(obj)operator([)ident(i)operator(]) keyword(do)
    keyword(if) keyword(not) ident(type_widget) operator(()ident(obj)operator([)ident(i)operator(])operator(\)) keyword(then)
      predefined(error)operator(()string<delimiter(")content(parameter )delimiter(")> operator(.)operator(.) ident(i) operator(.)operator(.) string<delimiter(")content( has wrong value or is not initialized)delimiter(")>operator(\))
    keyword(end)
    ident(i) operator(=) ident(i) operator(+) integer(1)
  keyword(end)
keyword(end)

keyword(function) ident(COMPOSITION:)function(CreateIUPelement) operator(()ident(obj)operator(\))
  keyword(local) local_variable(handle) operator(=) ident(self)operator(:)ident(CreateBoxElement) operator(()operator(\))
  keyword(local) local_variable(filled) operator(=) ident(obj)operator(.)ident(filled)
  keyword(local) local_variable(i) operator(=) integer(1)
  keyword(local) local_variable(n) operator(=) integer(0)
  keyword(while) ident(obj)operator([)ident(i)operator(]) keyword(do)
    ident(n) operator(=) ident(n) operator(+) integer(1)
    ident(i) operator(=) ident(i) operator(+) integer(1)
  keyword(end)
  ident(i) operator(=) integer(1)

  keyword(if) ident(filled) operator(=)operator(=) ident(IUP_YES) keyword(then) 
    ident(obj)operator([)ident(i)operator(+)ident(n)operator(]) operator(=) ident(iupfill)map<delimiter({)delimiter(})>
    ident(IupAppend) operator(()ident(handle)operator(,) ident(obj)operator([)ident(i)operator(+)ident(n)operator(])operator(\))
    ident(obj)operator([)ident(i)operator(+)ident(n)operator(])operator(.)ident(IUP_parent) operator(=) ident(handle)
  keyword(end)

  keyword(while) ident(i) operator(<)operator(=) ident(n) keyword(do)
    ident(IupAppend) operator(()ident(handle)operator(,) ident(obj)operator([)ident(i)operator(])operator(\))
    ident(obj)operator([)ident(i)operator(])operator(.)ident(IUP_parent) operator(=) ident(handle)
    ident(i) operator(=) ident(i) operator(+) integer(1)
    keyword(if) ident(filled) operator(=)operator(=) ident(IUP_YES) keyword(then) 
      ident(obj)operator([)ident(i)operator(+)ident(n)operator(]) operator(=) ident(iupfill)map<delimiter({)delimiter(})>
      ident(IupAppend) operator(()ident(handle)operator(,) ident(obj)operator([)ident(i)operator(+)ident(n)operator(])operator(\))
      ident(obj)operator([)ident(i)operator(+)ident(n)operator(])operator(.)ident(IUP_parent) operator(=) ident(handle)
    keyword(end)
  keyword(end)
  keyword(return) ident(handle)
keyword(end)


comment(-- ###############)
ident(IUPHBOX) operator(=) map<delimiter({)key(parent) operator(=) ident(COMPOSITION)delimiter(})>

keyword(function) ident(IUPHBOX:)function(CreateBoxElement) operator(()operator(\))
  keyword(return) ident(iupCreateHbox) operator(()operator(\))
keyword(end)

keyword(function) function(iuphbox) operator(()ident(o)operator(\))
  keyword(return) ident(IUPHBOX)operator(:)ident(Constructor) operator(()ident(o)operator(\))
keyword(end)
ident(iup)operator(.)ident(hbox) operator(=) ident(iuphbox)

comment(-- OLD STUFF)
keyword(function) function(edhbox) operator(()ident(o)operator(\))
  ident(o)operator(.)ident(filled) operator(=) ident(IUP_YES)
  keyword(return) ident(IUPHBOX)operator(:)ident(Constructor) operator(()ident(o)operator(\))
keyword(end)

comment(-- OLD STUFF)
keyword(function) function(edfield) operator(()ident(f)operator(\))
  keyword(local) local_variable(l)operator(,) local_variable(t)
  keyword(if) operator(()ident(type_string) operator(()ident(f)operator(.)ident(prompt)operator(\)) keyword(or) ident(type_number) operator(()ident(f)operator(.)ident(prompt)operator(\))operator(\)) keyword(then)
    ident(l) operator(=) ident(iuplabel) map<delimiter({)key(title) operator(=) ident(f)operator(.)ident(prompt)delimiter(})>
  keyword(else)
    predefined(error) operator(()string<delimiter(")content(parameter prompt has wrong value or is not initialized)delimiter(")>operator(\))
  keyword(end)
  keyword(if) ident(f)operator(.)ident(value) keyword(then)
    ident(t) operator(=) ident(iuptext) map<delimiter({)key(value) operator(=) ident(f)operator(.)ident(value)delimiter(})>
  keyword(else)
    ident(t) operator(=) ident(iuptext) map<delimiter({)key(value) operator(=) ident(f)operator(.)ident(nvalue)delimiter(})>
  keyword(end)
  keyword(if) ident(t) keyword(and) ident(l) keyword(then)
    keyword(return) ident(edhbox) map<delimiter({)ident(l)operator(,) ident(t)delimiter(})>
  keyword(else)
    keyword(return) predefined_constant(nil)
  keyword(end)
keyword(end)


comment(-- ###############)
ident(IUPVBOX) operator(=) map<delimiter({)key(parent) operator(=) ident(COMPOSITION)delimiter(})>

keyword(function) ident(IUPVBOX:)function(CreateBoxElement) operator(()operator(\))
  keyword(return) ident(iupCreateVbox) operator(()operator(\))
keyword(end)

keyword(function) function(iupvbox) operator(()ident(o)operator(\))
  keyword(return) ident(IUPVBOX)operator(:)ident(Constructor) operator(()ident(o)operator(\))
keyword(end)
ident(iup)operator(.)ident(vbox) operator(=) ident(iupvbox)

comment(-- OLD STUFF)
keyword(function) function(edvbox) operator(()ident(o)operator(\))
  ident(o)operator(.)ident(filled) operator(=) ident(IUP_YES)
  keyword(return) ident(IUPVBOX)operator(:)ident(Constructor) operator(()ident(o)operator(\))
keyword(end)


comment(-- ###############)
ident(IUPZBOX) operator(=) map<delimiter({)key(parent) operator(=) ident(COMPOSITION)delimiter(})>

keyword(function) ident(IUPZBOX:)function(CreateBoxElement) operator(()operator(\))
  keyword(return) ident(iupCreateZbox) operator(()operator(\))
keyword(end)

keyword(function) function(iupzbox) operator(()ident(obj)operator(\))
  keyword(local) local_variable(handle) operator(=) ident(IUPZBOX)operator(:)ident(Constructor) operator(()ident(obj)operator(\))
  keyword(local) local_variable(i) operator(=) integer(1)
  keyword(while) ident(obj)operator([)ident(i)operator(]) keyword(do)
    ident(iupSetName)operator(()ident(handle)operator([)ident(i)operator(])operator(\))
    ident(i) operator(=) ident(i)operator(+)integer(1)
  keyword(end)
  keyword(return) ident(handle)
keyword(end)
ident(iup)operator(.)ident(zbox) operator(=) ident(iupzbox)


comment(-- ###############)
ident(IUPFILL) operator(=) map<delimiter({)key(parent) operator(=) ident(WIDGET)delimiter(})>

keyword(function) ident(IUPFILL:)function(CreateIUPelement) operator(()ident(obj)operator(\))
  keyword(return) ident(iupCreateFill) operator(()operator(\))
keyword(end)

keyword(function) function(iupfill) operator(()ident(o)operator(\))
  keyword(return) ident(IUPFILL)operator(:)ident(Constructor) operator(()ident(o)operator(\))
keyword(end)
ident(iup)operator(.)ident(fill) operator(=) ident(iupfill)


comment(-- ###############)
ident(IUPBUTTON) operator(=) map<delimiter({)key(parent) operator(=) ident(WIDGET)operator(,) key(type) operator(=) map<inline_delimiter({)key(title) operator(=) ident(type_string)inline_delimiter(})>delimiter(})>

keyword(function) ident(IUPBUTTON:)function(CreateIUPelement) operator(()ident(obj)operator(\))
  keyword(if) keyword(not) ident(obj)operator(.)ident(title) keyword(and) ident(obj)operator(.)ident(image) keyword(then)
    ident(obj)operator(.)ident(title)operator(=)string<delimiter(')delimiter(')>
  keyword(end)
  keyword(return) ident(iupCreateButton)operator(()ident(obj)operator(.)ident(title)operator(\))
keyword(end)

keyword(function) function(iupbutton) operator(()ident(o)operator(\))
  keyword(return) ident(IUPBUTTON)operator(:)ident(Constructor) operator(()ident(o)operator(\))
keyword(end)
ident(iup)operator(.)ident(button) operator(=) ident(iupbutton)


comment(-- ###############)
ident(IUPTEXT) operator(=) map<delimiter({)key(parent) operator(=) ident(WIDGET)delimiter(})>

keyword(function) ident(IUPTEXT:)function(CreateIUPelement) operator(()ident(obj)operator(\))
  keyword(return) ident(iupCreateText)operator(()operator(\))
keyword(end)

keyword(function) function(iuptext) operator(()ident(o)operator(\))
  keyword(return) ident(IUPTEXT)operator(:)ident(Constructor) operator(()ident(o)operator(\))
keyword(end)
ident(iup)operator(.)ident(text) operator(=) ident(iuptext)


comment(-- ###############)
ident(IUPMULTILINE) operator(=) map<delimiter({)key(parent) operator(=) ident(IUPTEXT)delimiter(})>

keyword(function) ident(IUPMULTILINE:)function(CreateIUPelement) operator(()ident(obj)operator(\))
  keyword(return) ident(iupCreateMultiLine)operator(()operator(\))
keyword(end)

keyword(function) function(iupmultiline) operator(()ident(o)operator(\))
  keyword(return) ident(IUPMULTILINE)operator(:)ident(Constructor) operator(()ident(o)operator(\))
keyword(end)
ident(iup)operator(.)ident(multiline) operator(=) ident(iupmultiline)


comment(-- ###############)
ident(IUPLABEL) operator(=) map<delimiter({)key(parent) operator(=) ident(WIDGET)operator(,) key(type) operator(=) map<inline_delimiter({)key(title) operator(=) ident(type_string)inline_delimiter(})>delimiter(})>

keyword(function) ident(IUPLABEL:)function(CreateIUPelement) operator(()ident(obj)operator(\))
  keyword(if) keyword(not) ident(obj)operator(.)ident(title) keyword(and) ident(obj)operator(.)ident(image) keyword(then)
    ident(obj)operator(.)ident(title)operator(=)string<delimiter(')delimiter(')>
  keyword(end)
  keyword(return) ident(iupCreateLabel) operator(()ident(obj)operator(.)ident(title)operator(\))
keyword(end)

keyword(function) function(iuplabel) operator(()ident(o)operator(\))
  keyword(return) ident(IUPLABEL)operator(:)ident(Constructor) operator(()ident(o)operator(\))
keyword(end)
ident(iup)operator(.)ident(label) operator(=) ident(iuplabel)


comment(-- ###############)
ident(IUPTOGGLE) operator(=) map<delimiter({)key(parent) operator(=) ident(IUPBUTTON)delimiter(})>

keyword(function) ident(IUPTOGGLE:)function(CreateIUPelement) operator(()ident(obj)operator(\))
  keyword(return) ident(iupCreateToggle) operator(()ident(obj)operator(.)ident(title)operator(\))
keyword(end)

keyword(function) function(iuptoggle) operator(()ident(o)operator(\))
  keyword(return) ident(IUPTOGGLE)operator(:)ident(Constructor) operator(()ident(o)operator(\))
keyword(end)
ident(iup)operator(.)ident(toggle) operator(=) ident(iuptoggle)


comment(-- ###############)
ident(IUPITEM) operator(=) map<delimiter({)key(parent) operator(=) ident(IUPBUTTON)delimiter(})>

keyword(function) ident(IUPITEM:)function(CreateIUPelement) operator(()ident(obj)operator(\))
  keyword(return) ident(iupCreateItem) operator(()ident(obj)operator(.)ident(title)operator(\))
keyword(end)

keyword(function) function(iupitem) operator(()ident(o)operator(\))
  keyword(return) ident(IUPITEM)operator(:)ident(Constructor) operator(()ident(o)operator(\))
keyword(end)
ident(iup)operator(.)ident(item) operator(=) ident(iupitem)


comment(-- ###############)
ident(IUPSUBMENU) operator(=) map<delimiter({)key(parent) operator(=) ident(WIDGET)operator(,) key(type) operator(=) map<inline_delimiter({)ident(type_menu)operator(;) key(title) operator(=) ident(type_string)inline_delimiter(})>delimiter(})>

keyword(function) ident(IUPSUBMENU:)function(CreateIUPelement) operator(()ident(obj)operator(\))
  keyword(local) local_variable(h) operator(=) ident(iupCreateSubmenu) operator(()ident(obj)operator(.)ident(title)operator(,) ident(obj)operator([)integer(1)operator(])operator(\))
  ident(obj)operator([)integer(1)operator(])operator(.)ident(IUP_parent) operator(=) ident(h)
  keyword(return) ident(h)
keyword(end)

keyword(function) function(iupsubmenu) operator(()ident(o)operator(\))
  keyword(return) ident(IUPSUBMENU)operator(:)ident(Constructor) operator(()ident(o)operator(\))
keyword(end)
ident(iup)operator(.)ident(submenu) operator(=) ident(iupsubmenu)


comment(-- ###############)
ident(IUPSEPARATOR) operator(=) map<delimiter({)key(parent) operator(=) ident(WIDGET)delimiter(})>

keyword(function) ident(IUPSEPARATOR:)function(CreateIUPelement) operator(()ident(obj)operator(\))
  keyword(return) ident(iupCreateSeparator) operator(()operator(\))
keyword(end)

keyword(function) function(iupseparator) operator(()ident(o)operator(\))
  keyword(return) ident(IUPSEPARATOR)operator(:)ident(Constructor) operator(()ident(o)operator(\))
keyword(end)
ident(iup)operator(.)ident(separator) operator(=) ident(iupseparator)


comment(-- ###############)
ident(IUPFILEDLG) operator(=) map<delimiter({)key(parent) operator(=) ident(WIDGET)delimiter(})>

keyword(function) ident(IUPFILEDLG:)function(popup) operator(()ident(x)operator(,) ident(y)operator(\))
  keyword(return) ident(IupPopup) operator(()ident(self)operator(,) ident(x)operator(,) ident(y)operator(\))
keyword(end)

keyword(function) ident(IUPFILEDLG:)function(CreateIUPelement) operator(()operator(\))
  keyword(return) ident(iupCreateFileDlg) operator(()operator(\))
keyword(end)

keyword(function) function(iupfiledlg) operator(()ident(o)operator(\))
  keyword(return) ident(IUPFILEDLG)operator(:)ident(Constructor) operator(()ident(o)operator(\))
keyword(end)
ident(iup)operator(.)ident(filedlg) operator(=) ident(iupfiledlg)


comment(-- ###############)
ident(IUPMESSAGEDLG) operator(=) map<delimiter({)key(parent) operator(=) ident(WIDGET)delimiter(})>

keyword(function) ident(IUPMESSAGEDLG:)function(popup) operator(()ident(x)operator(,) ident(y)operator(\))
  keyword(return) ident(IupPopup) operator(()ident(self)operator(,) ident(x)operator(,) ident(y)operator(\))
keyword(end)

keyword(function) ident(IUPMESSAGEDLG:)function(CreateIUPelement) operator(()operator(\))
  keyword(return) ident(iupCreateMessageDlg) operator(()operator(\))
keyword(end)

keyword(function) function(iupmessagedlg) operator(()ident(o)operator(\))
  keyword(return) ident(IUPMESSAGEDLG)operator(:)ident(Constructor) operator(()ident(o)operator(\))
keyword(end)
ident(iup)operator(.)ident(messagedlg) operator(=) ident(iupmessagedlg)


comment(-- ###############)
ident(IUPCOLORDLG) operator(=) map<delimiter({)key(parent) operator(=) ident(WIDGET)delimiter(})>

keyword(function) ident(IUPCOLORDLG:)function(popup) operator(()ident(x)operator(,) ident(y)operator(\))
  keyword(return) ident(IupPopup) operator(()ident(self)operator(,) ident(x)operator(,) ident(y)operator(\))
keyword(end)

keyword(function) ident(IUPCOLORDLG:)function(CreateIUPelement) operator(()operator(\))
  keyword(return) ident(iupCreateColorDlg) operator(()operator(\))
keyword(end)

keyword(function) function(iupcolordlg) operator(()ident(o)operator(\))
  keyword(return) ident(IUPCOLORDLG)operator(:)ident(Constructor) operator(()ident(o)operator(\))
keyword(end)
ident(iup)operator(.)ident(colordlg) operator(=) ident(iupcolordlg)


comment(-- ###############)
ident(IUPFONTDLG) operator(=) map<delimiter({)key(parent) operator(=) ident(WIDGET)delimiter(})>

keyword(function) ident(IUPFONTDLG:)function(popup) operator(()ident(x)operator(,) ident(y)operator(\))
  keyword(return) ident(IupPopup) operator(()ident(self)operator(,) ident(x)operator(,) ident(y)operator(\))
keyword(end)

keyword(function) ident(IUPFONTDLG:)function(CreateIUPelement) operator(()operator(\))
  keyword(return) ident(iupCreateFontDlg) operator(()operator(\))
keyword(end)

keyword(function) function(iupfontdlg) operator(()ident(o)operator(\))
  keyword(return) ident(IUPFONTDLG)operator(:)ident(Constructor) operator(()ident(o)operator(\))
keyword(end)
ident(iup)operator(.)ident(fontdlg) operator(=) ident(iupfontdlg)


comment(-- ###############)
ident(IUPUSER) operator(=) map<delimiter({)key(parent) operator(=) ident(WIDGET)delimiter(})>

keyword(function) ident(IUPUSER:)function(CreateIUPelement) operator(()operator(\))
  keyword(return) ident(iupCreateUser) operator(()operator(\))
keyword(end)

keyword(function) function(iupuser) operator(()operator(\))
  keyword(return) ident(IUPUSER)operator(:)ident(Constructor) operator(()operator(\))
keyword(end)
ident(iup)operator(.)ident(user) operator(=) ident(iupuser)


comment(-- ###############)
ident(IUPFRAME) operator(=) map<delimiter({)key(parent) operator(=) ident(WIDGET)operator(,) key(type) operator(=) map<inline_delimiter({)ident(type_widget)inline_delimiter(})>delimiter(})>

keyword(function) ident(IUPFRAME:)function(CreateIUPelement) operator(()ident(obj)operator(\))
  keyword(local) local_variable(h) operator(=) ident(iupCreateFrame) operator(()ident(obj)operator([)integer(1)operator(])operator(\))
  ident(obj)operator([)integer(1)operator(])operator(.)ident(IUP_parent) operator(=) ident(h)
  keyword(return) ident(h)
keyword(end)

keyword(function) function(iupframe) operator(()ident(o)operator(\))
  keyword(return) ident(IUPFRAME)operator(:)ident(Constructor) operator(()ident(o)operator(\))
keyword(end)
ident(iup)operator(.)ident(frame) operator(=) ident(iupframe)


comment(-- ###############)
ident(IUPCANVAS) operator(=) map<delimiter({)key(parent) operator(=) ident(WIDGET)delimiter(})>

keyword(function) ident(IUPCANVAS:)function(CreateIUPelement) operator(()ident(obj)operator(\))
  keyword(return) ident(iupCreateCanvas) operator(()operator(\))
keyword(end)

keyword(function) function(iupcanvas) operator(()ident(o)operator(\))
  keyword(return) ident(IUPCANVAS)operator(:)ident(Constructor) operator(()ident(o)operator(\))
keyword(end)
ident(iup)operator(.)ident(canvas) operator(=) ident(iupcanvas)


comment(-- ###############)
ident(IUPLIST) operator(=) map<delimiter({)key(parent) operator(=) ident(WIDGET)delimiter(})>

keyword(function) ident(IUPLIST:)function(CreateIUPelement) operator(()ident(obj)operator(\))
  keyword(return) ident(iupCreateList) operator(()operator(\))
keyword(end)

keyword(function) ident(IUPLIST:)function(get)operator(()ident(index)operator(\))
  keyword(if) predefined(type) operator(()ident(index)operator(\)) operator(=)operator(=) string<delimiter(')content(number)delimiter(')> keyword(then)
    keyword(return) ident(IupGetAttribute) operator(()ident(self)operator(.)ident(handle)operator(,) string<delimiter(")delimiter(")>operator(.)operator(.)ident(index)operator(\))
  keyword(else)
    keyword(return) ident(WIDGET)operator(.)ident(get)operator(()ident(self)operator(,) ident(index)operator(\))
  keyword(end)
keyword(end)

keyword(function) ident(IUPLIST:)function(set) operator(()ident(index)operator(,) ident(value)operator(\))
  keyword(if) predefined(type) operator(()ident(index)operator(\)) operator(=)operator(=) string<delimiter(')content(number)delimiter(')> keyword(then)
    keyword(if) operator(()ident(type_string) operator(()ident(value)operator(\)) keyword(or) ident(type_number) operator(()ident(value)operator(\))operator(\)) keyword(then)
      keyword(return) ident(IupSetAttribute) operator(()ident(self)operator(.)ident(handle)operator(,) string<delimiter(")delimiter(")>operator(.)operator(.)ident(index)operator(,) string<delimiter(")delimiter(")>operator(.)operator(.)ident(value)operator(\))
    keyword(elseif) ident(value) operator(=)operator(=) predefined_constant(nil) keyword(then)
      keyword(return) ident(IupSetAttribute) operator(()ident(self)operator(.)ident(handle)operator(,) string<delimiter(")delimiter(")>operator(.)operator(.)ident(index)operator(,) ident(value)operator(\))
    keyword(end)
  keyword(end)
  keyword(return) ident(WIDGET)operator(.)ident(set)operator(()ident(self)operator(,) ident(index)operator(,) ident(value)operator(\))
keyword(end)

keyword(function) function(iuplist) operator(()ident(o)operator(\))
  keyword(return) ident(IUPLIST)operator(:)ident(Constructor) operator(()ident(o)operator(\))
keyword(end)
ident(iup)operator(.)ident(list) operator(=) ident(iuplist)


comment(-- ###############)
ident(IUPIMAGE) operator(=) map<delimiter({)key(parent) operator(=) ident(WIDGET)delimiter(})>

keyword(function) ident(IUPIMAGE:)function(checkParams) operator(()ident(obj)operator(\))
  keyword(local) local_variable(i) operator(=) integer(1)
  keyword(while) ident(obj)operator([)ident(i)operator(]) keyword(do)
    keyword(local) local_variable(j) operator(=) integer(1)
    keyword(while) ident(obj)operator([)ident(i)operator(])operator([)ident(j)operator(]) keyword(do)
      keyword(if) predefined(type) operator(()ident(obj)operator([)ident(i)operator(])operator([)ident(j)operator(])operator(\)) operator(~)operator(=) string<delimiter(')content(number)delimiter(')> keyword(then)
        predefined(error) operator(()string<delimiter(")content(non-numeric value in image definition)delimiter(")>operator(\))
      keyword(end)
      ident(j) operator(=) ident(j) operator(+) integer(1)
    keyword(end)

    keyword(if) ident(obj)operator(.)ident(width) keyword(and) operator(()ident(j) operator(-) integer(1)operator(\)) operator(~)operator(=) ident(obj)operator(.)ident(width) keyword(then)
      predefined(error) operator(()string<delimiter(")content(inconsistent image lenght)delimiter(")>operator(\))
    keyword(else)
      ident(obj)operator(.)ident(width) operator(=) ident(j) operator(-) integer(1)
    keyword(end)

    ident(i) operator(=) ident(i) operator(+) integer(1)
  keyword(end)
  
  ident(obj)operator(.)ident(height) operator(=) ident(i) operator(-) integer(1)
keyword(end)

keyword(function) ident(IUPIMAGE:)function(CreateIUPelement) operator(()ident(obj)operator(\))
  keyword(local) local_variable(handle) operator(=) ident(iupCreateImage) operator(()ident(obj)operator(.)ident(width)operator(,) ident(obj)operator(.)ident(height)operator(,) ident(obj)operator(\))
  keyword(if) predefined(type) operator(()ident(obj)operator(.)ident(colors)operator(\)) operator(=)operator(=) string<delimiter(')content(table)delimiter(')> keyword(then)
    keyword(local) local_variable(i) operator(=) integer(1)
    keyword(while) ident(obj)operator(.)ident(colors)operator([)ident(i)operator(]) keyword(do)
      ident(IupSetAttribute) operator(()ident(handle)operator(,) ident(i)operator(,) ident(obj)operator(.)ident(colors)operator([)ident(i)operator(])operator(\))
      ident(i) operator(=) ident(i) operator(+) integer(1)
    keyword(end)
  keyword(end)
  keyword(return) ident(handle)
keyword(end)

keyword(function) function(iupimage) operator(()ident(o)operator(\))
  keyword(return) ident(IUPIMAGE)operator(:)ident(Constructor) operator(()ident(o)operator(\))
keyword(end)
ident(iup)operator(.)ident(image) operator(=) ident(iupimage)


ident(IUPIMAGERGB) operator(=) map<delimiter({)key(parent) operator(=) ident(WIDGET)delimiter(})>

keyword(function) ident(IUPIMAGERGB:)function(CreateIUPelement) operator(()ident(obj)operator(\))
  keyword(return) ident(iupCreateImageRGB)operator(()ident(obj)operator(.)ident(width)operator(,) ident(obj)operator(.)ident(height)operator(,) ident(obj)operator(.)ident(pixels)operator(\))
keyword(end)

keyword(function) function(iupimagergb) operator(()ident(o)operator(\))
  keyword(return) ident(IUPIMAGERGB)operator(:)ident(Constructor) operator(()ident(o)operator(\))
keyword(end)
ident(iup)operator(.)ident(imagergb) operator(=) ident(iupimagergb)


ident(IUPIMAGERGBA) operator(=) map<delimiter({)key(parent) operator(=) ident(WIDGET)delimiter(})>

keyword(function) ident(IUPIMAGERGBA:)function(CreateIUPelement) operator(()ident(obj)operator(\))
  keyword(return) ident(iupCreateImageRGBA)operator(()ident(obj)operator(.)ident(width)operator(,) ident(obj)operator(.)ident(height)operator(,) ident(obj)operator(.)ident(pixels)operator(\))
keyword(end)

keyword(function) function(iupimagergba) operator(()ident(o)operator(\))
  keyword(return) ident(IUPIMAGERGBA)operator(:)ident(Constructor) operator(()ident(o)operator(\))
keyword(end)
ident(iup)operator(.)ident(imagergba) operator(=) ident(iupimagergba)


comment(-- #################################################################################)
comment(--                                     Callbacks)
comment(-- #################################################################################)


comment(-- global list of callbacks)
comment(-- index is the Lua callback name)
comment(-- each callback contains the full name, and the C callback)
ident(iup_callbacks) operator(=) 
map<delimiter({)
  key(action)      operator(=) map<inline_delimiter({)string<delimiter(")content(ACTION)delimiter(")>operator(,) predefined_constant(nil)inline_delimiter(})>operator(,)
  key(actioncb)    operator(=) map<inline_delimiter({)string<delimiter(")content(ACTION_CB)delimiter(")>operator(,) predefined_constant(nil)inline_delimiter(})>operator(,)
  key(getfocus)    operator(=) map<inline_delimiter({)string<delimiter(")content(GETFOCUS_CB)delimiter(")>operator(,) ident(iup_getfocus_cb)inline_delimiter(})>operator(,)
  key(killfocus)   operator(=) map<inline_delimiter({)string<delimiter(")content(KILLFOCUS_CB)delimiter(")>operator(,) ident(iup_killfocus_cb)inline_delimiter(})>operator(,)
  key(focus)       operator(=) map<inline_delimiter({)string<delimiter(")content(FOCUS_CB)delimiter(")>operator(,) ident(iup_focus_cb)inline_delimiter(})>operator(,)
  key(k_any)       operator(=) map<inline_delimiter({)string<delimiter(")content(K_ANY)delimiter(")>operator(,) ident(iup_k_any)inline_delimiter(})>operator(,)
  key(help)        operator(=) map<inline_delimiter({)string<delimiter(")content(HELP_CB)delimiter(")>operator(,) ident(iup_help_cb)inline_delimiter(})>operator(,)
  key(caretcb)     operator(=) map<inline_delimiter({)string<delimiter(")content(CARET_CB)delimiter(")>operator(,) ident(iup_caret_cb)inline_delimiter(})>operator(,)
  key(keypress)    operator(=) map<inline_delimiter({)string<delimiter(")content(KEYPRESS_CB)delimiter(")>operator(,) ident(iup_keypress_cb)inline_delimiter(})>operator(,)
  key(scroll)      operator(=) map<inline_delimiter({)string<delimiter(")content(SCROLL_CB)delimiter(")>operator(,) ident(iup_scroll_cb)inline_delimiter(})>operator(,)
  key(trayclick)   operator(=) map<inline_delimiter({)string<delimiter(")content(TRAYCLICK_CB)delimiter(")>operator(,) ident(iup_trayclick_cb)inline_delimiter(})>operator(,)
  key(close)       operator(=) map<inline_delimiter({)string<delimiter(")content(CLOSE_CB)delimiter(")>operator(,) ident(iup_close_cb)inline_delimiter(})>operator(,)
  key(open)        operator(=) map<inline_delimiter({)string<delimiter(")content(OPEN_CB)delimiter(")>operator(,) ident(iup_open_cb)inline_delimiter(})>operator(,)
  key(showcb)      operator(=) map<inline_delimiter({)string<delimiter(")content(SHOW_CB)delimiter(")>operator(,) ident(iup_show_cb)inline_delimiter(})>operator(,)
  key(mapcb)       operator(=) map<inline_delimiter({)string<delimiter(")content(MAP_CB)delimiter(")>operator(,) ident(iup_map_cb)inline_delimiter(})>operator(,)
  key(dropfiles)   operator(=) map<inline_delimiter({)string<delimiter(")content(DROPFILES_CB)delimiter(")>operator(,) ident(iup_dropfiles_cb)inline_delimiter(})>operator(,)
  key(menuclose)   operator(=) map<inline_delimiter({)string<delimiter(")content(MENUCLOSE_CB)delimiter(")>operator(,) ident(iup_menuclose_cb)inline_delimiter(})>operator(,)
  key(highlight)   operator(=) map<inline_delimiter({)string<delimiter(")content(HIGHLIGHT_CB)delimiter(")>operator(,) ident(iup_highlight_cb)inline_delimiter(})>operator(,)
  key(wom)         operator(=) map<inline_delimiter({)string<delimiter(")content(WOM_CB)delimiter(")>operator(,) ident(iup_wom_cb)inline_delimiter(})>operator(,)
  key(wheel)       operator(=) map<inline_delimiter({)string<delimiter(")content(WHEEL_CB)delimiter(")>operator(,) ident(iup_wheel_cb)inline_delimiter(})>operator(,)
  key(button)      operator(=) map<inline_delimiter({)string<delimiter(")content(BUTTON_CB)delimiter(")>operator(,) ident(iup_button_cb)inline_delimiter(})>operator(,)
  key(resize)      operator(=) map<inline_delimiter({)string<delimiter(")content(RESIZE_CB)delimiter(")>operator(,) ident(iup_resize_cb)inline_delimiter(})>operator(,)
  key(motion)      operator(=) map<inline_delimiter({)string<delimiter(")content(MOTION_CB)delimiter(")>operator(,) ident(iup_motion_cb)inline_delimiter(})>operator(,)
  key(enterwindow) operator(=) map<inline_delimiter({)string<delimiter(")content(ENTERWINDOW_CB)delimiter(")>operator(,) ident(iup_enterwindow_cb)inline_delimiter(})>operator(,)
  key(leavewindow) operator(=) map<inline_delimiter({)string<delimiter(")content(LEAVEWINDOW_CB)delimiter(")>operator(,) ident(iup_leavewindow_cb)inline_delimiter(})>operator(,)
  key(edit)        operator(=) map<inline_delimiter({)string<delimiter(")content(EDIT_CB)delimiter(")>operator(,) ident(iup_edit_cb)inline_delimiter(})>operator(,)
  key(multiselect) operator(=) map<inline_delimiter({)string<delimiter(")content(MULTISELECT_CB)delimiter(")>operator(,) ident(iup_multiselect_cb)inline_delimiter(})>operator(,)
  key(filecb)      operator(=) map<inline_delimiter({)string<delimiter(")content(FILE_CB)delimiter(")>operator(,) ident(iup_file_cb)inline_delimiter(})>operator(,)
  key(mdiactivatecb) operator(=) map<inline_delimiter({)string<delimiter(")content(MDIACTIVATE_CB)delimiter(")>operator(,) ident(iup_mdiactivate_cb)inline_delimiter(})>operator(,)
delimiter(})>

ident(iup_callbacks)operator(.)ident(action)operator(.)ident(toggle) operator(=) ident(iup_action_toggle)
ident(iup_callbacks)operator(.)ident(action)operator(.)ident(multiline) operator(=) ident(iup_action_text)
ident(iup_callbacks)operator(.)ident(action)operator(.)ident(text) operator(=) ident(iup_action_text)
ident(iup_callbacks)operator(.)ident(action)operator(.)ident(button) operator(=) ident(iup_action_button)
ident(iup_callbacks)operator(.)ident(action)operator(.)ident(list) operator(=) ident(iup_action_list)
ident(iup_callbacks)operator(.)ident(action)operator(.)ident(item) operator(=) ident(iup_action_button)
ident(iup_callbacks)operator(.)ident(action)operator(.)ident(canvas) operator(=) ident(iup_action_canvas)

comment(-- must set here because it is also used elsewhere with a different signature)
ident(iup_callbacks)operator(.)ident(actioncb)operator(.)ident(timer) operator(=) ident(iup_action_timer)

comment(-- aliases for the full names)
ident(iup_callbacks)operator(.)ident(action_cb)      operator(=) ident(iup_callbacks)operator(.)ident(actioncb)    
ident(iup_callbacks)operator(.)ident(getfocus_cb)    operator(=) ident(iup_callbacks)operator(.)ident(getfocus)    
ident(iup_callbacks)operator(.)ident(killfocus_cb)   operator(=) ident(iup_callbacks)operator(.)ident(killfocus)   
ident(iup_callbacks)operator(.)ident(focus_cb)       operator(=) ident(iup_callbacks)operator(.)ident(focus)       
ident(iup_callbacks)operator(.)ident(k_any)          operator(=) ident(iup_callbacks)operator(.)ident(k_any)       
ident(iup_callbacks)operator(.)ident(help_cb)        operator(=) ident(iup_callbacks)operator(.)ident(help)        
ident(iup_callbacks)operator(.)ident(caret_cb)       operator(=) ident(iup_callbacks)operator(.)ident(caretcb)     
ident(iup_callbacks)operator(.)ident(keypress_cb)    operator(=) ident(iup_callbacks)operator(.)ident(keypress)    
ident(iup_callbacks)operator(.)ident(scroll_cb)      operator(=) ident(iup_callbacks)operator(.)ident(scroll)      
ident(iup_callbacks)operator(.)ident(trayclick_cb)   operator(=) ident(iup_callbacks)operator(.)ident(trayclick)   
ident(iup_callbacks)operator(.)ident(close_cb)       operator(=) ident(iup_callbacks)operator(.)ident(close)       
ident(iup_callbacks)operator(.)ident(open_cb)        operator(=) ident(iup_callbacks)operator(.)ident(open)        
ident(iup_callbacks)operator(.)ident(show_cb)        operator(=) ident(iup_callbacks)operator(.)ident(showcb)      
ident(iup_callbacks)operator(.)ident(map_cb)         operator(=) ident(iup_callbacks)operator(.)ident(mapcb)       
ident(iup_callbacks)operator(.)ident(dropfiles_cb)   operator(=) ident(iup_callbacks)operator(.)ident(dropfiles)   
ident(iup_callbacks)operator(.)ident(menuclose_cb)   operator(=) ident(iup_callbacks)operator(.)ident(menuclose)   
ident(iup_callbacks)operator(.)ident(highlight_cb)   operator(=) ident(iup_callbacks)operator(.)ident(highlight)   
ident(iup_callbacks)operator(.)ident(wom_cb)         operator(=) ident(iup_callbacks)operator(.)ident(wom)         
ident(iup_callbacks)operator(.)ident(wheel_cb)       operator(=) ident(iup_callbacks)operator(.)ident(wheel)       
ident(iup_callbacks)operator(.)ident(button_cb)      operator(=) ident(iup_callbacks)operator(.)ident(button)      
ident(iup_callbacks)operator(.)ident(resize_cb)      operator(=) ident(iup_callbacks)operator(.)ident(resize)      
ident(iup_callbacks)operator(.)ident(motion_cb)      operator(=) ident(iup_callbacks)operator(.)ident(motion)      
ident(iup_callbacks)operator(.)ident(enterwindow_cb) operator(=) ident(iup_callbacks)operator(.)ident(enterwindow) 
ident(iup_callbacks)operator(.)ident(leavewindow_cb) operator(=) ident(iup_callbacks)operator(.)ident(leavewindow) 
ident(iup_callbacks)operator(.)ident(edit_cb)        operator(=) ident(iup_callbacks)operator(.)ident(edit)        
ident(iup_callbacks)operator(.)ident(multiselect_cb) operator(=) ident(iup_callbacks)operator(.)ident(multiselect) 
ident(iup_callbacks)operator(.)ident(mdiactivate_cb) operator(=) ident(iup_callbacks)operator(.)ident(mdiactivatecb)
ident(iup_callbacks)operator(.)ident(file_cb)        operator(=) ident(iup_callbacks)operator(.)ident(filecb) 
ident(IUPCOLORBROWSER) operator(=) map<delimiter({)key(parent) operator(=) ident(WIDGET)delimiter(})>

keyword(function) ident(IUPCOLORBROWSER:)function(CreateIUPelement)operator(()ident(obj)operator(\))
  keyword(return) ident(iupCreateColorBrowser)operator(()ident(obj)operator(\))
keyword(end)

keyword(function) function(iupcolorbrowser) operator(()ident(o)operator(\))
  keyword(return) ident(IUPCOLORBROWSER)operator(:)ident(Constructor) operator(()ident(o)operator(\))
keyword(end)
ident(iup)operator(.)ident(colorbrowser) operator(=) ident(iupcolorbrowser)


ident(iup_callbacks)operator(.)ident(drag)   operator(=) map<delimiter({)string<delimiter(")content(DRAG_CB)delimiter(")>operator(,) ident(iup_colorbrowser_drag_cb)delimiter(})>
ident(iup_callbacks)operator(.)ident(change) operator(=) map<delimiter({)string<delimiter(")content(CHANGE_CB)delimiter(")>operator(,) ident(iup_colorbrowser_change_cb)delimiter(})>

ident(iup_callbacks)operator(.)ident(drag_cb)   operator(=) ident(iup_callbacks)operator(.)ident(drag)  
ident(iup_callbacks)operator(.)ident(change_cb) operator(=) ident(iup_callbacks)operator(.)ident(change)
ident(IUPCELLS) operator(=) map<delimiter({)key(parent) operator(=) ident(WIDGET)delimiter(})>

keyword(function) ident(IUPCELLS:)function(CreateIUPelement)operator(() ident(obj) operator(\))
  keyword(return) ident(iupCreateCells)operator(()operator(\))
keyword(end)

keyword(function) ident(IUPCELLS:)function(redraw)operator(()operator(\))
   ident(self)operator(.)ident(repaint) operator(=) ident(IUP_YES) 
keyword(end)

keyword(function) function(iupcells)operator(()ident(o)operator(\))
  keyword(return) ident(IUPCELLS)operator(:)ident(Constructor)operator(()ident(o)operator(\))
keyword(end)
ident(iup)operator(.)ident(cells) operator(=) ident(iupcells)


comment(-- iup_callbacks.draw_cb      = iup_callbacks.draw         = {"DRAW_CB", iup_mat_draw_cb} -- same callback at IupMatrix)

ident(iup_callbacks)operator(.)ident(mouseclick)   operator(=) map<delimiter({)string<delimiter(")content(MOUSECLICK_CB)delimiter(")>operator(,) ident(iup_cells_mouseclick_cb)delimiter(})>
ident(iup_callbacks)operator(.)ident(mousemotion)  operator(=) map<delimiter({)string<delimiter(")content(MOUSEMOTION_CB)delimiter(")>operator(,) ident(iup_cells_mousemotion_cb)delimiter(})>
ident(iup_callbacks)operator(.)ident(scrolling)    operator(=) map<delimiter({)string<delimiter(")content(SCROLLING_CB)delimiter(")>operator(,) ident(iup_cells_scrolling_cb)delimiter(})>
ident(iup_callbacks)operator(.)ident(width)        operator(=) map<delimiter({)string<delimiter(")content(WIDTH_CB)delimiter(")>operator(,) ident(iup_cells_width_cb)delimiter(})>
ident(iup_callbacks)operator(.)ident(height)       operator(=) map<delimiter({)string<delimiter(")content(HEIGHT_CB)delimiter(")>operator(,) ident(iup_cells_height_cb)delimiter(})>
ident(iup_callbacks)operator(.)ident(nlines)       operator(=) map<delimiter({)string<delimiter(")content(NLINES_CB)delimiter(")>operator(,) ident(iup_cells_nlines_cb)delimiter(})>
ident(iup_callbacks)operator(.)ident(ncols)        operator(=) map<delimiter({)string<delimiter(")content(NCOLS_CB)delimiter(")>operator(,) ident(iup_cells_ncols_cb)delimiter(})>
ident(iup_callbacks)operator(.)ident(hspan)        operator(=) map<delimiter({)string<delimiter(")content(HSPAN_CB)delimiter(")>operator(,) ident(iup_cells_hspan_cb)delimiter(})>
ident(iup_callbacks)operator(.)ident(vspan)        operator(=) map<delimiter({)string<delimiter(")content(VSPAN_CB)delimiter(")>operator(,) ident(iup_cells_vspan_cb)delimiter(})>

ident(iup_callbacks)operator(.)ident(mouseclick_cb)   operator(=) ident(iup_callbacks)operator(.)ident(mouseclick)  
ident(iup_callbacks)operator(.)ident(mousemotion_cb)  operator(=) ident(iup_callbacks)operator(.)ident(mousemotion) 
ident(iup_callbacks)operator(.)ident(scrolling_cb)    operator(=) ident(iup_callbacks)operator(.)ident(scrolling)   
ident(iup_callbacks)operator(.)ident(width_cb)        operator(=) ident(iup_callbacks)operator(.)ident(width)       
ident(iup_callbacks)operator(.)ident(height_cb)       operator(=) ident(iup_callbacks)operator(.)ident(height)      
ident(iup_callbacks)operator(.)ident(nlines_cb)       operator(=) ident(iup_callbacks)operator(.)ident(nlines)      
ident(iup_callbacks)operator(.)ident(ncols_cb)        operator(=) ident(iup_callbacks)operator(.)ident(ncols)       
ident(iup_callbacks)operator(.)ident(hspan_cb)        operator(=) ident(iup_callbacks)operator(.)ident(hspan)       
ident(iup_callbacks)operator(.)ident(vspan_cb)        operator(=) ident(iup_callbacks)operator(.)ident(vspan)       
ident(IUPCOLORBAR) operator(=) map<delimiter({)key(parent) operator(=) ident(WIDGET)delimiter(})>

keyword(function) ident(IUPCOLORBAR:)function(CreateIUPelement)operator(()ident(obj)operator(\))
  keyword(return) ident(iupCreateColorbar)operator(()ident(obj)operator(\))
keyword(end)

keyword(function) function(iupcolorbar) operator(()ident(o)operator(\))
  keyword(return) ident(IUPCOLORBAR)operator(:)ident(Constructor) operator(()ident(o)operator(\))
keyword(end)
ident(iup)operator(.)ident(colorbar) operator(=) ident(iupcolorbar)


ident(iup_callbacks)operator(.)ident(cellcb)      operator(=) map<delimiter({)string<delimiter(")content(CELL_CB)delimiter(")>operator(,) ident(iup_colorbar_cell_cb)delimiter(})>
ident(iup_callbacks)operator(.)ident(selectcb)    operator(=) map<delimiter({)string<delimiter(")content(SELECT_CB)delimiter(")>operator(,) ident(iup_colorbar_select_cb)delimiter(})>
ident(iup_callbacks)operator(.)ident(switchcb)    operator(=) map<delimiter({)string<delimiter(")content(SWITCH_CB)delimiter(")>operator(,) ident(iup_colorbar_switch_cb)delimiter(})>
ident(iup_callbacks)operator(.)ident(extendedcb)  operator(=) map<delimiter({)string<delimiter(")content(EXTENDED_CB)delimiter(")>operator(,) ident(iup_colorbar_extended_cb)delimiter(})>

ident(iup_callbacks)operator(.)ident(cell_cb)      operator(=) ident(iup_callbacks)operator(.)ident(cellcb)      
ident(iup_callbacks)operator(.)ident(select_cb)    operator(=) ident(iup_callbacks)operator(.)ident(selectcb)    
ident(iup_callbacks)operator(.)ident(switch_cb)    operator(=) ident(iup_callbacks)operator(.)ident(switchcb)    
ident(iup_callbacks)operator(.)ident(extended_cb)  operator(=) ident(iup_callbacks)operator(.)ident(extendedcb)  
ident(IUPDIAL) operator(=) map<delimiter({)key(parent) operator(=) ident(WIDGET)delimiter(})>

keyword(function) ident(IUPDIAL:)function(CreateIUPelement) operator(()ident(obj)operator(\))
  keyword(return) ident(iupCreateDial) operator(()ident(obj)operator([)integer(1)operator(])operator(\))
keyword(end)

keyword(function) function(iupdial) operator(()ident(o)operator(\))
  keyword(return) ident(IUPDIAL)operator(:)ident(Constructor) operator(()ident(o)operator(\))
keyword(end)
ident(iup)operator(.)ident(dial) operator(=) ident(iupdial)

ident(iup_callbacks)operator(.)ident(mousemove)operator(.)ident(dial) operator(=) ident(iup_val_mousemove_cb)  comment(-- same callback at IupVal)

comment(-- iup_callbacks.buttonpress  = {"BUTTON_PRESS_CB", iup_val_button_press_cb}  -- same callback at IupVal)
comment(-- iup_callbacks.buttonrelease  = {"BUTTON_RELEASE_CB", iup_val_button_release_cb} -- same callback at IupVal)
ident(IUPGAUGE) operator(=) map<delimiter({)key(parent) operator(=) ident(WIDGET)delimiter(})>

keyword(function) ident(IUPGAUGE:)function(CreateIUPelement) operator(()ident(obj)operator(\))
  keyword(return) ident(iupCreateGauge) operator(()operator(\))
keyword(end)

keyword(function) function(iupgauge) operator(()ident(o)operator(\))
  keyword(return) ident(IUPGAUGE)operator(:)ident(Constructor) operator(()ident(o)operator(\))
keyword(end)
ident(iup)operator(.)ident(gauge) operator(=) ident(iupgauge)
ident(IUPMATRIX) operator(=) map<delimiter({)key(parent) operator(=) ident(WIDGET)delimiter(})>

keyword(function) ident(IUPMATRIX:)function(CreateIUPelement) operator(()ident(obj)operator(\))
  keyword(return) ident(iupCreateMatrix) operator(()operator(\))
keyword(end)

keyword(function) ident(IUPMATRIX:)function(setcell)operator(()ident(l)operator(,)ident(c)operator(,)ident(val)operator(\))
   ident(IupSetAttribute)operator(()ident(self)operator(,)ident(l)operator(.)operator(.)string<delimiter(")content(:)delimiter(")>operator(.)operator(.)ident(c)operator(,)ident(val)operator(\))
keyword(end)

keyword(function) ident(IUPMATRIX:)function(getcell)operator(()ident(l)operator(,)ident(c)operator(,)ident(val)operator(\))
   keyword(return) ident(IupGetAttribute)operator(()ident(self)operator(,)ident(l)operator(.)operator(.)string<delimiter(")content(:)delimiter(")>operator(.)operator(.)ident(c)operator(\))
keyword(end)

keyword(function) function(iupmatrix) operator(()ident(o)operator(\))
  keyword(return) ident(IUPMATRIX)operator(:)ident(Constructor) operator(()ident(o)operator(\))
keyword(end)
ident(iup)operator(.)ident(matrix) operator(=) ident(iupmatrix)


ident(iup_callbacks)operator(.)ident(actioncb)operator(.)ident(matrix) operator(=) ident(iup_mat_action_cb)
ident(iup_callbacks)operator(.)ident(mousemove)operator(.)ident(matrix) operator(=) ident(iup_mat_mousemove_cb)

ident(iup_callbacks)operator(.)ident(edition)     operator(=) map<delimiter({)string<delimiter(")content(EDITION_CB)delimiter(")>operator(,) ident(iup_mat_edition_cb)delimiter(})>
ident(iup_callbacks)operator(.)ident(drop)        operator(=) map<delimiter({)string<delimiter(")content(DROP_CB)delimiter(")>operator(,) ident(iup_mat_drop_cb)delimiter(})>
ident(iup_callbacks)operator(.)ident(dropselect)  operator(=) map<delimiter({)string<delimiter(")content(DROPSELECT_CB)delimiter(")>operator(,) ident(iup_mat_dropselect_cb)delimiter(})>
ident(iup_callbacks)operator(.)ident(enteritem)   operator(=) map<delimiter({)string<delimiter(")content(ENTERITEM_CB)delimiter(")>operator(,) ident(iup_mat_enteritem_cb)delimiter(})>
ident(iup_callbacks)operator(.)ident(leaveitem)   operator(=) map<delimiter({)string<delimiter(")content(LEAVEITEM_CB)delimiter(")>operator(,) ident(iup_mat_leaveitem_cb)delimiter(})>
ident(iup_callbacks)operator(.)ident(click)       operator(=) map<delimiter({)string<delimiter(")content(CLICK_CB)delimiter(")>operator(,) ident(iup_mat_click_cb)delimiter(})>
ident(iup_callbacks)operator(.)ident(scrolltop)   operator(=) map<delimiter({)string<delimiter(")content(SCROLLTOP_CB)delimiter(")>operator(,) ident(iup_mat_scrolltop_cb)delimiter(})>
ident(iup_callbacks)operator(.)ident(valuecb)     operator(=) map<delimiter({)string<delimiter(")content(VALUE_CB)delimiter(")>operator(,) ident(iup_mat_value_cb)delimiter(})>
ident(iup_callbacks)operator(.)ident(draw)        operator(=) map<delimiter({)string<delimiter(")content(DRAW_CB)delimiter(")>operator(,) ident(iup_mat_draw_cb)delimiter(})>
ident(iup_callbacks)operator(.)ident(dropcheck)   operator(=) map<delimiter({)string<delimiter(")content(DROPCHECK_CB)delimiter(")>operator(,) ident(iup_mat_dropcheck_cb)delimiter(})>
ident(iup_callbacks)operator(.)ident(fgcolorcb)   operator(=) map<delimiter({)string<delimiter(")content(FGCOLOR_CB)delimiter(")>operator(,) ident(iup_mat_fgcolor_cb)delimiter(})>
ident(iup_callbacks)operator(.)ident(bgcolorcb)   operator(=) map<delimiter({)string<delimiter(")content(BGCOLOR_CB)delimiter(")>operator(,) ident(iup_mat_bgcolor_cb)delimiter(})>
ident(iup_callbacks)operator(.)ident(value_edit)  operator(=) map<delimiter({)string<delimiter(")content(VALUE_EDIT_CB)delimiter(")>operator(,) ident(iup_mat_value_edit_cb)delimiter(})>
ident(iup_callbacks)operator(.)ident(markedit_cb) operator(=) map<delimiter({)string<delimiter(")content(MARKEDIT_CB)delimiter(")>operator(,) ident(iup_mat_markedit_cb)delimiter(})>
ident(iup_callbacks)operator(.)ident(mark_cb)     operator(=) map<delimiter({)string<delimiter(")content(MARK_CB)delimiter(")>operator(,) ident(iup_mat_mark_cb)delimiter(})>
ident(iup_callbacks)operator(.)ident(mouse_cb)    operator(=) map<delimiter({)string<delimiter(")content(MOUSE_CB)delimiter(")>operator(,) ident(iup_mat_mouse_cb)delimiter(})>

ident(iup_callbacks)operator(.)ident(edition_cb)    operator(=) ident(iup_callbacks)operator(.)ident(edition)    
ident(iup_callbacks)operator(.)ident(drop_cb)       operator(=) ident(iup_callbacks)operator(.)ident(drop)       
ident(iup_callbacks)operator(.)ident(dropselect_cb) operator(=) ident(iup_callbacks)operator(.)ident(dropselect) 
ident(iup_callbacks)operator(.)ident(enteritem_cb)  operator(=) ident(iup_callbacks)operator(.)ident(enteritem)  
ident(iup_callbacks)operator(.)ident(leaveitem_cb)  operator(=) ident(iup_callbacks)operator(.)ident(leaveitem)  
ident(iup_callbacks)operator(.)ident(click_cb)      operator(=) ident(iup_callbacks)operator(.)ident(click)      
ident(iup_callbacks)operator(.)ident(scrolltop_cb)  operator(=) ident(iup_callbacks)operator(.)ident(scrolltop)  
ident(iup_callbacks)operator(.)ident(value_cb)      operator(=) ident(iup_callbacks)operator(.)ident(valuecb)    
ident(iup_callbacks)operator(.)ident(draw_cb)       operator(=) ident(iup_callbacks)operator(.)ident(draw)       
ident(iup_callbacks)operator(.)ident(dropcheck_cb)  operator(=) ident(iup_callbacks)operator(.)ident(dropcheck)  
ident(iup_callbacks)operator(.)ident(fgcolor_cb)    operator(=) ident(iup_callbacks)operator(.)ident(fgcolorcb)  
ident(iup_callbacks)operator(.)ident(bgcolor_cb)    operator(=) ident(iup_callbacks)operator(.)ident(bgcolorcb)  
ident(iup_callbacks)operator(.)ident(value_edit_cb) operator(=) ident(iup_callbacks)operator(.)ident(value_edit) 
ident(IUPPPLOT) operator(=) map<delimiter({)key(parent) operator(=) ident(WIDGET)delimiter(})>

keyword(function) ident(IUPPPLOT:)function(CreateIUPelement) operator(()ident(obj)operator(\))
  keyword(return) ident(iupCreatePPlot) operator(()operator(\))
keyword(end)

keyword(function) function(iuppplot) operator(()ident(o)operator(\))
  keyword(return) ident(IUPPPLOT)operator(:)ident(Constructor) operator(()ident(o)operator(\))
keyword(end)
ident(iup)operator(.)ident(pplot) operator(=) ident(iuppplot)

ident(iup_callbacks)operator(.)ident(edit_cb)operator(.)ident(pplot)  operator(=) ident(iup_pplot_edit_cb)

ident(iup_callbacks)operator(.)ident(editbegin_cb)   operator(=) map<delimiter({)string<delimiter(")content(EDITBEGIN_CB)delimiter(")>operator(,) ident(iup_pplot_editbegin_cb)delimiter(})>
ident(iup_callbacks)operator(.)ident(editend_cb)     operator(=) map<delimiter({)string<delimiter(")content(EDITEND_CB)delimiter(")>operator(,) ident(iup_pplot_editend_cb)delimiter(})>
ident(iup_callbacks)operator(.)ident(select_cb)      operator(=) map<delimiter({)string<delimiter(")content(SELECT_CB)delimiter(")>operator(,) ident(iup_pplot_select_cb)delimiter(})>
ident(iup_callbacks)operator(.)ident(selectbegin_cb) operator(=) map<delimiter({)string<delimiter(")content(SELECTBEGIN_CB)delimiter(")>operator(,) ident(iup_pplot_selectbegin_cb)delimiter(})>
ident(iup_callbacks)operator(.)ident(selectend_cb)   operator(=) map<delimiter({)string<delimiter(")content(SELECTEND_CB)delimiter(")>operator(,) ident(iup_pplot_selectend_cb)delimiter(})>
ident(iup_callbacks)operator(.)ident(delete_cb)      operator(=) map<delimiter({)string<delimiter(")content(DELETE_CB)delimiter(")>operator(,) ident(iup_pplot_delete_cb)delimiter(})>
ident(iup_callbacks)operator(.)ident(deletebegin_cb) operator(=) map<delimiter({)string<delimiter(")content(DELETEBEGIN_CB)delimiter(")>operator(,) ident(iup_pplot_deletebegin_cb)delimiter(})>
ident(iup_callbacks)operator(.)ident(deleteend_cb)   operator(=) map<delimiter({)string<delimiter(")content(DELETEEND_CB)delimiter(")>operator(,) ident(iup_pplot_deleteend_cb)delimiter(})>
ident(iup_callbacks)operator(.)ident(predraw_cb)     operator(=) map<delimiter({)string<delimiter(")content(PREDRAW_CB)delimiter(")>operator(,) ident(iup_pplot_predraw_cb)delimiter(})>
ident(iup_callbacks)operator(.)ident(postdraw_cb)    operator(=) map<delimiter({)string<delimiter(")content(POSTDRAW_CB)delimiter(")>operator(,) ident(iup_pplot_postdraw_cb)delimiter(})>
ident(IUPSBOX) operator(=) map<delimiter({)key(parent) operator(=) ident(WIDGET)delimiter(})>

keyword(function) ident(IUPSBOX:)function(CreateIUPelement) operator(()ident(obj)operator(\))
  keyword(return) ident(iupCreateSbox)operator(()ident(obj)operator([)integer(1)operator(])operator(\))
keyword(end)

keyword(function) function(iupsbox) operator(()ident(o)operator(\))
  keyword(return) ident(IUPSBOX)operator(:)ident(Constructor) operator(()ident(o)operator(\))
keyword(end)
ident(iup)operator(.)ident(sbox) operator(=) ident(iupsbox)
ident(IUPSPIN) operator(=) map<delimiter({)key(parent) operator(=) ident(WIDGET)delimiter(})>

keyword(function) ident(IUPSPIN:)function(CreateIUPelement) operator(()ident(obj)operator(\))
  keyword(return) ident(iupCreateSpin) operator(()operator(\))
keyword(end)

keyword(function) function(iupspin) operator(()ident(o)operator(\))
  keyword(return) ident(IUPSPIN)operator(:)ident(Constructor) operator(()ident(o)operator(\))
keyword(end)
ident(iup)operator(.)ident(spin) operator(=) ident(iupspin)

ident(IUPSPINBOX) operator(=) map<delimiter({)key(parent) operator(=) ident(WIDGET)delimiter(})>

keyword(function) ident(IUPSPINBOX:)function(CreateIUPelement) operator(()ident(obj)operator(\))
  keyword(return) ident(iupCreateSpinbox) operator(()ident(obj)operator([)integer(1)operator(])operator(\))
keyword(end)

keyword(function) function(iupspinbox) operator(()ident(o)operator(\))
  keyword(return) ident(IUPSPINBOX)operator(:)ident(Constructor) operator(()ident(o)operator(\))
keyword(end)
ident(iup)operator(.)ident(spinbox) operator(=) ident(iupspinbox)

ident(iup_callbacks)operator(.)ident(spincb) operator(=) map<delimiter({)string<delimiter(")content(SPIN_CB)delimiter(")>operator(,) ident(iup_spin_cb)delimiter(})>
ident(iup_callbacks)operator(.)ident(spin_cb) operator(=) ident(iup_callbacks)operator(.)ident(spincb)
ident(IUPTABS) operator(=) map<delimiter({)key(parent) operator(=) ident(WIDGET)delimiter(})>

keyword(function) ident(IUPTABS:)function(CreateIUPelement) operator(()ident(obj)operator(\))
  keyword(return) ident(iupCreateTabs) operator(()ident(obj)operator(,) ident(getn)operator(()ident(obj)operator(\))operator(\))
keyword(end)

keyword(function) function(iuptabs) operator(()ident(o)operator(\))
  keyword(return) ident(IUPTABS)operator(:)ident(Constructor) operator(()ident(o)operator(\))
keyword(end)
ident(iup)operator(.)ident(tabs) operator(=) ident(iuptabs)

ident(iup_callbacks)operator(.)ident(tabchange) operator(=) map<delimiter({)string<delimiter(")content(TABCHANGE_CB)delimiter(")>operator(,) ident(iup_tabchange_cb)delimiter(})>
ident(iup_callbacks)operator(.)ident(tabchange_cb) operator(=) ident(iup_callbacks)operator(.)ident(tabchangeIUPTREE) operator(=) map<delimiter({)key(parent) operator(=) ident(WIDGET)delimiter(})>
ident(IUPTREEREFERENCETABLE) operator(=) map<delimiter({)delimiter(})> comment(-- Used in C, see luatree.c)

keyword(function) ident(IUPTREE:)function(CreateIUPelement) operator(()ident(obj)operator(\))
  keyword(return) ident(iupCreateTree) operator(()operator(\))
keyword(end)

keyword(function) function(iuptree) operator(()ident(o)operator(\))
  keyword(return) ident(IUPTREE)operator(:)ident(Constructor) operator(()ident(o)operator(\))
keyword(end)
ident(iup)operator(.)ident(tree) operator(=) ident(iuptree)

keyword(function) function(TreeSetValueRec)operator(()ident(handle)operator(,) ident(t)operator(,) ident(id)operator(\))

  keyword(if) ident(t) operator(=)operator(=) predefined_constant(nil) keyword(then) keyword(return) keyword(end)

  keyword(local) local_variable(cont) operator(=) ident(getn)operator(()ident(t)operator(\))

  keyword(while) ident(cont) operator(>)operator(=) integer(0) keyword(do)
    keyword(if) predefined(type) operator(()ident(t)operator([)ident(cont)operator(])operator(\)) operator(=)operator(=) string<delimiter(")content(table)delimiter(")> keyword(then)  
      keyword(if) ident(t)operator([)ident(cont)operator(])operator(.)ident(branchname) operator(~)operator(=) predefined_constant(nil) keyword(then)
        ident(IupSetAttribute)operator(()ident(handle)operator(,) string<delimiter(")content(ADDBRANCH)delimiter(")>operator(.)operator(.)ident(id)operator(,) ident(t)operator([)ident(cont)operator(])operator(.)ident(branchname)operator(\))
      keyword(else)
        ident(IupSetAttribute)operator(()ident(handle)operator(,) string<delimiter(")content(ADDBRANCH)delimiter(")>operator(.)operator(.)ident(id)operator(,) string<delimiter(")delimiter(")>operator(\))
      keyword(end)
      ident(TreeSetValueRec)operator(()ident(handle)operator(,) ident(t)operator([)ident(cont)operator(])operator(,) ident(id)operator(+)integer(1)operator(\))
    keyword(else)
      keyword(if) ident(t)operator([)ident(cont)operator(]) keyword(then)
        ident(IupSetAttribute)operator(()ident(handle)operator(,) string<delimiter(")content(ADDLEAF)delimiter(")>operator(.)operator(.)ident(id)operator(,) ident(t)operator([)ident(cont)operator(])operator(\))
      keyword(end)
    keyword(end)
    ident(cont) operator(=) ident(cont) operator(-) integer(1)
   keyword(end) 
keyword(end)

keyword(function) function(TreeSetValue)operator(()ident(handle)operator(,) ident(t)operator(\))
  keyword(if) predefined(type)operator(()ident(t)operator(\)) operator(~)operator(=) string<delimiter(")content(table)delimiter(")> keyword(then)
    ident(IupMessage)operator(()string<delimiter(")content(TreeLua Error)delimiter(")>operator(,) string<delimiter(")content(Incorrect arguments to function TreeSetValue)delimiter(")>operator(\))
    keyword(return)
  keyword(end)
  keyword(if) ident(t)operator(.)ident(branchname) operator(~)operator(=) predefined_constant(nil) keyword(then)
    ident(IupSetAttribute)operator(()ident(handle)operator(,) string<delimiter(")content(NAME)delimiter(")>operator(,) ident(t)operator(.)ident(branchname)operator(\))
  keyword(end)
  ident(TreeSetValueRec)operator(()ident(handle)operator(,) ident(t)operator(,) integer(0)operator(\))
keyword(end)
ident(iup)operator(.)ident(TreeSetValue) operator(=) ident(TreeSetValue)

ident(iup_callbacks)operator(.)ident(selection)      operator(=) map<delimiter({)string<delimiter(")content(SELECTION_CB)delimiter(")>operator(,) ident(iup_tree_selection_cb)delimiter(})>
ident(iup_callbacks)operator(.)ident(multiselection) operator(=) map<delimiter({)string<delimiter(")content(MULTISELECTION_CB)delimiter(")>operator(,) ident(iup_tree_multiselection_cb)delimiter(})>
ident(iup_callbacks)operator(.)ident(branchopen)     operator(=) map<delimiter({)string<delimiter(")content(BRANCHOPEN_CB)delimiter(")>operator(,) ident(iup_tree_branchopen_cb)delimiter(})>
ident(iup_callbacks)operator(.)ident(branchclose)    operator(=) map<delimiter({)string<delimiter(")content(BRANCHCLOSE_CB)delimiter(")>operator(,) ident(iup_tree_branchclose_cb)delimiter(})>
ident(iup_callbacks)operator(.)ident(executeleaf)    operator(=) map<delimiter({)string<delimiter(")content(EXECUTELEAF_CB)delimiter(")>operator(,) ident(iup_tree_executeleaf_cb)delimiter(})>
ident(iup_callbacks)operator(.)ident(renamenode)     operator(=) map<delimiter({)string<delimiter(")content(RENAMENODE_CB)delimiter(")>operator(,) ident(iup_tree_renamenode_cb)delimiter(})>
ident(iup_callbacks)operator(.)ident(renamecb)       operator(=) map<delimiter({)string<delimiter(")content(RENAME_CB)delimiter(")>operator(,) ident(iup_tree_renamecb_cb)delimiter(})>
ident(iup_callbacks)operator(.)ident(showrenamecb)   operator(=) map<delimiter({)string<delimiter(")content(SHOWRENAME_CB)delimiter(")>operator(,) ident(iup_tree_showrenamecb_cb)delimiter(})>
ident(iup_callbacks)operator(.)ident(rightclick)     operator(=) map<delimiter({)string<delimiter(")content(RIGHTCLICK_CB)delimiter(")>operator(,) ident(iup_tree_rightclick_cb)delimiter(})>
ident(iup_callbacks)operator(.)ident(dragdrop)       operator(=) map<delimiter({)string<delimiter(")content(DRAGDROP_CB)delimiter(")>operator(,) ident(iup_tree_dragdrop_cb)delimiter(})>

ident(iup_callbacks)operator(.)ident(selection_cb)      operator(=) ident(iup_callbacks)operator(.)ident(selection)      
ident(iup_callbacks)operator(.)ident(multiselection_cb) operator(=) ident(iup_callbacks)operator(.)ident(multiselection) 
ident(iup_callbacks)operator(.)ident(branchopen_cb)     operator(=) ident(iup_callbacks)operator(.)ident(branchopen)     
ident(iup_callbacks)operator(.)ident(branchclose_cb)    operator(=) ident(iup_callbacks)operator(.)ident(branchclose)    
ident(iup_callbacks)operator(.)ident(executeleaf_cb)    operator(=) ident(iup_callbacks)operator(.)ident(executeleaf)    
ident(iup_callbacks)operator(.)ident(renamenode_cb)     operator(=) ident(iup_callbacks)operator(.)ident(renamenode)     
ident(iup_callbacks)operator(.)ident(rename_cb)         operator(=) ident(iup_callbacks)operator(.)ident(renamecb)       
ident(iup_callbacks)operator(.)ident(showrename_cb)     operator(=) ident(iup_callbacks)operator(.)ident(showrenamecb)   
ident(iup_callbacks)operator(.)ident(rightclick_cb)     operator(=) ident(iup_callbacks)operator(.)ident(rightclick)     
ident(iup_callbacks)operator(.)ident(dragdrop_cb)       operator(=) ident(iup_callbacks)operator(.)ident(dragdrop)       
ident(IUPVAL) operator(=) map<delimiter({)key(parent) operator(=) ident(WIDGET)delimiter(})>

keyword(function) ident(IUPVAL:)function(CreateIUPelement) operator(()ident(obj)operator(\))
  keyword(return) ident(iupCreateVal) operator(()ident(obj)operator([)integer(1)operator(])operator(\))
keyword(end)

keyword(function) function(iupval) operator(()ident(o)operator(\))
  keyword(return) ident(IUPVAL)operator(:)ident(Constructor) operator(()ident(o)operator(\))
keyword(end)
ident(iup)operator(.)ident(val) operator(=) ident(iupval)


comment(-- must set here because it is also used elsewhere with a different signature)
ident(iup_callbacks)operator(.)ident(mousemove) operator(=) map<delimiter({)string<delimiter(")content(MOUSEMOVE_CB)delimiter(")>operator(,) predefined_constant(nil)delimiter(})>
ident(iup_callbacks)operator(.)ident(mousemove_cb) operator(=) ident(iup_callbacks)operator(.)ident(mousemove)
ident(iup_callbacks)operator(.)ident(mousemove)operator(.)ident(val)  operator(=) ident(iup_val_mousemove_cb)

ident(iup_callbacks)operator(.)ident(buttonpress)    operator(=) map<delimiter({)string<delimiter(")content(BUTTON_PRESS_CB)delimiter(")>operator(,) ident(iup_val_button_press_cb)delimiter(})>
ident(iup_callbacks)operator(.)ident(buttonrelease)  operator(=) map<delimiter({)string<delimiter(")content(BUTTON_RELEASE_CB)delimiter(")>operator(,) ident(iup_val_button_release_cb)delimiter(})>

ident(iup_callbacks)operator(.)ident(button_press_cb)    operator(=) ident(iup_callbacks)operator(.)ident(buttonpress)   
ident(iup_callbacks)operator(.)ident(button_release_cb)  operator(=) ident(iup_callbacks)operator(.)ident(buttonrelease) 
comment(----------------------------------------------------)
comment(-- The main porpouse of this file is to build linux gcc makefiles.)
comment(-- Must have Premake version 3 installed.)
comment(-- Original Premake was changed to remove some parameters and add others.)
comment(-- Default parameters:)
comment(--   premake3s --target gnu --os linux)
comment(-- But it can build windows gcc makefiles, and visual studio projects.)
comment(--   premake3s --target gnu --os windows)
comment(--   premake3s --target gnu --os macosx)
comment(--   premake3s --target vs6)
comment(--   premake3s --target vs2002)
comment(--   premake3s --target vs2003)
comment(--   premake3s --target vs2005)
comment(-- In Linux the generated makefiles will not correctly build libraries in 64-bits.)
comment(--              must add "-m64 -fPIC" flags)
comment(----------------------------------------------------)

keyword(if) operator(()keyword(not) ident(options)operator(.)ident(target)operator(\)) keyword(then) 
  ident(options)operator(.)ident(target) operator(=) string<delimiter(")content(gnu)delimiter(")>
keyword(end)

keyword(if) operator(()keyword(not) ident(options)operator(.)ident(os)operator(\)) keyword(then)
  keyword(if) operator(()ident(options)operator(.)ident(target) operator(~)operator(=) string<delimiter(")content(gnu)delimiter(")>operator(\)) keyword(then)
    ident(options)operator(.)ident(os) operator(=) string<delimiter(")content(windows)delimiter(")>
  keyword(else)
    ident(options)operator(.)ident(os) operator(=) string<delimiter(")content(linux)delimiter(")>
  keyword(end)
keyword(end)

keyword(function) function(fixPackagePath)operator(()ident(package_files)operator(\))
  keyword(if) operator(()ident(options)operator(.)ident(os) operator(~)operator(=) string<delimiter(")content(linux)delimiter(")>operator(\)) keyword(then)
    keyword(for) ident(i)operator(,) ident(file) keyword(in) ident(package_files) keyword(do) 
      ident(package_files)operator([)ident(i)operator(]) operator(=) string<delimiter(")content(../src/)delimiter(")>operator(.)operator(.)ident(file) 
    keyword(end)
  keyword(end)
keyword(end)

comment(----------------------------------------------------)

ident(project)operator(.)ident(name) operator(=) string<delimiter(")content(iup)delimiter(")>
ident(project)operator(.)ident(bindir) operator(=) string<delimiter(")content(../bin)delimiter(")>
ident(project)operator(.)ident(libdir) operator(=) string<delimiter(")content(../lib)delimiter(")>

keyword(if) operator(()ident(options)operator(.)ident(os) operator(~)operator(=) string<delimiter(")content(linux)delimiter(")>operator(\)) keyword(then)
  keyword(if) operator(()ident(options)operator(.)ident(os) operator(=)operator(=) string<delimiter(")content(macosx)delimiter(")>operator(\)) keyword(then)
	ident(project)operator(.)ident(path) operator(=) string<delimiter(")content(../mak.macosx)delimiter(")>
  keyword(else)
	ident(project)operator(.)ident(path) operator(=) string<delimiter(")content(../mak.)delimiter(")>operator(.)operator(.)ident(options)operator(.)ident(target)
  keyword(end)
keyword(end)

comment(----------------------------------------------------)

ident(package) operator(=) ident(newpackage)operator(()operator(\))
ident(package)operator(.)ident(name) operator(=) string<delimiter(")content(iuplua3)delimiter(")>
ident(package)operator(.)ident(target) operator(=) ident(package)operator(.)ident(name)
ident(package)operator(.)ident(objdir) operator(=) string<delimiter(")content(../obj/)delimiter(")>operator(.)operator(.)ident(package)operator(.)ident(name)
ident(package)operator(.)ident(language) operator(=) string<delimiter(")content(c++)delimiter(")>
ident(package)operator(.)ident(kind) operator(=) string<delimiter(")content(lib)delimiter(")>
ident(package)operator(.)ident(buildflags) operator(=) map<delimiter({) string<delimiter(")content(static-runtime)delimiter(")> delimiter(})>

ident(package)operator(.)ident(files) operator(=)
map<delimiter({)
  string<delimiter(")content(iuplua.c)delimiter(")>operator(,)  string<delimiter(")content(iuplua_api.c)delimiter(")>operator(,)  string<delimiter(")content(iuplua_widgets.c)delimiter(")>
delimiter(})>
ident(fixPackagePath)operator(()ident(package)operator(.)ident(files)operator(\))

ident(package)operator(.)ident(includepaths) operator(=) map<delimiter({) string<delimiter(")content(../include)delimiter(")>operator(,) string<delimiter(")content(../src)delimiter(")>operator(,) string<delimiter(")content($(LUA3\)/include)delimiter(")> delimiter(})>
ident(package)operator(.)ident(defines) operator(=) map<delimiter({)string<delimiter(")content(IUPLUA_USELOH)delimiter(")>delimiter(})>

comment(-- SRCLUA = iuplua.lua)

comment(---------------------------------------------------------------------)

ident(package) operator(=) ident(newpackage)operator(()operator(\))
ident(package)operator(.)ident(name) operator(=) string<delimiter(")content(iupluacontrols3)delimiter(")>
ident(package)operator(.)ident(target) operator(=) ident(package)operator(.)ident(name)
ident(package)operator(.)ident(objdir) operator(=) string<delimiter(")content(../obj/)delimiter(")>operator(.)operator(.)ident(package)operator(.)ident(name)
ident(package)operator(.)ident(language) operator(=) string<delimiter(")content(c++)delimiter(")>
ident(package)operator(.)ident(kind) operator(=) string<delimiter(")content(lib)delimiter(")>
ident(package)operator(.)ident(buildflags) operator(=) map<delimiter({) string<delimiter(")content(static-runtime)delimiter(")> delimiter(})>

ident(package)operator(.)ident(files) operator(=)
map<delimiter({)
  string<delimiter(")content(luaval.c)delimiter(")>operator(,) string<delimiter(")content(luadial.c)delimiter(")>operator(,) string<delimiter(")content(luagauge.c)delimiter(")>operator(,) string<delimiter(")content(luagc.c)delimiter(")>operator(,) string<delimiter(")content(luacbox.c)delimiter(")>operator(,) string<delimiter(")content(luacells.c)delimiter(")>operator(,)
  string<delimiter(")content(luacb.c)delimiter(")>operator(,) string<delimiter(")content(luatabs.c)delimiter(")>operator(,) string<delimiter(")content(luamask.c)delimiter(")>operator(,) string<delimiter(")content(luacontrols.c)delimiter(")>operator(,) string<delimiter(")content(luagetparam.c)delimiter(")>operator(,) 
  string<delimiter(")content(luamatrix.c)delimiter(")>operator(,) string<delimiter(")content(luatree.c)delimiter(")>operator(,) string<delimiter(")content(luasbox.c)delimiter(")>operator(,) string<delimiter(")content(luaspin.c)delimiter(")>operator(,) string<delimiter(")content(luacolorbar.c)delimiter(")>
delimiter(})>
ident(fixPackagePath)operator(()ident(package)operator(.)ident(files)operator(\))

comment(-- SRCLUA =  luaval.lua luadial.lua luagauge.lua luacb.lua luatabs.lua luamatrix.lua luatree.lua luasbox.lua luaspin.lua luacells.lua)

ident(package)operator(.)ident(includepaths) operator(=) map<delimiter({) string<delimiter(")content(../include)delimiter(")>operator(,) string<delimiter(")content($(CD\)/include)delimiter(")>operator(,) string<delimiter(")content($(LUA3\)/include)delimiter(")> delimiter(})>
ident(package)operator(.)ident(defines) operator(=) map<delimiter({)string<delimiter(")content(IUPLUA_USELOH)delimiter(")>delimiter(})>

comment(---------------------------------------------------------------------)

ident(package) operator(=) ident(newpackage)operator(()operator(\))
ident(package)operator(.)ident(name) operator(=) string<delimiter(")content(iuplua_pplot3)delimiter(")>
ident(package)operator(.)ident(target) operator(=) ident(package)operator(.)ident(name)
ident(package)operator(.)ident(objdir) operator(=) string<delimiter(")content(../obj/)delimiter(")>operator(.)operator(.)ident(package)operator(.)ident(name)
ident(package)operator(.)ident(language) operator(=) string<delimiter(")content(c++)delimiter(")>
ident(package)operator(.)ident(kind) operator(=) string<delimiter(")content(lib)delimiter(")>
ident(package)operator(.)ident(buildflags) operator(=) map<delimiter({) string<delimiter(")content(static-runtime)delimiter(")> delimiter(})>

ident(package)operator(.)ident(files) operator(=)
map<delimiter({)
  string<delimiter(")content(luapplot.c)delimiter(")>
delimiter(})>
ident(fixPackagePath)operator(()ident(package)operator(.)ident(files)operator(\))

comment(-- SRCLUA =  luapplot.lua)

ident(package)operator(.)ident(includepaths) operator(=) map<delimiter({) string<delimiter(")content(../include)delimiter(")>operator(,) string<delimiter(")content($(CD\)/include)delimiter(")>operator(,) string<delimiter(")content($(LUA3\)/include)delimiter(")> delimiter(})>
ident(package)operator(.)ident(defines) operator(=) map<delimiter({)string<delimiter(")content(IUPLUA_USELOH)delimiter(")>delimiter(})>

comment(---------------------------------------------------------------------)

ident(package) operator(=) ident(newpackage)operator(()operator(\))
ident(package)operator(.)ident(name) operator(=) string<delimiter(")content(iupluagl3)delimiter(")>
ident(package)operator(.)ident(target) operator(=) ident(package)operator(.)ident(name)
ident(package)operator(.)ident(objdir) operator(=) string<delimiter(")content(../obj/)delimiter(")>operator(.)operator(.)ident(package)operator(.)ident(name)
ident(package)operator(.)ident(language) operator(=) string<delimiter(")content(c++)delimiter(")>
ident(package)operator(.)ident(kind) operator(=) string<delimiter(")content(lib)delimiter(")>
ident(package)operator(.)ident(buildflags) operator(=) map<delimiter({) string<delimiter(")content(static-runtime)delimiter(")> delimiter(})>

ident(package)operator(.)ident(files) operator(=)
map<delimiter({)
  string<delimiter(")content(luaglcanvas.c)delimiter(")>
delimiter(})>
ident(fixPackagePath)operator(()ident(package)operator(.)ident(files)operator(\))

ident(package)operator(.)ident(includepaths) operator(=) map<delimiter({) string<delimiter(")content(../include)delimiter(")>operator(,) string<delimiter(")content($(LUA3\)/include)delimiter(")> delimiter(})>
           
comment(---------------------------------------------------------------------)

ident(package) operator(=) ident(newpackage)operator(()operator(\))
ident(package)operator(.)ident(name) operator(=) string<delimiter(")content(iupluaim3)delimiter(")>
ident(package)operator(.)ident(target) operator(=) ident(package)operator(.)ident(name)
ident(package)operator(.)ident(objdir) operator(=) string<delimiter(")content(../obj/)delimiter(")>operator(.)operator(.)ident(package)operator(.)ident(name)
ident(package)operator(.)ident(language) operator(=) string<delimiter(")content(c++)delimiter(")>
ident(package)operator(.)ident(kind) operator(=) string<delimiter(")content(lib)delimiter(")>
ident(package)operator(.)ident(buildflags) operator(=) map<delimiter({) string<delimiter(")content(static-runtime)delimiter(")> delimiter(})>

ident(package)operator(.)ident(files) operator(=)
map<delimiter({)
  string<delimiter(")content(luaim.c)delimiter(")>
delimiter(})>
ident(fixPackagePath)operator(()ident(package)operator(.)ident(files)operator(\))

ident(package)operator(.)ident(includepaths) operator(=) map<delimiter({) string<delimiter(")content(../include)delimiter(")>operator(,) string<delimiter(")content($(LUA3\)/include)delimiter(")> delimiter(})>
           
comment(---------------------------------------------------------------------)

ident(package) operator(=) ident(newpackage)operator(()operator(\))
ident(package)operator(.)ident(name) operator(=) string<delimiter(")content(iuplua3exe)delimiter(")>
ident(package)operator(.)ident(target) operator(=) string<delimiter(")content(iuplua3)delimiter(")>
ident(package)operator(.)ident(objdir) operator(=) string<delimiter(")content(../obj/)delimiter(")>operator(.)operator(.)ident(package)operator(.)ident(name)
ident(package)operator(.)ident(language) operator(=) string<delimiter(")content(c++)delimiter(")>
ident(package)operator(.)ident(kind) operator(=) string<delimiter(")content(exe)delimiter(")>
ident(package)operator(.)ident(linkflags) operator(=) map<delimiter({) string<delimiter(")content(static-runtime)delimiter(")> delimiter(})>

ident(package)operator(.)ident(files) operator(=)
map<delimiter({)
  string<delimiter(")content(iupluaexe.c)delimiter(")>
delimiter(})>
ident(fixPackagePath)operator(()ident(package)operator(.)ident(files)operator(\))

comment(-- SRCLUA = console.lua)

ident(package)operator(.)ident(includepaths) operator(=) map<delimiter({) string<delimiter(")content(../include)delimiter(")>operator(,) string<delimiter(")content($(LUA3\)/include)delimiter(")>operator(,) string<delimiter(")content($(CD\)/include)delimiter(")>operator(,) string<delimiter(")content($(IM\)/include)delimiter(")> delimiter(})>
ident(package)operator(.)ident(defines) operator(=) map<delimiter({)string<delimiter(")content(IUPLUA_USELOH)delimiter(")>delimiter(})>
ident(package)operator(.)ident(links) operator(=) map<delimiter({) string<delimiter(")content(imlua3)delimiter(")>operator(,) string<delimiter(")content(cdluaiup3)delimiter(")>operator(,) string<delimiter(")content(cdlua3)delimiter(")>operator(,) 
                  string<delimiter(")content(iupluagl3)delimiter(")>operator(,) string<delimiter(")content(iupluaim3)delimiter(")>operator(,) string<delimiter(")content(iupluacontrols3)delimiter(")>operator(,) string<delimiter(")content(iuplua3)delimiter(")>operator(,) 
                  string<delimiter(")content(lualib)delimiter(")>operator(,) string<delimiter(")content(lua)delimiter(")>operator(,) 
                  string<delimiter(")content(iupgl)delimiter(")>operator(,) string<delimiter(")content(iupim)delimiter(")>operator(,) string<delimiter(")content(iupcontrols)delimiter(")>operator(,) 
                  string<delimiter(")content(cdiup)delimiter(")>operator(,) string<delimiter(")content(cd)delimiter(")>operator(,) string<delimiter(")content(iup)delimiter(")>operator(,) string<delimiter(")content(im)delimiter(")> delimiter(})>
ident(package)operator(.)ident(libpaths) operator(=) map<delimiter({) string<delimiter(")content(../lib)delimiter(")>operator(,) string<delimiter(")content($(IM\)/lib)delimiter(")>operator(,) string<delimiter(")content($(CD\)/lib)delimiter(")>operator(,) string<delimiter(")content($(LUA3\)/lib)delimiter(")> delimiter(})>

keyword(if) operator(()ident(options)operator(.)ident(os) operator(=)operator(=) string<delimiter(")content(windows)delimiter(")>operator(\)) keyword(then)
  ident(tinsert)operator(()ident(package)operator(.)ident(links)operator(,) map<delimiter({) string<delimiter(")content(comctl32)delimiter(")>operator(,) string<delimiter(")content(ole32)delimiter(")>operator(,) string<delimiter(")content(opengl32)delimiter(")>operator(,) string<delimiter(")content(glu32)delimiter(")>operator(,) string<delimiter(")content(glaux)delimiter(")> delimiter(})>operator(\))
keyword(else)
  ident(tinsert)operator(()ident(package)operator(.)ident(links)operator(,) map<delimiter({) string<delimiter(")content(GLU)delimiter(")>operator(,) string<delimiter(")content(GL)delimiter(")>operator(,) string<delimiter(")content(Xm)delimiter(")>operator(,) string<delimiter(")content(Xpm)delimiter(")>operator(,) string<delimiter(")content(Xmu)delimiter(")>operator(,) string<delimiter(")content(Xt)delimiter(")>operator(,) string<delimiter(")content(Xext)delimiter(")>operator(,) string<delimiter(")content(X11)delimiter(")>operator(,) string<delimiter(")content(m)delimiter(")> delimiter(})>operator(\))
  ident(tinsert)operator(()ident(package)operator(.)ident(libpaths)operator(,) map<delimiter({) string<delimiter(")content(/usr/X11R6/lib)delimiter(")> delimiter(})>operator(\))
keyword(end)

comment(---------------------------------------------------------------------)
comment(------------------------------------------------------------------------------)
comment(-- Button class )
comment(------------------------------------------------------------------------------)
keyword(local) local_variable(ctrl) operator(=) map<delimiter({)
  key(nick) operator(=) string<delimiter(")content(button)delimiter(")>operator(,)
  key(parent) operator(=) ident(WIDGET)operator(,)
  key(creation) operator(=) string<delimiter(")content(S-)delimiter(")>operator(,)
  key(callback) operator(=) map<inline_delimiter({)
    key(action) operator(=) string<delimiter(")delimiter(")>operator(,) 
  inline_delimiter(})>
delimiter(})> 

keyword(function) ident(ctrl.)function(createElement)operator(()ident(class)operator(,) ident(arg)operator(\))
  keyword(return) ident(Button)operator(()ident(arg)operator(.)ident(title)operator(\))
keyword(end)

ident(iupRegisterWidget)operator(()ident(ctrl)operator(\))
ident(iupSetClass)operator(()ident(ctrl)operator(,) string<delimiter(")content(iup widget)delimiter(")>operator(\))
comment(------------------------------------------------------------------------------)
comment(-- Canvas class )
comment(------------------------------------------------------------------------------)
keyword(local) local_variable(ctrl) operator(=) map<delimiter({)
  key(nick) operator(=) string<delimiter(")content(canvas)delimiter(")>operator(,)
  key(parent) operator(=) ident(WIDGET)operator(,)
  key(creation) operator(=) string<delimiter(")content(-)delimiter(")>operator(,)
  key(callback) operator(=) map<inline_delimiter({)
    key(action) operator(=) string<delimiter(")content(ff)delimiter(")>operator(,)
    key(button_cb) operator(=) string<delimiter(")content(nnnns)delimiter(")>operator(,)
    key(enterwindow_cb) operator(=) string<delimiter(")delimiter(")>operator(,)
    key(leavewindow_cb) operator(=) string<delimiter(")delimiter(")>operator(,)
    key(motion_cb) operator(=) string<delimiter(")content(nns)delimiter(")>operator(,)
    key(resize_cb) operator(=) string<delimiter(")content(nn)delimiter(")>operator(,)
    key(scroll_cb) operator(=) string<delimiter(")content(nff)delimiter(")>operator(,)
    key(keypress_cb) operator(=) string<delimiter(")content(nn)delimiter(")>operator(,)
    key(wom_cb) operator(=) string<delimiter(")content(n)delimiter(")>operator(,)
    key(wheel_cb) operator(=) string<delimiter(")content(fnns)delimiter(")>operator(,)
    key(mdiactivate_cb) operator(=) string<delimiter(")delimiter(")>operator(,)
    key(focus_cb) operator(=) string<delimiter(")content(n)delimiter(")>operator(,)
  inline_delimiter(})>
delimiter(})>

keyword(function) ident(ctrl.)function(createElement)operator(()ident(class)operator(,) ident(arg)operator(\))
   keyword(return) ident(Canvas)operator(()operator(\))
keyword(end)

ident(iupRegisterWidget)operator(()ident(ctrl)operator(\))
ident(iupSetClass)operator(()ident(ctrl)operator(,) string<delimiter(")content(iup widget)delimiter(")>operator(\))
comment(------------------------------------------------------------------------------)
comment(-- Cbox class )
comment(------------------------------------------------------------------------------)
keyword(local) local_variable(ctrl) operator(=) map<delimiter({)
  key(nick) operator(=) string<delimiter(")content(cbox)delimiter(")>operator(,)
  key(parent) operator(=) ident(WIDGET)operator(,)
  key(creation) operator(=) string<delimiter(")content(v)delimiter(")>operator(,)
  key(callback) operator(=) map<inline_delimiter({)inline_delimiter(})>operator(,)
  key(include) operator(=) string<delimiter(")content(iupcbox.h)delimiter(")>operator(,)
  key(funcname) operator(=) string<delimiter(")content(Cboxv)delimiter(")>operator(,)
  key(createfunc) operator(=) string<delimiter([[)content(
static int Cboxv(lua_State *L\)
{
  Ihandle **hlist = iuplua_checkihandle_array(L, 1\);
  Ihandle *h = IupCboxv(hlist\);
  iuplua_plugstate(L, h\);
  iuplua_pushihandle_raw(L, h\);
  free(hlist\);
  return 1;
}
  )delimiter(]])>operator(,)
delimiter(})>

keyword(function) ident(ctrl.)function(createElement)operator(()ident(class)operator(,) ident(arg)operator(\))
  keyword(return) ident(Cboxv)operator(()ident(arg)operator(\))
keyword(end)

ident(iupRegisterWidget)operator(()ident(ctrl)operator(\))
ident(iupSetClass)operator(()ident(ctrl)operator(,) string<delimiter(")content(iup widget)delimiter(")>operator(\))
comment(------------------------------------------------------------------------------)
comment(-- Cells class )
comment(------------------------------------------------------------------------------)
keyword(local) local_variable(ctrl) operator(=) map<delimiter({)
  key(nick) operator(=) string<delimiter(")content(cells)delimiter(")>operator(,)
  key(parent) operator(=) ident(WIDGET)operator(,)
  key(creation) operator(=) string<delimiter(")delimiter(")>operator(,)
  key(callback) operator(=) map<inline_delimiter({)
    key(mouseclick_cb) operator(=) string<delimiter(")content(nnnnnns)delimiter(")>operator(,)
    key(mousemotion_cb) operator(=) string<delimiter(")content(nnnns)delimiter(")>operator(,)
    key(scrolling_cb) operator(=) string<delimiter(")content(nn)delimiter(")>operator(,)
comment(--    draw_cb = "nnnnnnn",   -- already registered by the matrix)
    key(width_cb) operator(=) string<delimiter(")content(n)delimiter(")>operator(,)
    key(height_cb) operator(=) string<delimiter(")content(n)delimiter(")>operator(,)
    key(nlines_cb) operator(=) string<delimiter(")delimiter(")>operator(,)
    key(ncols_cb) operator(=) string<delimiter(")delimiter(")>operator(,)
    key(hspan_cb) operator(=) string<delimiter(")content(nn)delimiter(")>operator(,)
    key(vspan_cb) operator(=) string<delimiter(")content(nn)delimiter(")>operator(,)
   inline_delimiter(})>operator(,)
  key(include) operator(=) string<delimiter(")content(iupcells.h)delimiter(")>
delimiter(})>

keyword(function) ident(ctrl.)function(redraw)operator(()ident(handle)operator(\))
   ident(handle)operator(.)ident(repaint) operator(=) string<delimiter(")content(YES)delimiter(")>
keyword(end)

keyword(function) ident(ctrl.)function(createElement)operator(()ident(class)operator(,) ident(arg)operator(\))
   keyword(return) ident(Cells)operator(()operator(\))
keyword(end)

ident(iupRegisterWidget)operator(()ident(ctrl)operator(\))
ident(iupSetClass)operator(()ident(ctrl)operator(,) string<delimiter(")content(iup widget)delimiter(")>operator(\))
comment(------------------------------------------------------------------------------)
comment(-- Colorbar class )
comment(------------------------------------------------------------------------------)
keyword(local) local_variable(ctrl) operator(=) map<delimiter({)
  key(nick) operator(=) string<delimiter(")content(colorbar)delimiter(")>operator(,)
  key(parent) operator(=) ident(WIDGET)operator(,)
  key(creation) operator(=) string<delimiter(")delimiter(")>operator(,)
  key(callback) operator(=) map<inline_delimiter({)
    key(select_cb) operator(=) string<delimiter(")content(nn)delimiter(")>operator(,)
    key(cell_cb) operator(=) map<inline_delimiter({)string<delimiter(")content(n)delimiter(")>operator(,) key(ret) operator(=) string<delimiter(")content(s)delimiter(")>inline_delimiter(})>operator(,)
    key(switch_cb) operator(=) string<delimiter(")content(nn)delimiter(")>operator(,)
    key(extended_cb) operator(=) string<delimiter(")content(n)delimiter(")>operator(,)
   inline_delimiter(})>operator(,)
  key(funcname) operator(=) string<delimiter(")content(Colorbar)delimiter(")>operator(,)
  key(include) operator(=) string<delimiter(")content(iupcolorbar.h)delimiter(")>operator(,)
delimiter(})>

keyword(function) ident(ctrl.)function(createElement)operator(()ident(class)operator(,) ident(arg)operator(\))
   keyword(return) ident(Colorbar)operator(()ident(arg)operator(.)ident(action)operator(\))
keyword(end)

ident(iupRegisterWidget)operator(()ident(ctrl)operator(\))
ident(iupSetClass)operator(()ident(ctrl)operator(,) string<delimiter(")content(iup widget)delimiter(")>operator(\))
comment(------------------------------------------------------------------------------)
comment(-- ColorBrowser class )
comment(------------------------------------------------------------------------------)
keyword(local) local_variable(ctrl) operator(=) map<delimiter({)
  key(nick) operator(=) string<delimiter(")content(colorbrowser)delimiter(")>operator(,)
  key(parent) operator(=) ident(WIDGET)operator(,)
  key(creation) operator(=) string<delimiter(")delimiter(")>operator(,)
  key(callback) operator(=) map<inline_delimiter({)
    key(drag_cb) operator(=) string<delimiter(")content(ccc)delimiter(")>operator(,)
    key(change_cb) operator(=) string<delimiter(")content(ccc)delimiter(")>operator(,)
  inline_delimiter(})>operator(,)
  key(funcname) operator(=) string<delimiter(")content(ColorBrowser)delimiter(")>operator(,)
  key(include) operator(=) string<delimiter(")content(iupcb.h)delimiter(")>operator(,)
delimiter(})>

keyword(function) ident(ctrl.)function(createElement)operator(()ident(class)operator(,) ident(arg)operator(\))
   keyword(return) ident(ColorBrowser)operator(()ident(arg)operator(.)ident(action)operator(\))
keyword(end)

ident(iupRegisterWidget)operator(()ident(ctrl)operator(\))
ident(iupSetClass)operator(()ident(ctrl)operator(,) string<delimiter(")content(iup widget)delimiter(")>operator(\))
comment(------------------------------------------------------------------------------)
comment(-- ColorDlg class )
comment(------------------------------------------------------------------------------)
keyword(local) local_variable(ctrl) operator(=) map<delimiter({)
  key(nick) operator(=) string<delimiter(")content(colordlg)delimiter(")>operator(,)
  key(parent) operator(=) ident(WIDGET)operator(,)
  key(creation) operator(=) string<delimiter(")delimiter(")>operator(,)
  key(funcname) operator(=) string<delimiter(")content(ColorDlg)delimiter(")>operator(,)
  key(callback) operator(=) map<inline_delimiter({)inline_delimiter(})>
delimiter(})> 

keyword(function) ident(ctrl.)function(popup)operator(()ident(handle)operator(,) ident(x)operator(,) ident(y)operator(\))
  ident(Popup)operator(()ident(handle)operator(,)ident(x)operator(,)ident(y)operator(\))
keyword(end)

keyword(function) ident(ctrl.)function(destroy)operator(()ident(handle)operator(\))
  keyword(return) ident(Destroy)operator(()ident(handle)operator(\))
keyword(end)

keyword(function) ident(ctrl.)function(createElement)operator(()ident(class)operator(,) ident(arg)operator(\))
   keyword(return) ident(ColorDlg)operator(()operator(\))
keyword(end)
   
ident(iupRegisterWidget)operator(()ident(ctrl)operator(\))
ident(iupSetClass)operator(()ident(ctrl)operator(,) string<delimiter(")content(iup widget)delimiter(")>operator(\))

comment(-- Utilities)
ident(iupluacmd) operator(=) map<delimiter({)delimiter(})>

keyword(function) ident(iupluacmd.)function(printtable)operator(()ident(t)operator(\))
  keyword(local) local_variable(n)operator(,)local_variable(v) operator(=) predefined(next)operator(()ident(t)operator(,) predefined_constant(nil)operator(\))
  predefined(print)operator(()string<delimiter(")content(--printtable Start--)delimiter(")>operator(\))
  keyword(while) ident(n) operator(~)operator(=) predefined_constant(nil) keyword(do)
    predefined(print)operator(()predefined(tostring)operator(()ident(n)operator(\))operator(.)operator(.)string<delimiter(")content(=)delimiter(")>operator(.)operator(.)predefined(tostring)operator(()ident(v)operator(\))operator(\))
    ident(n)operator(,)ident(v) operator(=) predefined(next)operator(()ident(t)operator(,) ident(n)operator(\))
  keyword(end)
  predefined(print)operator(()string<delimiter(")content(--printtable End--)delimiter(")>operator(\))
keyword(end)

keyword(function) ident(iupluacmd.)function(print_version_info)operator(()operator(\))
  predefined(print)operator(()predefined(_VERSION) operator(.)operator(.) string<delimiter(")content( )delimiter(")> operator(.)operator(.) predefined(_COPYRIGHT)operator(\))
  keyword(if) operator(()ident(im)operator(\)) keyword(then) predefined(print)operator(()string<delimiter(")content(IM )delimiter(")> operator(.)operator(.) ident(im)operator(.)predefined(_VERSION) operator(.)operator(.) string<delimiter(")content( )delimiter(")> operator(.)operator(.) ident(im)operator(.)predefined(_COPYRIGHT)operator(\)) keyword(end)
  keyword(if) operator(()ident(cd)operator(\)) keyword(then) predefined(print)operator(()string<delimiter(")content(CD )delimiter(")> operator(.)operator(.) ident(cd)operator(.)predefined(_VERSION) operator(.)operator(.) string<delimiter(")content( )delimiter(")> operator(.)operator(.) ident(cd)operator(.)predefined(_COPYRIGHT)operator(\)) keyword(end)
  predefined(print)operator(()string<delimiter(")content(IUP )delimiter(")> operator(.)operator(.) ident(iup)operator(.)predefined(_VERSION) operator(.)operator(.) string<delimiter(")content( )delimiter(")> operator(.)operator(.) ident(iup)operator(.)predefined(_COPYRIGHT)operator(\))
  predefined(print)operator(()string<delimiter(")delimiter(")>operator(\))
  predefined(print)operator(()string<delimiter(")content(IUP Info)delimiter(")>operator(\))
  predefined(print)operator(()string<delimiter(")content(  System: )delimiter(")> operator(.)operator(.) ident(iup)operator(.)ident(GetGlobal)operator(()string<delimiter(")content(SYSTEM)delimiter(")>operator(\))operator(\))
  predefined(print)operator(()string<delimiter(")content(  System Version: )delimiter(")> operator(.)operator(.) ident(iup)operator(.)ident(GetGlobal)operator(()string<delimiter(")content(SYSTEMVERSION)delimiter(")>operator(\))operator(\))
  keyword(local) local_variable(mot) operator(=) ident(iup)operator(.)ident(GetGlobal)operator(()string<delimiter(")content(MOTIFVERSION)delimiter(")>operator(\))
  keyword(if) operator(()ident(mot)operator(\)) keyword(then) predefined(print)operator(()string<delimiter(")content(  Motif Version: )delimiter(")>operator(,) ident(mot)operator(\)) keyword(end)
  predefined(print)operator(()string<delimiter(")content(  Screen Size: )delimiter(")> operator(.)operator(.) ident(iup)operator(.)ident(GetGlobal)operator(()string<delimiter(")content(SCREENSIZE)delimiter(")>operator(\))operator(\))
  predefined(print)operator(()string<delimiter(")content(  Screen Depth: )delimiter(")> operator(.)operator(.) ident(iup)operator(.)ident(GetGlobal)operator(()string<delimiter(")content(SCREENDEPTH)delimiter(")>operator(\))operator(\))
  keyword(if) operator(()ident(iup)operator(.)ident(GL_VENDOR)operator(\)) keyword(then) predefined(print)operator(()string<delimiter(")content(  OpenGL Vendor: )delimiter(")> operator(.)operator(.) ident(iup)operator(.)ident(GL_VENDOR)operator(\)) keyword(end)
  keyword(if) operator(()ident(iup)operator(.)ident(GL_RENDERER)operator(\)) keyword(then) predefined(print)operator(()string<delimiter(")content(  OpenGL Renderer: )delimiter(")> operator(.)operator(.) ident(iup)operator(.)ident(GL_RENDERER)operator(\)) keyword(end)
  keyword(if) operator(()ident(iup)operator(.)ident(GL_VERSION)operator(\)) keyword(then) predefined(print)operator(()string<delimiter(")content(  OpenGL Version: )delimiter(")> operator(.)operator(.) ident(iup)operator(.)ident(GL_VERSION)operator(\)) keyword(end)
keyword(end)

comment(-- IUPLUA Full Application  )

ident(iupluacmd)operator(.)ident(lastfilename) operator(=) predefined_constant(nil) comment(-- Last file open)
ident(iupluacmd)operator(.)ident(mlCode) operator(=) ident(iup)operator(.)ident(multiline)map<delimiter({)key(expand)operator(=)string<delimiter(")content(YES)delimiter(")>operator(,) key(size)operator(=)string<delimiter(")content(200x120)delimiter(")>operator(,) key(font)operator(=)string<delimiter(")content(COURIER_NORMAL_10)delimiter(")>delimiter(})>   
ident(iupluacmd)operator(.)ident(lblPosition) operator(=) ident(iup)operator(.)ident(label)map<delimiter({)key(title)operator(=)string<delimiter(")content(0:0)delimiter(")>operator(,) key(size)operator(=)string<delimiter(")content(50x)delimiter(")>delimiter(})> 
ident(iupluacmd)operator(.)ident(lblFileName) operator(=) ident(iup)operator(.)ident(label)map<delimiter({)key(title)operator(=)string<delimiter(")delimiter(")>operator(,) key(size)operator(=)string<delimiter(")content(50x)delimiter(")>operator(,) key(expand)operator(=)string<delimiter(")content(HORIZONTAL)delimiter(")>delimiter(})> 

keyword(function) ident(iupluacmd.mlCode:)function(caret_cb)operator(()ident(lin)operator(,) ident(col)operator(\))
   ident(iupluacmd)operator(.)ident(lblPosition)operator(.)ident(title) operator(=) ident(lin)operator(.)operator(.)string<delimiter(")content(:)delimiter(")>operator(.)operator(.)ident(col)
keyword(end)

ident(iupluacmd)operator(.)ident(butExecute) operator(=) ident(iup)operator(.)ident(button)map<delimiter({)key(size)operator(=)string<delimiter(")content(50x15)delimiter(")>operator(,) key(title)operator(=)string<delimiter(")content(Execute)delimiter(")>operator(,) 
                                  key(action)operator(=)string<delimiter(")content(iup.dostring(iupluacmd.mlCode.value\))delimiter(")>delimiter(})>
ident(iupluacmd)operator(.)ident(butClearCommands) operator(=) ident(iup)operator(.)ident(button)map<delimiter({)key(size)operator(=)string<delimiter(")content(50x15)delimiter(")>operator(,) key(title)operator(=)string<delimiter(")content(Clear)delimiter(")>operator(,) 
                                        key(action)operator(=)string<delimiter(")content(iupluacmd.mlCode.value=''  iupluacmd.lblFileName.title = ''  iupluacmd.lastfilename = nil)delimiter(")>delimiter(})>
ident(iupluacmd)operator(.)ident(butLoadFile) operator(=) ident(iup)operator(.)ident(button)map<delimiter({)key(size)operator(=)string<delimiter(")content(50x15)delimiter(")>operator(,) key(title)operator(=)string<delimiter(")content(Load...)delimiter(")>delimiter(})>
ident(iupluacmd)operator(.)ident(butSaveasFile) operator(=) ident(iup)operator(.)ident(button)map<delimiter({)key(size)operator(=)string<delimiter(")content(50x15)delimiter(")>operator(,) key(title)operator(=)string<delimiter(")content(Save As...)delimiter(")>delimiter(})>
ident(iupluacmd)operator(.)ident(butSaveFile) operator(=) ident(iup)operator(.)ident(button)map<delimiter({)key(size)operator(=)string<delimiter(")content(50x15)delimiter(")>operator(,) key(title)operator(=)string<delimiter(")content(Save)delimiter(")>delimiter(})>

ident(iupluacmd)operator(.)ident(butSaveFile)operator(.)ident(action) operator(=) keyword(function)operator((\))
   keyword(if) operator(()ident(iupluacmd)operator(.)ident(lastfilename) operator(=)operator(=) predefined_constant(nil)operator(\)) keyword(then)
      ident(iupluacmd)operator(.)ident(butSaveasFile)operator(:)ident(action)operator(()operator(\)) 
   keyword(else)
      ident(newfile) operator(=) ident(io)operator(.)ident(open)operator(()ident(iupluacmd)operator(.)ident(lastfilename)operator(,) string<delimiter(")content(w+)delimiter(")>operator(\))
      keyword(if) operator(()ident(newfile) operator(~)operator(=) predefined_constant(nil)operator(\)) keyword(then)
         ident(newfile)operator(:)ident(write)operator(()ident(iupluacmd)operator(.)ident(mlCode)operator(.)ident(value)operator(\))
         ident(newfile)operator(:)ident(close)operator(()operator(\)) 
      keyword(else)
         predefined(error) operator(()string<delimiter(")content(Cannot Save file )delimiter(")>operator(.)operator(.)ident(filename)operator(\))
      keyword(end)
   keyword(end)
keyword(end)

ident(iupluacmd)operator(.)ident(butSaveasFile)operator(.)ident(action) operator(=) keyword(function)operator((\))
   keyword(local) local_variable(fd) operator(=) ident(iup)operator(.)ident(filedlg)map<delimiter({)key(dialogtype)operator(=)string<delimiter(")content(SAVE)delimiter(")>operator(,) key(title)operator(=)string<delimiter(")content(Save File)delimiter(")>operator(,) 
                          key(filter)operator(=)string<delimiter(")content(*.lua)delimiter(")>operator(,) key(filterinfo)operator(=)string<delimiter(")content(Lua files)delimiter(")>operator(,)key(allownew)operator(=)ident(yes)delimiter(})>
   ident(fd)operator(:)ident(popup)operator(()ident(iup)operator(.)ident(LEFT)operator(,) ident(iup)operator(.)ident(LEFT)operator(\))
   keyword(local) local_variable(status) operator(=) ident(fd)operator(.)ident(status)
   ident(iupluacmd)operator(.)ident(lastfilename) operator(=) ident(fd)operator(.)ident(value)
   ident(iupluacmd)operator(.)ident(lblFileName)operator(.)ident(title) operator(=) ident(iupluacmd)operator(.)ident(lastfilename)
   ident(fd)operator(:)ident(destroy)operator(()operator(\))
   keyword(if) ident(status) operator(~)operator(=) string<delimiter(")content(-1)delimiter(")> keyword(then) 
      keyword(if) operator(()ident(iupluacmd)operator(.)ident(lastfilename) operator(=)operator(=) predefined_constant(nil)operator(\)) keyword(then)
         predefined(error) operator(()string<delimiter(")content(Cannot Save file )delimiter(")>operator(.)operator(.)ident(filename)operator(\))
      keyword(end)
      keyword(local) local_variable(newfile)operator(=)ident(io)operator(.)ident(open)operator(()ident(iupluacmd)operator(.)ident(lastfilename)operator(,) string<delimiter(")content(w+)delimiter(")>operator(\))
      keyword(if) operator(()ident(newfile) operator(~)operator(=) predefined_constant(nil)operator(\)) keyword(then)
         ident(newfile)operator(:)ident(write)operator(()ident(iupluacmd)operator(.)ident(mlCode)operator(.)ident(value)operator(\))
         ident(newfile)operator(:)ident(close)operator(()ident(newfile)operator(\))
      keyword(else)
         predefined(error) operator(()string<delimiter(")content(Cannot Save file)delimiter(")>operator(\))
      keyword(end)
   keyword(end)
keyword(end)

ident(iupluacmd)operator(.)ident(butLoadFile)operator(.)ident(action) operator(=) keyword(function) operator((\))
   keyword(local) local_variable(fd)operator(=)ident(iup)operator(.)ident(filedlg)map<delimiter({)key(dialogtype)operator(=)string<delimiter(")content(OPEN)delimiter(")>operator(,) key(title)operator(=)string<delimiter(")content(Load File)delimiter(")>operator(,) 
                        key(filter)operator(=)string<delimiter(")content(*.lua)delimiter(")>operator(,) key(filterinfo)operator(=)string<delimiter(")content(Lua Files)delimiter(")>operator(,) key(allownew)operator(=)string<delimiter(")content(NO)delimiter(")>delimiter(})>
   ident(fd)operator(:)ident(popup)operator(()ident(iup)operator(.)ident(CENTER)operator(,) ident(iup)operator(.)ident(CENTER)operator(\))
   keyword(local) local_variable(status) operator(=) ident(fd)operator(.)ident(status)
   keyword(local) local_variable(filename) operator(=) ident(fd)operator(.)ident(value)
   ident(fd)operator(:)ident(destroy)operator(()operator(\))
   keyword(if) operator(()ident(status) operator(=)operator(=) string<delimiter(")content(-1)delimiter(")>operator(\)) keyword(or) operator(()ident(status) operator(=)operator(=) string<delimiter(")content(1)delimiter(")>operator(\)) keyword(then) 
      keyword(if) operator(()ident(status) operator(=)operator(=) string<delimiter(")content(1)delimiter(")>operator(\)) keyword(then)
         predefined(error) operator(()string<delimiter(")content(Cannot load file )delimiter(")>operator(.)operator(.)ident(filename)operator(\))
      keyword(end)
   keyword(else)
      keyword(local) local_variable(newfile) operator(=) ident(io)operator(.)ident(open) operator(()ident(filename)operator(,) string<delimiter(")content(r)delimiter(")>operator(\))
      keyword(if) operator(()ident(newfile) operator(=)operator(=) predefined_constant(nil)operator(\)) keyword(then)
         predefined(error) operator(()string<delimiter(")content(Cannot load file )delimiter(")>operator(.)operator(.)ident(filename)operator(\))
      keyword(else)
         ident(iupluacmd)operator(.)ident(mlCode)operator(.)ident(value)operator(=)ident(newfile)operator(:)ident(read)operator(()string<delimiter(")content(*a)delimiter(")>operator(\)) 
         ident(newfile)operator(:)ident(close) operator(()ident(newfile)operator(\)) 
         ident(iupluacmd)operator(.)ident(lastfilename) operator(=) ident(filename)
         ident(iupluacmd)operator(.)ident(lblFileName)operator(.)ident(title) operator(=) ident(iupluacmd)operator(.)ident(lastfilename)
      keyword(end)
   keyword(end)
keyword(end)

ident(iupluacmd)operator(.)ident(vbxConsole) operator(=) ident(iup)operator(.)ident(vbox) 
map<delimiter({)
   ident(iup)operator(.)ident(frame)map<inline_delimiter({)ident(iup)operator(.)ident(hbox)map<inline_delimiter({)ident(iup)operator(.)ident(vbox)map<inline_delimiter({)ident(iupluacmd)operator(.)ident(butLoadFile)operator(,) 
                               ident(iupluacmd)operator(.)ident(butSaveFile)operator(,) 
                               ident(iupluacmd)operator(.)ident(butSaveasFile)operator(,) 
                               ident(iupluacmd)operator(.)ident(butClearCommands)operator(,) 
                               ident(iupluacmd)operator(.)ident(butExecute)operator(;) 
                               key(margin)operator(=)string<delimiter(")content(0x0)delimiter(")>operator(,) key(gap)operator(=)string<delimiter(")content(10)delimiter(")>inline_delimiter(})>operator(,) 
                      ident(iup)operator(.)ident(vbox)map<inline_delimiter({)ident(iupluacmd)operator(.)ident(lblFileName)operator(,) 
                               ident(iupluacmd)operator(.)ident(mlCode)operator(,) 
                               ident(iupluacmd)operator(.)ident(lblPosition)operator(;) 
                               key(alignment) operator(=) string<delimiter(")content(ARIGHT)delimiter(")>inline_delimiter(})>operator(;) 
                      key(alignment)operator(=)string<delimiter(")content(ATOP)delimiter(")>inline_delimiter(})>operator(;) key(title)operator(=)string<delimiter(")content(Commands)delimiter(")>inline_delimiter(})>
   operator(;)key(alignment)operator(=)string<delimiter(")content(ACENTER)delimiter(")>operator(,) key(margin)operator(=)string<delimiter(")content(5x5)delimiter(")>operator(,) key(gap)operator(=)string<delimiter(")content(5)delimiter(")> 
delimiter(})>

comment(-- Main Menu Definition.)

ident(iupluacmd)operator(.)ident(mnuMain) operator(=) ident(iup)operator(.)ident(menu)
map<delimiter({)
   ident(iup)operator(.)ident(submenu)
   map<inline_delimiter({)
      ident(iup)operator(.)ident(menu)
      map<inline_delimiter({)
          ident(iup)operator(.)ident(item)map<inline_delimiter({)key(title)operator(=)string<delimiter(")content(Exit)delimiter(")>operator(,) key(action)operator(=)string<delimiter(")content(return iup.CLOSE)delimiter(")>inline_delimiter(})>
      inline_delimiter(})>operator(;) key(title)operator(=)string<delimiter(")content(File)delimiter(")>
   inline_delimiter(})>operator(,)
   ident(iup)operator(.)ident(submenu)map<inline_delimiter({)ident(iup)operator(.)ident(menu)
   map<inline_delimiter({)
      ident(iup)operator(.)ident(item)map<inline_delimiter({)key(title)operator(=)string<delimiter(")content(Print Version Info...)delimiter(")>operator(,) key(action)operator(=)ident(iupluacmd)operator(.)ident(print_version_info)inline_delimiter(})>operator(,)
      ident(iup)operator(.)ident(item)map<inline_delimiter({)key(title)operator(=)string<delimiter(")content(About...)delimiter(")>operator(,) key(action)operator(=)string<delimiter(")content(iupluacmd.dlgAbout:popup(iup.CENTER, iup.CENTER\))delimiter(")>inline_delimiter(})>
   inline_delimiter(})>operator(;)key(title)operator(=)string<delimiter(")content(Help)delimiter(")>inline_delimiter(})>
delimiter(})>

comment(-- Main Dialog Definition.)

ident(iupluacmd)operator(.)ident(dlgMain) operator(=) ident(iup)operator(.)ident(dialog)map<delimiter({)ident(iupluacmd)operator(.)ident(vbxConsole)operator(;) 
                               key(title)operator(=)string<delimiter(")content(IupLua Console)delimiter(")>operator(,) 
                               key(menu)operator(=)ident(iupluacmd)operator(.)ident(mnuMain)operator(,) 
                               key(defaultenter)operator(=)ident(iupluacmd)operator(.)ident(butExecute)operator(,)
                               key(close_cb) operator(=) string<delimiter(")content(return iup.CLOSE)delimiter(")>delimiter(})>

comment(-- About Dialog Definition.)

ident(iupluacmd)operator(.)ident(dlgAbout) operator(=) ident(iup)operator(.)ident(dialog) 
map<delimiter({)
   ident(iup)operator(.)ident(vbox)
   map<inline_delimiter({)
      ident(iup)operator(.)ident(label)map<inline_delimiter({)key(title)operator(=)string<delimiter(")content(IupLua5 Console)delimiter(")>inline_delimiter(})>operator(,) 
      ident(iup)operator(.)ident(fill)map<inline_delimiter({)key(size)operator(=)string<delimiter(")content(5)delimiter(")>inline_delimiter(})>operator(,)
      ident(iup)operator(.)ident(fill)map<inline_delimiter({)key(size)operator(=)string<delimiter(")content(5)delimiter(")>inline_delimiter(})>operator(,)
      ident(iup)operator(.)ident(frame)
      map<inline_delimiter({)
          ident(iup)operator(.)ident(vbox)
          map<inline_delimiter({)
              ident(iup)operator(.)ident(label)map<inline_delimiter({)key(title)operator(=)string<delimiter(")content(Tecgraf/PUC-Rio)delimiter(")>inline_delimiter(})>operator(,)
              ident(iup)operator(.)ident(label)map<inline_delimiter({)key(title)operator(=)string<delimiter(")content(iup@tecgraf.puc-rio.br)delimiter(")>inline_delimiter(})> 
          inline_delimiter(})>
      inline_delimiter(})>operator(,)
      ident(iup)operator(.)ident(fill)map<inline_delimiter({)key(size)operator(=)string<delimiter(")content(5)delimiter(")>inline_delimiter(})>operator(,)
      ident(iup)operator(.)ident(button)map<inline_delimiter({)key(title)operator(=)string<delimiter(")content(OK)delimiter(")>operator(,) key(action)operator(=)string<delimiter(")content(return iup.CLOSE)delimiter(")>operator(,) key(size)operator(=)string<delimiter(")content(50X20)delimiter(")>inline_delimiter(})> 
      operator(;)key(margin)operator(=)string<delimiter(")content(10x10)delimiter(")>operator(,) key(alignment)operator(=)string<delimiter(")content(ACENTER)delimiter(")> 
   inline_delimiter(})>
   operator(;)key(maxbox)operator(=)string<delimiter(")content(NO)delimiter(")>operator(,) key(minbox)operator(=)string<delimiter(")content(NO)delimiter(")>operator(,) key(resize)operator(=)string<delimiter(")content(NO)delimiter(")>operator(,) key(title)operator(=)string<delimiter(")content(About)delimiter(")>
delimiter(})>

comment(-- Displays the Main Dialog )

ident(iupluacmd)operator(.)ident(dlgMain)operator(:)ident(show)operator(()operator(\))
ident(iup)operator(.)ident(SetFocus)operator(()ident(iupluacmd)operator(.)ident(mlCode)operator(\))

ident(iup)operator(.)ident(MainLoop)operator(()operator(\))

ident(iupluacmd)operator(.)ident(dlgMain)operator(:)ident(destroy)operator(()operator(\))
ident(iupluacmd)operator(.)ident(dlgAbout)operator(:)ident(destroy)operator(()operator(\))
comment(----------------------------------------------------------------------------)
comment(--  Callback return values              )
comment(----------------------------------------------------------------------------)
ident(IGNORE) operator(=) integer(-1)
ident(DEFAULT) operator(=) integer(-2)
ident(CLOSE) operator(=) integer(-3)
ident(CONTINUE) operator(=) integer(-4)

comment(----------------------------------------------------------------------------)
comment(--  IupPopup e IupShowXY        )
comment(----------------------------------------------------------------------------)
ident(CENTER) operator(=) integer(65535)
ident(LEFT) operator(=) integer(65534)
ident(RIGHT) operator(=) integer(65533)
ident(MOUSEPOS) operator(=) integer(65532)
ident(CURRENT) operator(=) integer(65531)
ident(CENTERPARENT) operator(=) integer(65530)
ident(TOP) operator(=) ident(LEFT)
ident(BOTTOM) operator(=) ident(RIGHT)
ident(ANYWHERE) operator(=) ident(CURRENT)

comment(----------------------------------------------------------------------------)
comment(--  Scrollbar)
comment(----------------------------------------------------------------------------)
ident(SBUP)      operator(=) integer(0)  
ident(SBDN)      operator(=) integer(1)  
ident(SBPGUP)    operator(=) integer(2)  
ident(SBPGDN)    operator(=) integer(3)  
ident(SBPOSV)    operator(=) integer(4)  
ident(SBDRAGV)   operator(=) integer(5)  
ident(SBLEFT)    operator(=) integer(6)  
ident(SBRIGHT)   operator(=) integer(7)  
ident(SBPGLEFT)  operator(=) integer(8)  
ident(SBPGRIGHT) operator(=) integer(9)  
ident(SBPOSH)    operator(=) integer(10) 
ident(SBDRAGH)   operator(=) integer(11) 

comment(----------------------------------------------------------------------------)
comment(--  SHOW_CB                      )
comment(----------------------------------------------------------------------------)
ident(SHOW) operator(=) integer(0)
ident(RESTORE) operator(=) integer(1)
ident(MINIMIZE) operator(=) integer(2)
ident(MAXIMIZE) operator(=) integer(3)
ident(HIDE) operator(=) integer(4)

comment(----------------------------------------------------------------------------)
comment(--  BUTTON_CB        )
comment(----------------------------------------------------------------------------)
ident(BUTTON1) operator(=) ident(string)operator(.)ident(byte)operator(()string<delimiter(')content(1)delimiter(')>operator(\))
ident(BUTTON2) operator(=) ident(string)operator(.)ident(byte)operator(()string<delimiter(')content(2)delimiter(')>operator(\))
ident(BUTTON3) operator(=) ident(string)operator(.)ident(byte)operator(()string<delimiter(')content(3)delimiter(')>operator(\))
ident(BUTTON4) operator(=) ident(string)operator(.)ident(byte)operator(()string<delimiter(')content(4)delimiter(')>operator(\))
ident(BUTTON5) operator(=) ident(string)operator(.)ident(byte)operator(()string<delimiter(')content(5)delimiter(')>operator(\))

comment(----------------------------------------------------------------------------)
comment(--  IupOpen)
comment(----------------------------------------------------------------------------)
ident(ERROR) operator(=) integer(1)
ident(NOERROR) operator(=) integer(0)
ident(OPENED) operator(=) integer(-1)
ident(INVALID) operator(=) integer(-1)
comment(------------------------------------------------------------------------------)
comment(-- Template to create control classes for IupLua5)
comment(-- The Lua module is used by the "generator.lua" to build a C module,)
comment(-- and loaded during iuplua_open to initialize the control.)
comment(------------------------------------------------------------------------------)
keyword(local) local_variable(ctrl) operator(=) map<delimiter({)
  key(nick) operator(=) string<delimiter(")content(mycontrol)delimiter(")>operator(,) comment(-- name of the control, used in the control creation: iup.mycontrol{})
                      comment(-- also used for the generated C module)
  key(parent) operator(=) ident(WIDGET)operator(,) comment(-- used to define a few methods used fro creation and set attribute)
  key(creation) operator(=) string<delimiter(")content(nn)delimiter(")>operator(,) comment(-- the creation parameters in Lua)
      comment(-- "n"  = int)
      comment(-- "d" = double)
      comment(-- "s" = char*)
      comment(-- "S" = optional char*, can be nil)
      comment(-- "i" = Ihandle*)
      comment(-- "-" = NULL, no parameters in Lua, but a NULL parameter in C)
      comment(-- "a" = char* array in a table)
      comment(-- "t" = int array in a table)
      comment(-- "v" = Ihandle* array in a table)
      
  key(funcname) operator(=) string<delimiter(")content(myControl)delimiter(")>operator(,) comment(-- [optional] name of the function used in C  )
                          comment(-- default is ctrl.nick with first letter uppercase)
                          
  key(callback) operator(=) map<inline_delimiter({)            comment(-- partial list of callbacks)
                          comment(-- only the callbacks that are not already defined by other controls needs to be defined)
    key(action) operator(=) string<delimiter(")content(ff)delimiter(")>operator(,)
    key(button_cb) operator(=) string<delimiter(")content(nnnns)delimiter(")>operator(,)
    key(enterwindow_cb) operator(=) string<delimiter(")delimiter(")>operator(,)
    key(leavewindow_cb) operator(=) string<delimiter(")delimiter(")>operator(,)
    key(motion_cb) operator(=) string<delimiter(")content(nns)delimiter(")>operator(,)
    key(resize_cb) operator(=) string<delimiter(")content(nn)delimiter(")>operator(,)
    key(scroll_cb) operator(=) string<delimiter(")content(nff)delimiter(")>operator(,)
    key(keypress_cb) operator(=) string<delimiter(")content(nn)delimiter(")>operator(,)
    key(wom_cb) operator(=) string<delimiter(")content(n)delimiter(")>operator(,)
    key(wheel_cb) operator(=) string<delimiter(")content(fnns)delimiter(")>operator(,)
    key(mdiactivate_cb) operator(=) string<delimiter(")delimiter(")>operator(,)
    key(focus_cb) operator(=) string<delimiter(")content(n)delimiter(")>operator(,)
    key(value_cb) operator(=) map<inline_delimiter({)string<delimiter(")content(nn)delimiter(")>operator(,) key(ret) operator(=) string<delimiter(")content(s)delimiter(")>inline_delimiter(})>operator(,) comment(-- ret is return type, default is n ("int"\))

 comment(-- the following types can be used for callback parameters:    )
 comment(-- n = "int",)
 comment(-- s = "char *",)
 comment(-- i = "Ihandle *",)
 comment(-- c = "unsigned char ",)
 comment(-- d = "double",)
 comment(-- f = "float",)
 comment(-- v = "Ihandle **",)
 comment(--)
 comment(-- Other parameters must be implemented in C using the extrafuncs module)
 
 comment(-- IMPORTANT: callbacks with the same name in different controls)
 comment(-- are assumed to have the same parameters, that's why they are defined only once)
 comment(-- When callbacks conflict using the same name, but different parameters)
 comment(-- generator.lua must be edited to include the callback in the list of conflicting callbacks)
 comment(-- "action" is a common callback that conflicts)
 comment(-- In the callback list, just declare the callback with the parameters used in that control.)
  inline_delimiter(})>
  
  key(include) operator(=) string<delimiter(")content(iupmycontrol.h)delimiter(")>operator(,) comment(-- [optional] header to be included, it is where the creation function is declared.)
  key(extrafuncs) operator(=) integer(1)operator(,) comment(-- [optional] additional module in C called by the initialization function)
  
  key(createfunc) operator(=) string<delimiter([[)content(         -- [optional] creation function in C, 
                          -- used if creation parameters needs some interpretation in C
                          -- not to be used together with funcname
#include<stdlib.h>
static int myControl (lua_State * L\)
{
  xxxx;
  yyyy;
  return 1;
} 
)delimiter(]])>

  key(extracode) operator(=) string<delimiter([[)content(        -- [optional] extra fucntions to be defined in C.
int luaopen_iupluamycontrol51(lua_State* L\)
{
  return iupmycontrollua_open(L\);
}
)delimiter(]])>

delimiter(})>

comment(-- must be defined so the WIDGET constructor can call it)
keyword(function) ident(ctrl.)function(createElement)operator(()ident(class)operator(,) ident(arg)operator(\))  
   keyword(return) ident(myControl)operator(()operator(\))
keyword(end)

comment(-- here you can add some custom methods to the class)
keyword(function) ident(ctrl.)function(popup)operator(()ident(handle)operator(,) ident(x)operator(,) ident(y)operator(\))
  ident(Popup)operator(()ident(handle)operator(,)ident(x)operator(,)ident(y)operator(\))
keyword(end)

ident(iupRegisterWidget)operator(()ident(ctrl)operator(\)) comment(-- will make iup.mycontrol available)
ident(iupSetClass)operator(()ident(ctrl)operator(,) string<delimiter(")content(iup widget)delimiter(")>operator(\)) comment(-- register the class in the registry)
comment(------------------------------------------------------------------------------)
comment(-- Dial class )
comment(------------------------------------------------------------------------------)
keyword(local) local_variable(ctrl) operator(=) map<delimiter({)
  key(nick) operator(=) string<delimiter(")content(dial)delimiter(")>operator(,)
  key(parent) operator(=) ident(WIDGET)operator(,)
  key(creation) operator(=) string<delimiter(")content(s)delimiter(")>operator(,)
  key(callback) operator(=) map<inline_delimiter({)
     key(mousemove_cb) operator(=) string<delimiter(")content(d)delimiter(")>operator(,)       comment(-- already registered by the val, but has a name conflict)
comment(--     button_press_cb = "d",    -- already registered by the val)
comment(--     button_release_cb = "d",  -- already registered by the val)
  inline_delimiter(})>operator(,)
  key(include) operator(=) string<delimiter(")content(iupdial.h)delimiter(")>operator(,)
delimiter(})>

keyword(function) ident(ctrl.)function(createElement)operator(()ident(class)operator(,) ident(arg)operator(\))
   keyword(return) ident(Dial)operator(()ident(arg)operator([)integer(1)operator(])operator(\))
keyword(end)

ident(iupRegisterWidget)operator(()ident(ctrl)operator(\))
ident(iupSetClass)operator(()ident(ctrl)operator(,) string<delimiter(")content(iup widget)delimiter(")>operator(\))
comment(------------------------------------------------------------------------------)
comment(-- Dialog class )
comment(------------------------------------------------------------------------------)
keyword(local) local_variable(ctrl) operator(=) map<delimiter({)
  key(nick) operator(=) string<delimiter(")content(dialog)delimiter(")>operator(,)
  key(parent) operator(=) ident(WIDGET)operator(,)
  key(creation) operator(=) string<delimiter(")content(i)delimiter(")>operator(,)
  key(callback) operator(=) map<inline_delimiter({)
    key(map_cb) operator(=) string<delimiter(")delimiter(")>operator(,)
    key(close_cb) operator(=) string<delimiter(")delimiter(")>operator(,)
    key(show_cb) operator(=) string<delimiter(")content(n)delimiter(")>operator(,)
    key(trayclick_cb) operator(=) string<delimiter(")content(nnn)delimiter(")>operator(,)
    key(dropfiles_cb) operator(=) string<delimiter(")content(snnn)delimiter(")>operator(,)
  inline_delimiter(})>
delimiter(})>

keyword(function) ident(ctrl.)function(createElement)operator(()ident(class)operator(,) ident(arg)operator(\))
   keyword(return) ident(Dialog)operator(()ident(arg)operator([)integer(1)operator(])operator(\))
keyword(end)

keyword(function) ident(ctrl.)function(popup)operator(()ident(handle)operator(,) ident(x)operator(,) ident(y)operator(\))
  ident(Popup)operator(()ident(handle)operator(,)ident(x)operator(,)ident(y)operator(\))
keyword(end)

keyword(function) ident(ctrl.)function(showxy)operator(()ident(handle)operator(,) ident(x)operator(,) ident(y)operator(\))
  keyword(return) ident(ShowXY)operator(()ident(handle)operator(,) ident(x)operator(,) ident(y)operator(\))
keyword(end)

keyword(function) ident(ctrl.)function(destroy)operator(()ident(handle)operator(\))
  keyword(return) ident(Destroy)operator(()ident(handle)operator(\))
keyword(end)

ident(iupRegisterWidget)operator(()ident(ctrl)operator(\))
ident(iupSetClass)operator(()ident(ctrl)operator(,) string<delimiter(")content(iup widget)delimiter(")>operator(\))
comment(------------------------------------------------------------------------------)
comment(-- FileDlg class )
comment(------------------------------------------------------------------------------)
keyword(local) local_variable(ctrl) operator(=) map<delimiter({)
  key(nick) operator(=) string<delimiter(")content(filedlg)delimiter(")>operator(,)
  key(parent) operator(=) ident(WIDGET)operator(,)
  key(creation) operator(=) string<delimiter(")delimiter(")>operator(,)
  key(callback) operator(=) map<inline_delimiter({)
    key(file_cb) operator(=) string<delimiter(")content(ss)delimiter(")>operator(,)
  inline_delimiter(})>operator(,)
  key(funcname) operator(=) string<delimiter(")content(FileDlg)delimiter(")>
delimiter(})> 

keyword(function) ident(ctrl.)function(popup)operator(()ident(handle)operator(,) ident(x)operator(,) ident(y)operator(\))
  ident(Popup)operator(()ident(handle)operator(,)ident(x)operator(,)ident(y)operator(\))
keyword(end)

keyword(function) ident(ctrl.)function(destroy)operator(()ident(handle)operator(\))
  keyword(return) ident(Destroy)operator(()ident(handle)operator(\))
keyword(end)

keyword(function) ident(ctrl.)function(createElement)operator(()ident(class)operator(,) ident(arg)operator(\))
   keyword(return) ident(FileDlg)operator(()operator(\))
keyword(end)
   
ident(iupRegisterWidget)operator(()ident(ctrl)operator(\))
ident(iupSetClass)operator(()ident(ctrl)operator(,) string<delimiter(")content(iup widget)delimiter(")>operator(\))

comment(------------------------------------------------------------------------------)
comment(-- Fill class )
comment(------------------------------------------------------------------------------)
keyword(local) local_variable(ctrl) operator(=) map<delimiter({)
  key(nick) operator(=) string<delimiter(")content(fill)delimiter(")>operator(,)
  key(parent) operator(=) ident(WIDGET)operator(,)
  key(creation) operator(=) string<delimiter(")delimiter(")>operator(,)
  key(callback) operator(=) map<inline_delimiter({)inline_delimiter(})>
delimiter(})>

keyword(function) ident(ctrl.)function(createElement)operator(()ident(class)operator(,) ident(arg)operator(\))
   keyword(return) ident(Fill)operator(()operator(\))
keyword(end)

ident(iupRegisterWidget)operator(()ident(ctrl)operator(\))
ident(iupSetClass)operator(()ident(ctrl)operator(,) string<delimiter(")content(iup widget)delimiter(")>operator(\))
comment(------------------------------------------------------------------------------)
comment(-- FontDlg class )
comment(------------------------------------------------------------------------------)
keyword(local) local_variable(ctrl) operator(=) map<delimiter({)
  key(nick) operator(=) string<delimiter(")content(fontdlg)delimiter(")>operator(,)
  key(parent) operator(=) ident(WIDGET)operator(,)
  key(creation) operator(=) string<delimiter(")delimiter(")>operator(,)
  key(funcname) operator(=) string<delimiter(")content(FontDlg)delimiter(")>operator(,)
  key(callback) operator(=) map<inline_delimiter({)inline_delimiter(})>
delimiter(})> 

keyword(function) ident(ctrl.)function(popup)operator(()ident(handle)operator(,) ident(x)operator(,) ident(y)operator(\))
  ident(Popup)operator(()ident(handle)operator(,)ident(x)operator(,)ident(y)operator(\))
keyword(end)

keyword(function) ident(ctrl.)function(destroy)operator(()ident(handle)operator(\))
  keyword(return) ident(Destroy)operator(()ident(handle)operator(\))
keyword(end)

keyword(function) ident(ctrl.)function(createElement)operator(()ident(class)operator(,) ident(arg)operator(\))
   keyword(return) ident(FontDlg)operator(()operator(\))
keyword(end)
   
ident(iupRegisterWidget)operator(()ident(ctrl)operator(\))
ident(iupSetClass)operator(()ident(ctrl)operator(,) string<delimiter(")content(iup widget)delimiter(")>operator(\))

comment(------------------------------------------------------------------------------)
comment(-- Frame class )
comment(------------------------------------------------------------------------------)
keyword(local) local_variable(ctrl) operator(=) map<delimiter({)
  key(nick) operator(=) string<delimiter(")content(frame)delimiter(")>operator(,)
  key(parent) operator(=) ident(WIDGET)operator(,)
  key(creation) operator(=) string<delimiter(")content(i)delimiter(")>operator(,)
  key(callback) operator(=) map<inline_delimiter({)inline_delimiter(})>
delimiter(})>

keyword(function) ident(ctrl.)function(createElement)operator(()ident(class)operator(,) ident(arg)operator(\))
   keyword(return) ident(Frame)operator(()ident(arg)operator([)integer(1)operator(])operator(\))
keyword(end)

ident(iupRegisterWidget)operator(()ident(ctrl)operator(\))
ident(iupSetClass)operator(()ident(ctrl)operator(,) string<delimiter(")content(iup widget)delimiter(")>operator(\))
comment(------------------------------------------------------------------------------)
comment(-- Gauge class )
comment(------------------------------------------------------------------------------)
keyword(local) local_variable(ctrl) operator(=) map<delimiter({)
  key(nick) operator(=) string<delimiter(")content(gauge)delimiter(")>operator(,)
  key(parent) operator(=) ident(WIDGET)operator(,)
  key(creation) operator(=) string<delimiter(")delimiter(")>operator(,)
  key(callback) operator(=) map<inline_delimiter({)inline_delimiter(})>operator(,)
  key(include) operator(=) string<delimiter(")content(iupgauge.h)delimiter(")>operator(,)
delimiter(})>

keyword(function) ident(ctrl.)function(createElement)operator(()ident(class)operator(,) ident(arg)operator(\))
   keyword(return) ident(Gauge)operator(()ident(arg)operator(.)ident(action)operator(\))
keyword(end)

ident(iupRegisterWidget)operator(()ident(ctrl)operator(\))
ident(iupSetClass)operator(()ident(ctrl)operator(,) string<delimiter(")content(iup widget)delimiter(")>operator(\))

keyword(function) function(dofile)operator(()ident(f)operator(\))
    predefined(pcall)operator(()predefined(loadfile)operator(()ident(f)operator(\))operator(\))
keyword(end)

comment(-- compatibility functions (with iuplua.lua\))
keyword(function) function(iupSetClass)operator(()ident(ctrl)operator(,) ident(name)operator(\))
  ident(element) operator(=) ident(ctrl)
keyword(end)

comment(-- dummy functions)
ident(iupluaNewClass) operator(=) keyword(function)operator((\)) keyword(end)
ident(iupSetMethod) operator(=) ident(iupluaNewClass)
ident(iupRegisterWidget) operator(=) ident(iupluaNewClass)

ident(c_types) operator(=) map<delimiter({)
  key(n) operator(=) string<delimiter(")content(int)delimiter(")>operator(,)
  key(s) operator(=) string<delimiter(")content(char *)delimiter(")>operator(,)
  key(i) operator(=) string<delimiter(")content(Ihandle *)delimiter(")>operator(,)
  key(c) operator(=) string<delimiter(")content(unsigned char )delimiter(")>operator(,)
  key(d) operator(=) string<delimiter(")content(double)delimiter(")>operator(,)
  key(f) operator(=) string<delimiter(")content(float)delimiter(")>operator(,)
  key(v) operator(=) string<delimiter(")content(Ihandle **)delimiter(")>operator(,)
delimiter(})>

comment(-- Adjust the callbacks table)
keyword(function) function(adjustcallbacktable)operator(()ident(c)operator(\))
   ident(d) operator(=) map<delimiter({)delimiter(})>
   keyword(for) ident(i)operator(,)ident(j) keyword(in) predefined(pairs)operator(()ident(c)operator(\)) keyword(do)
      keyword(if) predefined(type)operator(()ident(j)operator(\)) operator(=)operator(=) string<delimiter(")content(string)delimiter(")> keyword(then)
         ident(d)operator([)ident(i)operator(]) operator(=) map<delimiter({) ident(j)operator(,) string<delimiter(")content(IUP_)delimiter(")>operator(.)operator(.) ident(string)operator(.)ident(upper)operator(()ident(i)operator(\))delimiter(})>
      keyword(elseif) predefined(type)operator(()ident(j)operator(\)) operator(=)operator(=) string<delimiter(")content(table)delimiter(")> keyword(then)
         ident(d)operator([)ident(i)operator(]) operator(=) ident(j)
      keyword(else)
         predefined(print)operator(()string<delimiter(")content(ERROR IN CALLBACK TABLE FORMAT)delimiter(")>operator(\))
      keyword(end)
   keyword(end)
   keyword(return) ident(d)
keyword(end)


keyword(function) function(header)operator(()ident(o)operator(,)ident(i)operator(\))
   ident(io)operator(.)ident(write) string<delimiter([[)content(
/******************************************************************************
 * Automatically generated file (iuplua5\). Please don't change anything.                *
 *****************************************************************************/

#include <stdlib.h>

#include <lua.h>
#include <lauxlib.h>

#include <iup.h>
#include <iuplua.h>
)delimiter(]])>
  keyword(if) ident(i) keyword(then) ident(io)operator(.)ident(write)operator(()string<delimiter(")content(#include <)delimiter(")>operator(,)ident(i)operator(,)string<delimiter(")content(>)char(\\n)delimiter(")>operator(\)) keyword(end)
  ident(io)operator(.)ident(write)operator(()string<delimiter(')content(#include "il.h")char(\\n)char(\\n)char(\\n)delimiter(')>operator(\))
keyword(end)

keyword(function) function(firstupper)operator(()ident(name)operator(\))
   keyword(return) ident(string)operator(.)ident(upper)operator(()ident(string)operator(.)ident(sub)operator(()ident(name)operator(,)integer(1)operator(,)integer(1)operator(\))operator(\)) operator(.)operator(.) ident(string)operator(.)ident(sub)operator(()ident(name)operator(,)integer(2)operator(,)integer(-1)operator(\))
keyword(end)

keyword(function) function(write_creation)operator(()ident(o)operator(,) ident(t)operator(\))
   keyword(local) local_variable(aux) operator(=) map<delimiter({)key(n) operator(=) integer(1)delimiter(})>
   keyword(local) local_variable(u) operator(=) ident(firstupper)operator(()ident(o)operator(\))
   keyword(local) local_variable(v) operator(=) ident(t)operator(.)ident(creation)
   keyword(local) local_variable(c) operator(=) ident(t)operator(.)ident(callback)
   keyword(if) ident(t)operator(.)ident(funcname) keyword(then)
      ident(u) operator(=) ident(t)operator(.)ident(funcname)
   keyword(end)
   ident(io)operator(.)ident(write) operator(()string<delimiter(")content(static int )delimiter(")>operator(,)ident(u)operator(,)string<delimiter(")content((lua_State *L\))char(\\n)delimiter(")>operator(\))
   ident(io)operator(.)ident(write) operator(()string<delimiter(")content({)char(\\n)delimiter(")>operator(\)) 
   keyword(if) ident(t)operator(.)ident(rettype) operator(=)operator(=) predefined_constant(nil) keyword(then) ident(io)operator(.)ident(write)operator(()string<delimiter(")content(  Ihandle *ih = Iup)delimiter(")>operator(,)ident(u)operator(,)string<delimiter(")content(()delimiter(")>operator(\))
   keyword(elseif) ident(t)operator(.)ident(rettype) operator(=)operator(=) string<delimiter(")content(n)delimiter(")> keyword(then) ident(io)operator(.)ident(write)operator(()string<delimiter(")content(  int n = (Iup)delimiter(")>operator(,)ident(u)operator(,)string<delimiter(")content(()delimiter(")>operator(\))
   keyword(elseif) ident(t)operator(.)ident(rettype) operator(=)operator(=) string<delimiter(")content(s)delimiter(")> keyword(then) ident(io)operator(.)ident(write)operator(()string<delimiter(")content(  char *s = (Iup)delimiter(")>operator(,)ident(u)operator(,)string<delimiter(")content(()delimiter(")>operator(\))
   keyword(end)
   keyword(local) local_variable(max) operator(=) ident(string)operator(.)ident(len)operator(()ident(v)operator(\))
   ident(string)operator(.)ident(gsub)operator(()ident(v)operator(,) string<delimiter(")content((.\))delimiter(")>operator(,) keyword(function)operator((p\))
      keyword(if) ident(p) operator(=)operator(=) string<delimiter(")content(n)delimiter(")> keyword(then) ident(io)operator(.)ident(write)operator(()string<delimiter(")content(luaL_checkint(L, )delimiter(")>operator(,)ident(aux)operator(.)ident(n)operator(,)string<delimiter(")content(\))delimiter(")>operator(\))
      keyword(elseif) ident(p) operator(=)operator(=) string<delimiter(")content(d)delimiter(")> keyword(then) ident(io)operator(.)ident(write)operator(()string<delimiter(")content(luaL_number(L, )delimiter(")>operator(,)ident(aux)operator(.)ident(n)operator(,)string<delimiter(")content(\))delimiter(")>operator(\))
      keyword(elseif) ident(p) operator(=)operator(=) string<delimiter(")content(s)delimiter(")> keyword(then) ident(io)operator(.)ident(write)operator(()string<delimiter(")content((char *\) luaL_checkstring(L, )delimiter(")>operator(,)ident(aux)operator(.)ident(n)operator(,)string<delimiter(")content(\))delimiter(")>operator(\))
      keyword(elseif) ident(p) operator(=)operator(=) string<delimiter(")content(S)delimiter(")> keyword(then) ident(io)operator(.)ident(write)operator(()string<delimiter(")content((char *\) luaL_optstring(L, )delimiter(")>operator(,)ident(aux)operator(.)ident(n)operator(,)string<delimiter(')content(, NULL\))delimiter(')>operator(\))
      keyword(elseif) ident(p) operator(=)operator(=) string<delimiter(")content(i)delimiter(")> keyword(then) ident(io)operator(.)ident(write)operator(()string<delimiter(")content(iuplua_checkihandle(L, )delimiter(")>operator(,)ident(aux)operator(.)ident(n)operator(,)string<delimiter(")content(\))delimiter(")>operator(\))
      keyword(elseif) ident(p) operator(=)operator(=) string<delimiter(")content(-)delimiter(")> keyword(then) ident(io)operator(.)ident(write)operator(()string<delimiter(")content(NULL)delimiter(")>operator(\))
      keyword(elseif) ident(p) operator(=)operator(=) string<delimiter(")content(a)delimiter(")> keyword(then) ident(io)operator(.)ident(write)operator(()string<delimiter(")content(iuplua_checkstring_array(L, )delimiter(")>operator(,)ident(aux)operator(.)ident(n)operator(,)string<delimiter(")content(\))delimiter(")>operator(\))
      keyword(elseif) ident(p) operator(=)operator(=) string<delimiter(")content(t)delimiter(")> keyword(then) ident(io)operator(.)ident(write)operator(()string<delimiter(")content(iuplua_checkint_array(L, )delimiter(")>operator(,)ident(aux)operator(.)ident(n)operator(,)string<delimiter(")content(\))delimiter(")>operator(\))
      keyword(elseif) ident(p) operator(=)operator(=) string<delimiter(")content(v)delimiter(")> keyword(then) ident(io)operator(.)ident(write)operator(()string<delimiter(")content(iuplua_checkihandle_array(L, )delimiter(")>operator(,)ident(aux)operator(.)ident(n)operator(,)string<delimiter(")content(\))delimiter(")>operator(\))
      keyword(else) ident(io)operator(.)ident(write)operator(()string<delimiter(")content(FORMAT ')delimiter(")>operator(,) ident(p)operator(,) string<delimiter(")content(' NOT SUPPORTED)char(\\n)delimiter(")>operator(\))
      keyword(end)
      keyword(if) ident(aux)operator(.)ident(n) operator(<) ident(max) keyword(then) ident(io)operator(.)ident(write)operator(()string<delimiter(")content(, )delimiter(")>operator(\)) keyword(end)
      ident(aux)operator(.)ident(n) operator(=) ident(aux)operator(.)ident(n) operator(+) integer(1)
   keyword(end)operator(\))
   ident(io)operator(.)ident(write)operator(()string<delimiter(")content(\);)char(\\n)delimiter(")>operator(\))
   
   ident(io)operator(.)ident(write)operator(()string<delimiter(")content(  iuplua_plugstate(L, ih\);)char(\\n)delimiter(")>operator(\))
   ident(io)operator(.)ident(write)operator(()string<delimiter(")content(  iuplua_pushihandle_raw(L, ih\);)char(\\n)delimiter(")>operator(\))
   ident(io)operator(.)ident(write)operator(()string<delimiter(")content(  return 1;)char(\\n)delimiter(")>operator(\))
   ident(io)operator(.)ident(write)operator(()string<delimiter(")content(})char(\\n)char(\\n)delimiter(")>operator(\))
keyword(end)

keyword(function) function(write_callbacks)operator(()ident(o)operator(,) ident(c)operator(\))
   keyword(local) local_variable(aux) operator(=) map<delimiter({) delimiter(})>
   keyword(for) ident(i)operator(,)ident(v) keyword(in) predefined(pairs)operator(()ident(c)operator(\)) keyword(do)
      keyword(local) local_variable(s) operator(=) ident(v)operator([)integer(1)operator(])
      keyword(local) local_variable(max) operator(=) ident(string)operator(.)ident(len)operator(()ident(s)operator(\))
      ident(aux)operator(.)ident(n) operator(=) integer(0)
      ident(io)operator(.)ident(write)operator(()string<delimiter(")content(static )delimiter(")>operator(\))
      keyword(if) ident(v)operator(.)ident(ret) operator(~)operator(=) predefined_constant(nil) keyword(then)
         keyword(if) ident(v)operator(.)ident(ret) operator(=)operator(=) string<delimiter(")content(s)delimiter(")> keyword(then)
            ident(io)operator(.)ident(write)operator(()string<delimiter(")content(char * )delimiter(")>operator(\))
         keyword(end)
      keyword(else)
         ident(io)operator(.)ident(write)operator(()string<delimiter(")content(int )delimiter(")>operator(\))
      keyword(end)
      ident(io)operator(.)ident(write)operator(()ident(o)operator(,) string<delimiter(")content(_)delimiter(")>operator(,) ident(i)operator(,) string<delimiter(")content((Ihandle *self)delimiter(")>operator(\))
      keyword(if) ident(max) operator(>) integer(0) keyword(then) ident(io)operator(.)ident(write)operator(()string<delimiter(")content(, )delimiter(")>operator(\)) keyword(end)
      ident(string)operator(.)ident(gsub)operator(()ident(s)operator(,) string<delimiter(")content((.\))delimiter(")>operator(,) keyword(function)operator((p\))
         ident(io)operator(.)ident(write)operator(()ident(c_types)operator([)ident(p)operator(])operator(,) string<delimiter(")content( p)delimiter(")>operator(,) ident(aux)operator(.)ident(n)operator(\))
         ident(aux)operator(.)ident(n) operator(=) ident(aux)operator(.)ident(n) operator(+) integer(1)
         keyword(if) ident(aux)operator(.)ident(n) operator(<) ident(max) keyword(then) ident(io)operator(.)ident(write)operator(()string<delimiter(")content(, )delimiter(")>operator(\)) keyword(end)
      keyword(end)operator(\))
      ident(io)operator(.)ident(write)operator(()string<delimiter(")content(\))char(\\n)content({)char(\\n)delimiter(")>operator(\))
      ident(io)operator(.)ident(write)operator(()string<delimiter(')content(  lua_State *L = iuplua_call_start(self, ")delimiter(')>operator(,) ident(i)operator(,) string<delimiter(')content("\);)delimiter(')>operator(\))
      ident(aux)operator(.)ident(n) operator(=) integer(0)
      ident(string)operator(.)ident(gsub)operator(()ident(s)operator(,) string<delimiter(")content((.\))delimiter(")>operator(,) keyword(function)operator((p\))
         keyword(if) ident(p) operator(=)operator(=) string<delimiter(")content(n)delimiter(")> keyword(or) ident(p) operator(=)operator(=) string<delimiter(")content(f)delimiter(")> keyword(or) ident(p) operator(=)operator(=) string<delimiter(")content(d)delimiter(")> keyword(or) ident(p) operator(=)operator(=) string<delimiter(")content(c)delimiter(")> keyword(then)
            ident(io)operator(.)ident(write)operator(()string<delimiter(")char(\\n)content(  lua_pushnumber(L, p)delimiter(")>operator(.)operator(.)ident(aux)operator(.)ident(n)operator(.)operator(.)string<delimiter(")content(\);)delimiter(")>operator(\))
         keyword(elseif) ident(p) operator(=)operator(=) string<delimiter(")content(s)delimiter(")> keyword(then)
            ident(io)operator(.)ident(write)operator(()string<delimiter(")char(\\n)content(  lua_pushstring(L, p)delimiter(")>operator(.)operator(.)ident(aux)operator(.)ident(n)operator(.)operator(.)string<delimiter(")content(\);)delimiter(")>operator(\))
         keyword(elseif) ident(p) operator(=)operator(=) string<delimiter(")content(i)delimiter(")> keyword(then)
            ident(io)operator(.)ident(write)operator(()string<delimiter(")char(\\n)content(  iuplua_pushihandle(L, p)delimiter(")>operator(.)operator(.)ident(aux)operator(.)ident(n)operator(.)operator(.)string<delimiter(")content(\);)delimiter(")>operator(\))
         keyword(else)
            ident(io)operator(.)ident(write)operator(()string<delimiter(")char(\\n)content( ERROR !! )delimiter(")>operator(\))
         keyword(end)
         ident(aux)operator(.)ident(n) operator(=) ident(aux)operator(.)ident(n) operator(+) integer(1)
      keyword(end)operator(\))
      keyword(if) ident(v)operator(.)ident(ret) operator(~)operator(=) predefined_constant(nil) keyword(and) ident(v)operator(.)ident(ret) operator(=)operator(=) string<delimiter(")content(s)delimiter(")> keyword(then)
        ident(io)operator(.)ident(write)operator(()string<delimiter(")char(\\n)content(  return iuplua_call_rs(L, )delimiter(")> operator(.)operator(.) ident(max) operator(.)operator(.) string<delimiter(")content(\);)delimiter(")>operator(\))
      keyword(else)   
        ident(io)operator(.)ident(write)operator(()string<delimiter(")char(\\n)content(  return iuplua_call(L, )delimiter(")> operator(.)operator(.) ident(max) operator(.)operator(.) string<delimiter(")content(\);)delimiter(")>operator(\))
      keyword(end)
      ident(io)operator(.)ident(write)operator(()string<delimiter(")char(\\n)content(})char(\\n)char(\\n)delimiter(")>operator(\))
   keyword(end)
keyword(end)

keyword(function) function(write_initialization)operator(()ident(o)operator(,)ident(t)operator(\))
   keyword(local) local_variable(aux)operator(=) map<delimiter({)key(n)operator(=)integer(1)delimiter(})>
   keyword(local) local_variable(c) operator(=) ident(t)operator(.)ident(callback)
   keyword(local) local_variable(u) operator(=) ident(firstupper)operator(()ident(o)operator(\))
   keyword(if) ident(t)operator(.)ident(extrafuncs) keyword(then)
      ident(io)operator(.)ident(write)operator(()string<delimiter(')content(void iuplua_)delimiter(')>operator(,) ident(o)operator(,)string<delimiter(')content(funcs_open(lua_State *L\);)char(\\n)char(\\n)delimiter(')>operator(\))
   keyword(end)
   keyword(if) ident(t)operator(.)ident(openfuncname) keyword(then)
      ident(io)operator(.)ident(write)operator(()string<delimiter(")content(void )delimiter(")>operator(,) ident(t)operator(.)ident(openfuncname)operator(,) string<delimiter(")content((lua_State * L\))char(\\n)delimiter(")>operator(\))
   keyword(else)
      ident(io)operator(.)ident(write)operator(()string<delimiter(")content(int iup)delimiter(")>operator(,) ident(o)operator(,)string<delimiter(")content(lua_open(lua_State * L\))char(\\n)delimiter(")>operator(\))
   keyword(end)
   ident(io)operator(.)ident(write)operator(()string<delimiter(")content({)char(\\n)delimiter(")>operator(\))
   ident(io)operator(.)ident(write)operator(()string<delimiter(")content(  iuplua_register(L, )delimiter(")>operator(\))
   keyword(if) ident(t)operator(.)ident(funcname) keyword(then)
      ident(u) operator(=) ident(t)operator(.)ident(funcname)
   keyword(end)
   ident(io)operator(.)ident(write)operator(()ident(u)operator(,) string<delimiter(')content(, ")delimiter(')>operator(,) ident(u)operator(,)string<delimiter(')content("\);)char(\\n)char(\\n)delimiter(')>operator(\))
   
   keyword(for) ident(i)operator(,)ident(v) keyword(in) predefined(pairs)operator(()ident(c)operator(\)) keyword(do)
      keyword(local) local_variable(type) operator(=) string<delimiter(")content(NULL)delimiter(")>
      keyword(if) ident(i) operator(=)operator(=) string<delimiter(")content(action)delimiter(")> keyword(or) 
         ident(i) operator(=)operator(=) string<delimiter(")content(action_cb)delimiter(")> keyword(or) 
         ident(i) operator(=)operator(=) string<delimiter(")content(edit_cb)delimiter(")> keyword(or) 
         ident(i) operator(=)operator(=) string<delimiter(")content(mousemove_cb)delimiter(")> keyword(then)
        predefined(type) operator(=) string<delimiter(')content(")delimiter(')>operator(.)operator(.)ident(string)operator(.)ident(lower)operator(()ident(o)operator(\))operator(.)operator(.)string<delimiter(')content(")delimiter(')>
      keyword(end)
      ident(io)operator(.)ident(write)operator(()string<delimiter(')content(  iuplua_register_cb(L, ")delimiter(')>operator(,)ident(string)operator(.)ident(upper)operator(()ident(i)operator(\))operator(,)string<delimiter(')content(", (lua_CFunction\))delimiter(')>operator(,)ident(o)operator(,)string<delimiter(')content(_)delimiter(')>operator(,)ident(i)operator(,)string<delimiter(')content(, )delimiter(')>operator(,)predefined(type)operator(,)string<delimiter(')content(\);)char(\\n)delimiter(')>operator(\))
      ident(first) operator(=) integer(0)
   keyword(end)
   ident(io)operator(.)ident(write)operator(()string<delimiter(')char(\\n)delimiter(')>operator(\))
   
   keyword(if) ident(t)operator(.)ident(extrafuncs) keyword(then)
      ident(io)operator(.)ident(write)operator(()string<delimiter(')content(  iuplua_)delimiter(')>operator(,) ident(o)operator(,)string<delimiter(')content(funcs_open(L\);)char(\\n)char(\\n)delimiter(')>operator(\))
   keyword(end)
   ident(io)operator(.)ident(write)operator(()string<delimiter(')content(#ifdef IUPLUA_USELOH)char(\\n)delimiter(')>operator(\))
   ident(io)operator(.)ident(write)operator(()string<delimiter(')content(#ifdef TEC_BIGENDIAN)char(\\n)delimiter(')>operator(\))
   ident(io)operator(.)ident(write)operator(()string<delimiter(')content(#ifdef TEC_64)char(\\n)delimiter(')>operator(\))
   ident(io)operator(.)ident(write)operator(()string<delimiter(')content(#include ")delimiter(')>operator(,) ident(o)operator(,)string<delimiter(')content(_be64.loh")char(\\n)delimiter(')>operator(\))
   ident(io)operator(.)ident(write)operator(()string<delimiter(')content(#else)char(\\n)delimiter(')>operator(\))
   ident(io)operator(.)ident(write)operator(()string<delimiter(')content(#include ")delimiter(')>operator(,) ident(o)operator(,)string<delimiter(')content(_be32.loh")char(\\n)delimiter(')>operator(\))
   ident(io)operator(.)ident(write)operator(()string<delimiter(')content(#endif)char(\\n)delimiter(')>operator(\))
   ident(io)operator(.)ident(write)operator(()string<delimiter(')content(#else)char(\\n)delimiter(')>operator(\))
   ident(io)operator(.)ident(write)operator(()string<delimiter(')content(#ifdef TEC_64)char(\\n)delimiter(')>operator(\))
   ident(io)operator(.)ident(write)operator(()string<delimiter(')content(#ifdef WIN64)char(\\n)delimiter(')>operator(\))
   ident(io)operator(.)ident(write)operator(()string<delimiter(')content(#include ")delimiter(')>operator(,) ident(o)operator(,)string<delimiter(')content(_le64w.loh")char(\\n)delimiter(')>operator(\))
   ident(io)operator(.)ident(write)operator(()string<delimiter(')content(#else)char(\\n)delimiter(')>operator(\))
   ident(io)operator(.)ident(write)operator(()string<delimiter(')content(#include ")delimiter(')>operator(,) ident(o)operator(,)string<delimiter(')content(_le64.loh")char(\\n)delimiter(')>operator(\))
   ident(io)operator(.)ident(write)operator(()string<delimiter(')content(#endif)char(\\n)delimiter(')>operator(\))
   ident(io)operator(.)ident(write)operator(()string<delimiter(')content(#else)char(\\n)delimiter(')>operator(\))
   ident(io)operator(.)ident(write)operator(()string<delimiter(')content(#include ")delimiter(')>operator(,) ident(o)operator(,)string<delimiter(')content(.loh")char(\\n)delimiter(')>operator(\))
   ident(io)operator(.)ident(write)operator(()string<delimiter(')content(#endif)char(\\n)delimiter(')>operator(\))
   ident(io)operator(.)ident(write)operator(()string<delimiter(')content(#endif)char(\\n)delimiter(')>operator(\))
   ident(io)operator(.)ident(write)operator(()string<delimiter(')content(#else)char(\\n)delimiter(')>operator(\))
   ident(io)operator(.)ident(write)operator(()string<delimiter(')content(  iuplua_dofile(L, ")delimiter(')>operator(,) ident(o)operator(,)string<delimiter(')content(.lua"\);)char(\\n)delimiter(')>operator(\))
   ident(io)operator(.)ident(write)operator(()string<delimiter(')content(#endif)char(\\n)char(\\n)delimiter(')>operator(\))  
   ident(io)operator(.)ident(write)operator(()string<delimiter(')content(  return 0;)char(\\n)delimiter(')>operator(\))
   ident(io)operator(.)ident(write)operator(()string<delimiter(")content(})char(\\n)char(\\n)delimiter(")>operator(\))
keyword(end)

predefined(dofile)operator(()ident(arg)operator([)integer(1)operator(])operator(\))
ident(element)operator(.)ident(callback) operator(=) ident(adjustcallbacktable)operator(()ident(element)operator(.)ident(callback)operator(\))

ident(io)operator(.)ident(output)operator(()ident(element)operator(.)ident(nick)operator(.)operator(.)string<delimiter(")content(.c)delimiter(")>operator(\))
ident(header)operator(()ident(element)operator(.)ident(nick)operator(,) ident(element)operator(.)ident(include)operator(\))
ident(write_callbacks)operator(()ident(element)operator(.)ident(nick)operator(,) ident(element)operator(.)ident(callback)operator(\))
keyword(if) ident(element)operator(.)ident(createfunc) operator(=)operator(=) predefined_constant(nil) keyword(then) 
   ident(write_creation)operator(()ident(element)operator(.)ident(nick)operator(,) ident(element)operator(\))
keyword(else) 
   ident(io)operator(.)ident(write)operator(()ident(element)operator(.)ident(createfunc)operator(\)) 
keyword(end)
ident(write_initialization)operator(()ident(element)operator(.)ident(nick)operator(,) ident(element)operator(\))
keyword(if) ident(element)operator(.)ident(extracode) keyword(then) 
   ident(io)operator(.)ident(write)operator(()ident(element)operator(.)ident(extracode)operator(\)) 
keyword(end)
comment(------------------------------------------------------------------------------)
comment(-- GLCanvas class )
comment(------------------------------------------------------------------------------)
keyword(local) local_variable(ctrl) operator(=) map<delimiter({)
  key(nick) operator(=) string<delimiter(")content(glcanvas)delimiter(")>operator(,)
  key(parent) operator(=) ident(WIDGET)operator(,)
  key(creation) operator(=) string<delimiter(")content(-)delimiter(")>operator(,)
  key(funcname) operator(=) string<delimiter(")content(GLCanvas)delimiter(")>operator(,)
  key(include) operator(=) string<delimiter(")content(iupgl.h)delimiter(")>operator(,)
  key(callback) operator(=) map<inline_delimiter({)
    key(action) operator(=) string<delimiter(")content(nn)delimiter(")>operator(,)
  inline_delimiter(})>operator(,)
  key(extrafuncs) operator(=) integer(1)operator(,)
  key(extracode) operator(=) string<delimiter([[)content( 
int iupgllua_open(lua_State * L\)
{
  if (iuplua_opencall_internal(L\)\)
    IupGLCanvasOpen(\);

  iuplua_changeEnv(L\);
  iupglcanvaslua_open(L\);
  iuplua_returnEnv(L\);
  return 0;
}

/* obligatory to use require"iupluagl" */
int luaopen_iupluagl(lua_State* L\)
{
  return iupgllua_open(L\);
}

/* obligatory to use require"iupluagl51" */
int luaopen_iupluagl51(lua_State* L\)
{
  return iupgllua_open(L\);
}

)delimiter(]])>
delimiter(})>

keyword(function) ident(ctrl.)function(createElement)operator(()ident(class)operator(,) ident(arg)operator(\))
   keyword(return) ident(GLCanvas)operator(()operator(\))
keyword(end)

ident(iupRegisterWidget)operator(()ident(ctrl)operator(\))
ident(iupSetClass)operator(()ident(ctrl)operator(,) string<delimiter(")content(iup widget)delimiter(")>operator(\))
comment(------------------------------------------------------------------------------)
comment(-- HBox class )
comment(------------------------------------------------------------------------------)
keyword(local) local_variable(ctrl) operator(=) map<delimiter({)
  key(nick) operator(=) string<delimiter(")content(hbox)delimiter(")>operator(,)
  key(parent) operator(=) ident(BOX)operator(,)
  key(creation) operator(=) string<delimiter(")content(-)delimiter(")>operator(,)
  key(callback) operator(=) map<inline_delimiter({)inline_delimiter(})>
delimiter(})>

keyword(function) ident(ctrl.)function(append)operator(()ident(handle)operator(,) ident(elem)operator(\))
  ident(Append)operator(()ident(handle)operator(,) ident(elem)operator(\))
keyword(end)

keyword(function) ident(ctrl.)function(createElement)operator(()ident(class)operator(,) ident(arg)operator(\))
   keyword(return) ident(Hbox)operator(()operator(\))
keyword(end)

ident(iupRegisterWidget)operator(()ident(ctrl)operator(\))
ident(iupSetClass)operator(()ident(ctrl)operator(,) string<delimiter(")content(iup widget)delimiter(")>operator(\))
comment(------------------------------------------------------------------------------)
comment(-- Image class )
comment(------------------------------------------------------------------------------)
keyword(local) local_variable(ctrl) operator(=) map<delimiter({)
  key(nick) operator(=) string<delimiter(")content(image)delimiter(")>operator(,)
  key(parent) operator(=) ident(WIDGET)operator(,)
  key(creation) operator(=) string<delimiter(")content(nns)delimiter(")>operator(,) comment(-- fake definition)
  key(callback) operator(=) map<inline_delimiter({)inline_delimiter(})>operator(,)
  key(createfunc) operator(=) string<delimiter([[)content( 
#include<stdlib.h>
static int Image (lua_State * L\)
{
  int w, h, i, j;
  char *img;
  Ihandle *image;
  
  h = luaL_getn(L, 1\);
  lua_pushnumber(L, 1\);
  lua_gettable(L, 1\);
  w = luaL_getn(L, -1\);
  lua_pop(L, 1\);
  
  img = (char *\) malloc (h*w\);

  for (i=1; i<=h; i++\)
  {
    lua_pushnumber(L, i\);
    lua_gettable(L, 1\);
    for (j=1; j<=w; j++\)
    {
      int idx = (i-1\)*w+(j-1\);
      lua_pushnumber(L, j\);
      lua_gettable(L, -2\);
      img[idx] = (char\)lua_tonumber(L, -1\);
      lua_pop(L, 1\);
    }
    lua_pop(L, 1\);
  }
  
  image = IupImage(w,h,img\);  
  free(img\);

  w = luaL_getn(L, 2\);

  for(i=1; i<=w; i++\)
  {
    lua_pushnumber(L,i\);
    lua_pushnumber(L,i\);
    lua_gettable(L, 2\);
    IupStoreAttribute(image, (char *\) lua_tostring(L,-2\), (char *\) lua_tostring(L,-1\)\);
    lua_pop(L, 2\);
  }
  
  iuplua_plugstate(L, image\);
  iuplua_pushihandle_raw(L, image\);
  return 1;
} 
 
)delimiter(]])>
delimiter(})>

keyword(function) ident(ctrl.)function(createElement)operator(()ident(class)operator(,) ident(arg)operator(\))
   keyword(return) ident(Image)operator(()ident(arg)operator(,) ident(arg)operator(.)ident(colors)operator(\))
keyword(end)

ident(iupRegisterWidget)operator(()ident(ctrl)operator(\))
ident(iupSetClass)operator(()ident(ctrl)operator(,) string<delimiter(")content(iup widget)delimiter(")>operator(\))
comment(------------------------------------------------------------------------------)
comment(-- ImageRGB class )
comment(------------------------------------------------------------------------------)
keyword(local) local_variable(ctrl) operator(=) map<delimiter({)
  key(nick) operator(=) string<delimiter(")content(imagergb)delimiter(")>operator(,)
  key(parent) operator(=) ident(WIDGET)operator(,)
  key(creation) operator(=) string<delimiter(")content(nns)delimiter(")>operator(,) comment(-- fake definition)
  key(funcname) operator(=) string<delimiter(")content(ImageRGB)delimiter(")>operator(,) 
  key(callback) operator(=) map<inline_delimiter({)inline_delimiter(})>operator(,)
  key(createfunc) operator(=) string<delimiter([[)content( 
static int ImageRGB(lua_State *L\)
{
  int w = luaL_checkint(L, 1\);
  int h = luaL_checkint(L, 2\);
  unsigned char *pixels = iuplua_checkuchar_array(L, 3, w*h*3\);
  Ihandle *ih = IupImageRGB(w, h, pixels\);
  iuplua_plugstate(L, ih\);
  iuplua_pushihandle_raw(L, ih\);
  free(pixels\);
  return 1;
}
 
)delimiter(]])>
delimiter(})>

keyword(function) ident(ctrl.)function(createElement)operator(()ident(class)operator(,) ident(arg)operator(\))
   keyword(return) ident(ImageRGB)operator(()ident(arg)operator(.)ident(width)operator(,) ident(arg)operator(.)ident(height)operator(,) ident(arg)operator(.)ident(pixels)operator(\))
keyword(end)

ident(iupRegisterWidget)operator(()ident(ctrl)operator(\))
ident(iupSetClass)operator(()ident(ctrl)operator(,) string<delimiter(")content(iup widget)delimiter(")>operator(\))
comment(------------------------------------------------------------------------------)
comment(-- ImageRGBA class )
comment(------------------------------------------------------------------------------)
keyword(local) local_variable(ctrl) operator(=) map<delimiter({)
  key(nick) operator(=) string<delimiter(")content(imagergba)delimiter(")>operator(,)
  key(parent) operator(=) ident(WIDGET)operator(,)
  key(creation) operator(=) string<delimiter(")content(nns)delimiter(")>operator(,) comment(-- fake definition)
  key(funcname) operator(=) string<delimiter(")content(ImageRGBA)delimiter(")>operator(,) 
  key(callback) operator(=) map<inline_delimiter({)inline_delimiter(})>operator(,)
  key(createfunc) operator(=) string<delimiter([[)content( 
static int ImageRGBA(lua_State *L\)
{
  int w = luaL_checkint(L, 1\);
  int h = luaL_checkint(L, 2\);
  unsigned char *pixels = iuplua_checkuchar_array(L, 3, w*h*4\);
  Ihandle *ih = IupImageRGBA(w, h, pixels\);
  iuplua_plugstate(L, ih\);
  iuplua_pushihandle_raw(L, ih\);
  free(pixels\);
  return 1;
}
 
)delimiter(]])>
delimiter(})>

keyword(function) ident(ctrl.)function(createElement)operator(()ident(class)operator(,) ident(arg)operator(\))
   keyword(return) ident(ImageRGBA)operator(()ident(arg)operator(.)ident(width)operator(,) ident(arg)operator(.)ident(height)operator(,) ident(arg)operator(.)ident(pixels)operator(\))
keyword(end)

ident(iupRegisterWidget)operator(()ident(ctrl)operator(\))
ident(iupSetClass)operator(()ident(ctrl)operator(,) string<delimiter(")content(iup widget)delimiter(")>operator(\))
comment(------------------------------------------------------------------------------)
comment(-- Item class )
comment(------------------------------------------------------------------------------)
keyword(local) local_variable(ctrl) operator(=) map<delimiter({)
  key(nick) operator(=) string<delimiter(")content(item)delimiter(")>operator(,)
  key(parent) operator(=) ident(WIDGET)operator(,)
  key(creation) operator(=) string<delimiter(")content(S-)delimiter(")>operator(,)
  key(callback) operator(=) map<inline_delimiter({)
    key(action) operator(=) string<delimiter(")delimiter(")>operator(,) 
    key(highlight_cb) operator(=) string<delimiter(")delimiter(")>operator(,)
  inline_delimiter(})>
delimiter(})> 

keyword(function) ident(ctrl.)function(createElement)operator(()ident(class)operator(,) ident(arg)operator(\))
   keyword(return) ident(Item)operator(()ident(arg)operator(.)ident(title)operator(\))
keyword(end)
   
ident(iupRegisterWidget)operator(()ident(ctrl)operator(\))
ident(iupSetClass)operator(()ident(ctrl)operator(,) string<delimiter(")content(iup widget)delimiter(")>operator(\))
comment(-- This file is executed with the "iup" table already as the globalindex)

comment(------------------------------------------------------------------------------)
comment(-- Callback handler  )
comment(------------------------------------------------------------------------------)

ident(callbacks) operator(=) map<delimiter({)delimiter(})>

keyword(function) function(iupCallMethod)operator(()ident(name)operator(,) operator(.)operator(.)operator(.)operator(\))
  keyword(local) local_variable(handle) operator(=) ident(arg)operator([)integer(1)operator(]) comment(-- always the handle)
  keyword(local) local_variable(func) operator(=) ident(handle)operator([)ident(name)operator(])
  keyword(if) operator(()keyword(not) ident(func)operator(\)) keyword(then)
    keyword(return)
  keyword(end)
  
  keyword(if) predefined(type)operator(()ident(func)operator(\)) operator(=)operator(=) string<delimiter(")content(function)delimiter(")> keyword(then)
    keyword(return) ident(func)operator(()ident(unpack)operator(()ident(arg)operator(\))operator(\))
  keyword(elseif) predefined(type)operator(()ident(func)operator(\)) operator(=)operator(=) string<delimiter(")content(string)delimiter(")> keyword(then)  
    keyword(local) local_variable(temp) operator(=) ident(self)
    ident(self) operator(=) ident(handle)
    keyword(local) local_variable(result) operator(=) ident(iup)operator(.)ident(dostring)operator(()ident(func)operator(\))
    ident(self) operator(=) ident(temp)
    keyword(return) ident(result)
  keyword(else)
    keyword(return) ident(iup)operator(.)ident(ERROR)
  keyword(end)
keyword(end)

keyword(function) function(RegisterCallback)operator(()ident(name)operator(,) ident(func)operator(,) predefined(type)operator(\))
  keyword(if) keyword(not) ident(callbacks)operator([)ident(name)operator(]) keyword(then) ident(callbacks)operator([)ident(name)operator(]) operator(=) map<delimiter({)delimiter(})> keyword(end)
  keyword(local) local_variable(cb) operator(=) ident(callbacks)operator([)ident(name)operator(])
  keyword(if) predefined(type) keyword(then)
    ident(cb)operator([)predefined(type)operator(]) operator(=) ident(func)
  keyword(else)
    ident(cb)operator([)integer(1)operator(]) operator(=) ident(func)
  keyword(end)
keyword(end)

comment(------------------------------------------------------------------------------)
comment(-- Meta Methods )
comment(------------------------------------------------------------------------------)


keyword(local) local_variable(widget_gettable) operator(=) keyword(function)operator((object, index\))
  keyword(local) local_variable(p) operator(=) ident(object)
  keyword(local) local_variable(v)
  keyword(while) integer(1) keyword(do)
    ident(v) operator(=) predefined(rawget)operator(()ident(p)operator(,) ident(index)operator(\))
    keyword(if) ident(v) keyword(then) keyword(return) ident(v) keyword(end)
    ident(p) operator(=) predefined(rawget)operator(()ident(p)operator(,) string<delimiter(")content(parent)delimiter(")>operator(\))
      keyword(if) keyword(not) ident(p) keyword(then) keyword(return) predefined_constant(nil) keyword(end)
  keyword(end)
keyword(end)

ident(iupNewClass)operator(()string<delimiter(")content(iup widget)delimiter(")>operator(\))
ident(iupSetMethod)operator(()string<delimiter(")content(iup widget)delimiter(")>operator(,) string<delimiter(")content(__index)delimiter(")>operator(,) ident(widget_gettable)operator(\))


keyword(local) local_variable(ihandle_gettable) operator(=) keyword(function)operator((handle, index\))
  keyword(local) local_variable(INDEX) operator(=) ident(string)operator(.)ident(upper)operator(()ident(index)operator(\))
  keyword(if) operator(()ident(callbacks)operator([)ident(INDEX)operator(])operator(\)) keyword(then) 
   keyword(local) local_variable(object) operator(=) ident(iupGetWidget)operator(()ident(handle)operator(\))
   keyword(if) operator(()keyword(not) ident(object) keyword(or) predefined(type)operator(()ident(object)operator(\))operator(~)operator(=)string<delimiter(")content(table)delimiter(")>operator(\)) keyword(then) predefined(error)operator(()string<delimiter(")content(invalid iup handle)delimiter(")>operator(\)) keyword(end)
   keyword(return) ident(object)operator([)ident(index)operator(])
  keyword(else)
    keyword(local) local_variable(value) operator(=) ident(GetAttribute)operator(()ident(handle)operator(,) ident(INDEX)operator(\))
    keyword(if) operator(()keyword(not) ident(value)operator(\)) keyword(then)
      keyword(local) local_variable(object) operator(=) ident(iupGetWidget)operator(()ident(handle)operator(\))
      keyword(if) operator(()keyword(not) ident(object) keyword(or) predefined(type)operator(()ident(object)operator(\))operator(~)operator(=)string<delimiter(")content(table)delimiter(")>operator(\)) keyword(then) predefined(error)operator(()string<delimiter(")content(invalid iup handle)delimiter(")>operator(\)) keyword(end)
      keyword(return) ident(object)operator([)ident(index)operator(])
    keyword(elseif) predefined(type)operator(()ident(value)operator(\))operator(=)operator(=) string<delimiter(")content(number)delimiter(")> keyword(or) predefined(type)operator(()ident(value)operator(\)) operator(=)operator(=) string<delimiter(")content(string)delimiter(")>  keyword(then)
      keyword(local) local_variable(ih) operator(=) ident(GetHandle)operator(()ident(value)operator(\))
      keyword(if) ident(ih) keyword(then) keyword(return) ident(ih)
      keyword(else) keyword(return) ident(value) keyword(end)
    keyword(else)
      keyword(return) ident(value) 
    keyword(end)
  keyword(end)
keyword(end)

keyword(local) local_variable(ihandle_settable) operator(=) keyword(function)operator((handle, index, value\))
  keyword(local) local_variable(ti) operator(=) predefined(type)operator(()ident(index)operator(\))
  keyword(local) local_variable(tv) operator(=) predefined(type)operator(()ident(value)operator(\))
  keyword(local) local_variable(object) operator(=) ident(iupGetWidget)operator(()ident(handle)operator(\))
  keyword(if) operator(()keyword(not) ident(object) keyword(or) predefined(type)operator(()ident(object)operator(\))operator(~)operator(=)string<delimiter(")content(table)delimiter(")>operator(\)) keyword(then) predefined(error)operator(()string<delimiter(")content(invalid iup handle)delimiter(")>operator(\)) keyword(end)
  keyword(if) ident(ti) operator(=)operator(=) string<delimiter(")content(number)delimiter(")> keyword(or) ident(ti) operator(=)operator(=) string<delimiter(")content(string)delimiter(")> keyword(then) comment(-- check if a valid C name)
    keyword(local) local_variable(INDEX) operator(=) ident(string)operator(.)ident(upper)operator(()ident(index)operator(\))
    keyword(local) local_variable(cb) operator(=) ident(callbacks)operator([)ident(INDEX)operator(])
    keyword(if) operator(()ident(cb)operator(\)) keyword(then) comment(-- if a callback name)
      keyword(local) local_variable(func) operator(=) ident(cb)operator([)integer(1)operator(])
      keyword(if) operator(()keyword(not) ident(func)operator(\)) keyword(then)
        ident(func) operator(=) ident(cb)operator([)ident(GetType)operator(()ident(handle)operator(\))operator(])
      keyword(end)
      ident(iupSetCallback)operator(()ident(handle)operator(,) ident(INDEX)operator(,) ident(func)operator(,) ident(value)operator(\)) comment(-- register the pre-defined C callback)
      ident(object)operator([)ident(index)operator(]) operator(=) ident(value) comment(-- store also in Lua)
    keyword(elseif) ident(iupGetClass)operator(()ident(value)operator(\)) operator(=)operator(=) string<delimiter(")content(iup handle)delimiter(")> keyword(then) comment(-- if a iup handle)
      keyword(local) local_variable(name) operator(=) ident(ihandle_setname)operator(()ident(value)operator(\))
      ident(StoreAttribute)operator(()ident(handle)operator(,) ident(INDEX)operator(,) ident(name)operator(\))
      ident(object)operator([)ident(index)operator(]) operator(=) predefined_constant(nil) comment(-- if there was something in Lua remove it)
    keyword(elseif) ident(tv) operator(=)operator(=) string<delimiter(")content(string)delimiter(")> keyword(or) ident(tv) operator(=)operator(=) string<delimiter(")content(number)delimiter(")> keyword(or) ident(tv) operator(=)operator(=) string<delimiter(")content(nil)delimiter(")> keyword(then) comment(-- if a common value)
      ident(StoreAttribute)operator(()ident(handle)operator(,) ident(INDEX)operator(,) ident(value)operator(\))
      ident(object)operator([)ident(index)operator(]) operator(=) predefined_constant(nil) comment(-- if there was somthing in Lua remove it)
    keyword(else)
      ident(object)operator([)ident(index)operator(]) operator(=) ident(value) comment(-- store also in Lua)
    keyword(end)
  keyword(else)
    ident(object)operator([)ident(index)operator(]) operator(=) ident(value) comment(-- store also in Lua)
  keyword(end)
keyword(end)

ident(iupNewClass)operator(()string<delimiter(")content(iup handle)delimiter(")>operator(\))
ident(iupSetMethod)operator(()string<delimiter(")content(iup handle)delimiter(")>operator(,) string<delimiter(")content(__index)delimiter(")>operator(,) ident(ihandle_gettable)operator(\))
ident(iupSetMethod)operator(()string<delimiter(")content(iup handle)delimiter(")>operator(,) string<delimiter(")content(__newindex)delimiter(")>operator(,) ident(ihandle_settable)operator(\))
ident(iupSetMethod)operator(()string<delimiter(")content(iup handle)delimiter(")>operator(,) string<delimiter(")content(__tostring)delimiter(")>operator(,) ident(ihandle_tostring)operator(\))
ident(iupSetMethod)operator(()string<delimiter(")content(iup handle)delimiter(")>operator(,) string<delimiter(")content(__eq)delimiter(")>operator(,) ident(ihandle_compare)operator(\)) comment(-- implemented in C)


comment(------------------------------------------------------------------------------)
comment(-- Utilities )
comment(------------------------------------------------------------------------------)

keyword(function) function(ihandle_setname)operator(()ident(v)operator(\))  comment(-- used also by radio and zbox)
  keyword(local) local_variable(name) operator(=) ident(GetName)operator(()ident(v)operator(\))
  keyword(if) keyword(not) ident(name) keyword(then)
    keyword(local) local_variable(autoname) operator(=) ident(string)operator(.)ident(format)operator(()string<delimiter(")content(_IUPLUA_NAME(%s\))delimiter(")>operator(,) predefined(tostring)operator(()ident(v)operator(\))operator(\))
    ident(SetHandle)operator(()ident(autoname)operator(,) ident(v)operator(\))
    keyword(return) ident(autoname)
  keyword(end)
  keyword(return) ident(name)
keyword(end)

keyword(function) function(iupRegisterWidget)operator(()ident(ctrl)operator(\)) comment(-- called by all the controls initialization functions)
  ident(iup)operator([)ident(ctrl)operator(.)ident(nick)operator(]) operator(=) keyword(function)operator((arg\))
    keyword(return) ident(ctrl)operator(:)ident(constructor)operator(()ident(arg)operator(\))
  keyword(end)
keyword(end)

keyword(function) function(RegisterHandle)operator(()ident(handle)operator(,) ident(typename)operator(\))

  ident(iupSetClass)operator(()ident(handle)operator(,) string<delimiter(")content(iup handle)delimiter(")>operator(\))
  
  keyword(local) local_variable(object) operator(=) ident(iupGetWidget)operator(()ident(handle)operator(\))
  keyword(if) keyword(not) ident(object) keyword(then)

    keyword(local) local_variable(class) operator(=) ident(iup)operator([)ident(string)operator(.)ident(upper)operator(()ident(typename)operator(\))operator(])
    keyword(if) keyword(not) ident(class) keyword(then)
      ident(class) operator(=) ident(WIDGET)
    keyword(end)

    keyword(local) local_variable(object) operator(=) map<delimiter({) key(parent)operator(=)ident(class)operator(,) key(handle)operator(=)ident(handle) delimiter(})>
    ident(iupSetClass)operator(()ident(object)operator(,) string<delimiter(")content(iup widget)delimiter(")>operator(\))
    ident(iupSetWidget)operator(()ident(handle)operator(,) ident(object)operator(\))
  keyword(end)
  
  keyword(return) ident(handle)
keyword(end)

comment(------------------------------------------------------------------------------)
comment(-- Widget class (top class\) )
comment(------------------------------------------------------------------------------)

ident(WIDGET) operator(=) map<delimiter({)
  key(callback) operator(=) map<inline_delimiter({)inline_delimiter(})>
delimiter(})>

keyword(function) ident(WIDGET.)function(show)operator(()ident(object)operator(\))
  ident(Show)operator(()ident(object)operator(.)ident(handle)operator(\))
keyword(end)

keyword(function) ident(WIDGET.)function(hide)operator(()ident(object)operator(\))
  ident(Hide)operator(()ident(object)operator(.)ident(handle)operator(\))
keyword(end)

keyword(function) ident(WIDGET.)function(map)operator(()ident(object)operator(\))
  ident(Map)operator(()ident(object)operator(.)ident(handle)operator(\))
keyword(end)

keyword(function) ident(WIDGET.)function(constructor)operator(()ident(class)operator(,) ident(arg)operator(\))
  keyword(local) local_variable(handle) operator(=) ident(class)operator(:)ident(createElement)operator(()ident(arg)operator(\))
  keyword(local) local_variable(object) operator(=) map<delimiter({) 
    key(parent) operator(=) ident(class)operator(,)
    key(handle) operator(=) ident(handle)
  delimiter(})>
  ident(iupSetClass)operator(()ident(handle)operator(,) string<delimiter(")content(iup handle)delimiter(")>operator(\))
  ident(iupSetClass)operator(()ident(object)operator(,) string<delimiter(")content(iup widget)delimiter(")>operator(\))
  ident(iupSetWidget)operator(()ident(handle)operator(,) ident(object)operator(\))
  ident(object)operator(:)ident(setAttributes)operator(()ident(arg)operator(\))
  keyword(return) ident(handle)
keyword(end)

keyword(function) ident(WIDGET.)function(setAttributes)operator(()ident(object)operator(,) ident(arg)operator(\))
  keyword(local) local_variable(handle) operator(=) ident(object)operator(.)ident(handle)
  keyword(for) ident(i)operator(,)ident(v) keyword(in) predefined(pairs)operator(()ident(arg)operator(\)) keyword(do) 
    keyword(if) predefined(type)operator(()ident(i)operator(\)) operator(=)operator(=) string<delimiter(")content(number)delimiter(")> keyword(and) ident(iupGetClass)operator(()ident(v)operator(\)) operator(=)operator(=) string<delimiter(")content(iup handle)delimiter(")> keyword(then)
      comment(-- We should not set this or other elements (such as iuptext\))
      comment(-- will erroneosly inherit it)
      predefined(rawset)operator(()ident(object)operator(,) ident(i)operator(,) ident(v)operator(\))
    keyword(else)
      comment(-- this will call settable metamethod)
      ident(handle)operator([)ident(i)operator(]) operator(=) ident(v)
    keyword(end)
  keyword(end)
keyword(end)

comment(-- all the objects in the hierarchy must be "iup widget")
comment(-- Must repeat this call for every new widget)
ident(iupSetClass)operator(()ident(WIDGET)operator(,) string<delimiter(")content(iup widget)delimiter(")>operator(\))


comment(------------------------------------------------------------------------------)
comment(-- Box class (inherits from WIDGET\) )
comment(------------------------------------------------------------------------------)

ident(BOX) operator(=) map<delimiter({)
  key(parent) operator(=) ident(WIDGET)
delimiter(})>

keyword(function) ident(BOX.)function(setAttributes)operator(()ident(object)operator(,) ident(arg)operator(\))
  keyword(local) local_variable(handle) operator(=) predefined(rawget)operator(()ident(object)operator(,) string<delimiter(")content(handle)delimiter(")>operator(\))
  keyword(local) local_variable(n) operator(=) ident(table)operator(.)ident(getn)operator(()ident(arg)operator(\))
  keyword(for) ident(i) operator(=) integer(1)operator(,) ident(n) keyword(do)
    keyword(if) ident(iupGetClass)operator(()ident(arg)operator([)ident(i)operator(])operator(\)) operator(=)operator(=) string<delimiter(")content(iup handle)delimiter(")> keyword(then) 
      ident(Append)operator(()ident(handle)operator(,) ident(arg)operator([)ident(i)operator(])operator(\)) 
    keyword(end)
  keyword(end)
  ident(WIDGET)operator(.)ident(setAttributes)operator(()ident(object)operator(,) ident(arg)operator(\))
keyword(end)

ident(iupSetClass)operator(()ident(BOX)operator(,) string<delimiter(")content(iup widget)delimiter(")>operator(\))


comment(------------------------------------------------------------------------------)
comment(-- Compatibility functions.)
comment(------------------------------------------------------------------------------)

ident(error_message_popup) operator(=) predefined_constant(nil)

keyword(function) function(_ERRORMESSAGE)operator(()ident(err)operator(\))
  keyword(if) operator(()ident(error_message_popup)operator(\)) keyword(then)
    ident(error_message_popup)operator(.)ident(value) operator(=) ident(err)
  keyword(else)  
    keyword(local) local_variable(bt) operator(=) ident(button)map<delimiter({)key(title)operator(=)string<delimiter(")content(Ok)delimiter(")>operator(,) key(size)operator(=)string<delimiter(")content(60)delimiter(")>operator(,) key(action)operator(=)string<delimiter(")content(error_message_popup = nil; return iup.CLOSE)delimiter(")>delimiter(})>
    keyword(local) local_variable(ml) operator(=) ident(multiline)map<delimiter({)key(expand)operator(=)string<delimiter(")content(YES)delimiter(")>operator(,) key(readonly)operator(=)string<delimiter(")content(YES)delimiter(")>operator(,) key(value)operator(=)ident(err)operator(,) key(size)operator(=)string<delimiter(")content(300x150)delimiter(")>delimiter(})>
    keyword(local) local_variable(vb) operator(=) ident(vbox)map<delimiter({)ident(ml)operator(,) ident(bt)operator(;) key(alignment)operator(=)string<delimiter(")content(ACENTER)delimiter(")>operator(,) key(margin)operator(=)string<delimiter(")content(10x10)delimiter(")>operator(,) key(gap)operator(=)string<delimiter(")content(10)delimiter(")>delimiter(})>
    keyword(local) local_variable(dg) operator(=) ident(dialog)map<delimiter({)ident(vb)operator(;) key(title)operator(=)string<delimiter(")content(Error Message)delimiter(")>operator(,)key(defaultesc)operator(=)ident(bt)operator(,)key(defaultenter)operator(=)ident(bt)operator(,)key(startfocus)operator(=)ident(bt)delimiter(})>
    ident(error_message_popup) operator(=) ident(ml)
    ident(dg)operator(:)ident(popup)operator(()ident(CENTER)operator(,) ident(CENTER)operator(\))
    ident(dg)operator(:)ident(destroy)operator(()operator(\))
    ident(error_message_popup) operator(=) predefined_constant(nil)
  keyword(end)
keyword(end)

ident(pack) operator(=) keyword(function) operator((...\)) keyword(return) ident(arg) keyword(end)

keyword(function) function(protectedcall_)operator(()ident(f)operator(,) ident(err)operator(\))
  keyword(if) keyword(not) ident(f) keyword(then) 
    predefined(_ERRORMESSAGE)operator(()ident(err)operator(\))
    keyword(return) 
  keyword(end)
  keyword(local) local_variable(ret) operator(=) ident(pack)operator(()predefined(pcall)operator(()ident(f)operator(\))operator(\))
  keyword(if) keyword(not) ident(ret)operator([)integer(1)operator(]) keyword(then) 
    predefined(_ERRORMESSAGE)operator(()ident(ret)operator([)integer(2)operator(])operator(\))
    keyword(return)
  keyword(else)  
    ident(table)operator(.)ident(remove)operator(()ident(ret)operator(,) integer(1)operator(\))
    keyword(return) ident(unpack)operator(()ident(ret)operator(\))
  keyword(end)
keyword(end)

keyword(function) function(dostring)operator(()ident(s)operator(\)) keyword(return) ident(protectedcall_)operator(()ident(loadstring)operator(()ident(s)operator(\))operator(\)) keyword(end)
keyword(function) function(dofile)operator(()ident(f)operator(\)) keyword(return) ident(protectedcall_)operator(()predefined(loadfile)operator(()ident(f)operator(\))operator(\)) keyword(end)

keyword(function) function(RGB)operator(()ident(r)operator(,) ident(g)operator(,) ident(b)operator(\))
  keyword(return) ident(string)operator(.)ident(format)operator(()string<delimiter(")content(%d %d %d)delimiter(")>operator(,) integer(255)operator(*)ident(r)operator(,) integer(255)operator(*)ident(g)operator(,) integer(255)operator(*)ident(b)operator(\))
keyword(end)
comment(------------------------------------------------------------------------------)
comment(-- Label class )
comment(------------------------------------------------------------------------------)
keyword(local) local_variable(ctrl) operator(=) map<delimiter({)
  key(nick) operator(=) string<delimiter(")content(label)delimiter(")>operator(,)
  key(parent) operator(=) ident(WIDGET)operator(,)
  key(creation) operator(=) string<delimiter(")content(S)delimiter(")>operator(,)
  key(callback) operator(=) map<inline_delimiter({)inline_delimiter(})>
delimiter(})>

keyword(function) ident(ctrl.)function(createElement)operator(()ident(class)operator(,) ident(arg)operator(\))
   keyword(return) ident(Label)operator(()ident(arg)operator(.)ident(title)operator(\))
keyword(end)

ident(iupRegisterWidget)operator(()ident(ctrl)operator(\))
ident(iupSetClass)operator(()ident(ctrl)operator(,) string<delimiter(")content(iup widget)delimiter(")>operator(\))
comment(------------------------------------------------------------------------------)
comment(-- List class )
comment(------------------------------------------------------------------------------)
keyword(local) local_variable(ctrl) operator(=) map<delimiter({)
  key(nick) operator(=) string<delimiter(")content(list)delimiter(")>operator(,)
  key(parent) operator(=) ident(WIDGET)operator(,)
  key(creation) operator(=) string<delimiter(")content(-)delimiter(")>operator(,)
  key(callback) operator(=) map<inline_delimiter({)
     key(action) operator(=) string<delimiter(")content(snn)delimiter(")>operator(,) 
     key(multiselect_cb) operator(=) string<delimiter(")content(s)delimiter(")>operator(,)
     key(edit_cb) operator(=) string<delimiter(")content(ns)delimiter(")>operator(,)
   inline_delimiter(})>
delimiter(})> 

keyword(function) ident(ctrl.)function(createElement)operator(()ident(class)operator(,) ident(arg)operator(\))
   keyword(return) ident(List)operator(()operator(\))
keyword(end)
   
ident(iupRegisterWidget)operator(()ident(ctrl)operator(\))
ident(iupSetClass)operator(()ident(ctrl)operator(,) string<delimiter(")content(iup widget)delimiter(")>operator(\))
comment(------------------------------------------------------------------------------)
comment(-- Matrix class )
comment(------------------------------------------------------------------------------)
keyword(local) local_variable(ctrl) operator(=) map<delimiter({)
  key(nick) operator(=) string<delimiter(")content(matrix)delimiter(")>operator(,)
  key(parent) operator(=) ident(WIDGET)operator(,)
  key(creation) operator(=) string<delimiter(")content(-)delimiter(")>operator(,)
  key(callback) operator(=) map<inline_delimiter({)
    key(action_cb) operator(=) string<delimiter(")content(nnnns)delimiter(")>operator(,)
    key(click_cb) operator(=) string<delimiter(")content(nns)delimiter(")>operator(,)
    key(release_cb) operator(=) string<delimiter(")content(nns)delimiter(")>operator(,)
    key(drop_cb) operator(=) string<delimiter(")content(inn)delimiter(")>operator(,)
    key(dropcheck_cb) operator(=) string<delimiter(")content(nn)delimiter(")>operator(,)
    key(draw_cb) operator(=) string<delimiter(")content(nnnnnnn)delimiter(")>operator(,)  comment(-- fake definitions to be replaced by matrixfuncs module)
    key(dropselect_cb) operator(=) string<delimiter(")content(nnisnn)delimiter(")>operator(,)
    key(edition_cb) operator(=) string<delimiter(")content(nnn)delimiter(")>operator(,)
    key(enteritem_cb) operator(=) string<delimiter(")content(nn)delimiter(")>operator(,)
    key(leaveitem_cb) operator(=) string<delimiter(")content(nn)delimiter(")>operator(,)
    key(mousemove_cb) operator(=) string<delimiter(")content(nn)delimiter(")>operator(,)
    key(scrolltop_cb) operator(=) string<delimiter(")content(nn)delimiter(")>operator(,)
    key(fgcolor_cb) operator(=) string<delimiter(")content(nn)delimiter(")>operator(,)  comment(-- fake definitions to be replaced by matrixfuncs module)
    key(bgcolor_cb) operator(=) string<delimiter(")content(nn)delimiter(")>operator(,)
    key(value_cb) operator(=) map<inline_delimiter({)string<delimiter(")content(nn)delimiter(")>operator(,) key(ret) operator(=) string<delimiter(")content(s)delimiter(")>inline_delimiter(})>operator(,) comment(-- ret is return type)
    key(value_edit_cb) operator(=) string<delimiter(")content(nns)delimiter(")>operator(,)
    key(mark_cb) operator(=) string<delimiter(")content(nn)delimiter(")>operator(,)
    key(markedit_cb) operator(=) string<delimiter(")content(nnn)delimiter(")>operator(,)
  inline_delimiter(})>operator(,)
  key(include) operator(=) string<delimiter(")content(iupmatrix.h)delimiter(")>operator(,)
  key(extrafuncs) operator(=) integer(1)operator(,)
delimiter(})>

keyword(function) ident(ctrl.)function(createElement)operator(()ident(class)operator(,) ident(arg)operator(\))
   keyword(return) ident(Matrix)operator(()ident(arg)operator(.)ident(action)operator(\))
keyword(end)

keyword(function) ident(ctrl.)function(setcell)operator(()ident(handle)operator(,) ident(l)operator(,) ident(c)operator(,) ident(val)operator(\))
  ident(SetAttribute)operator(()ident(handle)operator(,)ident(l)operator(.)operator(.)string<delimiter(")content(:)delimiter(")>operator(.)operator(.)ident(c)operator(,)ident(val)operator(\))
keyword(end)

keyword(function) ident(ctrl.)function(getcell)operator(()ident(handle)operator(,) ident(l)operator(,) ident(c)operator(\))
  keyword(return) ident(GetAttribute)operator(()ident(handle)operator(,)ident(l)operator(.)operator(.)string<delimiter(")content(:)delimiter(")>operator(.)operator(.)ident(c)operator(\))
keyword(end)

ident(iupRegisterWidget)operator(()ident(ctrl)operator(\))
ident(iupSetClass)operator(()ident(ctrl)operator(,) string<delimiter(")content(iup widget)delimiter(")>operator(\))
comment(------------------------------------------------------------------------------)
comment(-- Menu class )
comment(------------------------------------------------------------------------------)
keyword(local) local_variable(ctrl) operator(=) map<delimiter({)
  key(nick) operator(=) string<delimiter(")content(menu)delimiter(")>operator(,)
  key(parent) operator(=) ident(BOX)operator(,)
  key(creation) operator(=) string<delimiter(")content(-)delimiter(")>operator(,)
  key(callback) operator(=) map<inline_delimiter({)
    key(open_cb) operator(=) string<delimiter(")delimiter(")>operator(,)
    key(menuclose_cb) operator(=) string<delimiter(")delimiter(")>operator(,)
  inline_delimiter(})>
delimiter(})>

keyword(function) ident(ctrl.)function(popup)operator(()ident(handle)operator(,) ident(x)operator(,) ident(y)operator(\))
  ident(Popup)operator(()ident(handle)operator(,) ident(x)operator(,) ident(y)operator(\))
keyword(end)

keyword(function) ident(ctrl.)function(append)operator(()ident(handle)operator(,) ident(elem)operator(\))
  ident(Append)operator(()ident(handle)operator(,) ident(elem)operator(\))
keyword(end)

keyword(function) ident(ctrl.)function(createElement)operator(()ident(class)operator(,) ident(arg)operator(\))
  keyword(local) local_variable(n) operator(=) ident(table)operator(.)ident(getn)operator(()ident(arg)operator(\))
  keyword(for) ident(i)operator(=)integer(1)operator(,)ident(n) keyword(do)
    keyword(if) predefined(type)operator(()ident(arg)operator([)ident(i)operator(])operator(\)) operator(=)operator(=) string<delimiter(")content(table)delimiter(")> keyword(then) 
      ident(itemarg) operator(=) map<delimiter({)delimiter(})>
      keyword(for) ident(u)operator(,)ident(v) keyword(in) predefined(pairs)operator(()ident(arg)operator([)ident(i)operator(])operator(\)) keyword(do)
        keyword(if) predefined(type)operator(()ident(u)operator(\)) operator(~)operator(=) string<delimiter(")content(number)delimiter(")> keyword(then)
          ident(itemarg)operator([)ident(u)operator(]) operator(=) ident(v)
        keyword(end)
      keyword(end)
      keyword(if) predefined(type)operator(()ident(arg)operator([)ident(i)operator(])operator([)integer(1)operator(])operator(\)) operator(=)operator(=) string<delimiter(")content(string)delimiter(")> keyword(and) operator(()predefined(type)operator(()ident(arg)operator([)ident(i)operator(])operator([)integer(2)operator(])operator(\)) operator(=)operator(=) string<delimiter(")content(function)delimiter(")> keyword(or) predefined(type)operator(()ident(arg)operator([)ident(i)operator(])operator([)integer(2)operator(])operator(\)) operator(=)operator(=) string<delimiter(")content(string)delimiter(")>operator(\)) keyword(then)
        ident(itemarg)operator(.)ident(title) operator(=) ident(arg)operator([)ident(i)operator(])operator([)integer(1)operator(])
        ident(itemarg)operator(.)ident(action) operator(=) ident(arg)operator([)ident(i)operator(])operator([)integer(2)operator(])
        ident(arg)operator([)ident(i)operator(]) operator(=) ident(item)operator(()ident(itemarg)operator(\))
      keyword(elseif) predefined(type)operator(()ident(arg)operator([)ident(i)operator(])operator([)integer(1)operator(])operator(\)) operator(=)operator(=) string<delimiter(")content(string)delimiter(")> keyword(and) predefined(type)operator(()ident(arg)operator([)ident(i)operator(])operator([)integer(2)operator(])operator(\)) operator(=)operator(=) string<delimiter(")content(userdata)delimiter(")> keyword(then)
        ident(itemarg)operator([)integer(1)operator(]) operator(=) ident(arg)operator([)ident(i)operator(])operator([)integer(2)operator(])
        ident(itemarg)operator(.)ident(title) operator(=) ident(arg)operator([)ident(i)operator(])operator([)integer(1)operator(])
        ident(arg)operator([)ident(i)operator(]) operator(=) ident(submenu)operator(()ident(itemarg)operator(\))
      keyword(end)
    keyword(end)
  keyword(end)
   keyword(return) ident(Menu)operator(()operator(\))
keyword(end)

keyword(function) ident(ctrl.)function(showxy)operator(()ident(handle)operator(,) ident(x)operator(,) ident(y)operator(\))
  keyword(return) ident(ShowXY)operator(()ident(handle)operator(,) ident(x)operator(,) ident(y)operator(\))
keyword(end)

keyword(function) ident(ctrl.)function(destroy)operator(()ident(handle)operator(\))
  keyword(return) ident(Destroy)operator(()ident(handle)operator(\))
keyword(end)

ident(iupRegisterWidget)operator(()ident(ctrl)operator(\))
ident(iupSetClass)operator(()ident(ctrl)operator(,) string<delimiter(")content(iup widget)delimiter(")>operator(\))
comment(------------------------------------------------------------------------------)
comment(-- MessageDlg class )
comment(------------------------------------------------------------------------------)
keyword(local) local_variable(ctrl) operator(=) map<delimiter({)
  key(nick) operator(=) string<delimiter(")content(messagedlg)delimiter(")>operator(,)
  key(parent) operator(=) ident(WIDGET)operator(,)
  key(creation) operator(=) string<delimiter(")delimiter(")>operator(,)
  key(funcname) operator(=) string<delimiter(")content(MessageDlg)delimiter(")>operator(,)
  key(callback) operator(=) map<inline_delimiter({)inline_delimiter(})>
delimiter(})> 

keyword(function) ident(ctrl.)function(popup)operator(()ident(handle)operator(,) ident(x)operator(,) ident(y)operator(\))
  ident(Popup)operator(()ident(handle)operator(,)ident(x)operator(,)ident(y)operator(\))
keyword(end)

keyword(function) ident(ctrl.)function(destroy)operator(()ident(handle)operator(\))
  keyword(return) ident(Destroy)operator(()ident(handle)operator(\))
keyword(end)

keyword(function) ident(ctrl.)function(createElement)operator(()ident(class)operator(,) ident(arg)operator(\))
   keyword(return) ident(MessageDlg)operator(()operator(\))
keyword(end)
   
ident(iupRegisterWidget)operator(()ident(ctrl)operator(\))
ident(iupSetClass)operator(()ident(ctrl)operator(,) string<delimiter(")content(iup widget)delimiter(")>operator(\))

comment(------------------------------------------------------------------------------)
comment(-- Multiline class )
comment(------------------------------------------------------------------------------)
keyword(local) local_variable(ctrl) operator(=) map<delimiter({)
  key(nick) operator(=) string<delimiter(")content(multiline)delimiter(")>operator(,)
  key(parent) operator(=) ident(WIDGET)operator(,)
  key(creation) operator(=) string<delimiter(")content(-)delimiter(")>operator(,)
  key(callback) operator(=) map<inline_delimiter({)
    key(action) operator(=) string<delimiter(")content(ns)delimiter(")>operator(,) 
  inline_delimiter(})>operator(,)
  key(funcname) operator(=) string<delimiter(")content(MultiLine)delimiter(")>operator(,)
delimiter(})> 

keyword(function) ident(ctrl.)function(createElement)operator(()ident(class)operator(,) ident(arg)operator(\))
   keyword(return) ident(MultiLine)operator(()operator(\))
keyword(end)
   
ident(iupRegisterWidget)operator(()ident(ctrl)operator(\))
ident(iupSetClass)operator(()ident(ctrl)operator(,) string<delimiter(")content(iup widget)delimiter(")>operator(\))
comment(------------------------------------------------------------------------------)
comment(-- OleControl class )
comment(------------------------------------------------------------------------------)
keyword(local) local_variable(ctrl) operator(=) map<delimiter({)
  key(nick) operator(=) string<delimiter(")content(olecontrol)delimiter(")>operator(,)
  key(parent) operator(=) ident(WIDGET)operator(,)
  key(creation) operator(=) string<delimiter(")content(s)delimiter(")>operator(,)
  key(funcname) operator(=) string<delimiter(")content(OleControl)delimiter(")>operator(,)
  key(callback) operator(=) map<inline_delimiter({)inline_delimiter(})>operator(,)
  key(include) operator(=) string<delimiter(")content(iupole.h)delimiter(")>operator(,)
  key(extracode) operator(=) string<delimiter([[)content( 
int iupolelua_open(lua_State* L\)
{
  if (iuplua_opencall_internal(L\)\)
    IupOleControlOpen(\);
    
  iuplua_changeEnv(L\);
  iupolecontrollua_open(L\);
  iuplua_returnEnv(L\);
  return 0;
}

/* obligatory to use require"iupluaole" */
int luaopen_iupluaole(lua_State* L\)
{
  return iupolelua_open(L\);
}

/* obligatory to use require"iupluaole51" */
int luaopen_iupluaole51(lua_State* L\)
{
  return iupolelua_open(L\);
}

)delimiter(]])>
delimiter(})>

keyword(function) ident(ctrl.)function(createElement)operator(()ident(class)operator(,) ident(arg)operator(\))
  keyword(local) local_variable(ctl) operator(=) ident(OleControl)operator(()ident(arg)operator([)integer(1)operator(])operator(\))
   
  comment(-- if luacom is loaded, use it to access methods and properties)
  comment(-- of the control)
  keyword(if) ident(luacom) keyword(then)
    keyword(local) local_variable(punk) operator(=) ident(ctl)operator(.)ident(iunknown)
    keyword(if) ident(punk) keyword(then)
      ident(ctl)operator(.)ident(com) operator(=) ident(luacom)operator(.)ident(MakeLuaCOM)operator(()ident(luacom)operator(.)ident(MakeIUnknown)operator(()ident(punk)operator(\))operator(\))
    keyword(end)     
  keyword(end)
   
  keyword(return) ident(ctl)
keyword(end)

ident(iupRegisterWidget)operator(()ident(ctrl)operator(\))
ident(iupSetClass)operator(()ident(ctrl)operator(,) string<delimiter(")content(iup widget)delimiter(")>operator(\))
comment(------------------------------------------------------------------------------)
comment(-- PPlot class )
comment(------------------------------------------------------------------------------)
keyword(local) local_variable(ctrl) operator(=) map<delimiter({)
  key(nick) operator(=) string<delimiter(")content(pplot)delimiter(")>operator(,)
  key(parent) operator(=) ident(WIDGET)operator(,)
  key(creation) operator(=) string<delimiter(")delimiter(")>operator(,)
  key(funcname) operator(=) string<delimiter(")content(PPlot)delimiter(")>operator(,)
  key(callback) operator(=) map<inline_delimiter({)
    key(select_cb) operator(=) string<delimiter(")content(nnffn)delimiter(")>operator(,)
    key(selectbegin_cb) operator(=) string<delimiter(")delimiter(")>operator(,)
    key(selectend_cb) operator(=) string<delimiter(")delimiter(")>operator(,)
    key(predraw_cb) operator(=) string<delimiter(")content(n)delimiter(")>operator(,)   comment(-- fake definitions to be replaced by pplotfuncs module)
    key(postdraw_cb) operator(=) string<delimiter(")content(n)delimiter(")>operator(,)  comment(-- fake definitions to be replaced by pplotfuncs module)
    key(edit_cb) operator(=) string<delimiter(")content(nnffff)delimiter(")>operator(,)  comment(-- fake definitions to be replaced by pplotfuncs module)
    key(editbegin_cb) operator(=) string<delimiter(")delimiter(")>operator(,)
    key(editend_cb) operator(=) string<delimiter(")delimiter(")>operator(,)
    key(delete_cb) operator(=) string<delimiter(")content(nnff)delimiter(")>operator(,)
    key(deletebegin_cb) operator(=) string<delimiter(")delimiter(")>operator(,)
    key(deleteend_cb) operator(=) string<delimiter(")delimiter(")>operator(,)
  inline_delimiter(})>operator(,)
  key(include) operator(=) string<delimiter(")content(iup_pplot.h)delimiter(")>operator(,)
  key(extrafuncs) operator(=) integer(1)operator(,)
delimiter(})>

keyword(function) ident(ctrl.)function(createElement)operator(()ident(class)operator(,) ident(arg)operator(\))
   keyword(return) ident(PPlot)operator(()ident(arg)operator(.)ident(action)operator(\))
keyword(end)

ident(iupRegisterWidget)operator(()ident(ctrl)operator(\))
ident(iupSetClass)operator(()ident(ctrl)operator(,) string<delimiter(")content(iup widget)delimiter(")>operator(\))
comment(----------------------------------------------------)
comment(-- The main porpouse of this file is to build linux gcc makefiles.)
comment(-- Must have Premake version 3 installed.)
comment(-- Original Premake was changed to remove some parameters and add others.)
comment(-- Default parameters:)
comment(--   premake3s --target gnu --os linux)
comment(-- But it can build windows gcc makefiles, and visual studio projects.)
comment(--   premake3s --target gnu --os windows)
comment(--   premake3s --target gnu --os macosx)
comment(--   premake3s --target vs6)
comment(--   premake3s --target vs2002)
comment(--   premake3s --target vs2003)
comment(--   premake3s --target vs2005)
comment(-- In Linux the generated makefiles will not correctly build libraries in 64-bits.)
comment(--              must add "-m64 -fPIC" flags)
comment(----------------------------------------------------)

keyword(if) operator(()keyword(not) ident(options)operator(.)ident(target)operator(\)) keyword(then) 
  ident(options)operator(.)ident(target) operator(=) string<delimiter(")content(gnu)delimiter(")>
keyword(end)

keyword(if) operator(()keyword(not) ident(options)operator(.)ident(os)operator(\)) keyword(then)
  keyword(if) operator(()ident(options)operator(.)ident(target) operator(~)operator(=) string<delimiter(")content(gnu)delimiter(")>operator(\)) keyword(then)
    ident(options)operator(.)ident(os) operator(=) string<delimiter(")content(windows)delimiter(")>
  keyword(else)
    ident(options)operator(.)ident(os) operator(=) string<delimiter(")content(linux)delimiter(")>
  keyword(end)
keyword(end)

keyword(function) function(fixPackagePath)operator(()ident(package_files)operator(\))
  keyword(if) operator(()ident(options)operator(.)ident(os) operator(~)operator(=) string<delimiter(")content(linux)delimiter(")>operator(\)) keyword(then)
    keyword(for) ident(i)operator(,) ident(file) keyword(in) ident(package_files) keyword(do) 
      ident(package_files)operator([)ident(i)operator(]) operator(=) string<delimiter(")content(../src/)delimiter(")>operator(.)operator(.)ident(file) 
    keyword(end)
  keyword(end)
keyword(end)

keyword(if) operator(()ident(options)operator(.)ident(os) operator(~)operator(=) string<delimiter(")content(linux)delimiter(")>operator(\)) keyword(then)
  keyword(if) operator(()ident(options)operator(.)ident(os) operator(=)operator(=) string<delimiter(")content(macosx)delimiter(")>operator(\)) keyword(then)
	ident(project)operator(.)ident(path) operator(=) string<delimiter(")content(../mak.macosx)delimiter(")>
  keyword(else)
	ident(project)operator(.)ident(path) operator(=) string<delimiter(")content(../mak.)delimiter(")>operator(.)operator(.)ident(options)operator(.)ident(target)
  keyword(end)
keyword(end)

comment(----------------------------------------------------)

ident(project)operator(.)ident(name) operator(=) string<delimiter(")content(iup)delimiter(")>
ident(project)operator(.)ident(bindir) operator(=) string<delimiter(")content(../bin)delimiter(")>
ident(project)operator(.)ident(libdir) operator(=) string<delimiter(")content(../lib)delimiter(")>

comment(----------------------------------------------------)

ident(package) operator(=) ident(newpackage)operator(()operator(\))
ident(package)operator(.)ident(name) operator(=) string<delimiter(")content(iuplua51)delimiter(")>
ident(package)operator(.)ident(target) operator(=) ident(package)operator(.)ident(name)
ident(package)operator(.)ident(objdir) operator(=) string<delimiter(")content(../obj/)delimiter(")>operator(.)operator(.)ident(package)operator(.)ident(name)
ident(package)operator(.)ident(language) operator(=) string<delimiter(")content(c++)delimiter(")>
ident(package)operator(.)ident(kind) operator(=) string<delimiter(")content(lib)delimiter(")>
ident(package)operator(.)ident(buildflags) operator(=) map<delimiter({) string<delimiter(")content(static-runtime)delimiter(")> delimiter(})>

ident(package)operator(.)ident(files) operator(=)
map<delimiter({)
  string<delimiter(")content(iuplua.c)delimiter(")>operator(,) string<delimiter(")content(scanf.c)delimiter(")>operator(,) string<delimiter(")content(iuplua_api.c)delimiter(")>operator(,) string<delimiter(")content(fontdlg.c)delimiter(")>operator(,) 
  string<delimiter(")content(button.c)delimiter(")>operator(,) string<delimiter(")content(canvas.c)delimiter(")>operator(,) string<delimiter(")content(dialog.c)delimiter(")>operator(,) string<delimiter(")content(messagedlg.c)delimiter(")>operator(,) 
  string<delimiter(")content(filedlg.c)delimiter(")>operator(,) string<delimiter(")content(fill.c)delimiter(")>operator(,) string<delimiter(")content(frame.c)delimiter(")>operator(,) string<delimiter(")content(hbox.c)delimiter(")>operator(,)
  string<delimiter(")content(item.c)delimiter(")>operator(,) string<delimiter(")content(image.c)delimiter(")>operator(,) string<delimiter(")content(label.c)delimiter(")>operator(,) string<delimiter(")content(menu.c)delimiter(")>operator(,) string<delimiter(")content(multiline.c)delimiter(")>operator(,)
  string<delimiter(")content(list.c)delimiter(")>operator(,) string<delimiter(")content(separator.c)delimiter(")>operator(,) string<delimiter(")content(radio.c)delimiter(")>operator(,) string<delimiter(")content(colordlg.c)delimiter(")>operator(,) 
  string<delimiter(")content(submenu.c)delimiter(")>operator(,) string<delimiter(")content(text.c)delimiter(")>operator(,) string<delimiter(")content(toggle.c)delimiter(")>operator(,) string<delimiter(")content(vbox.c)delimiter(")>operator(,) string<delimiter(")content(zbox.c)delimiter(")>operator(,) string<delimiter(")content(timer.c)delimiter(")>
delimiter(})>
ident(fixPackagePath)operator(()ident(package)operator(.)ident(files)operator(\))

ident(package)operator(.)ident(includepaths) operator(=) map<delimiter({) string<delimiter(")content(../include)delimiter(")>operator(,) string<delimiter(")content(../src)delimiter(")>operator(,) string<delimiter(")content($(LUA51\)/include)delimiter(")> delimiter(})>
ident(package)operator(.)ident(defines) operator(=) map<delimiter({)string<delimiter(")content(IUPLUA_USELOH)delimiter(")>delimiter(})>

comment(--SRCLUA = iuplua.lua constants.lua $(CTRLUA\))
comment(--GC = $(addsuffix .c, $(basename $(CTRLUA\)\)\))
comment(--$(GC\) : %.c : %.lua %.loh generator.lua)
comment(--	lua5 generator.lua $<)

comment(---------------------------------------------------------------------)

ident(package) operator(=) ident(newpackage)operator(()operator(\))
ident(package)operator(.)ident(name) operator(=) string<delimiter(")content(iupluacontrols51)delimiter(")>
ident(package)operator(.)ident(target) operator(=) ident(package)operator(.)ident(name)
ident(package)operator(.)ident(objdir) operator(=) string<delimiter(")content(../obj/)delimiter(")>operator(.)operator(.)ident(package)operator(.)ident(name)
ident(package)operator(.)ident(language) operator(=) string<delimiter(")content(c++)delimiter(")>
ident(package)operator(.)ident(kind) operator(=) string<delimiter(")content(lib)delimiter(")>
ident(package)operator(.)ident(buildflags) operator(=) map<delimiter({) string<delimiter(")content(static-runtime)delimiter(")> delimiter(})>

ident(package)operator(.)ident(files) operator(=)
map<delimiter({)
  string<delimiter(")content(val.c)delimiter(")>operator(,) string<delimiter(")content(dial.c)delimiter(")>operator(,) string<delimiter(")content(gauge.c)delimiter(")>operator(,) string<delimiter(")content(gc.c)delimiter(")>operator(,) string<delimiter(")content(cbox.c)delimiter(")>operator(,) string<delimiter(")content(cells.c)delimiter(")>operator(,) string<delimiter(")content(getparam.c)delimiter(")>operator(,)
  string<delimiter(")content(colorbrowser.c)delimiter(")>operator(,) string<delimiter(")content(tabs.c)delimiter(")>operator(,) string<delimiter(")content(mask.c)delimiter(")>operator(,) string<delimiter(")content(colorbar.c)delimiter(")>operator(,)
  string<delimiter(")content(matrix.c)delimiter(")>operator(,) string<delimiter(")content(tree.c)delimiter(")>operator(,) string<delimiter(")content(sbox.c)delimiter(")>operator(,) string<delimiter(")content(spin.c)delimiter(")>operator(,) string<delimiter(")content(spinbox.c)delimiter(")>operator(,)
  string<delimiter(")content(controls.c)delimiter(")>operator(,) string<delimiter(")content(mask.c)delimiter(")>operator(,) string<delimiter(")content(treefuncs.c)delimiter(")>operator(,) string<delimiter(")content(matrixfuncs.c)delimiter(")>
delimiter(})>
ident(fixPackagePath)operator(()ident(package)operator(.)ident(files)operator(\))

ident(package)operator(.)ident(includepaths) operator(=) map<delimiter({) string<delimiter(")content(../include)delimiter(")>operator(,) string<delimiter(")content($(CD\)/include)delimiter(")>operator(,) string<delimiter(")content($(LUA51\)/include)delimiter(")> delimiter(})>
ident(package)operator(.)ident(defines) operator(=) map<delimiter({)string<delimiter(")content(IUPLUA_USELOH)delimiter(")>delimiter(})>

comment(--SRCLUA = val.lua dial.lua gauge.lua colorbrowser.lua tabs.lua sbox.lua matrix.lua tree.lua spin.lua spinbox.lua)

comment(---------------------------------------------------------------------)

ident(package) operator(=) ident(newpackage)operator(()operator(\))
ident(package)operator(.)ident(name) operator(=) string<delimiter(")content(iuplua_pplot51)delimiter(")>
ident(package)operator(.)ident(target) operator(=) ident(package)operator(.)ident(name)
ident(package)operator(.)ident(objdir) operator(=) string<delimiter(")content(../obj/)delimiter(")>operator(.)operator(.)ident(package)operator(.)ident(name)
ident(package)operator(.)ident(language) operator(=) string<delimiter(")content(c++)delimiter(")>
ident(package)operator(.)ident(kind) operator(=) string<delimiter(")content(lib)delimiter(")>
ident(package)operator(.)ident(buildflags) operator(=) map<delimiter({) string<delimiter(")content(static-runtime)delimiter(")> delimiter(})>

ident(package)operator(.)ident(files) operator(=)
map<delimiter({)
  string<delimiter(")content(pplot.c)delimiter(")>operator(,) string<delimiter(")content(pplotfuncs.c)delimiter(")>
delimiter(})>
ident(fixPackagePath)operator(()ident(package)operator(.)ident(files)operator(\))

ident(package)operator(.)ident(includepaths) operator(=) map<delimiter({) string<delimiter(")content(../include)delimiter(")>operator(,) string<delimiter(")content($(CD\)/include)delimiter(")>operator(,) string<delimiter(")content($(LUA51\)/include)delimiter(")> delimiter(})>
ident(package)operator(.)ident(defines) operator(=) map<delimiter({)string<delimiter(")content(IUPLUA_USELOH)delimiter(")>delimiter(})>

comment(--SRCLUA = pplot.lua)

comment(---------------------------------------------------------------------)

ident(package) operator(=) ident(newpackage)operator(()operator(\))
ident(package)operator(.)ident(name) operator(=) string<delimiter(")content(iupluagl51)delimiter(")>
ident(package)operator(.)ident(target) operator(=) ident(package)operator(.)ident(name)
ident(package)operator(.)ident(objdir) operator(=) string<delimiter(")content(../obj/)delimiter(")>operator(.)operator(.)ident(package)operator(.)ident(name)
ident(package)operator(.)ident(language) operator(=) string<delimiter(")content(c++)delimiter(")>
ident(package)operator(.)ident(kind) operator(=) string<delimiter(")content(lib)delimiter(")>
ident(package)operator(.)ident(buildflags) operator(=) map<delimiter({) string<delimiter(")content(static-runtime)delimiter(")> delimiter(})>

ident(package)operator(.)ident(files) operator(=)
map<delimiter({)
  string<delimiter(")content(glcanvas.c)delimiter(")>operator(,) string<delimiter(")content(glcanvasfuncs.c)delimiter(")>
delimiter(})>
ident(fixPackagePath)operator(()ident(package)operator(.)ident(files)operator(\))

comment(-- SRCLUA = glcanvas.lua)

ident(package)operator(.)ident(includepaths) operator(=) map<delimiter({) string<delimiter(")content(../include)delimiter(")>operator(,) string<delimiter(")content($(LUA51\)/include)delimiter(")> delimiter(})>
ident(package)operator(.)ident(defines) operator(=) map<delimiter({)string<delimiter(")content(IUPLUA_USELOH)delimiter(")>delimiter(})>
           
comment(---------------------------------------------------------------------)

ident(package) operator(=) ident(newpackage)operator(()operator(\))
ident(package)operator(.)ident(name) operator(=) string<delimiter(")content(iupluaim51)delimiter(")>
ident(package)operator(.)ident(target) operator(=) ident(package)operator(.)ident(name)
ident(package)operator(.)ident(objdir) operator(=) string<delimiter(")content(../obj/)delimiter(")>operator(.)operator(.)ident(package)operator(.)ident(name)
ident(package)operator(.)ident(language) operator(=) string<delimiter(")content(c++)delimiter(")>
ident(package)operator(.)ident(kind) operator(=) string<delimiter(")content(lib)delimiter(")>
ident(package)operator(.)ident(buildflags) operator(=) map<delimiter({) string<delimiter(")content(static-runtime)delimiter(")> delimiter(})>

ident(package)operator(.)ident(files) operator(=)
map<delimiter({)
  string<delimiter(")content(iupluaim.c)delimiter(")>
delimiter(})>
ident(fixPackagePath)operator(()ident(package)operator(.)ident(files)operator(\))

ident(package)operator(.)ident(includepaths) operator(=) map<delimiter({) string<delimiter(")content(../include)delimiter(")>operator(,) string<delimiter(")content($(LUA51\)/include)delimiter(")> delimiter(})>

comment(---------------------------------------------------------------------)

ident(package) operator(=) ident(newpackage)operator(()operator(\))
ident(package)operator(.)ident(name) operator(=) string<delimiter(")content(iuplua51exe)delimiter(")>
ident(package)operator(.)ident(target) operator(=) string<delimiter(")content(iuplua51)delimiter(")>
ident(package)operator(.)ident(objdir) operator(=) string<delimiter(")content(../obj/)delimiter(")>operator(.)operator(.)ident(package)operator(.)ident(name)
ident(package)operator(.)ident(language) operator(=) string<delimiter(")content(c++)delimiter(")>
ident(package)operator(.)ident(kind) operator(=) string<delimiter(")content(exe)delimiter(")>
ident(package)operator(.)ident(linkflags) operator(=) map<delimiter({) string<delimiter(")content(static-runtime)delimiter(")> delimiter(})>

ident(package)operator(.)ident(files) operator(=)
map<delimiter({)
  string<delimiter(")content(iupluaexe51.c)delimiter(")>
delimiter(})>
ident(fixPackagePath)operator(()ident(package)operator(.)ident(files)operator(\))

comment(-- SRCLUA = console.lua)

ident(package)operator(.)ident(includepaths) operator(=) map<delimiter({) string<delimiter(")content(../include)delimiter(")>operator(,) string<delimiter(")content($(LUA51\)/include)delimiter(")>operator(,) string<delimiter(")content($(CD\)/include)delimiter(")>operator(,) string<delimiter(")content($(IM\)/include)delimiter(")> delimiter(})>

ident(package)operator(.)ident(links) operator(=) map<delimiter({) string<delimiter(")content(imlua_process51)delimiter(")>operator(,) string<delimiter(")content(im_process)delimiter(")>operator(,) string<delimiter(")content(imlua_cd51)delimiter(")>operator(,) string<delimiter(")content(imlua51)delimiter(")>operator(,) 
                  string<delimiter(")content(cdluaiup51)delimiter(")>operator(,) string<delimiter(")content(cdlua51)delimiter(")>operator(,) 
                  string<delimiter(")content(iupluagl51)delimiter(")>operator(,) string<delimiter(")content(iupluaim51)delimiter(")>operator(,) string<delimiter(")content(iuplua_pplot51.lib)delimiter(")>operator(,) string<delimiter(")content(iupluacontrols51)delimiter(")>operator(,) string<delimiter(")content(iuplua51)delimiter(")>operator(,) 
                  string<delimiter(")content(lua5.1)delimiter(")>operator(,) 
                  string<delimiter(")content(iupgl)delimiter(")>operator(,) string<delimiter(")content(iupim)delimiter(")>operator(,) string<delimiter(")content(iup_pplot.lib)delimiter(")>operator(,) string<delimiter(")content(iupcontrols)delimiter(")>operator(,) 
                  string<delimiter(")content(cdiup)delimiter(")>operator(,) string<delimiter(")content(cd)delimiter(")>operator(,) string<delimiter(")content(iup)delimiter(")>operator(,) string<delimiter(")content(im)delimiter(")> delimiter(})>
ident(package)operator(.)ident(libpaths) operator(=) map<delimiter({) string<delimiter(")content(../lib)delimiter(")>operator(,) string<delimiter(")content($(IM\)/lib)delimiter(")>operator(,) string<delimiter(")content($(CD\)/lib)delimiter(")>operator(,) string<delimiter(")content($(LUA51\)/lib)delimiter(")>operator(,) delimiter(})>
                  
keyword(if) operator(()ident(options)operator(.)ident(os) operator(=)operator(=) string<delimiter(")content(windows)delimiter(")>operator(\)) keyword(then)
  ident(tinsert)operator(()ident(package)operator(.)ident(links)operator(,) map<delimiter({) string<delimiter(")content(cdgdiplus)delimiter(")>operator(,) string<delimiter(")content(gdiplus)delimiter(")>operator(,) string<delimiter(")content(comctl32)delimiter(")>operator(,) string<delimiter(")content(opengl32)delimiter(")>operator(,) string<delimiter(")content(glu32)delimiter(")>operator(,) string<delimiter(")content(glaux)delimiter(")> delimiter(})>operator(\))
keyword(else)
  ident(tinsert)operator(()ident(package)operator(.)ident(links)operator(,) map<delimiter({) string<delimiter(")content(GLU)delimiter(")>operator(,) string<delimiter(")content(GL)delimiter(")>operator(,) string<delimiter(")content(Xm)delimiter(")>operator(,) string<delimiter(")content(Xpm)delimiter(")>operator(,) string<delimiter(")content(Xmu)delimiter(")>operator(,) string<delimiter(")content(Xt)delimiter(")>operator(,) string<delimiter(")content(Xext)delimiter(")>operator(,) string<delimiter(")content(X11)delimiter(")>operator(,) string<delimiter(")content(m)delimiter(")> delimiter(})>operator(\))
  ident(tinsert)operator(()ident(package)operator(.)ident(libpaths)operator(,) map<delimiter({) string<delimiter(")content(/usr/X11R6/lib)delimiter(")> delimiter(})>operator(\))
keyword(end)

comment(---------------------------------------------------------------------)
comment(------------------------------------------------------------------------------)
comment(-- Radio class )
comment(------------------------------------------------------------------------------)
keyword(local) local_variable(ctrl) operator(=) map<delimiter({)
  key(nick) operator(=) string<delimiter(")content(radio)delimiter(")>operator(,)
  key(parent) operator(=) ident(WIDGET)operator(,)
  key(creation) operator(=) string<delimiter(")content(i)delimiter(")>operator(,)
  key(callback) operator(=) map<inline_delimiter({)inline_delimiter(})>
delimiter(})> 

keyword(function) ident(ctrl.)function(CreateChildrenNames)operator(()ident(obj)operator(\))
  keyword(if) ident(obj) keyword(then)
    keyword(if) ident(obj)operator(.)ident(parent)operator(.)ident(parent) operator(=)operator(=) ident(BOX) keyword(then)
      keyword(local) local_variable(i) operator(=) integer(1)
      keyword(while) ident(obj)operator([)ident(i)operator(]) keyword(do)
        ident(ctrl)operator(.)ident(CreateChildrenNames) operator(()ident(obj)operator([)ident(i)operator(])operator(\))
        ident(i) operator(=) ident(i)operator(+)integer(1)
      keyword(end)
    keyword(elseif) ident(obj)operator(.)ident(parent) operator(=)operator(=) ident(IUPFRAME) keyword(then)
      ident(ctrl)operator(.)ident(CreateChildrenNames) operator(()ident(obj)operator([)integer(1)operator(])operator(\))
    keyword(else)
      ident(ihandle_setname)operator(()ident(obj)operator(\))
    keyword(end)
  keyword(end)
keyword(end)

keyword(function) ident(ctrl.)function(createElement)operator(()ident(class)operator(,) ident(arg)operator(\))
   ident(ctrl)operator(.)ident(CreateChildrenNames)operator(()ident(arg)operator([)integer(1)operator(])operator(\))
   keyword(return) ident(Radio)operator(()ident(arg)operator([)integer(1)operator(])operator(\))
keyword(end)
   
ident(iupRegisterWidget)operator(()ident(ctrl)operator(\))
ident(iupSetClass)operator(()ident(ctrl)operator(,) string<delimiter(")content(iup widget)delimiter(")>operator(\))
comment(------------------------------------------------------------------------------)
comment(-- Sbox class )
comment(------------------------------------------------------------------------------)
keyword(local) local_variable(ctrl) operator(=) map<delimiter({)
	key(nick) operator(=) string<delimiter(")content(sbox)delimiter(")>operator(,)
  key(parent) operator(=) ident(WIDGET)operator(,)
	key(creation) operator(=) string<delimiter(")content(i)delimiter(")>operator(,)
  key(callback) operator(=) map<inline_delimiter({)inline_delimiter(})>operator(,)
  key(include)operator(=)string<delimiter(")content(iupsbox.h)delimiter(")>
delimiter(})>

keyword(function) ident(ctrl.)function(createElement)operator(()ident(class)operator(,) ident(arg)operator(\))
   keyword(return) ident(Sbox)operator(()ident(arg)operator([)integer(1)operator(])operator(\))
keyword(end)

ident(iupRegisterWidget)operator(()ident(ctrl)operator(\))
ident(iupSetClass)operator(()ident(ctrl)operator(,) string<delimiter(")content(iup widget)delimiter(")>operator(\))
comment(------------------------------------------------------------------------------)
comment(-- Separator class )
comment(------------------------------------------------------------------------------)
keyword(local) local_variable(ctrl) operator(=) map<delimiter({)
  key(nick) operator(=) string<delimiter(")content(separator)delimiter(")>operator(,)
  key(parent) operator(=) ident(WIDGET)operator(,)
  key(creation) operator(=) string<delimiter(")delimiter(")>operator(,)
  key(callback) operator(=) map<inline_delimiter({)inline_delimiter(})>
delimiter(})>

keyword(function) ident(ctrl.)function(createElement)operator(()ident(class)operator(,) ident(arg)operator(\))
   keyword(return) ident(Separator)operator(()operator(\))
keyword(end)

ident(iupRegisterWidget)operator(()ident(ctrl)operator(\))
ident(iupSetClass)operator(()ident(ctrl)operator(,) string<delimiter(")content(iup widget)delimiter(")>operator(\))
comment(------------------------------------------------------------------------------)
comment(-- Spin class )
comment(------------------------------------------------------------------------------)
keyword(local) local_variable(ctrl) operator(=) map<delimiter({)
  key(nick) operator(=) string<delimiter(")content(spin)delimiter(")>operator(,)
  key(parent) operator(=) ident(WIDGET)operator(,)
  key(creation) operator(=) string<delimiter(")delimiter(")>operator(,)
  key(callback) operator(=) map<inline_delimiter({)
    key(spin_cb) operator(=) string<delimiter(")content(n)delimiter(")>operator(,)
  inline_delimiter(})>operator(,)
  key(include) operator(=) string<delimiter(")content(iupspin.h)delimiter(")>operator(,)
delimiter(})>

keyword(function) ident(ctrl.)function(createElement)operator(()ident(class)operator(,) ident(arg)operator(\))
   keyword(return) ident(Spin)operator(()ident(arg)operator(.)ident(action)operator(\))
keyword(end)

ident(iupRegisterWidget)operator(()ident(ctrl)operator(\))
ident(iupSetClass)operator(()ident(ctrl)operator(,) string<delimiter(")content(iup widget)delimiter(")>operator(\))
comment(------------------------------------------------------------------------------)
comment(-- SpinBox class )
comment(------------------------------------------------------------------------------)
keyword(local) local_variable(ctrl) operator(=) map<delimiter({)
  key(nick) operator(=) string<delimiter(")content(spinbox)delimiter(")>operator(,)
  key(parent) operator(=) ident(WIDGET)operator(,)
  key(creation) operator(=) string<delimiter(")content(i)delimiter(")>operator(,)
  key(callback) operator(=) map<inline_delimiter({)
    key(spin_cb) operator(=) string<delimiter(")content(n)delimiter(")>operator(,)
  inline_delimiter(})>operator(,)
  key(include) operator(=) string<delimiter(")content(iupspin.h)delimiter(")>operator(,)
delimiter(})>

keyword(function) ident(ctrl.)function(createElement)operator(()ident(class)operator(,) ident(arg)operator(\))
   keyword(return) ident(Spinbox)operator(()ident(arg)operator([)integer(1)operator(])operator(\))
keyword(end)

ident(iupRegisterWidget)operator(()ident(ctrl)operator(\))
ident(iupSetClass)operator(()ident(ctrl)operator(,) string<delimiter(")content(iup widget)delimiter(")>operator(\))
comment(------------------------------------------------------------------------------)
comment(-- Submenu class )
comment(------------------------------------------------------------------------------)
keyword(local) local_variable(ctrl) operator(=) map<delimiter({)
  key(nick) operator(=) string<delimiter(")content(submenu)delimiter(")>operator(,)
  key(parent) operator(=) ident(WIDGET)operator(,)
  key(creation) operator(=) string<delimiter(")content(Si)delimiter(")>operator(,)
  key(callback) operator(=) map<inline_delimiter({)
comment(--    open_cb = "",       -- already registered by the menu)
comment(--    menuclose_cb = "",  -- already registered by the menu)
  inline_delimiter(})>
delimiter(})> 

keyword(function) ident(ctrl.)function(createElement)operator(()ident(class)operator(,) ident(arg)operator(\))
  keyword(return) ident(Submenu)operator(()ident(arg)operator(.)ident(title)operator(,) ident(arg)operator([)integer(1)operator(])operator(\))
keyword(end)
   
ident(iupRegisterWidget)operator(()ident(ctrl)operator(\))
ident(iupSetClass)operator(()ident(ctrl)operator(,) string<delimiter(")content(iup widget)delimiter(")>operator(\))
comment(------------------------------------------------------------------------------)
comment(-- Tabs class )
comment(------------------------------------------------------------------------------)
keyword(local) local_variable(ctrl) operator(=) map<delimiter({)
  key(nick) operator(=) string<delimiter(")content(tabs)delimiter(")>operator(,)
  key(parent) operator(=) ident(WIDGET)operator(,)
  key(creation) operator(=) string<delimiter(")content(v)delimiter(")>operator(,)
  key(callback) operator(=) map<inline_delimiter({)
    key(tabchange_cb) operator(=) string<delimiter(")content(ii)delimiter(")>operator(,)
  inline_delimiter(})>operator(,)
  key(include) operator(=) string<delimiter(")content(iuptabs.h)delimiter(")>operator(,)
  key(funcname) operator(=) string<delimiter(")content(Tabsv)delimiter(")>operator(,)
  key(createfunc) operator(=) string<delimiter([[)content(
static int Tabsv(lua_State *L\)
{
  Ihandle **hlist = iuplua_checkihandle_array(L, 1\);
  Ihandle *h = IupTabsv(hlist\);
  iuplua_plugstate(L, h\);
  iuplua_pushihandle_raw(L, h\);
  free(hlist\);
  return 1;
}

)delimiter(]])>operator(,)
delimiter(})>

keyword(function) ident(ctrl.)function(createElement)operator(()ident(class)operator(,) ident(arg)operator(\))
  keyword(return) ident(Tabsv)operator(()ident(arg)operator(\))
keyword(end)

ident(iupRegisterWidget)operator(()ident(ctrl)operator(\))
ident(iupSetClass)operator(()ident(ctrl)operator(,) string<delimiter(")content(iup widget)delimiter(")>operator(\))
comment(------------------------------------------------------------------------------)
comment(-- Text class )
comment(------------------------------------------------------------------------------)
keyword(local) local_variable(ctrl) operator(=) map<delimiter({)
  key(nick) operator(=) string<delimiter(")content(text)delimiter(")>operator(,)
  key(parent) operator(=) ident(WIDGET)operator(,)
  key(creation) operator(=) string<delimiter(")content(-)delimiter(")>operator(,) 
  key(callback) operator(=) map<inline_delimiter({)
    key(action) operator(=) string<delimiter(")content(ns)delimiter(")>operator(,)
    key(caret_cb) operator(=) string<delimiter(")content(nn)delimiter(")>operator(,) 
  inline_delimiter(})>
delimiter(})>

keyword(function) ident(ctrl.)function(createElement)operator(()ident(class)operator(,) ident(arg)operator(\))
   keyword(return) ident(Text)operator(()operator(\))
keyword(end)

ident(iupRegisterWidget)operator(()ident(ctrl)operator(\))
ident(iupSetClass)operator(()ident(ctrl)operator(,) string<delimiter(")content(iup widget)delimiter(")>operator(\))
comment(------------------------------------------------------------------------------)
comment(-- Timer class )
comment(------------------------------------------------------------------------------)
keyword(local) local_variable(ctrl) operator(=) map<delimiter({)
  key(nick)     operator(=) string<delimiter(")content(timer)delimiter(")>operator(,)
  key(parent)   operator(=) ident(WIDGET)operator(,)
  key(creation) operator(=) string<delimiter(")delimiter(")>operator(,)
  key(callback) operator(=) map<inline_delimiter({)
    key(action_cb) operator(=) string<delimiter(")delimiter(")>operator(,) 
  inline_delimiter(})>operator(,)
delimiter(})> 

keyword(function) ident(ctrl.)function(createElement)operator(()ident(class)operator(,) ident(arg)operator(\))
  keyword(return) ident(Timer)operator(()operator(\))
keyword(end)
   
ident(iupRegisterWidget)operator(()ident(ctrl)operator(\))
ident(iupSetClass)operator(()ident(ctrl)operator(,) string<delimiter(")content(iup widget)delimiter(")>operator(\))
comment(------------------------------------------------------------------------------)
comment(-- Toggle class )
comment(------------------------------------------------------------------------------)
keyword(local) local_variable(ctrl) operator(=) map<delimiter({)
  key(nick) operator(=) string<delimiter(")content(toggle)delimiter(")>operator(,)
  key(parent) operator(=) ident(WIDGET)operator(,)
  key(creation) operator(=) string<delimiter(")content(S-)delimiter(")>operator(,)
  key(callback) operator(=) map<inline_delimiter({)
    key(action) operator(=) string<delimiter(")content(n)delimiter(")>operator(,)
  inline_delimiter(})>
delimiter(})> 

keyword(function) ident(ctrl.)function(createElement)operator(()ident(class)operator(,) ident(arg)operator(\))
  keyword(return) ident(Toggle)operator(()ident(arg)operator(.)ident(title)operator(\))
keyword(end)
   
ident(iupRegisterWidget)operator(()ident(ctrl)operator(\))
ident(iupSetClass)operator(()ident(ctrl)operator(,) string<delimiter(")content(iup widget)delimiter(")>operator(\))
comment(------------------------------------------------------------------------------)
comment(-- Tree class )
comment(------------------------------------------------------------------------------)
keyword(local) local_variable(ctrl) operator(=) map<delimiter({)
  key(nick) operator(=) string<delimiter(")content(tree)delimiter(")>operator(,)
  key(parent) operator(=) ident(WIDGET)operator(,)
  key(creation) operator(=) string<delimiter(")delimiter(")>operator(,)
  key(callback) operator(=) map<inline_delimiter({)
    key(selection_cb) operator(=) string<delimiter(")content(nn)delimiter(")>operator(,)
    key(multiselection_cb) operator(=) string<delimiter(")content(nn)delimiter(")>operator(,)  comment(-- fake definition to be replaced by treefuncs module)
    key(branchopen_cb) operator(=) string<delimiter(")content(n)delimiter(")>operator(,)
    key(branchclose_cb) operator(=) string<delimiter(")content(n)delimiter(")>operator(,)
    key(executeleaf_cb) operator(=) string<delimiter(")content(n)delimiter(")>operator(,)
    key(renamenode_cb) operator(=) string<delimiter(")content(ns)delimiter(")>operator(,)
    key(rename_cb) operator(=) string<delimiter(")content(ns)delimiter(")>operator(,)
    key(showrename_cb) operator(=) string<delimiter(")content(n)delimiter(")>operator(,)
    key(rightclick_cb) operator(=) string<delimiter(")content(n)delimiter(")>operator(,)
    key(dragdrop_cb) operator(=) string<delimiter(")content(nnnn)delimiter(")>operator(,)
  inline_delimiter(})>operator(,)
  key(include) operator(=) string<delimiter(")content(iuptree.h)delimiter(")>operator(,)
  key(extrafuncs) operator(=) integer(1)operator(,)
delimiter(})>

keyword(function) function(TreeSetValueRec)operator(()ident(handle)operator(,) ident(t)operator(,) ident(id)operator(\))
  keyword(if) ident(t) operator(=)operator(=) predefined_constant(nil) keyword(then) keyword(return) keyword(end)
  keyword(local) local_variable(cont) operator(=) ident(table)operator(.)ident(getn)operator(()ident(t)operator(\))
  keyword(while) ident(cont) operator(>)operator(=) integer(0) keyword(do)
    keyword(if) predefined(type) operator(()ident(t)operator([)ident(cont)operator(])operator(\)) operator(=)operator(=) string<delimiter(")content(table)delimiter(")> keyword(then)
      keyword(if) ident(t)operator([)ident(cont)operator(])operator(.)ident(branchname) operator(~)operator(=) predefined_constant(nil) keyword(then)
        ident(SetAttribute)operator(()ident(handle)operator(,) string<delimiter(")content(ADDBRANCH)delimiter(")>operator(.)operator(.)ident(id)operator(,) ident(t)operator([)ident(cont)operator(])operator(.)ident(branchname)operator(\))
        ident(TreeSetValueRec)operator(()ident(handle)operator(,) ident(t)operator([)ident(cont)operator(])operator(,) ident(id)operator(+)integer(1)operator(\))
      keyword(end)
    keyword(else)
      keyword(if) ident(t)operator([)ident(cont)operator(]) keyword(then)
        ident(SetAttribute)operator(()ident(handle)operator(,) string<delimiter(")content(ADDLEAF)delimiter(")>operator(.)operator(.)ident(id)operator(,) ident(t)operator([)ident(cont)operator(])operator(\))
      keyword(end)
    keyword(end)
    ident(cont) operator(=) ident(cont) operator(-) integer(1)
   keyword(end)
keyword(end)

keyword(function) function(TreeSetValue)operator(()ident(handle)operator(,) ident(t)operator(\))
  keyword(if) ident(t)operator(.)ident(branchname) operator(~)operator(=) predefined_constant(nil) keyword(then)
    ident(SetAttribute)operator(()ident(handle)operator(,) string<delimiter(")content(NAME)delimiter(")>operator(,) ident(t)operator(.)ident(branchname)operator(\))
  keyword(end)
  ident(TreeSetValueRec)operator(()ident(handle)operator(,) ident(t)operator(,) integer(0)operator(\))
keyword(end)

keyword(function) ident(ctrl.)function(createElement)operator(()ident(class)operator(,) ident(arg)operator(\))
  keyword(return) ident(Tree)operator(()operator(\))
keyword(end)

ident(iupRegisterWidget)operator(()ident(ctrl)operator(\))
ident(iupSetClass)operator(()ident(ctrl)operator(,) string<delimiter(")content(iup widget)delimiter(")>operator(\))
comment(------------------------------------------------------------------------------)
comment(-- Val class )
comment(------------------------------------------------------------------------------)
keyword(local) local_variable(ctrl) operator(=) map<delimiter({)
  key(nick) operator(=) string<delimiter(")content(val)delimiter(")>operator(,)
  key(parent) operator(=) ident(WIDGET)operator(,)
  key(creation) operator(=) string<delimiter(")content(s)delimiter(")>operator(,)
  key(callback) operator(=) map<inline_delimiter({)
    key(mousemove_cb) operator(=) string<delimiter(")content(d)delimiter(")>operator(,)
    key(button_press_cb) operator(=) string<delimiter(")content(d)delimiter(")>operator(,)
    key(button_release_cb) operator(=) string<delimiter(")content(d)delimiter(")>operator(,)
  inline_delimiter(})>operator(,)
  key(include) operator(=) string<delimiter(")content(iupval.h)delimiter(")>operator(,)
delimiter(})>

keyword(function) ident(ctrl.)function(createElement)operator(()ident(class)operator(,) ident(arg)operator(\))
   keyword(return) ident(Val)operator(()ident(arg)operator([)integer(1)operator(])operator(\))
keyword(end)

ident(iupRegisterWidget)operator(()ident(ctrl)operator(\))
ident(iupSetClass)operator(()ident(ctrl)operator(,) string<delimiter(")content(iup widget)delimiter(")>operator(\))
comment(------------------------------------------------------------------------------)
comment(-- VBox class )
comment(------------------------------------------------------------------------------)
keyword(local) local_variable(ctrl) operator(=) map<delimiter({)
  key(nick) operator(=) string<delimiter(")content(vbox)delimiter(")>operator(,)
  key(parent) operator(=) ident(BOX)operator(,)
  key(creation) operator(=) string<delimiter(")content(-)delimiter(")>operator(,)
  key(callback) operator(=) map<inline_delimiter({)inline_delimiter(})>
delimiter(})>

keyword(function) ident(ctrl.)function(append) operator(()ident(handle)operator(,) ident(elem)operator(\))
  ident(Append)operator(()ident(handle)operator(,) ident(elem)operator(\))
keyword(end)

keyword(function) ident(ctrl.)function(createElement)operator(()ident(class)operator(,) ident(arg)operator(\))
   keyword(return) ident(Vbox)operator(()operator(\))
keyword(end)

ident(iupRegisterWidget)operator(()ident(ctrl)operator(\))
ident(iupSetClass)operator(()ident(ctrl)operator(,) string<delimiter(")content(iup widget)delimiter(")>operator(\))
comment(------------------------------------------------------------------------------)
comment(-- ZBox class )
comment(------------------------------------------------------------------------------)
keyword(local) local_variable(ctrl) operator(=) map<delimiter({)
  key(nick) operator(=) string<delimiter(")content(zbox)delimiter(")>operator(,)
  key(parent) operator(=) ident(BOX)operator(,)
  key(creation) operator(=) string<delimiter(")content(-)delimiter(")>operator(,)
  key(callback) operator(=) map<inline_delimiter({)inline_delimiter(})>
delimiter(})>

keyword(function) ident(ctrl.)function(append) operator(()ident(handle)operator(,) ident(elem)operator(\))
  ident(ihandle_setname)operator(()ident(elem)operator(\))
  ident(Append)operator(()ident(handle)operator(,) ident(elem)operator(\))
keyword(end)

keyword(function) ident(ctrl.)function(SetChildrenNames)operator(()ident(obj)operator(\))
  keyword(if) ident(obj) keyword(then)
    keyword(local) local_variable(i) operator(=) integer(1)
    keyword(while) ident(obj)operator([)ident(i)operator(]) keyword(do)
      ident(ihandle_setname)operator(()ident(obj)operator([)ident(i)operator(])operator(\))
      ident(i) operator(=) ident(i)operator(+)integer(1)
    keyword(end)
  keyword(end)
keyword(end)

keyword(function) ident(ctrl.)function(createElement)operator(()ident(class)operator(,) ident(arg)operator(\))
   ident(ctrl)operator(.)ident(SetChildrenNames)operator(()ident(arg)operator(\))
   keyword(return) ident(Zbox)operator(()operator(\))
keyword(end)

ident(iupRegisterWidget)operator(()ident(ctrl)operator(\))
ident(iupSetClass)operator(()ident(ctrl)operator(,) string<delimiter(")content(iup widget)delimiter(")>operator(\))
comment(----------------------------------------------------)
comment(-- The main porpouse of this file is to build linux gcc makefiles.)
comment(-- Must have Premake version 3 installed.)
comment(-- Original Premake was changed to remove some parameters and add others.)
comment(-- Default parameters:)
comment(--   premake3s --target gnu --os linux)
comment(-- But it can build windows gcc makefiles, and visual studio projects.)
comment(--   premake3s --target gnu --os windows)
comment(--   premake3s --target gnu --os macosx)
comment(--   premake3s --target vs6)
comment(--   premake3s --target vs2002)
comment(--   premake3s --target vs2003)
comment(--   premake3s --target vs2005)
comment(-- In Linux the generated makefiles will not correctly build libraries in 64-bits.)
comment(--              must add "-m64 -fPIC" flags)
comment(----------------------------------------------------)

keyword(if) operator(()keyword(not) ident(options)operator(.)ident(target)operator(\)) keyword(then) 
  ident(options)operator(.)ident(target) operator(=) string<delimiter(")content(gnu)delimiter(")>
keyword(end)

keyword(if) operator(()keyword(not) ident(options)operator(.)ident(os)operator(\)) keyword(then)
  keyword(if) operator(()ident(options)operator(.)ident(target) operator(~)operator(=) string<delimiter(")content(gnu)delimiter(")>operator(\)) keyword(then)
    ident(options)operator(.)ident(os) operator(=) string<delimiter(")content(windows)delimiter(")>
  keyword(else)
    ident(options)operator(.)ident(os) operator(=) string<delimiter(")content(linux)delimiter(")>
  keyword(end)
keyword(end)

keyword(function) function(fixPackagePath)operator(()ident(package_files)operator(\))
  keyword(if) operator(()ident(options)operator(.)ident(os) operator(~)operator(=) string<delimiter(")content(linux)delimiter(")>operator(\)) keyword(then)
    keyword(for) ident(i)operator(,) ident(file) keyword(in) ident(package_files) keyword(do) 
      ident(package_files)operator([)ident(i)operator(]) operator(=) string<delimiter(")content(../src/)delimiter(")>operator(.)operator(.)ident(file) 
    keyword(end)
  keyword(end)
keyword(end)

comment(----------------------------------------------------)

ident(project)operator(.)ident(name) operator(=) string<delimiter(")content(iup)delimiter(")>
ident(project)operator(.)ident(bindir) operator(=) string<delimiter(")content(../bin)delimiter(")>
ident(project)operator(.)ident(libdir) operator(=) string<delimiter(")content(../lib)delimiter(")>

keyword(if) operator(()ident(options)operator(.)ident(os) operator(~)operator(=) string<delimiter(")content(linux)delimiter(")>operator(\)) keyword(then)
  keyword(if) operator(()ident(options)operator(.)ident(os) operator(=)operator(=) string<delimiter(")content(macosx)delimiter(")>operator(\)) keyword(then)
	ident(project)operator(.)ident(path) operator(=) string<delimiter(")content(../mak.macosx)delimiter(")>
  keyword(else)
	ident(project)operator(.)ident(path) operator(=) string<delimiter(")content(../mak.)delimiter(")>operator(.)operator(.)ident(options)operator(.)ident(target)
  keyword(end)
keyword(end)

comment(----------------------------------------------------)

ident(package) operator(=) ident(newpackage)operator(()operator(\))
ident(package)operator(.)ident(name) operator(=) string<delimiter(")content(iup_pplot)delimiter(")>
ident(package)operator(.)ident(target) operator(=) ident(package)operator(.)ident(name)
ident(package)operator(.)ident(objdir) operator(=) string<delimiter(")content(../obj/)delimiter(")>operator(.)operator(.)ident(package)operator(.)ident(name)
ident(package)operator(.)ident(language) operator(=) string<delimiter(")content(c++)delimiter(")>
ident(package)operator(.)ident(kind) operator(=) string<delimiter(")content(lib)delimiter(")>
ident(package)operator(.)ident(buildflags) operator(=) map<delimiter({) string<delimiter(")content(static-runtime)delimiter(")> delimiter(})>

ident(package)operator(.)ident(includepaths) operator(=) map<delimiter({) string<delimiter(")content(.)delimiter(")>operator(,) string<delimiter(")content(../include)delimiter(")> delimiter(})>

ident(package)operator(.)ident(files) operator(=) map<delimiter({) string<delimiter(")content(iup_pplot.cpp)delimiter(")>operator(,) string<delimiter(")content(PPlot.cpp)delimiter(")>operator(,) string<delimiter(")content(PPlotInteraction.cpp)delimiter(")> delimiter(})>
ident(fixPackagePath)operator(()ident(package)operator(.)ident(files)operator(\))

comment(----------------------------------------------------)
comment(----------------------------------------------------)
comment(-- The main porpouse of this file is to build linux gcc makefiles.)
comment(-- Must have Premake version 3 installed.)
comment(-- Original Premake was changed to remove some parameters and add others.)
comment(-- Default parameters:)
comment(--   premake3s --target gnu --os linux)
comment(-- But it can build windows gcc makefiles, and visual studio projects.)
comment(--   premake3s --target gnu --os windows)
comment(--   premake3s --target gnu --os macosx)
comment(--   premake3s --target vs6)
comment(--   premake3s --target vs2002)
comment(--   premake3s --target vs2003)
comment(--   premake3s --target vs2005)
comment(-- In Linux the generated makefiles will not correctly build libraries in 64-bits.)
comment(--              must add "-m64 -fPIC" flags)
comment(----------------------------------------------------)

keyword(if) operator(()keyword(not) ident(options)operator(.)ident(target)operator(\)) keyword(then) 
  ident(options)operator(.)ident(target) operator(=) string<delimiter(")content(gnu)delimiter(")>
keyword(end)

keyword(if) operator(()keyword(not) ident(options)operator(.)ident(os)operator(\)) keyword(then)
  keyword(if) operator(()ident(options)operator(.)ident(target) operator(~)operator(=) string<delimiter(")content(gnu)delimiter(")>operator(\)) keyword(then)
    ident(options)operator(.)ident(os) operator(=) string<delimiter(")content(windows)delimiter(")>
  keyword(else)
    ident(options)operator(.)ident(os) operator(=) string<delimiter(")content(linux)delimiter(")>
  keyword(end)
keyword(end)

keyword(function) function(fixPackagePath)operator(()ident(package_files)operator(\))
  keyword(if) operator(()ident(options)operator(.)ident(os) operator(~)operator(=) string<delimiter(")content(linux)delimiter(")>operator(\)) keyword(then)
    keyword(for) ident(i)operator(,) ident(file) keyword(in) ident(package_files) keyword(do) 
      ident(package_files)operator([)ident(i)operator(]) operator(=) string<delimiter(")content(../src/)delimiter(")>operator(.)operator(.)ident(file) 
    keyword(end)
  keyword(end)
keyword(end)

comment(----------------------------------------------------)

ident(project)operator(.)ident(name) operator(=) string<delimiter(")content(iup)delimiter(")>
ident(project)operator(.)ident(bindir) operator(=) string<delimiter(")content(../bin)delimiter(")>
ident(project)operator(.)ident(libdir) operator(=) string<delimiter(")content(../lib)delimiter(")>

keyword(if) operator(()ident(options)operator(.)ident(os) operator(~)operator(=) string<delimiter(")content(linux)delimiter(")>operator(\)) keyword(then)
  keyword(if) operator(()ident(options)operator(.)ident(os) operator(=)operator(=) string<delimiter(")content(macosx)delimiter(")>operator(\)) keyword(then)
	ident(project)operator(.)ident(path) operator(=) string<delimiter(")content(../mak.macosx)delimiter(")>
  keyword(else)
	ident(project)operator(.)ident(path) operator(=) string<delimiter(")content(../mak.)delimiter(")>operator(.)operator(.)ident(options)operator(.)ident(target)
  keyword(end)
keyword(end)

comment(----------------------------------------------------)

ident(package) operator(=) ident(newpackage)operator(()operator(\))
ident(package)operator(.)ident(name) operator(=) string<delimiter(")content(iupview)delimiter(")>
ident(package)operator(.)ident(target) operator(=) ident(package)operator(.)ident(name)
ident(package)operator(.)ident(objdir) operator(=) string<delimiter(")content(../obj/)delimiter(")>operator(.)operator(.)ident(package)operator(.)ident(name)
ident(package)operator(.)ident(language) operator(=) string<delimiter(")content(c++)delimiter(")>
ident(package)operator(.)ident(kind) operator(=) string<delimiter(")content(winexe)delimiter(")>
ident(package)operator(.)ident(linkflags) operator(=) map<delimiter({) string<delimiter(")content(static-runtime)delimiter(")> delimiter(})>

ident(package)operator(.)ident(files) operator(=)
map<delimiter({)
  string<delimiter(")content(iupview.c)delimiter(")>
delimiter(})>
ident(fixPackagePath)operator(()ident(package)operator(.)ident(files)operator(\))

ident(package)operator(.)ident(includepaths) operator(=) map<delimiter({) string<delimiter(")content(.)delimiter(")>operator(,) string<delimiter(")content(../include)delimiter(")>operator(,) string<delimiter(")content($(CD\)/include)delimiter(")> delimiter(})>
ident(package)operator(.)ident(links) operator(=) map<delimiter({) string<delimiter(")content(iupgl)delimiter(")>operator(,) string<delimiter(")content(iupim)delimiter(")>operator(,) string<delimiter(")content(iupimglib)delimiter(")>operator(,) string<delimiter(")content(iupcontrols)delimiter(")>operator(,) string<delimiter(")content(cdiup)delimiter(")>operator(,) string<delimiter(")content(cd)delimiter(")>operator(,) string<delimiter(")content(iup)delimiter(")>operator(,) string<delimiter(")content(im)delimiter(")> delimiter(})>
ident(package)operator(.)ident(libpaths) operator(=) map<delimiter({) string<delimiter(")content(../lib)delimiter(")>operator(,) string<delimiter(")content($(IM\)/lib)delimiter(")>operator(,) string<delimiter(")content($(CD\)/lib)delimiter(")> delimiter(})>

keyword(if) operator(()ident(options)operator(.)ident(os) operator(=)operator(=) string<delimiter(")content(windows)delimiter(")>operator(\)) keyword(then)
  ident(tinsert)operator(()ident(package)operator(.)ident(links)operator(,) map<delimiter({) string<delimiter(")content(comctl32)delimiter(")>operator(,) string<delimiter(")content(opengl32)delimiter(")>operator(,) string<delimiter(")content(glu32)delimiter(")>operator(,) string<delimiter(")content(glaux)delimiter(")> delimiter(})>operator(\))
keyword(else)
  ident(tinsert)operator(()ident(package)operator(.)ident(links)operator(,) map<delimiter({) string<delimiter(")content(GLU)delimiter(")>operator(,) string<delimiter(")content(GL)delimiter(")>operator(,) string<delimiter(")content(Xm)delimiter(")>operator(,) string<delimiter(")content(Xpm)delimiter(")>operator(,) string<delimiter(")content(Xmu)delimiter(")>operator(,) string<delimiter(")content(Xt)delimiter(")>operator(,) string<delimiter(")content(Xext)delimiter(")>operator(,) string<delimiter(")content(X11)delimiter(")>operator(,) string<delimiter(")content(m)delimiter(")> delimiter(})>operator(\))
  ident(tinsert)operator(()ident(package)operator(.)ident(libpaths)operator(,) map<delimiter({) string<delimiter(")content(/usr/X11R6/lib)delimiter(")> delimiter(})>operator(\))
keyword(end)

comment(----------------------------------------------------)

ident(l) operator(=) ident(iup)operator(.)ident(label)map<delimiter({)key(title)operator(=)string<delimiter(")content(1)delimiter(")>operator(,) key(size)operator(=)string<delimiter(")content(200x)delimiter(")>delimiter(})>

keyword(function) function(idle_cb)operator(()operator(\))
  keyword(local) local_variable(v) operator(=) predefined(tonumber)operator(()ident(l)operator(.)ident(title)operator(\)) operator(+) integer(1)
  ident(l)operator(.)ident(title) operator(=) ident(v)
  keyword(if) ident(v) operator(=)operator(=) integer(10000) keyword(then)
    ident(iup)operator(.)ident(SetIdle)operator(()predefined_constant(nil)operator(\))
  keyword(end)
  keyword(return) ident(iup)operator(.)ident(DEFAULT)
keyword(end)

ident(dlg) operator(=) ident(iup)operator(.)ident(dialog)map<delimiter({)ident(l)operator(;) key(title) operator(=) string<delimiter(")content(Idle Test)delimiter(")>delimiter(})>

ident(dlg)operator(:)ident(showxy)operator(()ident(iup)operator(.)ident(CENTER)operator(,) ident(iup)operator(.)ident(CENTER)operator(\))

comment(-- Registers idle callback)
ident(iup)operator(.)ident(SetIdle)operator(()ident(idle_cb)operator(\))

comment(-- Creates a IupColorBrowser control and updates, through )
comment(-- callbacks, the values of texts representing the R, G and B )
comment(-- components of the selected color.)

ident(text_red) operator(=) ident(iup)operator(.)ident(text)map<delimiter({)delimiter(})>
ident(text_green) operator(=) ident(iup)operator(.)ident(text)map<delimiter({)delimiter(})>
ident(text_blue) operator(=) ident(iup)operator(.)ident(text)map<delimiter({)delimiter(})>

ident(cb) operator(=) ident(iup)operator(.)ident(colorbrowser)map<delimiter({)delimiter(})>

keyword(function) function(update)operator(()ident(r)operator(,) ident(g)operator(,) ident(b)operator(\))
  ident(text_red)operator(.)ident(value) operator(=) ident(r)
  ident(text_green)operator(.)ident(value) operator(=) ident(g)
  ident(text_blue)operator(.)ident(value) operator(=) ident(b)
keyword(end)

keyword(function) ident(cb:)function(drag_cb)operator(()ident(r)operator(,) ident(g) operator(,)ident(b)operator(\))
  ident(update)operator(()ident(r)operator(,)ident(g)operator(,)ident(b)operator(\))
keyword(end)

keyword(function) ident(cb:)function(change_cb)operator(()ident(r)operator(,) ident(g) operator(,)ident(b)operator(\))
  ident(update)operator(()ident(r)operator(,)ident(g)operator(,)ident(b)operator(\))
keyword(end)

ident(vbox) operator(=) ident(iup)operator(.)ident(vbox) map<delimiter({)
                 ident(iup)operator(.)ident(fill) map<inline_delimiter({)inline_delimiter(})>operator(,) 
                 ident(text_red)operator(,) 
                 ident(iup)operator(.)ident(fill) map<inline_delimiter({)inline_delimiter(})>operator(,) 
                 ident(text_green)operator(,) 
                 ident(iup)operator(.)ident(fill) map<inline_delimiter({)inline_delimiter(})>operator(,) 
                 ident(text_blue)operator(,) 
                 ident(iup)operator(.)ident(fill) map<inline_delimiter({)inline_delimiter(})>
               delimiter(})>

ident(dlg) operator(=) ident(iup)operator(.)ident(dialog)map<delimiter({)ident(iup)operator(.)ident(hbox) map<inline_delimiter({)ident(cb)operator(,) ident(iup)operator(.)ident(fill)map<inline_delimiter({)inline_delimiter(})>operator(,) ident(vbox)inline_delimiter(})>operator(;) key(title) operator(=) string<delimiter(")content(ColorBrowser)delimiter(")>delimiter(})>
ident(dlg)operator(:)ident(showxy)operator(()ident(iup)operator(.)ident(CENTER)operator(,) ident(iup)operator(.)ident(CENTER)operator(\))
comment(--IupDial Example in IupLua )

ident(lbl_h) operator(=) ident(iup)operator(.)ident(label)map<delimiter({)key(title) operator(=) string<delimiter(")content(0)delimiter(")>operator(,) key(alignment) operator(=) string<delimiter(")content(ACENTER)delimiter(")>operator(,) key(size) operator(=) string<delimiter(")content(100x10)delimiter(")>delimiter(})>
ident(lbl_v) operator(=) ident(iup)operator(.)ident(label)map<delimiter({)key(title) operator(=) string<delimiter(")content(0)delimiter(")>operator(,) key(alignment) operator(=) string<delimiter(")content(ACENTER)delimiter(")>operator(,) key(size) operator(=) string<delimiter(")content(100x10)delimiter(")>delimiter(})>
ident(lbl_c) operator(=) ident(iup)operator(.)ident(label)map<delimiter({)key(title) operator(=) string<delimiter(")content(0)delimiter(")>operator(,) key(alignment) operator(=) string<delimiter(")content(ACENTER)delimiter(")>operator(,) key(size) operator(=) string<delimiter(")content(100x10)delimiter(")>delimiter(})>

ident(dial_v) operator(=) ident(iup)operator(.)ident(dial)map<delimiter({)string<delimiter(")content(VERTICAL)delimiter(")>operator(;) key(size)operator(=)string<delimiter(")content(100x100)delimiter(")>delimiter(})>
ident(dial_h) operator(=) ident(iup)operator(.)ident(dial)map<delimiter({)string<delimiter(")content(HORIZONTAL)delimiter(")>operator(;) key(density)operator(=)float(0.3)delimiter(})>

keyword(function) ident(dial_v:)function(mousemove_cb)operator(()ident(a)operator(\))
   ident(lbl_v)operator(.)ident(title) operator(=) ident(a)
   keyword(return) ident(iup)operator(.)ident(DEFAULT)
keyword(end)

keyword(function) ident(dial_v:)function(button_press_cb)operator(()ident(a)operator(\))
   ident(lbl_v)operator(.)ident(bgcolor) operator(=) string<delimiter(")content(255 0 0)delimiter(")>
   keyword(return) ident(iup)operator(.)ident(DEFAULT)
keyword(end)

keyword(function) ident(dial_v:)function(button_release_cb)operator(()ident(a)operator(\))
   ident(lbl_v)operator(.)ident(bgcolor) operator(=) predefined_constant(nil)
   keyword(return) ident(iup)operator(.)ident(DEFAULT)
keyword(end)

keyword(function) ident(dial_h:)function(mousemove_cb)operator(()ident(a)operator(\))
   ident(lbl_h)operator(.)ident(title) operator(=) ident(a)
   keyword(return) ident(iup)operator(.)ident(DEFAULT)
keyword(end)

keyword(function) ident(dial_h:)function(button_press_cb)operator(()ident(a)operator(\))
   ident(lbl_h)operator(.)ident(bgcolor) operator(=) string<delimiter(")content(255 0 0)delimiter(")>
   keyword(return) ident(iup)operator(.)ident(DEFAULT)
keyword(end)

keyword(function) ident(dial_h:)function(button_release_cb)operator(()ident(a)operator(\))
   ident(lbl_h)operator(.)ident(bgcolor) operator(=) predefined_constant(nil)
   keyword(return) ident(iup)operator(.)ident(DEFAULT)
keyword(end)

ident(dlg) operator(=) ident(iup)operator(.)ident(dialog)
map<delimiter({)
  ident(iup)operator(.)ident(hbox)
  map<inline_delimiter({)
    ident(iup)operator(.)ident(fill)map<inline_delimiter({)inline_delimiter(})>operator(,)
    ident(iup)operator(.)ident(vbox)
    map<inline_delimiter({)
      ident(iup)operator(.)ident(fill)map<inline_delimiter({)inline_delimiter(})>operator(,)
      ident(iup)operator(.)ident(frame)
      map<inline_delimiter({)
        ident(iup)operator(.)ident(vbox)
        map<inline_delimiter({)
          ident(iup)operator(.)ident(hbox)
          map<inline_delimiter({)
             ident(iup)operator(.)ident(fill)map<inline_delimiter({)inline_delimiter(})>operator(,)
             ident(dial_v)operator(,)
             ident(iup)operator(.)ident(fill)map<inline_delimiter({)inline_delimiter(})>
          inline_delimiter(})> operator(,)
          ident(iup)operator(.)ident(hbox)
          map<inline_delimiter({)
             ident(iup)operator(.)ident(fill)map<inline_delimiter({)inline_delimiter(})>operator(,)
             ident(lbl_v)operator(,)
             ident(iup)operator(.)ident(fill)map<inline_delimiter({)inline_delimiter(})>
          inline_delimiter(})>
        inline_delimiter(})>
      inline_delimiter(})>operator(,)
      ident(iup)operator(.)ident(fill)map<inline_delimiter({)inline_delimiter(})>operator(,)
      ident(iup)operator(.)ident(frame)
      map<inline_delimiter({)
        ident(iup)operator(.)ident(vbox)
        map<inline_delimiter({) 
          ident(iup)operator(.)ident(hbox)
          map<inline_delimiter({)
             ident(iup)operator(.)ident(fill)map<inline_delimiter({)inline_delimiter(})>operator(,)
             ident(dial_h)operator(,)
             ident(iup)operator(.)ident(fill)map<inline_delimiter({)inline_delimiter(})>
          inline_delimiter(})> operator(,)
          ident(iup)operator(.)ident(hbox)
          map<inline_delimiter({)
             ident(iup)operator(.)ident(fill)map<inline_delimiter({)inline_delimiter(})>operator(,)
             ident(lbl_h)operator(,)
             ident(iup)operator(.)ident(fill)map<inline_delimiter({)inline_delimiter(})>
          inline_delimiter(})> operator(,)
        inline_delimiter(})> 
      inline_delimiter(})>operator(,)
      ident(iup)operator(.)ident(fill)map<inline_delimiter({)inline_delimiter(})>operator(,)
    inline_delimiter(})>operator(,)
    ident(iup)operator(.)ident(fill)map<inline_delimiter({)inline_delimiter(})>
  inline_delimiter(})>operator(;) key(title)operator(=)string<delimiter(")content(IupDial)delimiter(")>
delimiter(})>

ident(dlg)operator(:)ident(showxy)operator(()ident(iup)operator(.)ident(CENTER)operator(,)ident(iup)operator(.)ident(CENTER)operator(\))


keyword(function) function(idle_cb)operator(()operator(\))
  keyword(local) local_variable(value) operator(=) ident(gauge)operator(.)ident(value)
  ident(value) operator(=) ident(value) operator(+) float(0.0001)operator(;)
  keyword(if) ident(value) operator(>) float(1.0) keyword(then)
    ident(value) operator(=) float(0.0)
  keyword(end)
  ident(gauge)operator(.)ident(value) operator(=) ident(value)
  keyword(return) ident(iup)operator(.)ident(DEFAULT)
keyword(end)

ident(gauge) operator(=) ident(iup)operator(.)ident(gauge)map<delimiter({)delimiter(})>
ident(gauge)operator(.)ident(size) operator(=) string<delimiter(")content(QUARTERxEIGHTH)delimiter(")>
ident(gauge)operator(.)ident(show_text) operator(=) string<delimiter(")content(YES)delimiter(")>

ident(dlg) operator(=) ident(iup)operator(.)ident(dialog)map<delimiter({)ident(gauge)operator(;) key(title) operator(=) string<delimiter(")content(IupGauge)delimiter(")>delimiter(})>

comment(-- Registers idle callback)
ident(iup)operator(.)ident(SetIdle)operator(()ident(idle_cb)operator(\))

ident(dlg)operator(:)ident(showxy)operator(()ident(iup)operator(.)ident(CENTER)operator(,) ident(iup)operator(.)ident(CENTER)operator(\))
comment(--)
comment(-- IupGetColor Example in IupLua )
comment(--)
comment(-- Creates a predefined color selection dialog which returns the)
comment(-- selected color in the RGB format.)
comment(--)

ident(r)operator(,) ident(g)operator(,) ident(b) operator(=) ident(iup)operator(.)ident(GetColor)operator(()integer(100)operator(,) integer(100)operator(,) integer(255)operator(,) integer(255)operator(,) integer(255)operator(\))
keyword(if) operator(()ident(r)operator(\)) keyword(then)
  predefined(print)operator(()string<delimiter(")content(r=)delimiter(")>operator(.)operator(.)ident(r)operator(.)operator(.)string<delimiter(")content( g=)delimiter(")>operator(.)operator(.)ident(g)operator(.)operator(.)string<delimiter(")content( b=)delimiter(")>operator(.)operator(.)ident(b)operator(\))               
keyword(end)
comment(-- IupGetParam Example in IupLua )
comment(-- Shows a dialog with all possible fields. )

ident(iup)operator(.)ident(SetLanguage)operator(()string<delimiter(")content(ENGLISH)delimiter(")>operator(\))

keyword(function) function(param_action)operator(()ident(dialog)operator(,) ident(param_index)operator(\))
  keyword(if) operator(()ident(param_index) operator(=)operator(=) integer(-1)operator(\)) keyword(then)
    predefined(print)operator(()string<delimiter(")content(OK)delimiter(")>operator(\))
  keyword(elseif) operator(()ident(param_index) operator(=)operator(=) integer(-2)operator(\)) keyword(then)
    predefined(print)operator(()string<delimiter(")content(Map)delimiter(")>operator(\))
  keyword(elseif) operator(()ident(param_index) operator(=)operator(=) integer(-3)operator(\)) keyword(then)
    predefined(print)operator(()string<delimiter(")content(Cancel)delimiter(")>operator(\))
  keyword(else)
    keyword(local) local_variable(param) operator(=) ident(iup)operator(.)ident(GetParamParam)operator(()ident(dialog)operator(,) ident(param_index)operator(\))
    predefined(print)operator(()string<delimiter(")content(PARAM)delimiter(")>operator(.)operator(.)ident(param_index)operator(.)operator(.)string<delimiter(")content( = )delimiter(")>operator(.)operator(.)ident(param)operator(.)ident(value)operator(\))
  keyword(end)
  keyword(return) integer(1)
keyword(end)

comment(-- set initial values)
ident(pboolean) operator(=) integer(1)
ident(pinteger) operator(=) integer(3456)
ident(preal) operator(=) float(3.543)
ident(pinteger2) operator(=) integer(192)
ident(preal2) operator(=) float(0.5)
ident(pangle) operator(=) integer(90)
ident(pstring) operator(=) string<delimiter(")content(string text)delimiter(")>
ident(plist) operator(=) integer(2)
ident(pstring2) operator(=) string<delimiter(")content(second text)char(\\n)content(second line)delimiter(")>
  
ident(ret)operator(,) ident(pboolean)operator(,) ident(pinteger)operator(,) ident(preal)operator(,) ident(pinteger2)operator(,) ident(preal2)operator(,) ident(pangle)operator(,) ident(pstring)operator(,) ident(plist)operator(,) ident(pstring2) operator(=) 
      ident(iup)operator(.)ident(GetParam)operator(()string<delimiter(")content(Title)delimiter(")>operator(,) ident(param_action)operator(,)
                  string<delimiter(")content(Boolean: %b)char(\\n)delimiter(")>operator(.)operator(.)
                  string<delimiter(")content(Integer: %i)char(\\n)delimiter(")>operator(.)operator(.)
                  string<delimiter(")content(Real 1: %r)char(\\n)delimiter(")>operator(.)operator(.)
                  string<delimiter(")content(Sep1 %t)char(\\n)delimiter(")>operator(.)operator(.)
                  string<delimiter(")content(Integer: %i[0,255])char(\\n)delimiter(")>operator(.)operator(.)
                  string<delimiter(")content(Real 2: %r[-1.5,1.5])char(\\n)delimiter(")>operator(.)operator(.)
                  string<delimiter(")content(Sep2 %t)char(\\n)delimiter(")>operator(.)operator(.)
                  string<delimiter(")content(Angle: %a[0,360])char(\\n)delimiter(")>operator(.)operator(.)
                  string<delimiter(")content(String: %s)char(\\n)delimiter(")>operator(.)operator(.)
                  string<delimiter(")content(List: %l|item1|item2|item3|)char(\\n)delimiter(")>operator(.)operator(.)
                  string<delimiter(")content(Sep3 %t)char(\\n)delimiter(")>operator(.)operator(.)
                  string<delimiter(")content(Multiline: %m)char(\\n)delimiter(")>operator(,)
                  ident(pboolean)operator(,) ident(pinteger)operator(,) ident(preal)operator(,) ident(pinteger2)operator(,) ident(preal2)operator(,) ident(pangle)operator(,) ident(pstring)operator(,) ident(plist)operator(,) ident(pstring2)operator(\))
keyword(if) operator(()ident(ret) operator(=)operator(=) integer(0)operator(\)) keyword(then)
  keyword(return)
keyword(end)

ident(iup)operator(.)ident(Message)operator(()string<delimiter(")content(IupGetParam)delimiter(")>operator(,)
            string<delimiter(")content(Boolean Value: )delimiter(")>operator(.)operator(.)ident(pboolean)operator(.)operator(.)string<delimiter(")char(\\n)delimiter(")>operator(.)operator(.)
            string<delimiter(")content(Integer: )delimiter(")>operator(.)operator(.)ident(pinteger)operator(.)operator(.)string<delimiter(")char(\\n)delimiter(")>operator(.)operator(.)
            string<delimiter(")content(Real 1: )delimiter(")>operator(.)operator(.)ident(preal)operator(.)operator(.)string<delimiter(")char(\\n)delimiter(")>operator(.)operator(.)
            string<delimiter(")content(Integer: )delimiter(")>operator(.)operator(.)ident(pinteger2)operator(.)operator(.)string<delimiter(")char(\\n)delimiter(")>operator(.)operator(.)
            string<delimiter(")content(Real 2: )delimiter(")>operator(.)operator(.)ident(preal2)operator(.)operator(.)string<delimiter(")char(\\n)delimiter(")>operator(.)operator(.)
            string<delimiter(")content(Angle: )delimiter(")>operator(.)operator(.)ident(pangle)operator(.)operator(.)string<delimiter(")char(\\n)delimiter(")>operator(.)operator(.)
            string<delimiter(")content(String: )delimiter(")>operator(.)operator(.)ident(pstring)operator(.)operator(.)string<delimiter(")char(\\n)delimiter(")>operator(.)operator(.)
            string<delimiter(")content(List Index: )delimiter(")>operator(.)operator(.)ident(plist)operator(.)operator(.)string<delimiter(")char(\\n)delimiter(")>operator(.)operator(.)
            string<delimiter(")content(String: )delimiter(")>operator(.)operator(.)ident(pstring2)operator(\))
comment(-- Example IupGLCanvas in Lua )
comment(-- Creates a OpenGL canvas and draws a line in it. )
comment(-- This example uses gllua binding of OpenGL to Lua.)
 
ident(cv) operator(=) ident(iup)operator(.)ident(glcanvas)map<delimiter({)key(buffer)operator(=)string<delimiter(")content(DOUBLE)delimiter(")>operator(,) key(rastersize) operator(=) string<delimiter(")content(300x300)delimiter(")>delimiter(})>

keyword(function) ident(cv:)function(action)operator(()ident(x)operator(,) ident(y)operator(\))
  ident(iup)operator(.)ident(GLMakeCurrent)operator(()ident(self)operator(\))
  comment(--glClearColor(1.0, 1.0, 1.0, 1.0\))
  comment(--glClear(GL_COLOR_BUFFER_BIT\))
  comment(--glClear(GL_DEPTH_BUFFER_BIT\))
  comment(--glMatrixMode( GL_PROJECTION \))
  comment(--glViewport(0, 0, 300, 300\))
  comment(--glLoadIdentity(\))
  comment(--glBegin( GL_LINES \) )
  comment(--glColor(1.0, 0.0, 0.0\))
  comment(--glVertex(0.0, 0.0\))
  comment(--glVertex(10.0, 10.0\))
  comment(--glEnd(\))
  ident(iup)operator(.)ident(GLSwapBuffers)operator(()ident(self)operator(\))
  keyword(return) ident(iup)operator(.)ident(DEFAULT)
keyword(end)

ident(dg) operator(=) ident(iup)operator(.)ident(dialog)map<delimiter({)ident(cv)operator(;) key(title)operator(=)string<delimiter(")content(IupGLCanvas Example)delimiter(")>delimiter(})>

keyword(function) ident(cv:)function(k_any)operator(()ident(c)operator(\))
  keyword(if) ident(c) operator(=)operator(=) ident(iup)operator(.)ident(K_q) keyword(then)
    keyword(return) ident(iup)operator(.)ident(CLOSE)
  keyword(else)
    keyword(return) ident(iup)operator(.)ident(DEFAULT)
  keyword(end)
keyword(end)


ident(dg)operator(:)ident(show)operator(()operator(\))

ident(canvas) operator(=) ident(iup)operator(.)ident(glcanvas)map<delimiter({)key(buffer)operator(=)string<delimiter(")content(DOUBLE)delimiter(")>operator(,) key(rastersize) operator(=) string<delimiter(")content(640x480)delimiter(")>delimiter(})>

keyword(function) ident(canvas:)function(resize_cb)operator(()ident(width)operator(,) ident(height)operator(\))
  ident(iup)operator(.)ident(GLMakeCurrent)operator(()ident(self)operator(\))

  ident(gl)operator(.)ident(Viewport)operator(()integer(0)operator(,) integer(0)operator(,) ident(width)operator(,) ident(height)operator(\))

  ident(gl)operator(.)ident(MatrixMode)operator(()string<delimiter(')content(PROJECTION)delimiter(')>operator(\))
  ident(gl)operator(.)ident(LoadIdentity)operator(()operator(\))

  ident(gl)operator(.)ident(MatrixMode)operator(()string<delimiter(')content(MODELVIEW)delimiter(')>operator(\))
  ident(gl)operator(.)ident(LoadIdentity)operator(()operator(\))

keyword(end)

keyword(function) ident(canvas:)function(action)operator(()operator(\))
  ident(iup)operator(.)ident(GLMakeCurrent)operator(()ident(self)operator(\))

  ident(gl)operator(.)ident(MatrixMode)operator(()string<delimiter(")content(PROJECTION)delimiter(")>operator(\))
  ident(gl)operator(.)ident(LoadIdentity)operator(()operator(\))
  ident(gl)operator(.)ident(Ortho)operator(()integer(0)operator(,) integer(1)operator(,) integer(1)operator(,) integer(0)operator(,) float(-1.0)operator(,) float(1.0)operator(\))
  ident(gl)operator(.)ident(MatrixMode)operator(()string<delimiter(")content(MODELVIEW)delimiter(")>operator(\))
  ident(gl)operator(.)ident(LoadIdentity)operator(()operator(\))
  ident(gl)operator(.)ident(PushMatrix)operator(()operator(\))
  ident(gl)operator(.)ident(Translate)operator(()float(0.25)operator(,)float(0.5)operator(,) integer(0)operator(\))
  ident(gl)operator(.)ident(Scale)operator(()float(0.2)operator(,) float(0.2)operator(,) integer(1)operator(\))

  ident(gl)operator(.)ident(BlendFunc)operator(()string<delimiter(")content(SRC_ALPHA)delimiter(")>operator(,) string<delimiter(")content(ONE_MINUS_SRC_ALPHA)delimiter(")>operator(\))

  ident(gl)operator(.)ident(ClearColor)operator(()integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(1)operator(\))
  ident(gl)operator(.)ident(Clear)operator(()string<delimiter(")content(DEPTH_BUFFER_BIT,COLOR_BUFFER_BIT)delimiter(")>operator(\))
  ident(gl)operator(.)ident(Enable)operator(()string<delimiter(")content(BLEND)delimiter(")>operator(\))

  comment(-- draw rectangle)
  ident(gl)operator(.)ident(Color)operator(() map<delimiter({)integer(1)operator(,) integer(1)operator(,) integer(0)operator(,) float(0.8)delimiter(})> operator(\))
  ident(gl)operator(.)ident(Rect)operator(()integer(-1)operator(,)integer(-1)operator(,)integer(1)operator(,)integer(1)operator(\))
  
  comment(--------------------------------------------------------)
  comment(-- Create List That Draws the Circle)
  comment(--------------------------------------------------------)

  ident(planet) operator(=) integer(1)
  ident(orbit) operator(=) integer(2)
  ident(pi) operator(=) 

  ident(gl)operator(.)ident(NewList)operator(()ident(planet)operator(,) string<delimiter(")content(COMPILE)delimiter(")>operator(\))
    ident(gl)operator(.)ident(Begin)operator(()string<delimiter(")content(POLYGON)delimiter(")>operator(\))
      keyword(for) ident(i)operator(=)integer(0)operator(,) integer(100) keyword(do)
        ident(cosine) operator(=) ident(math)operator(.)ident(cos)operator(()ident(i) operator(*) integer(2) operator(*) ident(math)operator(.)ident(pi)operator(/)float(100.0)operator(\))
        ident(sine)   operator(=) ident(math)operator(.)ident(sin)operator(()ident(i) operator(*) integer(2) operator(*) ident(math)operator(.)ident(pi)operator(/)float(100.0)operator(\))
        ident(gl)operator(.)ident(Vertex)operator(()ident(cosine)operator(,)ident(sine)operator(\))
      keyword(end)
    ident(gl)operator(.)ident(End)operator(()operator(\))
  ident(gl)operator(.)ident(EndList)operator(()operator(\))

  ident(gl)operator(.)ident(NewList)operator(()ident(orbit)operator(,) string<delimiter(")content(COMPILE)delimiter(")>operator(\))
    ident(gl)operator(.)ident(Begin)operator(()string<delimiter(")content(LINE_LOOP)delimiter(")>operator(\))
      keyword(for) ident(i)operator(=)integer(0)operator(,) integer(100) keyword(do)
        ident(cosine) operator(=) ident(math)operator(.)ident(cos)operator(()ident(i) operator(*) integer(2) operator(*) ident(math)operator(.)ident(pi)operator(/)float(100.0)operator(\))
        ident(sine)   operator(=) ident(math)operator(.)ident(sin)operator(()ident(i) operator(*) integer(2) operator(*) ident(math)operator(.)ident(pi)operator(/)float(100.0)operator(\))
        ident(gl)operator(.)ident(Vertex)operator(()ident(cosine)operator(,) ident(sine)operator(\))
      keyword(end)
    ident(gl)operator(.)ident(End)operator(()operator(\))
  ident(gl)operator(.)ident(EndList)operator(()operator(\))

  comment(--------------------------------------------------------)

  ident(gl)operator(.)ident(Color)operator(() map<delimiter({)integer(0)operator(,) float(0.5)operator(,) integer(0)operator(,) float(0.8)delimiter(})> operator(\))
  ident(gl)operator(.)ident(CallList)operator(()ident(planet)operator(\))

  ident(gl)operator(.)ident(Color)operator(() map<delimiter({)integer(0)operator(,) integer(0)operator(,) integer(0)operator(,) integer(1)delimiter(})> operator(\))
  ident(lists) operator(=) map<delimiter({) ident(orbit) delimiter(})>
  ident(gl)operator(.)ident(CallLists)operator(()ident(lists)operator(\))

  ident(gl)operator(.)ident(EnableClientState) operator(()string<delimiter(")content(VERTEX_ARRAY)delimiter(")>operator(\))
  
  ident(vertices)  operator(=) map<delimiter({) map<inline_delimiter({)integer(-3)operator(^)operator(()integer(1)operator(/)integer(2)operator(\))operator(/)integer(2)operator(,) integer(1)operator(/)integer(2)inline_delimiter(})>operator(,) map<inline_delimiter({)integer(3)operator(^)operator(()integer(1)operator(/)integer(2)operator(\))operator(/)integer(2)operator(,) integer(1)operator(/)integer(2)inline_delimiter(})>operator(,) map<inline_delimiter({)integer(0)operator(,) integer(-1)inline_delimiter(})>operator(,) map<inline_delimiter({)integer(-3)operator(^)operator(()integer(1)operator(/)integer(2)operator(\))operator(/)integer(2)operator(,) integer(-1)operator(/)integer(2)inline_delimiter(})>operator(,) map<inline_delimiter({)integer(3)operator(^)operator(()integer(1)operator(/)integer(2)operator(\))operator(/)integer(2)operator(,) integer(-1)operator(/)integer(2)inline_delimiter(})>operator(,) map<inline_delimiter({)integer(0)operator(,) integer(1)inline_delimiter(})> delimiter(})>
    
  ident(gl)operator(.)ident(VertexPointer)  operator(()ident(vertices)operator(\))
  
  comment(-- draw first triangle)
  ident(gl)operator(.)ident(Color)operator(() map<delimiter({)integer(0)operator(,) integer(0)operator(,) integer(1)operator(,) float(0.5)delimiter(})> operator(\))

  ident(gl)operator(.)ident(Begin)operator(()string<delimiter(")content(TRIANGLES)delimiter(")>operator(\))
    ident(gl)operator(.)ident(ArrayElement) operator(()integer(0)operator(\))
    ident(gl)operator(.)ident(ArrayElement) operator(()integer(1)operator(\))
    ident(gl)operator(.)ident(ArrayElement) operator(()integer(2)operator(\))
  ident(gl)operator(.)ident(End)operator(()operator(\))

  comment(-- draw second triangle)
  ident(gl)operator(.)ident(Color)operator(() map<delimiter({)integer(1)operator(,) integer(0)operator(,) integer(0)operator(,) float(0.5)delimiter(})> operator(\))
  ident(gl)operator(.)ident(VertexPointer)  operator(()ident(vertices)operator(\))
  ident(gl)operator(.)ident(DrawArrays)operator(()string<delimiter(")content(TRIANGLES)delimiter(")>operator(,) integer(3)operator(,) integer(3)operator(\))

  comment(-- draw triangles outline)
  ident(gl)operator(.)ident(Color)operator(()integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(\))
  ident(elements) operator(=) map<delimiter({) integer(0)operator(,) integer(1)operator(,) integer(2)delimiter(})>   ident(gl)operator(.)ident(DrawElements)operator(()string<delimiter(")content(LINE_LOOP)delimiter(")>operator(,) ident(elements)operator(\))
  ident(elements) operator(=) map<delimiter({) integer(3)operator(,) integer(4)operator(,) integer(5)delimiter(})>   ident(gl)operator(.)ident(DrawElements)operator(()string<delimiter(")content(LINE_LOOP)delimiter(")>operator(,) ident(elements)operator(\))

  ident(gl)operator(.)ident(DisableClientState) operator(()string<delimiter(")content(VERTEX_ARRAY)delimiter(")>operator(\))

  ident(gl)operator(.)ident(PopMatrix)operator(()operator(\))
  ident(gl)operator(.)ident(Translate)operator(()float(0.75)operator(,)float(0.5)operator(,) integer(0)operator(\))
  ident(gl)operator(.)ident(Scale)operator(()float(0.2)operator(,) float(0.2)operator(,) integer(1)operator(\))

  comment(----------------------------------------------------------------------------)

  ident(gl)operator(.)ident(BlendFunc)operator(()string<delimiter(")content(SRC_ALPHA)delimiter(")>operator(,) string<delimiter(")content(ONE_MINUS_SRC_ALPHA)delimiter(")>operator(\))

  comment(-- draw rectangle)
  ident(gl)operator(.)ident(Color)operator(() map<delimiter({)integer(1)operator(,) integer(1)operator(,) integer(0)operator(,) float(0.8)delimiter(})> operator(\))
  
  ident(gl)operator(.)ident(Begin)operator(()string<delimiter(")content(QUADS)delimiter(")>operator(\))
    ident(gl)operator(.)ident(Vertex)operator(()integer(-1)operator(,)integer(-1)operator(\))
    ident(gl)operator(.)ident(Vertex)operator(() integer(1)operator(,)integer(-1)operator(\))
    ident(gl)operator(.)ident(Vertex)operator(() integer(1)operator(,) integer(1)operator(\))
    ident(gl)operator(.)ident(Vertex)operator(()integer(-1)operator(,) integer(1)operator(\))
  ident(gl)operator(.)ident(End)operator(()operator(\))
  comment(-------------------------------)
  ident(gl)operator(.)ident(Color)operator(() map<delimiter({)integer(0)operator(,) float(0.5)operator(,) integer(0)operator(,) float(0.8)delimiter(})> operator(\))
  ident(gl)operator(.)ident(Begin)operator(()string<delimiter(")content(POLYGON)delimiter(")>operator(\))
    keyword(for) ident(i)operator(=)integer(0)operator(,) integer(100) keyword(do)
      ident(cosine) operator(=) ident(math)operator(.)ident(cos)operator(()ident(i) operator(*) integer(2) operator(*) ident(math)operator(.)ident(pi)operator(/)float(100.0)operator(\))
      ident(sine)   operator(=) ident(math)operator(.)ident(sin)operator(()ident(i) operator(*) integer(2) operator(*) ident(math)operator(.)ident(pi)operator(/)float(100.0)operator(\))
      ident(gl)operator(.)ident(Vertex)operator(()ident(cosine)operator(,)ident(sine)operator(\))
    keyword(end)
  ident(gl)operator(.)ident(End)operator(()operator(\))

  ident(gl)operator(.)ident(Color)operator(() map<delimiter({)integer(0)operator(,) integer(0)operator(,) integer(0)operator(,) integer(1)delimiter(})> operator(\))
  ident(gl)operator(.)ident(Begin)operator(()string<delimiter(")content(LINE_LOOP)delimiter(")>operator(\))
    keyword(for) ident(i)operator(=)integer(0)operator(,) integer(100) keyword(do)
      ident(cosine) operator(=) ident(math)operator(.)ident(cos)operator(()ident(i) operator(*) integer(2) operator(*) ident(math)operator(.)ident(pi)operator(/)float(100.0)operator(\))
      ident(sine)   operator(=) ident(math)operator(.)ident(sin)operator(()ident(i) operator(*) integer(2) operator(*) ident(math)operator(.)ident(pi)operator(/)float(100.0)operator(\))
      ident(gl)operator(.)ident(Vertex)operator(()ident(cosine)operator(,) ident(sine)operator(\))
    keyword(end)
  ident(gl)operator(.)ident(End)operator(()operator(\))

  comment(-- draw first triangle)
  ident(gl)operator(.)ident(Color)operator(() map<delimiter({)integer(0)operator(,) integer(0)operator(,) integer(1)operator(,) float(0.5)delimiter(})> operator(\))
  ident(gl)operator(.)ident(Begin)operator(()string<delimiter(")content(TRIANGLES)delimiter(")>operator(\))
    ident(gl)operator(.)ident(Vertex) operator(()ident(vertices)operator([)integer(1)operator(])operator(\))
    ident(gl)operator(.)ident(Vertex) operator(()ident(vertices)operator([)integer(2)operator(])operator(\))
    ident(gl)operator(.)ident(Vertex) operator(()ident(vertices)operator([)integer(3)operator(])operator(\))
  ident(gl)operator(.)ident(End)operator(()operator(\))
  comment(-- draw second triangle)
  ident(gl)operator(.)ident(Color)operator(() map<delimiter({)integer(1)operator(,) integer(0)operator(,) integer(0)operator(,) float(0.5)delimiter(})> operator(\))
  ident(gl)operator(.)ident(Begin)operator(()string<delimiter(")content(TRIANGLES)delimiter(")>operator(\))
    ident(gl)operator(.)ident(Vertex) operator(()ident(vertices)operator([)integer(4)operator(])operator(\))
    ident(gl)operator(.)ident(Vertex) operator(()ident(vertices)operator([)integer(5)operator(])operator(\))
    ident(gl)operator(.)ident(Vertex) operator(()ident(vertices)operator([)integer(6)operator(])operator(\))
  ident(gl)operator(.)ident(End)operator(()operator(\))
  comment(-- draw triangles outline)
  ident(gl)operator(.)ident(Color)operator(()integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(\))
  ident(gl)operator(.)ident(Begin)operator(()string<delimiter(")content(LINE_LOOP)delimiter(")>operator(\))
    ident(gl)operator(.)ident(Vertex) operator(()ident(vertices)operator([)integer(1)operator(])operator(\))
    ident(gl)operator(.)ident(Vertex) operator(()ident(vertices)operator([)integer(2)operator(])operator(\))
    ident(gl)operator(.)ident(Vertex) operator(()ident(vertices)operator([)integer(3)operator(])operator(\))
  ident(gl)operator(.)ident(End)operator(()operator(\))
  ident(gl)operator(.)ident(Begin)operator(()string<delimiter(")content(LINE_LOOP)delimiter(")>operator(\))
    ident(gl)operator(.)ident(Vertex) operator(()ident(vertices)operator([)integer(4)operator(])operator(\))
    ident(gl)operator(.)ident(Vertex) operator(()ident(vertices)operator([)integer(5)operator(])operator(\))
    ident(gl)operator(.)ident(Vertex) operator(()ident(vertices)operator([)integer(6)operator(])operator(\))
  ident(gl)operator(.)ident(End)operator(()operator(\))

  ident(iup)operator(.)ident(GLSwapBuffers)operator(()ident(self)operator(\))
  ident(gl)operator(.)ident(Flush)operator(()operator(\))

keyword(end)

ident(dialog) operator(=) ident(iup)operator(.)ident(dialog)map<delimiter({)ident(canvas)operator(;) key(title)operator(=)string<delimiter(")content(Lua GL Test Application)delimiter(")>delimiter(})>
ident(dialog)operator(:)ident(show)operator(()operator(\))
comment(-- IupMask Example in Lua)
comment(-- Creates an IupText that accepts only numbers.)

ident(txt) operator(=) ident(iup)operator(.)ident(text)map<delimiter({)delimiter(})>
ident(iup)operator(.)ident(maskSet)operator(()ident(txt)operator(,) string<delimiter(")content(/d*)delimiter(")>operator(,) integer(0)operator(,) integer(1)operator(\)) operator(;)
ident(dg) operator(=) ident(iup)operator(.)ident(dialog)map<delimiter({)ident(txt)delimiter(})>
ident(dg)operator(:)ident(show)operator(()operator(\))ident(mat)operator(=) ident(iup)operator(.)ident(matrix)map<delimiter({)key(numlin)operator(=)integer(3)operator(,) key(numcol)operator(=)integer(3)delimiter(})>
ident(mat)operator(:)ident(setcell)operator(()integer(1)operator(,)integer(1)operator(,)string<delimiter(")content(Only numbers)delimiter(")>operator(\))
ident(iup)operator(.)ident(maskMatSet)operator(()ident(mat)operator(,) string<delimiter(")content(/d*)delimiter(")>operator(,) integer(0)operator(,) integer(1)operator(,) integer(1)operator(,) integer(1)operator(\)) operator(;)
ident(dg) operator(=) ident(iup)operator(.)ident(dialog)map<delimiter({)ident(mat)delimiter(})>
ident(dg)operator(:)ident(show)operator(()operator(\))

ident(mat) operator(=) ident(iup)operator(.)ident(matrix) map<delimiter({)key(numcol)operator(=)integer(5)operator(,) key(numlin)operator(=)integer(3)operator(,)key(numcol_visible)operator(=)integer(5)operator(,) key(numlin_visible)operator(=)integer(3)operator(,) key(widthdef)operator(=)integer(34)delimiter(})>
ident(mat)operator(.)ident(resizematrix) operator(=) string<delimiter(")content(YES)delimiter(")>
ident(mat)operator(:)ident(setcell)operator(()integer(0)operator(,)integer(0)operator(,)string<delimiter(")content(Inflation)delimiter(")>operator(\))
ident(mat)operator(:)ident(setcell)operator(()integer(1)operator(,)integer(0)operator(,)string<delimiter(")content(Medicine)delimiter(")>operator(\))
ident(mat)operator(:)ident(setcell)operator(()integer(2)operator(,)integer(0)operator(,)string<delimiter(")content(Food)delimiter(")>operator(\))
ident(mat)operator(:)ident(setcell)operator(()integer(3)operator(,)integer(0)operator(,)string<delimiter(")content(Energy)delimiter(")>operator(\))
ident(mat)operator(:)ident(setcell)operator(()integer(0)operator(,)integer(1)operator(,)string<delimiter(")content(January 2000)delimiter(")>operator(\))
ident(mat)operator(:)ident(setcell)operator(()integer(0)operator(,)integer(2)operator(,)string<delimiter(")content(February 2000)delimiter(")>operator(\))
ident(mat)operator(:)ident(setcell)operator(()integer(1)operator(,)integer(1)operator(,)string<delimiter(")content(5.6)delimiter(")>operator(\))
ident(mat)operator(:)ident(setcell)operator(()integer(2)operator(,)integer(1)operator(,)string<delimiter(")content(2.2)delimiter(")>operator(\))
ident(mat)operator(:)ident(setcell)operator(()integer(3)operator(,)integer(1)operator(,)string<delimiter(")content(7.2)delimiter(")>operator(\))
ident(mat)operator(:)ident(setcell)operator(()integer(1)operator(,)integer(2)operator(,)string<delimiter(")content(4.6)delimiter(")>operator(\))
ident(mat)operator(:)ident(setcell)operator(()integer(2)operator(,)integer(2)operator(,)string<delimiter(")content(1.3)delimiter(")>operator(\))
ident(mat)operator(:)ident(setcell)operator(()integer(3)operator(,)integer(2)operator(,)string<delimiter(")content(1.4)delimiter(")>operator(\))
ident(dlg) operator(=) ident(iup)operator(.)ident(dialog)map<delimiter({)ident(iup)operator(.)ident(vbox)map<inline_delimiter({)ident(mat)operator(;) key(margin)operator(=)string<delimiter(")content(10x10)delimiter(")>inline_delimiter(})>delimiter(})>
ident(dlg)operator(:)ident(showxy)operator(()ident(iup)operator(.)ident(CENTER)operator(,) ident(iup)operator(.)ident(CENTER)operator(\))
ident(matrix) operator(=) ident(iup)operator(.)ident(matrix)
map<delimiter({)
    key(numlin)operator(=)integer(3)operator(,)
    key(numcol)operator(=)integer(3)operator(,)
    key(numcol_visible)operator(=)integer(3)operator(,)
    key(height0)operator(=)integer(10)operator(,)
    key(widthdef)operator(=)integer(30)operator(,)
    key(scrollbar)operator(=)string<delimiter(")content(VERTICAL)delimiter(")>operator(,)
delimiter(})>

ident(data) operator(=) map<delimiter({)
        map<inline_delimiter({)string<delimiter(")content(1:1)delimiter(")>operator(,) string<delimiter(")content(1:2)delimiter(")>operator(,) string<delimiter(")content(1:3)delimiter(")>inline_delimiter(})>operator(,) 
        map<inline_delimiter({)string<delimiter(")content(2:1)delimiter(")>operator(,) string<delimiter(")content(2:2)delimiter(")>operator(,) string<delimiter(")content(2:3)delimiter(")>inline_delimiter(})>operator(,) 
        map<inline_delimiter({)string<delimiter(")content(3:1)delimiter(")>operator(,) string<delimiter(")content(3:2)delimiter(")>operator(,) string<delimiter(")content(3:3)delimiter(")>inline_delimiter(})>operator(,) 
       delimiter(})>

keyword(function) ident(matrix:)function(value_cb)operator(()ident(l)operator(,) ident(c)operator(\)) 
  keyword(if) ident(l) operator(=)operator(=) integer(0) keyword(or) ident(c) operator(=)operator(=) integer(0) keyword(then)
    keyword(return) string<delimiter(")content(title)delimiter(")>
  keyword(end)
  keyword(return) ident(data)operator([)ident(l)operator(])operator([)ident(c)operator(])
keyword(end)

keyword(function) ident(matrix:)function(value_edit_cb)operator(()ident(l)operator(,) ident(c)operator(,) ident(newvalue)operator(\))
  ident(data)operator([)ident(l)operator(])operator([)ident(c)operator(]) operator(=) ident(newvalue)
keyword(end)

ident(dlg)operator(=)ident(iup)operator(.)ident(dialog)map<delimiter({)ident(matrix)operator(;) key(title)operator(=)string<delimiter(")content(IupMatrix in Callback Mode)delimiter(")> delimiter(})>
ident(dlg)operator(:)ident(show)operator(()operator(\))

ident(bt) operator(=) ident(iup)operator(.)ident(button)map<delimiter({)key(title)operator(=)string<delimiter(")content(Test)delimiter(")>delimiter(})>
ident(bt)operator(.)ident(expand) operator(=) string<delimiter(")content(YES)delimiter(")>
ident(box) operator(=) ident(iup)operator(.)ident(sbox)map<delimiter({)ident(bt)delimiter(})>
ident(box)operator(.)ident(direction) operator(=) string<delimiter(")content(SOUTH)delimiter(")>
ident(box)operator(.)ident(color) operator(=) string<delimiter(")content(0 0 255)delimiter(")>

ident(ml) operator(=) ident(iup)operator(.)ident(multiline)map<delimiter({)delimiter(})>
ident(ml)operator(.)ident(expand) operator(=) string<delimiter(")content(YES)delimiter(")>
ident(vbox) operator(=) ident(iup)operator(.)ident(vbox)map<delimiter({)ident(box)operator(,) ident(ml)delimiter(})>

ident(lb) operator(=) ident(iup)operator(.)ident(label)map<delimiter({)key(title)operator(=)string<delimiter(")content(Label)delimiter(")>delimiter(})>
ident(lb)operator(.)ident(expand) operator(=) string<delimiter(")content(YES)delimiter(")>
ident(dg) operator(=) ident(iup)operator(.)ident(dialog)map<delimiter({)ident(iup)operator(.)ident(hbox)map<inline_delimiter({)ident(vbox)operator(,) ident(lb)inline_delimiter(})>delimiter(})>
ident(dg)operator(:)ident(show)operator(()operator(\))
comment(--IupSpeech Example in Lua)

ident(label) operator(=) ident(iuplabel)map<delimiter({)key(title)operator(=)string<delimiter(")content(Possible commands are defined in xml1.xml)delimiter(")>delimiter(})>
ident(text) operator(=) ident(iuptext) map<delimiter({)key(size)operator(=)string<delimiter(")content(200)delimiter(")>delimiter(})>

keyword(function) function(reco)operator(()ident(self)operator(,) ident(msg)operator(\))
  ident(text)operator(.)ident(value) operator(=) ident(msg)
keyword(end)

ident(sk) operator(=) ident(iupspeech)map<delimiter({)key(action)operator(=)ident(reco)operator(,) key(grammar)operator(=)string<delimiter(")content(xml1.xml)delimiter(")>operator(,) key(say)operator(=)string<delimiter(")content(xml1 loaded)delimiter(")>delimiter(})>

ident(dg) operator(=) ident(iupdialog)map<delimiter({)ident(iupvbox)map<inline_delimiter({)ident(label)operator(,) ident(text)inline_delimiter(})>operator(;) key(title) operator(=) string<delimiter(")content(IupSpeech Test)delimiter(")>delimiter(})>
ident(dg)operator(:)ident(show)operator(()operator(\))
comment(-- Creates boxes)
ident(vboxA) operator(=) ident(iup)operator(.)ident(vbox)map<delimiter({)ident(iup)operator(.)ident(label)map<inline_delimiter({)key(title)operator(=)string<delimiter(")content(TABS AAA)delimiter(")>inline_delimiter(})>operator(,) ident(iup)operator(.)ident(button)map<inline_delimiter({)key(title)operator(=)string<delimiter(")content(AAA)delimiter(")>inline_delimiter(})>delimiter(})>
ident(vboxB) operator(=) ident(iup)operator(.)ident(vbox)map<delimiter({)ident(iup)operator(.)ident(label)map<inline_delimiter({)key(title)operator(=)string<delimiter(")content(TABS BBB)delimiter(")>inline_delimiter(})>operator(,) ident(iup)operator(.)ident(button)map<inline_delimiter({)key(title)operator(=)string<delimiter(")content(BBB)delimiter(")>inline_delimiter(})>delimiter(})>

comment(-- Sets titles of the vboxes)
ident(vboxA)operator(.)ident(tabtitle) operator(=) string<delimiter(")content(AAAAAA)delimiter(")>
ident(vboxB)operator(.)ident(tabtitle) operator(=) string<delimiter(")content(BBBBBB)delimiter(")>

comment(-- Creates tabs )
ident(tabs) operator(=) ident(iup)operator(.)ident(tabs)map<delimiter({)ident(vboxA)operator(,) ident(vboxB)delimiter(})>

comment(-- Creates dialog)
ident(dlg) operator(=) ident(iup)operator(.)ident(dialog)map<delimiter({)ident(tabs)operator(;) key(title)operator(=)string<delimiter(")content(Test IupTabs)delimiter(")>operator(,) key(size)operator(=)string<delimiter(")content(200x80)delimiter(")>delimiter(})>

comment(-- Shows dialog in the center of the screen)
ident(dlg)operator(:)ident(showxy)operator(()ident(iup)operator(.)ident(CENTER)operator(,) ident(iup)operator(.)ident(CENTER)operator(\))comment(-- IupTree Example in IupLua )
comment(-- Creates a tree with some branches and leaves. )
comment(-- Two callbacks are registered: one deletes marked nodes when the Del key )
comment(-- is pressed, and the other, called when the right mouse button is pressed, )
comment(-- opens a menu with options. )

ident(tree) operator(=) ident(iup)operator(.)ident(tree)map<delimiter({)delimiter(})>

comment(-- Creates rename dialog)
ident(ok)     operator(=) ident(iup)operator(.)ident(button)map<delimiter({)key(title) operator(=) string<delimiter(")content(OK)delimiter(")>operator(,)key(size)operator(=)string<delimiter(")content(EIGHTH)delimiter(")>delimiter(})>
ident(cancel) operator(=) ident(iup)operator(.)ident(button)map<delimiter({)key(title) operator(=) string<delimiter(")content(Cancel)delimiter(")>operator(,)key(size)operator(=)string<delimiter(")content(EIGHTH)delimiter(")>delimiter(})>

ident(text)   operator(=) ident(iup)operator(.)ident(text)map<delimiter({)key(border)operator(=)string<delimiter(")content(YES)delimiter(")>operator(,)key(expand)operator(=)string<delimiter(")content(YES)delimiter(")>delimiter(})>
ident(dlg_rename) operator(=) ident(iup)operator(.)ident(dialog)map<delimiter({)ident(iup)operator(.)ident(vbox)map<inline_delimiter({)ident(text)operator(,)ident(iup)operator(.)ident(hbox)map<inline_delimiter({)ident(ok)operator(,)ident(cancel)inline_delimiter(})>inline_delimiter(})>operator(;) 
   key(defaultenter)operator(=)ident(ok)operator(,)
   key(defaultesc)operator(=)ident(cancel)operator(,)
   key(title)operator(=)string<delimiter(")content(Enter node's name)delimiter(")>operator(,)
   key(size)operator(=)string<delimiter(")content(QUARTER)delimiter(")>operator(,)
   key(startfocus)operator(=)ident(text)delimiter(})>

comment(-- Creates menu displayed when the right mouse button is pressed)
ident(addleaf) operator(=) ident(iup)operator(.)ident(item) map<delimiter({)key(title) operator(=) string<delimiter(")content(Add Leaf)delimiter(")>delimiter(})>
ident(addbranch) operator(=) ident(iup)operator(.)ident(item) map<delimiter({)key(title) operator(=) string<delimiter(")content(Add Branch)delimiter(")>delimiter(})>
ident(renamenode) operator(=) ident(iup)operator(.)ident(item) map<delimiter({)key(title) operator(=) string<delimiter(")content(Rename Node)delimiter(")>delimiter(})>
ident(menu) operator(=) ident(iup)operator(.)ident(menu)map<delimiter({)ident(addleaf)operator(,) ident(addbranch)operator(,) ident(renamenode)delimiter(})>

comment(-- Callback of the right mouse button click)
keyword(function) ident(tree:)function(rightclick_cb)operator(()ident(id)operator(\))
  ident(tree)operator(.)ident(value) operator(=) ident(id)
  ident(menu)operator(:)ident(popup)operator(()ident(iup)operator(.)ident(MOUSEPOS)operator(,)ident(iup)operator(.)ident(MOUSEPOS)operator(\))
  keyword(return) ident(iup)operator(.)ident(DEFAULT)
keyword(end)

comment(-- Callback called when a node will be renamed)
keyword(function) ident(tree:)function(renamenode_cb)operator(()ident(id)operator(\))
  ident(text)operator(.)ident(value) operator(=) ident(tree)operator(.)ident(name)

  ident(dlg_rename)operator(:)ident(popup)operator(()ident(iup)operator(.)ident(CENTER)operator(,) ident(iup)operator(.)ident(CENTER)operator(\))
  ident(iup)operator(.)ident(SetFocus)operator(()ident(tree)operator(\))
  
  keyword(return) ident(iup)operator(.)ident(DEFAULT)
keyword(end)

comment(-- Callback called when the rename operation is cancelled)
keyword(function) ident(cancel:)function(action)operator(()operator(\))
  keyword(return) ident(iup)operator(.)ident(CLOSE)
keyword(end)

comment(-- Callback called when the rename operation is confirmed)
keyword(function) ident(ok:)function(action)operator(()operator(\))
  ident(tree)operator(.)ident(name) operator(=) ident(text)operator(.)ident(value)

  keyword(return) ident(iup)operator(.)ident(CLOSE)
keyword(end)

keyword(function) ident(tree:)function(k_any)operator(()ident(c)operator(\))
  keyword(if) ident(c) operator(=)operator(=) integer(339) keyword(then) ident(tree)operator(.)ident(delnode) operator(=) string<delimiter(")content(MARKED)delimiter(")> keyword(end)
  keyword(return) ident(iup)operator(.)ident(DEFAULT)
keyword(end)

comment(-- Callback called when a leaf is added)
keyword(function) ident(addleaf:)function(action)operator(()operator(\))
  ident(tree)operator(.)ident(addleaf) operator(=) string<delimiter(")delimiter(")>
  ident(tree)operator(.)ident(redraw) operator(=) string<delimiter(")content(YES)delimiter(")>
  keyword(return) ident(iup)operator(.)ident(DEFAULT)
keyword(end)

comment(-- Callback called when a branch is added)
keyword(function) ident(addbranch:)function(action)operator(()operator(\))
  ident(tree)operator(.)ident(addbranch) operator(=) string<delimiter(")delimiter(")>
  ident(tree)operator(.)ident(redraw) operator(=) string<delimiter(")content(YES)delimiter(")>
  keyword(return) ident(iup)operator(.)ident(DEFAULT)
keyword(end)

comment(-- Callback called when a branch will be renamed)
keyword(function) ident(renamenode:)function(action)operator(()operator(\))
  ident(tree)operator(:)ident(renamenode_cb)operator(()ident(tree)operator(.)ident(value)operator(\))
  ident(tree)operator(.)ident(redraw) operator(=) string<delimiter(")content(YES)delimiter(")>
  keyword(return) ident(iup)operator(.)ident(DEFAULT)
keyword(end)

keyword(function) function(init_tree_atributes)operator(()operator(\))
  ident(tree)operator(.)ident(font) operator(=) string<delimiter(")content(COURIER_NORMAL_10)delimiter(")>
  ident(tree)operator(.)ident(name) operator(=) string<delimiter(")content(Figures)delimiter(")>
  ident(tree)operator(.)ident(addbranch) operator(=) string<delimiter(")content(3D)delimiter(")>
  ident(tree)operator(.)ident(addbranch) operator(=) string<delimiter(")content(2D)delimiter(")>
  ident(tree)operator(.)ident(addbranch1) operator(=) string<delimiter(")content(parallelogram)delimiter(")>
  ident(tree)operator(.)ident(addleaf2) operator(=) string<delimiter(")content(diamond)delimiter(")>
  ident(tree)operator(.)ident(addleaf2) operator(=) string<delimiter(")content(square)delimiter(")>
  ident(tree)operator(.)ident(addbranch1) operator(=) string<delimiter(")content(triangle)delimiter(")>
  ident(tree)operator(.)ident(addleaf2) operator(=) string<delimiter(")content(scalenus)delimiter(")>
  ident(tree)operator(.)ident(addleaf2) operator(=) string<delimiter(")content(isoceles)delimiter(")>
  ident(tree)operator(.)ident(value) operator(=) string<delimiter(")content(6)delimiter(")>
  ident(tree)operator(.)ident(ctrl) operator(=) string<delimiter(")content(YES)delimiter(")>
  ident(tree)operator(.)ident(shift) operator(=) string<delimiter(")content(YES)delimiter(")>
  ident(tree)operator(.)ident(addexpanded) operator(=) string<delimiter(")content(NO)delimiter(")>
  ident(tree)operator(.)ident(redraw) operator(=) string<delimiter(")content(YES)delimiter(")>
keyword(end)

ident(dlg) operator(=) ident(iup)operator(.)ident(dialog)map<delimiter({)ident(tree)operator(;) key(title) operator(=) string<delimiter(")content(IupTree)delimiter(")>operator(,) key(size) operator(=) string<delimiter(")content(QUARTERxTHIRD)delimiter(")>delimiter(})> 
ident(dlg)operator(:)ident(showxy)operator(()ident(iup)operator(.)ident(CENTER)operator(,)ident(iup)operator(.)ident(CENTER)operator(\))
ident(init_tree_atributes)operator(()operator(\))comment(--IupTree Example in IupLua)
comment(--Creates a tree with some branches and leaves. Uses a Lua Table to define the IupTree structure.)

ident(tree) operator(=) ident(iup)operator(.)ident(tree)map<delimiter({)delimiter(})>
ident(dlg) operator(=) ident(iup)operator(.)ident(dialog)map<delimiter({)ident(tree) operator(;) key(title) operator(=) string<delimiter(")content(TableTree result)delimiter(")>operator(,) key(size) operator(=) string<delimiter(")content(200x200)delimiter(")>delimiter(})>
ident(dlg)operator(:)ident(showxy)operator(()ident(iup)operator(.)ident(CENTER)operator(,)ident(iup)operator(.)ident(CENTER)operator(\))

ident(t) operator(=) map<delimiter({)
  map<inline_delimiter({)
    string<delimiter(")content(Horse)delimiter(")>operator(,)
    string<delimiter(")content(Whale)delimiter(")>operator(;)
    key(branchname) operator(=) string<delimiter(")content(Mammals)delimiter(")>
  inline_delimiter(})>operator(,)
  map<inline_delimiter({)
    string<delimiter(")content(Shrimp)delimiter(")>operator(,)
    string<delimiter(")content(Lobster)delimiter(")>operator(;)
    key(branchname) operator(=) string<delimiter(")content(Crustaceans)delimiter(")>
  inline_delimiter(})>operator(;)
  key(branchname) operator(=) string<delimiter(")content(Animals)delimiter(")>
delimiter(})>
ident(iup)operator(.)ident(TreeSetValue)operator(()ident(tree)operator(,) ident(t)operator(\))

ident(tree)operator(.)ident(redraw) operator(=) string<delimiter(")content(YES)delimiter(")>
comment(-- IupTree Example in IupLua )
comment(-- Creates a tree with some branches and leaves. )
comment(-- Two callbacks are registered: one deletes marked nodes when the Del key )
comment(-- is pressed, and the other, called when the right mouse button is pressed, )
comment(-- opens a menu with options. )


ident(tree) operator(=) ident(iup)operator(.)ident(tree)map<delimiter({)delimiter(})>


keyword(function) ident(tree:)function(showrename_cb)operator(()ident(id)operator(\))
  predefined(print)operator(()string<delimiter(")content(SHOWRENAME)delimiter(")>operator(\))
  keyword(return) ident(iup)operator(.)ident(DEFAULT)
keyword(end)
comment(-- Callback called when a node will be renamed)
keyword(function) ident(tree:)function(renamenode_cb)operator(()ident(id)operator(\))
  predefined(print)operator(()string<delimiter(")content(RENAMENODE)delimiter(")>operator(\))
  keyword(return) ident(iup)operator(.)ident(DEFAULT)
keyword(end)


keyword(function) ident(tree:)function(k_any)operator(()ident(c)operator(\))
  keyword(if) ident(c) operator(=)operator(=) integer(316) keyword(then) ident(tree)operator(.)ident(delnode) operator(=) string<delimiter(")content(MARKED)delimiter(")> keyword(end)
  keyword(return) ident(iup)operator(.)ident(DEFAULT)
keyword(end)


keyword(function) function(init_tree_atributes)operator(()operator(\))
  ident(tree)operator(.)ident(font) operator(=) string<delimiter(")content(COURIER_NORMAL_10)delimiter(")>
  ident(tree)operator(.)ident(name) operator(=) string<delimiter(")content(Figures)delimiter(")>
  ident(tree)operator(.)ident(addbranch) operator(=) string<delimiter(")content(3D)delimiter(")>
  ident(tree)operator(.)ident(addbranch) operator(=) string<delimiter(")content(2D)delimiter(")>
  ident(tree)operator(.)ident(addbranch1) operator(=) string<delimiter(")content(parallelogram)delimiter(")>
  ident(tree)operator(.)ident(addleaf2) operator(=) string<delimiter(")content(diamond)delimiter(")>
  ident(tree)operator(.)ident(addleaf2) operator(=) string<delimiter(")content(square)delimiter(")>
  ident(tree)operator(.)ident(addbranch1) operator(=) string<delimiter(")content(triangle)delimiter(")>
  ident(tree)operator(.)ident(addleaf2) operator(=) string<delimiter(")content(scalenus)delimiter(")>
  ident(tree)operator(.)ident(addleaf2) operator(=) string<delimiter(")content(isoceles)delimiter(")>
  ident(tree)operator(.)ident(value) operator(=) string<delimiter(")content(6)delimiter(")>
  ident(tree)operator(.)ident(ctrl) operator(=) string<delimiter(")content(YES)delimiter(")>
  ident(tree)operator(.)ident(shift) operator(=) string<delimiter(")content(YES)delimiter(")>
  ident(tree)operator(.)ident(addexpanded) operator(=) string<delimiter(")content(NO)delimiter(")>
  ident(tree)operator(.)ident(redraw) operator(=) string<delimiter(")content(YES)delimiter(")>
  ident(tree)operator(.)ident(showrename) operator(=) string<delimiter(")content(NO)delimiter(")>
keyword(end)


ident(dlg) operator(=) ident(iup)operator(.)ident(dialog)map<delimiter({)ident(tree)operator(;) key(title) operator(=) string<delimiter(")content(IupTree)delimiter(")>operator(,) key(size) operator(=) string<delimiter(")content(QUARTERxTHIRD)delimiter(")>delimiter(})> 
ident(dlg)operator(:)ident(showxy)operator(()ident(iup)operator(.)ident(CENTER)operator(,)ident(iup)operator(.)ident(CENTER)operator(\))
ident(init_tree_atributes)operator(()operator(\))comment(-- IupVal Example in IupLua )
comment(-- Creates two Valuator controls, exemplifying the two possible types. )
comment(-- When manipulating the Valuator, the label's value changes.)

keyword(if) keyword(not) ident(string) keyword(then)
  ident(string) operator(=) map<delimiter({)delimiter(})>
  ident(string)operator(.)ident(format) operator(=) ident(format)
keyword(end)

keyword(function) function(fbuttonpress)operator(()ident(self)operator(\))
  keyword(if)operator(()ident(self)operator(.)predefined(type) operator(=)operator(=) string<delimiter(")content(VERTICAL)delimiter(")>operator(\)) keyword(then)
    ident(lbl_v)operator(.)ident(fgcolor) operator(=) string<delimiter(")content(255 0 0)delimiter(")>
  keyword(else)
    ident(lbl_h)operator(.)ident(fgcolor) operator(=) string<delimiter(")content(255 0 0)delimiter(")>
  keyword(end)
  keyword(return) ident(iup)operator(.)ident(DEFAULT)
keyword(end)

keyword(function) function(fbuttonrelease)operator(()ident(self)operator(\))
  keyword(if)operator(()ident(self)operator(.)predefined(type) operator(=)operator(=) string<delimiter(")content(VERTICAL)delimiter(")>operator(\)) keyword(then)
    ident(lbl_v)operator(.)ident(fgcolor) operator(=) string<delimiter(")content(0 0 0)delimiter(")>
  keyword(else)
    ident(lbl_h)operator(.)ident(fgcolor) operator(=) string<delimiter(")content(0 0 0)delimiter(")>
  keyword(end)
  keyword(return) ident(iup)operator(.)ident(DEFAULT)
keyword(end)

keyword(function) function(fmousemove)operator(()ident(self)operator(,) ident(val)operator(\))
  keyword(local) local_variable(buffer) operator(=) string<delimiter(")content(iup.VALUE=)delimiter(")>operator(.)operator(.)ident(string)operator(.)ident(format)operator(()string<delimiter(')content(%.2f)delimiter(')>operator(,) ident(val)operator(\))
  keyword(if) operator(()ident(self)operator(.)predefined(type) operator(=)operator(=) string<delimiter(")content(VERTICAL)delimiter(")>operator(\)) keyword(then)
    ident(lbl_v)operator(.)ident(title)operator(=)ident(buffer)
  keyword(else)
    ident(lbl_h)operator(.)ident(title)operator(=)ident(buffer)
  keyword(end)
  keyword(return) ident(iup)operator(.)ident(DEFAULT)
keyword(end)

ident(val_v) operator(=) ident(iup)operator(.)ident(val)map<delimiter({)string<delimiter(")content(VERTICAL)delimiter(")>operator(;) key(min)operator(=)integer(0)operator(,) key(max)operator(=)integer(1)operator(,)	key(value)operator(=)string<delimiter(")content(0.3)delimiter(")>operator(,) 
    key(mousemove_cb)operator(=)ident(fmousemove)operator(,)
		key(button_press_cb)operator(=)ident(fbuttonpress)operator(,)
		key(button_release_cb)operator(=)ident(fbuttonrelease)
delimiter(})>

ident(lbl_v) operator(=) ident(iup)operator(.)ident(label)map<delimiter({)key(title)operator(=)string<delimiter(")content(VALUE=   )delimiter(")>operator(,) key(size)operator(=)integer(70)operator(,) key(type)operator(=)string<delimiter(")content(1)delimiter(")>delimiter(})>

ident(val_h) operator(=) ident(iup)operator(.)ident(val)map<delimiter({)string<delimiter(")content(HORIZONTAL)delimiter(")>operator(;) key(min)operator(=)integer(0)operator(,) key(max)operator(=)integer(1)operator(,)	key(value)operator(=)integer(0)operator(,)	
    key(mousemove_cb)operator(=)ident(fmousemove)operator(,)
		key(button_press_cb)operator(=)ident(fbuttonpress)operator(,)
		key(button_release_cb)operator(=)ident(fbuttonrelease)
delimiter(})>

ident(lbl_h) operator(=) ident(iup)operator(.)ident(label)map<delimiter({)key(title)operator(=)string<delimiter(")content(VALUE=   )delimiter(")>operator(,) key(size)operator(=)integer(70)operator(,) key(type)operator(=)string<delimiter(")content(2)delimiter(")>delimiter(})>

ident(dlg_val) operator(=) ident(iup)operator(.)ident(dialog)
map<delimiter({)
	ident(iup)operator(.)ident(hbox)
	map<inline_delimiter({)
		ident(iup)operator(.)ident(frame)
		map<inline_delimiter({)
			ident(iup)operator(.)ident(vbox)
			map<inline_delimiter({)
				ident(val_v)operator(,)
				ident(lbl_v)
			inline_delimiter(})>
		inline_delimiter(})>operator(,)
		ident(iup)operator(.)ident(frame)
		map<inline_delimiter({)
			ident(iup)operator(.)ident(vbox)
			map<inline_delimiter({)
				ident(val_h)operator(,)
				ident(lbl_h)
			inline_delimiter(})>
		inline_delimiter(})>
	inline_delimiter(})>operator(;)
	key(title)operator(=)string<delimiter(")content(Valuator Test)delimiter(")>
delimiter(})>

ident(dlg_val)operator(:)ident(show)operator(()operator(\))

comment(-- IupAlarm Example in IupLua )
comment(-- Shows a dialog similar to the one shown when you exit a program )
comment(-- without saving. )

ident(b) operator(=) ident(iup)operator(.)ident(Alarm)operator(()string<delimiter(")content(IupAlarm Example)delimiter(")>operator(,) string<delimiter(")content(File not saved! Save it now?)delimiter(")> operator(,)string<delimiter(")content(Yes)delimiter(")> operator(,)string<delimiter(")content(No)delimiter(")> operator(,)string<delimiter(")content(Cancel)delimiter(")>operator(\))
  
comment(-- Shows a message for each selected button)
keyword(if) ident(b) operator(=)operator(=) integer(1) keyword(then) 
  ident(iup)operator(.)ident(Message)operator(()string<delimiter(")content(Save file)delimiter(")>operator(,) string<delimiter(")content(File saved sucessfully - leaving program)delimiter(")>operator(\))
keyword(elseif) ident(b) operator(=)operator(=) integer(2) keyword(then) 
  ident(iup)operator(.)ident(Message)operator(()string<delimiter(")content(Save file)delimiter(")>operator(,) string<delimiter(")content(File not saved - leaving program anyway)delimiter(")>operator(\))
keyword(elseif) ident(b) operator(=)operator(=) integer(3) keyword(then) 
  ident(iup)operator(.)ident(Message)operator(()string<delimiter(")content(Save file)delimiter(")>operator(,) string<delimiter(")content(Operation canceled)delimiter(")>operator(\)) 
keyword(end)comment(-- IupFileDlg Example in IupLua )
comment(-- Shows a typical file-saving dialog. )

comment(-- Creates a file dialog and sets its type, title, filter and filter info)
ident(filedlg) operator(=) ident(iup)operator(.)ident(filedlg)map<delimiter({)key(dialogtype) operator(=) string<delimiter(")content(SAVE)delimiter(")>operator(,) key(title) operator(=) string<delimiter(")content(File save)delimiter(")>operator(,) 
                      key(filter) operator(=) string<delimiter(")content(*.bmp)delimiter(")>operator(,) key(filterinfo) operator(=) string<delimiter(")content(Bitmap files)delimiter(")>operator(,)
                      key(directory)operator(=)string<delimiter(")content(c:)char(\\\\)content(windows)delimiter(")>delimiter(})> 

comment(-- Shows file dialog in the center of the screen)
ident(filedlg)operator(:)ident(popup) operator(()ident(iup)operator(.)ident(ANYWHERE)operator(,) ident(iup)operator(.)ident(ANYWHERE)operator(\))

comment(-- Gets file dialog status)
ident(status) operator(=) ident(filedlg)operator(.)ident(status)

keyword(if) ident(status) operator(=)operator(=) string<delimiter(")content(1)delimiter(")> keyword(then) 
  ident(iup)operator(.)ident(Message)operator(()string<delimiter(")content(New file)delimiter(")>operator(,)ident(filedlg)operator(.)ident(value)operator(\))
keyword(elseif) ident(status) operator(=)operator(=) string<delimiter(")content(0)delimiter(")> keyword(then) 
  ident(iup)operator(.)ident(Message)operator(()string<delimiter(")content(File already exists)delimiter(")>operator(,) ident(filedlg)operator(.)ident(value)operator(\))
keyword(elseif) ident(status) operator(=)operator(=) string<delimiter(")content(-1)delimiter(")> keyword(then) 
  ident(iup)operator(.)ident(Message)operator(()string<delimiter(")content(IupFileDlg)delimiter(")>operator(,)string<delimiter(")content(Operation canceled)delimiter(")>operator(\))
keyword(end)comment(-- IupGetFile Example in IupLua )
comment(-- Shows a typical file-selection dialog. )

ident(iup)operator(.)ident(SetLanguage)operator(()string<delimiter(")content(ENGLISH)delimiter(")>operator(\))
ident(f)operator(,) ident(err) operator(=) ident(iup)operator(.)ident(GetFile)operator(()string<delimiter(")content(*.txt)delimiter(")>operator(\))
keyword(if) ident(err) operator(=)operator(=) integer(1) keyword(then) 
  ident(iup)operator(.)ident(Message)operator(()string<delimiter(")content(New file)delimiter(")>operator(,) ident(f)operator(\))
keyword(elseif) ident(err) operator(=)operator(=) integer(0) keyword(then) 
  ident(iup)operator(.)ident(Message)operator(()string<delimiter(")content(File already exists)delimiter(")>operator(,) ident(f)operator(\))	    
keyword(elseif) ident(err) operator(=)operator(=) integer(-1) keyword(then) 
  ident(iup)operator(.)ident(Message)operator(()string<delimiter(")content(IupFileDlg)delimiter(")>operator(,) string<delimiter(")content(Operation canceled)delimiter(")>operator(\))
keyword(elseif) ident(err) operator(=)operator(=) integer(-2) keyword(then) 
  ident(iup)operator(.)ident(Message)operator(()string<delimiter(")content(IupFileDlg)delimiter(")>operator(,) string<delimiter(")content(Allocation errr)delimiter(")>operator(\))
keyword(elseif) ident(err) operator(=)operator(=) integer(-3) keyword(then) 
  ident(iup)operator(.)ident(Message)operator(()string<delimiter(")content(IupFileDlg)delimiter(")>operator(,) string<delimiter(")content(Invalid parameter)delimiter(")>operator(\))
keyword(end)comment(-- IupListDialog Example in IupLua )
comment(-- Shows a color-selection dialog. )

ident(iup)operator(.)ident(SetLanguage)operator(()string<delimiter(")content(ENGLISH)delimiter(")>operator(\))
ident(size) operator(=) integer(8) 
ident(marks) operator(=) map<delimiter({) integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(1)operator(,)integer(1)operator(,)integer(0)operator(,)integer(0) delimiter(})>
ident(options) operator(=) map<delimiter({)string<delimiter(")content(Blue)delimiter(")>operator(,) string<delimiter(")content(Red)delimiter(")>operator(,) string<delimiter(")content(Green)delimiter(")>operator(,) string<delimiter(")content(Yellow)delimiter(")>operator(,) string<delimiter(")content(Black)delimiter(")>operator(,) string<delimiter(")content(White)delimiter(")>operator(,) string<delimiter(")content(Gray)delimiter(")>operator(,) string<delimiter(")content(Brown)delimiter(")>delimiter(})> 
	  
predefined(error) operator(=) ident(iup)operator(.)ident(ListDialog)operator(()integer(2)operator(,)string<delimiter(")content(Color selection)delimiter(")>operator(,)ident(size)operator(,)ident(options)operator(,)integer(0)operator(,)integer(16)operator(,)integer(5)operator(,)ident(marks)operator(\))operator(;)

keyword(if) predefined(error) operator(=)operator(=) integer(-1) keyword(then) 
  ident(iup)operator(.)ident(Message)operator(()string<delimiter(")content(IupListDialog)delimiter(")>operator(,) string<delimiter(")content(Operation canceled)delimiter(")>operator(\))
keyword(else)
  keyword(local) local_variable(selection) operator(=) string<delimiter(")delimiter(")>
  keyword(local) local_variable(i) operator(=) integer(1)
	keyword(while) ident(i) operator(~)operator(=) ident(size)operator(+)integer(1) keyword(do)
    keyword(if) ident(marks)operator([)ident(i)operator(]) operator(~)operator(=) integer(0) keyword(then)
      ident(selection) operator(=) ident(selection) operator(.)operator(.) ident(options)operator([)ident(i)operator(]) operator(.)operator(.) string<delimiter(")char(\\n)delimiter(")>
    keyword(end)
    ident(i) operator(=) ident(i) operator(+) integer(1)
  keyword(end)
  keyword(if) ident(selection) operator(=)operator(=) string<delimiter(")delimiter(")> keyword(then)
    ident(iup)operator(.)ident(Message)operator(()string<delimiter(")content(IupListDialog)delimiter(")>operator(,)string<delimiter(")content(No option selected)delimiter(")>operator(\))
  keyword(else)
    ident(iup)operator(.)ident(Message)operator(()string<delimiter(")content(Selected options)delimiter(")>operator(,)ident(selection)operator(\))
  keyword(end)
keyword(end)comment(-- IupMessage Example in IupLua )
comment(-- Shows a dialog with the message: Click the button. )

ident(iup)operator(.)ident(Message) operator(()string<delimiter(")content(IupMessage)delimiter(")>operator(,) string<delimiter(")content(Press the button)delimiter(")>operator(\))comment(-- IupScanf Example in IupLua )
comment(-- Shows a dialog with three fields to be filled. )
comment(--   One receives a string, the other receives a real number and )
comment(--   the last receives an integer number. )
comment(-- Note: In Lua, the function does not return the number of successfully read characters. )

ident(iup)operator(.)ident(SetLanguage)operator(()string<delimiter(")content(ENGLISH)delimiter(")>operator(\))
keyword(local) local_variable(integer) operator(=) integer(12)
keyword(local) local_variable(real) operator(=) integer(1e-3)
keyword(local) local_variable(text) operator(=)string<delimiter(")content(This is a vector of characters)delimiter(")>
keyword(local) local_variable(fmt) operator(=) string<delimiter(")content(IupScanf)char(\\n)content(Text:%300.40%s)char(\\n)content(Real:%20.10%g)char(\\n)content(Integer:%20.10%d)char(\\n)delimiter(")>

ident(text)operator(,) ident(real)operator(,) ident(integer) operator(=) ident(iup)operator(.)ident(Scanf) operator(()ident(fmt)operator(,) ident(text)operator(,) ident(real)operator(,) ident(integer)operator(\))

keyword(if) ident(text) keyword(then)
  keyword(local) local_variable(string) operator(=) string<delimiter(")content(Text: )delimiter(")>operator(.)operator(.)ident(text)operator(.)operator(.)string<delimiter(")char(\\n)content(Real: )delimiter(")>operator(.)operator(.)ident(real)operator(.)operator(.)string<delimiter(")char(\\n)content(Integer: )delimiter(")>operator(.)operator(.)ident(integer)
  ident(iup)operator(.)ident(Message)operator(()string<delimiter(")content(IupScanf)delimiter(")>operator(,) ident(string)operator(\))
keyword(else)
  ident(iup)operator(.)ident(Message)operator(()string<delimiter(")content(IupScanf)delimiter(")>operator(,) string<delimiter(")content(Operation canceled)delimiter(")>operator(\))operator(;)
keyword(end)
comment(-- Creates four buttons. The first uses images, the second turns the first)
comment(-- on and off, the third exits the application and the last does nothing)

comment(-- defines released button image)
ident(img_release) operator(=) ident(iup)operator(.)ident(image) map<delimiter({)
      map<inline_delimiter({)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)inline_delimiter(})>operator(,)
      map<inline_delimiter({)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(2)inline_delimiter(})>operator(,)
      map<inline_delimiter({)integer(1)operator(,)integer(1)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(2)operator(,)integer(2)inline_delimiter(})>operator(,)
      map<inline_delimiter({)integer(1)operator(,)integer(1)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(2)operator(,)integer(2)inline_delimiter(})>operator(,)
      map<inline_delimiter({)integer(1)operator(,)integer(1)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(2)operator(,)integer(2)inline_delimiter(})>operator(,)
      map<inline_delimiter({)integer(1)operator(,)integer(1)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(2)operator(,)integer(2)inline_delimiter(})>operator(,)
      map<inline_delimiter({)integer(1)operator(,)integer(1)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(2)operator(,)integer(2)inline_delimiter(})>operator(,)
      map<inline_delimiter({)integer(1)operator(,)integer(1)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(4)operator(,)integer(4)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(2)operator(,)integer(2)inline_delimiter(})>operator(,)
      map<inline_delimiter({)integer(1)operator(,)integer(1)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(4)operator(,)integer(4)operator(,)integer(4)operator(,)integer(4)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(2)operator(,)integer(2)inline_delimiter(})>operator(,)
      map<inline_delimiter({)integer(1)operator(,)integer(1)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(4)operator(,)integer(4)operator(,)integer(4)operator(,)integer(4)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(2)operator(,)integer(2)inline_delimiter(})>operator(,)
      map<inline_delimiter({)integer(1)operator(,)integer(1)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(4)operator(,)integer(4)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(2)operator(,)integer(2)inline_delimiter(})>operator(,)
      map<inline_delimiter({)integer(1)operator(,)integer(1)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(2)operator(,)integer(2)inline_delimiter(})>operator(,)
      map<inline_delimiter({)integer(1)operator(,)integer(1)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(2)operator(,)integer(2)inline_delimiter(})>operator(,)
      map<inline_delimiter({)integer(1)operator(,)integer(1)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(2)operator(,)integer(2)inline_delimiter(})>operator(,)
      map<inline_delimiter({)integer(1)operator(,)integer(1)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(2)operator(,)integer(2)inline_delimiter(})>operator(,)
      map<inline_delimiter({)integer(1)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)inline_delimiter(})>operator(,)
      map<inline_delimiter({)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)inline_delimiter(})>operator(;)
      key(colors) operator(=) map<inline_delimiter({) string<delimiter(")content(215 215 215)delimiter(")>operator(,) string<delimiter(")content(40 40 40)delimiter(")>operator(,) string<delimiter(")content(30 50 210)delimiter(")>operator(,) string<delimiter(")content(240 0 0)delimiter(")> inline_delimiter(})>
delimiter(})>

comment(-- defines pressed button image)
ident(img_press) operator(=) ident(iup)operator(.)ident(image) map<delimiter({)
      map<inline_delimiter({)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)inline_delimiter(})>operator(,)
      map<inline_delimiter({)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(2)inline_delimiter(})>operator(,)
      map<inline_delimiter({)integer(1)operator(,)integer(1)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(2)operator(,)integer(2)inline_delimiter(})>operator(,)
      map<inline_delimiter({)integer(1)operator(,)integer(1)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(2)operator(,)integer(2)inline_delimiter(})>operator(,)
      map<inline_delimiter({)integer(1)operator(,)integer(1)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(2)operator(,)integer(2)inline_delimiter(})>operator(,)
      map<inline_delimiter({)integer(1)operator(,)integer(1)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(2)operator(,)integer(2)inline_delimiter(})>operator(,)
      map<inline_delimiter({)integer(1)operator(,)integer(1)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(4)operator(,)integer(4)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(2)operator(,)integer(2)inline_delimiter(})>operator(,)
      map<inline_delimiter({)integer(1)operator(,)integer(1)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(4)operator(,)integer(4)operator(,)integer(4)operator(,)integer(4)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(2)operator(,)integer(2)inline_delimiter(})>operator(,)
      map<inline_delimiter({)integer(1)operator(,)integer(1)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(4)operator(,)integer(4)operator(,)integer(4)operator(,)integer(4)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(2)operator(,)integer(2)inline_delimiter(})>operator(,)
      map<inline_delimiter({)integer(1)operator(,)integer(1)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(4)operator(,)integer(4)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(2)operator(,)integer(2)inline_delimiter(})>operator(,)
      map<inline_delimiter({)integer(1)operator(,)integer(1)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(2)operator(,)integer(2)inline_delimiter(})>operator(,)
      map<inline_delimiter({)integer(1)operator(,)integer(1)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(2)operator(,)integer(2)inline_delimiter(})>operator(,)
      map<inline_delimiter({)integer(1)operator(,)integer(1)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(2)operator(,)integer(2)inline_delimiter(})>operator(,)
      map<inline_delimiter({)integer(1)operator(,)integer(1)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(2)operator(,)integer(2)inline_delimiter(})>operator(,)
      map<inline_delimiter({)integer(1)operator(,)integer(1)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(2)operator(,)integer(2)inline_delimiter(})>operator(,)
      map<inline_delimiter({)integer(1)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)inline_delimiter(})>operator(,)
      map<inline_delimiter({)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)inline_delimiter(})>operator(;)
      key(colors) operator(=) map<inline_delimiter({) string<delimiter(")content(40 40 40)delimiter(")>operator(,) string<delimiter(")content(215 215 215)delimiter(")>operator(,) string<delimiter(")content(0 20 180)delimiter(")>operator(,) string<delimiter(")content(210 0 0)delimiter(")> inline_delimiter(})>
delimiter(})>

comment(-- defines deactivated button image)
ident(img_inactive) operator(=) ident(iup)operator(.)ident(image) map<delimiter({)
      map<inline_delimiter({)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)inline_delimiter(})>operator(,)
      map<inline_delimiter({)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(2)inline_delimiter(})>operator(,)
      map<inline_delimiter({)integer(1)operator(,)integer(1)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(2)operator(,)integer(2)inline_delimiter(})>operator(,)
      map<inline_delimiter({)integer(1)operator(,)integer(1)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(2)operator(,)integer(2)inline_delimiter(})>operator(,)
      map<inline_delimiter({)integer(1)operator(,)integer(1)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(2)operator(,)integer(2)inline_delimiter(})>operator(,)
      map<inline_delimiter({)integer(1)operator(,)integer(1)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(2)operator(,)integer(2)inline_delimiter(})>operator(,)
      map<inline_delimiter({)integer(1)operator(,)integer(1)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(2)operator(,)integer(2)inline_delimiter(})>operator(,)
      map<inline_delimiter({)integer(1)operator(,)integer(1)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(4)operator(,)integer(4)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(2)operator(,)integer(2)inline_delimiter(})>operator(,)
      map<inline_delimiter({)integer(1)operator(,)integer(1)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(4)operator(,)integer(4)operator(,)integer(4)operator(,)integer(4)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(2)operator(,)integer(2)inline_delimiter(})>operator(,)
      map<inline_delimiter({)integer(1)operator(,)integer(1)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(4)operator(,)integer(4)operator(,)integer(4)operator(,)integer(4)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(2)operator(,)integer(2)inline_delimiter(})>operator(,)
      map<inline_delimiter({)integer(1)operator(,)integer(1)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(4)operator(,)integer(4)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(2)operator(,)integer(2)inline_delimiter(})>operator(,)
      map<inline_delimiter({)integer(1)operator(,)integer(1)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(2)operator(,)integer(2)inline_delimiter(})>operator(,)
      map<inline_delimiter({)integer(1)operator(,)integer(1)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(2)operator(,)integer(2)inline_delimiter(})>operator(,)
      map<inline_delimiter({)integer(1)operator(,)integer(1)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(2)operator(,)integer(2)inline_delimiter(})>operator(,)
      map<inline_delimiter({)integer(1)operator(,)integer(1)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(2)operator(,)integer(2)inline_delimiter(})>operator(,)
      map<inline_delimiter({)integer(1)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)inline_delimiter(})>operator(,)
      map<inline_delimiter({)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)inline_delimiter(})>operator(;)
      key(colors) operator(=) map<inline_delimiter({) string<delimiter(")content(215 215 215)delimiter(")>operator(,) string<delimiter(")content(40 40 40)delimiter(")>operator(,) string<delimiter(")content(100 100 100)delimiter(")>operator(,) string<delimiter(")content(200 200 200)delimiter(")> inline_delimiter(})>
delimiter(})>

comment(-- creates a text box)
ident(text) operator(=) ident(iup)operator(.)ident(text)map<delimiter({) key(readonly) operator(=) string<delimiter(")content(YES)delimiter(")>operator(,) key(SIZE) operator(=) string<delimiter(")content(EIGHTH)delimiter(")> delimiter(})>

comment(-- creates a button with image)
ident(btn_image) operator(=) ident(iup)operator(.)ident(button)map<delimiter({) key(title) operator(=) string<delimiter(")content(Button with image)delimiter(")>operator(,) key(image) operator(=) ident(img_release)operator(,) key(impress) operator(=) ident(img_press)operator(,) key(iminactive) operator(=) ident(img_inactive) delimiter(})>

comment(-- creates a button)
ident(btn_big) operator(=) ident(iup)operator(.)ident(button)map<delimiter({) key(title) operator(=) string<delimiter(")content(Big useless button)delimiter(")>operator(,) key(size) operator(=) string<delimiter(")content(EIGHTHxEIGHTH)delimiter(")> delimiter(})>

comment(-- creates a button entitled Exit)
ident(btn_exit) operator(=) ident(iup)operator(.)ident(button)map<delimiter({) key(title) operator(=) string<delimiter(")content(Exit)delimiter(")> delimiter(})>

comment(-- creates a button entitled Activate)
ident(btn_on_off) operator(=) ident(iup)operator(.)ident(button)map<delimiter({) key(title) operator(=) string<delimiter(")content(Activate)delimiter(")> delimiter(})>

comment(-- creates a dialog and sets dialog's title and turns off resize, menubox, maximize and minimize)
ident(dlg) operator(=) ident(iup)operator(.)ident(dialog)map<delimiter({) ident(iup)operator(.)ident(vbox)map<inline_delimiter({) ident(iup)operator(.)ident(hbox)map<inline_delimiter({) ident(iup)operator(.)ident(fill)map<inline_delimiter({)inline_delimiter(})>operator(,) ident(btn_image)operator(,) ident(btn_on_off)operator(,) ident(btn_exit)operator(,) ident(iup)operator(.)ident(fill)map<inline_delimiter({)inline_delimiter(})> inline_delimiter(})>operator(,) ident(text)operator(,) ident(btn_big) inline_delimiter(})>operator(;) key(title) operator(=) string<delimiter(")content(IupButton)delimiter(")>operator(,) key(resize) operator(=) string<delimiter(")content(NO)delimiter(")>operator(,) key(menubox) operator(=) string<delimiter(")content(NO)delimiter(")>operator(,) key(maxbox) operator(=) string<delimiter(")content(NO)delimiter(")>operator(,) key(minbox) operator(=) string<delimiter(")content(NO)delimiter(")> delimiter(})>

comment(-- callback called when activate button is activated)
keyword(function) ident(btn_on_off:)function(action)operator(()operator(\))
  keyword(if) ident(btn_image)operator(.)ident(active) operator(=)operator(=) string<delimiter(")content(YES)delimiter(")> keyword(then)
    ident(btn_image)operator(.)ident(active) operator(=) string<delimiter(")content(NO)delimiter(")>
  keyword(else)
    ident(btn_image)operator(.)ident(active) operator(=) string<delimiter(")content(YES)delimiter(")>
  keyword(end)

  keyword(return) ident(iup)operator(.)ident(DEFAULT)
keyword(end)

comment(-- callback called when the button is pressed or released)
keyword(function) ident(btn_image:)function(button)operator(() ident(b)operator(,) ident(e) operator(\))
  keyword(if)operator(() ident(b) operator(=)operator(=) ident(iup)operator(.)ident(BUTTON1) operator(\)) keyword(then)
    keyword(if)operator(() ident(e) operator(=)operator(=) integer(1) operator(\)) keyword(then)
    comment(-- botão pressionado)
      ident(text)operator(.)ident(value) operator(=) string<delimiter(")content(Red button pressed)delimiter(")>
    keyword(else)           
    comment(-- botão solto )
      ident(text)operator(.)ident(value) operator(=) string<delimiter(")content(Red button released)delimiter(")>
    keyword(end)
  keyword(end)
  keyword(return) ident(iup)operator(.)ident(DEFAULT)
keyword(end)

comment(-- callback called when the exit button is activated)
keyword(function) ident(btn_exit:)function(action)operator(()operator(\))
  ident(dlg)operator(:)ident(hide)operator(()operator(\))
keyword(end)

comment(-- shows dialog)
ident(dlg)operator(:)ident(showxy)operator(() ident(iup)operator(.)ident(CENTER)operator(,) ident(iup)operator(.)ident(CENTER)operator(\))comment(--IupCanvas Example in IupLua )

ident(cv)       operator(=) ident(iup)operator(.)ident(canvas) map<delimiter({)key(size)operator(=)string<delimiter(")content(300x100)delimiter(")>operator(,) key(xmin)operator(=)integer(0)operator(,) key(xmax)operator(=)integer(99)operator(,) key(posx)operator(=)integer(0)operator(,) key(dx)operator(=)integer(10)delimiter(})>
ident(dg)       operator(=) ident(iup)operator(.)ident(dialog)map<delimiter({)ident(iup)operator(.)ident(frame)map<inline_delimiter({)ident(cv)inline_delimiter(})>operator(;) key(title)operator(=)string<delimiter(")content(IupCanvas)delimiter(")>delimiter(})>

keyword(function) ident(cv:)function(motion_cb)operator(()ident(x)operator(,) ident(y)operator(,) ident(r)operator(\))
  predefined(print)operator(()ident(x)operator(,) ident(y)operator(,) ident(r)operator(\))
  keyword(return) ident(iup)operator(.)ident(DEFAULT)
keyword(end)

ident(dg)operator(:)ident(showxy)operator(()ident(iup)operator(.)ident(CENTER)operator(,) ident(iup)operator(.)ident(CENTER)operator(\))
comment(--IupDialog Example in IupLua)
comment(--Creates a simple dialog.)

ident(vbox) operator(=) ident(iup)operator(.)ident(vbox) map<delimiter({) ident(iup)operator(.)ident(label) map<inline_delimiter({)key(title)operator(=)string<delimiter(")content(Label)delimiter(")>inline_delimiter(})>operator(,) ident(iup)operator(.)ident(button) map<inline_delimiter({) key(title)operator(=)string<delimiter(")content(Test)delimiter(")> inline_delimiter(})> delimiter(})>
ident(dlg) operator(=) ident(iup)operator(.)ident(dialog)map<delimiter({)ident(vbox)operator(;) key(title)operator(=)string<delimiter(")content(Dialog)delimiter(")>delimiter(})>
ident(dlg)operator(:)ident(show)operator(()operator(\))

ident(tecgraf) operator(=) ident(iup)operator(.)ident(image)map<delimiter({)
   map<inline_delimiter({) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) inline_delimiter(})>operator(,)
   map<inline_delimiter({) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(02)operator(,) integer(05)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) inline_delimiter(})>operator(,)
   map<inline_delimiter({) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(04)operator(,) integer(05)operator(,) integer(05)operator(,) integer(05)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) inline_delimiter(})>operator(,)
   map<inline_delimiter({) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(11)operator(,) integer(05)operator(,) integer(05)operator(,) integer(05)operator(,) integer(05)operator(,) integer(12)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) inline_delimiter(})>operator(,)
   map<inline_delimiter({) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(10)operator(,) integer(06)operator(,) integer(05)operator(,) integer(03)operator(,) integer(05)operator(,) integer(05)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) inline_delimiter(})>operator(,)
   map<inline_delimiter({) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(07)operator(,) integer(05)operator(,) integer(01)operator(,) integer(01)operator(,) integer(03)operator(,) integer(05)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) inline_delimiter(})>operator(,)
   map<inline_delimiter({) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(07)operator(,) integer(05)operator(,) integer(01)operator(,) integer(01)operator(,) integer(03)operator(,) integer(05)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) inline_delimiter(})>operator(,)
   map<inline_delimiter({) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(02)operator(,) integer(09)operator(,) integer(09)operator(,) integer(01)operator(,) integer(01)operator(,) integer(03)operator(,) integer(07)operator(,) integer(06)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) inline_delimiter(})>operator(,)
   map<inline_delimiter({) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(07)operator(,) integer(06)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(02)operator(,) integer(07)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) inline_delimiter(})>operator(,)
   map<inline_delimiter({) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(07)operator(,) integer(06)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(04)operator(,) integer(07)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) inline_delimiter(})>operator(,)
   map<inline_delimiter({) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(07)operator(,) integer(06)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(04)operator(,) integer(07)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) inline_delimiter(})>operator(,)
   map<inline_delimiter({) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(11)operator(,) integer(02)operator(,) integer(07)operator(,) integer(05)operator(,) integer(04)operator(,) integer(04)operator(,) integer(04)operator(,) integer(04)operator(,) integer(04)operator(,) integer(04)operator(,) integer(11)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) inline_delimiter(})>operator(,)
   map<inline_delimiter({) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(07)operator(,) integer(04)operator(,) integer(04)operator(,) integer(04)operator(,) integer(06)operator(,) integer(03)operator(,) integer(03)operator(,) integer(07)operator(,) integer(05)operator(,) integer(05)operator(,) integer(07)operator(,) integer(07)operator(,) integer(04)operator(,) integer(04)operator(,) integer(04)operator(,) integer(04)operator(,) integer(10)operator(,) integer(10)operator(,) integer(10)operator(,) integer(10)operator(,) integer(10)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) inline_delimiter(})>operator(,)
   map<inline_delimiter({) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(04)operator(,) integer(04)operator(,) integer(04)operator(,) integer(09)operator(,) integer(09)operator(,) integer(06)operator(,) integer(05)operator(,) integer(04)operator(,) integer(08)operator(,) integer(07)operator(,) integer(05)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(07)operator(,) integer(05)operator(,) integer(06)operator(,) integer(03)operator(,) integer(03)operator(,) integer(03)operator(,) integer(03)operator(,) integer(04)operator(,) integer(10)operator(,) integer(07)operator(,) integer(09)operator(,) integer(01)operator(,) integer(01)operator(,) inline_delimiter(})>operator(,)
   map<inline_delimiter({) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(04)operator(,) integer(04)operator(,) integer(06)operator(,) integer(06)operator(,) integer(08)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(10)operator(,) integer(05)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(10)operator(,) integer(06)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(03)operator(,) integer(03)operator(,) integer(07)operator(,) integer(07)operator(,) integer(07)operator(,) integer(01)operator(,) inline_delimiter(})>operator(,)
   map<inline_delimiter({) integer(01)operator(,) integer(01)operator(,) integer(02)operator(,) integer(04)operator(,) integer(04)operator(,) integer(05)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(04)operator(,) integer(05)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(07)operator(,) integer(09)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(07)operator(,) integer(07)operator(,) integer(05)operator(,) integer(01)operator(,) inline_delimiter(})>operator(,)
   map<inline_delimiter({) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(03)operator(,) integer(04)operator(,) integer(04)operator(,) integer(04)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(04)operator(,) integer(05)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(07)operator(,) integer(06)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(07)operator(,) integer(07)operator(,) integer(07)operator(,) integer(09)operator(,) integer(07)operator(,) integer(01)operator(,) inline_delimiter(})>operator(,)
   map<inline_delimiter({) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(03)operator(,) integer(03)operator(,) integer(03)operator(,) integer(04)operator(,) integer(10)operator(,) integer(10)operator(,) integer(10)operator(,) integer(11)operator(,) integer(01)operator(,) integer(04)operator(,) integer(05)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(05)operator(,) integer(06)operator(,) integer(15)operator(,) integer(05)operator(,) integer(07)operator(,) integer(07)operator(,) integer(07)operator(,) integer(09)operator(,) integer(06)operator(,) integer(05)operator(,) integer(05)operator(,) integer(01)operator(,) integer(01)operator(,) inline_delimiter(})>operator(,)
   map<inline_delimiter({) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(03)operator(,) integer(03)operator(,) integer(03)operator(,) integer(03)operator(,) integer(03)operator(,) integer(02)operator(,) integer(04)operator(,) integer(07)operator(,) integer(05)operator(,) integer(05)operator(,) integer(05)operator(,) integer(05)operator(,) integer(06)operator(,) integer(09)operator(,) integer(14)operator(,) integer(14)operator(,) integer(06)operator(,) integer(05)operator(,) integer(05)operator(,) integer(05)operator(,) integer(07)operator(,) integer(12)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) inline_delimiter(})>operator(,)
   map<inline_delimiter({) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(06)operator(,) integer(03)operator(,) integer(03)operator(,) integer(02)operator(,) integer(02)operator(,) integer(02)operator(,) integer(04)operator(,) integer(04)operator(,) integer(02)operator(,) integer(02)operator(,) integer(10)operator(,) integer(16)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) inline_delimiter(})>operator(,)
   map<inline_delimiter({) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(02)operator(,) integer(05)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(06)operator(,) integer(07)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) inline_delimiter(})>operator(,)
   map<inline_delimiter({) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(02)operator(,) integer(05)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(06)operator(,) integer(07)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) inline_delimiter(})>operator(,)
   map<inline_delimiter({) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(02)operator(,) integer(05)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(06)operator(,) integer(07)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) inline_delimiter(})>operator(,)
   map<inline_delimiter({) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(03)operator(,) integer(07)operator(,) integer(09)operator(,) integer(01)operator(,) integer(01)operator(,) integer(04)operator(,) integer(09)operator(,) integer(05)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) inline_delimiter(})>operator(,)
   map<inline_delimiter({) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(12)operator(,) integer(03)operator(,) integer(05)operator(,) integer(01)operator(,) integer(01)operator(,) integer(05)operator(,) integer(07)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) inline_delimiter(})>operator(,)
   map<inline_delimiter({) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(03)operator(,) integer(05)operator(,) integer(01)operator(,) integer(01)operator(,) integer(07)operator(,) integer(07)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) inline_delimiter(})>operator(,)
   map<inline_delimiter({) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(03)operator(,) integer(05)operator(,) integer(05)operator(,) integer(04)operator(,) integer(07)operator(,) integer(07)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) inline_delimiter(})>operator(,)
   map<inline_delimiter({) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(09)operator(,) integer(03)operator(,) integer(05)operator(,) integer(07)operator(,) integer(07)operator(,) integer(13)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) inline_delimiter(})>operator(,)
   map<inline_delimiter({) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(03)operator(,) integer(07)operator(,) integer(07)operator(,) integer(07)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) inline_delimiter(})>operator(,)
   map<inline_delimiter({) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(03)operator(,) integer(04)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) inline_delimiter(})>operator(,)
   map<inline_delimiter({) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) inline_delimiter(})>operator(,)
   map<inline_delimiter({) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)operator(,) integer(01)  inline_delimiter(})>operator(;)
   key(colors) operator(=) map<inline_delimiter({)
      string<delimiter(")content(BGCOLOR)delimiter(")>operator(,)
      string<delimiter(")content(079 086 099)delimiter(")>operator(,)
      string<delimiter(")content(040 045 053)delimiter(")>operator(,)
      string<delimiter(")content(104 113 129)delimiter(")>operator(,)
      string<delimiter(")content(136 147 170)delimiter(")>operator(,)
      string<delimiter(")content(155 164 179)delimiter(")>operator(,)
      string<delimiter(")content(121 136 167)delimiter(")>operator(,)
      string<delimiter(")content(239 239 243)delimiter(")>operator(,)
      string<delimiter(")content(176 190 214)delimiter(")>operator(,)
      string<delimiter(")content(127 133 143)delimiter(")>operator(,)
      string<delimiter(")content(207 209 214)delimiter(")>operator(,)
      string<delimiter(")content(247 255 255)delimiter(")>operator(,)
      string<delimiter(")content(244 247 249)delimiter(")>operator(,)
      string<delimiter(")content(212 217 225)delimiter(")>operator(,)
      string<delimiter(")content(215 226 241)delimiter(")>operator(,)
      string<delimiter(")content(231 237 245)delimiter(")> 
   inline_delimiter(})>operator(,)
delimiter(})>

ident(dg) operator(=) ident(iup)operator(.)ident(dialog)map<delimiter({)ident(iup)operator(.)ident(label)map<inline_delimiter({)key(title)operator(=)string<delimiter(")content(Tray example)delimiter(")>inline_delimiter(})>operator(;) key(title)operator(=)string<delimiter(")content(Tray)delimiter(")>operator(,) 
          key(tray) operator(=) string<delimiter(")content(YES)delimiter(")>operator(,) key(traytip) operator(=)  string<delimiter(")content(This is a tip at tray)delimiter(")>operator(,) key(trayimage) operator(=) ident(tecgraf)delimiter(})>
ident(dg)operator(:)ident(show)operator(()operator(\))

ident(dg)operator(.)ident(hidetaskbar) operator(=) string<delimiter(")content(YES)delimiter(")>

ident(dg)operator(.)ident(trayclick_cb) operator(=) keyword(function)operator((self, b, press, dclick\))
  keyword(if) ident(b) operator(=)operator(=) integer(1) keyword(and) ident(press) keyword(then) 
    ident(item_show) operator(=) ident(iup)operator(.)ident(item) map<delimiter({)key(title) operator(=) string<delimiter(")content(Show)delimiter(")>operator(,) key(action) operator(=) keyword(function)operator((\)) ident(dg)operator(:)ident(show)operator(()operator(\)) keyword(end)delimiter(})>
    ident(item_exit) operator(=) ident(iup)operator(.)ident(item) map<delimiter({)key(title) operator(=) string<delimiter(")content(Exit)delimiter(")>operator(,) key(action) operator(=) keyword(function)operator((\)) ident(dg)operator(.)key(tray) operator(=) string<delimiter(")content(NO)delimiter(")> ident(dg)operator(:)ident(hide)operator(()operator(\)) keyword(end)delimiter(})>
    ident(menu) operator(=) ident(iup)operator(.)ident(menu)map<delimiter({)ident(item_show)operator(,) ident(item_exit)delimiter(})>
    ident(menu)operator(:)ident(popup)operator(()ident(iup)operator(.)ident(MOUSEPOS)operator(,) ident(iup)operator(.)ident(MOUSEPOS)operator(\))
  keyword(end)
  keyword(return) ident(iup)operator(.)ident(DEFAULT)
keyword(end)
comment(-- IupFill Example in IupLua )
comment(-- Uses the Fill element to horizontally centralize a button and to )
comment(-- justify it to the left and right.)

comment(-- Creates frame with left aligned button)
ident(frame_left) operator(=) ident(iup)operator(.)ident(frame)
map<delimiter({)
  ident(iup)operator(.)ident(hbox)
  map<inline_delimiter({)
    ident(iup)operator(.)ident(button)map<inline_delimiter({) key(title) operator(=) string<delimiter(")content(Ok)delimiter(")> inline_delimiter(})>operator(,)
    ident(iup)operator(.)ident(fill)map<inline_delimiter({)inline_delimiter(})>operator(,)
  inline_delimiter(})>operator(;) key(title) operator(=) string<delimiter(")content(Left aligned)delimiter(")> comment(-- Sets frame's title)
delimiter(})>

comment(-- Creates frame with centered button)
ident(frame_center) operator(=) ident(iup)operator(.)ident(frame)
map<delimiter({)
  ident(iup)operator(.)ident(hbox)
  map<inline_delimiter({)
    ident(iup)operator(.)ident(fill)map<inline_delimiter({)inline_delimiter(})>operator(,)
    ident(iup)operator(.)ident(button)map<inline_delimiter({) key(title) operator(=) string<delimiter(")content(Ok)delimiter(")> inline_delimiter(})>operator(,)
    ident(iup)operator(.)ident(fill)map<inline_delimiter({)inline_delimiter(})>operator(,)
  inline_delimiter(})> operator(;) key(title) operator(=) string<delimiter(")content(Centered)delimiter(")> comment(-- Sets frame's title)
delimiter(})>

comment(-- Creates frame with right aligned button )
ident(frame_right) operator(=) ident(iup)operator(.)ident(frame)
map<delimiter({)
  ident(iup)operator(.)ident(hbox)
  map<inline_delimiter({)
    ident(iup)operator(.)ident(fill) map<inline_delimiter({)inline_delimiter(})>operator(,)
    ident(iup)operator(.)ident(button) map<inline_delimiter({) key(title) operator(=) string<delimiter(")content(Ok)delimiter(")> inline_delimiter(})>operator(,)
      
  inline_delimiter(})> operator(;) key(title) operator(=) string<delimiter(")content(Right aligned)delimiter(")> comment(-- Sets frame's title)
delimiter(})>

comment(-- Creates dialog with these three frames )
ident(dialog) operator(=) ident(iup)operator(.)ident(dialog) 
map<delimiter({)
  ident(iup)operator(.)ident(vbox)map<inline_delimiter({)ident(frame_left)operator(,) ident(frame_center)operator(,) ident(frame_right)operator(,)inline_delimiter(})>operator(;) 
    key(size) operator(=) integer(120)operator(,) key(title) operator(=) string<delimiter(")content(IupFill)delimiter(")>
delimiter(})>

comment(-- Shows dialog in the center of the screen)
ident(dialog)operator(:)ident(showxy)operator(()ident(iup)operator(.)ident(CENTER)operator(,) ident(iup)operator(.)ident(CENTER)operator(\))comment(-- IupFrame Example in IupLua )
comment(-- Draws a frame around a button. Note that FGCOLOR is added to the frame but )
comment(-- it is inherited by the button. )

comment(-- Creates frame with a label)
ident(frame) operator(=) ident(iup)operator(.)ident(frame)
          map<delimiter({)
            ident(iup)operator(.)ident(hbox)
            map<inline_delimiter({)
              ident(iup)operator(.)ident(fill)map<inline_delimiter({)inline_delimiter(})>operator(,)
              ident(iup)operator(.)ident(label)map<inline_delimiter({)key(title)operator(=)string<delimiter(")content(IupFrame Test)delimiter(")>inline_delimiter(})>operator(,)
              ident(iup)operator(.)ident(fill)map<inline_delimiter({)inline_delimiter(})>operator(,)
              ident(NULL)
            inline_delimiter(})>
          delimiter(})> operator(;)

comment(-- Sets label's attributes )
ident(frame)operator(.)ident(fgcolor) operator(=) string<delimiter(")content(255 0 0)delimiter(")>
ident(frame)operator(.)ident(size)    operator(=) ident(EIGHTHxEIGHTH)
ident(frame)operator(.)ident(title)   operator(=) string<delimiter(")content(This is the frame)delimiter(")>
ident(frame)operator(.)ident(margin)  operator(=) string<delimiter(")content(10x10)delimiter(")>

comment(-- Creates dialog  )
ident(dialog) operator(=) ident(iup)operator(.)ident(dialog)map<delimiter({)ident(frame)delimiter(})>operator(;)

comment(-- Sets dialog's title )
ident(dialog)operator(.)ident(title) operator(=) string<delimiter(")content(IupFrame)delimiter(")>

ident(dialog)operator(:)ident(showxy)operator(()ident(iup)operator(.)ident(CENTER)operator(,)ident(iup)operator(.)ident(CENTER)operator(\)) comment(-- Shows dialog in the center of the screen -- IupHbox Example in IupLua )
comment(-- Creates a dialog with buttons placed side by side, with the purpose )
comment(-- of showing the organization possibilities of elements inside an hbox. )
comment(-- The ALIGNMENT attribute is explored in all its possibilities to obtain )
comment(-- the given effect. )

ident(fr1) operator(=) ident(iup)operator(.)ident(frame)
map<delimiter({)
	ident(iup)operator(.)ident(hbox)
	map<inline_delimiter({)
		ident(iup)operator(.)ident(fill)map<inline_delimiter({)inline_delimiter(})>operator(,)
		ident(iup)operator(.)ident(button)map<inline_delimiter({)key(title)operator(=)string<delimiter(")content(1)delimiter(")>operator(,) key(size)operator(=)string<delimiter(")content(30x30)delimiter(")>inline_delimiter(})>operator(,)
		ident(iup)operator(.)ident(button)map<inline_delimiter({)key(title)operator(=)string<delimiter(")content(2)delimiter(")>operator(,) key(size)operator(=)string<delimiter(")content(30x40)delimiter(")>inline_delimiter(})>operator(,)
		ident(iup)operator(.)ident(button)map<inline_delimiter({)key(title)operator(=)string<delimiter(")content(3)delimiter(")>operator(,) key(size)operator(=)string<delimiter(")content(30x50)delimiter(")>inline_delimiter(})>operator(,)
		ident(iup)operator(.)ident(fill)map<inline_delimiter({)inline_delimiter(})>operator(;)
		key(alignment) operator(=) string<delimiter(")content(ATOP)delimiter(")>
	inline_delimiter(})>operator(;)
	key(title) operator(=) string<delimiter(")content(Alignment = ATOP)delimiter(")>
delimiter(})>

ident(fr2) operator(=) ident(iup)operator(.)ident(frame)
map<delimiter({)
	ident(iup)operator(.)ident(hbox)
	map<inline_delimiter({)
		ident(iup)operator(.)ident(fill)map<inline_delimiter({)inline_delimiter(})>operator(,)
		ident(iup)operator(.)ident(button)map<inline_delimiter({)key(title)operator(=)string<delimiter(")content(1)delimiter(")>operator(,) key(size)operator(=)string<delimiter(")content(30x30)delimiter(")>operator(,) key(action)operator(=)string<delimiter(")delimiter(")>inline_delimiter(})>operator(,)
		ident(iup)operator(.)ident(button)map<inline_delimiter({)key(title)operator(=)string<delimiter(")content(2)delimiter(")>operator(,) key(size)operator(=)string<delimiter(")content(30x40)delimiter(")>operator(,) key(action)operator(=)string<delimiter(")delimiter(")>inline_delimiter(})>operator(,)
		ident(iup)operator(.)ident(button)map<inline_delimiter({)key(title)operator(=)string<delimiter(")content(3)delimiter(")>operator(,) key(size)operator(=)string<delimiter(")content(30x50)delimiter(")>operator(,) key(action)operator(=)string<delimiter(")delimiter(")>inline_delimiter(})>operator(,)
		ident(iup)operator(.)ident(fill)map<inline_delimiter({)inline_delimiter(})>operator(;)
		key(alignment) operator(=) string<delimiter(")content(ACENTER)delimiter(")>
	inline_delimiter(})>operator(;)
	key(title) operator(=) string<delimiter(")content(Alignment = ACENTER)delimiter(")>
delimiter(})>

ident(fr3) operator(=) ident(iup)operator(.)ident(frame)
map<delimiter({)
	ident(iup)operator(.)ident(hbox)
	map<inline_delimiter({)
		ident(iup)operator(.)ident(fill)map<inline_delimiter({)inline_delimiter(})>operator(,)
		ident(iup)operator(.)ident(button)map<inline_delimiter({)key(title)operator(=)string<delimiter(")content(1)delimiter(")>operator(,) key(size)operator(=)string<delimiter(")content(30x30)delimiter(")>operator(,) key(action)operator(=)string<delimiter(")delimiter(")>inline_delimiter(})>operator(,)
		ident(iup)operator(.)ident(button)map<inline_delimiter({)key(title)operator(=)string<delimiter(")content(2)delimiter(")>operator(,) key(size)operator(=)string<delimiter(")content(30x40)delimiter(")>operator(,) key(action)operator(=)string<delimiter(")delimiter(")>inline_delimiter(})>operator(,)
		ident(iup)operator(.)ident(button)map<inline_delimiter({)key(title)operator(=)string<delimiter(")content(3)delimiter(")>operator(,) key(size)operator(=)string<delimiter(")content(30x50)delimiter(")>operator(,) key(action)operator(=)string<delimiter(")delimiter(")>inline_delimiter(})>operator(,)
		ident(iup)operator(.)ident(fill)map<inline_delimiter({)inline_delimiter(})>operator(;)
		key(alignment) operator(=) string<delimiter(")content(ABOTTOM)delimiter(")>
	inline_delimiter(})>operator(;)
	key(title) operator(=) string<delimiter(")content(Alignment = ABOTTOM)delimiter(")>
delimiter(})>

ident(dlg) operator(=) ident(iup)operator(.)ident(dialog)
map<delimiter({)
	ident(iup)operator(.)ident(frame)
	map<inline_delimiter({)
		ident(iup)operator(.)ident(vbox)
		map<inline_delimiter({)
			ident(fr1)operator(,)
			ident(fr2)operator(,)
			ident(fr3)
		inline_delimiter(})>operator(;) key(title)operator(=)string<delimiter(")content(HBOX)delimiter(")>operator(,)
	inline_delimiter(})>operator(;)
  key(title)operator(=)string<delimiter(")content(Alignment)delimiter(")>operator(,)
  key(size)operator(=)integer(140)
delimiter(})>
	
ident(dlg)operator(:)ident(show)operator(()operator(\))comment(-- IupImage Example in IupLua )
comment(-- Creates a button, a label, a toggle and a radio using an image. )
comment(-- Uses an image for the cursor as well.)

comment(-- Defines an "X" image )
ident(img_x) operator(=) ident(iup)operator(.)ident(image)map<delimiter({)
  map<inline_delimiter({) integer(1)operator(,)integer(2)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(2)operator(,)integer(1) inline_delimiter(})>operator(,) 
  map<inline_delimiter({) integer(2)operator(,)integer(1)operator(,)integer(2)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(2)operator(,)integer(1)operator(,)integer(2) inline_delimiter(})>operator(,) 
  map<inline_delimiter({) integer(3)operator(,)integer(2)operator(,)integer(1)operator(,)integer(2)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(2)operator(,)integer(1)operator(,)integer(2)operator(,)integer(3) inline_delimiter(})>operator(,) 
  map<inline_delimiter({) integer(3)operator(,)integer(3)operator(,)integer(2)operator(,)integer(1)operator(,)integer(2)operator(,)integer(3)operator(,)integer(2)operator(,)integer(1)operator(,)integer(2)operator(,)integer(3)operator(,)integer(3) inline_delimiter(})>operator(,) 
  map<inline_delimiter({) integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(2)operator(,)integer(1)operator(,)integer(2)operator(,)integer(1)operator(,)integer(2)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3) inline_delimiter(})>operator(,) 
  map<inline_delimiter({) integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(2)operator(,)integer(1)operator(,)integer(2)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3) inline_delimiter(})>operator(,)  
  map<inline_delimiter({) integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(2)operator(,)integer(1)operator(,)integer(2)operator(,)integer(1)operator(,)integer(2)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3) inline_delimiter(})>operator(,) 
  map<inline_delimiter({) integer(3)operator(,)integer(3)operator(,)integer(2)operator(,)integer(1)operator(,)integer(2)operator(,)integer(3)operator(,)integer(2)operator(,)integer(1)operator(,)integer(2)operator(,)integer(3)operator(,)integer(3) inline_delimiter(})>operator(,) 
  map<inline_delimiter({) integer(3)operator(,)integer(2)operator(,)integer(1)operator(,)integer(2)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(2)operator(,)integer(1)operator(,)integer(2)operator(,)integer(3) inline_delimiter(})>operator(,) 
  map<inline_delimiter({) integer(2)operator(,)integer(1)operator(,)integer(2)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(2)operator(,)integer(1)operator(,)integer(2) inline_delimiter(})>operator(,) 
  map<inline_delimiter({) integer(1)operator(,)integer(2)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(3)operator(,)integer(2)operator(,)integer(1) inline_delimiter(})>
  comment(-- Sets "X" image colors)
  operator(;) key(colors) operator(=) map<inline_delimiter({) string<delimiter(")content(0 1 0)delimiter(")>operator(,) string<delimiter(")content(255 0 0)delimiter(")>operator(,) string<delimiter(")content(255 255 0)delimiter(")> inline_delimiter(})>
delimiter(})>

comment(-- Defines a cursor image)
ident(img_cursor) operator(=) ident(iup)operator(.)ident(image)map<delimiter({)
  map<inline_delimiter({) integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0) inline_delimiter(})>operator(,)
  map<inline_delimiter({) integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0) inline_delimiter(})>operator(,)
  map<inline_delimiter({) integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0) inline_delimiter(})>operator(,)
  map<inline_delimiter({) integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0) inline_delimiter(})>operator(,)
  map<inline_delimiter({) integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0) inline_delimiter(})>operator(,)
  map<inline_delimiter({) integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0) inline_delimiter(})>operator(,)
  map<inline_delimiter({) integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0) inline_delimiter(})>operator(,)
  map<inline_delimiter({) integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0) inline_delimiter(})>operator(,)
  map<inline_delimiter({) integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0) inline_delimiter(})>operator(,)
  map<inline_delimiter({) integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0) inline_delimiter(})>operator(,)
  map<inline_delimiter({) integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(2)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(2)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0) inline_delimiter(})>operator(,)
  map<inline_delimiter({) integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(2)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(2)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0) inline_delimiter(})>operator(,)
  map<inline_delimiter({) integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(2)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(2)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0) inline_delimiter(})>operator(,)
  map<inline_delimiter({) integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(2)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(2)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0) inline_delimiter(})>operator(,)
  map<inline_delimiter({) integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(2)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0) inline_delimiter(})>operator(,)
  map<inline_delimiter({) integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(2)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(2)operator(,)integer(0)operator(,)integer(0)operator(,)integer(2)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0) inline_delimiter(})>operator(,)
  map<inline_delimiter({) integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(2)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(2)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0) inline_delimiter(})>operator(,)
  map<inline_delimiter({) integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0) inline_delimiter(})>operator(,)
  map<inline_delimiter({) integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(2)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0) inline_delimiter(})>operator(,)
  map<inline_delimiter({) integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0) inline_delimiter(})>operator(,)
  map<inline_delimiter({) integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0) inline_delimiter(})>operator(,)
  map<inline_delimiter({) integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0) inline_delimiter(})>operator(,)
  map<inline_delimiter({) integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0) inline_delimiter(})>operator(,)
  map<inline_delimiter({) integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0) inline_delimiter(})>operator(,)
  map<inline_delimiter({) integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0) inline_delimiter(})>operator(,)
  map<inline_delimiter({) integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0) inline_delimiter(})>operator(,)
  map<inline_delimiter({) integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0) inline_delimiter(})>operator(,)
  map<inline_delimiter({) integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0) inline_delimiter(})>operator(,)
  map<inline_delimiter({) integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0) inline_delimiter(})>operator(,)
  map<inline_delimiter({) integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0) inline_delimiter(})>operator(,)
  map<inline_delimiter({) integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0) inline_delimiter(})>operator(,)
  map<inline_delimiter({) integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0)operator(,)integer(0) inline_delimiter(})>
  comment(-- Sets cursor image colors)
  operator(;) key(colors) operator(=) map<inline_delimiter({) string<delimiter(")content(255 0 0)delimiter(")>operator(,) string<delimiter(")content(128 0 0)delimiter(")> inline_delimiter(})>operator(,) key(hotspot) operator(=) string<delimiter(")content(21:10)delimiter(")> 
delimiter(})>

comment(-- Creates a button entitled "Dummy" and associates image img_x to it)
ident(btn) operator(=) ident(iup)operator(.)ident(button)map<delimiter({) key(title) operator(=) string<delimiter(")delimiter(")>operator(,) key(image) operator(=) ident(img_x) delimiter(})>

comment(-- Creates a label entitled "Dummy" and associates image img_x to it)
ident(lbl) operator(=) ident(iup)operator(.)ident(label)map<delimiter({) key(title) operator(=) string<delimiter(")delimiter(")>operator(,) key(image) operator(=) ident(img_x) delimiter(})>

comment(-- Creates toggle entitled "Dummy" and associates image img_x to it)
ident(tgl) operator(=) ident(iup)operator(.)ident(toggle)map<delimiter({) key(title) operator(=) string<delimiter(")delimiter(")>operator(,) key(image) operator(=) ident(img_x) delimiter(})>

comment(-- Creates two toggles entitled "Dummy" and associates image img_x to them)
ident(tgl_radio_1) operator(=) ident(iup)operator(.)ident(toggle)map<delimiter({) key(title) operator(=) string<delimiter(")delimiter(")>operator(,) key(image) operator(=) ident(img_x) delimiter(})>
ident(tgl_radio_2) operator(=) ident(iup)operator(.)ident(toggle)map<delimiter({) key(title) operator(=) string<delimiter(")delimiter(")>operator(,) key(image) operator(=) ident(img_x) delimiter(})>

comment(-- Creates label showing image size)
ident(lbl_size) operator(=) ident(iup)operator(.)ident(label)map<delimiter({) key(title) operator(=) string<delimiter(')content("X" image width = )delimiter(')>operator(.)operator(.)ident(img_x)operator(.)ident(width)operator(.)operator(.)string<delimiter(')content(; "X" image height = )delimiter(')>operator(.)operator(.)ident(img_x)operator(.)ident(height) delimiter(})> 
  
comment(-- Creates frames around the elements )
ident(frm_btn) operator(=) ident(iup)operator(.)ident(frame)map<delimiter({)ident(btn)operator(;) key(title)operator(=)string<delimiter(")content(button)delimiter(")>operator(,) key(size)operator(=)string<delimiter(")content(EIGHTHxEIGHTH)delimiter(")>delimiter(})>
ident(frm_lbl) operator(=) ident(iup)operator(.)ident(frame)map<delimiter({)ident(lbl)operator(;) key(title)operator(=)string<delimiter(")content(label)delimiter(")> operator(,) key(size)operator(=)string<delimiter(")content(EIGHTHxEIGHTH)delimiter(")>delimiter(})>
ident(frm_tgl) operator(=) ident(iup)operator(.)ident(frame)map<delimiter({)ident(tgl)operator(;) key(title)operator(=)string<delimiter(")content(toggle)delimiter(")>operator(,) key(size)operator(=)string<delimiter(")content(EIGHTHxEIGHTH)delimiter(")>delimiter(})>

ident(frm_tgl_radio) operator(=) ident(iup)operator(.)ident(frame)map<delimiter({) 
                            ident(iup)operator(.)ident(radio)map<inline_delimiter({) 
                               ident(iup)operator(.)ident(vbox)
                               map<inline_delimiter({) 
                                   ident(tgl_radio_1)operator(,) 
                                   ident(tgl_radio_2) 
                               inline_delimiter(})> 
                            inline_delimiter(})>operator(;) 
                            key(title)operator(=)string<delimiter(")content(radio)delimiter(")>operator(,) key(size)operator(=)string<delimiter(")content(EIGHTHxEIGHTH)delimiter(")>
                          delimiter(})>

comment(-- Creates dialog dlg with an hbox containing a button, a label, and a toggle )
ident(dlg) operator(=) ident(iup)operator(.)ident(dialog)
      map<delimiter({)
        ident(iup)operator(.)ident(vbox)
        map<inline_delimiter({)
          ident(iup)operator(.)ident(hbox)map<inline_delimiter({)ident(frm_btn)operator(,) ident(frm_lbl)operator(,) ident(frm_tgl)operator(,) ident(frm_tgl_radio)inline_delimiter(})>operator(,)
          ident(iup)operator(.)ident(fill)map<inline_delimiter({)inline_delimiter(})>operator(,)
          ident(iup)operator(.)ident(hbox)map<inline_delimiter({)ident(iup)operator(.)ident(fill)map<inline_delimiter({)inline_delimiter(})>operator(,) ident(lbl_size)operator(,) ident(iup)operator(.)ident(fill)map<inline_delimiter({)inline_delimiter(})>inline_delimiter(})> 
        inline_delimiter(})>operator(;) key(title) operator(=) string<delimiter(")content(IupImage Example)delimiter(")>operator(,) key(size) operator(=) string<delimiter(")content(HALFxQUARTER)delimiter(")>operator(,) 
        key(cursor) operator(=) ident(img_cursor)
      delimiter(})> 

comment(-- Shows dialog in the center of the screen )
ident(dlg)operator(:)ident(showxy)operator(()ident(iup)operator(.)ident(CENTER)operator(,) ident(iup)operator(.)ident(CENTER)operator(\))
ident(text) operator(=) ident(iup)operator(.)ident(text) map<delimiter({)key(value) operator(=) string<delimiter(")content(This is an empty text)delimiter(")>delimiter(})>

ident(item_save) operator(=) ident(iup)operator(.)ident(item) map<delimiter({)key(title) operator(=) string<delimiter(")content(Save)char(\\t)content(Ctrl+S)delimiter(")>operator(,) key(key) operator(=) string<delimiter(")content(K_cS)delimiter(")>operator(,) key(active) operator(=) string<delimiter(")content(NO)delimiter(")>delimiter(})>
ident(item_autosave) operator(=) ident(iup)operator(.)ident(item) map<delimiter({)key(title) operator(=) string<delimiter(")content(Auto Save)delimiter(")>operator(,) key(key) operator(=) string<delimiter(")content(K_a)delimiter(")>operator(,) key(value) operator(=) string<delimiter(")content(ON)delimiter(")>delimiter(})>
ident(item_exit) operator(=) ident(iup)operator(.)ident(item) map<delimiter({)key(title) operator(=) string<delimiter(")content(Exit)delimiter(")>operator(,) key(key) operator(=) string<delimiter(")content(K_x)delimiter(")>delimiter(})>

ident(menu_file) operator(=) ident(iup)operator(.)ident(menu) map<delimiter({)ident(item_save)operator(,) ident(item_autosave)operator(,) ident(item_exit)delimiter(})>

ident(submenu_file) operator(=) ident(iup)operator(.)ident(submenu)map<delimiter({)ident(menu_file)operator(;) key(title) operator(=) string<delimiter(")content(File)delimiter(")>delimiter(})>

ident(menu) operator(=) ident(iup)operator(.)ident(menu) map<delimiter({)ident(submenu_file)delimiter(})>
                                
ident(dlg) operator(=) ident(iup)operator(.)ident(dialog)map<delimiter({)ident(text)operator(;) key(title) operator(=)string<delimiter(")content(IupItem)delimiter(")>operator(,) key(menu) operator(=) ident(menu)delimiter(})>

ident(dlg)operator(:)ident(showxy)operator(()ident(iup)operator(.)ident(CENTER)operator(,) ident(iup)operator(.)ident(CENTER)operator(\))

keyword(function) ident(item_autosave:)function(action)operator(()operator(\))
  keyword(if) ident(item_autosave)operator(.)ident(value) operator(=)operator(=) string<delimiter(")content(ON)delimiter(")> keyword(then)
    ident(iup)operator(.)ident(Message)operator(()string<delimiter(")content(Auto Save)delimiter(")>operator(,) string<delimiter(")content(OFF)delimiter(")>operator(\))
    ident(item_autosave)operator(.)ident(value) operator(=) string<delimiter(")content(OFF)delimiter(")>
  keyword(else)
    ident(iup)operator(.)ident(Message)operator(()string<delimiter(")content(Auto Save)delimiter(")>operator(,) string<delimiter(")content(ON)delimiter(")>operator(\))
    ident(item_autosave)operator(.)ident(value) operator(=) string<delimiter(")content(ON)delimiter(")>
  keyword(end)
  
  keyword(return) ident(iup)operator(.)ident(DEFAULT) 
keyword(end)

keyword(function) ident(item_exit:)function(action)operator(()operator(\))
comment(-- return iup.CLOSE)
  ident(dlg)operator(:)ident(hide)operator(()operator(\))
keyword(end)
comment(-- IupLabel Example in IupLua )
comment(-- Creates three labels, one using all attributes except for image, other )
comment(-- with normal text and the last one with an image.. )

comment(-- Defines a star image)
ident(img_star) operator(=) ident(iup)operator(.)ident(image) map<delimiter({)
  map<inline_delimiter({) integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(2)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1) inline_delimiter(})>operator(,)
  map<inline_delimiter({) integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(2)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1) inline_delimiter(})>operator(,)
  map<inline_delimiter({) integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1) inline_delimiter(})>operator(,)
  map<inline_delimiter({) integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1) inline_delimiter(})>operator(,)
  map<inline_delimiter({) integer(1)operator(,)integer(1)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(1)operator(,)integer(1) inline_delimiter(})>operator(,)
  map<inline_delimiter({) integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2) inline_delimiter(})>operator(,)
  map<inline_delimiter({) integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1) inline_delimiter(})>operator(,)
  map<inline_delimiter({) integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1) inline_delimiter(})>operator(,)
  map<inline_delimiter({) integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1) inline_delimiter(})>operator(,) 
  map<inline_delimiter({) integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(2)operator(,)integer(2)operator(,)integer(1)operator(,)integer(1)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1) inline_delimiter(})>operator(,)
  map<inline_delimiter({) integer(1)operator(,)integer(1)operator(,)integer(2)operator(,)integer(2)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(2)operator(,)integer(2)operator(,)integer(1)operator(,)integer(1) inline_delimiter(})>operator(,)
  map<inline_delimiter({) integer(1)operator(,)integer(2)operator(,)integer(2)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(2)operator(,)integer(2)operator(,)integer(1) inline_delimiter(})>operator(,)
  map<inline_delimiter({) integer(2)operator(,)integer(2)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(2)operator(,)integer(2) inline_delimiter(})>
  comment(-- Sets star image colors)
  operator(;) key(colors) operator(=) map<inline_delimiter({) string<delimiter(")content(0 0 0)delimiter(")>operator(,) string<delimiter(")content(0 198 0)delimiter(")> inline_delimiter(})> 
delimiter(})>

comment(-- Creates a label and sets all the attributes of label lbl, except for image)
ident(lbl) operator(=) ident(iup)operator(.)ident(label) map<delimiter({) key(title) operator(=) string<delimiter(")content(This label has the following attributes set:)char(\\n)content(BGCOLOR = 255 255 0)char(\\n)content(FGCOLOR = 0 0 255)char(\\n)content(FONT = COURIER_NORMAL_14)char(\\n)content(SIZE = HALFxQUARTER)char(\\n)content(TITLE = All text contained here)char(\\n)content(ALIGNMENT = ACENTER)char(\\n)delimiter(")>operator(,) key(bgcolor) operator(=) string<delimiter(")content(255 255 0)delimiter(")>operator(,) key(fgcolor) operator(=) string<delimiter(")content(0 0 255)delimiter(")>operator(,) key(font) operator(=) string<delimiter(")content(COURIER_NORMAL_14)delimiter(")>operator(,) key(size) operator(=) string<delimiter(")content(HALFxQUARTER)delimiter(")>operator(,) key(alignment) operator(=) string<delimiter(")content(ACENTER)delimiter(")> delimiter(})>
  
comment(-- Creates a label to explain that the label on the right has an image)
ident(lbl_explain) operator(=) ident(iup)operator(.)ident(label) map<delimiter({) key(title) operator(=) string<delimiter(")content(The label on the right has the image of a star)delimiter(")> delimiter(})>

comment(-- Creates a label whose title is not important, cause it will have an image)
ident(lbl_star) operator(=) ident(iup)operator(.)ident(label) map<delimiter({) key(title) operator(=) string<delimiter(")content(Does not matter)delimiter(")>operator(,) key(image) operator(=) ident(img_star) delimiter(})>

comment(-- Creates dialog with these three labels)
ident(dlg) operator(=) ident(iup)operator(.)ident(dialog) map<delimiter({) ident(iup)operator(.)ident(vbox) map<inline_delimiter({) ident(lbl)operator(,) ident(iup)operator(.)ident(hbox) map<inline_delimiter({) ident(lbl_explain)operator(,) ident(lbl_star) inline_delimiter(})> inline_delimiter(})>
      operator(;) key(title) operator(=) string<delimiter(")content(IupLabel Example)delimiter(")> delimiter(})>

comment(-- Shows dialog in the center of the screen )
ident(dlg)operator(:)ident(showxy) operator(() ident(iup)operator(.)ident(CENTER)operator(,) ident(iup)operator(.)ident(CENTER) operator(\))comment(-- IupList Example in IupLua )
comment(-- Creates a dialog with three frames, each one containing a list. The first is a simple list, the second one is a multiple list and the last one is a drop-down list. The second list has a callback associated. )

comment(-- Creates a list and sets items, initial item and size)
ident(list) operator(=) ident(iup)operator(.)ident(list) map<delimiter({)string<delimiter(")content(Gold)delimiter(")>operator(,) string<delimiter(")content(Silver)delimiter(")>operator(,) string<delimiter(")content(Bronze)delimiter(")>operator(,) string<delimiter(")content(None)delimiter(")>
       operator(;) key(value) operator(=) integer(4)operator(,) key(size) operator(=) string<delimiter(")content(EIGHTHxEIGHTH)delimiter(")>delimiter(})>

comment(-- Creates frame with simple list and sets its title)
ident(frm_medal) operator(=) ident(iup)operator(.)ident(frame) map<delimiter({)ident(list) operator(;) key(title) operator(=) string<delimiter(")content(Best medal)delimiter(")>delimiter(})>
  
comment(-- Creates a list and sets its items, multiple selection, initial items and size)
ident(list_multiple) operator(=) ident(iup)operator(.)ident(list) map<delimiter({)string<delimiter(")content(100m dash)delimiter(")>operator(,) string<delimiter(")content(Long jump)delimiter(")>operator(,) string<delimiter(")content(Javelin throw)delimiter(")>operator(,) string<delimiter(")content(110m hurdlers)delimiter(")>operator(,) string<delimiter(")content(Hammer throw)delimiter(")>operator(,) string<delimiter(")content(High jump)delimiter(")>
                operator(;) key(multiple)operator(=)string<delimiter(")content(YES)delimiter(")>operator(,) key(value)operator(=)string<delimiter(")content(+--+--)delimiter(")>operator(,) key(size)operator(=)string<delimiter(")content(EIGHTHxEIGHTH)delimiter(")>delimiter(})>

comment(-- Creates frame with multiple list and sets its title)
ident(frm_sport) operator(=) ident(iup)operator(.)ident(frame) map<delimiter({)ident(list_multiple)
            operator(;) key(title) operator(=) string<delimiter(")content(Competed in)delimiter(")>delimiter(})>

comment(-- Creates a list and sets its items, dropdown and amount of visible items )
ident(list_dropdown) operator(=) ident(iup)operator(.)ident(list) map<delimiter({)string<delimiter(")content(Less than US$ 1000)delimiter(")>operator(,) string<delimiter(")content(US$ 2000)delimiter(")>operator(,) string<delimiter(")content(US$ 5000)delimiter(")>operator(,) string<delimiter(")content(US$ 10000)delimiter(")>operator(,) string<delimiter(")content(US$ 20000)delimiter(")>operator(,) string<delimiter(")content(US$ 50000)delimiter(")>operator(,) string<delimiter(")content(More than US$ 100000)delimiter(")>
                operator(;) key(dropdown)operator(=)string<delimiter(")content(YES)delimiter(")>operator(,) key(visible_items)operator(=)integer(5)delimiter(})>
  
comment(-- Creates frame with dropdown list and sets its title)
ident(frm_prize) operator(=) ident(iup)operator(.)ident(frame) map<delimiter({)ident(list_dropdown)
            operator(;) key(title) operator(=) string<delimiter(")content(Prizes won)delimiter(")>delimiter(})>

comment(-- Creates a dialog with the the frames with three lists and sets its title)
ident(dlg) operator(=) ident(iup)operator(.)ident(dialog) map<delimiter({)ident(iup)operator(.)ident(hbox) map<inline_delimiter({)ident(frm_medal)operator(,) ident(frm_sport)operator(,) ident(frm_prize)inline_delimiter(})>
      operator(;) key(title) operator(=) string<delimiter(")content(IupList Example)delimiter(")>delimiter(})>

comment(-- Shows dialog in the center of the screen)
ident(dlg)operator(:)ident(showxy)operator(()ident(iup)operator(.)ident(CENTER)operator(,) ident(iup)operator(.)ident(CENTER)operator(\))

keyword(function) ident(list_multiple:)function(action)operator(()ident(t)operator(,) ident(i)operator(,) ident(v)operator(\))
  keyword(if) ident(v) operator(=)operator(=) integer(0) keyword(then) 
    ident(state) operator(=) string<delimiter(")content(deselected)delimiter(")> 
  keyword(else) 
    ident(state) operator(=) string<delimiter(")content(selected)delimiter(")> 
  keyword(end)
  ident(iup)operator(.)ident(Message)operator(()string<delimiter(")content(Competed in)delimiter(")>operator(,) string<delimiter(")content(Item )delimiter(")>operator(.)operator(.)ident(i)operator(.)operator(.)string<delimiter(")content( - )delimiter(")>operator(.)operator(.)ident(t)operator(.)operator(.)string<delimiter(")content( - )delimiter(")>operator(.)operator(.)ident(state)operator(\))
  keyword(return) ident(iup)operator(.)ident(DEFAULT)
keyword(end)comment(-- IupMenu Example in IupLua )
comment(-- Creates a dialog with a menu with two submenus. )

comment(-- Creates a text, sets its value and turns on text readonly mode )
ident(text) operator(=) ident(iup)operator(.)ident(text) map<delimiter({)key(readonly) operator(=) string<delimiter(")content(YES)delimiter(")>operator(,) key(value) operator(=) string<delimiter(")content(Selecting show or hide will affect this text)delimiter(")>delimiter(})>

comment(-- Creates items, sets its shortcut keys and deactivates edit item)
ident(item_show) operator(=) ident(iup)operator(.)ident(item) map<delimiter({)key(title) operator(=) string<delimiter(")content(Show)delimiter(")>operator(,) key(key) operator(=) string<delimiter(")content(K_S)delimiter(")>delimiter(})>
ident(item_hide) operator(=) ident(iup)operator(.)ident(item) map<delimiter({)key(title) operator(=) string<delimiter(")content(Hide)char(\\t)content(Ctrl+H)delimiter(")>operator(,) key(key) operator(=) string<delimiter(")content(K_H)delimiter(")>delimiter(})>
ident(item_edit) operator(=) ident(iup)operator(.)ident(item) map<delimiter({)key(title) operator(=) string<delimiter(")content(Edit)delimiter(")>operator(,) key(key) operator(=) string<delimiter(")content(K_E)delimiter(")>operator(,) key(active) operator(=) string<delimiter(")content(NO)delimiter(")>delimiter(})>
ident(item_exit) operator(=) ident(iup)operator(.)ident(item) map<delimiter({)key(title) operator(=) string<delimiter(")content(Exit)delimiter(")>operator(,) key(key) operator(=) string<delimiter(")content(K_x)delimiter(")>delimiter(})>

keyword(function) ident(item_show:)function(action)operator(()operator(\))
  ident(text)operator(.)ident(visible) operator(=) string<delimiter(")content(YES)delimiter(")>
  keyword(return) ident(iup)operator(.)ident(DEFAULT)
keyword(end)

keyword(function) ident(item_hide:)function(action)operator(()operator(\))
  ident(text)operator(.)ident(visible) operator(=) string<delimiter(")content(NO)delimiter(")>
  keyword(return) ident(iup)operator(.)ident(DEFAULT)
keyword(end)

keyword(function) ident(item_exit:)function(action)operator(()operator(\))
  keyword(return) ident(iup)operator(.)ident(CLOSE)
keyword(end)

comment(-- Creates two menus)
ident(menu_file) operator(=) ident(iup)operator(.)ident(menu) map<delimiter({)ident(item_exit)delimiter(})>
ident(menu_text) operator(=) ident(iup)operator(.)ident(menu) map<delimiter({)ident(item_show)operator(,) ident(item_hide)operator(,) ident(item_edit)delimiter(})>

comment(-- Creates two submenus)
ident(submenu_file) operator(=) ident(iup)operator(.)ident(submenu) map<delimiter({)ident(menu_file)operator(;) key(title) operator(=) string<delimiter(")content(File)delimiter(")>delimiter(})>
ident(submenu_text) operator(=) ident(iup)operator(.)ident(submenu) map<delimiter({)ident(menu_text)operator(;) key(title) operator(=) string<delimiter(")content(Text)delimiter(")>delimiter(})>

comment(-- Creates main menu with two submenus)
ident(menu) operator(=) ident(iup)operator(.)ident(menu) map<delimiter({)ident(submenu_file)operator(,) ident(submenu_text)delimiter(})>
                                
comment(-- Creates dialog with a text, sets its title and associates a menu to it )
ident(dlg) operator(=) ident(iup)operator(.)ident(dialog)map<delimiter({)ident(text)operator(;) key(title)operator(=)string<delimiter(")content(IupMenu Example)delimiter(")>operator(,) key(menu)operator(=)ident(menu)delimiter(})>

comment(-- Shows dialog in the center of the screen )
ident(dlg)operator(:)ident(showxy)operator(()ident(iup)operator(.)ident(CENTER)operator(,)ident(iup)operator(.)ident(CENTER)operator(\))


ident(l) operator(=) ident(iup)operator(.)ident(list)map<delimiter({)key(dropdown)operator(=)string<delimiter(")content(YES)delimiter(")>delimiter(})> 

ident(iup)operator(.)ident(SetAttribute)operator(()ident(l)operator(,) string<delimiter(")content(1)delimiter(")>operator(,) string<delimiter(")content(HELVETICA_NORMAL_8)delimiter(")>operator(\)) 
ident(iup)operator(.)ident(SetAttribute)operator(()ident(l)operator(,) string<delimiter(")content(2)delimiter(")>operator(,) string<delimiter(")content(COURIER_NORMAL_8)delimiter(")>operator(\)) 
ident(iup)operator(.)ident(SetAttribute)operator(()ident(l)operator(,) string<delimiter(")content(3)delimiter(")>operator(,) string<delimiter(")content(TIMES_NORMAL_8)delimiter(")>operator(\)) 
ident(iup)operator(.)ident(SetAttribute)operator(()ident(l)operator(,) string<delimiter(")content(4)delimiter(")>operator(,) string<delimiter(")content(HELVETICA_ITALIC_8)delimiter(")>operator(\)) 
ident(iup)operator(.)ident(SetAttribute)operator(()ident(l)operator(,) string<delimiter(")content(5)delimiter(")>operator(,) string<delimiter(")content(COURIER_ITALIC_8)delimiter(")>operator(\)) 
ident(iup)operator(.)ident(SetAttribute)operator(()ident(l)operator(,) string<delimiter(")content(6)delimiter(")>operator(,) string<delimiter(")content(TIMES_ITALIC_8)delimiter(")>operator(\)) 
ident(iup)operator(.)ident(SetAttribute)operator(()ident(l)operator(,) string<delimiter(")content(7)delimiter(")>operator(,) string<delimiter(")content(HELVETICA_BOLD_8)delimiter(")>operator(\)) 
ident(iup)operator(.)ident(SetAttribute)operator(()ident(l)operator(,) string<delimiter(")content(8)delimiter(")>operator(,) string<delimiter(")content(COURIER_BOLD_8)delimiter(")>operator(\)) 
ident(iup)operator(.)ident(SetAttribute)operator(()ident(l)operator(,) string<delimiter(")content(9)delimiter(")>operator(,) string<delimiter(")content(TIMES_BOLD_8)delimiter(")>operator(\)) 
ident(iup)operator(.)ident(SetAttribute)operator(()ident(l)operator(,) string<delimiter(")content(10)delimiter(")>operator(,) string<delimiter(")content(HELVETICA_NORMAL_10)delimiter(")>operator(\)) 
ident(iup)operator(.)ident(SetAttribute)operator(()ident(l)operator(,) string<delimiter(")content(11)delimiter(")>operator(,) string<delimiter(")content(COURIER_NORMAL_10)delimiter(")>operator(\)) 
ident(iup)operator(.)ident(SetAttribute)operator(()ident(l)operator(,) string<delimiter(")content(12)delimiter(")>operator(,) string<delimiter(")content(TIMES_NORMAL_10)delimiter(")>operator(\)) 
ident(iup)operator(.)ident(SetAttribute)operator(()ident(l)operator(,) string<delimiter(")content(13)delimiter(")>operator(,) string<delimiter(")content(HELVETICA_ITALIC_10)delimiter(")>operator(\)) 
ident(iup)operator(.)ident(SetAttribute)operator(()ident(l)operator(,) string<delimiter(")content(14)delimiter(")>operator(,) string<delimiter(")content(COURIER_ITALIC_10)delimiter(")>operator(\)) 
ident(iup)operator(.)ident(SetAttribute)operator(()ident(l)operator(,) string<delimiter(")content(15)delimiter(")>operator(,) string<delimiter(")content(TIMES_ITALIC_10)delimiter(")>operator(\)) 
ident(iup)operator(.)ident(SetAttribute)operator(()ident(l)operator(,) string<delimiter(")content(16)delimiter(")>operator(,) string<delimiter(")content(HELVETICA_BOLD_10)delimiter(")>operator(\)) 
ident(iup)operator(.)ident(SetAttribute)operator(()ident(l)operator(,) string<delimiter(")content(17)delimiter(")>operator(,) string<delimiter(")content(COURIER_BOLD_10)delimiter(")>operator(\)) 
ident(iup)operator(.)ident(SetAttribute)operator(()ident(l)operator(,) string<delimiter(")content(18)delimiter(")>operator(,) string<delimiter(")content(TIMES_BOLD_10)delimiter(")>operator(\)) 
ident(iup)operator(.)ident(SetAttribute)operator(()ident(l)operator(,) string<delimiter(")content(19)delimiter(")>operator(,) string<delimiter(")content(HELVETICA_NORMAL_12)delimiter(")>operator(\)) 
ident(iup)operator(.)ident(SetAttribute)operator(()ident(l)operator(,) string<delimiter(")content(20)delimiter(")>operator(,) string<delimiter(")content(COURIER_NORMAL_12)delimiter(")>operator(\)) 
ident(iup)operator(.)ident(SetAttribute)operator(()ident(l)operator(,) string<delimiter(")content(21)delimiter(")>operator(,) string<delimiter(")content(TIMES_NORMAL_12)delimiter(")>operator(\)) 
ident(iup)operator(.)ident(SetAttribute)operator(()ident(l)operator(,) string<delimiter(")content(22)delimiter(")>operator(,) string<delimiter(")content(HELVETICA_ITALIC_12)delimiter(")>operator(\)) 
ident(iup)operator(.)ident(SetAttribute)operator(()ident(l)operator(,) string<delimiter(")content(23)delimiter(")>operator(,) string<delimiter(")content(COURIER_ITALIC_12)delimiter(")>operator(\)) 
ident(iup)operator(.)ident(SetAttribute)operator(()ident(l)operator(,) string<delimiter(")content(24)delimiter(")>operator(,) string<delimiter(")content(TIMES_ITALIC_12)delimiter(")>operator(\)) 
ident(iup)operator(.)ident(SetAttribute)operator(()ident(l)operator(,) string<delimiter(")content(25)delimiter(")>operator(,) string<delimiter(")content(HELVETICA_BOLD_12)delimiter(")>operator(\)) 
ident(iup)operator(.)ident(SetAttribute)operator(()ident(l)operator(,) string<delimiter(")content(26)delimiter(")>operator(,) string<delimiter(")content(COURIER_BOLD_12)delimiter(")>operator(\)) 
ident(iup)operator(.)ident(SetAttribute)operator(()ident(l)operator(,) string<delimiter(")content(27)delimiter(")>operator(,) string<delimiter(")content(TIMES_BOLD_12)delimiter(")>operator(\)) 
ident(iup)operator(.)ident(SetAttribute)operator(()ident(l)operator(,) string<delimiter(")content(28)delimiter(")>operator(,) string<delimiter(")content(HELVETICA_NORMAL_14)delimiter(")>operator(\)) 
ident(iup)operator(.)ident(SetAttribute)operator(()ident(l)operator(,) string<delimiter(")content(29)delimiter(")>operator(,) string<delimiter(")content(COURIER_NORMAL_14)delimiter(")>operator(\)) 
ident(iup)operator(.)ident(SetAttribute)operator(()ident(l)operator(,) string<delimiter(")content(30)delimiter(")>operator(,) string<delimiter(")content(TIMES_NORMAL_14)delimiter(")>operator(\)) 
ident(iup)operator(.)ident(SetAttribute)operator(()ident(l)operator(,) string<delimiter(")content(31)delimiter(")>operator(,) string<delimiter(")content(HELVETICA_ITALIC_14)delimiter(")>operator(\)) 
ident(iup)operator(.)ident(SetAttribute)operator(()ident(l)operator(,) string<delimiter(")content(32)delimiter(")>operator(,) string<delimiter(")content(COURIER_ITALIC_14)delimiter(")>operator(\)) 
ident(iup)operator(.)ident(SetAttribute)operator(()ident(l)operator(,) string<delimiter(")content(33)delimiter(")>operator(,) string<delimiter(")content(TIMES_ITALIC_14)delimiter(")>operator(\)) 
ident(iup)operator(.)ident(SetAttribute)operator(()ident(l)operator(,) string<delimiter(")content(34)delimiter(")>operator(,) string<delimiter(")content(HELVETICA_BOLD_14)delimiter(")>operator(\)) 
ident(iup)operator(.)ident(SetAttribute)operator(()ident(l)operator(,) string<delimiter(")content(35)delimiter(")>operator(,) string<delimiter(")content(COURIER_BOLD_14)delimiter(")>operator(\)) 
ident(iup)operator(.)ident(SetAttribute)operator(()ident(l)operator(,) string<delimiter(")content(36)delimiter(")>operator(,) string<delimiter(")content(TIMES_BOLD_14)delimiter(")>operator(\)) 

ident(dg) operator(=) ident(iup)operator(.)ident(dialog)map<delimiter({)ident(l)delimiter(})> 
ident(dg)operator(.)ident(title) operator(=) string<delimiter(")content(title)delimiter(")> 

ident(dg2) operator(=) predefined_constant(nil) 

ident(l)operator(.)ident(action) operator(=) keyword(function)operator((self, t, i ,v\)) 

  keyword(if) ident(dg2) keyword(then) 
    ident(iup)operator(.)ident(Hide)operator(()ident(dg2)operator(\)) 
  keyword(end) 

  keyword(if) ident(v) operator(=)operator(=) integer(1) keyword(then) 
    ident(ml) operator(=) ident(iup)operator(.)ident(multiline)map<delimiter({)delimiter(})> 
    ident(ml)operator(.)ident(size) operator(=) string<delimiter(")content(200x200)delimiter(")> 
    ident(ml)operator(.)ident(value) operator(=) string<delimiter(")content(1234)char(\\n)content(mmmmm)char(\\n)content(iiiii)delimiter(")> 

    ident(ml)operator(.)ident(font) operator(=) ident(t) 

    ident(dg2) operator(=) ident(iup)operator(.)ident(dialog)map<delimiter({)ident(ml)delimiter(})> 
    ident(dg2)operator(.)ident(title) operator(=) ident(t) 
    ident(dg2)operator(:)ident(show)operator(()operator(\)) 
    ident(iup)operator(.)ident(SetFocus)operator(()ident(l)operator(\)) 
  keyword(end) 
keyword(end) 

ident(dg)operator(:)ident(show)operator(()operator(\)) 
comment(--  IupMultiline Simple Example in IupLua )
comment(--  Shows a multiline that ignores the treatment of the DEL key, canceling its effect. )

ident(ml) operator(=) ident(iup)operator(.)ident(multiline)map<delimiter({)key(expand)operator(=)string<delimiter(")content(YES)delimiter(")>operator(,) key(value)operator(=)string<delimiter(")content(I ignore the DEL key!)delimiter(")>operator(,) key(border)operator(=)string<delimiter(")content(YES)delimiter(")>delimiter(})>

ident(ml)operator(.)ident(action) operator(=) keyword(function)operator((self, c, after\))
   keyword(if) ident(c) operator(=)operator(=) ident(iup)operator(.)ident(K_DEL) keyword(then)
     keyword(return) ident(iup)operator(.)ident(IGNORE)
  keyword(else)
    keyword(return) ident(iup)operator(.)ident(DEFAULT)operator(;)
  keyword(end)
keyword(end)

ident(dlg) operator(=) ident(iup)operator(.)ident(dialog)map<delimiter({)ident(ml)operator(;) key(title)operator(=)string<delimiter(")content(IupMultiline)delimiter(")>operator(,) key(size)operator(=)string<delimiter(")content(QUARTERxQUARTER)delimiter(")>delimiter(})>
ident(dlg)operator(:)ident(show)operator(()operator(\))comment(-- IupRadio Example in IupLua )
comment(-- Creates a dialog for the user to select his/her gender. )
comment(-- In this case, the radio element is essential to prevent the user from )
comment(-- selecting both options. )

ident(male) operator(=) ident(iup)operator(.)ident(toggle)map<delimiter({)key(title)operator(=)string<delimiter(")content(Male)delimiter(")>delimiter(})>
ident(female) operator(=) ident(iup)operator(.)ident(toggle)map<delimiter({)key(title)operator(=)string<delimiter(")content(Female)delimiter(")>delimiter(})>
ident(exclusive) operator(=) ident(iup)operator(.)ident(radio)
map<delimiter({)
  ident(iup)operator(.)ident(vbox)
  map<inline_delimiter({)
    ident(male)operator(,)
    ident(female)
  inline_delimiter(})>operator(;)
  key(value)operator(=)ident(female)operator(,)
  key(tip)operator(=)string<delimiter(")content(Two state button - Exclusive - RADIO)delimiter(")>
delimiter(})>

ident(frame) operator(=) ident(iup)operator(.)ident(frame)map<delimiter({)ident(exclusive)operator(;) key(title)operator(=)string<delimiter(")content(Gender)delimiter(")>delimiter(})>

ident(dialog) operator(=) ident(iup)operator(.)ident(dialog)
map<delimiter({)
  ident(iup)operator(.)ident(hbox)
  map<inline_delimiter({)
    ident(iup)operator(.)ident(fill)map<inline_delimiter({)inline_delimiter(})>operator(,)
    ident(frame)operator(,)
    ident(iup)operator(.)ident(fill)map<inline_delimiter({)inline_delimiter(})>
  inline_delimiter(})>operator(;)
  key(title)operator(=)string<delimiter(")content(IupRadio)delimiter(")>operator(,)
  key(size)operator(=)integer(140)operator(,)
  key(resize)operator(=)string<delimiter(")content(NO)delimiter(")>operator(,)
  key(minbox)operator(=)string<delimiter(")content(NO)delimiter(")>operator(,)
  key(maxbox)operator(=)string<delimiter(")content(NO)delimiter(")>
delimiter(})>

ident(dialog)operator(:)ident(show)operator(()operator(\))comment(-- IupSeparator Example in IupLua )
comment(-- Creates a dialog with a menu and some items. )
comment(-- A IupSeparator was used to separate the menu items. )

comment(-- Creates a text, sets its value and turns on text readonly mode )
ident(text) operator(=) ident(iup)operator(.)ident(text) map<delimiter({)key(value) operator(=) string<delimiter(")content(This text is here only to compose)delimiter(")>operator(,) key(expand) operator(=) string<delimiter(")content(YES)delimiter(")>delimiter(})>

comment(-- Creates six items)
ident(item_new) operator(=) ident(iup)operator(.)ident(item) map<delimiter({)key(title) operator(=) string<delimiter(")content(New)delimiter(")>delimiter(})>
ident(item_open) operator(=) ident(iup)operator(.)ident(item) map<delimiter({)key(title) operator(=) string<delimiter(")content(Open)delimiter(")>delimiter(})>
ident(item_close) operator(=) ident(iup)operator(.)ident(item) map<delimiter({)key(title) operator(=) string<delimiter(")content(Close)delimiter(")>delimiter(})>
ident(item_pagesetup) operator(=) ident(iup)operator(.)ident(item) map<delimiter({)key(title) operator(=) string<delimiter(")content(Page Setup)delimiter(")>delimiter(})>
ident(item_print) operator(=) ident(iup)operator(.)ident(item) map<delimiter({)key(title) operator(=) string<delimiter(")content(Print)delimiter(")>delimiter(})>
ident(item_exit) operator(=) ident(iup)operator(.)ident(item) map<delimiter({)key(title) operator(=) string<delimiter(")content(Exit)delimiter(")>operator(,) key(action)operator(=)string<delimiter(")content(return iup.CLOSE)delimiter(")>delimiter(})>

comment(-- Creates file menus)
ident(menu_file) operator(=) ident(iup)operator(.)ident(menu) map<delimiter({)ident(item_new)operator(,) ident(item_open)operator(,) ident(item_close)operator(,) ident(iup)operator(.)ident(separator)map<inline_delimiter({)inline_delimiter(})>operator(,) ident(item_pagesetup)operator(,) ident(item_print)operator(,) ident(iup)operator(.)ident(separator)map<inline_delimiter({)inline_delimiter(})>operator(,) ident(item_exit) delimiter(})>

comment(-- Creates file submenus)
ident(submenu_file) operator(=) ident(iup)operator(.)ident(submenu) map<delimiter({)ident(menu_file)operator(;) key(title)operator(=)string<delimiter(")content(File)delimiter(")>delimiter(})>

comment(-- Creates main menu with file submenu)
ident(menu) operator(=) ident(iup)operator(.)ident(menu) map<delimiter({)ident(submenu_file)delimiter(})>
                                
comment(-- Creates dialog with a text, sets its title and associates a menu to it )
ident(dlg) operator(=) ident(iup)operator(.)ident(dialog) map<delimiter({)ident(text)
      operator(;) key(title) operator(=)string<delimiter(")content(IupSeparator Example)delimiter(")>operator(,) key(menu) operator(=) ident(menu)operator(,) key(size) operator(=) string<delimiter(")content(QUARTERxEIGHTH)delimiter(")>delimiter(})>

comment(-- Shows dialog in the center of the screen )
ident(dlg)operator(:)ident(showxy)operator(()ident(iup)operator(.)ident(CENTER)operator(,)ident(iup)operator(.)ident(CENTER)operator(\))comment(-- IupSubmenu Example in IupLua )
comment(-- Creates a dialog with a menu with three submenus. One of the submenus has a submenu, which has another submenu. )

comment(-- Creates a text, sets its value and turns on text readonly mode )
ident(text) operator(=) ident(iup)operator(.)ident(text) map<delimiter({)key(value) operator(=) string<delimiter(")content(This text is here only to compose)delimiter(")>operator(,) key(expand) operator(=) string<delimiter(")content(YES)delimiter(")>delimiter(})>

comment(-- Creates items of menu file)
ident(item_new) operator(=) ident(iup)operator(.)ident(item) map<delimiter({)key(title) operator(=) string<delimiter(")content(New)delimiter(")>delimiter(})>
ident(item_open) operator(=) ident(iup)operator(.)ident(item) map<delimiter({)key(title) operator(=) string<delimiter(")content(Open)delimiter(")>delimiter(})>
ident(item_close) operator(=) ident(iup)operator(.)ident(item) map<delimiter({)key(title) operator(=) string<delimiter(")content(Close)delimiter(")>delimiter(})>
ident(item_exit) operator(=) ident(iup)operator(.)ident(item) map<delimiter({)key(title) operator(=) string<delimiter(")content(Exit)delimiter(")>delimiter(})>

comment(-- Creates items of menu edit)
ident(item_copy) operator(=) ident(iup)operator(.)ident(item) map<delimiter({)key(title) operator(=) string<delimiter(")content(Copy)delimiter(")>delimiter(})>
ident(item_paste) operator(=) ident(iup)operator(.)ident(item) map<delimiter({)key(title) operator(=) string<delimiter(")content(Paste)delimiter(")>delimiter(})>

comment(-- Creates items for menu triangle)
ident(item_equilateral) operator(=) ident(iup)operator(.)ident(item) map<delimiter({)key(title) operator(=) string<delimiter(")content(Equilateral)delimiter(")>delimiter(})>
ident(item_isoceles) operator(=) ident(iup)operator(.)ident(item) map<delimiter({)key(title) operator(=) string<delimiter(")content(Isoceles)delimiter(")>delimiter(})>
ident(item_scalenus) operator(=) ident(iup)operator(.)ident(item) map<delimiter({)key(title) operator(=) string<delimiter(")content(Scalenus)delimiter(")>delimiter(})>

comment(-- Creates menu triangle)
ident(menu_triangle) operator(=) ident(iup)operator(.)ident(menu) map<delimiter({)ident(item_equilateral)operator(,) ident(item_isoceles)operator(,) ident(item_scalenus)delimiter(})>

comment(-- Creates submenu triangle)
ident(submenu_triangle) operator(=) ident(iup)operator(.)ident(submenu) map<delimiter({)ident(menu_triangle)operator(;) key(title) operator(=) string<delimiter(")content(Triangle)delimiter(")>delimiter(})>

comment(-- Creates items of menu create)
ident(item_line) operator(=) ident(iup)operator(.)ident(item) map<delimiter({)key(title) operator(=) string<delimiter(")content(Line)delimiter(")>delimiter(})>
ident(item_circle) operator(=) ident(iup)operator(.)ident(item) map<delimiter({)key(title) operator(=) string<delimiter(")content(Circle)delimiter(")>delimiter(})>

comment(-- Creates menu create)
ident(menu_create) operator(=) ident(iup)operator(.)ident(menu) map<delimiter({)ident(item_line)operator(,) ident(item_circle)operator(,) ident(submenu_triangle)delimiter(})>

comment(-- Creates submenu create)
ident(submenu_create) operator(=) ident(iup)operator(.)ident(submenu) map<delimiter({)ident(menu_create)operator(;) key(title) operator(=) string<delimiter(")content(Create)delimiter(")>delimiter(})>

comment(-- Creates items of menu help)
ident(item_help) operator(=) ident(iup)operator(.)ident(item) map<delimiter({)key(title) operator(=) string<delimiter(")content(Help)delimiter(")>delimiter(})>

comment(-- Creates menus of the main menu)
ident(menu_file) operator(=) ident(iup)operator(.)ident(menu) map<delimiter({)ident(item_new)operator(,) ident(item_open)operator(,) ident(item_close)operator(,) ident(iup)operator(.)ident(separator)map<inline_delimiter({)inline_delimiter(})>operator(,) ident(item_exit) delimiter(})>
ident(menu_edit) operator(=) ident(iup)operator(.)ident(menu) map<delimiter({)ident(item_copy)operator(,) ident(item_paste)operator(,) ident(iup)operator(.)ident(separator)map<inline_delimiter({)inline_delimiter(})>operator(,) ident(submenu_create)delimiter(})>
ident(menu_help) operator(=) ident(iup)operator(.)ident(menu) map<delimiter({)ident(item_help)delimiter(})>

comment(-- Creates submenus of the main menu)
ident(submenu_file) operator(=) ident(iup)operator(.)ident(submenu) map<delimiter({)ident(menu_file)operator(;) key(title) operator(=) string<delimiter(")content(File)delimiter(")>delimiter(})>
ident(submenu_edit) operator(=) ident(iup)operator(.)ident(submenu) map<delimiter({)ident(menu_edit)operator(;) key(title) operator(=) string<delimiter(")content(Edit)delimiter(")>delimiter(})>
ident(submenu_help) operator(=) ident(iup)operator(.)ident(submenu) map<delimiter({)ident(menu_help)operator(;) key(title) operator(=) string<delimiter(")content(Help)delimiter(")>delimiter(})>

comment(-- Creates main menu with file submenu)
ident(menu) operator(=) ident(iup)operator(.)ident(menu) map<delimiter({)ident(submenu_file)operator(,) ident(submenu_edit)operator(,) ident(submenu_help)delimiter(})>
                                
comment(-- Creates dialog with a text, sets its title and associates a menu to it )
ident(dlg) operator(=) ident(iup)operator(.)ident(dialog) map<delimiter({)ident(text)
      operator(;) key(title) operator(=)string<delimiter(")content(IupSubmenu Example)delimiter(")>operator(,) key(menu) operator(=) ident(menu)operator(,) key(size) operator(=) string<delimiter(")content(QUARTERxEIGHTH)delimiter(")>delimiter(})>

comment(-- Shows dialog in the center of the screen )
ident(dlg)operator(:)ident(showxy) operator(()ident(iup)operator(.)ident(CENTER)operator(,)ident(iup)operator(.)ident(CENTER)operator(\))

keyword(function) ident(item_help:)function(action) operator(()operator(\))
  ident(iup)operator(.)ident(Message) operator(()string<delimiter(")content(Warning)delimiter(")>operator(,) string<delimiter(")content(Only Help and Exit items performs an operation)delimiter(")>operator(\))
  keyword(return) ident(iup)operator(.)ident(DEFAULT)
keyword(end)

keyword(function) ident(item_exit:)function(action) operator(()operator(\))
  keyword(return) ident(iup)operator(.)ident(CLOSE)
keyword(end)comment(-- IupText Example in IupLua )
comment(-- Allows the user to execute a Lua command)

ident(text) operator(=) ident(iup)operator(.)ident(text)map<delimiter({)key(value) operator(=) string<delimiter(")content(Write a text; press Ctrl-Q to exit)delimiter(")>delimiter(})>

keyword(function) ident(text:)function(action)operator(()ident(c)operator(\))
  keyword(if) ident(c) operator(=)operator(=) ident(iup)operator(.)ident(K_cQ) keyword(then) 
    keyword(return) ident(iup)operator(.)ident(CLOSE) 
  keyword(end)
  keyword(return) ident(iup)operator(.)ident(DEFAULT)
keyword(end)

ident(dlg) operator(=) ident(iup)operator(.)ident(dialog)map<delimiter({)ident(text)operator(;) key(title)operator(=)string<delimiter(")content(IupText)delimiter(")>delimiter(})>

ident(dlg)operator(:)ident(showxy)operator(()ident(iup)operator(.)ident(CENTER)operator(,) ident(iup)operator(.)ident(CENTER)operator(\))
ident(iup)operator(.)ident(SetFocus)operator(()ident(text)operator(\))
comment(-- IupTimer Example in Lua)

ident(timer1) operator(=) ident(iup)operator(.)ident(timer)map<delimiter({)key(time)operator(=)integer(100)delimiter(})>
ident(timer2) operator(=) ident(iup)operator(.)ident(timer)map<delimiter({)key(time)operator(=)integer(2000)delimiter(})>

keyword(function) ident(timer1:)function(action_cb)operator(()operator(\))
  predefined(print)operator(()string<delimiter(")content(timer 1 called)delimiter(")>operator(\))
  keyword(return) ident(iup)operator(.)ident(DEFAULT)
keyword(end)

keyword(function) ident(timer2:)function(action_cb)operator(()operator(\))
  predefined(print)operator(()string<delimiter(")content(timer 2 called)delimiter(")>operator(\))
  keyword(return) ident(iup)operator(.)ident(CLOSE)
keyword(end)

comment(-- can only be set after the time is created)
ident(timer1)operator(.)ident(run) operator(=) string<delimiter(")content(YES)delimiter(")>
ident(timer2)operator(.)ident(run) operator(=) string<delimiter(")content(YES)delimiter(")>

ident(dg) operator(=) ident(iup)operator(.)ident(dialog)map<delimiter({)ident(iup)operator(.)ident(label)map<inline_delimiter({)key(title)operator(=)string<delimiter(")content(Timer example)delimiter(")>inline_delimiter(})>delimiter(})>
ident(dg)operator(:)ident(show)operator(()operator(\))
comment(-- IupToggle Example in IupLua )
comment(-- Creates 9 toggles: )
comment(--   the first one has an image and an associated callback; )
comment(--   the second has an image and is deactivated; )
comment(--   the third is regular; )
comment(--   the fourth has its foreground color changed; )
comment(--   the fifth has its background color changed; )
comment(--   the sixth has its foreground and background colors changed; )
comment(--   the seventh is deactivated; )
comment(--   the eight has its font changed; )
comment(--   the ninth has its size changed. )

ident(img1) operator(=) ident(iup)operator(.)ident(image)map<delimiter({)
       map<inline_delimiter({)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)inline_delimiter(})>operator(,)
       map<inline_delimiter({)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)inline_delimiter(})>operator(,)
       map<inline_delimiter({)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(2)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)inline_delimiter(})>operator(,)
       map<inline_delimiter({)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(2)operator(,)integer(2)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)inline_delimiter(})>operator(,)
       map<inline_delimiter({)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(2)operator(,)integer(1)operator(,)integer(2)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)inline_delimiter(})>operator(,)
       map<inline_delimiter({)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(2)operator(,)integer(1)operator(,)integer(1)operator(,)integer(2)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)inline_delimiter(})>operator(,)
       map<inline_delimiter({)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(2)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)inline_delimiter(})>operator(,)
       map<inline_delimiter({)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(2)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)inline_delimiter(})>operator(,)
       map<inline_delimiter({)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(2)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)inline_delimiter(})>operator(,)
       map<inline_delimiter({)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(2)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)inline_delimiter(})>operator(,)
       map<inline_delimiter({)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(2)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)inline_delimiter(})>operator(,)
       map<inline_delimiter({)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(2)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)inline_delimiter(})>operator(,)
       map<inline_delimiter({)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(2)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)inline_delimiter(})>operator(,)
       map<inline_delimiter({)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)inline_delimiter(})>operator(,)
       map<inline_delimiter({)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)inline_delimiter(})>operator(,)
       map<inline_delimiter({)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)inline_delimiter(})>operator(;)
       key(colors) operator(=) map<inline_delimiter({)string<delimiter(")content(255 255 255)delimiter(")>operator(,) string<delimiter(")content(0 192 0)delimiter(")>inline_delimiter(})>
delimiter(})>

ident(img2) operator(=) ident(iup)operator(.)ident(image)map<delimiter({)
       map<inline_delimiter({)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)inline_delimiter(})>operator(,)
       map<inline_delimiter({)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)inline_delimiter(})>operator(,)
       map<inline_delimiter({)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)inline_delimiter(})>operator(,)
       map<inline_delimiter({)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(2)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(2)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)inline_delimiter(})>operator(,)
       map<inline_delimiter({)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(2)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)inline_delimiter(})>operator(,)
       map<inline_delimiter({)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(2)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)inline_delimiter(})>operator(,)
       map<inline_delimiter({)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(2)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)inline_delimiter(})>operator(,)
       map<inline_delimiter({)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(2)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)inline_delimiter(})>operator(,)
       map<inline_delimiter({)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(2)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)inline_delimiter(})>operator(,)
       map<inline_delimiter({)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(2)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)inline_delimiter(})>operator(,)
       map<inline_delimiter({)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(2)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)inline_delimiter(})>operator(,)
       map<inline_delimiter({)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(2)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)inline_delimiter(})>operator(,)
       map<inline_delimiter({)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(2)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)inline_delimiter(})>operator(,)
       map<inline_delimiter({)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(2)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)inline_delimiter(})>operator(,)
       map<inline_delimiter({)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)inline_delimiter(})>operator(,)
       map<inline_delimiter({)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)operator(,)integer(1)inline_delimiter(})>operator(;)
       key(colors) operator(=) map<inline_delimiter({)string<delimiter(")content(255 255 255)delimiter(")>operator(,) string<delimiter(")content(0 192 0)delimiter(")>inline_delimiter(})>
delimiter(})>

ident(toggle1) operator(=) ident(iup)operator(.)ident(toggle)map<delimiter({)key(title) operator(=) string<delimiter(")delimiter(")>operator(,) key(image) operator(=) ident(img1)delimiter(})>
ident(toggle2) operator(=) ident(iup)operator(.)ident(toggle)map<delimiter({)key(title) operator(=) string<delimiter(")content(deactivated toggle with image)delimiter(")>operator(,) key(image) operator(=) ident(img2)operator(,) key(active)operator(=)string<delimiter(")content(NO)delimiter(")>delimiter(})>
ident(toggle3) operator(=) ident(iup)operator(.)ident(toggle)map<delimiter({)key(title) operator(=) string<delimiter(")content(regular toggle)delimiter(")>delimiter(})>
ident(toggle4) operator(=) ident(iup)operator(.)ident(toggle)map<delimiter({)key(title) operator(=) string<delimiter(")content(toggle with blue foreground color)delimiter(")>operator(,) key(fgcolor) operator(=) ident(BLUE) delimiter(})>
ident(toggle5) operator(=) ident(iup)operator(.)ident(toggle)map<delimiter({)key(title) operator(=) string<delimiter(")content(toggle with red background color)delimiter(")>operator(,) key(bgcolor) operator(=) ident(RED) delimiter(})>
ident(toggle6) operator(=) ident(iup)operator(.)ident(toggle)map<delimiter({)key(title) operator(=) string<delimiter(")content(toggle with black backgrounf color and green foreground color)delimiter(")>operator(,) key(fgcolor) operator(=) ident(GREEN)operator(,) key(bgcolor) operator(=) ident(BLACK) delimiter(})>
ident(toggle7) operator(=) ident(iup)operator(.)ident(toggle)map<delimiter({)key(title) operator(=) string<delimiter(")content(deactivated toggle)delimiter(")>operator(,) key(active) operator(=) string<delimiter(")content(NO)delimiter(")> delimiter(})>
ident(toggle8) operator(=) ident(iup)operator(.)ident(toggle)map<delimiter({)key(title) operator(=) string<delimiter(")content(toggle with Courier 14 Bold font)delimiter(")>operator(,) key(font) operator(=) string<delimiter(")content(COURIER_BOLD_14)delimiter(")> delimiter(})>
ident(toggle9) operator(=) ident(iup)operator(.)ident(toggle)map<delimiter({)key(title) operator(=) string<delimiter(")content(toggle with size EIGHTxEIGHT)delimiter(")>operator(,) key(size) operator(=) string<delimiter(")content(EIGHTHxEIGHTH)delimiter(")> delimiter(})>

keyword(function) ident(toggle1:)function(action)operator(()ident(v)operator(\))
   keyword(if) ident(v) operator(=)operator(=) integer(1) keyword(then) ident(estado) operator(=) string<delimiter(")content(pressed)delimiter(")> keyword(else) ident(estado) operator(=) string<delimiter(")content(released)delimiter(")> keyword(end)
   ident(iup)operator(.)ident(Message)operator(()string<delimiter(")content(Toggle 1)delimiter(")>operator(,)ident(estado)operator(\))
keyword(end)

ident(box) operator(=) ident(iup)operator(.)ident(vbox)map<delimiter({) 
                 ident(toggle1)operator(,)
                 ident(toggle2)operator(,)
                 ident(toggle3)operator(,)
                 ident(toggle4)operator(,)
                 ident(toggle5)operator(,)
                 ident(toggle6)operator(,)
                 ident(toggle7)operator(,)
                 ident(toggle8)operator(,)
                 ident(toggle9)
               delimiter(})>
                
ident(toggles) operator(=) ident(iup)operator(.)ident(radio)map<delimiter({)ident(box)operator(;) key(expand)operator(=)string<delimiter(")content(YES)delimiter(")>delimiter(})>
ident(dlg) operator(=) ident(iup)operator(.)ident(dialog)map<delimiter({)ident(toggles)operator(;) key(title) operator(=) string<delimiter(")content(IupToggle)delimiter(")>operator(,) key(margin)operator(=)string<delimiter(")content(5x5)delimiter(")>operator(,) key(gap)operator(=)string<delimiter(")content(5)delimiter(")>operator(,) key(resize)operator(=)string<delimiter(")content(NO)delimiter(")>delimiter(})>
ident(dlg)operator(:)ident(showxy)operator(()ident(iup)operator(.)ident(CENTER)operator(,) ident(iup)operator(.)ident(CENTER)operator(\))comment(-- IupVbox Example in IupLua )
comment(-- Creates a dialog with buttons placed one above the other, showing )
comment(-- the organization possibilities of the elements inside a vbox. )
comment(-- The ALIGNMENT attribute is explored in all its possibilities to obtain )
comment(-- the effects. The attributes GAP, MARGIN and SIZE are also tested. )

comment(-- Creates frame 1)
ident(frm_1) operator(=) ident(iup)operator(.)ident(frame)
map<delimiter({)
  ident(iup)operator(.)ident(hbox)
  map<inline_delimiter({)
    ident(iup)operator(.)ident(fill) map<inline_delimiter({)inline_delimiter(})>operator(,)
    ident(iup)operator(.)ident(vbox)
    map<inline_delimiter({)
      ident(iup)operator(.)ident(button) map<inline_delimiter({)key(title) operator(=) string<delimiter(")content(1)delimiter(")>operator(,) key(size) operator(=) string<delimiter(")content(20x30)delimiter(")>operator(,) key(action) operator(=) string<delimiter(")delimiter(")>inline_delimiter(})>operator(,)
      ident(iup)operator(.)ident(button) map<inline_delimiter({)key(title) operator(=) string<delimiter(")content(2)delimiter(")>operator(,) key(size) operator(=) string<delimiter(")content(30x30)delimiter(")>operator(,) key(action) operator(=) string<delimiter(")delimiter(")>inline_delimiter(})>operator(,)
      ident(iup)operator(.)ident(button) map<inline_delimiter({)key(title) operator(=) string<delimiter(")content(3)delimiter(")>operator(,) key(size) operator(=) string<delimiter(")content(40x30)delimiter(")>operator(,) key(action) operator(=) string<delimiter(")delimiter(")>inline_delimiter(})> operator(;)
      comment(-- Sets alignment and gap of vbox)
      key(alignment) operator(=) string<delimiter(")content(ALEFT)delimiter(")>operator(,) key(gap) operator(=) integer(10)
    inline_delimiter(})>operator(,)
    ident(iup)operator(.)ident(fill) map<inline_delimiter({)inline_delimiter(})>
  inline_delimiter(})> operator(;)
  comment(-- Sets title of frame 1)
  key(title) operator(=) string<delimiter(")content(ALIGNMENT = ALEFT, GAP = 10)delimiter(")>
delimiter(})>

comment(-- Creates frame 2)
ident(frm_2) operator(=) ident(iup)operator(.)ident(frame)
map<delimiter({)
  ident(iup)operator(.)ident(hbox)
  map<inline_delimiter({)
    ident(iup)operator(.)ident(fill) map<inline_delimiter({)inline_delimiter(})>operator(,)
    ident(iup)operator(.)ident(vbox)
    map<inline_delimiter({)
      ident(iup)operator(.)ident(button) map<inline_delimiter({)key(title) operator(=) string<delimiter(")content(1)delimiter(")>operator(,) key(size) operator(=) string<delimiter(")content(20x30)delimiter(")>operator(,) key(action) operator(=) string<delimiter(")delimiter(")>inline_delimiter(})>operator(,)
      ident(iup)operator(.)ident(button) map<inline_delimiter({)key(title) operator(=) string<delimiter(")content(2)delimiter(")>operator(,) key(size) operator(=) string<delimiter(")content(30x30)delimiter(")>operator(,) key(action) operator(=) string<delimiter(")delimiter(")>inline_delimiter(})>operator(,)
      ident(iup)operator(.)ident(button) map<inline_delimiter({)key(title) operator(=) string<delimiter(")content(3)delimiter(")>operator(,) key(size) operator(=) string<delimiter(")content(40x30)delimiter(")>operator(,) key(action) operator(=) string<delimiter(")delimiter(")>inline_delimiter(})> operator(;)
      comment(-- Sets alignment and margin of vbox)
      key(alignment) operator(=) string<delimiter(")content(ACENTER)delimiter(")>operator(,)
    inline_delimiter(})>operator(,)
    ident(iup)operator(.)ident(fill) map<inline_delimiter({)inline_delimiter(})>
  inline_delimiter(})> operator(;)
  comment(-- Sets title of frame 1)
  key(title) operator(=) string<delimiter(")content(ALIGNMENT = ACENTER)delimiter(")>
delimiter(})>

comment(-- Creates frame 3)
ident(frm_3) operator(=) ident(iup)operator(.)ident(frame)
map<delimiter({)
  ident(iup)operator(.)ident(hbox)
  map<inline_delimiter({)
    ident(iup)operator(.)ident(fill) map<inline_delimiter({)inline_delimiter(})>operator(,)
    ident(iup)operator(.)ident(vbox)
    map<inline_delimiter({)
      ident(iup)operator(.)ident(button) map<inline_delimiter({)key(title) operator(=) string<delimiter(")content(1)delimiter(")>operator(,) key(size) operator(=) string<delimiter(")content(20x30)delimiter(")>operator(,) key(action) operator(=) string<delimiter(")delimiter(")>inline_delimiter(})>operator(,)
      ident(iup)operator(.)ident(button) map<inline_delimiter({)key(title) operator(=) string<delimiter(")content(2)delimiter(")>operator(,) key(size) operator(=) string<delimiter(")content(30x30)delimiter(")>operator(,) key(action) operator(=) string<delimiter(")delimiter(")>inline_delimiter(})>operator(,)
      ident(iup)operator(.)ident(button) map<inline_delimiter({)key(title) operator(=) string<delimiter(")content(3)delimiter(")>operator(,) key(size) operator(=) string<delimiter(")content(40x30)delimiter(")>operator(,) key(action) operator(=) string<delimiter(")delimiter(")>inline_delimiter(})> operator(;)
      comment(-- Sets alignment and size of vbox)
      key(alignment) operator(=) string<delimiter(")content(ARIGHT)delimiter(")>
    inline_delimiter(})>operator(,)
    ident(iup)operator(.)ident(fill) map<inline_delimiter({)inline_delimiter(})>
  inline_delimiter(})> operator(;)
  comment(-- Sets title of frame 3)
  key(title) operator(=) string<delimiter(")content(ALIGNMENT = ARIGHT)delimiter(")>
delimiter(})>

ident(dlg) operator(=) ident(iup)operator(.)ident(dialog)
map<delimiter({)
  ident(iup)operator(.)ident(vbox)
  map<inline_delimiter({)
    ident(frm_1)operator(,)
    ident(frm_2)operator(,)
    ident(frm_3)
  inline_delimiter(})> operator(;)
  key(title) operator(=) string<delimiter(")content(IupVbox Example)delimiter(")>operator(,) key(size) operator(=) string<delimiter(")content(QUARTER)delimiter(")>
delimiter(})>

comment(-- Shows dialog in the center of the screen)
ident(dlg)operator(:)ident(showxy) operator(()ident(iup)operator(.)ident(CENTER)operator(,) ident(iup)operator(.)ident(CENTER)operator(\))comment(-- IupZbox Example in IupLua )
comment(-- An application of a zbox could be a program requesting several entries from the user according to a previous selection. In this example, a list of possible layouts ,each one consisting of an element, is presented, and according to the selected option the dialog below the list is changed. )

ident(fill) operator(=) ident(iup)operator(.)ident(fill) map<delimiter({)delimiter(})>
ident(text) operator(=) ident(iup)operator(.)ident(text) map<delimiter({)key(value) operator(=) string<delimiter(")content(Enter your text here)delimiter(")>operator(,) key(expand) operator(=) string<delimiter(")content(YES)delimiter(")>delimiter(})>
ident(lbl)  operator(=) ident(iup)operator(.)ident(label) map<delimiter({)key(title) operator(=) string<delimiter(")content(This element is a label)delimiter(")>delimiter(})>
ident(btn)  operator(=) ident(iup)operator(.)ident(button) map<delimiter({)key(title) operator(=) string<delimiter(")content(This button does nothing)delimiter(")>delimiter(})>
ident(zbox) operator(=) ident(iup)operator(.)ident(zbox)
map<delimiter({)
  ident(fill)operator(,)
  ident(text)operator(,)
  ident(lbl)operator(,)
  ident(btn) operator(;)
  key(alignment) operator(=) string<delimiter(")content(ACENTER)delimiter(")>operator(,) key(value)operator(=)ident(text)
delimiter(})>

ident(list) operator(=) ident(iup)operator(.)ident(list) map<delimiter({) string<delimiter(")content(fill)delimiter(")>operator(,) string<delimiter(")content(text)delimiter(")>operator(,) string<delimiter(")content(lbl)delimiter(")>operator(,) string<delimiter(")content(btn)delimiter(")>operator(;) key(value)operator(=)string<delimiter(")content(2)delimiter(")>delimiter(})>
ident(ilist) operator(=) map<delimiter({)ident(fill)operator(,) ident(text)operator(,) ident(lbl)operator(,) ident(btn)delimiter(})>

keyword(function) ident(list:)function(action) operator(()ident(t)operator(,) ident(o)operator(,) ident(selected)operator(\))
  keyword(if) ident(selected) operator(=)operator(=) integer(1) keyword(then)
    comment(-- Sets the value of the zbox to the selected element )
    ident(zbox)operator(.)ident(value)operator(=)ident(ilist)operator([)ident(o)operator(])
  keyword(end)
  
  keyword(return) ident(iup)operator(.)ident(DEFAULT)
keyword(end)

ident(frm) operator(=) ident(iup)operator(.)ident(frame)
map<delimiter({)
  ident(iup)operator(.)ident(hbox)
  map<inline_delimiter({)
    ident(iup)operator(.)ident(fill)map<inline_delimiter({)inline_delimiter(})>operator(,)
    ident(list)operator(,)
    ident(iup)operator(.)ident(fill)map<inline_delimiter({)inline_delimiter(})>
  inline_delimiter(})> operator(;)
  key(title) operator(=) string<delimiter(")content(Select an element)delimiter(")>
delimiter(})>

ident(dlg) operator(=) ident(iup)operator(.)ident(dialog)
map<delimiter({)
  ident(iup)operator(.)ident(vbox)
  map<inline_delimiter({)
    ident(frm)operator(,)
    ident(zbox)
  inline_delimiter(})> operator(;)
  key(size) operator(=) string<delimiter(")content(QUARTER)delimiter(")>operator(,)
  key(title) operator(=) string<delimiter(")content(IupZbox Example)delimiter(")>
delimiter(})>

ident(dlg)operator(:)ident(showxy) operator(()integer(0)operator(,) integer(0)operator(\))
comment<delimiter(--[[)content(
JSON4Lua example script.
Demonstrates the simple functionality of the json module.
)delimiter(]])>comment(--)
ident(json) operator(=) ident(require)operator(()string<delimiter(')content(json)delimiter(')>operator(\))


comment(-- Object to JSON encode)
ident(test) operator(=) map<delimiter({)
  key(one)operator(=)string<delimiter(')content(first)delimiter(')>operator(,)key(two)operator(=)string<delimiter(')content(second)delimiter(')>operator(,)key(three)operator(=)map<inline_delimiter({)integer(2)operator(,)integer(3)operator(,)integer(5)inline_delimiter(})>
delimiter(})>

ident(jsonTest) operator(=) ident(json)operator(.)ident(encode)operator(()ident(test)operator(\))

predefined(print)operator(()string<delimiter(')content(JSON encoded test is: )delimiter(')> operator(.)operator(.) ident(jsonTest)operator(\))

comment(-- Now JSON decode the json string)
ident(result) operator(=) ident(json)operator(.)ident(decode)operator(()ident(jsonTest)operator(\))

predefined(print) operator(()string<delimiter(")content(The decoded table result:)delimiter(")>operator(\))
ident(table)operator(.)ident(foreach)operator(()ident(result)operator(,)predefined(print)operator(\))
predefined(print) operator(()string<delimiter(")content(The decoded table result.three)delimiter(")>operator(\))
ident(table)operator(.)ident(foreach)operator(()ident(result)operator(.)ident(three)operator(,) predefined(print)operator(\))
comment(--)
comment(-- jsonrpc.lua)
comment(-- Installed in a CGILua webserver environment (with necessary CGI Lua 5.0 patch\))
comment(--)
ident(require) operator(()string<delimiter(')content(json.rpcserver)delimiter(')>operator(\))

comment(-- The Lua class that is to serve JSON RPC requests)
keyword(local) local_variable(myServer) operator(=) map<delimiter({)
  key(echo) operator(=) keyword(function) operator((msg\)) keyword(return) ident(msg) keyword(end)operator(,)
  key(average) operator(=) keyword(function)operator((...\))
    keyword(local) local_variable(total)operator(=)integer(0)
    keyword(local) local_variable(count)operator(=)integer(0)
    keyword(for) key(i)operator(=)integer(1)operator(,) ident(table)operator(.)ident(getn)operator(()ident(arg)operator(\)) keyword(do)
      key(total) operator(=) ident(total) operator(+) ident(arg)operator([)ident(i)operator(])
      key(count) operator(=) ident(count) operator(+) integer(1)
    keyword(end)
    keyword(return) map<inline_delimiter({) key(average)operator(=) ident(total)operator(/)ident(count)operator(,) key(sum) operator(=) ident(total)operator(,) key(n)operator(=)ident(count) inline_delimiter(})>
  keyword(end)
delimiter(})>

ident(json)operator(.)ident(rpcserver)operator(.)ident(serve)operator(()ident(myServer)operator(\))comment<delimiter(--[[)content(
Some basic tests for JSON4Lua.
)delimiter(]])>comment(--)

comment(--- Compares two tables for being data-identical.)
keyword(function) function(compareData)operator(()ident(a)operator(,)ident(b)operator(\))
  keyword(if) operator(()predefined(type)operator(()ident(a)operator(\))operator(=)operator(=)string<delimiter(')content(string)delimiter(')> keyword(or) predefined(type)operator(()ident(a)operator(\))operator(=)operator(=)string<delimiter(')content(number)delimiter(')> keyword(or) predefined(type)operator(()ident(a)operator(\))operator(=)operator(=)string<delimiter(')content(boolean)delimiter(')> keyword(or) predefined(type)operator(()ident(a)operator(\))operator(=)operator(=)string<delimiter(')content(nil)delimiter(')>operator(\)) keyword(then) keyword(return) ident(a)operator(=)operator(=)ident(b) keyword(end)
  comment(-- After basic data types, we're only interested in tables)
  keyword(if) operator(()predefined(type)operator(()ident(a)operator(\))operator(~)operator(=)string<delimiter(')content(table)delimiter(')>operator(\)) keyword(then) keyword(return) predefined_constant(true) keyword(end)
  comment(-- Check that a has everything b has)
  keyword(for) ident(k)operator(,)ident(v) keyword(in) predefined(pairs)operator(()ident(b)operator(\)) keyword(do)
    keyword(if) operator(()keyword(not) ident(compareData)operator(() ident(a)operator([)ident(k)operator(])operator(,) ident(v) operator(\)) operator(\)) keyword(then) keyword(return) predefined_constant(false) keyword(end)
  keyword(end)
  keyword(for) ident(k)operator(,)ident(v) keyword(in) predefined(pairs)operator(()ident(a)operator(\)) keyword(do)
    keyword(if) operator(()keyword(not) ident(compareData)operator(() ident(v)operator(,) ident(b)operator([)ident(k)operator(]) operator(\)) operator(\)) keyword(then) keyword(return) predefined_constant(false) keyword(end)
  keyword(end)
  keyword(return) predefined_constant(true)
keyword(end)

comment(---)
comment(-- Checks that our compareData function works properly)
keyword(function) function(testCompareData)operator(()operator(\))
  ident(s) operator(=) string<delimiter(")content(name)delimiter(")>
  ident(r) operator(=) string<delimiter(")content(name)delimiter(")>
  predefined(assert)operator(()ident(compareData)operator(()ident(s)operator(,)ident(r)operator(\))operator(\))
  predefined(assert)operator(()keyword(not) ident(compareData)operator(()string<delimiter(')content(fred)delimiter(')>operator(,)ident(s)operator(\))operator(\))
  predefined(assert)operator(()keyword(not) ident(compareData)operator(()predefined_constant(nil)operator(,) ident(s)operator(\))operator(\))
  predefined(assert)operator(()keyword(not) ident(compareData)operator(()string<delimiter(")content(123)delimiter(")>operator(,)integer(123)operator(\))operator(\))
  predefined(assert)operator(()keyword(not) ident(compareData)operator(()predefined_constant(false)operator(,) predefined_constant(nil)operator(\))operator(\))
  predefined(assert)operator(()ident(compareData)operator(()predefined_constant(true)operator(,) predefined_constant(true)operator(\))operator(\))
  predefined(assert)operator(()ident(compareData)operator(()map<delimiter({)integer(1)operator(,)integer(2)operator(,)integer(3)delimiter(})>operator(,)map<delimiter({)integer(1)operator(,)integer(2)operator(,)integer(3)delimiter(})>operator(\))operator(\))
  predefined(assert)operator(()ident(compareData)operator(()map<delimiter({)string<delimiter(')content(one)delimiter(')>operator(,)integer(2)operator(,)string<delimiter(')content(three)delimiter(')>delimiter(})>operator(,)map<delimiter({)string<delimiter(')content(one)delimiter(')>operator(,)integer(2)operator(,)string<delimiter(')content(three)delimiter(')>delimiter(})>operator(\))operator(\))
  predefined(assert)operator(()keyword(not) ident(compareData)operator(()map<delimiter({)string<delimiter(')content(one)delimiter(')>operator(,)integer(2)operator(,)integer(4)delimiter(})>operator(,)map<delimiter({)integer(4)operator(,)integer(2)operator(,)string<delimiter(')content(one)delimiter(')>delimiter(})>operator(\))operator(\))
  predefined(assert)operator(()ident(compareData)operator(()map<delimiter({)key(one)operator(=)string<delimiter(')content(ichi)delimiter(')>operator(,)key(two)operator(=)string<delimiter(')content(nichi)delimiter(')>operator(,)key(three)operator(=)string<delimiter(')content(san)delimiter(')>delimiter(})>operator(,) map<delimiter({)key(three)operator(=)string<delimiter(')content(san)delimiter(')>operator(,)key(two)operator(=)string<delimiter(')content(nichi)delimiter(')>operator(,)key(one)operator(=)string<delimiter(')content(ichi)delimiter(')>delimiter(})>operator(\))operator(\))
  ident(s) operator(=) map<delimiter({) key(one)operator(=)map<inline_delimiter({)integer(1)operator(,)integer(2)operator(,)integer(3)inline_delimiter(})>operator(,) key(two)operator(=)map<inline_delimiter({)key(one)operator(=)string<delimiter(')content(hitotsu)delimiter(')>operator(,)key(two)operator(=)string<delimiter(')content(futatsu)delimiter(')>operator(,)key(three)operator(=)string<delimiter(')content(mitsu)delimiter(')>inline_delimiter(})> delimiter(})> 
  predefined(assert)operator(()ident(compareData)operator(()ident(s)operator(,)ident(s)operator(\))operator(\))
  ident(t) operator(=) map<delimiter({) key(one)operator(=)map<inline_delimiter({)integer(1)operator(,)integer(2)operator(,)integer(3)inline_delimiter(})>operator(,) key(two)operator(=)map<inline_delimiter({)key(one)operator(=)string<delimiter(')content(een)delimiter(')>operator(,)key(two)operator(=)string<delimiter(')content(twee)delimiter(')>operator(,)key(three)operator(=)string<delimiter(')content(drie)delimiter(')>inline_delimiter(})> delimiter(})> 
  predefined(assert)operator(()keyword(not) ident(compareData)operator(()ident(s)operator(,)ident(t)operator(\))operator(\))
keyword(end)

ident(testCompareData)operator(()operator(\))
  
comment(--)
comment(--)
comment(-- Performs some perfunctory tests on JSON module)
keyword(function) function(testJSON4Lua)operator(()operator(\))
  ident(json) operator(=) ident(require)operator(()string<delimiter(')content(json)delimiter(')>operator(\))
  
  keyword(if) predefined_constant(nil) keyword(then)
  comment(-- Test encodeString)
  ident(s) operator(=) string<delimiter([[)content("\\"
)delimiter(]])>
  ident(r) operator(=) ident(json)operator(.)ident(_encodeString)operator(()ident(s)operator(\))
  predefined(assert)operator(()ident(r)operator(=)operator(=)string<delimiter(')char(\\\\)content(")char(\\\\)char(\\\\)char(\\\\)content(")char(\\\\)content(n)delimiter(')>operator(\))
  ident(s) operator(=) string<delimiter([[)content("""\\\\\\")delimiter(]])>
  ident(r) operator(=) ident(json)operator(.)ident(_encodeString)operator(()ident(s)operator(\))
  predefined(assert)operator(()ident(r)operator(=)operator(=)string<delimiter([[)content(\\"\\"\\"\\\\\\\\\\\\\\")delimiter(]])>operator(\))
  
  keyword(end) 
  
  comment(-- Test encode for basic strings (complicated strings\))
  ident(s) operator(=) string<delimiter([[)content(Hello, Lua!)delimiter(]])>
  ident(r) operator(=) ident(json)operator(.)ident(encode)operator(()ident(s)operator(\))
  predefined(assert)operator(()ident(r)operator(=)operator(=)string<delimiter(')content("Hello, Lua!")delimiter(')>operator(\))
  ident(s) operator(=) string<delimiter([[)content("\\"
)delimiter(]])>
  ident(r) operator(=) ident(json)operator(.)ident(encode)operator(()ident(s)operator(\))
  predefined(assert)operator(()ident(r)operator(=)operator(=)string<delimiter(')char(\\")char(\\\\)content(")char(\\\\)char(\\\\)char(\\\\)content(")char(\\\\)content(n)char(\\")delimiter(')>operator(\))
  ident(s) operator(=) string<delimiter([[)content("""\\\\\\")delimiter(]])>
  ident(r) operator(=) ident(json)operator(.)ident(encode)operator(()ident(s)operator(\))
  predefined(assert)operator(()ident(r)operator(=)operator(=)string<delimiter([[)content("\\"\\"\\"\\\\\\\\\\\\\\"")delimiter(]])>operator(\))
  
  comment(-- Test encode for numeric values)
  ident(s) operator(=) integer(23)
  ident(r) operator(=) ident(json)operator(.)ident(encode)operator(()ident(s)operator(\))
  predefined(assert)operator(()ident(r)operator(=)operator(=)string<delimiter(')content(23)delimiter(')>operator(\))
  ident(s)operator(=)float(48.123)
  ident(r) operator(=) ident(json)operator(.)ident(encode)operator(()ident(s)operator(\))
  predefined(assert)operator(()ident(r)operator(=)operator(=)string<delimiter(')content(48.123)delimiter(')>operator(\))
  
  comment(-- Test encode for boolean values)
  predefined(assert)operator(()ident(json)operator(.)ident(encode)operator(()predefined_constant(true)operator(\))operator(=)operator(=)string<delimiter(')content(true)delimiter(')>operator(\))
  predefined(assert)operator(()ident(json)operator(.)ident(encode)operator(()predefined_constant(false)operator(\))operator(=)operator(=)string<delimiter(')content(false)delimiter(')>operator(\))
  predefined(assert)operator(()ident(json)operator(.)ident(encode)operator(()predefined_constant(nil)operator(\))operator(=)operator(=)string<delimiter(')content(null)delimiter(')>operator(\))

  comment(-- Test encode for arrays)
  ident(s) operator(=) map<delimiter({)integer(1)operator(,)integer(2)operator(,)integer(3)delimiter(})>
  ident(r) operator(=) ident(json)operator(.)ident(encode)operator(()ident(s)operator(\))
  predefined(assert)operator(()ident(r)operator(=)operator(=)string<delimiter(")content([1,2,3])delimiter(")>operator(\))
  ident(s) operator(=) map<delimiter({)integer(9)operator(,)integer(9)operator(,)integer(9)delimiter(})>
  ident(r) operator(=) ident(json)operator(.)ident(encode)operator(()ident(s)operator(\))
  predefined(assert)operator(()ident(r)operator(=)operator(=)string<delimiter(")content([9,9,9])delimiter(")>operator(\))
  
  comment(-- Complex array test)
  ident(s) operator(=) map<delimiter({) integer(2)operator(,) string<delimiter(')content(joe)delimiter(')>operator(,) predefined_constant(false)operator(,) predefined_constant(nil)operator(,) string<delimiter(')content(hi)delimiter(')> delimiter(})>
  ident(r) operator(=) ident(json)operator(.)ident(encode)operator(()ident(s)operator(\))
  predefined(assert)operator(()ident(r)operator(=)operator(=)string<delimiter(')content([2,"joe",false,null,"hi"])delimiter(')>operator(\))
  
  comment(-- Test encode for tables)
  ident(s) operator(=) map<delimiter({)key(Name)operator(=)string<delimiter(')content(Craig)delimiter(')>operator(,)key(email)operator(=)string<delimiter(')content(craig@lateral.co.za)delimiter(')>operator(,)key(age)operator(=)integer(35)delimiter(})>
  ident(r) operator(=) ident(json)operator(.)ident(encode)operator(()ident(s)operator(\))
  comment(-- NB: This test can fail because of order: need to test further once)
  comment(-- decoding is supported.)
  predefined(assert)operator(()ident(r)operator(=)operator(=)string<delimiter([[)content({"age":35,"Name":"Craig","email":"craig@lateral.co.za"})delimiter(]])>operator(\))
  
  comment(-- Test decode_scanWhitespace)
  keyword(if) predefined_constant(nil) keyword(then)
  ident(s) operator(=) string<delimiter(")content(   )char(\\n)content(   )char(\\r)content(   )char(\\t)content(   )delimiter(")>
  ident(e) operator(=) ident(json)operator(.)ident(_decode_scanWhitespace)operator(()ident(s)operator(,)integer(1)operator(\))
  predefined(assert)operator(()ident(e)operator(=)operator(=)ident(string)operator(.)ident(len)operator(()ident(s)operator(\))operator(+)integer(1)operator(\))
  ident(s) operator(=) string<delimiter(")content( )char(\\n)char(\\r)char(\\t)content(4)delimiter(")>
  predefined(assert)operator(()ident(json)operator(.)ident(_decode_scanWhitespace)operator(()ident(s)operator(,)integer(1)operator(\))operator(=)operator(=)integer(5)operator(\))
  
  comment(-- Test decode_scanString)
  ident(s) operator(=) string<delimiter([[)content("Test")delimiter(]])>
  ident(r)operator(,)ident(e) operator(=) ident(json)operator(.)ident(_decode_scanString)operator(()ident(s)operator(,)integer(1)operator(\))
  predefined(assert)operator(()ident(r)operator(=)operator(=)string<delimiter(')content(Test)delimiter(')> keyword(and) ident(e)operator(=)operator(=)integer(7)operator(\))
  ident(s) operator(=) string<delimiter([[)content("This\\nis a \\"test")delimiter(]])>
  ident(r) operator(=) ident(json)operator(.)ident(_decode_scanString)operator(()ident(s)operator(,)integer(1)operator(\))
  predefined(assert)operator(()ident(r)operator(=)operator(=)string<delimiter(")content(This)char(\\n)content(is a )char(\\")content(test)delimiter(")>operator(\))
  
  comment(-- Test decode_scanNumber)
  ident(s) operator(=) string<delimiter([[)content(354)delimiter(]])>
  ident(r)operator(,)ident(e) operator(=) ident(json)operator(.)ident(_decode_scanNumber)operator(()ident(s)operator(,)integer(1)operator(\))
  predefined(assert)operator(()ident(r)operator(=)operator(=)integer(354) keyword(and) ident(e)operator(=)operator(=)integer(4)operator(\))
  ident(s) operator(=) string<delimiter([[)content( 4565.23 AND OTHER THINGS )delimiter(]])>
  ident(r)operator(,)ident(e) operator(=) ident(json)operator(.)ident(_decode_scanNumber)operator(()ident(s)operator(,)integer(2)operator(\))
  predefined(assert)operator(()ident(r)operator(=)operator(=)float(4565.23) keyword(and) ident(e)operator(=)operator(=)integer(9)operator(\))
  ident(s) operator(=) string<delimiter([[)content( -23.22 and )delimiter(]])>
  ident(r)operator(,)ident(e) operator(=) ident(json)operator(.)ident(_decode_scanNumber)operator(()ident(s)operator(,)integer(2)operator(\))
  predefined(assert)operator(()ident(r)operator(=)operator(=)float(-23.22) keyword(and) ident(e)operator(=)operator(=)integer(8)operator(\))
 
  comment(-- Test decode_scanConstant)
  ident(s) operator(=) string<delimiter(")content(true)delimiter(")>
  ident(r)operator(,)ident(e) operator(=) ident(json)operator(.)ident(_decode_scanConstant)operator(()ident(s)operator(,)integer(1)operator(\))
  predefined(assert)operator(()ident(r)operator(=)operator(=)predefined_constant(true) keyword(and) ident(e)operator(=)operator(=)integer(5)operator(\))
  ident(s) operator(=) string<delimiter(")content(  false  )delimiter(")>
  ident(r)operator(,)ident(e) operator(=) ident(json)operator(.)ident(_decode_scanConstant)operator(()ident(s)operator(,)integer(3)operator(\))
  predefined(assert)operator(()ident(r)operator(=)operator(=)predefined_constant(false) keyword(and) ident(e)operator(=)operator(=)integer(8)operator(\))
  ident(s) operator(=) string<delimiter(")content(1null6)delimiter(")>
  ident(r)operator(,)ident(e) operator(=) ident(json)operator(.)ident(_decode_scanConstant)operator(()ident(s)operator(,)integer(2)operator(\))
  predefined(assert)operator(()ident(r)operator(=)operator(=)predefined_constant(nil) keyword(and) ident(e)operator(=)operator(=)integer(6)operator(\))
  
  comment(-- Test decode_scanArray)
  ident(s) operator(=) string<delimiter(")content([1,2,3])delimiter(")>
  ident(r)operator(,)ident(e) operator(=) ident(json)operator(.)ident(_decode_scanArray)operator(()ident(s)operator(,)integer(1)operator(\))
  predefined(assert)operator(()ident(compareData)operator(()ident(r)operator(,)map<delimiter({)integer(1)operator(,)integer(2)operator(,)integer(3)delimiter(})>operator(\))operator(\))
  ident(s) operator(=) string<delimiter([[)content([  1 ,   3  ,5 , "Fred" , true, false, null, -23 ] )delimiter(]])>
  ident(r)operator(,)ident(e) operator(=) ident(json)operator(.)ident(_decode_scanArray)operator(()ident(s)operator(,)integer(1)operator(\))
  predefined(assert)operator(()ident(compareData)operator(()ident(r)operator(,) map<delimiter({)integer(1)operator(,)integer(3)operator(,)integer(5)operator(,)string<delimiter(')content(Fred)delimiter(')>operator(,)predefined_constant(true)operator(,)predefined_constant(false)operator(,)predefined_constant(nil)operator(,)integer(-23)delimiter(})> operator(\)) operator(\))
  ident(s) operator(=) string<delimiter(")content([3,5,null,7,9])delimiter(")>
  ident(r)operator(,)ident(e) operator(=) ident(json)operator(.)ident(_decode_scanArray)operator(()ident(s)operator(,)integer(1)operator(\))
  predefined(assert)operator(()ident(compareData)operator(()ident(r)operator(,) map<delimiter({)integer(3)operator(,)integer(5)operator(,)predefined_constant(nil)operator(,)integer(7)operator(,)integer(9)delimiter(})>operator(\))operator(\))
  ident(s) operator(=) string<delimiter(")content([3,5,null,7,9,null,null])delimiter(")>
  ident(r)operator(,)ident(e) operator(=) ident(json)operator(.)ident(_decode_scanArray)operator(()ident(s)operator(,)integer(1)operator(\))
  predefined(assert)operator(()ident(compareData)operator(()ident(r)operator(,) map<delimiter({)integer(3)operator(,)integer(5)operator(,)predefined_constant(nil)operator(,)integer(7)operator(,)integer(9)operator(,)predefined_constant(nil)operator(,)predefined_constant(nil)delimiter(})>operator(\))operator(\))
  
  keyword(end)
  
  comment(-- Test decode_scanObject)
  ident(s) operator(=) string<delimiter([[)content( {"one":1, "two":2, "three":"three", "four":true} )delimiter(]])>
  ident(r)operator(,)ident(e) operator(=) ident(json)operator(.)ident(decode)operator(()ident(s)operator(\))
  predefined(assert)operator(()ident(compareData)operator(()ident(r)operator(,)map<delimiter({)key(one)operator(=)integer(1)operator(,)key(two)operator(=)integer(2)operator(,)key(three)operator(=)string<delimiter(')content(three)delimiter(')>operator(,)key(four)operator(=)predefined_constant(true)delimiter(})>operator(\))operator(\))
  ident(s) operator(=) string<delimiter([[)content( { "one" : { "first":1,"second":2,"third":3}, "two":2, "three":false } )delimiter(]])>
  ident(r)operator(,)ident(e) operator(=) ident(json)operator(.)ident(decode)operator(()ident(s)operator(\))
  predefined(assert)operator(()ident(compareData)operator(()ident(r)operator(,) map<delimiter({)key(one)operator(=)map<inline_delimiter({)key(first)operator(=)integer(1)operator(,)key(second)operator(=)integer(2)operator(,)key(third)operator(=)integer(3)inline_delimiter(})>operator(,)key(two)operator(=)integer(2)operator(,)key(three)operator(=)predefined_constant(false)delimiter(})>operator(\))operator(\))
  ident(s) operator(=) string<delimiter([[)content( { "primes" : [2,3,5,7,9], "user":{"name":"craig","age":35,"programs_lua":true},
    "lua_is_great":true } )delimiter(]])>
  ident(r)operator(,)ident(e) operator(=) ident(json)operator(.)ident(decode)operator(()ident(s)operator(\))
  predefined(assert)operator(()ident(compareData)operator(()ident(r)operator(,) map<delimiter({)key(primes)operator(=)map<inline_delimiter({)integer(2)operator(,)integer(3)operator(,)integer(5)operator(,)integer(7)operator(,)integer(9)inline_delimiter(})>operator(,)key(user)operator(=)map<inline_delimiter({)key(name)operator(=)string<delimiter(')content(craig)delimiter(')>operator(,)key(age)operator(=)integer(35)operator(,)key(programs_lua)operator(=)predefined_constant(true)inline_delimiter(})>operator(,)key(lua_is_great)operator(=)predefined_constant(true)delimiter(})>operator(\))operator(\))
  
  comment(-- Test json.null management)
  ident(t) operator(=) map<delimiter({) integer(1)operator(,)integer(2)operator(,)ident(json)operator(.)ident(null)operator(,)integer(4) delimiter(})>
  predefined(assert)operator(() ident(json)operator(.)ident(encode)operator(()ident(t)operator(\))operator(=)operator(=)string<delimiter(")content([1,2,null,4])delimiter(")> operator(\))
  ident(t) operator(=) map<delimiter({)key(x)operator(=)ident(json)operator(.)ident(null) delimiter(})>
  ident(r) operator(=) ident(json)operator(.)ident(encode)operator(()ident(t)operator(\))
  predefined(assert)operator(() ident(json)operator(.)ident(encode)operator(()ident(t)operator(\)) operator(=)operator(=) string<delimiter(')content({"x":null})delimiter(')> operator(\))
  
  comment(-- Test comment decoding)
  ident(s) operator(=) string<delimiter([[)content( /* A comment
            that spans
            a few lines
         */
         "test"
      )delimiter(]])>
  ident(r)operator(,)ident(e) operator(=) ident(json)operator(.)ident(decode)operator(()ident(s)operator(\))
  predefined(assert)operator(()ident(r)operator(=)operator(=)string<delimiter(')content(test)delimiter(')>operator(,)string<delimiter(")content(Comment decoding failed)delimiter(")>operator(\))
keyword(end)

ident(testJSON4Lua)operator(()operator(\))

predefined(print)operator(()string<delimiter(")content(JSON4Lua tests completed successfully)delimiter(")>operator(\))comment<delimiter(--[[)content(
  Some Time Trails for the JSON4Lua package
)delimiter(]])>comment(--)


ident(require)operator(()string<delimiter(')content(json)delimiter(')>operator(\))
ident(require)operator(()string<delimiter(')content(os)delimiter(')>operator(\))
ident(require)operator(()string<delimiter(')content(table)delimiter(')>operator(\))

keyword(local) local_variable(t1) operator(=) ident(os)operator(.)ident(clock)operator(()operator(\))
keyword(local) local_variable(jstr)
keyword(local) local_variable(v)
keyword(for) ident(i)operator(=)integer(1)operator(,)integer(100) keyword(do)
  keyword(local) local_variable(t) operator(=) map<delimiter({)delimiter(})>
  keyword(for) ident(j)operator(=)integer(1)operator(,)integer(500) keyword(do)
    ident(table)operator(.)ident(insert)operator(()ident(t)operator(,)ident(j)operator(\))
  keyword(end)
  keyword(for) ident(j)operator(=)integer(1)operator(,)integer(500) keyword(do)
    ident(table)operator(.)ident(insert)operator(()ident(t)operator(,)string<delimiter(")content(VALUE)delimiter(")>operator(\))
  keyword(end)
  ident(jstr) operator(=) ident(json)operator(.)ident(encode)operator(()ident(t)operator(\))
  ident(v) operator(=) ident(json)operator(.)ident(decode)operator(()ident(jstr)operator(\))
  comment(--print(json.encode(t\)\))
keyword(end)

keyword(for) ident(i) operator(=) integer(1)operator(,)integer(100) keyword(do)
  keyword(local) local_variable(t) operator(=) map<delimiter({)delimiter(})>
  keyword(for) ident(j)operator(=)integer(1)operator(,)integer(500) keyword(do)
    keyword(local) local_variable(m)operator(=) ident(math)operator(.)ident(mod)operator(()ident(j)operator(,)integer(3)operator(\))
    keyword(if) operator(()ident(m)operator(=)operator(=)integer(0)operator(\)) keyword(then)
      ident(t)operator([)string<delimiter(')content(a)delimiter(')>operator(.)operator(.)ident(j)operator(]) operator(=) predefined_constant(true)
    keyword(elseif) ident(m)operator(=)operator(=)integer(1) keyword(then) 
      ident(t)operator([)string<delimiter(')content(a)delimiter(')>operator(.)operator(.)ident(j)operator(]) operator(=) ident(json)operator(.)ident(null)
    keyword(else)
      ident(t)operator([)string<delimiter(')content(a)delimiter(')>operator(.)operator(.)ident(j)operator(]) operator(=) ident(j)
    keyword(end)
  keyword(end)
  ident(jstr) operator(=) ident(json)operator(.)ident(encode)operator(()ident(t)operator(\))
  ident(v) operator(=) ident(json)operator(.)ident(decode)operator(()ident(jstr)operator(\))
keyword(end)

predefined(print) operator(()ident(jstr)operator(\))
comment(--print(type(t1\)\))
keyword(local) local_variable(t2) operator(=) ident(os)operator(.)ident(clock)operator(()operator(\))

predefined(print) operator(()string<delimiter(")content(Elapsed time=)delimiter(")> operator(.)operator(.) ident(os)operator(.)ident(difftime)operator(()ident(t2)operator(,)ident(t1)operator(\)) operator(.)operator(.) string<delimiter(")content(s)delimiter(")>operator(\))comment(-----------------------------------------------------------------------------)
comment(-- JSON4Lua: JSON encoding / decoding support for the Lua language.)
comment(-- json Module.)
comment(-- Author: Craig Mason-Jones)
comment(-- Homepage: http://json.luaforge.net/)
comment(-- Version: 0.9.20)
comment(-- This module is released under the The GNU General Public License (GPL\).)
comment(-- Please see LICENCE.txt for details.)
comment(--)
comment(-- USAGE:)
comment(-- This module exposes two functions:)
comment(--   encode(o\))
comment(--     Returns the table / string / boolean / number / nil / json.null value as a JSON-encoded string.)
comment(--   decode(json_string\))
comment(--     Returns a Lua object populated with the data encoded in the JSON string json_string.)
comment(--)
comment(-- REQUIREMENTS:)
comment(--   compat-5.1 if using Lua 5.0)
comment(--)
comment(-- CHANGELOG)
comment(--   0.9.20 Introduction of local Lua functions for private functions (removed _ function prefix\). )
comment(--          Fixed Lua 5.1 compatibility issues.)
comment(--   		Introduced json.null to have null values in associative arrays.)
comment(--          encode(\) performance improvement (more than 50%\) through table.concat rather than ..)
comment(--          Introduced decode ability to ignore /**/ comments in the JSON string.)
comment(--   0.9.10 Fix to array encoding / decoding to correctly manage nil/null values in arrays.)
comment(-----------------------------------------------------------------------------)

comment(-----------------------------------------------------------------------------)
comment(-- Imports and dependencies)
comment(-----------------------------------------------------------------------------)
keyword(local) local_variable(math) operator(=) ident(require)operator(()string<delimiter(')content(math)delimiter(')>operator(\))
keyword(local) local_variable(string) operator(=) ident(require)operator(()string<delimiter(")content(string)delimiter(")>operator(\))
keyword(local) local_variable(table) operator(=) ident(require)operator(()string<delimiter(")content(table)delimiter(")>operator(\))

keyword(local) local_variable(base) operator(=) predefined(_G)

comment(-----------------------------------------------------------------------------)
comment(-- Module declaration)
comment(-----------------------------------------------------------------------------)
ident(module)operator(()string<delimiter(")content(json)delimiter(")>operator(\))

comment(-- Public functions)

comment(-- Private functions)
keyword(local) local_variable(decode_scanArray)
keyword(local) local_variable(decode_scanComment)
keyword(local) local_variable(decode_scanConstant)
keyword(local) local_variable(decode_scanNumber)
keyword(local) local_variable(decode_scanObject)
keyword(local) local_variable(decode_scanString)
keyword(local) local_variable(decode_scanWhitespace)
keyword(local) local_variable(encodeString)
keyword(local) local_variable(isArray)
keyword(local) local_variable(isEncodable)

comment(-----------------------------------------------------------------------------)
comment(-- PUBLIC FUNCTIONS)
comment(-----------------------------------------------------------------------------)
comment(--- Encodes an arbitrary Lua object / variable.)
comment(-- @param v The Lua object / variable to be JSON encoded.)
comment(-- @return String containing the JSON encoding in internal Lua string format (i.e. not unicode\))
keyword(function) function(encode) operator(()ident(v)operator(\))
  comment(-- Handle nil values)
  keyword(if) ident(v)operator(=)operator(=)predefined_constant(nil) keyword(then)
    keyword(return) string<delimiter(")content(null)delimiter(")>
  keyword(end)
  
  keyword(local) local_variable(vtype) operator(=) ident(base)operator(.)predefined(type)operator(()ident(v)operator(\))  

  comment(-- Handle strings)
  keyword(if) ident(vtype)operator(=)operator(=)string<delimiter(')content(string)delimiter(')> keyword(then)    
    keyword(return) string<delimiter(')content(")delimiter(')> operator(.)operator(.) ident(encodeString)operator(()ident(v)operator(\)) operator(.)operator(.) string<delimiter(')content(")delimiter(')>	    comment(-- Need to handle encoding in string)
  keyword(end)
  
  comment(-- Handle booleans)
  keyword(if) ident(vtype)operator(=)operator(=)string<delimiter(')content(number)delimiter(')> keyword(or) ident(vtype)operator(=)operator(=)string<delimiter(')content(boolean)delimiter(')> keyword(then)
    keyword(return) ident(base)operator(.)predefined(tostring)operator(()ident(v)operator(\))
  keyword(end)
  
  comment(-- Handle tables)
  keyword(if) ident(vtype)operator(=)operator(=)string<delimiter(')content(table)delimiter(')> keyword(then)
    keyword(local) local_variable(rval) operator(=) map<delimiter({)delimiter(})>
    comment(-- Consider arrays separately)
    keyword(local) local_variable(bArray)operator(,) local_variable(maxCount) operator(=) ident(isArray)operator(()ident(v)operator(\))
    keyword(if) ident(bArray) keyword(then)
      keyword(for) ident(i) operator(=) integer(1)operator(,)ident(maxCount) keyword(do)
        ident(table)operator(.)ident(insert)operator(()ident(rval)operator(,) ident(encode)operator(()ident(v)operator([)ident(i)operator(])operator(\))operator(\))
      keyword(end)
    keyword(else)	comment(-- An object, not an array)
      keyword(for) ident(i)operator(,)ident(j) keyword(in) ident(base)operator(.)predefined(pairs)operator(()ident(v)operator(\)) keyword(do)
        keyword(if) ident(isEncodable)operator(()ident(i)operator(\)) keyword(and) ident(isEncodable)operator(()ident(j)operator(\)) keyword(then)
          ident(table)operator(.)ident(insert)operator(()ident(rval)operator(,) string<delimiter(')content(")delimiter(')> operator(.)operator(.) ident(encodeString)operator(()ident(i)operator(\)) operator(.)operator(.) string<delimiter(')content(":)delimiter(')> operator(.)operator(.) ident(encode)operator(()ident(j)operator(\))operator(\))
        keyword(end)
      keyword(end)
    keyword(end)
    keyword(if) ident(bArray) keyword(then)
      keyword(return) string<delimiter(')content([)delimiter(')> operator(.)operator(.) ident(table)operator(.)ident(concat)operator(()ident(rval)operator(,)string<delimiter(')content(,)delimiter(')>operator(\)) operator(.)operator(.)string<delimiter(')content(])delimiter(')>
    keyword(else)
      keyword(return) string<delimiter(')content({)delimiter(')> operator(.)operator(.) ident(table)operator(.)ident(concat)operator(()ident(rval)operator(,)string<delimiter(')content(,)delimiter(')>operator(\)) operator(.)operator(.) string<delimiter(')content(})delimiter(')>
    keyword(end)
  keyword(end)
  
  comment(-- Handle null values)
  keyword(if) ident(vtype)operator(=)operator(=)string<delimiter(')content(function)delimiter(')> keyword(and) ident(v)operator(=)operator(=)ident(null) keyword(then)
    keyword(return) string<delimiter(')content(null)delimiter(')>
  keyword(end)
  
  ident(base)operator(.)predefined(assert)operator(()predefined_constant(false)operator(,)string<delimiter(')content(encode attempt to encode unsupported type )delimiter(')> operator(.)operator(.) ident(vtype) operator(.)operator(.) string<delimiter(')content(:)delimiter(')> operator(.)operator(.) ident(base)operator(.)predefined(tostring)operator(()ident(v)operator(\))operator(\))
keyword(end)


comment(--- Decodes a JSON string and returns the decoded value as a Lua data structure / value.)
comment(-- @param s The string to scan.)
comment(-- @param [startPos] Optional starting position where the JSON string is located. Defaults to 1.)
comment(-- @param Lua object, number The object that was scanned, as a Lua table / string / number / boolean or nil,)
comment(-- and the position of the first character after)
comment(-- the scanned JSON object.)
keyword(function) function(decode)operator(()ident(s)operator(,) ident(startPos)operator(\))
  ident(startPos) operator(=) ident(startPos) keyword(and) ident(startPos) keyword(or) integer(1)
  ident(startPos) operator(=) ident(decode_scanWhitespace)operator(()ident(s)operator(,)ident(startPos)operator(\))
  ident(base)operator(.)predefined(assert)operator(()ident(startPos)operator(<)operator(=)ident(string)operator(.)ident(len)operator(()ident(s)operator(\))operator(,) string<delimiter(')content(Unterminated JSON encoded object found at position in [)delimiter(')> operator(.)operator(.) ident(s) operator(.)operator(.) string<delimiter(')content(])delimiter(')>operator(\))
  keyword(local) local_variable(curChar) operator(=) ident(string)operator(.)ident(sub)operator(()ident(s)operator(,)ident(startPos)operator(,)ident(startPos)operator(\))
  comment(-- Object)
  keyword(if) ident(curChar)operator(=)operator(=)string<delimiter(')content({)delimiter(')> keyword(then)
    keyword(return) ident(decode_scanObject)operator(()ident(s)operator(,)ident(startPos)operator(\))
  keyword(end)
  comment(-- Array)
  keyword(if) ident(curChar)operator(=)operator(=)string<delimiter(')content([)delimiter(')> keyword(then)
    keyword(return) ident(decode_scanArray)operator(()ident(s)operator(,)ident(startPos)operator(\))
  keyword(end)
  comment(-- Number)
  keyword(if) ident(string)operator(.)ident(find)operator(()string<delimiter(")content(+-0123456789.e)delimiter(")>operator(,) ident(curChar)operator(,) integer(1)operator(,) predefined_constant(true)operator(\)) keyword(then)
    keyword(return) ident(decode_scanNumber)operator(()ident(s)operator(,)ident(startPos)operator(\))
  keyword(end)
  comment(-- String)
  keyword(if) ident(curChar)operator(=)operator(=)string<delimiter([[)content(")delimiter(]])> keyword(or) ident(curChar)operator(=)operator(=)string<delimiter([[)content(')delimiter(]])> keyword(then)
    keyword(return) ident(decode_scanString)operator(()ident(s)operator(,)ident(startPos)operator(\))
  keyword(end)
  keyword(if) ident(string)operator(.)ident(sub)operator(()ident(s)operator(,)ident(startPos)operator(,)ident(startPos)operator(+)integer(1)operator(\))operator(=)operator(=)string<delimiter(')content(/*)delimiter(')> keyword(then)
    keyword(return) ident(decode)operator(()ident(s)operator(,) ident(decode_scanComment)operator(()ident(s)operator(,)ident(startPos)operator(\))operator(\))
  keyword(end)
  comment(-- Otherwise, it must be a constant)
  keyword(return) ident(decode_scanConstant)operator(()ident(s)operator(,)ident(startPos)operator(\))
keyword(end)

comment(--- The null function allows one to specify a null value in an associative array (which is otherwise)
comment(-- discarded if you set the value with 'nil' in Lua. Simply set t = { first=json.null })
keyword(function) function(null)operator(()operator(\))
  keyword(return) ident(null) comment(-- so json.null(\) will also return null ;-\))
keyword(end)
comment(-----------------------------------------------------------------------------)
comment(-- Internal, PRIVATE functions.)
comment(-- Following a Python-like convention, I have prefixed all these 'PRIVATE')
comment(-- functions with an underscore.)
comment(-----------------------------------------------------------------------------)

comment(--- Scans an array from JSON into a Lua object)
comment(-- startPos begins at the start of the array.)
comment(-- Returns the array and the next starting position)
comment(-- @param s The string being scanned.)
comment(-- @param startPos The starting position for the scan.)
comment(-- @return table, int The scanned array as a table, and the position of the next character to scan.)
keyword(function) function(decode_scanArray)operator(()ident(s)operator(,)ident(startPos)operator(\))
  keyword(local) local_variable(array) operator(=) map<delimiter({)delimiter(})>	comment(-- The return value)
  keyword(local) local_variable(stringLen) operator(=) ident(string)operator(.)ident(len)operator(()ident(s)operator(\))
  ident(base)operator(.)predefined(assert)operator(()ident(string)operator(.)ident(sub)operator(()ident(s)operator(,)ident(startPos)operator(,)ident(startPos)operator(\))operator(=)operator(=)string<delimiter(')content([)delimiter(')>operator(,)string<delimiter(')content(decode_scanArray called but array does not start at position )delimiter(')> operator(.)operator(.) ident(startPos) operator(.)operator(.) string<delimiter(')content( in string:)char(\\n)delimiter(')>operator(.)operator(.)ident(s) operator(\))
  ident(startPos) operator(=) ident(startPos) operator(+) integer(1)
  comment(-- Infinite loop for array elements)
  keyword(repeat)
    ident(startPos) operator(=) ident(decode_scanWhitespace)operator(()ident(s)operator(,)ident(startPos)operator(\))
    ident(base)operator(.)predefined(assert)operator(()ident(startPos)operator(<)operator(=)ident(stringLen)operator(,)string<delimiter(')content(JSON String ended unexpectedly scanning array.)delimiter(')>operator(\))
    keyword(local) local_variable(curChar) operator(=) ident(string)operator(.)ident(sub)operator(()ident(s)operator(,)ident(startPos)operator(,)ident(startPos)operator(\))
    keyword(if) operator(()ident(curChar)operator(=)operator(=)string<delimiter(')content(])delimiter(')>operator(\)) keyword(then)
      keyword(return) ident(array)operator(,) ident(startPos)operator(+)integer(1)
    keyword(end)
    keyword(if) operator(()ident(curChar)operator(=)operator(=)string<delimiter(')content(,)delimiter(')>operator(\)) keyword(then)
      ident(startPos) operator(=) ident(decode_scanWhitespace)operator(()ident(s)operator(,)ident(startPos)operator(+)integer(1)operator(\))
    keyword(end)
    ident(base)operator(.)predefined(assert)operator(()ident(startPos)operator(<)operator(=)ident(stringLen)operator(,) string<delimiter(')content(JSON String ended unexpectedly scanning array.)delimiter(')>operator(\))
    ident(object)operator(,) ident(startPos) operator(=) ident(decode)operator(()ident(s)operator(,)ident(startPos)operator(\))
    ident(table)operator(.)ident(insert)operator(()ident(array)operator(,)ident(object)operator(\))
  keyword(until) predefined_constant(false)
keyword(end)

comment(--- Scans a comment and discards the comment.)
comment(-- Returns the position of the next character following the comment.)
comment(-- @param string s The JSON string to scan.)
comment(-- @param int startPos The starting position of the comment)
keyword(function) function(decode_scanComment)operator(()ident(s)operator(,) ident(startPos)operator(\))
  ident(base)operator(.)predefined(assert)operator(() ident(string)operator(.)ident(sub)operator(()ident(s)operator(,)ident(startPos)operator(,)ident(startPos)operator(+)integer(1)operator(\))operator(=)operator(=)string<delimiter(')content(/*)delimiter(')>operator(,) string<delimiter(")content(decode_scanComment called but comment does not start at position )delimiter(")> operator(.)operator(.) ident(startPos)operator(\))
  keyword(local) local_variable(endPos) operator(=) ident(string)operator(.)ident(find)operator(()ident(s)operator(,)string<delimiter(')content(*/)delimiter(')>operator(,)ident(startPos)operator(+)integer(2)operator(\))
  ident(base)operator(.)predefined(assert)operator(()ident(endPos)operator(~)operator(=)predefined_constant(nil)operator(,) string<delimiter(")content(Unterminated comment in string at )delimiter(")> operator(.)operator(.) ident(startPos)operator(\))
  keyword(return) ident(endPos)operator(+)integer(2)  
keyword(end)

comment(--- Scans for given constants: true, false or null)
comment(-- Returns the appropriate Lua type, and the position of the next character to read.)
comment(-- @param s The string being scanned.)
comment(-- @param startPos The position in the string at which to start scanning.)
comment(-- @return object, int The object (true, false or nil\) and the position at which the next character should be )
comment(-- scanned.)
keyword(function) function(decode_scanConstant)operator(()ident(s)operator(,) ident(startPos)operator(\))
  keyword(local) local_variable(consts) operator(=) map<delimiter({) operator([)string<delimiter(")content(true)delimiter(")>operator(]) operator(=) predefined_constant(true)operator(,) operator([)string<delimiter(")content(false)delimiter(")>operator(]) operator(=) predefined_constant(false)operator(,) operator([)string<delimiter(")content(null)delimiter(")>operator(]) operator(=) predefined_constant(nil) delimiter(})>
  keyword(local) local_variable(constNames) operator(=) map<delimiter({)string<delimiter(")content(true)delimiter(")>operator(,)string<delimiter(")content(false)delimiter(")>operator(,)string<delimiter(")content(null)delimiter(")>delimiter(})>

  keyword(for) ident(i)operator(,)ident(k) keyword(in) ident(base)operator(.)predefined(pairs)operator(()ident(constNames)operator(\)) keyword(do)
    comment(--print ("[" .. string.sub(s,startPos, startPos + string.len(k\) -1\) .."]", k\))
    keyword(if) ident(string)operator(.)ident(sub)operator(()ident(s)operator(,)ident(startPos)operator(,) ident(startPos) operator(+) ident(string)operator(.)ident(len)operator(()ident(k)operator(\)) integer(-1) operator(\))operator(=)operator(=)ident(k) keyword(then)
      keyword(return) ident(consts)operator([)ident(k)operator(])operator(,) ident(startPos) operator(+) ident(string)operator(.)ident(len)operator(()ident(k)operator(\))
    keyword(end)
  keyword(end)
  ident(base)operator(.)predefined(assert)operator(()predefined_constant(nil)operator(,) string<delimiter(')content(Failed to scan constant from string )delimiter(')> operator(.)operator(.) ident(s) operator(.)operator(.) string<delimiter(')content( at starting position )delimiter(')> operator(.)operator(.) ident(startPos)operator(\))
keyword(end)

comment(--- Scans a number from the JSON encoded string.)
comment(-- (in fact, also is able to scan numeric +- eqns, which is not)
comment(-- in the JSON spec.\))
comment(-- Returns the number, and the position of the next character)
comment(-- after the number.)
comment(-- @param s The string being scanned.)
comment(-- @param startPos The position at which to start scanning.)
comment(-- @return number, int The extracted number and the position of the next character to scan.)
keyword(function) function(decode_scanNumber)operator(()ident(s)operator(,)ident(startPos)operator(\))
  keyword(local) local_variable(endPos) operator(=) ident(startPos)operator(+)integer(1)
  keyword(local) local_variable(stringLen) operator(=) ident(string)operator(.)ident(len)operator(()ident(s)operator(\))
  keyword(local) local_variable(acceptableChars) operator(=) string<delimiter(")content(+-0123456789.e)delimiter(")>
  keyword(while) operator(()ident(string)operator(.)ident(find)operator(()ident(acceptableChars)operator(,) ident(string)operator(.)ident(sub)operator(()ident(s)operator(,)ident(endPos)operator(,)ident(endPos)operator(\))operator(,) integer(1)operator(,) predefined_constant(true)operator(\))
	keyword(and) ident(endPos)operator(<)operator(=)ident(stringLen)
	operator(\)) keyword(do)
    ident(endPos) operator(=) ident(endPos) operator(+) integer(1)
  keyword(end)
  keyword(local) local_variable(stringValue) operator(=) string<delimiter(')content(return )delimiter(')> operator(.)operator(.) ident(string)operator(.)ident(sub)operator(()ident(s)operator(,)ident(startPos)operator(,) ident(endPos)integer(-1)operator(\))
  keyword(local) local_variable(stringEval) operator(=) ident(base)operator(.)ident(loadstring)operator(()ident(stringValue)operator(\))
  ident(base)operator(.)predefined(assert)operator(()ident(stringEval)operator(,) string<delimiter(')content(Failed to scan number [ )delimiter(')> operator(.)operator(.) ident(stringValue) operator(.)operator(.) string<delimiter(')content(] in JSON string at position )delimiter(')> operator(.)operator(.) ident(startPos) operator(.)operator(.) string<delimiter(')content( : )delimiter(')> operator(.)operator(.) ident(endPos)operator(\))
  keyword(return) ident(stringEval)operator(()operator(\))operator(,) ident(endPos)
keyword(end)

comment(--- Scans a JSON object into a Lua object.)
comment(-- startPos begins at the start of the object.)
comment(-- Returns the object and the next starting position.)
comment(-- @param s The string being scanned.)
comment(-- @param startPos The starting position of the scan.)
comment(-- @return table, int The scanned object as a table and the position of the next character to scan.)
keyword(function) function(decode_scanObject)operator(()ident(s)operator(,)ident(startPos)operator(\))
  keyword(local) local_variable(object) operator(=) map<delimiter({)delimiter(})>
  keyword(local) local_variable(stringLen) operator(=) ident(string)operator(.)ident(len)operator(()ident(s)operator(\))
  keyword(local) local_variable(key)operator(,) local_variable(value)
  ident(base)operator(.)predefined(assert)operator(()ident(string)operator(.)ident(sub)operator(()ident(s)operator(,)ident(startPos)operator(,)ident(startPos)operator(\))operator(=)operator(=)string<delimiter(')content({)delimiter(')>operator(,)string<delimiter(')content(decode_scanObject called but object does not start at position )delimiter(')> operator(.)operator(.) ident(startPos) operator(.)operator(.) string<delimiter(')content( in string:)char(\\n)delimiter(')> operator(.)operator(.) ident(s)operator(\))
  ident(startPos) operator(=) ident(startPos) operator(+) integer(1)
  keyword(repeat)
    ident(startPos) operator(=) ident(decode_scanWhitespace)operator(()ident(s)operator(,)ident(startPos)operator(\))
    ident(base)operator(.)predefined(assert)operator(()ident(startPos)operator(<)operator(=)ident(stringLen)operator(,) string<delimiter(')content(JSON string ended unexpectedly while scanning object.)delimiter(')>operator(\))
    keyword(local) local_variable(curChar) operator(=) ident(string)operator(.)ident(sub)operator(()ident(s)operator(,)ident(startPos)operator(,)ident(startPos)operator(\))
    keyword(if) operator(()ident(curChar)operator(=)operator(=)string<delimiter(')content(})delimiter(')>operator(\)) keyword(then)
      keyword(return) ident(object)operator(,)ident(startPos)operator(+)integer(1)
    keyword(end)
    keyword(if) operator(()ident(curChar)operator(=)operator(=)string<delimiter(')content(,)delimiter(')>operator(\)) keyword(then)
      ident(startPos) operator(=) ident(decode_scanWhitespace)operator(()ident(s)operator(,)ident(startPos)operator(+)integer(1)operator(\))
    keyword(end)
    ident(base)operator(.)predefined(assert)operator(()ident(startPos)operator(<)operator(=)ident(stringLen)operator(,) string<delimiter(')content(JSON string ended unexpectedly scanning object.)delimiter(')>operator(\))
    comment(-- Scan the key)
    ident(key)operator(,) ident(startPos) operator(=) ident(decode)operator(()ident(s)operator(,)ident(startPos)operator(\))
    ident(base)operator(.)predefined(assert)operator(()ident(startPos)operator(<)operator(=)ident(stringLen)operator(,) string<delimiter(')content(JSON string ended unexpectedly searching for value of key )delimiter(')> operator(.)operator(.) ident(key)operator(\))
    ident(startPos) operator(=) ident(decode_scanWhitespace)operator(()ident(s)operator(,)ident(startPos)operator(\))
    ident(base)operator(.)predefined(assert)operator(()ident(startPos)operator(<)operator(=)ident(stringLen)operator(,) string<delimiter(')content(JSON string ended unexpectedly searching for value of key )delimiter(')> operator(.)operator(.) ident(key)operator(\))
    ident(base)operator(.)predefined(assert)operator(()ident(string)operator(.)ident(sub)operator(()ident(s)operator(,)ident(startPos)operator(,)ident(startPos)operator(\))operator(=)operator(=)string<delimiter(')content(:)delimiter(')>operator(,)string<delimiter(')content(JSON object key-value assignment mal-formed at )delimiter(')> operator(.)operator(.) ident(startPos)operator(\))
    ident(startPos) operator(=) ident(decode_scanWhitespace)operator(()ident(s)operator(,)ident(startPos)operator(+)integer(1)operator(\))
    ident(base)operator(.)predefined(assert)operator(()ident(startPos)operator(<)operator(=)ident(stringLen)operator(,) string<delimiter(')content(JSON string ended unexpectedly searching for value of key )delimiter(')> operator(.)operator(.) ident(key)operator(\))
    ident(value)operator(,) ident(startPos) operator(=) ident(decode)operator(()ident(s)operator(,)ident(startPos)operator(\))
    ident(object)operator([)ident(key)operator(])operator(=)ident(value)
  keyword(until) predefined_constant(false)	comment(-- infinite loop while key-value pairs are found)
keyword(end)

comment(--- Scans a JSON string from the opening inverted comma or single quote to the)
comment(-- end of the string.)
comment(-- Returns the string extracted as a Lua string,)
comment(-- and the position of the next non-string character)
comment(-- (after the closing inverted comma or single quote\).)
comment(-- @param s The string being scanned.)
comment(-- @param startPos The starting position of the scan.)
comment(-- @return string, int The extracted string as a Lua string, and the next character to parse.)
keyword(function) function(decode_scanString)operator(()ident(s)operator(,)ident(startPos)operator(\))
  ident(base)operator(.)predefined(assert)operator(()ident(startPos)operator(,) string<delimiter(')content(decode_scanString(..\) called without start position)delimiter(')>operator(\))
  keyword(local) local_variable(startChar) operator(=) ident(string)operator(.)ident(sub)operator(()ident(s)operator(,)ident(startPos)operator(,)ident(startPos)operator(\))
  ident(base)operator(.)predefined(assert)operator(()ident(startChar)operator(=)operator(=)string<delimiter([[)content(')delimiter(]])> keyword(or) ident(startChar)operator(=)operator(=)string<delimiter([[)content(")delimiter(]])>operator(,)string<delimiter(')content(decode_scanString called for a non-string)delimiter(')>operator(\))
  keyword(local) local_variable(escaped) operator(=) predefined_constant(false)
  keyword(local) local_variable(endPos) operator(=) ident(startPos) operator(+) integer(1)
  keyword(local) local_variable(bEnded) operator(=) predefined_constant(false)
  keyword(local) local_variable(stringLen) operator(=) ident(string)operator(.)ident(len)operator(()ident(s)operator(\))
  keyword(repeat)
    keyword(local) local_variable(curChar) operator(=) ident(string)operator(.)ident(sub)operator(()ident(s)operator(,)ident(endPos)operator(,)ident(endPos)operator(\))
    keyword(if) keyword(not) ident(escaped) keyword(then)	
      keyword(if) ident(curChar)operator(=)operator(=)string<delimiter([[)content(\\)delimiter(]])> keyword(then)
        ident(escaped) operator(=) predefined_constant(true)
      keyword(else)
        ident(bEnded) operator(=) ident(curChar)operator(=)operator(=)ident(startChar)
      keyword(end)
    keyword(else)
      comment(-- If we're escaped, we accept the current character come what may)
      ident(escaped) operator(=) predefined_constant(false)
    keyword(end)
    ident(endPos) operator(=) ident(endPos) operator(+) integer(1)
    ident(base)operator(.)predefined(assert)operator(()ident(endPos) operator(<)operator(=) ident(stringLen)operator(+)integer(1)operator(,) string<delimiter(")content(String decoding failed: unterminated string at position )delimiter(")> operator(.)operator(.) ident(endPos)operator(\))
  keyword(until) ident(bEnded)
  keyword(local) local_variable(stringValue) operator(=) string<delimiter(')content(return )delimiter(')> operator(.)operator(.) ident(string)operator(.)ident(sub)operator(()ident(s)operator(,) ident(startPos)operator(,) ident(endPos)integer(-1)operator(\))
  keyword(local) local_variable(stringEval) operator(=) ident(base)operator(.)ident(loadstring)operator(()ident(stringValue)operator(\))
  ident(base)operator(.)predefined(assert)operator(()ident(stringEval)operator(,) string<delimiter(')content(Failed to load string [ )delimiter(')> operator(.)operator(.) ident(stringValue) operator(.)operator(.) string<delimiter(')content(] in JSON4Lua.decode_scanString at position )delimiter(')> operator(.)operator(.) ident(startPos) operator(.)operator(.) string<delimiter(')content( : )delimiter(')> operator(.)operator(.) ident(endPos)operator(\))
  keyword(return) ident(stringEval)operator(()operator(\))operator(,) ident(endPos)  
keyword(end)

comment(--- Scans a JSON string skipping all whitespace from the current start position.)
comment(-- Returns the position of the first non-whitespace character, or nil if the whole end of string is reached.)
comment(-- @param s The string being scanned)
comment(-- @param startPos The starting position where we should begin removing whitespace.)
comment(-- @return int The first position where non-whitespace was encountered, or string.len(s\)+1 if the end of string)
comment(-- was reached.)
keyword(function) function(decode_scanWhitespace)operator(()ident(s)operator(,)ident(startPos)operator(\))
  keyword(local) local_variable(whitespace)operator(=)string<delimiter(")content( )char(\\n)char(\\r)char(\\t)delimiter(")>
  keyword(local) local_variable(stringLen) operator(=) ident(string)operator(.)ident(len)operator(()ident(s)operator(\))
  keyword(while) operator(() ident(string)operator(.)ident(find)operator(()ident(whitespace)operator(,) ident(string)operator(.)ident(sub)operator(()ident(s)operator(,)ident(startPos)operator(,)ident(startPos)operator(\))operator(,) integer(1)operator(,) predefined_constant(true)operator(\))  keyword(and) ident(startPos) operator(<)operator(=) ident(stringLen)operator(\)) keyword(do)
    ident(startPos) operator(=) ident(startPos) operator(+) integer(1)
  keyword(end)
  keyword(return) ident(startPos)
keyword(end)

comment(--- Encodes a string to be JSON-compatible.)
comment(-- This just involves back-quoting inverted commas, back-quotes and newlines, I think ;-\))
comment(-- @param s The string to return as a JSON encoded (i.e. backquoted string\))
comment(-- @return The string appropriately escaped.)
keyword(function) function(encodeString)operator(()ident(s)operator(\))
  ident(s) operator(=) ident(string)operator(.)ident(gsub)operator(()ident(s)operator(,)string<delimiter(')char(\\\\)delimiter(')>operator(,)string<delimiter(')char(\\\\)char(\\\\)delimiter(')>operator(\))
  ident(s) operator(=) ident(string)operator(.)ident(gsub)operator(()ident(s)operator(,)string<delimiter(')content(")delimiter(')>operator(,)string<delimiter(')char(\\\\)content(")delimiter(')>operator(\))
  ident(s) operator(=) ident(string)operator(.)ident(gsub)operator(()ident(s)operator(,)string<delimiter(")content(')delimiter(")>operator(,)string<delimiter(")char(\\\\)content(')delimiter(")>operator(\))
  ident(s) operator(=) ident(string)operator(.)ident(gsub)operator(()ident(s)operator(,)string<delimiter(')char(\\n)delimiter(')>operator(,)string<delimiter(')char(\\\\)content(n)delimiter(')>operator(\))
  ident(s) operator(=) ident(string)operator(.)ident(gsub)operator(()ident(s)operator(,)string<delimiter(')char(\\t)delimiter(')>operator(,)string<delimiter(')char(\\\\)content(t)delimiter(')>operator(\))
  keyword(return) ident(s) 
keyword(end)

comment(-- Determines whether the given Lua type is an array or a table / dictionary.)
comment(-- We consider any table an array if it has indexes 1..n for its n items, and no)
comment(-- other data in the table.)
comment(-- I think this method is currently a little 'flaky', but can't think of a good way around it yet...)
comment(-- @param t The table to evaluate as an array)
comment(-- @return boolean, number True if the table can be represented as an array, false otherwise. If true,)
comment(-- the second returned value is the maximum)
comment(-- number of indexed elements in the array. )
keyword(function) function(isArray)operator(()ident(t)operator(\))
  comment(-- Next we count all the elements, ensuring that any non-indexed elements are not-encodable )
  comment(-- (with the possible exception of 'n'\))
  keyword(local) local_variable(maxIndex) operator(=) integer(0)
  keyword(for) ident(k)operator(,)ident(v) keyword(in) ident(base)operator(.)predefined(pairs)operator(()ident(t)operator(\)) keyword(do)
    keyword(if) operator(()ident(base)operator(.)predefined(type)operator(()ident(k)operator(\))operator(=)operator(=)string<delimiter(')content(number)delimiter(')> keyword(and) ident(math)operator(.)ident(floor)operator(()ident(k)operator(\))operator(=)operator(=)ident(k) keyword(and) integer(1)operator(<)operator(=)ident(k)operator(\)) keyword(then)	comment(-- k,v is an indexed pair)
      keyword(if) operator(()keyword(not) ident(isEncodable)operator(()ident(v)operator(\))operator(\)) keyword(then) keyword(return) predefined_constant(false) keyword(end)	comment(-- All array elements must be encodable)
      ident(maxIndex) operator(=) ident(math)operator(.)ident(max)operator(()ident(maxIndex)operator(,)ident(k)operator(\))
    keyword(else)
      keyword(if) operator(()ident(k)operator(=)operator(=)string<delimiter(')content(n)delimiter(')>operator(\)) keyword(then)
        keyword(if) ident(v) operator(~)operator(=) ident(table)operator(.)ident(getn)operator(()ident(t)operator(\)) keyword(then) keyword(return) predefined_constant(false) keyword(end)  comment(-- False if n does not hold the number of elements)
      keyword(else) comment(-- Else of (k=='n'\))
        keyword(if) ident(isEncodable)operator(()ident(v)operator(\)) keyword(then) keyword(return) predefined_constant(false) keyword(end)
      keyword(end)  comment(-- End of (k~='n'\))
    keyword(end) comment(-- End of k,v not an indexed pair)
  keyword(end)  comment(-- End of loop across all pairs)
  keyword(return) predefined_constant(true)operator(,) ident(maxIndex)
keyword(end)

comment(--- Determines whether the given Lua object / table / variable can be JSON encoded. The only)
comment(-- types that are JSON encodable are: string, boolean, number, nil, table and json.null.)
comment(-- In this implementation, all other types are ignored.)
comment(-- @param o The object to examine.)
comment(-- @return boolean True if the object should be JSON encoded, false if it should be ignored.)
keyword(function) function(isEncodable)operator(()ident(o)operator(\))
  keyword(local) local_variable(t) operator(=) ident(base)operator(.)predefined(type)operator(()ident(o)operator(\))
  keyword(return) operator(()ident(t)operator(=)operator(=)string<delimiter(')content(string)delimiter(')> keyword(or) ident(t)operator(=)operator(=)string<delimiter(')content(boolean)delimiter(')> keyword(or) ident(t)operator(=)operator(=)string<delimiter(')content(number)delimiter(')> keyword(or) ident(t)operator(=)operator(=)string<delimiter(')content(nil)delimiter(')> keyword(or) ident(t)operator(=)operator(=)string<delimiter(')content(table)delimiter(')>operator(\)) keyword(or) operator(()ident(t)operator(=)operator(=)string<delimiter(')content(function)delimiter(')> keyword(and) ident(o)operator(=)operator(=)ident(null)operator(\)) 
keyword(end)

comment(-----------------------------------------------------------------------------)
comment(-- JSONRPC4Lua: JSON RPC client calls over http for the Lua language.)
comment(-- json.rpc Module. )
comment(-- Author: Craig Mason-Jones)
comment(-- Homepage: http://json.luaforge.net/)
comment(-- Version: 0.9.10)
comment(-- This module is released under the The GNU General Public License (GPL\).)
comment(-- Please see LICENCE.txt for details.)
comment(--)
comment(-- USAGE:)
comment(-- This module exposes two functions:)
comment(--   proxy( 'url'\))
comment(--     Returns a proxy object for calling the JSON RPC Service at the given url.)
comment(--   call ( 'url', 'method', ...\))
comment(--     Calls the JSON RPC server at the given url, invokes the appropriate method, and)
comment(--     passes the remaining parameters. Returns the result and the error. If the result is nil, an error)
comment(--     should be there (or the system returned a null\). If an error is there, the result should be nil.)
comment(--)
comment(-- REQUIREMENTS:)
comment(--  Lua socket 2.0 (http://www.cs.princeton.edu/~diego/professional/luasocket/\))
comment(--  json (The JSON4Lua package with which it is bundled\))
comment(--  compat-5.1 if using Lua 5.0.)
comment(-----------------------------------------------------------------------------)

ident(module)operator(()string<delimiter(')content(json.rpc)delimiter(')>operator(\))

comment(-----------------------------------------------------------------------------)
comment(-- Imports and dependencies)
comment(-----------------------------------------------------------------------------)
keyword(local) local_variable(json) operator(=) ident(require)operator(()string<delimiter(')content(json)delimiter(')>operator(\))
keyword(local) local_variable(http) operator(=) ident(require)operator(()string<delimiter(")content(socket.http)delimiter(")>operator(\))

comment(-----------------------------------------------------------------------------)
comment(-- PUBLIC functions)
comment(-----------------------------------------------------------------------------)

comment(--- Creates an RPC Proxy object for the given Url of a JSON-RPC server.)
comment(-- @param url The URL for the JSON RPC Server.)
comment(-- @return Object on which JSON-RPC remote methods can be called.)
comment(-- EXAMPLE Usage:)
comment(--   local jsolait = json.rpc.proxy('http://jsolait.net/testj.py'\))
comment(--   print(jsolait.echo('This is a test of the echo method!'\)\))
comment(--   print(jsolait.args2String('first','second','third'\)\))
comment(--   table.foreachi( jsolait.args2Array(5,4,3,2,1\), print\))
keyword(function) function(proxy)operator(()ident(url)operator(\))
  keyword(local) local_variable(serverProxy) operator(=) map<delimiter({)delimiter(})>
  keyword(local) local_variable(proxyMeta) operator(=) map<delimiter({)
    key(__index) operator(=) keyword(function)operator((t, key\)) 
      keyword(return) keyword(function)operator((...\))
        keyword(return) ident(json)operator(.)ident(rpc)operator(.)ident(call)operator(()ident(url)operator(,) ident(key)operator(,) ident(unpack)operator(()ident(arg)operator(\))operator(\))
      keyword(end)
    keyword(end)
  delimiter(})>
  predefined(setmetatable)operator(()ident(serverProxy)operator(,) ident(proxyMeta)operator(\))
  keyword(return) ident(serverProxy)
keyword(end)

comment(--- Calls a JSON RPC method on a remote server.)
comment(-- Returns a boolean true if the call succeeded, false otherwise.)
comment(-- On success, the second returned parameter is the decoded)
comment(-- JSON object from the server.)
comment(-- On http failure, returns nil and an error message.)
comment(-- On success, returns the result and nil.)
comment(-- @param url The url of the JSON RPC server.)
comment(-- @param method The method being called.)
comment(-- @param ... Parameters to pass to the method.)
comment(-- @return result, error The JSON RPC result and error. One or the other should be nil. If both)
comment(-- are nil, this means that the result of the RPC call was nil.)
comment(-- EXAMPLE Usage:)
comment(--   print(json.rpc.call('http://jsolait.net/testj.py','echo','This string will be returned'\)\))
keyword(function) function(call)operator(()ident(url)operator(,) ident(method)operator(,) operator(.)operator(.)operator(.)operator(\))
  predefined(assert)operator(()ident(method)operator(,)string<delimiter(')content(method param is nil to call)delimiter(')>operator(\))
  keyword(local) local_variable(JSONRequestArray) operator(=) map<delimiter({)
    key(id)operator(=)string<delimiter(")content(httpRequest)delimiter(")>operator(,)
    operator([)string<delimiter(")content(method)delimiter(")>operator(])operator(=)ident(method)operator(,)
    key(params) operator(=) ident(arg)
  delimiter(})>
  keyword(local) local_variable(httpResponse)operator(,) local_variable(result) operator(,) local_variable(code)
  keyword(local) local_variable(jsonRequest) operator(=) ident(json)operator(.)ident(encode)operator(()ident(JSONRequestArray)operator(\))
  comment(-- We use the sophisticated http.request form (with ltn12 sources and sinks\) so that)
  comment(-- we can set the content-type to text/plain. While this shouldn't strictly-speaking be true,)
  comment(-- it seems a good idea (Xavante won't work w/out a content-type header, although a patch)
  comment(-- is needed to Xavante to make it work with text/plain\))
  keyword(local) local_variable(ltn12) operator(=) ident(require)operator(()string<delimiter(')content(ltn12)delimiter(')>operator(\))
  keyword(local) local_variable(resultChunks) operator(=) map<delimiter({)delimiter(})>
  ident(httpResponse)operator(,) ident(code) operator(=) ident(http)operator(.)ident(request)operator(()
    map<delimiter({) operator([)string<delimiter(')content(url)delimiter(')>operator(]) operator(=) ident(url)operator(,)
      key(sink) operator(=) ident(ltn12)operator(.)ident(sink)operator(.)ident(table)operator(()ident(resultChunks)operator(\))operator(,)
      key(method) operator(=) string<delimiter(')content(POST)delimiter(')>operator(,)
      key(headers) operator(=) map<inline_delimiter({) operator([)string<delimiter(')content(content-type)delimiter(')>operator(])operator(=)string<delimiter(')content(text/plain)delimiter(')>operator(,) operator([)string<delimiter(')content(content-length)delimiter(')>operator(])operator(=)ident(string)operator(.)ident(len)operator(()ident(jsonRequest)operator(\)) inline_delimiter(})>operator(,)
      key(source) operator(=) ident(ltn12)operator(.)ident(source)operator(.)ident(string)operator(()ident(jsonRequest)operator(\))
    delimiter(})>
  operator(\))
  ident(httpResponse) operator(=) ident(table)operator(.)ident(concat)operator(()ident(resultChunks)operator(\))
  comment(-- Check the http response code)
  keyword(if) operator(()ident(code)operator(~)operator(=)integer(200)operator(\)) keyword(then)
    keyword(return) predefined_constant(nil)operator(,) string<delimiter(")content(HTTP ERROR: )delimiter(")> operator(.)operator(.) ident(code)
  keyword(end)
  comment(-- And decode the httpResponse and check the JSON RPC result code)
  ident(result) operator(=) ident(json)operator(.)ident(decode)operator(() ident(httpResponse) operator(\))
  keyword(if) ident(result)operator(.)ident(result) keyword(then)
    keyword(return) ident(result)operator(.)ident(result)operator(,) predefined_constant(nil)
  keyword(else)
    keyword(return) predefined_constant(nil)operator(,) ident(result)operator(.)predefined(error)
  keyword(end)
keyword(end)
comment(-----------------------------------------------------------------------------)
comment(-- JSONRPC4Lua: JSON RPC server for exposing Lua objects as JSON RPC callable)
comment(-- objects via http.)
comment(-- json.rpcserver Module. )
comment(-- Author: Craig Mason-Jones)
comment(-- Homepage: http://json.luaforge.net/)
comment(-- Version: 0.9.10)
comment(-- This module is released under the The GNU General Public License (GPL\).)
comment(-- Please see LICENCE.txt for details.)
comment(--)
comment(-- USAGE:)
comment(-- This module exposes one function:)
comment(--   server(luaClass, packReturn\))
comment(--     Manages incoming JSON RPC request forwarding the method call to the given)
comment(--     object. If packReturn is true, multiple return values are packed into an )
comment(--     array on return.)
comment(--)
comment(-- IMPORTANT NOTES:)
comment(--   1. This version ought really not be 0.9.10, since this particular part of the )
comment(--      JSONRPC4Lua package is very first-draft. However, the JSON4Lua package with which)
comment(--      it comes is quite solid, so there you have it :-\))
comment(--   2. This has only been tested with Xavante webserver, with which it works )
comment(--      if you patch CGILua to accept 'text/plain' content type. See doc\\cgilua_patch.html)
comment(--      for details.)
comment(----------------------------------------------------------------------------)

ident(module) operator(()string<delimiter(')content(json.rpcserver)delimiter(')>operator(\))

comment(---)
comment(-- Implements a JSON RPC Server wrapping for luaClass, exposing each of luaClass's)
comment(-- methods as JSON RPC callable methods.)
comment(-- @param luaClass The JSON RPC class to expose.)
comment(-- @param packReturn If true, the server will automatically wrap any)
comment(-- multiple-value returns into an array. Single returns remain single returns. If)
comment(-- false, when a function returns multiple values, only the first of these values will)
comment(-- be returned.)
comment(--)
keyword(function) function(serve)operator(()ident(luaClass)operator(,) ident(packReturn)operator(\))
  ident(cgilua)operator(.)ident(contentheader)operator(()string<delimiter(')content(text)delimiter(')>operator(,)string<delimiter(')content(plain)delimiter(')>operator(\))
  ident(require)operator(()string<delimiter(')content(cgilua)delimiter(')>operator(\))
  ident(require) operator(()string<delimiter(')content(json)delimiter(')>operator(\))
  keyword(local) local_variable(postData) operator(=) string<delimiter(")delimiter(")>
  
  keyword(if) keyword(not) ident(cgilua)operator(.)ident(servervariable)operator(()string<delimiter(')content(CONTENT_LENGTH)delimiter(')>operator(\)) keyword(then)
    ident(cgilua)operator(.)ident(put)operator(()string<delimiter(")content(Please access JSON Request using HTTP POST Request)delimiter(")>operator(\))
    keyword(return) integer(0)
  keyword(else)
    ident(postData) operator(=) ident(cgi)operator([)integer(1)operator(])	comment(-- SAPI.Request.getpostdata(\)  --[[{ "id":1, "method":"echo","params":["Hi there"]}]]  --)
  keyword(end)
  comment(-- @TODO Catch an error condition on decoding the data)
  keyword(local) local_variable(jsonRequest) operator(=) ident(json)operator(.)ident(decode)operator(()ident(postData)operator(\))
  keyword(local) local_variable(jsonResponse) operator(=) map<delimiter({)delimiter(})>
  ident(jsonResponse)operator(.)ident(id) operator(=) ident(jsonRequest)operator(.)ident(id)
  keyword(local) local_variable(method) operator(=) ident(luaClass)operator([) ident(jsonRequest)operator(.)ident(method) operator(])

  keyword(if) keyword(not) ident(method) keyword(then)
	ident(jsonResponse)operator(.)predefined(error) operator(=) string<delimiter(')content(Method )delimiter(')> operator(.)operator(.) ident(jsonRequest)operator(.)ident(method) operator(.)operator(.) string<delimiter(')content( does not exist at this server.)delimiter(')>
  keyword(else)
    keyword(local) local_variable(callResult) operator(=) map<delimiter({) predefined(pcall)operator(() ident(method)operator(,) ident(unpack)operator(() ident(jsonRequest)operator(.)ident(params) operator(\)) operator(\)) delimiter(})>
    keyword(if) ident(callResult)operator([)integer(1)operator(]) keyword(then)	comment(-- Function call successfull)
      ident(table)operator(.)ident(remove)operator(()ident(callResult)operator(,)integer(1)operator(\))
      keyword(if) ident(packReturn) keyword(and) ident(table)operator(.)ident(getn)operator(()ident(callResult)operator(\))operator(>)integer(1) keyword(then)
        ident(jsonResponse)operator(.)ident(result) operator(=) ident(callResult)
      keyword(else)
        ident(jsonResponse)operator(.)ident(result) operator(=) ident(unpack)operator(()ident(callResult)operator(\))	comment(-- NB: Does not support multiple argument returns)
      keyword(end)
    keyword(else)
      ident(jsonResponse)operator(.)predefined(error) operator(=) ident(callResult)operator([)integer(2)operator(])
    keyword(end)
  keyword(end) 
  
  comment(-- Output the result)
  comment(-- TODO: How to be sure that the result and error tags are there even when they are nil in Lua?)
  comment(-- Can force them by hand... ?)
  ident(cgilua)operator(.)ident(contentheader)operator(()string<delimiter(')content(text)delimiter(')>operator(,)string<delimiter(')content(plain)delimiter(')>operator(\))
  ident(cgilua)operator(.)ident(put)operator(() ident(json)operator(.)ident(encode)operator(() ident(jsonResponse) operator(\)) operator(\))
keyword(end)

comment<delimiter(--[[)content(
	Auctioneer Advanced
	Version: <%version%> (<%codename%>\)
	Revision: $Id: CoreMain.lua 2233 2007-09-25 03:57:33Z norganna $
	URL: http://auctioneeraddon.com/

	This is an addon for World of Warcraft that adds statistical history to the auction data that is collected
	when the auction is scanned, so that you can easily determine what price
	you will be able to sell an item for at auction or at a vendor whenever you
	mouse-over an item in the game

	License:
		This program is free software; you can redistribute it and/or
		modify it under the terms of the GNU General Public License
		as published by the Free Software Foundation; either version 2
		of the License, or (at your option\) any later version.

		This program is distributed in the hope that it will be useful,
		but WITHOUT ANY WARRANTY; without even the implied warranty of
		MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
		GNU General Public License for more details.

		You should have received a copy of the GNU General Public License
		along with this program(see GPL.txt\); if not, write to the Free Software
		Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

	Note:
		This AddOn's source code is specifically designed to work with
		World of Warcraft's interpreted AddOn system.
		You have an implicit licence to use this AddOn with these facilities
		since that is its designated purpose as per:
		http://www.fsf.org/licensing/licenses/gpl-faq.html#InterpreterIncompat
)delimiter(]])>


comment<delimiter(--[[)content(
	See CoreAPI.lua for a description of the modules API
)delimiter(]])>

keyword(if) operator(()keyword(not) ident(AucAdvanced)operator(\)) keyword(then) ident(AucAdvanced) operator(=) map<delimiter({)delimiter(})> keyword(end)
keyword(if) operator(()keyword(not) ident(AucAdvancedData)operator(\)) keyword(then) ident(AucAdvancedData) operator(=) map<delimiter({)delimiter(})> keyword(end)
keyword(if) operator(()keyword(not) ident(AucAdvancedLocal)operator(\)) keyword(then) ident(AucAdvancedLocal) operator(=) map<delimiter({)delimiter(})> keyword(end)
keyword(if) operator(()keyword(not) ident(AucAdvancedConfig)operator(\)) keyword(then) ident(AucAdvancedConfig) operator(=) map<delimiter({)delimiter(})> keyword(end)

ident(AucAdvanced)operator(.)ident(Version)operator(=)string<delimiter(")content(<%version%>)delimiter(")>operator(;)
keyword(if) operator(()ident(AucAdvanced)operator(.)ident(Version) operator(=)operator(=) string<delimiter(")content(<)delimiter(")>operator(.)operator(.)string<delimiter(")content(%version%>)delimiter(")>operator(\)) keyword(then)
	ident(AucAdvanced)operator(.)ident(Version) operator(=) string<delimiter(")content(5.0.DEV)delimiter(")>operator(;)
keyword(end)

keyword(local) local_variable(private) operator(=) map<delimiter({)delimiter(})>

comment(-- For our modular stats system, each stats engine should add their)
comment(-- subclass to AucAdvanced.Modules.<type>.<name> and store their data into their own)
comment(-- data table in AucAdvancedData.Stats.<type><name>)
keyword(if) operator(()keyword(not) ident(AucAdvanced)operator(.)ident(Modules)operator(\)) keyword(then) ident(AucAdvanced)operator(.)ident(Modules) operator(=) map<delimiter({)key(Stat)operator(=)map<inline_delimiter({)inline_delimiter(})>operator(,)key(Util)operator(=)map<inline_delimiter({)inline_delimiter(})>operator(,)key(Filter)operator(=)map<inline_delimiter({)inline_delimiter(})>delimiter(})> keyword(end)
keyword(if) operator(()keyword(not) ident(AucAdvancedData)operator(.)ident(Stats)operator(\)) keyword(then) ident(AucAdvancedData)operator(.)ident(Stats) operator(=) map<delimiter({)delimiter(})> keyword(end)
keyword(if) operator(()keyword(not) ident(AucAdvancedLocal)operator(.)ident(Stats)operator(\)) keyword(then) ident(AucAdvancedLocal)operator(.)ident(Stats) operator(=) map<delimiter({)delimiter(})> keyword(end)

keyword(function) ident(private.)function(TooltipHook)operator(()ident(vars)operator(,) ident(ret)operator(,) ident(frame)operator(,) ident(name)operator(,) ident(hyperlink)operator(,) ident(quality)operator(,) ident(quantity)operator(,) ident(cost)operator(,) ident(additional)operator(\))
	keyword(if) ident(EnhTooltip)operator(.)ident(LinkType)operator(()ident(hyperlink)operator(\)) operator(~)operator(=) string<delimiter(")content(item)delimiter(")> keyword(then)
		keyword(return) comment(-- Auctioneer hooks into item tooltips only)
	keyword(end)

	comment(-- Check to see if we need to force load scandata)
	keyword(local) local_variable(getter) operator(=) ident(AucAdvanced)operator(.)ident(Settings)operator(.)ident(GetSetting)
	keyword(if) operator(()ident(getter)operator(()string<delimiter(")content(scandata.tooltip.display)delimiter(")>operator(\)) keyword(and) ident(getter)operator(()string<delimiter(")content(scandata.force)delimiter(")>operator(\))operator(\)) keyword(then)
		ident(AucAdvanced)operator(.)ident(Scan)operator(.)ident(GetImage)operator(()operator(\))
	keyword(end)

	keyword(for) ident(system)operator(,) ident(systemMods) keyword(in) predefined(pairs)operator(()ident(AucAdvanced)operator(.)ident(Modules)operator(\)) keyword(do)
		keyword(for) ident(engine)operator(,) ident(engineLib) keyword(in) predefined(pairs)operator(()ident(systemMods)operator(\)) keyword(do)
			keyword(if) operator(()ident(engineLib)operator(.)ident(Processor)operator(\)) keyword(then) ident(engineLib)operator(.)ident(Processor)operator(()string<delimiter(")content(tooltip)delimiter(")>operator(,) ident(frame)operator(,) ident(name)operator(,) ident(hyperlink)operator(,) ident(quality)operator(,) ident(quantity)operator(,) ident(cost)operator(,) ident(additional)operator(\)) keyword(end)
		keyword(end)
	keyword(end)
keyword(end)

keyword(function) ident(private.)function(HookAH)operator(()operator(\))
	ident(hooksecurefunc)operator(()string<delimiter(")content(AuctionFrameBrowse_Update)delimiter(")>operator(,) ident(AucAdvanced)operator(.)ident(API)operator(.)ident(ListUpdate)operator(\))
	keyword(for) ident(system)operator(,) ident(systemMods) keyword(in) predefined(pairs)operator(()ident(AucAdvanced)operator(.)ident(Modules)operator(\)) keyword(do)
		keyword(for) ident(engine)operator(,) ident(engineLib) keyword(in) predefined(pairs)operator(()ident(systemMods)operator(\)) keyword(do)
			keyword(if) operator(()ident(engineLib)operator(.)ident(Processor)operator(\)) keyword(then)
				ident(engineLib)operator(.)ident(Processor)operator(()string<delimiter(")content(auctionui)delimiter(")>operator(\))
			keyword(end)
		keyword(end)
	keyword(end)
keyword(end)

keyword(function) ident(private.)function(OnLoad)operator(()ident(addon)operator(\))
	ident(addon) operator(=) ident(addon)operator(:)ident(lower)operator(()operator(\))

	comment(-- Check if the actual addon itself is loading)
	keyword(if) operator(()ident(addon) operator(=)operator(=) string<delimiter(")content(auc-advanced)delimiter(")>operator(\)) keyword(then)
		ident(Stubby)operator(.)ident(RegisterAddOnHook)operator(()string<delimiter(")content(Blizzard_AuctionUi)delimiter(")>operator(,) string<delimiter(")content(Auc-Advanced)delimiter(")>operator(,) ident(private)operator(.)ident(HookAH)operator(\))
		ident(Stubby)operator(.)ident(RegisterFunctionHook)operator(()string<delimiter(")content(EnhTooltip.AddTooltip)delimiter(")>operator(,) integer(600)operator(,) ident(private)operator(.)ident(TooltipHook)operator(\))
		keyword(for) ident(pos)operator(,) ident(module) keyword(in) predefined(ipairs)operator(()ident(AucAdvanced)operator(.)ident(EmbeddedModules)operator(\)) keyword(do)
			comment(-- These embedded modules have also just been loaded)
			ident(private)operator(.)ident(OnLoad)operator(()ident(module)operator(\))
		keyword(end)
	keyword(end)

	comment(-- Notify the actual module if it exists)
	keyword(local) local_variable(auc)operator(,) local_variable(sys)operator(,) local_variable(eng) operator(=) ident(strsplit)operator(()string<delimiter(")content(-)delimiter(")>operator(,) ident(addon)operator(\))
	keyword(if) operator(()ident(auc) operator(=)operator(=) string<delimiter(")content(auc)delimiter(")> keyword(and) ident(sys) keyword(and) ident(eng)operator(\)) keyword(then)
		keyword(for) ident(system)operator(,) ident(systemMods) keyword(in) predefined(pairs)operator(()ident(AucAdvanced)operator(.)ident(Modules)operator(\)) keyword(do)
			keyword(if) operator(()ident(sys) operator(=)operator(=) ident(system)operator(:)ident(lower)operator(()operator(\))operator(\)) keyword(then)
				keyword(for) ident(engine)operator(,) ident(engineLib) keyword(in) predefined(pairs)operator(()ident(systemMods)operator(\)) keyword(do)
					keyword(if) operator(()ident(eng) operator(=)operator(=) ident(engine)operator(:)ident(lower)operator(()operator(\)) keyword(and) ident(engineLib)operator(.)ident(OnLoad)operator(\)) keyword(then)
						ident(engineLib)operator(.)ident(OnLoad)operator(()ident(addon)operator(\))
					keyword(end)
				keyword(end)
			keyword(end)
		keyword(end)
	keyword(end)

	comment(-- Check all modules' load triggers and pass event to processors)
	keyword(for) ident(system)operator(,) ident(systemMods) keyword(in) predefined(pairs)operator(()ident(AucAdvanced)operator(.)ident(Modules)operator(\)) keyword(do)
		keyword(for) ident(engine)operator(,) ident(engineLib) keyword(in) predefined(pairs)operator(()ident(systemMods)operator(\)) keyword(do)
			keyword(if) operator(()ident(engineLib)operator(.)ident(LoadTriggers) keyword(and) ident(engineLib)operator(.)ident(LoadTriggers)operator([)ident(addon)operator(])operator(\)) keyword(then)
				keyword(if) operator(()ident(engineLib)operator(.)ident(OnLoad)operator(\)) keyword(then)
					ident(engineLib)operator(.)ident(OnLoad)operator(()ident(addon)operator(\))
				keyword(end)
			keyword(end)
			keyword(if) operator(()ident(engineLib)operator(.)ident(Processor) keyword(and) ident(auc) operator(=)operator(=) string<delimiter(")content(auc)delimiter(")> keyword(and) ident(sys) keyword(and) ident(eng)operator(\)) keyword(then)
				ident(engineLib)operator(.)ident(Processor)operator(()string<delimiter(")content(load)delimiter(")>operator(,) ident(addon)operator(\))
			keyword(end)
		keyword(end)
	keyword(end)
keyword(end)

keyword(function) ident(private.)function(OnUnload)operator(()operator(\))
	keyword(for) ident(system)operator(,) ident(systemMods) keyword(in) predefined(pairs)operator(()ident(AucAdvanced)operator(.)ident(Modules)operator(\)) keyword(do)
		keyword(for) ident(engine)operator(,) ident(engineLib) keyword(in) predefined(pairs)operator(()ident(systemMods)operator(\)) keyword(do)
			keyword(if) operator(()ident(engineLib)operator(.)ident(OnUnload)operator(\)) keyword(then)
				ident(engineLib)operator(.)ident(OnUnload)operator(()operator(\))
			keyword(end)
		keyword(end)
	keyword(end)
keyword(end)

ident(private)operator(.)ident(Schedule) operator(=) map<delimiter({)delimiter(})>
keyword(function) ident(private.)function(OnEvent)operator(()operator(.)operator(.)operator(.)operator(\))
	keyword(local) local_variable(event)operator(,) local_variable(arg) operator(=) predefined(select)operator(()integer(2)operator(,) operator(.)operator(.)operator(.)operator(\))
	keyword(if) operator(()ident(event) operator(=)operator(=) string<delimiter(")content(ADDON_LOADED)delimiter(")>operator(\)) keyword(then)
		keyword(local) local_variable(addon) operator(=) ident(string)operator(.)ident(lower)operator(()ident(arg)operator(\))
		keyword(if) operator(()ident(addon)operator(:)ident(sub)operator(()integer(1)operator(,)integer(4)operator(\)) operator(=)operator(=) string<delimiter(")content(auc-)delimiter(")>operator(\)) keyword(then)
			ident(private)operator(.)ident(OnLoad)operator(()ident(addon)operator(\))
		keyword(end)
	keyword(elseif) operator(()ident(event) operator(=)operator(=) string<delimiter(")content(AUCTION_HOUSE_SHOW)delimiter(")>operator(\)) keyword(then)
		comment(-- Do Nothing for now)
	keyword(elseif) operator(()ident(event) operator(=)operator(=) string<delimiter(")content(AUCTION_HOUSE_CLOSED)delimiter(")>operator(\)) keyword(then)
		ident(AucAdvanced)operator(.)ident(Scan)operator(.)ident(Interrupt)operator(()operator(\))
	keyword(elseif) operator(()ident(event) operator(=)operator(=) string<delimiter(")content(PLAYER_LOGOUT)delimiter(")>operator(\)) keyword(then)
		ident(AucAdvanced)operator(.)ident(Scan)operator(.)ident(Commit)operator(()predefined_constant(true)operator(\))
		ident(private)operator(.)ident(OnUnload)operator(()operator(\))
	keyword(elseif) ident(event) operator(=)operator(=) string<delimiter(")content(UNIT_INVENTORY_CHANGED)delimiter(")>
	keyword(or) ident(event) operator(=)operator(=) string<delimiter(")content(ITEM_LOCK_CHANGED)delimiter(")>
	keyword(or) ident(event) operator(=)operator(=) string<delimiter(")content(CURSOR_UPDATE)delimiter(")>
	keyword(or) ident(event) operator(=)operator(=) string<delimiter(")content(BAG_UPDATE)delimiter(")>
	keyword(then)
		ident(private)operator(.)ident(Schedule)operator([)string<delimiter(")content(inventory)delimiter(")>operator(]) operator(=) ident(GetTime)operator(()operator(\)) operator(+) float(0.15)
	keyword(end)
keyword(end)

keyword(function) ident(private.)function(OnUpdate)operator(()operator(.)operator(.)operator(.)operator(\))
	keyword(if) ident(event) operator(=)operator(=) string<delimiter(")content(inventory)delimiter(")> keyword(then)
		ident(AucAdvanced)operator(.)ident(Post)operator(.)ident(AlertBagsChanged)operator(()operator(\))
	keyword(end)

	keyword(local) local_variable(now) operator(=) ident(GetTime)operator(()operator(\))
	keyword(for) ident(event)operator(,) ident(time) keyword(in) predefined(pairs)operator(()ident(private)operator(.)ident(Schedule)operator(\)) keyword(do)
		keyword(if) ident(time) operator(>) ident(now) keyword(then)
			keyword(for) ident(system)operator(,) ident(systemMods) keyword(in) predefined(pairs)operator(()ident(AucAdvanced)operator(.)ident(Modules)operator(\)) keyword(do)
				keyword(for) ident(engine)operator(,) ident(engineLib) keyword(in) predefined(pairs)operator(()ident(systemMods)operator(\)) keyword(do)
					keyword(if) ident(engineLib)operator(.)ident(Processor) keyword(then)
						ident(engineLib)operator(.)ident(Processor)operator(()ident(event)operator(,) ident(time)operator(\))
					keyword(end)
				keyword(end)
			keyword(end)
		keyword(end)
		ident(private)operator(.)ident(Schedule)operator([)ident(event)operator(]) operator(=) predefined_constant(nil)
	keyword(end)
keyword(end)

ident(private)operator(.)ident(Frame) operator(=) ident(CreateFrame)operator(()string<delimiter(")content(Frame)delimiter(")>operator(\))
ident(private)operator(.)ident(Frame)operator(:)ident(RegisterEvent)operator(()string<delimiter(")content(ADDON_LOADED)delimiter(")>operator(\))
ident(private)operator(.)ident(Frame)operator(:)ident(RegisterEvent)operator(()string<delimiter(")content(AUCTION_HOUSE_SHOW)delimiter(")>operator(\))
ident(private)operator(.)ident(Frame)operator(:)ident(RegisterEvent)operator(()string<delimiter(")content(AUCTION_HOUSE_CLOSED)delimiter(")>operator(\))
ident(private)operator(.)ident(Frame)operator(:)ident(RegisterEvent)operator(()string<delimiter(")content(UNIT_INVENTORY_CHANGED)delimiter(")>operator(\))
ident(private)operator(.)ident(Frame)operator(:)ident(RegisterEvent)operator(()string<delimiter(")content(ITEM_LOCK_CHANGED)delimiter(")>operator(\))
ident(private)operator(.)ident(Frame)operator(:)ident(RegisterEvent)operator(()string<delimiter(")content(CURSOR_UPDATE)delimiter(")>operator(\))
ident(private)operator(.)ident(Frame)operator(:)ident(RegisterEvent)operator(()string<delimiter(")content(BAG_UPDATE)delimiter(")>operator(\))
ident(private)operator(.)ident(Frame)operator(:)ident(RegisterEvent)operator(()string<delimiter(")content(PLAYER_LOGOUT)delimiter(")>operator(\))
ident(private)operator(.)ident(Frame)operator(:)ident(SetScript)operator(()string<delimiter(")content(OnEvent)delimiter(")>operator(,) ident(private)operator(.)ident(OnEvent)operator(\))
ident(private)operator(.)ident(Frame)operator(:)ident(SetScript)operator(()string<delimiter(")content(OnUpdate)delimiter(")>operator(,) ident(private)operator(.)ident(OnUpdate)operator(\))

comment(-- Auctioneer's debug functions)
ident(AucAdvanced)operator(.)ident(Debug) operator(=) map<delimiter({)delimiter(})>
keyword(local) local_variable(addonName) operator(=) string<delimiter(")content(Auctioneer)delimiter(")> comment(-- the addon's name as it will be displayed in)
                               comment(-- the debug messages)
comment(-------------------------------------------------------------------------------)
comment(-- Prints the specified message to nLog.)
comment(--)
comment(-- syntax:)
comment(--    errorCode, message = debugPrint([message][, category][, title][, errorCode][, level]\))
comment(--)
comment(-- parameters:)
comment(--    message   - (string\) the error message)
comment(--                nil, no error message specified)
comment(--    category  - (string\) the category of the debug message)
comment(--                nil, no category specified)
comment(--    title     - (string\) the title for the debug message)
comment(--                nil, no title specified)
comment(--    errorCode - (number\) the error code)
comment(--                nil, no error code specified)
comment(--    level     - (string\) nLog message level)
comment(--                         Any nLog.levels string is valid.)
comment(--                nil, no level specified)
comment(--)
comment(-- returns:)
comment(--    errorCode - (number\) errorCode, if one is specified)
comment(--                nil, otherwise)
comment(--    message   - (string\) message, if one is specified)
comment(--                nil, otherwise)
comment(-------------------------------------------------------------------------------)
keyword(function) ident(AucAdvanced.Debug.)function(DebugPrint)operator(()ident(message)operator(,) ident(category)operator(,) ident(title)operator(,) ident(errorCode)operator(,) ident(level)operator(\))
	keyword(return) ident(DebugLib)operator(.)ident(DebugPrint)operator(()ident(addonName)operator(,) ident(message)operator(,) ident(category)operator(,) ident(title)operator(,) ident(errorCode)operator(,) ident(level)operator(\))
keyword(end)

comment(-------------------------------------------------------------------------------)
comment(-- Used to make sure that conditions are met within functions.)
comment(-- If test is false, the error message will be written to nLog and the user's)
comment(-- default chat channel.)
comment(--)
comment(-- syntax:)
comment(--    assertion = assert(test, message\))
comment(--)
comment(-- parameters:)
comment(--    test    - (any\)     false/nil, if the assertion failed)
comment(--                        anything else, otherwise)
comment(--    message - (string\)  the message which will be output to the user)
comment(--)
comment(-- returns:)
comment(--    assertion - (boolean\) true, if the test passed)
comment(--                          false, otherwise)
comment(-------------------------------------------------------------------------------)
keyword(function) ident(AucAdvanced.Debug.)function(Assert)operator(()ident(test)operator(,) ident(message)operator(\))
	keyword(return) ident(DebugLib)operator(.)ident(Assert)operator(()ident(addonName)operator(,) ident(test)operator(,) ident(message)operator(\))
keyword(end)


